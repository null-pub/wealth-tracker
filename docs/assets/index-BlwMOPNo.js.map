{"version":3,"file":"index-BlwMOPNo.js","sources":["../../src/shared/utility/sort-by-date.ts","../../src/shared/models/store/version-0/loan.ts","../../src/shared/models/store/version-3/account-data.ts","../../src/shared/models/store/version-0/account-data.ts","../../src/shared/models/store/version-0/account.ts","../../src/shared/models/store/version-0/mortgage.ts","../../src/shared/models/store/version-0/net-wealth.ts","../../src/shared/models/store/version-0/projected-income.ts","../../src/shared/models/store/version-2/projected-wealth.ts","../../src/shared/models/store/version-0/projected-wealth.ts","../../src/shared/models/store/version-1/store.ts","../../src/shared/models/store/version-2/store.ts","../../src/shared/models/store/version-3/mortgage.ts","../../src/shared/models/store/version-3/projected-income.ts","../../src/shared/models/store/version-4/projected-wealth.ts","../../src/shared/models/store/version-5/account.ts","../../src/shared/models/store/version-5/get-default.ts","../../src/shared/models/store/version-5/mortgage.ts","../../src/shared/models/store/version-5/net-wealth.ts","../../src/shared/models/store/version-5/store.ts","../../src/shared/models/store/version-0/store.ts","../../src/shared/models/store/version-3/account.ts","../../src/shared/models/store/version-3/net-wealth.ts","../../src/shared/models/store/version-3/projected-wealth.ts","../../src/shared/models/store/version-3/store.ts","../../src/shared/models/store/version-4/store.ts","../../src/shared/store/migrations.ts","../../src/shared/store/store.ts","../../src/shared/store/add-account-entry.ts","../../src/shared/store/add-projected-income.ts","../../src/shared/store/hide-account.ts","../../src/shared/store/remove-account.ts","../../src/shared/store/remove-account-entry.ts","../../src/shared/store/remove-projected-income.ts","../../src/shared/store/reset-store.ts","../../src/shared/store/set-loan.ts","../../src/shared/store/update-account-date.ts","../../src/shared/store/update-account-name.ts","../../src/shared/store/update-account-value.ts","../../src/shared/store/update-projected-income.ts","../../src/capabilities/net-wealth/new-account.tsx","../../src/shared/components/ag-grid/ag-grid.tsx","../../src/shared/utility/current-date.ts","../../src/shared/utility/format-date.ts","../../src/shared/utility/format-cash.ts","../../src/shared/components/formatters/cash.tsx","../../src/capabilities/net-wealth/tab-types/account/column-config.tsx","../../src/capabilities/net-wealth/tab-types/account/hooks/useMissingYears.ts","../../src/shared/components/confirm-dialog.tsx","../../src/capabilities/net-wealth/tab-types/account/settings.tsx","../../src/capabilities/net-wealth/tab-types/account/account.tsx","../../src/shared/utility/find-nearest-on-or-before.ts","../../src/shared/utility/mortgage-calc.ts","../../src/shared/utility/use-graph-dates.ts","../../src/capabilities/net-wealth/tab-types/mortgage/add-entry.tsx","../../src/capabilities/net-wealth/tab-types/mortgage/column-config.tsx","../../src/capabilities/net-wealth/tab-types/mortgage/settings.tsx","../../src/capabilities/net-wealth/tab-types/mortgage/mortgage.tsx","../../src/capabilities/net-wealth/account-tabs.tsx","../../src/shared/hooks/use-earliest-account-entry.ts","../../src/shared/utility/get-graph-value.ts","../../src/capabilities/net-wealth/wealth-chart/use-graph-data.ts","../../src/capabilities/net-wealth/wealth-chart/wealth-chart.tsx","../../src/capabilities/net-wealth/net-wealth.tsx","../../src/shared/components/card.tsx","../../src/shared/components/formatters/cash-range.tsx","../../src/shared/utility/format-percent.ts","../../src/shared/utility/get-probablity-color.ts","../../src/shared/components/formatters/percent.tsx","../../src/shared/components/formatters/percent-range.tsx","../../src/shared/components/formatters/value.tsx","../../src/shared/components/formatters/cluster-value.tsx","../../src/shared/utility/to-human.ts","../../src/shared/components/formatters/countdown.tsx","../../src/shared/store/scenario-store.ts","../../src/shared/utility/ckmeans/make-matrix.ts","../../src/shared/utility/ckmeans/numeric-sort.ts","../../src/shared/utility/ckmeans/unique-count-sorted.ts","../../src/shared/utility/ckmeans/ckmeans.ts","../../src/shared/utility/ckmeans/collapse.ts","../../src/shared/utility/cluster-helpers.ts","../../src/shared/hooks/use-clusters.ts","../../src/shared/utility/find-same-year.ts","../../src/shared/utility/get-actual-date.ts","../../src/shared/utility/get-default-pay-dates.ts","../../src/shared/utility/get-eligible-income-date-ranges.ts","../../src/shared/hooks/use-dates.ts","../../src/shared/models/payment-periods.ts","../../src/shared/utility/chunk-by-equality.ts","../../src/shared/constants.ts","../../src/capabilities/projected-income/spark-chart.tsx","../../src/shared/store/update-projected-income-date.ts","../../src/capabilities/projected-income/data-entry/column-config.tsx","../../src/capabilities/projected-income/data-entry/data-entry.tsx","../../src/capabilities/projected-income/income-chart.tsx","../../src/capabilities/projected-income/income-per-period.tsx","../../src/capabilities/projected-income/use-has-merit-pairs.ts","../../src/capabilities/projected-income/projected-income.tsx","../../src/shared/utility/is-future.ts","../../src/capabilities/projected-wealth/hooks/use-future-mortgage-equity.ts","../../src/capabilities/projected-wealth/hooks/use-future-retirement-contributions.ts","../../src/shared/utility/clamp.ts","../../src/capabilities/projected-wealth/hooks/use-future-savings.ts","../../src/shared/utility/get-threshold-tax-remaining.ts","../../src/capabilities/projected-wealth/hooks/use-future-social-security.ts","../../src/capabilities/projected-wealth/hooks/use-future-totals.tsx","../../src/capabilities/projected-wealth/future-events.tsx","../../src/capabilities/projected-wealth/hooks/use-times-series-wealth.ts","../../src/capabilities/projected-wealth/wealth-chart.tsx","../../src/capabilities/projected-wealth/wealth-table/colum-config.tsx","../../src/capabilities/projected-wealth/wealth-table/wealth-table.tsx","../../src/capabilities/projected-wealth/projected-wealth.tsx","../../src/shared/store/set-projected-wealth.ts","../../src/app/config/config-entry.tsx","../../src/app/config/config.tsx","../../src/app/config/scenario-explorer.tsx","../../src/app/invalid-data-dialog.tsx","../../src/shared/hooks/use-export.tsx","../../src/shared/hooks/use-import.tsx","../../src/shared/hooks/use-store-data-error.ts","../../src/app/config/system.tsx","../../src/app/config/config-modal.tsx","../../src/app/app.tsx","../../src/shared/utility/group-by-single.ts","../../src/shared/utility/get-merit-sequence.ts","../../src/shared/utility/get-scenario-size.ts","../../src/shared/web-worker/entry.ts","../../src/main.tsx"],"sourcesContent":["import { DateTime } from \"luxon\";\n\nexport const sortByDate =\n  <T>(select: (data: T) => DateTime, direction: \"asc\" | \"desc\") =>\n  (a: T, b: T) =>\n    direction === \"asc\" ? select(a).toMillis() - select(b).toMillis() : select(b).toMillis() - select(a).toMillis();\n","import { z } from \"zod\";\n\nexport const loanValidator = z.object({\n  principal: z.number(),\n  ratePct: z.number(),\n  paymentsPerYear: z.number(),\n  payment: z.number(),\n  firstPaymentDate: z.string(),\n  ownershipPct: z.number(),\n});\n\nexport type Loan = z.infer<typeof loanValidator>;\n","import { z } from \"zod\";\n\nexport const accountDataValidator = z.object({\n  date: z.string(),\n  value: z.number(),\n});\n\nexport type AccountData = z.infer<typeof accountDataValidator>;\n","import { z } from \"zod\";\n\nexport const accountDataValidator = z.object({\n  date: z.string(),\n  value: z.number(),\n  id: z.string(),\n});\n\nexport type AccountData = z.infer<typeof accountDataValidator>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const accountValidator = z.object({\n  type: z.literal(\"account\"),\n  data: z.array(accountDataValidator),\n});\n\nexport type Account = z.infer<typeof accountValidator>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\nimport { loanValidator } from \"./loan\";\n\nexport const mortgageValidator = z.object({\n  type: z.literal(\"mortgage\"),\n  loan: loanValidator.optional(),\n  data: z.array(accountDataValidator),\n});\n\nexport type Mortgage = z.infer<typeof mortgageValidator>;\n","import { z } from \"zod\";\nimport { accountValidator } from \"./account\";\nimport { mortgageValidator } from \"./mortgage\";\n\nexport const wealth = z.record(z.union([accountValidator, mortgageValidator]));\n\nexport type Wealth = z.infer<typeof wealth>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const projectedIncome = z.object({\n  timeSeries: z.object({\n    paycheck: z.array(accountDataValidator),\n    meritIncreasePct: z.array(accountDataValidator),\n    equityPct: z.array(accountDataValidator),\n    meritBonusPct: z.array(accountDataValidator),\n    meritBonus: z.array(accountDataValidator),\n    companyBonusPct: z.array(accountDataValidator),\n    companyBonus: z.array(accountDataValidator),\n    retirementBonus: z.array(accountDataValidator),\n  }),\n});\n\nexport type ProjectedIncome = z.infer<typeof projectedIncome>;\nexport type TimeSeries = keyof ProjectedIncome[\"timeSeries\"];\n","import { z } from \"zod\";\n\nexport const projectedWealth = z.object({\n  socialSecurityLimit: z.number(),\n  socialSecurityTaxRate: z.number(),\n  medicareSupplementalTaxThreshold: z.number(),\n  medicareSupplementalTaxRate: z.number(),\n  savingsPerMonth: z.number(),\n  retirementContributionPaycheck: z.number(),\n  bonusWitholdingsRate: z.number(),\n});\n\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\nexport type ProjectedWealthKeys = keyof ProjectedWealth;\n","import { z } from \"zod\";\n\nexport const projectedWealth = z.object({\n  socialSecurityLimit: z.number(),\n  socialSecurityTaxRate: z.number(),\n  medicareSupplementalTaxThreshold: z.number(),\n  medicareSupplementalTaxRate: z.number(),\n  savingsPerMonth: z.number(),\n  retirementContributionPaycheck: z.number(),\n});\n\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\nexport type ProjectedWealthKeys = keyof ProjectedWealth;\n","import { z } from \"zod\";\nimport { wealth } from \"../version-0/net-wealth\";\nimport { projectedIncome } from \"../version-0/projected-income\";\nimport { projectedWealth } from \"../version-0/projected-wealth\";\n\nexport const storeValidator = z.object({\n  version: z.literal(1),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { z } from \"zod\";\nimport { projectedIncome, wealth } from \"../version-1\";\nimport { projectedWealth } from \"./projected-wealth\";\n\nexport const storeValidator = z.object({\n  version: z.literal(2),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { z } from \"zod\";\nimport { loanValidator } from \"../version-2\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const mortgageValidator = z.object({\n  type: z.literal(\"mortgage\"),\n  loan: loanValidator.optional(),\n  data: z.array(accountDataValidator),\n});\n\nexport type Mortgage = z.infer<typeof mortgageValidator>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const projectedIncome = z.object({\n  timeSeries: z.object({\n    paycheck: z.array(accountDataValidator),\n    meritIncreasePct: z.array(accountDataValidator),\n    equityPct: z.array(accountDataValidator),\n    meritBonusPct: z.array(accountDataValidator),\n    meritBonus: z.array(accountDataValidator),\n    companyBonusPct: z.array(accountDataValidator),\n    companyBonus: z.array(accountDataValidator),\n    retirementBonus: z.array(accountDataValidator),\n  }),\n});\n\nexport type ProjectedIncome = z.infer<typeof projectedIncome>;\nexport type TimeSeries = ProjectedIncome[\"timeSeries\"];\nexport type TimeSeriesKeys = keyof ProjectedIncome[\"timeSeries\"];\n","import { z } from \"zod\";\n\nexport const projectedWealth = z.object({\n  socialSecurityLimit: z.number(),\n  socialSecurityTaxRate: z.number(),\n  medicareSupplementalTaxThreshold: z.number(),\n  medicareSupplementalTaxRate: z.number(),\n  savingsPerMonth: z.number(),\n  retirementContributionPaycheck: z.number(),\n  bonusWithholdingsRate: z.number(),\n});\n\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\nexport type ProjectedWealthKeys = keyof ProjectedWealth;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"../version-3/account-data\";\n\nexport const accountValidator = z.object({\n  type: z.literal(\"account\"),\n  data: z.array(accountDataValidator),\n  hidden: z.boolean().default(false),\n});\n\nexport type Account = z.infer<typeof accountValidator>;\n","import { Store } from \"./store\";\n\nexport const getDefaultStore = (): Store => ({\n  version: 5,\n  projectedIncome: {\n    timeSeries: {\n      paycheck: [],\n      meritBonusPct: [],\n      companyBonusPct: [\n        {\n          date: \"2014-06-15T00:00:00.000-07:00\",\n          value: 0.248,\n        },\n        {\n          date: \"2015-06-15T00:00:00.000-07:00\",\n          value: 0.248,\n        },\n        {\n          date: \"2016-06-15T00:00:00.000-07:00\",\n          value: 0.204,\n        },\n        {\n          date: \"2017-06-15T00:00:00.000-07:00\",\n          value: 0.22,\n        },\n        {\n          date: \"2018-06-15T00:00:00.000-07:00\",\n          value: 0.26,\n        },\n        {\n          date: \"2019-06-15T00:00:00.000-07:00\",\n          value: 0.242,\n        },\n        {\n          date: \"2020-06-15T00:00:00.000-07:00\",\n          value: 0.219,\n        },\n        {\n          date: \"2021-06-15T00:00:00.000-07:00\",\n          value: 0.254,\n        },\n        {\n          date: \"2022-06-15T00:00:00.000-07:00\",\n          value: 0.272,\n        },\n        {\n          date: \"2023-06-15T00:00:00.000-07:00\",\n          value: 0.168,\n        },\n        {\n          date: \"2024-06-15T00:00:00.000-07:00\",\n          value: 0.2075,\n        },\n      ],\n      meritBonus: [],\n      companyBonus: [],\n      retirementBonus: [],\n      equityPct: [],\n      meritIncreasePct: [],\n    },\n  },\n  wealth: {},\n  projectedWealth: {\n    medicareSupplementalTaxThreshold: 200_000,\n    socialSecurityLimit: 168_600,\n    socialSecurityTaxRate: 0.062,\n    medicareSupplementalTaxRate: 0.009,\n    savingsPerMonth: 0,\n    retirementContributionPaycheck: 0,\n    bonusWithholdingsRate: 0,\n  },\n});\n","import { z } from \"zod\";\nimport { loanValidator } from \"../version-2\";\nimport { accountDataValidator } from \"../version-3/account-data\";\n\nexport const mortgageValidator = z.object({\n  type: z.literal(\"mortgage\"),\n  loan: loanValidator.optional(),\n  data: z.array(accountDataValidator),\n  hidden: z.boolean().default(false),\n});\n\nexport type Mortgage = z.infer<typeof mortgageValidator>;\n","import { z } from \"zod\";\nimport { accountValidator } from \"./account\";\nimport { mortgageValidator } from \"./mortgage\";\n\nexport const wealth = z.record(z.union([accountValidator, mortgageValidator]));\n\nexport type Wealth = z.infer<typeof wealth>;\n","import { z } from \"zod\";\nimport { projectedIncome } from \"../version-3/projected-income\";\nimport { projectedWealth } from \"../version-4/projected-wealth\";\nimport { wealth } from \"./net-wealth\";\n\nexport const storeValidator = z.object({\n  version: z.literal(5),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { z } from \"zod\";\nimport { wealth } from \"./net-wealth\";\nimport { projectedIncome } from \"./projected-income\";\nimport { projectedWealth } from \"./projected-wealth\";\n\nexport const storeValidator = z.object({\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const accountValidator = z.object({\n  type: z.literal(\"account\"),\n  data: z.array(accountDataValidator),\n});\n\nexport type Account = z.infer<typeof accountValidator>;\n","import { z } from \"zod\";\nimport { accountValidator } from \"./account\";\nimport { mortgageValidator } from \"./mortgage\";\n\nexport const wealth = z.record(z.union([accountValidator, mortgageValidator]));\n\nexport type Wealth = z.infer<typeof wealth>;\n","import { z } from \"zod\";\n\nexport const projectedWealth = z.object({\n  socialSecurityLimit: z.number(),\n  socialSecurityTaxRate: z.number(),\n  medicareSupplementalTaxThreshold: z.number(),\n  medicareSupplementalTaxRate: z.number(),\n  savingsPerMonth: z.number(),\n  retirementContributionPaycheck: z.number(),\n  bonusWitholdingsRate: z.number(),\n});\n\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\nexport type ProjectedWealthKeys = keyof ProjectedWealth;\n","import { z } from \"zod\";\nimport { wealth } from \"./net-wealth\";\nimport { projectedIncome } from \"./projected-income\";\nimport { projectedWealth } from \"./projected-wealth\";\n\nexport const storeValidator = z.object({\n  version: z.literal(3),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { z } from \"zod\";\nimport { wealth } from \"../version-3/net-wealth\";\nimport { projectedIncome } from \"../version-3/projected-income\";\nimport { projectedWealth } from \"./projected-wealth\";\n\nexport const storeValidator = z.object({\n  version: z.literal(4),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { storeValidator } from \"shared/models/store/current\";\nimport { storeValidator as storeV0Validator } from \"shared/models/store/version-0\";\nimport { Store as StoreV1, storeValidator as storeV1Validator } from \"shared/models/store/version-1\";\nimport { Store as StoreV2, storeValidator as storeV2Validator } from \"shared/models/store/version-2\";\nimport { Store as StoreV3, storeValidator as storeV3Validator } from \"shared/models/store/version-3\";\nimport { Store as StoreV4, storeValidator as storeV4Validator } from \"shared/models/store/version-4\";\nimport { Store as StoreV5 } from \"shared/models/store/version-5\";\n\nexport const migration = (data: unknown) => {\n  if (data === null || data === undefined) {\n    throw new Error(\"parsed data is null or undefined\");\n  } else if (typeof data !== \"object\") {\n    throw new Error(\"Parsed data is not an object\");\n  }\n\n  if (!(\"version\" in data)) {\n    storeV0Validator.parse(data);\n    (data as StoreV1).version = 1;\n  }\n\n  if (\"version\" in data) {\n    if (data.version === 1) {\n      storeV1Validator.parse(data);\n      (data as StoreV2).version = 2;\n      (data as StoreV2).projectedWealth.bonusWitholdingsRate = 0;\n    }\n    if (data.version === 2) {\n      storeV2Validator.parse(data);\n      (data as StoreV3).version = 3;\n    }\n    if (data.version === 3) {\n      storeV3Validator.parse(data);\n      (data as StoreV4).version = 4;\n      (data as StoreV4).projectedWealth.bonusWithholdingsRate = (data as StoreV3).projectedWealth.bonusWitholdingsRate;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      delete (data as any).projectedWealth.bonusWitholdingsRate;\n    }\n    if (data.version === 4) {\n      storeV4Validator.parse(data);\n      (data as StoreV5).version = 5;\n      const keys = Object.keys((data as StoreV5).wealth);\n      for (let i = 0; i < keys.length; i++) {\n        (data as StoreV5).wealth[keys[i]].hidden = false;\n      }\n    }\n  }\n\n  const next = storeValidator.parse(data);\n  console.log(next);\n  return next;\n};\n","import { Store as CreateStore } from \"@tanstack/store\";\nimport { ZodSchema } from \"zod\";\nimport { Store, getDefaultStore, storeValidator } from \"../models/store/current\";\nimport { migration } from \"./migrations\";\n\nconst createStore = <T extends object>(validator: ZodSchema, defaultValue: T) => {\n  const key = \"store\";\n  const invalidData = \"store-invalid\";\n  const localData = localStorage.getItem(key);\n  const data = localData ? JSON.parse(localData) : defaultValue;\n  const parse = validator.safeParse(data);\n\n  if (!parse.success) {\n    try {\n      migration(data);\n      localStorage.setItem(key, JSON.stringify(data));\n    } catch (err) {\n      console.log(\"error\", err);\n      console.log(\"invalid data\", data);\n      localStorage.setItem(invalidData, JSON.stringify(data));\n      localStorage.setItem(key, JSON.stringify(defaultValue));\n    }\n  }\n\n  const store = new CreateStore<T>(data);\n  store.subscribe(() => {\n    const current = localStorage.getItem(key);\n    current && localStorage.setItem(`${key}-previous`, current);\n    localStorage.setItem(key, JSON.stringify(store.state));\n  });\n\n  return store;\n};\n\nexport const store = createStore<Store>(storeValidator, getDefaultStore());\n","import { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { Account } from \"shared/models/store/current\";\nimport { sortByDate } from \"../utility/sort-by-date\";\nimport { store } from \"./store\";\n\nexport const addAccountEntry = (accountName: string, date: DateTime<true>, amount: number) => {\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      (next.wealth[accountName] as Account).data.push({\n        date: date.startOf(\"day\").toString(),\n        value: amount,\n      });\n      next.wealth[accountName].data.sort(sortByDate((x) => DateTime.fromISO(x.date), \"asc\"));\n    });\n  });\n};\n","import { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { TimeSeriesKeys } from \"shared/models/store/current\";\nimport { sortByDate } from \"shared/utility/sort-by-date\";\nimport { store } from \"./store\";\n\nexport const addProjectedIncome = (date: DateTime, timeSeries: TimeSeriesKeys, value: number) => {\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      next.projectedIncome.timeSeries[timeSeries] = next.projectedIncome.timeSeries[timeSeries]\n        .concat({\n          date: date.startOf(\"day\").toString(),\n          value,\n        })\n        .sort(sortByDate((x) => DateTime.fromISO(x.date), \"asc\"));\n    });\n  });\n};\n","import { create } from \"mutative\";\nimport { store } from \"./store\";\n\nexport const hideAccount = (accountName: string) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      next.wealth[accountName].hidden = true;\n    });\n  });\n","import { create } from \"mutative\";\nimport { store } from \"./store\";\n\nexport const removeAccount = (accountName: string) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      delete next.wealth[accountName];\n    });\n  });\n","import { create } from \"mutative\";\nimport { AccountData } from \"shared/models/store/current\";\nimport { store } from \"./store\";\n\nexport const removeAccountEntry = (accountName: string, data: AccountData) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      const idx = prev.wealth[accountName].data.findIndex((x) => x === data);\n      if (idx < 0) {\n        throw new Error(\"failed to find data\");\n      }\n\n      next.wealth[accountName].data.splice(idx, 1);\n      return next;\n    });\n  });\n","import { create } from \"mutative\";\nimport { AccountData, TimeSeriesKeys } from \"shared/models/store/current\";\nimport { store } from \".\";\n\nexport const removeProjectedIncome = (accountName: TimeSeriesKeys, data: AccountData) => {\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      const idx = prev.projectedIncome.timeSeries[accountName].findIndex((x) => x === data);\n      if (idx < 0) {\n        throw new Error(\"failed to find data\");\n      }\n\n      next.projectedIncome.timeSeries[accountName].splice(idx, 1);\n    });\n  });\n};\n","import { getDefaultStore } from \"shared/models/store/current\";\nimport { store } from \"./store\";\n\nexport const resetStore = () => store.setState(() => getDefaultStore());\n","import { create } from \"mutative\";\nimport { Loan, Mortgage } from \"shared/models/store/current\";\nimport { store } from \"./store\";\n\nexport const setLoan = (accountName: string, loan: Loan) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      if (next.wealth[accountName].type === \"mortgage\") {\n        (next.wealth[accountName] as Mortgage).loan = loan;\n      }\n    });\n  });\n","import { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { AccountData } from \"shared/models/store/current\";\nimport { store } from \".\";\n\nexport const updateAccountDate = (accountName: string, data: AccountData, date: DateTime) => {\n  store.setState((prev) => {\n    const next = create(prev, (next) => {\n      const idx = prev.wealth[accountName]?.data.findIndex((x) => x === data);\n      if (idx < 0) {\n        throw new Error(\"failed to find data\");\n      }\n\n      next.wealth[accountName].data[idx].date = date.toISO()!;\n    });\n    return next;\n  });\n};\n","import { create } from \"mutative\";\nimport { store } from \"./store\";\n\nexport const updateAccountName = (currentAccountName: string, newAccountName: string) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      next.wealth[newAccountName] = next.wealth[currentAccountName];\n      delete next.wealth[currentAccountName];\n    });\n  });\n","import { create } from \"mutative\";\nimport { AccountData } from \"shared/models/store/current\";\nimport { store } from \".\";\n\nexport const updateAccountValue = (accountName: string, data: AccountData, value: number) => {\n  store.setState((prev) => {\n    const next = create(prev, (next) => {\n      const idx = prev.wealth[accountName]?.data.findIndex((x) => x === data);\n      if (idx < 0) {\n        throw new Error(\"failed to find data\");\n      }\n\n      next.wealth[accountName].data[idx].value = value;\n    });\n    return next;\n  });\n};\n","import { create } from \"mutative\";\nimport { AccountData, TimeSeriesKeys } from \"shared/models/store/current\";\nimport { store } from \".\";\n\nexport const updateProjectedIncome = (timeSeries: TimeSeriesKeys, data: AccountData, value: number) => {\n  store.setState((prev) => {\n    const next = create(prev, (next) => {\n      const idx = prev.projectedIncome.timeSeries[timeSeries].findIndex((x) => x === data);\n      if (idx < 0) {\n        throw new Error(\"failed to find data\");\n      }\n      next.projectedIncome.timeSeries[timeSeries][idx].value = value;\n    });\n    return next;\n  });\n};\n","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, MenuItem, Stack, TextField } from \"@mui/material\";\nimport { create } from \"mutative\";\nimport { ReactNode, forwardRef, useRef, useState } from \"react\";\nimport { store } from \"shared/store\";\n\ntype AssetType = \"account\" | \"mortgage\";\nexport const NewAccount = forwardRef<HTMLButtonElement, { children?: ReactNode }>(function NewAccount(props, ref) {\n  const [open, setOpen] = useState(false);\n  const nameRef = useRef<HTMLInputElement>(null);\n  const [error, setError] = useState(false);\n  const [accountType, setAccountType] = useState<AssetType>();\n\n  return (\n    <>\n      <Button\n        ref={ref}\n        variant=\"outlined\"\n        onClick={() => {\n          setOpen(true);\n          setError(false);\n          setAccountType(undefined);\n        }}\n        sx={{ marginTop: 3 }}\n      >\n        add account\n      </Button>\n\n      <Dialog open={open} onClose={() => setOpen(false)}>\n        <DialogTitle>Add New Account</DialogTitle>\n        <DialogContent>\n          <Stack spacing={2} margin={2}>\n            <TextField\n              select\n              color={error ? \"error\" : \"primary\"}\n              onChange={(value) => {\n                setError(false);\n                setAccountType(value.target.value as AssetType);\n              }}\n              label=\"Type\"\n            >\n              <MenuItem value=\"mortgage\">Mortgage</MenuItem>\n              <MenuItem value=\"account\">Generic Account</MenuItem>\n            </TextField>\n\n            <TextField\n              placeholder=\"Name\"\n              onChange={() => {\n                setError(false);\n              }}\n              error={error}\n              inputRef={nameRef}\n            />\n          </Stack>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            disabled={error}\n            onClick={() => {\n              store.setState((prev) => {\n                return create(prev, (next) => {\n                  if (!nameRef.current?.value || !accountType || prev.wealth[nameRef.current.value]) {\n                    setError(true);\n                    return;\n                  }\n\n                  next.wealth[nameRef.current.value] = {\n                    type: accountType,\n                    data: [],\n                    hidden: false,\n                  };\n\n                  setOpen(false);\n                });\n              });\n            }}\n          >\n            Add\n          </Button>\n        </DialogActions>\n      </Dialog>\n      {props?.children}\n    </>\n  );\n});\n","import { AgGridReact, AgGridReactProps } from \"ag-grid-react\";\n\nimport { themeQuartz } from \"ag-grid-community\";\n\n// to use myTheme in an application, pass it to the theme grid option\nconst myTheme = themeQuartz.withParams({\n  backgroundColor: \"#1f2836\",\n  browserColorScheme: \"dark\",\n  chromeBackgroundColor: {\n    ref: \"foregroundColor\",\n    mix: 0.07,\n    onto: \"backgroundColor\",\n  },\n  foregroundColor: \"#FFF\",\n  headerFontSize: 14,\n});\n\nexport const AgGrid = (props: AgGridReactProps & { id: string }) => {\n  const { id, ...rest } = props;\n  return (\n    <div id={id} style={{ height: \"100%\" }}>\n      <AgGridReact {...rest} theme={myTheme} suppressMovableColumns />\n    </div>\n  );\n};\n","import { DateTime } from \"luxon\";\n\nexport const getLocalDateTime = () => {\n  const date = DateTime.local();\n  return date;\n};\n\nexport const useLocalDateTime = () => {\n  const date = DateTime.local();\n  return date;\n};\n","export const shortDate = \"yyyy-MM-dd\";\nexport const monthDay = \"MMM dd\";\n","export const formatCashShort = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  notation: \"compact\",\n  maximumFractionDigits: 0,\n  minimumSignificantDigits: 3,\n  maximumSignificantDigits: 3,\n}).format;\n\nexport const formatCash = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  maximumFractionDigits: 0,\n}).format;\n","import { Tooltip } from \"@mui/material\";\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\n\ninterface CashProps {\n  value?: number;\n  fallback?: number;\n  disableTooltip?: boolean;\n  compact?: boolean;\n  tooltip?: string;\n  placement?:\n    | \"top\"\n    | \"right\"\n    | \"bottom\"\n    | \"left\"\n    | \"bottom-end\"\n    | \"bottom-start\"\n    | \"left-end\"\n    | \"left-start\"\n    | \"right-end\"\n    | \"right-start\"\n    | \"top-end\"\n    | \"top-start\"\n    | undefined;\n}\n\nconst format = (value: number | undefined, compact: boolean, fallback: number | undefined) => {\n  if (value === undefined) {\n    return fallback;\n  }\n  return compact ? formatCashShort(value) : formatCash(value);\n};\n\nexport const Cash = ({ value, fallback, disableTooltip, compact = true, tooltip, placement }: CashProps) => {\n  const formatted = format(value, compact, fallback);\n\n  return (\n    <Tooltip\n      placement={placement}\n      disableHoverListener={disableTooltip || !compact || !value}\n      title={[tooltip, formatCash(value!)].join(\" \")}\n    >\n      <span>{formatted}</span>\n    </Tooltip>\n  );\n};\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\nimport { Button } from \"@mui/material\";\nimport { ColDef } from \"ag-grid-community\";\nimport { CustomCellRendererProps } from \"ag-grid-react\";\nimport { DateTime } from \"luxon\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { AccountData } from \"shared/models/store/current\";\nimport { updateAccountDate, updateAccountValue } from \"shared/store\";\nimport { removeAccountEntry } from \"shared/store/remove-account-entry\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const createAccountColumnConfig = (accountName: string): ColDef<AccountData>[] => [\n  {\n    headerName: \"Date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\n    cellEditor: \"agDateCellEditor\",\n    editable: true,\n    valueSetter: (x) => {\n      const date = DateTime.fromJSDate(x.newValue);\n      if (date.isValid) {\n        updateAccountDate(accountName, x.data, date);\n      }\n      return date.isValid;\n    },\n  },\n  {\n    headerName: \"Value\",\n    valueGetter: (x) => x.data?.value,\n    valueSetter: (x) => {\n      updateAccountValue(accountName, x.data, +x.newValue);\n      return true;\n    },\n    cellRenderer: (x: CustomCellRendererProps<AccountData>) => <Cash value={x.value} placement=\"left\" />,\n    editable: true,\n    cellEditor: \"agNumberCellEditor\",\n    type: \"numericColumn\",\n  },\n  {\n    cellStyle: () => ({ display: \"inline-flex\", padding: \"0px\" }),\n    sortable: false,\n    headerName: \"\",\n    width: 80,\n    colId: \"actions\",\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\n      return (\n        <Button\n          onClick={() => {\n            props.data && removeAccountEntry(accountName, props.data);\n          }}\n          color=\"error\"\n          fullWidth\n        >\n          <DeleteForeverIcon />\n        </Button>\n      );\n    },\n  },\n];\n","import { DateTime } from \"luxon\";\nimport { Account, AccountData } from \"shared/models/store/current\";\n\nconst hasJanFistEntry = (x: AccountData, year: number) => {\n  const date = DateTime.fromISO(x.date);\n  const janFirst = DateTime.fromObject({\n    day: 1,\n    month: 1,\n    year: +year,\n  });\n\n  return date.diff(janFirst, [\"days\", \"hours\"]).days == 0;\n};\n\nexport const useMissingYears = (account: Account) => {\n  const accountItemsByYear = Object.groupBy(account.data, (x) => DateTime.fromISO(x.date).year);\n  if (account.data.length === 0) {\n    return [];\n  }\n\n  const years = Object.entries(accountItemsByYear)\n    .filter(([year, entries]) => !!entries?.find((entry) => hasJanFistEntry(entry, +year)))\n    .map(([year]) => +year)\n    .sort();\n\n  const lookup = new Set(years);\n  const missing = [];\n\n  for (let i = years[0]; i <= years[years.length - 1]; i++) {\n    !lookup.has(i) && missing.push(i);\n  }\n\n  return missing;\n};\n","import { Button, Dialog, DialogActions, DialogTitle } from \"@mui/material\";\nimport { ReactElement, useState } from \"react\";\n\ninterface ConfirmDialogProps {\n  onConfirm?: () => void;\n  title: string;\n  children: ReactElement;\n}\nexport const ConfirmDialog = (props: ConfirmDialogProps) => {\n  const { onConfirm, title, children } = props;\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <>\n      <div onClick={() => setIsOpen(true)}>{children}</div>\n      <Dialog open={isOpen} onClose={() => setIsOpen(false)}>\n        <DialogTitle sx={{ minWidth: 300, display: \"flex\", justifyContent: \"center\" }}>{title}</DialogTitle>\n        <DialogActions>\n          <Button sx={{ marginRight: \"auto\" }} onClick={() => setIsOpen(false)}>\n            Cancel\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"error\"\n            onClick={() => {\n              onConfirm?.();\n              setIsOpen(false);\n            }}\n          >\n            Confirm\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n","import Close from \"@mui/icons-material/Close\";\nimport SettingsIcon from \"@mui/icons-material/Settings\";\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Stack, TextField, Typography } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { ConfirmDialog } from \"shared/components/confirm-dialog\";\nimport { hideAccount, removeAccount, updateAccountName } from \"shared/store\";\n\ninterface AccountSettingsProps {\n  accountName: string;\n}\n\nexport const AccountSettings = (props: AccountSettingsProps) => {\n  const { accountName } = props;\n  const [nextAccountName, setNextAccountName] = useState<string>(accountName);\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    <>\n      <IconButton onClick={() => setIsOpen(true)}>\n        <SettingsIcon />\n      </IconButton>\n      <Dialog open={isOpen} onClose={() => setIsOpen(false)}>\n        <DialogTitle>\n          <Stack direction={\"row\"} width=\"100%\" alignItems={\"center\"} justify-content={\"space-between\"}>\n            <Typography variant=\"h6\">{accountName} Settings</Typography>\n            <IconButton onClick={() => setIsOpen(false)}>\n              <Close />\n            </IconButton>\n          </Stack>\n        </DialogTitle>\n        <DialogContent>\n          <Stack spacing={1} marginTop={1}>\n            <TextField\n              label=\"Account Name\"\n              value={nextAccountName}\n              onChange={(event) => setNextAccountName(event.target.value)}\n              placeholder=\"\"\n            />\n          </Stack>\n        </DialogContent>\n        <DialogActions>\n          <ConfirmDialog\n            onConfirm={() => {\n              removeAccount(accountName);\n              setIsOpen(false);\n            }}\n            title={`Confirm Deleting ${accountName} Account`}\n          >\n            <Button color=\"error\">Delete Account</Button>\n          </ConfirmDialog>\n          <ConfirmDialog\n            onConfirm={() => {\n              hideAccount(accountName);\n              setIsOpen(false);\n            }}\n            title={`Confirm Hiding ${accountName} Account`}\n          >\n            <Button sx={{ marginRight: 10 }} color=\"error\">\n              Hide Account\n            </Button>\n          </ConfirmDialog>\n          <Button\n            disabled={!nextAccountName}\n            onClick={() => {\n              setIsOpen(false);\n            }}\n          >\n            Cancel\n          </Button>\n          <Button\n            disabled={!nextAccountName}\n            onClick={() => {\n              accountName != nextAccountName && updateAccountName(accountName, nextAccountName);\n              setIsOpen(false);\n            }}\n          >\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n","import { Alert, Box, Button, InputAdornment, Paper, Stack, TextField, Typography } from \"@mui/material\";\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useState } from \"react\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { Account } from \"shared/models/store/current\";\nimport { addAccountEntry, store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { createAccountColumnConfig } from \"./column-config\";\nimport { useMissingYears } from \"./hooks/useMissingYears\";\nimport { AccountSettings } from \"./settings\";\n\nexport const AccountTab = (props: { accountName: string }) => {\n  const { accountName } = props;\n  const account = useStore(store, (state) => state.wealth[accountName]) as Account;\n  const [date, setDate] = useState(getLocalDateTime());\n  const [amount, setAmount] = useState<number | null>(null);\n  const missingYears = useMissingYears(account);\n  const hasSameDate = !!account?.data?.find((x) => date.hasSame(DateTime.fromISO(x.date), \"day\"));\n  const accountColumnConfig = createAccountColumnConfig(accountName);\n\n  const onAddEntry = () => {\n    if (amount != null) {\n      addAccountEntry(accountName, date, amount);\n      setAmount(null);\n    }\n  };\n\n  return (\n    <Stack height=\"100%\" spacing={2}>\n      <Stack direction={\"row\"}>\n        <Typography variant=\"h5\">{accountName}</Typography>\n        <Box sx={{ marginLeft: \"auto\" }}>\n          <AccountSettings key={accountName} accountName={accountName} />\n        </Box>\n      </Stack>\n      {missingYears.length > 0 && (\n        <Paper elevation={3}>\n          <Alert severity=\"warning\">Ensure an entry for Jan 1st for {missingYears.join(\", \")}</Alert>\n        </Paper>\n      )}\n\n      <DatePicker\n        format={shortDate}\n        sx={{ color: \"white\" }}\n        label=\"Date\"\n        defaultValue={date}\n        onChange={(value) => value && setDate(value)}\n        disableFuture\n      />\n      <TextField\n        label=\"amount\"\n        value={amount ?? \"\"}\n        type=\"number\"\n        onChange={(event) => (event.target.value === \"\" ? setAmount(null) : setAmount(+event.target.value))}\n        slotProps={{\n          input: {\n            startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n          },\n        }}\n        placeholder=\"0\"\n      />\n      <Button disabled={amount === null || !date || hasSameDate} onClick={onAddEntry}>\n        Add Entry\n      </Button>\n\n      <AgGrid\n        rowData={account.data}\n        columnDefs={accountColumnConfig}\n        id={account + \"-history\"}\n        autoSizeStrategy={{ type: \"fitGridWidth\" }}\n        onRowDataUpdated={(x) => x.api.sizeColumnsToFit()}\n        stopEditingWhenCellsLoseFocus\n      />\n    </Stack>\n  );\n};\n","import { DateTime } from \"luxon\";\nimport { AccountData } from \"shared/models/store/current\";\n\nexport const findNearestOnOrBefore = (date: DateTime, data: AccountData[]) => {\n  return data.find((x, idx, array) => {\n    if (idx == 0 && DateTime.fromISO(x.date).startOf(\"day\") >= date) {\n      return true;\n    }\n\n    if (\n      idx < array.length - 1 &&\n      DateTime.fromISO(x.date).startOf(\"day\") <= date &&\n      DateTime.fromISO(data[idx + 1].date).startOf(\"day\") > date\n    ) {\n      return true;\n    }\n\n    if (idx === array.length - 1) {\n      return true;\n    }\n  });\n};\n\nexport const findNearestIdxOnOrBefore = <T>(date: DateTime, data: T[], selector: (data: T) => DateTime) => {\n  return data.findIndex((x, idx, array) => {\n    if (idx == 0 && selector(x) >= date) {\n      return true;\n    }\n\n    if (idx < array.length - 1 && selector(x) <= date && selector(data[idx + 1]) > date) {\n      return true;\n    }\n\n    if (idx === array.length - 1) {\n      return true;\n    }\n  });\n};\n","import { DateTime } from \"luxon\";\nimport { Loan } from \"shared/models/store/current\";\n\nexport const calcLoanBalance = (date: DateTime, loan: Loan) => {\n  const { firstPaymentDate, paymentsPerYear, principal: principal, ratePct: rate, payment: monthlyPayment } = loan;\n  const annualizedRate = rate / paymentsPerYear;\n  const periods = date.diff(DateTime.fromISO(firstPaymentDate), \"months\").months;\n  const totalRate = (1 + annualizedRate) ** periods;\n  const balance = principal * totalRate - (monthlyPayment / annualizedRate) * (totalRate - 1);\n\n  return balance;\n};\n\nexport const calcEquity = (ownershipPct: number, houseValue: number | undefined, loanBalance: number, principal: number) => {\n  return houseValue ? houseValue * ownershipPct - loanBalance : principal - loanBalance;\n};\n","import { DateTime } from \"luxon\";\nimport { Account, Mortgage } from \"shared/models/store/current\";\n\nexport const useGraphDates = (accounts: (Account | Mortgage)[]) => {\n  return [\n    ...new Set(\n      accounts.flatMap((x) => {\n        return x.data.map((x) => DateTime.fromISO(x.date).startOf(\"day\").toISO());\n      })\n    ),\n  ]\n    .map((x) => DateTime.fromISO(x!))\n    .sort((a, b) => a.toMillis() - b.toMillis()) as DateTime<true>[];\n};\n","import { Button, InputAdornment, TextField } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useState } from \"react\";\nimport { addAccountEntry, store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\n\nexport const AddEntry = (props: { accountName: string }) => {\n  const { accountName } = props;\n  const [date, setDate] = useState<DateTime>(getLocalDateTime());\n  const [amount, setAmount] = useState<number | null>(null);\n  const account = useStore(store, (state) => state.wealth[accountName]);\n  const hasSameDate = !!account?.data?.find((x) => date?.hasSame(DateTime.fromISO(x.date), \"day\"));\n\n  const onAddEntry = () => {\n    if (date != undefined && amount != null) {\n      addAccountEntry(accountName, date, amount);\n      setAmount(null);\n    }\n  };\n\n  return (\n    <Stack spacing={2}>\n      <DatePicker\n        value={date}\n        onChange={(date: DateTime | null) => {\n          date && setDate(date);\n        }}\n        disableFuture\n      />\n      <TextField\n        label=\"amount\"\n        value={amount ?? \"\"}\n        type=\"number\"\n        onChange={(event) => (event.target.value === \"\" ? setAmount(null) : setAmount(+event.target.value))}\n        slotProps={{\n          input: {\n            startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n          },\n        }}\n        placeholder=\"0\"\n      />\n      <Button disabled={amount === null || !date || hasSameDate} onClick={onAddEntry}>\n        Add Home Value\n      </Button>\n    </Stack>\n  );\n};\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\nimport { Button } from \"@mui/material\";\nimport { ColDef } from \"ag-grid-community\";\nimport { CustomCellRendererProps } from \"ag-grid-react\";\nimport { DateTime } from \"luxon\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { AccountData } from \"shared/models/store/current\";\nimport { removeAccountEntry, updateAccountDate, updateAccountValue } from \"shared/store\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const createAccountColumnConfig = (accountName: string): ColDef<AccountData>[] => [\n  {\n    cellEditor: \"agDateCellEditor\",\n    editable: true,\n    headerName: \"Date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\n    valueSetter: (x) => {\n      const date = DateTime.fromJSDate(x.newValue);\n      if (date.isValid) {\n        updateAccountDate(accountName, x.data, date);\n      }\n      return date.isValid;\n    },\n  },\n  {\n    editable: true,\n    cellEditor: \"agNumberCellEditor\",\n    headerName: \"Home Value\",\n    cellRenderer: (x: CustomCellRendererProps<AccountData>) => <Cash value={x.value} placement=\"left\" />,\n    valueGetter: (x) => x.data?.value,\n    type: \"numericColumn\",\n    valueSetter: (x) => {\n      updateAccountValue(accountName, x.data, +x.newValue);\n      return true;\n    },\n  },\n  {\n    cellStyle: () => ({ display: \"inline-flex\", padding: \"0px\" }),\n    headerName: \"\",\n    width: 80,\n    sortable: false,\n    colId: \"actions\",\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\n      return (\n        <Button\n          onClick={() => {\n            props.data && removeAccountEntry(accountName, props.data);\n          }}\n          color=\"error\"\n          fullWidth\n        >\n          <DeleteForeverIcon />\n        </Button>\n      );\n    },\n  },\n];\n\ntype House = {\n  date: DateTime;\n  balance: number;\n  equity: number;\n};\n\nexport const mortgageColumnConfig: ColDef<House>[] = [\n  {\n    headerName: \"Date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data?.date,\n  },\n  {\n    headerName: \"Loan Balance\",\n    valueGetter: (x) => x.data?.balance.toFixed(2),\n    cellRenderer: (x: CustomCellRendererProps<House>) => <Cash value={x.value} placement=\"left\" />,\n    type: \"numericColumn\",\n  },\n  {\n    headerName: \"Equity\",\n    valueGetter: (x) => x.data?.equity.toFixed(2),\n    cellRenderer: (x: CustomCellRendererProps<House>) => <Cash value={x.value} placement=\"left\" />,\n    type: \"numericColumn\",\n  },\n];\n","import Close from \"@mui/icons-material/Close\";\nimport SettingsIcon from \"@mui/icons-material/Settings\";\nimport { Box, Button, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Stack, TextField, Typography } from \"@mui/material\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useRef, useState } from \"react\";\nimport { ConfirmDialog } from \"shared/components/confirm-dialog\";\nimport { Loan } from \"shared/models/store/version-1\";\nimport { hideAccount, removeAccount, setLoan, store, updateAccountName } from \"shared/store\";\nimport { ZodIssue, z } from \"zod\";\n\n//todo: use tantstack form\n\nconst convertPct = (value: number) => {\n  return value > 1 ? value / 100 : value;\n};\n\nconst validator: z.ZodType<Loan> = z.object({\n  principal: z.number().min(0),\n  ratePct: z.number().min(0),\n  paymentsPerYear: z.number().min(0),\n  payment: z.number().min(0),\n  firstPaymentDate: z.string().datetime({ offset: true }),\n  ownershipPct: z.number().min(0),\n});\n\ninterface AccountSettingsProps {\n  accountName: string;\n}\n\nexport const AccountSettings = (props: AccountSettingsProps) => {\n  const { accountName } = props;\n  const [nextAccountName, setNextAccountName] = useState<string>(accountName);\n  const loan = useStore(store, (x) => {\n    const account = x.wealth[accountName];\n    if (\"loan\" in account) {\n      return account.loan;\n    }\n  });\n\n  const ref = useRef<Partial<Loan>>(loan ?? {});\n  const [error, setError] = useState<Partial<Record<keyof Loan, ZodIssue>>>({});\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleClose = () => {\n    setError({});\n    ref.current = loan ?? {};\n    setIsOpen(false);\n  };\n\n  return (\n    <>\n      <IconButton onClick={() => setIsOpen(true)}>\n        <SettingsIcon />\n      </IconButton>\n      <Dialog open={isOpen} onClose={handleClose}>\n        <DialogTitle sx={{ width: \"100%\" }}>\n          <Box display={\"flex\"} width=\"100%\" alignItems={\"center\"} sx={{ justifyContent: \"space-between\" }}>\n            <Typography variant=\"h6\">{accountName} Settings</Typography>\n            <IconButton sx={{ marginLeft: \"auto\" }} onClick={handleClose}>\n              <Close />\n            </IconButton>\n          </Box>\n        </DialogTitle>\n        <DialogContent>\n          <Stack spacing={2} marginTop={1}>\n            <TextField\n              label=\"Account Name\"\n              value={nextAccountName}\n              onChange={(event) => setNextAccountName(event.target.value)}\n              placeholder=\"\"\n            />\n            <DatePicker\n              defaultValue={ref.current?.firstPaymentDate ? DateTime.fromISO(ref.current.firstPaymentDate) : null}\n              label=\"First Payment\"\n              slotProps={{\n                textField: {\n                  error: !!error.firstPaymentDate,\n                },\n              }}\n              onChange={(value: DateTime | null) => {\n                if (value) {\n                  ref.current.firstPaymentDate = value.startOf(\"day\").toISO()!;\n                }\n              }}\n            />\n            <TextField\n              error={!!error.principal}\n              defaultValue={loan?.principal}\n              onChange={(event) => {\n                ref.current.principal = +event.target.value;\n              }}\n              variant=\"outlined\"\n              label=\"Principal\"\n              type=\"number\"\n            />\n            <TextField\n              error={!!error.ratePct}\n              defaultValue={(loan?.ratePct ?? 0) * 100}\n              onChange={(event) => {\n                ref.current.ratePct = convertPct(+event.target.value);\n              }}\n              variant=\"outlined\"\n              label=\"Rate (%)\"\n              type=\"number\"\n            />\n            <TextField\n              error={!!error.paymentsPerYear}\n              defaultValue={loan?.paymentsPerYear}\n              onChange={(event) => {\n                ref.current.paymentsPerYear = +event.target.value;\n              }}\n              variant=\"outlined\"\n              label=\"Payments Per Year\"\n              type=\"number\"\n            />\n            <TextField\n              defaultValue={loan?.payment}\n              error={!!error.payment}\n              onChange={(event) => {\n                ref.current.payment = +event.target.value;\n              }}\n              variant=\"outlined\"\n              label=\"Payment\"\n              type=\"number\"\n            />\n            <TextField\n              defaultValue={loan?.ownershipPct}\n              error={!!error.ownershipPct}\n              onChange={(event) => {\n                ref.current.ownershipPct = convertPct(+event.target.value);\n              }}\n              variant=\"outlined\"\n              label=\"Ownership (%)\"\n              type=\"number\"\n            />\n          </Stack>\n        </DialogContent>\n        <DialogActions>\n          <ConfirmDialog\n            onConfirm={() => {\n              removeAccount(accountName);\n              setIsOpen(false);\n            }}\n            title={`Confirm Deleting ${accountName} Mortgage`}\n          >\n            <Button color=\"error\">Delete Account</Button>\n          </ConfirmDialog>\n          <ConfirmDialog\n            onConfirm={() => {\n              hideAccount(accountName);\n              setIsOpen(false);\n            }}\n            title={`Confirm Hiding ${accountName} Account`}\n          >\n            <Button sx={{ marginRight: 10 }} color=\"error\">\n              Hide Account\n            </Button>\n          </ConfirmDialog>\n          <Button disabled={!nextAccountName} onClick={handleClose}>\n            Cancel\n          </Button>\n          <Button\n            disabled={!nextAccountName}\n            onClick={() => {\n              const parsed = validator.safeParse(ref.current);\n              if (parsed.success) {\n                accountName != nextAccountName && updateAccountName(accountName, nextAccountName);\n                setLoan(accountName, parsed.data);\n                handleClose();\n              } else {\n                const issues = Object.groupBy(parsed.error.issues, (x) => x.path.join(\"\"));\n                setError(issues);\n              }\n            }}\n          >\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n","import { Typography } from \"@mui/material\";\nimport { Box, Stack } from \"@mui/system\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { Mortgage } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\nimport { findNearestOnOrBefore } from \"shared/utility/find-nearest-on-or-before\";\nimport { calcEquity, calcLoanBalance } from \"shared/utility/mortgage-calc\";\nimport { useGraphDates } from \"shared/utility/use-graph-dates\";\nimport { AddEntry } from \"./add-entry\";\nimport { createAccountColumnConfig, mortgageColumnConfig } from \"./column-config\";\nimport { AccountSettings } from \"./settings\";\n\nfunction createLoanValueGetter(account: Mortgage) {\n  return (date: DateTime) => {\n    const loanBalance = calcLoanBalance(date, account.loan!);\n    return {\n      date,\n      balance: loanBalance,\n      equity: calcEquity(\n        account.loan!.ownershipPct,\n        findNearestOnOrBefore(date, account.data)?.value,\n        loanBalance,\n        account.loan!.principal\n      ),\n    };\n  };\n}\n\nexport const MortgageTab = (props: { accountName: string }) => {\n  const { accountName } = props;\n  const account = useStore(store, (state) => state.wealth[accountName]) as Mortgage;\n  const allAccounts = useStore(store, (x) => x.wealth);\n  const accountColumnConfig = createAccountColumnConfig(accountName);\n  const accounts = Object.values(allAccounts);\n  const dates = useGraphDates(accounts);\n  const mortgageData = account.loan ? dates.map(createLoanValueGetter(account)) : [];\n\n  return (\n    <Stack height=\"100%\" spacing={2}>\n      <Stack direction={\"row\"}>\n        <Typography variant=\"h5\">{accountName}</Typography>\n        <Box sx={{ marginLeft: \"auto\" }}>\n          <AccountSettings key={accountName} accountName={accountName} />\n        </Box>\n      </Stack>\n      <AddEntry accountName={accountName} />\n      <AgGrid\n        rowData={account?.data ?? []}\n        columnDefs={accountColumnConfig}\n        id={account + \"-history\"}\n        autoSizeStrategy={{ type: \"fitGridWidth\" }}\n      />\n\n      <AgGrid\n        rowData={mortgageData}\n        columnDefs={mortgageColumnConfig}\n        id={account + \"-history\"}\n        autoSizeStrategy={{ type: \"fitGridWidth\" }}\n      />\n    </Stack>\n  );\n};\n","import { Box, Tab, Tabs } from \"@mui/material\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { useEffect, useState } from \"react\";\nimport { store } from \"shared/store\";\nimport { NewAccount } from \"./new-account\";\nimport { AccountTab } from \"./tab-types/account/account\";\nimport { MortgageTab } from \"./tab-types/mortgage\";\n\nexport const AccountTabs = () => {\n  const accounts = useStore(store, (x) => x.wealth);\n  const firstAccount = Object.keys(accounts)?.[0] ?? 0;\n  const [account, setAccount] = useState<string | 0>(firstAccount);\n\n  useEffect(() => {\n    if (!accounts[account]) {\n      setAccount(0);\n    }\n  }, [account, accounts]);\n\n  return (\n    <Box display=\"flex\" width=\"100%\" height=\"100%\" gap={2}>\n      <Box display={\"flex\"} flexDirection={\"column\"} flex={\"0 1 auto\"}>\n        <Tabs\n          orientation=\"vertical\"\n          value={account}\n          onChange={(_, value) => {\n            setAccount(value as string);\n          }}\n        >\n          {Object.entries(accounts)\n            .filter(([, data]) => !data.hidden)\n            .map(([account]) => {\n              return <Tab key={account} value={account} label={account} />;\n            })}\n          <Tab component={NewAccount} />\n        </Tabs>\n      </Box>\n      <Box flex={\"1 1 auto\"} overflow={\"auto\"}>\n        {typeof account === \"string\" && (\n          <>\n            {accounts[account]?.type === \"account\" && <AccountTab accountName={account} />}\n            {accounts[account]?.type === \"mortgage\" && <MortgageTab accountName={account} />}\n          </>\n        )}\n      </Box>\n    </Box>\n  );\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\n\nexport const useEarliestAccountEntry = () => {\n  const accounts = useStore(store, (x) => x.wealth);\n  return DateTime.fromMillis(\n    Object.values(accounts)\n      .map((x) => {\n        if (x.type === \"account\") {\n          return x.data[0]?.date ? DateTime.fromISO(x.data[0].date) : getLocalDateTime();\n        }\n        return getLocalDateTime();\n      })\n      .reduce((acc, curr) => Math.min(acc, curr?.toMillis() ?? Infinity), getLocalDateTime().toMillis())\n  );\n};\n","import { DateTime } from \"luxon\";\nimport { Account, Mortgage } from \"shared/models/store/current\";\nimport { findNearestOnOrBefore } from \"./find-nearest-on-or-before\";\nimport { calcEquity, calcLoanBalance } from \"./mortgage-calc\";\n\nconst getMortgageValue = (date: DateTime, mortgage: Mortgage) => {\n  if (!mortgage.loan) {\n    return 0;\n  }\n  const entry = findNearestOnOrBefore(date, mortgage.data);\n  if (entry?.date && mortgage.data[0] === entry && DateTime.fromISO(entry.date).startOf(\"day\") > date) {\n    return 0;\n  }\n  const { ownershipPct, principal } = mortgage.loan;\n  const balance = calcLoanBalance(date, mortgage.loan);\n  return calcEquity(ownershipPct, entry?.value, balance, principal);\n};\n\nconst getAccountValue = (date: DateTime, account: Account) => {\n  const entry = findNearestOnOrBefore(date, account.data);\n  if (entry?.date && account.data[0] === entry && DateTime.fromISO(entry.date).startOf(\"day\") > date) {\n    return 0;\n  }\n  return entry?.value;\n};\n\nexport const getGraphValue = (date: DateTime, account: Account | Mortgage) => {\n  switch (account.type) {\n    case \"account\":\n      return getAccountValue(date, account);\n    case \"mortgage\":\n      return getMortgageValue(date, account);\n  }\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { store } from \"shared/store\";\nimport { getGraphValue } from \"shared/utility/get-graph-value\";\nimport { useGraphDates } from \"shared/utility/use-graph-dates\";\n\nexport type GraphData = {\n  total: number;\n  date: Date;\n} & Record<string, number | null>;\n\nexport const useGraphData = () => {\n  const wealth = useStore(store, (x) => x.wealth);\n  const dates = useGraphDates(Object.values(wealth));\n  const accounts = Object.entries(wealth);\n\n  const graphData = dates.map((date) => {\n    return accounts.reduce(\n      (acc, [accountName, account]) => {\n        const value = getGraphValue(date, account);\n\n        if (value) {\n          acc[accountName] = value;\n          acc.total = acc.total + value;\n        } else {\n          acc[accountName] = null;\n        }\n\n        acc.date = date.toJSDate();\n        return acc;\n      },\n      { total: 0 } as GraphData\n    );\n  });\n\n  graphData.forEach((graphEntry, index, arr) => {\n    if (index < arr.length - 1) {\n      Object.keys(graphEntry).forEach((key) => {\n        if (graphEntry[key] === null && arr[index + 1][key] !== null) {\n          graphEntry[key] = 0;\n        }\n      });\n    }\n  });\n\n  const firstNonZero = graphData.findIndex((x) => (x[\"total\"] as number) > 0);\n  return graphData.slice(firstNonZero);\n};\n","import { Box } from \"@mui/system\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { AgAreaSeriesOptions, AgCartesianChartOptions, AgLineSeriesOptions, time } from \"ag-charts-community\";\nimport { AgCharts } from \"ag-charts-react\";\nimport { DateTime } from \"luxon\";\nimport { useState } from \"react\";\nimport { useEarliestAccountEntry } from \"shared/hooks/use-earliest-account-entry\";\nimport { store } from \"shared/store\";\nimport { useLocalDateTime } from \"shared/utility/current-date\";\nimport { formatCashShort } from \"shared/utility/format-cash\";\nimport { useGraphData } from \"./use-graph-data\";\n\nexport const WealthChart = () => {\n  const wealth = useStore(store, (x) => x.wealth);\n  const data = useGraphData();\n  const initialFromDate = useEarliestAccountEntry().startOf(\"year\");\n  const localTime = useLocalDateTime();\n  const intialToDate = localTime.endOf(\"year\");\n  const [fromDate, setFromDate] = useState<DateTime>(localTime.plus({ year: -1 }));\n  const [toDate, setToDate] = useState<DateTime>(intialToDate);\n\n  const filteredData = data.filter((x) => {\n    const year = x.date.getFullYear();\n    return year >= fromDate.year && year <= toDate.year;\n  });\n\n  const series = [\n    ...Object.entries(wealth).map(([x, data]) => {\n      return {\n        stacked: true,\n        type: \"area\",\n        xKey: \"date\",\n        yKey: x,\n        yName: `${x}${data.hidden ? \" (hidden)\" : \"\"}`,\n        tooltip: {\n          renderer: ({ datum, yKey, xKey }) => ({\n            content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCashShort(datum[yKey])}`,\n          }),\n        },\n      } as AgAreaSeriesOptions;\n    }),\n    {\n      type: \"line\",\n      xKey: \"date\",\n      yKey: \"total\",\n      yName: \"Total\",\n      tooltip: {\n        renderer: ({ datum, yKey, xKey }) => ({\n          content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCashShort(datum[yKey])}`,\n        }),\n      },\n    } as AgLineSeriesOptions,\n  ];\n\n  const options: AgCartesianChartOptions = {\n    theme: \"ag-default-dark\",\n    title: {\n      text: `Total Wealth ${formatCashShort((data[data.length - 1]?.total ?? 0) as number)}`,\n    },\n    data: filteredData,\n    axes: [\n      {\n        type: \"time\",\n        position: \"bottom\",\n        label: {\n          format: \"%Y\",\n        },\n        nice: false,\n        interval: {\n          step: time.year.every(1, { snapTo: \"start\" }),\n        },\n      },\n      {\n        type: \"number\",\n        position: \"left\",\n      },\n    ],\n    series,\n  };\n\n  return (\n    <Box position={\"relative\"} height=\"100%\" width=\"100%\">\n      <AgCharts options={options} css={{ height: \"100%\", width: \"100%\" }} />\n      <Box position={\"absolute\"} top={16} right={16} zIndex={100} width={250} display={\"flex\"} gap={2}>\n        <DatePicker\n          sx={{ backgroundColor: \"#121212\" }}\n          views={[\"year\"]}\n          label=\"From\"\n          minDate={initialFromDate}\n          maxDate={intialToDate}\n          value={fromDate}\n          onChange={(value) => {\n            value && setFromDate(value);\n          }}\n        />\n        <DatePicker\n          label=\"To\"\n          sx={{ backgroundColor: \"#121212\" }}\n          views={[\"year\"]}\n          value={toDate}\n          minDate={initialFromDate}\n          maxDate={intialToDate}\n          onChange={(value) => {\n            value && setToDate(value);\n          }}\n        />\n      </Box>\n    </Box>\n  );\n};\n","import { Box } from \"@mui/material\";\nimport { AccountTabs } from \"./account-tabs\";\nimport { WealthChart } from \"./wealth-chart\";\n\nexport const NetWealth = () => {\n  return (\n    <Box display={\"flex\"} height=\"100%\" width={\"100%\"} overflow={\"hidden\"} gap={2}>\n      <Box flex=\"0 1 auto\">\n        <Box\n          width={650}\n          height={\"100%\"}\n          sx={{\n            padding: 2,\n            border: \"1px solid rgba(255,255,255,0.1)\",\n            borderRadius: 2,\n            minWidth: 480,\n            backgroundColor: \"#121212\",\n            boxShadow: \"2px 3px 9px 1px #12121252\",\n          }}\n        >\n          <AccountTabs />\n        </Box>\n      </Box>\n      <Box flex=\"1 1 auto\" overflow={\"hidden\"} width=\"100%\" height={\"100%\"}>\n        <WealthChart />\n      </Box>\n    </Box>\n  );\n};\n","import { Box, Divider, Stack, Typography } from \"@mui/material\";\nimport { ReactNode } from \"react\";\n\nexport const Card = (props: { title: ReactNode; children?: ReactNode }) => {\n  const { title, children } = props;\n\n  return (\n    <Box\n      sx={{\n        border: \"1px solid rgba(255,255,255,0.1)\",\n        borderRadius: 2,\n        minWidth: 0,\n        backgroundColor: \"#121212\",\n        boxShadow: \"2px 3px 9px 1px #12121252\",\n\n        minHeight: \"max-content\",\n      }}\n    >\n      <Typography sx={{ paddingBottom: 1, paddingLeft: 2, paddingTop: 1, display: \"flex\" }} variant=\"h5\">\n        {title}\n      </Typography>\n\n      {children && (\n        <>\n          <Divider />\n          <Stack padding={1} direction={\"row\"} spacing={0.5} width={\"100%\"} minHeight={80} justifyContent={\"space-between\"}>\n            {children}\n          </Stack>\n        </>\n      )}\n    </Box>\n  );\n};\n","import { Box } from \"@mui/system\";\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\nimport { Cash } from \"./cash\";\n\ninterface CashProps {\n  min?: number;\n  max?: number;\n  fallback?: number;\n  disableTooltip?: boolean;\n  compact?: boolean;\n  tooltip?: string;\n\n  placement?:\n    | \"top\"\n    | \"right\"\n    | \"bottom\"\n    | \"left\"\n    | \"bottom-end\"\n    | \"bottom-start\"\n    | \"left-end\"\n    | \"left-start\"\n    | \"right-end\"\n    | \"right-start\"\n    | \"top-end\"\n    | \"top-start\"\n    | undefined;\n}\nexport const CashRange = ({ min, max, fallback, disableTooltip, compact = true }: CashProps) => {\n  const minFormatted = compact ? formatCashShort(min ?? 0) : formatCash(min ?? 0);\n  const maxFormatted = compact ? formatCashShort(max ?? 0) : formatCash(max ?? 0);\n  const showRange = minFormatted !== maxFormatted;\n\n  return (\n    <Box>\n      {!showRange && (\n        <Cash\n          fallback={fallback}\n          value={max}\n          tooltip={min != max ? `${formatCash(min ?? 0)} - ` : undefined}\n          disableTooltip={disableTooltip}\n          compact={compact}\n        />\n      )}\n      {showRange && (\n        <>\n          <Cash value={min} fallback={fallback} disableTooltip={disableTooltip} compact={compact} />\n          <span> - </span>\n          <Cash value={max} fallback={fallback} disableTooltip={disableTooltip} compact={compact} />\n        </>\n      )}\n    </Box>\n  );\n};\n","export const formatPercent = new Intl.NumberFormat(\"en-us\", {\n  style: \"percent\",\n  maximumFractionDigits: 1,\n}).format;\n\nexport const formatPercentKatex = (value: number) =>\n  new Intl.NumberFormat(\"en-us\", {\n    style: \"percent\",\n    maximumFractionDigits: 1,\n  })\n    .format(value)\n    .replace(\"%\", \"\\\\%\");\n","export const getProbablityColor = (probability?: number) => {\n  if (!probability) {\n    return \"inherit\";\n  }\n  if (probability >= 0.5) {\n    return \"green\";\n  }\n  if (probability >= 0.25) {\n    return \"orange\";\n  }\n  return \"rgb(244, 67, 54)\";\n};\n","import { Box } from \"@mui/system\";\nimport { ReactNode } from \"react\";\nimport { formatPercent } from \"shared/utility/format-percent\";\nimport { getProbablityColor } from \"shared/utility/get-probablity-color\";\n\ninterface PercentProps {\n  value?: number;\n  probability?: number;\n  fallback?: ReactNode;\n}\n\nexport const Percent = ({ value, probability, fallback }: PercentProps) => {\n  return <Box color={getProbablityColor(probability)}>{value != undefined ? formatPercent(value) : fallback}</Box>;\n};\n","import { Box } from \"@mui/system\";\nimport { Percent } from \"./percent\";\n\ninterface PercentProps {\n  min?: number;\n  max?: number;\n  fallback?: number;\n}\n\nexport const PercentRange = ({ min, max, fallback }: PercentProps) => {\n  return (\n    <Box>\n      {(max ?? 0) / (min ?? 1) <= 1.005 && <Percent fallback={fallback} value={max} />}\n      {(max ?? 0) / (min ?? 1) > 1.005 && (\n        <>\n          <Percent value={min} fallback={fallback} />\n          <span> - </span>\n          <Percent value={max} fallback={fallback} />\n        </>\n      )}\n    </Box>\n  );\n};\n","import { Box } from \"@mui/material\";\nimport { ReactNode } from \"react\";\n\ninterface CellProps {\n  children?: ReactNode;\n  secondaryValue?: ReactNode;\n  tertiaryValue?: ReactNode;\n  title: ReactNode;\n  className?: string;\n}\n\nexport const Value = (props: CellProps) => {\n  const { children, secondaryValue, tertiaryValue, title, className } = props;\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        minWidth: 145,\n        height: 64,\n        padding: \"0px 8px\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"flex-start\",\n        gap: 0.5,\n        flexShrink: 0,\n      }}\n      className={className}\n    >\n      <Box display={\"flex\"} alignItems={\"center\"} gap={0.5}>\n        <Box fontSize={18} fontWeight={700} lineHeight={\"20px\"}>\n          {children ? children : \"?\"}\n        </Box>\n        {!!(secondaryValue ?? tertiaryValue) && (\n          <Box alignSelf={\"flex-end\"} fontSize={12} fontWeight={500} lineHeight={\"16px\"} textTransform={\"uppercase\"} color={\"#888\"}>\n            {secondaryValue ?? tertiaryValue}\n          </Box>\n        )}\n      </Box>\n      <Box fontSize={12} fontWeight={500} lineHeight={\"16px\"} textTransform={\"uppercase\"}>\n        {title}\n      </Box>\n    </Box>\n  );\n};\n","import { Box } from \"@mui/material\";\nimport { DateTime } from \"luxon\";\nimport { CashRange } from \"shared/components/formatters/cash-range\";\nimport { Percent } from \"shared/components/formatters/percent\";\nimport { PercentRange } from \"shared/components/formatters/percent-range\";\nimport { Value } from \"shared/components/formatters/value\";\nimport { Cluster } from \"shared/hooks/use-clusters\";\n\ninterface ClusterValueProps extends Cluster {\n  compact?: boolean;\n  className?: string;\n}\n\nexport const ClusterValue = (props: ClusterValueProps) => {\n  const { min, max, probability, title, compact, className } = props;\n  return (\n    <Value\n      className={className}\n      title={\n        <Box display={\"flex\"} gap={1}>\n          <span>{title}</span>\n          {probability < 1 && probability >= 0 && <Percent probability={probability} value={probability} />}\n        </Box>\n      }\n    >\n      {min < 1 && min > 0 && <PercentRange min={min} max={max} />}\n      {min > 1 && <CashRange compact={compact} min={min} max={max} />}\n      {min === 0 && 0}\n    </Value>\n  );\n};\n\nexport const ClusterValues = (props: { clusters?: Cluster[]; eventDate?: DateTime; compact?: boolean }) => {\n  const { clusters, eventDate, compact = true } = props;\n  return clusters?.map((x, i, arr) => {\n    const title = arr.length === 1 && (eventDate?.diffNow().toMillis() ?? -1) > 0 ? \"Expected\" : x.title;\n    return <ClusterValue {...x} title={title} compact={compact} key={i} />;\n  });\n};\n","import { Duration, DurationUnit } from \"luxon\";\n\nexport function toHuman(dur: Duration, smallestUnit: DurationUnit = \"seconds\"): string {\n  const units = [\"years\", \"months\", \"days\", \"hours\", \"minutes\", \"seconds\", \"milliseconds\"] as DurationUnit[];\n  const smallestIdx = units.indexOf(smallestUnit);\n  const entries = Object.entries(\n    dur\n      .shiftTo(...units)\n      .normalize()\n      .toObject()\n  ).filter(([, amount], idx) => amount > 0 && idx <= smallestIdx);\n  const dur2 = Duration.fromObject(entries.length === 0 ? { [smallestUnit]: 0 } : Object.fromEntries(entries));\n  return dur2.toHuman().replaceAll(\",\", \"\");\n}\n","import { Box, Tooltip } from \"@mui/material\";\nimport { DateTime } from \"luxon\";\nimport { ReactNode } from \"react\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { toHuman } from \"shared/utility/to-human\";\n\ntype Variant = \"countdown\" | \"date\";\n\ninterface DurationProps {\n  dateTime?: DateTime;\n  children?: ReactNode;\n  variant?: Variant;\n  dateFormat?: string;\n}\n\nexport const CountDown = (props: DurationProps) => {\n  const { dateTime, children, variant = \"countdown\", dateFormat = shortDate } = props;\n\n  const countDownStr = useCountdownText(variant, dateTime, dateFormat);\n  const tooltipStr = useTooltipText(variant, dateTime, dateFormat);\n  const countDownColor = useCountDownColor(dateTime);\n\n  return dateTime && dateTime > getLocalDateTime() ? (\n    <Tooltip title={tooltipStr}>\n      <Box color={countDownColor}>{countDownStr}</Box>\n    </Tooltip>\n  ) : (\n    children\n  );\n};\n\nconst useTooltipText = (variant: Variant, dateTime: DateTime | undefined, dateFormat: string) => {\n  if (!dateTime) {\n    return \"??\";\n  }\n\n  if (variant === \"countdown\") {\n    return dateTime?.toFormat(dateFormat);\n  }\n  const diff = dateTime?.diff(getLocalDateTime(), [\"years\", \"months\", \"days\", \"hours\"]);\n\n  return toHuman(diff, \"days\");\n};\n\nconst useCountdownText = (variant: Variant, dateTime: DateTime | undefined, dateFormat: string) => {\n  if (!dateTime) {\n    return \"??\";\n  }\n\n  if (variant === \"countdown\") {\n    const diff = dateTime?.diff(getLocalDateTime(), [\"years\", \"months\", \"days\", \"hours\"]);\n\n    return toHuman(diff, \"days\");\n  }\n\n  return dateTime?.toFormat(dateFormat);\n};\n\nconst useCountDownColor = (dateTime?: DateTime) => {\n  if (!dateTime) {\n    return \"white\";\n  }\n\n  const days = dateTime.diffNow(\"days\").days;\n  if (days < 30) {\n    return \"green\";\n  } else if (days <= 60) {\n    return \"orange\";\n  }\n\n  return \"rgb(244, 67, 54)\";\n};\n","import { Store } from \"@tanstack/store\";\nimport { Scenario } from \"shared/models/scenario\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\n\ninterface ScenarioStore {\n  scenarios: Partial<Record<number, Scenario[]>>;\n  loading: boolean;\n  minYear: number;\n  maxYear: number;\n}\n\nconst year = getLocalDateTime().year;\nexport const scenarioStore = new Store<ScenarioStore>({\n  loading: true,\n  maxYear: year,\n  minYear: year,\n  scenarios: {},\n});\n","export function makeMatrix(columns: number, rows: number) {\n  const matrix = [];\n  for (let i = 0; i < columns; i++) {\n    const column = [];\n    for (let j = 0; j < rows; j++) {\n      column.push(0);\n    }\n    matrix.push(column);\n  }\n  return matrix;\n}\n","export function numericSort<T>(x: T[], selector: (data: T) => number) {\n  return x.toSorted(function (a, b) {\n    return selector(a) - selector(b);\n  });\n}\n","export function uniqueCountSorted<T>(x: T[], selector: (x: T) => number) {\n  let uniqueValueCount = 0,\n    lastSeenValue;\n  for (let i = 0; i < x.length; i++) {\n    const value = selector(x[i]);\n    if (i === 0 || value !== lastSeenValue) {\n      lastSeenValue = value;\n      uniqueValueCount++;\n    }\n  }\n  return uniqueValueCount;\n}\n","import { makeMatrix } from \"./make-matrix\";\nimport { numericSort } from \"./numeric-sort\";\nimport { uniqueCountSorted } from \"./unique-count-sorted\";\n\n/**\n * Generates incrementally computed values based on the sums and sums of\n * squares for the data array\n *\n * @private\n * @param {number} j\n * @param {number} i\n * @param {Array<number>} sums\n * @param {Array<number>} sumsOfSquares\n * @return {number}\n * @example\n * ssq(0, 1, [-1, 0, 2], [1, 1, 5]);\n */\nfunction ssq(j: number, i: number, sums: number[], sumsOfSquares: number[]) {\n  let sji; // s(j, i)\n  if (j > 0) {\n    const muji = (sums[i] - sums[j - 1]) / (i - j + 1); // mu(j, i)\n    sji = sumsOfSquares[i] - sumsOfSquares[j - 1] - (i - j + 1) * muji * muji;\n  } else {\n    sji = sumsOfSquares[i] - (sums[i] * sums[i]) / (i + 1);\n  }\n  if (sji < 0) {\n    return 0;\n  }\n  return sji;\n}\n\n/**\n * Function that recursively divides and conquers computations\n * for cluster j\n *\n * @private\n * @param {number} iMin Minimum index in cluster to be computed\n * @param {number} iMax Maximum index in cluster to be computed\n * @param {number} cluster Index of the cluster currently being computed\n * @param {Array<Array<number>>} matrix\n * @param {Array<Array<number>>} backtrackMatrix\n * @param {Array<number>} sums\n * @param {Array<number>} sumsOfSquares\n */\nfunction fillMatrixColumn(\n  iMin: number,\n  iMax: number,\n  cluster: number,\n  matrix: number[][],\n  backtrackMatrix: number[][],\n  sums: number[],\n  sumsOfSquares: number[]\n) {\n  if (iMin > iMax) {\n    return;\n  }\n\n  // Start at midpoint between iMin and iMax\n  const i = Math.floor((iMin + iMax) / 2);\n\n  matrix[cluster][i] = matrix[cluster - 1][i - 1];\n  backtrackMatrix[cluster][i] = i;\n\n  let jlow = cluster; // the lower end for j\n\n  if (iMin > cluster) {\n    jlow = Math.max(jlow, backtrackMatrix[cluster][iMin - 1] || 0);\n  }\n  jlow = Math.max(jlow, backtrackMatrix[cluster - 1][i] || 0);\n\n  let jhigh = i - 1; // the upper end for j\n  if (iMax < matrix[0].length - 1) {\n    jhigh = Math.min(jhigh, backtrackMatrix[cluster][iMax + 1] || 0);\n  }\n\n  let sji;\n  let sjlowi;\n  let ssqjlow;\n  let ssqj;\n  for (let j = jhigh; j >= jlow; --j) {\n    sji = ssq(j, i, sums, sumsOfSquares);\n\n    if (sji + matrix[cluster - 1][jlow - 1] >= matrix[cluster][i]) {\n      break;\n    }\n\n    // Examine the lower bound of the cluster border\n    sjlowi = ssq(jlow, i, sums, sumsOfSquares);\n\n    ssqjlow = sjlowi + matrix[cluster - 1][jlow - 1];\n\n    if (ssqjlow < matrix[cluster][i]) {\n      // Shrink the lower bound\n      matrix[cluster][i] = ssqjlow;\n      backtrackMatrix[cluster][i] = jlow;\n    }\n    jlow++;\n\n    ssqj = sji + matrix[cluster - 1][j - 1];\n    if (ssqj < matrix[cluster][i]) {\n      matrix[cluster][i] = ssqj;\n      backtrackMatrix[cluster][i] = j;\n    }\n  }\n\n  fillMatrixColumn(iMin, i - 1, cluster, matrix, backtrackMatrix, sums, sumsOfSquares);\n  fillMatrixColumn(i + 1, iMax, cluster, matrix, backtrackMatrix, sums, sumsOfSquares);\n}\n\n/**\n * Initializes the main matrices used in Ckmeans and kicks\n * off the divide and conquer cluster computation strategy\n *\n * @private\n * @param {Array<number>} data sorted array of values\n * @param {Array<Array<number>>} matrix\n * @param {Array<Array<number>>} backtrackMatrix\n */\nfunction fillMatrices<T>(data: T[], matrix: number[][], backtrackMatrix: number[][], selector: (x: T) => number) {\n  const nValues = matrix[0].length;\n\n  // Shift values by the median to improve numeric stability\n  const shift = selector(data[Math.floor(nValues / 2)]);\n\n  // Cumulative sum and cumulative sum of squares for all values in data array\n  const sums: number[] = [];\n  const sumsOfSquares: number[] = [];\n\n  // Initialize first column in matrix & backtrackMatrix\n  for (let i = 0, shiftedValue; i < nValues; ++i) {\n    shiftedValue = selector(data[i]) - shift;\n    if (i === 0) {\n      sums.push(shiftedValue);\n      sumsOfSquares.push(shiftedValue * shiftedValue);\n    } else {\n      sums.push(sums[i - 1] + shiftedValue);\n      sumsOfSquares.push(sumsOfSquares[i - 1] + shiftedValue * shiftedValue);\n    }\n\n    // Initialize for cluster = 0\n    matrix[0][i] = ssq(0, i, sums, sumsOfSquares);\n    backtrackMatrix[0][i] = 0;\n  }\n\n  // Initialize the rest of the columns\n  let iMin;\n  for (let cluster = 1; cluster < matrix.length; ++cluster) {\n    if (cluster < matrix.length - 1) {\n      iMin = cluster;\n    } else {\n      // No need to compute matrix[K-1][0] ... matrix[K-1][N-2]\n      iMin = nValues - 1;\n    }\n\n    fillMatrixColumn(iMin, nValues - 1, cluster, matrix, backtrackMatrix, sums, sumsOfSquares);\n  }\n}\n\n/**\n * Ckmeans clustering is an improvement on heuristic-based clustering\n * approaches like Jenks. The algorithm was developed in\n * [Haizhou Wang and Mingzhou Song](http://journal.r-project.org/archive/2011-2/RJournal_2011-2_Wang+Song.pdf)\n * as a [dynamic programming](https://en.wikipedia.org/wiki/Dynamic_programming) approach\n * to the problem of clustering numeric data into groups with the least\n * within-group sum-of-squared-deviations.\n *\n * Minimizing the difference within groups - what Wang & Song refer to as\n * `withinss`, or within sum-of-squares, means that groups are optimally\n * homogenous within and the data is split into representative groups.\n * This is very useful for visualization, where you may want to represent\n * a continuous variable in discrete color or style groups. This function\n * can provide groups that emphasize differences between data.\n *\n * Being a dynamic approach, this algorithm is based on two matrices that\n * store incrementally-computed values for squared deviations and backtracking\n * indexes.\n *\n * This implementation is based on Ckmeans 3.4.6, which introduced a new divide\n * and conquer approach that improved runtime from O(kn^2) to O(kn log(n)).\n *\n * Unlike the [original implementation](https://cran.r-project.org/web/packages/Ckmeans.1d.dp/index.html),\n * this implementation does not include any code to automatically determine\n * the optimal number of clusters: this information needs to be explicitly\n * provided.\n *\n * ### References\n * _Ckmeans.1d.dp: Optimal k-means Clustering in One Dimension by Dynamic\n * Programming_ Haizhou Wang and Mingzhou Song ISSN 2073-4859\n *\n * from The R Journal Vol. 3/2, December 2011\n * @param {Array<number>} data input data, as an array of number values\n * @param {number} nClusters number of desired classes. This cannot be\n * greater than the number of values in the data array.\n * @returns {Array<Array<number>>} clustered input\n * @throws {Error} if the number of requested clusters is higher than the size of the data\n * @example\n * ckmeans([-1, 2, -1, 2, 4, 5, 6, -1, 2, -1], 3);\n * // The input, clustered into groups of similar numbers.\n * //= [[-1, -1, -1, -1], [2, 2, 2], [4, 5, 6]]);\n */\nexport function ckmeans<T>(data: T[], nClusters: number, selector: (x: T) => number) {\n  if (nClusters === 0) {\n    return [];\n  }\n  if (nClusters > data.length) {\n    throw new Error(\"cannot generate more classes than there are data values\");\n  }\n\n  const sorted = numericSort(data, selector);\n  // we'll use this as the maximum number of clusters\n  const uniqueCount = uniqueCountSorted(sorted, selector);\n\n  // if all of the input values are identical, there's one cluster\n  // with all of the input in it.\n  if (uniqueCount === 1) {\n    return [sorted];\n  }\n\n  // named 'S' originally\n  const matrix = makeMatrix(nClusters, sorted.length);\n  // named 'J' originally\n  const backtrackMatrix = makeMatrix(nClusters, sorted.length);\n\n  // This is a dynamic programming way to solve the problem of minimizing\n  // within-cluster sum of squares. It's similar to linear regression\n  // in this way, and this calculation incrementally computes the\n  // sum of squares that are later read.\n  fillMatrices(sorted, matrix, backtrackMatrix, selector);\n\n  // The real work of Ckmeans clustering happens in the matrix generation:\n  // the generated matrices encode all possible clustering combinations, and\n  // once they're generated we can solve for the best clustering groups\n  // very quickly.\n  const clusters = [];\n  let clusterRight = backtrackMatrix[0].length - 1;\n\n  // Backtrack the clusters from the dynamic programming matrix. This\n  // starts at the bottom-right corner of the matrix (if the top-left is 0, 0),\n  // and moves the cluster target with the loop.\n  for (let cluster = backtrackMatrix.length - 1; cluster >= 0; cluster--) {\n    const clusterLeft = backtrackMatrix[cluster][clusterRight];\n\n    // fill the cluster from the sorted input by taking a slice of the\n    // array. the backtrack matrix makes this easy - it stores the\n    // indexes where the cluster should start and end.\n    clusters[cluster] = sorted.slice(clusterLeft, clusterRight + 1);\n\n    if (cluster > 0) {\n      clusterRight = clusterLeft - 1;\n    }\n  }\n\n  return clusters;\n}\n","const areSetsEqual = <T>(a: Set<T>, b: Set<T>) => [...a].every((value) => b.has(value)) && [...b].every((value) => a.has(value));\n\nexport const collapseClusters = <T>(data: T[][], selector: (data: T) => number) => {\n  const sets = data.map((x) => new Set(x.map((y) => selector(y))));\n  const result: T[][] = [];\n  for (let i = 0; i < sets.length; i++) {\n    const curr = data[i].slice();\n    for (let j = i + 1; j < sets.length; j++) {\n      if (areSetsEqual(sets[i], sets[j])) {\n        curr.push(...data[j]);\n        sets.splice(j, 1);\n        data.splice(j, 1);\n      }\n    }\n    result.push(curr);\n  }\n  return result;\n};\n","import { Cluster } from \"shared/hooks/use-clusters\";\n\nexport const scaleCluster = (cluster: Cluster | undefined, factor: number) => {\n  if (!cluster) {\n    return undefined;\n  }\n  return { ...cluster, min: cluster.min * factor, max: cluster.max * factor, median: cluster.median * factor };\n};\n\nexport const scaleClusters = (clusters: Cluster[] | undefined, factor: number): Cluster[] | undefined => {\n  return clusters?.filter((x) => x).map((x) => scaleCluster(x, factor)!);\n};\n\nexport const findMostMostLikely = (cluster: Cluster[]) => {\n  if (cluster.length === 0) {\n    return;\n  }\n  const mostLikely = cluster.reduce((acc, curr) => {\n    return curr.probability > acc.probability ? curr : acc;\n  });\n  return mostLikely;\n};\n\nexport const clusterTitle = (index: number, length: number) => {\n  if (length === 1) {\n    return \"Actual\";\n  } else if (length == 2) {\n    return [\"Low\", \"High\"][index];\n  } else {\n    return [\"Low\", \"Med\", \"High\"][index];\n  }\n};\n\nexport const getClusterCount = <T>(values: T[], selector: (x: T) => number) => {\n  const uniqeValues = new Set(values.map((x) => selector(x))).size;\n\n  if (uniqeValues < 3) {\n    return uniqeValues;\n  } else if (uniqeValues === 4) {\n    return 2;\n  }\n  return 3;\n};\n\nexport const SumClusters = (clusters: Cluster[][]) => {\n  if (clusters.length == 0) {\n    return [];\n  }\n\n  const numClusters = clusters.reduce((acc, curr) => Math.max(acc, curr.length), 0);\n  const expandedClusters = clusters\n    .filter((x) => x.length > 0)\n    .map((cluster) => {\n      if (cluster.length === 1) {\n        return new Array(numClusters).fill(cluster[0]) as Cluster[];\n      }\n      if (cluster.length === 2 && numClusters === 3) {\n        const min = cluster[0];\n        const max = cluster[1];\n        return [\n          min,\n          {\n            min: (min.min + max.min) / 2,\n            max: (min.max + max.max) / 2,\n            median: (min.median + max.median) / 2,\n            probability: (min.probability + max.probability) / 2,\n            title: \"Med\",\n          },\n          max,\n        ].map((x, _i, arr) => {\n          const probability = x.probability / arr.reduce((acc, curr) => acc + curr.probability, 0);\n          return { ...x, probability };\n        }) as Cluster[];\n      }\n      return cluster;\n    });\n\n  return expandedClusters\n    .reduce((acc, curr) => {\n      return curr.map((x, i) => ({\n        min: x.min + acc[i].min,\n        max: x.max + acc[i].max,\n        median: x.median + acc[i].median,\n        probability: x.probability + acc[i].probability,\n        title: x.title,\n      }));\n    })\n    .map((x, _i, arr) => {\n      const probability = x.probability / arr.reduce((acc, curr) => acc + curr.probability, 0);\n      return { ...x, probability };\n    })\n    .map((x, i, arr) => {\n      return { ...x, title: clusterTitle(i, arr.length) };\n    });\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { Scenario } from \"shared/models/scenario\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\nimport { ckmeans } from \"shared/utility/ckmeans\";\nimport { clusterTitle, getClusterCount } from \"shared/utility/cluster-helpers\";\nimport { max, median, min, sumSimple } from \"simple-statistics\";\n\nexport interface Cluster {\n  min: number;\n  max: number;\n  median: number;\n  probability: number;\n  title: string;\n}\n\nconst clusters = <T extends Scenario>(values: T[] | undefined, selector: (x: T) => number): Cluster[] => {\n  if (!values || values.length === 0) {\n    return [];\n  }\n\n  const totalWeight = sumSimple(values.map((x) => x.weight));\n  const clusterCount = getClusterCount(values, selector);\n  const clusters = ckmeans(values, clusterCount, selector);\n\n  const result = clusters.map((x, i, arr) => {\n    return {\n      min: min(x.map((x) => selector(x))),\n      max: max(x.map((x) => selector(x))),\n      median: median(x.map((x) => selector(x))),\n      probability: sumSimple(x.map((x) => x.weight)) / totalWeight,\n      title: clusterTitle(i, arr.length),\n    };\n  });\n\n  return result;\n};\n\nexport const useClusters = (year: number) => {\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios[year]);\n\n  if (scenarios?.length === 0) {\n    return {\n      totalPay: [],\n      meritBonus: [],\n      retirementBonus: [],\n      companyBonus: [],\n      pay: [],\n      meritIncrease: [],\n      scenarios,\n      taxablePay: [],\n    };\n  }\n\n  return {\n    totalPay: clusters(scenarios, (x) => x.totalPay),\n    meritBonus: clusters(scenarios, (x) => x.meritBonus),\n    retirementBonus: clusters(scenarios, (x) => x.retirementBonus),\n    companyBonus: clusters(scenarios, (x) => x.companyBonus),\n    pay: clusters(scenarios, (x) => x.pay.at(-1)?.value ?? 0),\n    meritIncrease: clusters(scenarios, (x) => x.meritIncreasePct + x.equityIncreasePct),\n    taxablePay: clusters(scenarios, (x) => x.taxablePay),\n    scenarios,\n  };\n};\n\nexport const useTotalPayClusters = () => {\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios);\n  const allScenarios = Object.entries(scenarios);\n  if (allScenarios.length === 0) {\n    return [];\n  }\n\n  return allScenarios.map(([year, scenarios]) => [year, clusters(scenarios, (x) => x.totalPay)]) as [string, Cluster[]][];\n};\n","import { DateTime } from \"luxon\";\nimport { AccountData } from \"shared/models/store/current\";\n\nexport function findSameYear(year: number, data: AccountData[]): AccountData | undefined;\nexport function findSameYear(date: DateTime, data: AccountData[]): AccountData | undefined;\nexport function findSameYear(date: DateTime | number, data: AccountData[]): AccountData | undefined {\n  const year = typeof date === \"number\" ? date : date.year;\n  return data.find((x) => {\n    return DateTime.fromISO(x.date).year === year;\n  });\n}\n","import { DateTime } from \"luxon\";\nimport { AccountData } from \"shared/models/store/current\";\nimport { findSameYear } from \"./find-same-year\";\n\nexport const getActualDate = (year: number | undefined, data: AccountData[]) => {\n  if (!year) {\n    return undefined;\n  }\n\n  const entry = findSameYear(year, data);\n  if (!entry) {\n    return undefined;\n  }\n\n  return DateTime.fromISO(entry.date);\n};\n","import { DateTime } from \"luxon\";\n\nexport const getDefaultPayDates = (year?: number) => {\n  return {\n    meritIncrease: DateTime.fromObject({ month: 4, day: 1, year }),\n    meritBonus: DateTime.fromObject({ month: 4, day: 15, year }),\n    companyBonus: DateTime.fromObject({ month: 6, day: 15, year }),\n    retirementBonus: DateTime.fromObject({ month: 7, day: 15, year }),\n  };\n};\n","import { DateTime } from \"luxon\";\n\nexport const getEligibleIncomeDateRanges = (year: number) => ({\n  base: {\n    start: DateTime.fromObject({ month: 1, day: 1, year }),\n    end: DateTime.fromObject({ month: 12, day: 31, year }).endOf(\"day\"),\n  },\n  meritBonus: {\n    start: DateTime.fromObject({ month: 1, day: 1, year: year - 1 }),\n    end: DateTime.fromObject({ month: 12, day: 31, year: year - 1 }).endOf(\"day\"),\n  },\n  companyBonus: {\n    start: DateTime.fromObject({ day: 1, month: 4, year: year - 1 }),\n    end: DateTime.fromObject({ day: 31, month: 3, year }).endOf(\"day\"),\n  },\n  retirementBonus: {\n    start: DateTime.fromObject({ day: 1, month: 7, year: year - 1 }),\n    end: DateTime.fromObject({ day: 30, month: 6, year }).endOf(\"day\"),\n  },\n});\n","import { useStore } from \"@tanstack/react-store\";\nimport { store } from \"shared/store\";\nimport { getActualDate } from \"shared/utility/get-actual-date\";\nimport { getDefaultPayDates } from \"shared/utility/get-default-pay-dates\";\nimport { getEligibleIncomeDateRanges } from \"shared/utility/get-eligible-income-date-ranges\";\n\nexport const useDates = (year?: number) => {\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\n  const meritBonusDate = getActualDate(year, timeSeries.meritBonus);\n  const companyBonusDate = getActualDate(year, timeSeries.companyBonus);\n  const retirementBonusDate = getActualDate(year, timeSeries.retirementBonus);\n  const defaultDates = getDefaultPayDates(year);\n\n  return {\n    meritIncrease: defaultDates.meritIncrease,\n    meritBonus: meritBonusDate ?? defaultDates.meritBonus,\n    companyBonus: companyBonusDate ?? defaultDates.companyBonus,\n    retirementBonus: retirementBonusDate ?? defaultDates.retirementBonus,\n  };\n};\n\nexport const useDateRanges = (year: number) => {\n  return getEligibleIncomeDateRanges(year);\n};\n","export interface PaymentPeriod {\n  start: string;\n  end: string;\n  payedOn: string;\n  value: number;\n  cumulative: number;\n  type: PaymentType;\n}\n\nexport const PaymentTypes = {\n  regular: \"regular\",\n  bonus: \"taxable bonus\",\n  nonTaxableBonus: \"non-taxable bonus\",\n} as const;\n\nexport type PaymentType = (typeof PaymentTypes)[keyof typeof PaymentTypes];\n","/**\n * @description: chunk an array when the selected value changes\n * @param arr : an array of T.\n * @param select : select a property of T to chunk by.\n * @returns : T[][];\n */\nexport const ChunkByEquality = <T>(arr: T[], select: (data: T) => unknown) => {\n  return arr.reduceRight((acc, curr) => {\n    if (acc.length > 0 && select(acc[0]?.[0]) === select(curr)) {\n      acc[0].unshift(curr);\n    } else {\n      acc.unshift([curr]);\n    }\n\n    return acc;\n  }, [] as T[][]);\n};\n","export const MAX_NUM_ENTRIES = 10;\n","import InsertChartIcon from \"@mui/icons-material/InsertChart\";\nimport { Tooltip } from \"@mui/material\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { AgCartesianChartOptions, AgColorType } from \"ag-charts-community\";\nimport { AgCharts } from \"ag-charts-react\";\nimport { DateTime } from \"luxon\";\nimport { TimeSeriesKeys } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\nimport { ckmeans, collapseClusters } from \"shared/utility/ckmeans\";\nimport { formatCash } from \"shared/utility/format-cash\";\nimport { formatPercent } from \"shared/utility/format-percent\";\nimport { getProbablityColor } from \"shared/utility/get-probablity-color\";\nimport { sortByDate } from \"shared/utility/sort-by-date\";\n\nexport const SparkChart = (props: { accountName: TimeSeriesKeys; variant: \"cash\" | \"percent\" | \"number\" }) => {\n  const { accountName, variant } = props;\n  const account = useStore(store, (x) => x.projectedIncome.timeSeries[accountName]);\n  const data = account.map((x) => ({ ...x, date: DateTime.fromISO(x.date).toJSDate() }));\n  const selector = (x: { date: Date; value: number }) => x.value;\n  const maxClusters = Math.min(data.length, 3);\n\n  const ckData = collapseClusters(ckmeans(data, maxClusters, selector), selector)\n    .map((x) => {\n      return x.map((y, i, subArr) => ({\n        ...y,\n        cluster: subArr.length / data.length,\n        color: getProbablityColor(subArr.length / data.length) as AgColorType,\n      }));\n    })\n    .flat()\n    .sort(sortByDate((x) => DateTime.fromJSDate(x.date), \"asc\"));\n\n  const options: AgCartesianChartOptions = {\n    data: ckData,\n    theme: \"ag-default-dark\",\n    series: [\n      {\n        type: \"line\",\n        yKey: \"value\",\n        xKey: \"date\",\n        stroke: \"white\",\n        marker: {\n          itemStyler: (params) => {\n            const fill = variant === \"percent\" ? \"#FFF\" : params.datum.color;\n            return {\n              fill,\n              size: 10,\n            };\n          },\n        },\n      },\n    ],\n    axes: [\n      {\n        type: \"number\",\n        position: \"left\",\n\n        nice: true,\n        interval: {\n          maxSpacing: 45,\n        },\n        label: {\n          formatter: (params) => {\n            return variant === \"percent\" ? formatPercent(params.value) : formatCash(params.value);\n          },\n        },\n      },\n      {\n        nice: false,\n        type: \"time\",\n        position: \"bottom\",\n        label: {\n          format: \"%Y\",\n        },\n      },\n    ],\n  };\n\n  const isDisabled = account.length === 0;\n\n  return (\n    <Tooltip\n      disableHoverListener={isDisabled}\n      disableFocusListener={isDisabled}\n      disableTouchListener={isDisabled}\n      slotProps={{\n        tooltip: {\n          sx: {\n            maxWidth: \"unset\",\n          },\n        },\n      }}\n      title={<AgCharts options={options} css={{ width: 750, height: 375 }} />}\n    >\n      <InsertChartIcon color={isDisabled ? \"disabled\" : undefined} />\n    </Tooltip>\n  );\n};\n","import { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { AccountData, TimeSeriesKeys } from \"shared/models/store/current\";\nimport { store } from \".\";\n\nexport const updateProjectedIncomeDate = (timeSeries: TimeSeriesKeys, data: AccountData, date: DateTime) => {\n  store.setState((prev) => {\n    const next = create(prev, (next) => {\n      const idx = prev.projectedIncome.timeSeries[timeSeries].findIndex((x) => x === data);\n      if (idx < 0) {\n        throw new Error(\"failed to find data\");\n      }\n\n      next.projectedIncome.timeSeries[timeSeries][idx].date = date.toISO()!;\n    });\n    return next;\n  });\n};\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\nimport UpdateIcon from \"@mui/icons-material/Update\";\nimport { Button, Tooltip } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { ColDef, ICellRendererParams } from \"ag-grid-community\";\nimport { CustomCellRendererProps } from \"ag-grid-react\";\nimport { DateTime } from \"luxon\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { Percent } from \"shared/components/formatters/percent\";\nimport { AccountData, TimeSeriesKeys } from \"shared/models/store/current\";\nimport { updateProjectedIncome } from \"shared/store\";\nimport { removeProjectedIncome } from \"shared/store/remove-projected-income\";\nimport { updateProjectedIncomeDate } from \"shared/store/update-projected-income-date\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const createAccountColumnConfig = (\n  accountName: TimeSeriesKeys,\n  variant: \"number\" | \"cash\" | \"percent\",\n  dateVariant: \"date\" | \"year\"\n): ColDef<AccountData>[] => [\n  {\n    headerName: dateVariant === \"date\" ? \"Date\" : \"Year\",\n    colId: \"date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(dateVariant === \"date\" ? shortDate : \"yyyy\"),\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\n    tooltipValueGetter: (x) => (dateVariant === \"year\" ? x.value?.toFormat(shortDate) : undefined),\n    cellRenderer: (x: ICellRendererParams<unknown, DateTime>) => {\n      return (\n        <Stack direction={\"row\"} alignItems={\"center\"}>\n          {x.valueFormatted}&nbsp;\n          {x.value && x.value > DateTime.local() && (\n            <Tooltip title=\"Future Event\">\n              <UpdateIcon htmlColor=\"orange\" />\n            </Tooltip>\n          )}\n        </Stack>\n      );\n    },\n    cellEditor: dateVariant === \"date\" ? \"agDateCellEditor\" : \"agNumberCellEditor\",\n    editable: true,\n    valueSetter: (x) => {\n      const date = dateVariant === \"date\" ? DateTime.fromJSDate(x.newValue) : DateTime.fromISO(x.data.date).set({ year: x.newValue });\n\n      if (date.isValid) {\n        updateProjectedIncomeDate(accountName, x.data, date);\n      }\n      return date.isValid;\n    },\n  },\n  {\n    headerName: \"Value\",\n    valueGetter: (x) => x.data?.value,\n    cellRenderer: (x: CustomCellRendererProps<AccountData>) =>\n      variant === \"cash\" ? <Cash compact={false} value={x.value} /> : <Percent value={x.value} />,\n    type: \"numericColumn\",\n    editable: true,\n    cellEditor: \"agNumberCellEditor\",\n    valueSetter: (x) => {\n      updateProjectedIncome(accountName, x.data, +x.newValue);\n      return true;\n    },\n  },\n  {\n    cellStyle: () => ({ display: \"inline-flex\", padding: \"0px\" }),\n    sortable: false,\n    headerName: \"\",\n    width: 80,\n    colId: \"actions\",\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\n      return (\n        <Button\n          onClick={() => {\n            props.data && removeProjectedIncome(accountName, props.data);\n          }}\n          color=\"error\"\n          fullWidth\n        >\n          <DeleteForeverIcon />\n        </Button>\n      );\n    },\n  },\n];\n","import { Box, Button, InputAdornment, Paper, Stack, TextField, Tooltip, Typography } from \"@mui/material\";\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useState } from \"react\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { MAX_NUM_ENTRIES } from \"shared/constants\";\nimport { TimeSeriesKeys } from \"shared/models/store/current\";\nimport { addProjectedIncome, store } from \"shared/store\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { SparkChart } from \"../spark-chart\";\nimport { createAccountColumnConfig } from \"./column-config\";\n\nconst disabledStyle = {\n  color: \"grey\",\n};\n\nconst DataEntry = (props: {\n  timeSeries: TimeSeriesKeys;\n  defaultDate: DateTime;\n  variant?: \"number\" | \"cash\" | \"percent\";\n  dateVariant?: \"date\" | \"year\";\n}) => {\n  const { timeSeries, defaultDate, variant = \"number\", dateVariant = \"date\" } = props;\n  const account = useStore(store, (state) => state.projectedIncome.timeSeries[timeSeries]);\n\n  const [date, setDate] = useState(defaultDate);\n  const [amount, setAmount] = useState<number | null>(null);\n\n  const hasSameDate = !!account?.find((x) => date.hasSame(DateTime.fromISO(x.date), \"day\"));\n\n  const onAddEntry = () => {\n    if (amount != null) {\n      addProjectedIncome(date, timeSeries, variant === \"percent\" ? amount / 100 : amount);\n      setAmount(null);\n    }\n  };\n\n  const accountColumnConfig = createAccountColumnConfig(timeSeries, variant, dateVariant);\n\n  return (\n    <Box display={\"flex\"} flexDirection={\"column\"} height=\"100%\">\n      <Stack spacing={2} flex=\"0 1 auto\">\n        <DatePicker\n          format={dateVariant === \"year\" ? \"yyyy\" : shortDate}\n          views={dateVariant === \"year\" ? [\"year\"] : undefined}\n          sx={{ color: \"white\" }}\n          label={dateVariant === \"date\" ? \"Date\" : \"Year\"}\n          value={date}\n          onChange={(value) => {\n            console.log(value);\n            value && setDate(value);\n          }}\n        />\n        <TextField\n          label=\"Amount\"\n          value={amount ?? \"\"}\n          placeholder=\"0\"\n          type=\"number\"\n          onChange={(event) => (event.target.value === \"\" ? setAmount(null) : setAmount(+event.target.value))}\n          slotProps={{\n            input: {\n              startAdornment: variant !== \"number\" && <InputAdornment position=\"start\">{variant === \"cash\" ? \"$\" : \"%\"}</InputAdornment>,\n            },\n          }}\n        />\n        <Button disabled={amount === null || !date || hasSameDate} onClick={onAddEntry}>\n          Add Entry\n        </Button>\n      </Stack>\n      <Box sx={{ paddingTop: 2, flex: \"1 1 auto\" }}>\n        <AgGrid\n          rowData={account ?? []}\n          columnDefs={accountColumnConfig}\n          id={account + \"-history\"}\n          autoSizeStrategy={{\n            type: \"fitGridWidth\",\n          }}\n          stopEditingWhenCellsLoseFocus\n          getRowStyle={(x) => {\n            return x.rowIndex >= MAX_NUM_ENTRIES ? disabledStyle : undefined;\n          }}\n        />\n      </Box>\n    </Box>\n  );\n};\n\ninterface LayoutProps {\n  title: string;\n  accountName: TimeSeriesKeys;\n  defaultDate: DateTime;\n  variant: \"percent\" | \"number\" | \"cash\";\n  dateVariant?: \"date\" | \"year\";\n}\n\nexport const Layout = (props: LayoutProps) => {\n  const { title, accountName, defaultDate, variant, dateVariant = \"date\" } = props;\n  return (\n    <Paper sx={{ padding: 2, height: \"100%\", width: 450, flexShrink: 0 }}>\n      <Box display=\"flex\" flexDirection=\"column\" height=\"100%\">\n        <Box flex=\"0 1 auto\" marginBottom={4} display={\"flex\"} alignItems={\"center\"} justifyContent={\"space-between\"}>\n          <Typography variant=\"h5\">\n            {title}{\" \"}\n            {variant === \"cash\" && (\n              <Tooltip\n                title={\n                  <>\n                    <span>Cash values are used in lieu of Percent values.</span>\n                    <br />\n                    <span>Cash values are considered actual payment values.</span>\n                  </>\n                }\n              >\n                <span>($)</span>\n              </Tooltip>\n            )}\n            {variant === \"percent\" && (\n              <Tooltip title=\"Percentage values are used for predictions.\">\n                <span>(%)</span>\n              </Tooltip>\n            )}\n          </Typography>\n          <SparkChart accountName={accountName} variant={variant} />\n        </Box>\n        <Box flex=\"1 1 auto\">\n          <DataEntry variant={variant} timeSeries={accountName} defaultDate={defaultDate} dateVariant={dateVariant} />\n        </Box>\n      </Box>\n    </Paper>\n  );\n};\n","import InsertChartIcon from \"@mui/icons-material/InsertChart\";\nimport { Tooltip } from \"@mui/material\";\nimport { AgCartesianChartOptions, AgLineSeriesOptions } from \"ag-charts-community\";\nimport { AgCharts } from \"ag-charts-react\";\nimport { DateTime } from \"luxon\";\nimport { useTotalPayClusters } from \"shared/hooks/use-clusters\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\nimport { formatPercent } from \"shared/utility/format-percent\";\nimport { getProbablityColor } from \"shared/utility/get-probablity-color\";\n\nexport const IncomeChart = () => {\n  const clusters = useTotalPayClusters();\n  const history = clusters\n    .filter(([year]) => +year <= getLocalDateTime().year)\n    .map(([year, x]) => ({\n      totalPay: x[0]?.median ?? 0,\n      date: DateTime.fromObject({ year: +year, month: 1, day: 1 }).toJSDate(),\n    }));\n\n  const future = clusters\n    .filter(([year]) => +year >= getLocalDateTime().year)\n    .map(([year, x]) => {\n      const data = Object.fromEntries(\n        x?.flatMap((x) => {\n          const title = x.title.toLocaleLowerCase();\n          return [\n            [title, x.median],\n            [title + \"Probability\", x.probability],\n          ];\n        })\n      );\n      return {\n        ...data,\n        date: DateTime.fromObject({ year: +year, month: 1, day: 1 }).toJSDate(),\n      };\n    });\n\n  const isDisabled = future.length + history.length === 0;\n\n  const series = [\n    {\n      type: \"line\",\n      xKey: \"date\",\n      yKey: \"totalPay\",\n      data: history,\n      yName: \"Income\",\n\n      tooltip: {\n        renderer: ({ datum, yKey, xKey }) => ({\n          content: `${DateTime.fromJSDate(datum[xKey]).year} ${formatCashShort(datum[yKey])}`,\n        }),\n      },\n    },\n    {\n      type: \"line\",\n      xKey: \"date\",\n      yKey: \"low\",\n      data: future,\n      yName: \"Low\",\n      stroke: \"grey\",\n      marker: {\n        itemStyler: (params) => {\n          const color = getProbablityColor(params.datum.lowProbability);\n          return {\n            fill: color,\n            stroke: color,\n          };\n        },\n      },\n      tooltip: {\n        renderer: ({ datum, yKey, xKey }) => ({\n          content: `${DateTime.fromJSDate(datum[xKey]).year} ${formatCashShort(datum[yKey])} ${formatPercent(datum.lowProbability)}`,\n        }),\n      },\n    },\n    {\n      marker: {\n        itemStyler: (params) => {\n          const color = getProbablityColor(params.datum.medProbability);\n          return {\n            fill: color,\n          };\n        },\n      },\n      type: \"line\",\n      stroke: \"grey\",\n      xKey: \"date\",\n      yKey: \"med\",\n      data: future,\n      yName: \"Medium\",\n      tooltip: {\n        renderer: ({ datum, yKey, xKey }) => ({\n          content: `${DateTime.fromJSDate(datum[xKey]).year} ${formatCashShort(datum[yKey])} ${formatPercent(datum.medProbability)}`,\n        }),\n      },\n    },\n    {\n      stroke: \"grey\",\n      marker: {\n        itemStyler: (params) => {\n          const color = getProbablityColor(params.datum.highProbability);\n          return {\n            fill: color,\n            stroke: color,\n          };\n        },\n      },\n      type: \"line\",\n      xKey: \"date\",\n      yKey: \"high\",\n      data: future,\n      yName: \"High\",\n      tooltip: {\n        renderer: ({ datum, yKey, xKey }) => ({\n          content: `${DateTime.fromJSDate(datum[xKey]).year} ${formatCashShort(datum[yKey])} ${formatPercent(datum.highProbability)}`,\n        }),\n      },\n    },\n  ] as AgLineSeriesOptions[];\n\n  const options: AgCartesianChartOptions = {\n    theme: \"ag-default-dark\",\n    title: {\n      text: `Income`,\n    },\n\n    axes: [\n      {\n        type: \"time\",\n        position: \"bottom\",\n        label: {\n          format: \"%Y\",\n        },\n        nice: false,\n      },\n      {\n        type: \"number\",\n        position: \"left\",\n        nice: true,\n        interval: {\n          maxSpacing: 45,\n        },\n        label: {\n          formatter: (params) => {\n            return formatCash(params.value);\n          },\n        },\n      },\n    ],\n    series,\n  };\n\n  return (\n    <Tooltip\n      disableHoverListener={isDisabled}\n      disableFocusListener={isDisabled}\n      disableTouchListener={isDisabled}\n      slotProps={{\n        tooltip: {\n          sx: {\n            maxWidth: \"unset\",\n          },\n        },\n      }}\n      title={<AgCharts options={options} css={{ height: 375, width: 750 }} />}\n    >\n      <InsertChartIcon color={isDisabled ? \"disabled\" : undefined} />\n    </Tooltip>\n  );\n};\n","import ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\nimport { Table, TableBody, TableCell, TableRow } from \"@mui/material\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { IncomePerPeriod } from \"shared/models/income-per-period\";\nimport { shortDate } from \"shared/utility/format-date\";\n\ninterface IncomePerPeriodTooltipProps {\n  incomePerPeriod: IncomePerPeriod[];\n}\n\nexport const IncomePerPeriodTooltip = (props: IncomePerPeriodTooltipProps) => {\n  const { incomePerPeriod } = props;\n  return (\n    <Table sx={{ width: \"max-content\" }}>\n      <TableBody>\n        {incomePerPeriod.map(({ start, end, value, perPayday, count }, index) => {\n          return (\n            <TableRow key={index}>\n              <TableCell>\n                <Cash value={value} compact={false} />\n              </TableCell>\n              <TableCell>{start.toFormat(shortDate)}</TableCell>\n              <TableCell>\n                <ArrowForwardIcon />\n              </TableCell>\n              <TableCell>{end.toFormat(shortDate)}</TableCell>\n              <TableCell>\n                <Cash value={perPayday} compact={false} /> x {count}\n              </TableCell>\n            </TableRow>\n          );\n        })}\n        <TableRow>\n          <TableCell colSpan={4}>Total:</TableCell>\n          <TableCell>\n            <Cash value={incomePerPeriod.reduce((acc, curr) => curr.value + acc, 0)} compact={false} />\n          </TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  );\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { store } from \"shared/store\";\nimport { findSameYear } from \"shared/utility/find-same-year\";\n\nexport const useHasMeritPairs = () => {\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\n\n  return (\n    timeSeries.meritIncreasePct.every((x) => {\n      return !!findSameYear(DateTime.fromISO(x.date).year, timeSeries.meritBonusPct);\n    }) &&\n    timeSeries.meritBonusPct.every((x) => {\n      return !!findSameYear(DateTime.fromISO(x.date).year, timeSeries.meritIncreasePct);\n    })\n  );\n};\n","import { Alert, CircularProgress, Tooltip } from \"@mui/material\";\nimport { Box, Stack } from \"@mui/system\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useState } from \"react\";\nimport { Card } from \"shared/components/card\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { ClusterValue, ClusterValues } from \"shared/components/formatters/cluster-value\";\nimport { CountDown } from \"shared/components/formatters/countdown\";\nimport { Value } from \"shared/components/formatters/value\";\nimport { useClusters } from \"shared/hooks/use-clusters\";\nimport { useDateRanges, useDates } from \"shared/hooks/use-dates\";\nimport { IncomePerPeriod } from \"shared/models/income-per-period\";\nimport { PaymentTypes } from \"shared/models/payment-periods\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\nimport { ChunkByEquality } from \"shared/utility/chunk-by-equality\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { monthDay } from \"shared/utility/format-date\";\nimport { Layout } from \"./data-entry/data-entry\";\nimport { IncomeChart } from \"./income-chart\";\nimport { IncomePerPeriodTooltip } from \"./income-per-period\";\nimport { useHasMeritPairs } from \"./use-has-merit-pairs\";\n\nconst usePayments = (year: number) => {\n  const dateRanges = useDateRanges(year);\n  const clusters = useClusters(year);\n\n  if (clusters.pay.length === 1) {\n    return {};\n  }\n  const firstScenario = clusters.scenarios?.at(0);\n  const payPeriods =\n    firstScenario?.payments\n      .filter((x) => x.type === PaymentTypes.regular)\n      .filter((x) => {\n        const payedOn = DateTime.fromISO(x.payedOn);\n        return payedOn >= dateRanges.base.start && payedOn <= dateRanges.base.end;\n      }) ?? [];\n\n  const paychecks = ChunkByEquality(payPeriods, (x) => x.value).map((curr) => {\n    return {\n      start: DateTime.fromISO(curr[0].payedOn),\n      end: DateTime.fromISO(curr[curr.length - 1].payedOn),\n      value: curr.reduce((acc, curr) => acc + curr.value, 0),\n      perPayday: curr[0].value,\n      count: curr.length,\n      type: curr[0].type,\n    } as IncomePerPeriod;\n  });\n\n  return { aprToApr: firstScenario?.aprToApr, basePay: firstScenario?.basePay, paychecks };\n};\n\nexport const ProjectedIncome = () => {\n  const [selectedYear, setSelectedYear] = useState(getLocalDateTime().year);\n  const { aprToApr, basePay, paychecks } = usePayments(selectedYear);\n  const clusters = useClusters(selectedYear);\n  const hasMissingPairs = useHasMeritPairs();\n  const dates = useDates(selectedYear);\n  const scenarios = useStore(scenarioStore);\n\n  return (\n    <Box display=\"flex\" flexDirection=\"row\" height=\"100%\" width={\"100%\"}>\n      <Box flex=\"0 1 auto\" maxWidth={500} height=\"100%\">\n        <Stack gap={2} direction={\"column\"} overflow={\"auto\"} height=\"100%\" paddingRight={1} minWidth={500}>\n          {!hasMissingPairs && <Alert severity=\"error\">Every Merit Increase must have a paired Merit Bonus percent</Alert>}\n          <Card\n            title={\n              <Box display=\"flex\" alignItems={\"center\"} gap={2} width={\"100%\"}>\n                <span>Income</span>\n                <CountDown dateTime={dates.companyBonus} variant=\"date\" dateFormat={monthDay} />\n                <IncomeChart />\n                <Box sx={{ display: \"flex\", marginLeft: \"auto\", alignItems: \"center\", flexWrap: \"wrap\" }}>\n                  {scenarios.loading && <CircularProgress style={{ width: 20, height: 20 }} />}\n                </Box>\n                <DatePicker\n                  sx={{ width: 90, marginRight: 2 }}\n                  label={\"year\"}\n                  views={[\"year\"]}\n                  minDate={getLocalDateTime().set({ year: scenarios.minYear })}\n                  maxDate={getLocalDateTime().set({ year: scenarios.maxYear })}\n                  defaultValue={getLocalDateTime()}\n                  slotProps={{\n                    textField: {\n                      variant: \"standard\",\n                      label: \"\",\n                    },\n                  }}\n                  onChange={(value) => {\n                    setSelectedYear(value?.year ?? getLocalDateTime().year);\n                  }}\n                />\n              </Box>\n            }\n          >\n            <ClusterValues clusters={clusters.totalPay} eventDate={dates.companyBonus} />\n          </Card>\n          <Card\n            title={\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\n                <span>Paycheck</span>\n                <CountDown dateTime={dates.meritIncrease} variant=\"date\" dateFormat={monthDay} />\n              </Box>\n            }\n          >\n            {!basePay && <ClusterValues clusters={clusters.pay} eventDate={dates.meritIncrease} compact={false} />}\n            {basePay && (\n              <>\n                <ClusterValue {...clusters.pay[0]} title={\"Paycheck\"} compact={false} />\n                <Tooltip\n                  placement=\"bottom\"\n                  componentsProps={{\n                    tooltip: {\n                      sx: {\n                        maxWidth: \"none\",\n                      },\n                    },\n                  }}\n                  title={paychecks && <IncomePerPeriodTooltip incomePerPeriod={paychecks} />}\n                >\n                  <div>\n                    <Value title={\"Base Pay\"}>\n                      <Cash disableTooltip value={basePay} />\n                    </Value>\n                  </div>\n                </Tooltip>\n                <Value title={\"APR to APR\"}>\n                  <Cash value={aprToApr} />\n                </Value>\n              </>\n            )}\n          </Card>\n          <Card\n            title={\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\n                <span>Merit Increase</span>\n                <CountDown dateTime={dates.meritIncrease} variant=\"date\" dateFormat={monthDay} />\n              </Box>\n            }\n          >\n            <ClusterValues clusters={clusters.meritIncrease} eventDate={dates.meritIncrease} />\n          </Card>\n\n          <Card\n            title={\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\n                <span>Merit Bonus</span>\n                <CountDown dateTime={dates.meritBonus} variant=\"date\" dateFormat={monthDay} />\n              </Box>\n            }\n          >\n            <ClusterValues clusters={clusters.meritBonus} eventDate={dates.meritBonus} />\n          </Card>\n          <Card\n            title={\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\n                <span>Company Bonus</span>\n                <CountDown dateTime={dates.companyBonus} variant=\"date\" dateFormat={monthDay} />\n              </Box>\n            }\n          >\n            <ClusterValues clusters={clusters.companyBonus} eventDate={dates.companyBonus} />\n          </Card>\n          <Card\n            title={\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\n                <span>Retirement Bonus</span>\n                <CountDown dateTime={dates.retirementBonus} variant=\"date\" dateFormat={monthDay} />\n              </Box>\n            }\n          >\n            <ClusterValues clusters={clusters.retirementBonus} eventDate={dates.retirementBonus} />\n          </Card>\n        </Stack>\n      </Box>\n      <Box flex=\"1 1 auto\" overflow={\"auto\"} paddingBottom={2} paddingLeft={1}>\n        <Box display={\"flex\"} height={\"100%\"} width={\"100%\"} gap={2}>\n          <Layout\n            dateVariant=\"year\"\n            accountName=\"paycheck\"\n            variant=\"cash\"\n            defaultDate={DateTime.fromObject({\n              day: 1,\n              month: 4,\n              year: selectedYear,\n            })}\n            title=\"Income Per Paycheck\"\n          />\n          <Layout\n            title=\"Merit Increase\"\n            accountName=\"meritIncreasePct\"\n            variant=\"percent\"\n            defaultDate={dates.meritIncrease}\n            dateVariant=\"year\"\n          />\n          <Layout title=\"Equity Increase\" accountName=\"equityPct\" variant=\"percent\" defaultDate={dates.meritIncrease} dateVariant=\"year\" />\n          <Layout title=\"Merit Bonus\" accountName=\"meritBonusPct\" variant=\"percent\" defaultDate={dates.meritBonus} dateVariant=\"year\" />\n          <Layout title=\"Merit Bonus\" accountName=\"meritBonus\" variant=\"cash\" defaultDate={dates.meritBonus} />\n          <Layout\n            title=\"Company Bonus Factor\"\n            accountName=\"companyBonusPct\"\n            defaultDate={dates.companyBonus}\n            variant=\"percent\"\n            dateVariant=\"year\"\n          />\n          <Layout title=\"Company Bonus\" accountName=\"companyBonus\" defaultDate={dates.companyBonus} variant=\"cash\" />\n          <Layout title=\"Retirement Bonus\" accountName=\"retirementBonus\" defaultDate={dates.retirementBonus} variant=\"cash\" />\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n","import { DateTime } from \"luxon\";\n\nexport const isFuture = (date: DateTime) => date.diffNow(\"milliseconds\").milliseconds > 0;\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { Mortgage } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\nimport { useLocalDateTime } from \"shared/utility/current-date\";\nimport { calcLoanBalance } from \"shared/utility/mortgage-calc\";\n\nexport const useFutureMortgageEquity = (year: number) => {\n  const accounts = useStore(store, (x) => x.wealth);\n  const mortgages = Object.values(accounts).filter((x) => x.type === \"mortgage\") as Mortgage[];\n  const localDate = useLocalDateTime();\n  const januaryFirstSelectedYear = DateTime.fromObject({ month: 1, day: 1, year });\n\n  if (year < localDate.year) {\n    return 0;\n  }\n\n  return mortgages\n    .map((x) => {\n      if (!x.loan) {\n        return 0;\n      }\n\n      const startDate = localDate < januaryFirstSelectedYear ? januaryFirstSelectedYear : localDate.endOf(\"month\");\n      const endDate = startDate.endOf(\"year\");\n\n      return calcLoanBalance(startDate, x.loan) - calcLoanBalance(endDate, x.loan);\n    })\n    .reduce((acc, curr) => acc + curr, 0);\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { store } from \"shared/store\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\n\nconst paymentsPerYear = 26;\n\nexport const useFutureRetirementContributions = (year: number) => {\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios[year]);\n  const retirementContribution = useStore(store, (x) => x.projectedWealth.retirementContributionPaycheck);\n  const remainingRegularPayments = scenarios?.at(0)?.remainingRegularPayments ?? 0;\n\n  return {\n    remaining: Math.min(remainingRegularPayments, paymentsPerYear) * retirementContribution,\n    perPaycheck: retirementContribution,\n  };\n};\n","export const clamp = (min: number, value: number, max: number) => Math.min(Math.max(min, value), max);\n","import { useStore } from \"@tanstack/react-store\";\nimport { useDateRanges } from \"shared/hooks/use-dates\";\nimport { store } from \"shared/store\";\nimport { clamp } from \"shared/utility/clamp\";\n\nconst monthsInYear = 12;\n\nexport const useFutureSavings = (year: number) => {\n  const config = useStore(store, (x) => x.projectedWealth);\n  const dateRanges = useDateRanges(year);\n  const monthsRemaining = dateRanges.base.end.diffNow(\"months\").months;\n\n  return {\n    remaining: config.savingsPerMonth * clamp(0, monthsRemaining, monthsInYear),\n    perMonth: config.savingsPerMonth,\n  };\n};\n","import { DateTime } from \"luxon\";\nimport { Scenario } from \"shared/models/scenario\";\nimport { isFuture } from \"./is-future\";\n\nexport const getThresholdTaxRemaining = (taxRate: number, threshold: number, scenario: Scenario) => {\n  const remaining = scenario.payments\n    .slice(scenario.currentPaymentIdx)\n    .filter((x) => x.cumulative >= threshold && isFuture(DateTime.fromISO(x.payedOn)))\n    .reduce((acc, curr) => {\n      return acc + Math.min(curr.value, curr.cumulative - threshold) * taxRate;\n    }, 0);\n  return remaining;\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { store } from \"shared/store\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\nimport { getThresholdTaxRemaining } from \"shared/utility/get-threshold-tax-remaining\";\n\ninterface ThresholdTaxData {\n  total: number;\n  firstOccurrence: DateTime;\n  remaining: number;\n  perPaycheck: number;\n}\n\nexport const useFutureSocialSecurity = (year: number): ThresholdTax => {\n  const config = useStore(store, (x) => x.projectedWealth);\n  return useThresholdTax(year, config.socialSecurityLimit, config.socialSecurityTaxRate);\n};\n\nexport const useFutureMedicareTax = (year: number): ThresholdTax => {\n  const config = useStore(store, (x) => x.projectedWealth);\n  const taxes = useThresholdTax(year, config.medicareSupplementalTaxThreshold, -1 * config.medicareSupplementalTaxRate);\n\n  return {\n    min: taxes.max,\n    max: taxes.min,\n  };\n};\n\nexport type ThresholdTax = Partial<Record<\"min\" | \"max\", ThresholdTaxData>>;\n\nconst useThresholdTax = (year: number, threshold: number, taxRate: number): ThresholdTax => {\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios[year]);\n\n  const taxesOwedPerScenario = (scenarios ?? [])\n    .map((x) => {\n      const totalTaxable = x.payments.at(-1)?.cumulative ?? 0;\n      const taxableAmountOverThreshold = Math.max(0, totalTaxable - threshold);\n      const total = taxRate * taxableAmountOverThreshold;\n      const firstOccurrence = x.payments.find((x) => x.cumulative > threshold)?.payedOn;\n      const remaining = getThresholdTaxRemaining(taxRate, threshold, x);\n      const lastPaycheck = x.payments.at(-1)?.value ?? 0;\n      const perPaycheck = total && taxRate * lastPaycheck;\n\n      return {\n        total,\n        firstOccurrence: firstOccurrence ? DateTime.fromISO(firstOccurrence) : undefined,\n        remaining,\n        perPaycheck,\n      };\n    })\n    .filter((x) => x.firstOccurrence) as ThresholdTaxData[];\n\n  return taxesOwedPerScenario.reduce(\n    (acc, curr, i) => {\n      if (i == 0) {\n        return { min: curr, max: curr };\n      } else {\n        if (curr.total < acc.min!.total) {\n          acc.min = curr;\n        }\n        if (curr.total > acc.max!.total) {\n          acc.max = curr;\n        }\n      }\n      return acc;\n    },\n    {} as Partial<Record<\"min\" | \"max\", ThresholdTaxData>>\n  );\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { useDates } from \"shared/hooks/use-dates\";\nimport { store } from \"shared/store\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\nimport { clusterTitle, getClusterCount } from \"shared/utility/cluster-helpers\";\nimport { getThresholdTaxRemaining } from \"shared/utility/get-threshold-tax-remaining\";\nimport { isFuture } from \"shared/utility/is-future\";\nimport { ckmeans, median, sumSimple } from \"simple-statistics\";\nimport { useFutureMortgageEquity } from \"./use-future-mortgage-equity\";\nimport { useFutureRetirementContributions } from \"./use-future-retirement-contributions\";\nimport { useFutureSavings } from \"./use-future-savings\";\n\nexport const useFutureTotals = (year: number, options: { excludeHomeEquity: boolean } = { excludeHomeEquity: false }) => {\n  const { excludeHomeEquity } = options;\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios[year]);\n  const bonusTakeHomeFactor = useStore(store, (x) => 1 - x.projectedWealth.bonusWithholdingsRate);\n  const savings = useFutureSavings(year);\n  const homeEquity = useFutureMortgageEquity(year);\n  const retirement = useFutureRetirementContributions(year);\n  const config = useStore(store, (x) => x.projectedWealth);\n\n  const dates = useDates(year);\n\n  const rawClusters = (() => {\n    const totals = scenarios?.map((x) => {\n      const futureEvents = [\n        isFuture(dates.meritBonus) && x.meritBonus * bonusTakeHomeFactor,\n        isFuture(dates.companyBonus) && x.companyBonus * bonusTakeHomeFactor,\n        isFuture(dates.retirementBonus) && x.retirementBonus,\n        getThresholdTaxRemaining(config.socialSecurityTaxRate, config.socialSecurityLimit, x),\n        getThresholdTaxRemaining(-1 * config.medicareSupplementalTaxRate, config.medicareSupplementalTaxThreshold, x),\n        savings.remaining,\n        retirement.remaining,\n        excludeHomeEquity ? 0 : homeEquity,\n      ].filter((x) => x) as number[];\n      return sumSimple(futureEvents);\n    });\n\n    if (!totals || totals.length === 0) {\n      return [[savings.remaining + retirement.remaining]];\n    }\n\n    const clusters = ckmeans(\n      totals,\n      getClusterCount(totals, (x) => x)\n    );\n    return clusters;\n  })();\n\n  const numValues = rawClusters.flat().length;\n  return rawClusters.map((x, i, arr) => {\n    return {\n      min: Math.min(...x),\n      max: Math.max(...x),\n      median: median(x),\n      probability: x.length / numValues,\n      title: clusterTitle(i, arr.length),\n    };\n  });\n};\n","import { Box, Stack } from \"@mui/system\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { Card } from \"shared/components/card\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { ClusterValues } from \"shared/components/formatters/cluster-value\";\nimport { CountDown } from \"shared/components/formatters/countdown\";\nimport { Value } from \"shared/components/formatters/value\";\nimport { Cluster, useClusters } from \"shared/hooks/use-clusters\";\nimport { useDates } from \"shared/hooks/use-dates\";\nimport { store } from \"shared/store\";\nimport { scaleClusters } from \"shared/utility/cluster-helpers\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { monthDay } from \"shared/utility/format-date\";\nimport { isFuture } from \"shared/utility/is-future\";\nimport { useFutureMortgageEquity } from \"./hooks/use-future-mortgage-equity\";\nimport { useFutureRetirementContributions } from \"./hooks/use-future-retirement-contributions\";\nimport { useFutureSavings } from \"./hooks/use-future-savings\";\nimport { ThresholdTax, useFutureMedicareTax, useFutureSocialSecurity } from \"./hooks/use-future-social-security\";\nimport { useFutureTotals } from \"./hooks/use-future-totals\";\n\nexport const FutureEvents = (props: { year: number; onChange: (year: number) => void }) => {\n  const { year, onChange } = props;\n  const dates = useDates(year);\n\n  const savings = useFutureSavings(year);\n  const retirement = useFutureRetirementContributions(year);\n  const medicare = useFutureMedicareTax(year);\n  const socialSecurity = useFutureSocialSecurity(year);\n  const clusters = useClusters(year);\n  const bonusTakeHomeFactor = useStore(store, (x) => 1 - x.projectedWealth.bonusWithholdingsRate);\n  const total = useFutureTotals(year);\n  const equity = useFutureMortgageEquity(year);\n\n  return (\n    <>\n      <Stack spacing={2} width={550} paddingRight={1}>\n        <Card\n          title={\n            <>\n              <span>Remaining Projected Wealth</span>\n              <DatePicker\n                sx={{ width: 90, marginRight: 2, marginLeft: \"auto\" }}\n                label={\"year\"}\n                views={[\"year\"]}\n                minDate={getLocalDateTime()}\n                maxDate={getLocalDateTime().plus({ years: 1 })}\n                value={getLocalDateTime().set({ year })}\n                slotProps={{\n                  textField: {\n                    variant: \"standard\",\n                    label: \"\",\n                  },\n                }}\n                onChange={(data) => {\n                  data?.year && onChange(data?.year);\n                }}\n              />\n            </>\n          }\n        >\n          <ClusterValues clusters={total} eventDate={dates.companyBonus} />\n        </Card>\n        {isFuture(dates.meritBonus) && clusters.meritBonus.length > 0 && (\n          <ClusterCard title=\"Merit Bonus\" date={dates.meritBonus} cluster={scaleClusters(clusters.meritBonus, bonusTakeHomeFactor)} />\n        )}\n        {isFuture(dates.companyBonus) && clusters.companyBonus.length > 0 && (\n          <ClusterCard\n            title=\"Company Bonus\"\n            date={dates.companyBonus}\n            cluster={scaleClusters(clusters.companyBonus, bonusTakeHomeFactor)}\n          />\n        )}\n        {isFuture(dates.retirementBonus) && clusters.retirementBonus.length > 0 && (\n          <ClusterCard title=\"Retirement Bonus\" date={dates.retirementBonus} cluster={clusters.retirementBonus} />\n        )}\n        {!!socialSecurity.min && <ThresholdTaxCard thresholdTax={socialSecurity} title={\"Social Security Limit\"} />}\n        {!!medicare.min && <ThresholdTaxCard thresholdTax={medicare} title={\"Medicare Supplemental Tax\"} />}\n\n        {(!!savings.perMonth || !!retirement.perPaycheck || !!equity) && (\n          <Card title={\"Savings & Retirement\"}>\n            {!!savings.perMonth && (\n              <Value title={\"savings\"} secondaryValue={<Cash tooltip=\"Per Month\" value={savings.perMonth} />}>\n                <Cash tooltip=\"Total Remaining\" value={savings.remaining} />\n              </Value>\n            )}\n            {!!retirement.perPaycheck && (\n              <Value title={\"retirement\"} secondaryValue={<Cash tooltip=\"Per Paycheck\" value={retirement.perPaycheck} />}>\n                <Cash tooltip=\"Total Remaining\" value={retirement.remaining} />\n              </Value>\n            )}\n            {!!equity && (\n              <Value title={\"Home Equity\"}>\n                <Cash tooltip=\"Total Remaining\" value={equity} />\n              </Value>\n            )}\n          </Card>\n        )}\n      </Stack>\n    </>\n  );\n};\n\nconst ThresholdTaxCard = (props: { thresholdTax: ThresholdTax; title: string }) => {\n  const { thresholdTax, title } = props;\n  return (\n    <Card\n      title={\n        <Box display={\"flex\"} width={\"max-content\"} gap={1} marginRight={2}>\n          <span>{title}</span>\n\n          <CountDown dateFormat={monthDay} variant=\"date\" dateTime={thresholdTax.max?.firstOccurrence} />\n          {thresholdTax.min && thresholdTax.max && !thresholdTax.min.firstOccurrence.equals(thresholdTax.max.firstOccurrence) && (\n            <>\n              <span>or</span>\n              <CountDown dateFormat={monthDay} variant=\"date\" dateTime={thresholdTax.min.firstOccurrence} />\n            </>\n          )}\n        </Box>\n      }\n    >\n      {thresholdTax.max && thresholdTax.max.total === thresholdTax.min?.total && (\n        <Value title={\"Remaining\"}>\n          <Cash value={thresholdTax.max?.remaining} compact={false} />\n        </Value>\n      )}\n      {thresholdTax.max && thresholdTax.max.total !== thresholdTax.min?.total && (\n        <>\n          <Value title={thresholdTax.max.firstOccurrence > getLocalDateTime() ? \"Early\" : \"Low\"}>\n            <Cash value={thresholdTax.max?.remaining} compact={false} />\n          </Value>\n          <Value title={thresholdTax.max.firstOccurrence > getLocalDateTime() ? \"Late\" : \"High\"}>\n            <Cash value={thresholdTax.min?.total} compact={false} />\n          </Value>\n        </>\n      )}\n      <Value title={\"Per Paycheck\"}>\n        <Cash value={thresholdTax.max?.perPaycheck} compact={false} />\n      </Value>\n    </Card>\n  );\n};\n\nconst ClusterCard = (props: { date: DateTime; cluster?: Cluster[]; title: string }) => {\n  const { date, cluster, title } = props;\n  return (\n    <Card\n      title={\n        <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\n          <span>{title}</span>\n          <CountDown variant=\"date\" dateFormat={monthDay} dateTime={date} />\n        </Box>\n      }\n    >\n      <ClusterValues clusters={cluster} eventDate={date} />\n    </Card>\n  );\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { store } from \"shared/store\";\nimport { findMostMostLikely } from \"shared/utility/cluster-helpers\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { findNearestIdxOnOrBefore, findNearestOnOrBefore } from \"shared/utility/find-nearest-on-or-before\";\nimport { calcEquity, calcLoanBalance } from \"shared/utility/mortgage-calc\";\nimport { useEarliestAccountEntry } from \"../../../shared/hooks/use-earliest-account-entry\";\nimport { useFutureTotals } from \"./use-future-totals\";\n\nexport interface TimeSeriesWealth {\n  graphDate: Date;\n  date: DateTime;\n  wealth: number;\n  yoyCash?: number;\n  yoyPct?: number;\n}\n\nconst useFuturesWealth = () => {\n  const year = getLocalDateTime().year;\n  const totals = useFutureTotals(year, { excludeHomeEquity: true });\n  const totalsPlusOne = useFutureTotals(year + 1, { excludeHomeEquity: true });\n\n  return {\n    [year + 1]: findMostMostLikely(totals)?.median ?? 0,\n    [year + 2]: (findMostMostLikely(totals)?.median ?? 0) + (findMostMostLikely(totalsPlusOne)?.median ?? 0),\n  };\n};\n\nexport const useTimeSeriesWealth = (year: number) => {\n  const localDateTime = getLocalDateTime().startOf(\"day\");\n  const earliest = useEarliestAccountEntry();\n  const accounts = useStore(store, (x) => x.wealth);\n  const futuresWealth = useFuturesWealth();\n\n  if (!earliest.isValid) {\n    return [] as TimeSeriesWealth[];\n  }\n\n  const dates = new Array(year + 2 - earliest.year)\n    .fill(earliest.year)\n    .map((x, i) => DateTime.fromObject({ day: 1, month: 1, year: x + i }).startOf(\"day\"));\n\n  const futureBenchmarkIdx = findNearestIdxOnOrBefore(localDateTime, dates, (x) => x);\n\n  if (!dates.some((x) => x.equals(localDateTime))) {\n    dates.splice(futureBenchmarkIdx + 1, 0, localDateTime);\n  }\n\n  return dates\n    .map((date) => {\n      const accountsWealth = Object.values(accounts).map((x) => {\n        if (x.type === \"mortgage\" && x.loan) {\n          const houseValue = findNearestOnOrBefore(date, x.data);\n          const balance = calcLoanBalance(date, x.loan);\n          return calcEquity(x.loan.ownershipPct, houseValue?.value, balance, x.loan.principal);\n        } else if (x.type === \"account\") {\n          const entry = findNearestOnOrBefore(date, x.data);\n          return entry?.value ?? 0;\n        }\n        return 0;\n      });\n\n      const accountWealth = accountsWealth.reduce((acc, curr) => acc + curr, 0);\n      const futureWealth = futuresWealth[date.year] ?? 0;\n\n      return {\n        date,\n        graphDate: date.toJSDate(),\n        wealth: accountWealth + futureWealth,\n      };\n    })\n    .map((x, idx, arr) => {\n      if (x.date <= localDateTime || x.date.year === localDateTime.year + 2) {\n        const benchmarkWealth = arr[idx - 1]?.wealth;\n        if (!benchmarkWealth) {\n          return x;\n        }\n        return {\n          ...x,\n          yoyCash: x.wealth - benchmarkWealth,\n          yoyPct: x.wealth / benchmarkWealth - 1,\n        };\n      }\n\n      const benchmarkWealth = arr[futureBenchmarkIdx]?.wealth;\n      if (!benchmarkWealth) {\n        return x;\n      }\n      return {\n        ...x,\n        yoyCash: x.wealth - benchmarkWealth,\n        yoyPct: x.wealth / benchmarkWealth - 1,\n      };\n    }) as TimeSeriesWealth[];\n};\n","import { AgCartesianChartOptions, AgLineSeriesOptions } from \"ag-charts-community\";\nimport { AgCharts } from \"ag-charts-react\";\nimport { DateTime } from \"luxon\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { TimeSeriesWealth, useTimeSeriesWealth } from \"./hooks/use-times-series-wealth\";\n\ninterface MarkerParams<T> {\n  fill: string;\n  fillOpacity: number;\n  highlighted: boolean;\n  seriesId: string;\n  size: number;\n  stroke: string;\n  strokeOpacity: number;\n  strokeWidth: number;\n  xKey: string;\n  yKey: string;\n  datum: T;\n}\n\nexport const WealthChart = (props: { titleYear: number }) => {\n  const dataYear = getLocalDateTime().year + 1;\n  const { titleYear } = props;\n  const data = useTimeSeriesWealth(dataYear);\n  const offsetIdx = getLocalDateTime().year - titleYear + 1;\n\n  const series = [\n    {\n      type: \"line\",\n      xKey: \"graphDate\",\n      yKey: \"wealth\",\n      yName: \"Wealth\",\n      tooltip: {\n        renderer: ({ datum, yKey, xKey }) => ({\n          content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCash(datum[yKey])}`,\n        }),\n      },\n      marker: {\n        itemStyler: (params: MarkerParams<TimeSeriesWealth>) => {\n          if (params.datum.date.year === DateTime.local().plus({ years: 1 }).year) {\n            return {\n              fill: \"orange\",\n            };\n          } else if (params.datum.date.year === DateTime.local().plus({ years: 2 }).year) {\n            return {\n              fill: \"rgb(244, 67, 54)\",\n            };\n          } else if (params.datum.date.hasSame(DateTime.local(), \"day\")) {\n            return {\n              fill: \"lightgrey\",\n            };\n          }\n        },\n      },\n    },\n    {\n      type: \"line\",\n      xKey: \"graphDate\",\n      yKey: \"yoyCash\",\n      yName: \"YoY ($)\",\n      stroke: \"grey\",\n\n      tooltip: {\n        renderer: ({ datum, yKey, xKey }) => ({\n          content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCash(datum[yKey])}`,\n        }),\n      },\n      marker: {\n        fill: \"grey\",\n        itemStyler: (params: MarkerParams<TimeSeriesWealth>) => {\n          if (params.datum.date.year === DateTime.local().plus({ years: 1 }).year) {\n            return {\n              fill: \"orange\",\n            };\n          } else if (params.datum.date.year === DateTime.local().plus({ years: 2 }).year) {\n            return {\n              fill: \"rgb(244, 67, 54)\",\n            };\n          } else if (params.datum.date.hasSame(DateTime.local(), \"day\")) {\n            return {\n              fill: \"lightgrey\",\n            };\n          }\n        },\n      },\n    },\n  ] as AgLineSeriesOptions[];\n\n  const options: AgCartesianChartOptions = {\n    theme: \"ag-default-dark\",\n    title: {\n      text: `${data[data.length - 1 - offsetIdx].date.toFormat(shortDate)} Projected wealth ${formatCashShort(\n        (data[data.length - 1 - offsetIdx]?.wealth ?? 0) as number\n      )}`,\n    },\n    data,\n    axes: [\n      {\n        type: \"time\",\n        position: \"bottom\",\n        label: {\n          format: \"%Y\",\n        },\n      },\n      {\n        type: \"number\",\n        position: \"left\",\n        nice: false,\n      },\n    ],\n    series,\n  };\n\n  return <AgCharts options={options} css={{ height: \"100%\", width: \"100%\" }} />;\n};\n","import QueryStatsIcon from \"@mui/icons-material/QueryStats\";\nimport TodayIcon from \"@mui/icons-material/Today\";\nimport UpdateIcon from \"@mui/icons-material/Update\";\nimport { Tooltip } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { ColDef, ICellRendererParams } from \"ag-grid-community\";\nimport { DateTime } from \"luxon\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { Percent } from \"shared/components/formatters/percent\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { TimeSeriesWealth } from \"../hooks/use-times-series-wealth\";\n\nexport const columnConfig: ColDef<TimeSeriesWealth>[] = [\n  {\n    headerName: \"Date\",\n    colId: \"date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data?.date,\n    cellRenderer: (x: ICellRendererParams<unknown, DateTime>) => {\n      const localDateTime = getLocalDateTime().startOf(\"day\");\n      const systemYear = localDateTime.year;\n      return (\n        <Stack direction={\"row\"} alignItems={\"center\"}>\n          {x.valueFormatted}&nbsp;\n          {x.value && x.value.equals(localDateTime) && (\n            <Tooltip title=\"Today\">\n              <TodayIcon htmlColor=\"orange\" />\n            </Tooltip>\n          )}\n          {x.value &&\n            x.value.equals(\n              DateTime.fromObject({\n                day: 1,\n                month: 1,\n                year: systemYear,\n              })\n            ) && (\n              <Tooltip\n                title={`Benchmark for ${localDateTime.toFormat(shortDate)} & ${localDateTime.set({ day: 1, month: 1 }).plus({ years: 1 }).toFormat(shortDate)} `}\n              >\n                <QueryStatsIcon htmlColor=\"orange\" />\n              </Tooltip>\n            )}\n          {x.value &&\n            x.value.equals(\n              DateTime.fromObject({\n                day: 1,\n                month: 1,\n                year: systemYear + 1,\n              })\n            ) && (\n              <Tooltip title={`Benchmark for ${localDateTime.set({ day: 1, month: 1 }).plus({ years: 2 }).toFormat(shortDate)} `}>\n                <QueryStatsIcon htmlColor=\"rgb(244, 67, 54)\" />\n              </Tooltip>\n            )}\n          {x.value && x.value > localDateTime && (\n            <Tooltip title=\"Future Event\">\n              <UpdateIcon htmlColor={x.value.year - systemYear > 1 ? \"rgb(244, 67, 54)\" : \"orange\"} />\n            </Tooltip>\n          )}\n        </Stack>\n      );\n    },\n  },\n  {\n    type: \"numericColumn\",\n    headerName: \"Wealth\",\n    colId: \"wealth\",\n    valueGetter: (x) => x.data?.wealth,\n    cellRenderer: (x: ICellRendererParams<unknown, number>) => {\n      return x.value && <Cash value={x.value} placement=\"left\" />;\n    },\n  },\n  {\n    colId: \"yoy-cash\",\n    type: \"numericColumn\",\n    headerName: \"YoY ($)\",\n    valueGetter: (x) => x.data?.yoyCash,\n    cellRenderer: (x: ICellRendererParams<unknown, number>) => {\n      return x.value && <Cash value={x.value} placement=\"left\" />;\n    },\n  },\n  {\n    colId: \"yoy-percent\",\n    type: \"numericColumn\",\n    headerName: \"YoY (%)\",\n    valueGetter: (x) => x.data?.yoyPct,\n    cellRenderer: (x: ICellRendererParams<unknown, number>) => {\n      return x.value && <Percent value={x.value} />;\n    },\n    minWidth: 60,\n  },\n];\n","import { Box } from \"@mui/system\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { useTimeSeriesWealth } from \"../hooks/use-times-series-wealth\";\nimport { columnConfig } from \"./colum-config\";\n\nexport const WealthTable = () => {\n  const dataYear = getLocalDateTime().year + 1;\n  const data = useTimeSeriesWealth(dataYear);\n\n  return (\n    <Box height={\"100%\"} width={\"100%\"}>\n      <AgGrid\n        id=\"time-series-wealth\"\n        rowData={data}\n        columnDefs={columnConfig}\n        autoSizeStrategy={{ type: \"fitGridWidth\" }}\n        onRowDataUpdated={(e) => e.api.sizeColumnsToFit()}\n      />\n    </Box>\n  );\n};\n","import { Box, Stack } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { FutureEvents } from \"./future-events\";\nimport { WealthChart } from \"./wealth-chart\";\nimport { WealthTable } from \"./wealth-table\";\n\nexport const ProjectedWealth = () => {\n  const localTime = getLocalDateTime();\n  const [year, setYear] = useState(localTime.year);\n\n  return (\n    <Box display=\"flex\" flexDirection=\"row\" height=\"100%\" width={\"100%\"} gap={1}>\n      <Box flex=\"0 1 auto\" height={\"100%\"} overflow={\"auto\"}>\n        <FutureEvents onChange={setYear} year={year} />\n      </Box>\n      <Box flex=\"1 1 auto\" overflow={\"auto\"}>\n        <Stack spacing={2} height={\"100%\"} width={\"100%\"}>\n          <WealthChart titleYear={year} />\n          <WealthTable />\n        </Stack>\n      </Box>\n    </Box>\n  );\n};\n","import { create } from \"mutative\";\nimport { ProjectedWealthKeys } from \"shared/models/store/current\";\nimport { store } from \".\";\n\nexport const setProjectedWealth = (configName: ProjectedWealthKeys, value: number) => {\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      next.projectedWealth[configName] = value;\n    });\n  });\n};\n","import { InputAdornment, TextField } from \"@mui/material\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { useCallback, useState } from \"react\";\nimport { ProjectedWealthKeys } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\nimport { setProjectedWealth } from \"shared/store/set-projected-wealth\";\n\ninterface ConfigEntryProps {\n  configName: ProjectedWealthKeys;\n  label: string;\n  variant?: \"cash\" | \"percent\";\n}\n\nexport const ConfigEntry = (props: ConfigEntryProps) => {\n  const { configName, label, variant = \"cash\" } = props;\n  const [error, setError] = useState(false);\n  const isPercent = variant === \"percent\";\n\n  const onchange = useCallback(\n    (input: string) => {\n      let value = +input;\n      const isNan = Number.isNaN(value);\n      setError(isNan);\n      if (isNan) {\n        return;\n      }\n\n      if (isPercent) {\n        value /= 100;\n      }\n\n      setProjectedWealth(configName, value);\n    },\n    [configName, isPercent]\n  );\n\n  const value = useStore(store, (x) => x.projectedWealth[configName]);\n  const defaultValue = isPercent ? value * 100 : value;\n\n  return (\n    <TextField\n      error={error}\n      variant=\"outlined\"\n      slotProps={{\n        input: {\n          startAdornment: <InputAdornment position=\"start\">{isPercent ? \"%\" : \"$\"}</InputAdornment>,\n        },\n      }}\n      defaultValue={defaultValue.toFixed(isPercent ? 2 : 0)}\n      type=\"numeric\"\n      label={label}\n      onChange={(event) => {\n        onchange(event.target.value);\n      }}\n    />\n  );\n};\n","import { Card, CardContent, CardHeader } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { ConfigEntry } from \"./config-entry\";\n\nexport const Config = () => {\n  return (\n    <Card>\n      <CardHeader title=\"Configuration\" />\n      <CardContent>\n        <Stack spacing={2}>\n          <ConfigEntry configName=\"savingsPerMonth\" label=\"Monthly Saving Rate\" />\n          <ConfigEntry configName=\"retirementContributionPaycheck\" label=\"Retirement Contribution Per Paycheck\" />\n          <ConfigEntry configName=\"bonusWithholdingsRate\" label=\"Bonus Withholdings Rate\" variant=\"percent\" />\n          <Stack direction={\"row\"} spacing={2} width={\"100%\"} sx={{ \"& > *\": { flex: 1 } }}>\n            <ConfigEntry configName=\"socialSecurityLimit\" label=\"Social Security Tax Limit\" />\n            <ConfigEntry configName=\"socialSecurityTaxRate\" label=\"Social Security Tax\" variant=\"percent\" />\n          </Stack>\n          <Stack direction={\"row\"} spacing={2} width={\"100%\"} sx={{ \"& > *\": { flex: 1 } }}>\n            <ConfigEntry configName=\"medicareSupplementalTaxThreshold\" label=\"Medicare Supplemental Threshold\" />\n            <ConfigEntry configName=\"medicareSupplementalTaxRate\" label=\"Medicare Supplemental Tax\" variant=\"percent\" />\n          </Stack>\n        </Stack>\n      </CardContent>\n    </Card>\n  );\n};\n","import Close from \"@mui/icons-material/Close\";\nimport { Box, Button, IconButton, MenuItem, Modal, Paper, Select, Stack, Typography } from \"@mui/material\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { SimpleTreeView } from \"@mui/x-tree-view/SimpleTreeView\";\nimport { TreeItem } from \"@mui/x-tree-view/TreeItem\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useState } from \"react\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { Percent } from \"shared/components/formatters/percent\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { formatCash } from \"shared/utility/format-cash\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { formatPercent } from \"shared/utility/format-percent\";\n\nexport const ScenarioExplorer = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [year, setYear] = useState(getLocalDateTime().year);\n  const [scenarioIndex, setScenarioIndex] = useState(0);\n  const scenarioData = useStore(scenarioStore);\n  const scenarios = scenarioData.scenarios[year];\n  const scenario = scenarios?.[scenarioIndex];\n  if (!scenario) {\n    return null;\n  }\n  return (\n    <>\n      <Button onClick={() => setIsOpen(true)}>Scenario Explorer</Button>\n      <Modal open={isOpen}>\n        <Paper sx={{ position: \"absolute\", top: 24, bottom: 24, right: 24, left: 24, padding: 2, overflow: \"auto\" }}>\n          <IconButton onClick={() => setIsOpen(false)} sx={{ position: \"absolute\", top: 8, right: 8 }}>\n            <Close />\n          </IconButton>\n          <Stack spacing={2}>\n            <Stack direction={\"row\"} alignItems={\"center\"} spacing={2}>\n              <Typography variant=\"h5\">Scenario Explorer</Typography>\n              <DatePicker\n                sx={{ width: 90, marginRight: 2 }}\n                label={\"year\"}\n                views={[\"year\"]}\n                minDate={getLocalDateTime().set({ year: scenarioData?.minYear })}\n                maxDate={getLocalDateTime().set({ year: scenarioData?.maxYear })}\n                defaultValue={getLocalDateTime()}\n                slotProps={{\n                  textField: {\n                    variant: \"standard\",\n                    label: \"\",\n                  },\n                }}\n                onChange={(date) => {\n                  date && setYear(date.year);\n                }}\n              />\n              <Select variant=\"standard\" onChange={(event) => setScenarioIndex(+event.target.value)} defaultValue={\"0\"}>\n                {scenarios?.map((x, i) => (\n                  <MenuItem key={i} value={i}>\n                    {x.weight} {formatCash(x.totalPay)}\n                  </MenuItem>\n                ))}\n              </Select>\n            </Stack>\n\n            <Paper elevation={5} sx={{ padding: 2 }}>\n              <SimpleTreeView\n                defaultExpandedItems={[\"_TotalPay\", \"totalMerit\", \"pay\", \"meritBonus\", \"companyBonus\", \"lastThreeMeritBonusFactor\"]}\n              >\n                <TreeItem itemId=\"scenario\" label={<span>Scenario</span>}>\n                  <TreeItem itemId=\"weight\" label={<span>Weight: {scenario.weight}</span>} />\n                  <TreeItem itemId=\"year\" label={<span>Year: {scenario.year}</span>} />\n                </TreeItem>\n                <TreeItem\n                  itemId=\"_TotalPay\"\n                  label={\n                    <Stack direction={\"row\"} spacing={1}>\n                      <span>Total Pay: </span>\n                      <Cash value={scenario.totalPay} compact={false} />\n                    </Stack>\n                  }\n                >\n                  <TreeItem\n                    itemId=\"aprToApr\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Apr To Apr: </span>\n                        <Cash value={scenario.aprToApr} compact={false} />\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"basePay\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Base Pay: </span>\n                        <Cash value={scenario.basePay} compact={false} />\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"taxablePay\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Taxable Pay: </span>\n                        <Cash value={scenario.taxablePay} compact={false} />\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"totalPay\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Total Pay: </span>\n                        <Cash value={scenario.totalPay} compact={false} />\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"totalMerit\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Total Merit Increase: </span>\n                        <Percent value={scenario.meritIncreasePct + scenario.equityIncreasePct} />\n                      </Stack>\n                    }\n                  >\n                    <TreeItem\n                      itemId=\"meritIncreasePct\"\n                      label={\n                        <Stack direction={\"row\"} spacing={1}>\n                          <span>Merit Increase: </span>\n                          <Percent value={scenario.meritIncreasePct} />\n                        </Stack>\n                      }\n                    />\n                    <TreeItem\n                      itemId=\"equityIncreasePct\"\n                      label={\n                        <Stack direction={\"row\"} spacing={1}>\n                          <span>Equity Increase: </span>\n                          <Percent value={scenario.equityIncreasePct} />\n                        </Stack>\n                      }\n                    />\n                  </TreeItem>\n\n                  <TreeItem\n                    itemId=\"currentPaymentIdx\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Current Payment Index: </span>\n                        <span>{scenario.currentPaymentIdx}</span>\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"remainingPayments\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Remaining Regular Payments: </span>\n                        <span>{scenario.remainingRegularPayments}</span>\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"current_payment\"\n                    label={\n                      <Stack direction={\"row\"} spacing={2}>\n                        <Box>Current Payment: </Box>\n                        <Box>{DateTime.fromISO(scenario.payments[scenario.currentPaymentIdx].payedOn).toFormat(shortDate)}</Box>\n                        <Box width={70} textAlign={\"right\"}>\n                          {formatCash(scenario.payments[scenario.currentPaymentIdx].value)}\n                        </Box>\n                        <Box width={70} textAlign={\"right\"}>\n                          {formatCash(scenario.payments[scenario.currentPaymentIdx].cumulative)}\n                        </Box>\n                        <Box> {scenario.payments[scenario.currentPaymentIdx].type}</Box>\n                      </Stack>\n                    }\n                  ></TreeItem>\n                  <TreeItem itemId=\"payments\" label={\"Payments Considered\"}>\n                    {scenario.payments.toReversed().map((x, i, arr) => (\n                      <TreeItem\n                        key={i}\n                        itemId={`payments-${i}`}\n                        label={\n                          <Stack\n                            sx={{\n                              backgroundColor: scenario.currentPaymentIdx == arr.length - 1 - i ? \"rgba(0,255,0,.15)\" : undefined,\n                            }}\n                            direction={\"row\"}\n                            spacing={2}\n                          >\n                            <Box>{arr.length - 1 - i}</Box>\n                            <Box>{DateTime.fromISO(x.payedOn).toFormat(shortDate)}</Box>\n                            <Box width={70} textAlign={\"right\"}>\n                              {formatCash(x.value)}\n                            </Box>\n                            <Box width={70} textAlign={\"right\"}>\n                              {formatCash(x.cumulative)}\n                            </Box>\n                            <Box> {x.type}</Box>\n                          </Stack>\n                        }\n                      />\n                    ))}\n                  </TreeItem>\n                  <TreeItem itemId=\"pay\" label={\"Pay\"}>\n                    {scenario.pay.toReversed().map((x, i) => (\n                      <TreeItem key={i} itemId={`$pay-${i}`} label={`${DateTime.fromISO(x.date).year} ${x.value}`} />\n                    ))}\n                  </TreeItem>\n                </TreeItem>\n\n                <TreeItem\n                  itemId=\"meritBonus\"\n                  label={\n                    <Stack direction={\"row\"} spacing={1}>\n                      <span>Merit Bonus: </span>\n                      <Cash value={scenario.meritBonus} compact={false} />\n                    </Stack>\n                  }\n                >\n                  <TreeItem\n                    itemId=\"mertiBonusPct\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Merit Bonus Percent: </span>\n                        <Percent value={scenario.meritBonusPct} />\n                      </Stack>\n                    }\n                  />\n                </TreeItem>\n                <TreeItem\n                  itemId=\"companyBonus\"\n                  label={\n                    <Stack direction={\"row\"} spacing={1}>\n                      <span>Company Bonus:</span>\n                      <Cash value={scenario.companyBonus} compact={false} />\n                    </Stack>\n                  }\n                >\n                  <TreeItem\n                    itemId=\"companyBonusFactor.value\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Company Bonus Factor:</span>\n                        <Percent value={scenario.companyBonusFactor} />\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"companyBonusPct.value\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Company Bonus Percent:</span>\n                        <Percent value={scenario.companyBonusPct} />\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"lastThreeMeritBonusFactor\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Last Three Merit Bonus Percent:</span>\n                        <Percent value={scenario.lastThreeMeritBonusFactor} />\n                      </Stack>\n                    }\n                  >\n                    {scenario.lastThreeMeritBonuses.toReversed().map((x, i) => (\n                      <TreeItem key={`${i}${x}`} itemId={`lastThreeMeritBonuses${i}`} label={`${year - i} ${formatPercent(x)}`} />\n                    ))}\n                  </TreeItem>\n                </TreeItem>\n                <TreeItem\n                  itemId=\"retirementBonus\"\n                  label={\n                    <Stack direction={\"row\"} spacing={1}>\n                      <span>Retirement Bonus:</span>\n                      <Cash value={scenario.retirementBonus} compact={false} />\n                    </Stack>\n                  }\n                >\n                  <TreeItem\n                    itemId=\"retirementBonusPct\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Retirement Bonus Percent:</span>\n                        <Percent value={scenario.retirementBonusPct} />\n                      </Stack>\n                    }\n                  />\n                </TreeItem>\n              </SimpleTreeView>\n            </Paper>\n          </Stack>\n        </Paper>\n      </Modal>\n    </>\n  );\n};\n","import { Box, Table, TableBody, TableCell, TableHead, TableRow } from \"@mui/material\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport { ReactNode } from \"react\";\nimport { ZodError } from \"zod\";\n\ninterface InvalidDataDialogProps {\n  open?: boolean;\n  error?: ZodError;\n  children?: ReactNode;\n}\n\nexport default function InvalidDataDialog(props: InvalidDataDialogProps) {\n  const { open, error, children } = props;\n\n  return (\n    <>\n      <Dialog open={!!open}>\n        <DialogTitle id=\"alert-dialog-title\">{\"Error Loading Data\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            <Box maxHeight={500} overflow={\"auto\"}>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Error Message</TableCell>\n                    <TableCell>Path</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {error?.issues.map((x, idx) => {\n                    return (\n                      <TableRow key={idx}>\n                        <TableCell>{x.message}</TableCell>\n                        <TableCell>{x.path.join(\".\")}</TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            </Box>\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>{children}</DialogActions>\n      </Dialog>\n    </>\n  );\n}\n","import { useStore } from \"@tanstack/react-store\";\nimport { useCallback } from \"react\";\nimport { store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const downloadJson = <T,>(filename: string, storeData: T) => {\n  const data = JSON.stringify(storeData, null, 2);\n  const link = document.createElement(\"a\");\n  link.download = filename;\n  const blob = new Blob([data], { type: \"application/json\" });\n  link.href = window.URL.createObjectURL(blob);\n  link.click();\n};\n\nexport const useExport = () => {\n  const storeData = useStore(store);\n  const onExport = useCallback(() => {\n    downloadJson(`wealth-tracker-${getLocalDateTime().toFormat(shortDate)}.json`, storeData);\n  }, [storeData]);\n\n  return onExport;\n};\n","import { useCallback } from \"react\";\nimport { storeValidator } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\nimport { migration } from \"shared/store/migrations\";\n\nfunction selectFile(contentType: string) {\n  return new Promise<File>((resolve) => {\n    const input = document.createElement(\"input\");\n    input.type = \"file\";\n    input.multiple = false;\n    input.accept = contentType;\n\n    input.onchange = () => {\n      const files = Array.from(input.files ?? []);\n      resolve(files[0]);\n    };\n\n    input.click();\n  });\n}\n\nexport const useImport = () => {\n  return useCallback(() => {\n    return new Promise<void>((resolve, reject) => {\n      selectFile(\"application/json\").then((file) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = (readerEvent) => {\n          const content = readerEvent.target?.result?.toString();\n          if (content) {\n            const data = JSON.parse(window.atob(content.split(\",\")[1]));\n            const validation = storeValidator.safeParse(data);\n            if (validation.success) {\n              store.setState(() => data);\n              resolve();\n            } else {\n              try {\n                migration(data);\n                store.setState(() => data);\n                resolve();\n              } catch (err) {\n                console.log(\"error\", err);\n                console.log(\"invalid data\", data);\n                reject(err);\n              }\n            }\n          }\n        };\n      });\n    });\n  }, []);\n};\n","import { storeValidator } from \"shared/models/store/current\";\n\nexport const useStoreDataError = () => {\n  const invalidData = localStorage.getItem(\"store-invalid\");\n\n  if (!invalidData) {\n    return { hadError: false };\n  }\n\n  const jsonInvalidData = JSON.parse(invalidData);\n  const validated = storeValidator.safeParse(jsonInvalidData);\n\n  return {\n    hadError: !!invalidData,\n    invalidData: jsonInvalidData,\n    parseError: invalidData && !validated.success ? validated.error : undefined,\n    resetError: () => {\n      localStorage.removeItem(\"store-invalid\");\n    },\n  };\n};\n","import DeleteForever from \"@mui/icons-material/DeleteForever\";\nimport { Button, Card, CardActions, CardContent, CardHeader, Stack, Typography } from \"@mui/material\";\nimport InvalidDataDialog from \"app/invalid-data-dialog\";\nimport { useState } from \"react\";\nimport { ConfirmDialog } from \"shared/components/confirm-dialog\";\nimport { downloadJson, useExport } from \"shared/hooks/use-export\";\nimport { useImport } from \"shared/hooks/use-import\";\nimport { useStoreDataError } from \"shared/hooks/use-store-data-error\";\nimport { resetStore } from \"shared/store\";\nimport { useLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const System = () => {\n  const onExport = useExport();\n  const onImport = useImport();\n  const { hadError, parseError, resetError, invalidData } = useStoreDataError();\n  const [error, setError] = useState(parseError);\n  const [isOpen, setIsOpen] = useState(hadError);\n  const localTime = useLocalDateTime();\n\n  return (\n    <>\n      <Stack spacing={2}>\n        <Card>\n          <CardHeader title={\"System\"} />\n          <CardContent>\n            <Typography variant=\"body2\">Built On {BUILD_DATE}</Typography>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader title={\"Data\"} />\n\n          <CardActions>\n            <Button\n              onClick={() =>\n                onImport().catch((err) => {\n                  setIsOpen(true);\n                  setError(err);\n                })\n              }\n            >\n              Import\n            </Button>\n            <Button onClick={onExport}>Export</Button>\n            <ConfirmDialog title=\"Reset Everything\" onConfirm={resetStore}>\n              <Button color=\"error\">\n                <DeleteForever />\n                Reset\n              </Button>\n            </ConfirmDialog>\n          </CardActions>\n        </Card>\n      </Stack>\n      <InvalidDataDialog open={isOpen} error={error}>\n        {hadError && (\n          <>\n            <Button\n              color=\"error\"\n              onClick={() => {\n                setIsOpen(false);\n                resetError?.();\n                resetStore();\n              }}\n            >\n              Reset\n            </Button>\n            <Button\n              onClick={() => {\n                downloadJson(`invalid-data-wealth-tracker-${localTime.toFormat(shortDate)}.json`, invalidData);\n              }}\n            >\n              Download Data\n            </Button>\n\n            <Button\n              onClick={() => {\n                setIsOpen(false);\n                resetError?.();\n              }}\n            >\n              Ignore\n            </Button>\n          </>\n        )}\n        {!hadError && (\n          <Button\n            onClick={() => {\n              setIsOpen(false);\n            }}\n          >\n            Cancel\n          </Button>\n        )}\n      </InvalidDataDialog>\n    </>\n  );\n};\n","import CloseIcon from \"@mui/icons-material/Close\";\nimport SettingsIcon from \"@mui/icons-material/Settings\";\nimport { Box, Button, Dialog, DialogContent, DialogTitle, IconButton, Tab, Tabs } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { Config } from \"./config\";\nimport { ScenarioExplorer } from \"./scenario-explorer\";\nimport { System } from \"./system\";\n\nexport const ConfigModal = () => {\n  const [tab, setTab] = useState(\"system\");\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <>\n      <Button onClick={() => setIsOpen(true)}>\n        <SettingsIcon />\n      </Button>\n      <Dialog maxWidth={false} open={isOpen} onClose={() => setIsOpen(false)}>\n        <DialogTitle sx={{ display: \"flex\" }}>\n          <Tabs value={tab} onChange={(_, value) => setTab(value)}>\n            <Tab value=\"projected-Income\" label=\"Projected Income\" />\n            <Tab value=\"projected-wealth\" label=\"Projected Wealth\" />\n            <Tab value=\"system\" label=\"System\" />\n          </Tabs>\n          <IconButton sx={{ height: \"min-content\", marginLeft: \"auto\" }} onClick={() => setIsOpen(false)}>\n            <CloseIcon />\n          </IconButton>\n        </DialogTitle>\n        <DialogContent>\n          <Box width={600} height={450}>\n            {tab === \"projected-Income\" && <ScenarioExplorer />}\n            {tab === \"projected-wealth\" && <Config />}\n            {tab === \"system\" && <System />}\n          </Box>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n};\n","import { Box, Stack, Tab, Tabs } from \"@mui/material\";\nimport { NetWealth } from \"capabilities/net-wealth\";\nimport { ProjectedIncome } from \"capabilities/projected-income\";\nimport { ProjectedWealth } from \"capabilities/projected-wealth\";\nimport { useState } from \"react\";\nimport { ConfigModal } from \"./config/config-modal\";\n\nexport const App = () => {\n  const [tab, setTab] = useState<string>(\"wealth\");\n\n  return (\n    <Box padding={2} paddingTop={0} display={\"flex\"} flexDirection={\"column\"} height=\"100%\" gap={2}>\n      <Box flex=\"0 1 auto\">\n        <Stack direction=\"row\">\n          <Tabs value={tab} onChange={(_, value) => setTab(value)}>\n            <Tab value=\"wealth\" label=\"Total Wealth\" />\n            <Tab value=\"projected-income\" label=\"Projected Income\" />\n            <Tab value=\"projected-wealth\" label=\"Projected Wealth\" />\n          </Tabs>\n          <Box marginLeft={\"auto\"} gap={2} display={\"flex\"}>\n            <ConfigModal />\n          </Box>\n        </Stack>\n      </Box>\n      <Box flex=\"1 1 auto\" height={\"100%\"} width={\"100%\"} overflow=\"hidden\">\n        {tab === \"wealth\" && <NetWealth />}\n        {tab === \"projected-income\" && <ProjectedIncome />}\n        {tab === \"projected-wealth\" && <ProjectedWealth />}\n      </Box>\n    </Box>\n  );\n};\n","export const groupBySingle = <T, Tkey extends string | number>(array: T[], selector: (data: T) => Tkey) => {\n  const result = {} as Partial<Record<Tkey, T>>;\n  for (let i = 0; i < array.length; i++) {\n    result[selector(array[i])] ??= array[i];\n  }\n  return result;\n};\n","import { DateTime } from \"luxon\";\nimport { MAX_NUM_ENTRIES } from \"shared/constants\";\nimport { ProjectedIncome, TimeSeries } from \"shared/models/store/current\";\nimport { findSameYear } from \"shared/utility/find-same-year\";\nimport { groupBySingle } from \"shared/utility/group-by-single\";\n\ntype UnweightedPairs = {\n  meritIncreasePct: number;\n  meritBonusPct: number;\n};\n\n/**\n *\n * @param year year to generate merit pairs for\n * @param timeseries pojected\n * @returns an array of possible merit pairs with their frequency weighted\n */\nconst getMeritPairs = (year: number, timeSeries: TimeSeries) => {\n  const meritBonusPct = findSameYear(year, timeSeries.meritBonusPct);\n  const meritIncreasePct = findSameYear(year, timeSeries.meritIncreasePct);\n\n  if (meritBonusPct && meritIncreasePct) {\n    return [\n      {\n        meritIncreasePct: meritIncreasePct.value,\n        meritBonusPct: meritBonusPct.value,\n        weight: 1,\n      },\n    ];\n  }\n\n  const meritBonusPctByYear = groupBySingle(timeSeries.meritBonusPct, (x) => DateTime.fromISO(x.date).year);\n  const unweightedPairs = timeSeries.meritIncreasePct.slice(-1 * MAX_NUM_ENTRIES).map((x) => {\n    const meritBonusPctPair = meritBonusPctByYear[DateTime.fromISO(x.date).year];\n    return {\n      meritIncreasePct: x.value,\n      meritBonusPct: meritBonusPctPair?.value ?? 0,\n    };\n  });\n\n  const groupsOfPairs = Object.values(\n    Object.groupBy(unweightedPairs, (x) => `${x.meritBonusPct} ${x.meritIncreasePct}`)\n  ) as UnweightedPairs[][];\n\n  return groupsOfPairs.map((x) => {\n    return {\n      ...x[0],\n      weight: x.length,\n    };\n  });\n};\n\nexport const getMeritSequence = (year: number, projectedIncome: ProjectedIncome) => {\n  const timeSeries = projectedIncome.timeSeries;\n  const meritPairs = getMeritPairs(year, timeSeries);\n\n  const pay = timeSeries.paycheck.filter((x) => DateTime.fromISO(x.date).year > year - 3);\n  const mostRecentPay = pay.at(-1) ?? timeSeries.paycheck.at(-1);\n\n  if (!mostRecentPay) {\n    return [];\n  }\n\n  const mostRecentPayYear = DateTime.fromISO(mostRecentPay.date).year;\n  const yearsToGenerate = Math.max(year - mostRecentPayYear, 1);\n\n  //generate all possible merit sequences that could happen from now to target year\n  let meritSequence = meritPairs.slice().map((x) => [x]);\n  for (let i = 0; i < yearsToGenerate - 1; i++) {\n    meritSequence = meritSequence.flatMap((x) => {\n      return meritPairs.map((merit) => {\n        return x.slice().concat(merit);\n      });\n    });\n  }\n\n  return meritSequence.map((values) => {\n    return {\n      weight: values.reduce((acc, curr) => acc * curr.weight, 1),\n      values: values,\n    };\n  });\n};\n","import { MAX_NUM_ENTRIES } from \"shared/constants\";\nimport { ProjectedIncome } from \"shared/models/store/current\";\nimport { findSameYear } from \"shared/utility/find-same-year\";\nimport { getMeritSequence } from \"./get-merit-sequence\";\n\nexport const getScenarioSize = (year: number, projectedIncome: ProjectedIncome) => {\n  const meritSequence = getMeritSequence(year, projectedIncome);\n  const companyBonusFactor = findSameYear(year, projectedIncome.timeSeries.companyBonusPct);\n  const companyBonusPcts = companyBonusFactor\n    ? [companyBonusFactor.value]\n    : projectedIncome.timeSeries.companyBonusPct.slice(-1 * MAX_NUM_ENTRIES).map((x) => x.value);\n\n  const companyBonusPctWeights = Object.entries(Object.groupBy(companyBonusPcts, (x) => x)).map(([, values]) => {\n    return {\n      weight: values!.length,\n      value: values!.at(0)!,\n    };\n  });\n\n  return meritSequence.slice(-1 * MAX_NUM_ENTRIES).length * companyBonusPctWeights.length;\n};\n","import { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { Scenario } from \"shared/models/scenario\";\nimport { store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { getScenarioSize } from \"shared/utility/get-scenario-size\";\nimport { scenarioStore } from \"../store/scenario-store\";\n\nconst maxScenarioSize = 2499;\nconst currentYear = getLocalDateTime().year;\nconst maxYear = (() => {\n  const projectedIncome = store.state.projectedIncome;\n  for (let i = currentYear; i <= currentYear + 5; i++) {\n    const size = getScenarioSize(i, projectedIncome);\n    if (size > maxScenarioSize || size === 0) {\n      return Math.max(currentYear, i - 1);\n    }\n  }\n  return currentYear + 5;\n})();\n\nconst workers = [\n  new Worker(new URL(\"worker.js\", import.meta.url), { type: \"module\", name: \"1\" }),\n  new Worker(new URL(\"worker.js\", import.meta.url), { type: \"module\", name: \"2\" }),\n  new Worker(new URL(\"worker.js\", import.meta.url), { type: \"module\", name: \"3\" }),\n  new Worker(new URL(\"worker.js\", import.meta.url), { type: \"module\", name: \"4\" }),\n];\n\nworkers.map(\n  (x) =>\n    (x.onmessage = (event: MessageEvent<{ year: number; scenarios: Scenario[] }>) => {\n      scenarioStore.setState((prev) => {\n        return create(prev, (x) => {\n          x.scenarios[event.data.year] = event.data.scenarios;\n\n          const range = Object.keys(x.scenarios)\n            .map((x) => +x)\n            .filter((x, i, arr) => {\n              return i === 0 ? true : x - arr[i - 1] === 1;\n            });\n          const min = range[0];\n          const max = range.at(-1);\n\n          x.loading = max !== maxYear;\n          x.maxYear = max!;\n          x.minYear = min;\n        });\n      });\n    })\n);\n\nconst loadAllScenarios = () => {\n  const projectedIncome = store.state.projectedIncome;\n  const first = projectedIncome.timeSeries.paycheck[1]?.date;\n  const date = first ? DateTime.fromISO(first) : getLocalDateTime();\n  const oldestYear = date.year;\n\n  workers[0].postMessage({ year: currentYear, projectedIncome });\n\n  let workerIdx = 1;\n  for (let i = oldestYear; i < currentYear; i++) {\n    const idx = workerIdx++ % workers.length;\n    workers[idx].postMessage({ year: i, projectedIncome });\n  }\n\n  for (let i = currentYear + 1; i <= maxYear; i++) {\n    const idx = workerIdx++ % workers.length;\n    workers[idx].postMessage({ year: i, projectedIncome });\n  }\n};\nloadAllScenarios();\n\nlet priorProjectedIncome = store.state.projectedIncome;\nstore.subscribe(() => {\n  if (priorProjectedIncome === store.state.projectedIncome) {\n    return;\n  }\n  scenarioStore.setState(() => ({ loading: false, scenarios: {}, maxYear: currentYear, minYear: currentYear }));\n  priorProjectedIncome = store.state.projectedIncome;\n  loadAllScenarios();\n});\n","import { CssBaseline, ThemeProvider, createTheme } from \"@mui/material\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers\";\nimport { AdapterLuxon } from \"@mui/x-date-pickers/AdapterLuxon\";\nimport { App } from \"app/app.tsx\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport \"shared/web-worker/entry\";\nimport \"./index.css\";\n\nimport { AllCommunityModule, ModuleRegistry } from \"ag-grid-community\";\nModuleRegistry.registerModules([AllCommunityModule]);\n\nconst darkTheme = createTheme({\n  palette: {\n    mode: \"dark\",\n  },\n});\n\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n  <React.StrictMode>\n    <ErrorBoundary\n      fallbackRender={(props) => {\n        return (\n          <>\n            <div style={{ backgroundColor: \"#FFF\" }}>{props.error.message}</div>\n            <div style={{ backgroundColor: \"#FFF\" }}>{props.error.stackTrace}</div>\n          </>\n        );\n      }}\n    >\n      <LocalizationProvider dateAdapter={AdapterLuxon}>\n        <ThemeProvider theme={darkTheme}>\n          <CssBaseline />\n          <App />\n        </ThemeProvider>\n      </LocalizationProvider>\n    </ErrorBoundary>\n  </React.StrictMode>\n);\n"],"names":["sortByDate","select","direction","a","b","toMillis","loanValidator","z","object","principal","number","ratePct","paymentsPerYear","payment","firstPaymentDate","string","ownershipPct","accountDataValidator","date","value","id","accountValidator","type","literal","data","array","mortgageValidator","loan","optional","wealth","record","union","projectedIncome","timeSeries","paycheck","meritIncreasePct","equityPct","meritBonusPct","meritBonus","companyBonusPct","companyBonus","retirementBonus","projectedWealth","socialSecurityLimit","socialSecurityTaxRate","medicareSupplementalTaxThreshold","medicareSupplementalTaxRate","savingsPerMonth","retirementContributionPaycheck","bonusWitholdingsRate","storeValidator","version","bonusWithholdingsRate","hidden","boolean","default","getDefaultStore","migration","Error","storeV0Validator","parse","storeV1Validator","storeV2Validator","storeV3Validator","storeV4Validator","keys","Object","i","length","next","console","log","createStore","validator","defaultValue","key","invalidData","localData","localStorage","getItem","JSON","safeParse","success","setItem","stringify","err","store","CreateStore","subscribe","current","state","addAccountEntry","accountName","amount","setState","create","prev","push","startOf","toString","sort","DateTime","fromISO","x","addProjectedIncome","concat","hideAccount","removeAccount","removeAccountEntry","idx","findIndex","splice","removeProjectedIncome","resetStore","setLoan","updateAccountDate","toISO","updateAccountName","currentAccountName","newAccountName","updateAccountValue","updateProjectedIncome","NewAccount","forwardRef","props","ref","$","_c","open","setOpen","useState","nameRef","useRef","error","setError","accountType","setAccountType","t0","t1","Symbol","for","undefined","marginTop","t2","t3","t4","t5","t6","target","t7","t8","t9","t10","t11","t12","t13","t14","t15","t16","children","t17","myTheme","themeQuartz","withParams","backgroundColor","browserColorScheme","chromeBackgroundColor","mix","onto","foregroundColor","headerFontSize","AgGrid","rest","height","getLocalDateTime","local","useLocalDateTime","shortDate","monthDay","formatCashShort","Intl","NumberFormat","style","currency","notation","maximumFractionDigits","minimumSignificantDigits","maximumSignificantDigits","format","formatCash","compact","fallback","Cash","disableTooltip","tooltip","placement","formatted","join","createAccountColumnConfig","headerName","valueFormatter","toFormat","valueGetter","cellEditor","editable","valueSetter","fromJSDate","newValue","isValid","cellRenderer","cellStyle","display","padding","sortable","width","colId","DeleteForeverIcon","hasJanFistEntry","year","janFirst","fromObject","day","month","diff","days","useMissingYears","account","accountItemsByYear","groupBy","years","entries","filter","find","entry","map","lookup","Set","missing","has","ConfirmDialog","onConfirm","title","isOpen","setIsOpen","minWidth","justifyContent","marginRight","AccountSettings","nextAccountName","setNextAccountName","Close","event","t18","t19","t20","t21","t22","AccountTab","useStore","setDate","setAmount","missingYears","hasSameDate","hasSame","accountColumnConfig","onAddEntry","marginLeft","color","input","startAdornment","_temp","x_0","api","sizeColumnsToFit","findNearestOnOrBefore","findNearestIdxOnOrBefore","selector","calcLoanBalance","rate","monthlyPayment","annualizedRate","periods","months","totalRate","balance","calcEquity","houseValue","loanBalance","useGraphDates","accounts","flatMap","AddEntry","date_0","Stack","mortgageColumnConfig","toFixed","equity","convertPct","min","datetime","offset","handleClose","textField","parsed","issues","path","createLoanValueGetter","MortgageTab","allAccounts","values","dates","mortgageData","Box","AccountTabs","firstAccount","setAccount","useEffect","_","_temp2","_temp3","account_0","useEarliestAccountEntry","fromMillis","reduce","acc","curr","Math","Infinity","getMortgageValue","mortgage","getAccountValue","getGraphValue","useGraphData","graphData","total","toJSDate","forEach","firstNonZero","slice","graphEntry","index","arr","WealthChart","initialFromDate","localTime","endOf","intialToDate","plus","fromDate","setFromDate","toDate","setToDate","getFullYear","filteredData","xKey","yKey","yName","renderer","_temp4","series","text","position","label","nice","interval","step","time","every","snapTo","theme","axes","options","value_0","datum","content","toISODate","x_1","data_0","stacked","datum_0","yKey_0","xKey_0","NetWealth","border","borderRadius","boxShadow","Card","minHeight","paddingBottom","paddingLeft","paddingTop","CashRange","max","minFormatted","maxFormatted","showRange","formatPercent","getProbablityColor","probability","Percent","PercentRange","Value","secondaryValue","tertiaryValue","className","flexDirection","alignItems","gap","flexShrink","ClusterValue","ClusterValues","clusters","eventDate","diffNow","toHuman","dur","smallestUnit","units","smallestIdx","indexOf","shiftTo","normalize","toObject","Duration","fromEntries","replaceAll","CountDown","dateTime","variant","dateFormat","countDownStr","useCountdownText","tooltipStr","useTooltipText","countDownColor","useCountDownColor","scenarioStore","Store","loading","maxYear","minYear","scenarios","makeMatrix","columns","rows","matrix","column","j","numericSort","toSorted","uniqueCountSorted","uniqueValueCount","lastSeenValue","ssq","sums","sumsOfSquares","sji","muji","fillMatrixColumn","iMin","iMax","cluster","backtrackMatrix","floor","jlow","jhigh","sjlowi","ssqjlow","ssqj","fillMatrices","nValues","shift","shiftedValue","ckmeans","nClusters","sorted","clusterRight","clusterLeft","areSetsEqual","collapseClusters","sets","y","result","scaleCluster","factor","median","scaleClusters","findMostMostLikely","clusterTitle","getClusterCount","uniqeValues","size","totalWeight","sumSimple","weight","clusterCount","useClusters","totalPay","pay","meritIncrease","taxablePay","_temp5","_temp6","_temp7","useTotalPayClusters","_temp8","allScenarios","bb0","_temp10","x_2","x_3","x_4","at","x_5","equityIncreasePct","x_6","_temp9","scenarios_0","findSameYear","getActualDate","getDefaultPayDates","getEligibleIncomeDateRanges","base","start","end","useDates","meritBonusDate","companyBonusDate","retirementBonusDate","defaultDates","useDateRanges","PaymentTypes","regular","ChunkByEquality","reduceRight","unshift","MAX_NUM_ENTRIES","SparkChart","maxClusters","subArr","flat","ckData","stroke","marker","itemStyler","params","fill","maxSpacing","formatter","params_0","isDisabled","sx","maxWidth","updateProjectedIncomeDate","dateVariant","tooltipValueGetter","valueFormatted","set","disabledStyle","DataEntry","defaultDate","flex","t23","t24","Layout","rowIndex","IncomeChart","history","future","_temp11","_temp12","_temp13","year_0","year_1","toLocaleLowerCase","year_2","lowProbability","medProbability","datum_1","yKey_1","xKey_1","params_1","color_1","highProbability","datum_2","yKey_2","xKey_2","params_2","IncomePerPeriodTooltip","incomePerPeriod","perPayday","count","useHasMeritPairs","usePayments","dateRanges","firstScenario","payPeriods","payments","payedOn","paychecks","aprToApr","basePay","ProjectedIncome","selectedYear","setSelectedYear","hasMissingPairs","flexWrap","t25","t26","t27","t28","t29","t30","t31","t32","t33","t34","t35","t36","t37","t38","t39","t40","t41","t42","t43","t44","t45","t46","t47","t48","t49","t50","t51","curr_0","isFuture","milliseconds","useFutureMortgageEquity","mortgages","localDate","januaryFirstSelectedYear","startDate","endDate","useFutureRetirementContributions","retirementContribution","remainingRegularPayments","remaining","perPaycheck","clamp","monthsInYear","useFutureSavings","config","monthsRemaining","perMonth","getThresholdTaxRemaining","taxRate","threshold","scenario","currentPaymentIdx","cumulative","useFutureSocialSecurity","useThresholdTax","useFutureMedicareTax","taxes","totalTaxable","taxableAmountOverThreshold","firstOccurrence","lastPaycheck","useFutureTotals","excludeHomeEquity","bonusTakeHomeFactor","savings","homeEquity","retirement","totals","futureEvents","rawClusters","numValues","FutureEvents","onChange","medicare","socialSecurity","ThresholdTaxCard","thresholdTax","equals","ClusterCard","useFuturesWealth","totalsPlusOne","useTimeSeriesWealth","localDateTime","earliest","futuresWealth","Array","futureBenchmarkIdx","some","accountWealth","futureWealth","graphDate","benchmarkWealth","yoyCash","yoyPct","benchmarkWealth_0","dataYear","titleYear","offsetIdx","columnConfig","systemYear","WealthTable","e","ProjectedWealth","setYear","setProjectedWealth","configName","ConfigEntry","isPercent","isNan","Number","isNaN","onchange","Config","ScenarioExplorer","scenarioIndex","setScenarioIndex","scenarioData","top","bottom","right","left","overflow","t52","t53","t54","t55","t56","t57","t58","i_0","toReversed","t59","t60","t61","t62","t63","t64","t65","t66","t67","t68","t69","t70","companyBonusFactor","t71","t72","t73","t74","lastThreeMeritBonusFactor","t75","lastThreeMeritBonuses","t76","i_2","t77","t78","t79","t80","t81","retirementBonusPct","t82","t83","t84","t85","i_1","InvalidDataDialog","message","downloadJson","filename","storeData","link","document","createElement","download","blob","Blob","href","window","URL","createObjectURL","click","useExport","selectFile","contentType","Promise","multiple","accept","files","from","useImport","resolve","reject","then","reader","FileReader","readAsDataURL","file","onload","readerEvent","atob","split","useStoreDataError","hadError","jsonInvalidData","validated","parseError","resetError","removeItem","System","onExport","onImport","BUILD_DATE","catch","ConfigModal","tab","setTab","App","groupBySingle","getMeritPairs","meritBonusPctByYear","unweightedPairs","meritBonusPctPair","groupsOfPairs","getMeritSequence","meritPairs","mostRecentPay","mostRecentPayYear","yearsToGenerate","meritSequence","merit","getScenarioSize","companyBonusPcts","companyBonusPctWeights","maxScenarioSize","currentYear","workers","Worker","name","onmessage","range","loadAllScenarios","first","oldestYear","postMessage","workerIdx","priorProjectedIncome","ModuleRegistry","registerModules","AllCommunityModule","darkTheme","createTheme","palette","mode","ReactDOM","createRoot","getElementById","render","stackTrace","AdapterLuxon"],"mappings":"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"}