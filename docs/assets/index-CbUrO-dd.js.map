{"version":3,"file":"index-CbUrO-dd.js","sources":["../../src/shared/utility/sort-by-date.ts","../../src/shared/models/store/version-0/loan.ts","../../src/shared/models/store/version-3/account-data.ts","../../src/shared/models/store/version-0/account-data.ts","../../src/shared/models/store/version-0/account.ts","../../src/shared/models/store/version-0/mortgage.ts","../../src/shared/models/store/version-0/net-wealth.ts","../../src/shared/models/store/version-0/projected-income.ts","../../src/shared/models/store/version-2/projected-wealth.ts","../../src/shared/models/store/version-0/projected-wealth.ts","../../src/shared/models/store/version-1/store.ts","../../src/shared/models/store/version-2/store.ts","../../src/shared/models/store/version-3/mortgage.ts","../../src/shared/models/store/version-3/projected-income.ts","../../src/shared/models/store/version-5/account.ts","../../src/shared/models/store/version-5/mortgage.ts","../../src/shared/models/store/version-5/net-wealth.ts","../../src/shared/models/store/version-6/get-default.ts","../../src/shared/models/store/version-6/projected-wealth.ts","../../src/shared/models/store/version-6/store.ts","../../src/shared/constants.ts","../../src/shared/models/store/version-0/store.ts","../../src/shared/models/store/version-3/account.ts","../../src/shared/models/store/version-3/net-wealth.ts","../../src/shared/models/store/version-3/projected-wealth.ts","../../src/shared/models/store/version-3/store.ts","../../src/shared/models/store/version-4/projected-wealth.ts","../../src/shared/models/store/version-4/store.ts","../../src/shared/models/store/version-5/store.ts","../../src/shared/store/migrations.ts","../../src/shared/store/store.ts","../../src/shared/store/add-account-entry.ts","../../src/shared/store/add-projected-income.ts","../../src/shared/store/hide-account.ts","../../src/shared/store/remove-account.ts","../../src/shared/store/remove-account-entry.ts","../../src/shared/store/remove-projected-income.ts","../../src/shared/store/reset-store.ts","../../src/shared/store/set-loan.ts","../../src/shared/store/update-account-date.ts","../../src/shared/store/update-account-name.ts","../../src/shared/store/update-account-value.ts","../../src/shared/store/update-projected-income.ts","../../src/capabilities/net-wealth/new-account.tsx","../../src/shared/components/ag-grid/ag-grid.tsx","../../src/shared/utility/current-date.ts","../../src/shared/utility/format-date.ts","../../src/shared/utility/format-cash.ts","../../src/shared/components/formatters/cash.tsx","../../src/capabilities/net-wealth/tab-types/account/column-config.tsx","../../src/capabilities/net-wealth/tab-types/account/hooks/useMissingYears.ts","../../src/shared/components/confirm-dialog.tsx","../../src/capabilities/net-wealth/tab-types/account/settings.tsx","../../src/capabilities/net-wealth/tab-types/account/account.tsx","../../src/shared/utility/find-nearest-on-or-before.ts","../../src/shared/utility/mortgage-calc.ts","../../src/shared/utility/use-graph-dates.ts","../../src/capabilities/net-wealth/tab-types/mortgage/add-entry.tsx","../../src/capabilities/net-wealth/tab-types/mortgage/column-config.tsx","../../src/capabilities/net-wealth/tab-types/mortgage/settings.tsx","../../src/capabilities/net-wealth/tab-types/mortgage/mortgage.tsx","../../src/capabilities/net-wealth/account-tabs.tsx","../../src/shared/hooks/use-earliest-account-entry.ts","../../src/shared/utility/get-graph-value.ts","../../src/capabilities/net-wealth/wealth-chart/use-graph-data.ts","../../src/capabilities/net-wealth/wealth-chart/wealth-chart.tsx","../../src/capabilities/net-wealth/net-wealth.tsx","../../src/shared/components/card.tsx","../../src/shared/components/formatters/cash-range.tsx","../../src/shared/utility/format-percent.ts","../../src/shared/utility/get-probablity-color.ts","../../src/shared/components/formatters/percent.tsx","../../src/shared/components/formatters/percent-range.tsx","../../src/shared/components/formatters/value.tsx","../../src/shared/components/formatters/cluster-value.tsx","../../src/shared/utility/to-human.ts","../../src/shared/components/formatters/countdown.tsx","../../src/shared/store/scenario-store.ts","../../src/shared/utility/ckmeans/make-matrix.ts","../../src/shared/utility/ckmeans/numeric-sort.ts","../../src/shared/utility/ckmeans/unique-count-sorted.ts","../../src/shared/utility/ckmeans/ckmeans.ts","../../src/shared/utility/ckmeans/collapse.ts","../../src/shared/utility/cluster-helpers.ts","../../src/shared/hooks/use-clusters.ts","../../src/shared/utility/find-same-year.ts","../../src/shared/utility/get-actual-date.ts","../../src/shared/utility/get-default-pay-dates.ts","../../src/shared/utility/get-eligible-income-date-ranges.ts","../../src/shared/hooks/use-dates.ts","../../src/shared/models/payment-periods.ts","../../src/shared/utility/chunk-by-equality.ts","../../src/capabilities/projected-income/spark-chart.tsx","../../src/shared/store/update-projected-income-date.ts","../../src/capabilities/projected-income/data-entry/column-config.tsx","../../src/capabilities/projected-income/data-entry/data-entry.tsx","../../src/capabilities/projected-income/income-chart.tsx","../../src/capabilities/projected-income/income-per-period.tsx","../../src/capabilities/projected-income/use-has-merit-pairs.ts","../../src/capabilities/projected-income/projected-income.tsx","../../src/shared/utility/is-future.ts","../../src/capabilities/projected-wealth/hooks/use-future-mortgage-equity.ts","../../src/capabilities/projected-wealth/hooks/use-future-retirement-contributions.ts","../../src/capabilities/projected-wealth/hooks/use-future-savings.ts","../../src/shared/utility/get-threshold-tax-remaining.ts","../../src/capabilities/projected-wealth/hooks/use-future-social-security.ts","../../src/capabilities/projected-wealth/hooks/use-future-totals.tsx","../../src/capabilities/projected-wealth/future-events.tsx","../../src/capabilities/projected-wealth/hooks/use-times-series-wealth.ts","../../src/capabilities/projected-wealth/wealth-chart.tsx","../../src/capabilities/projected-wealth/wealth-table/colum-config.tsx","../../src/capabilities/projected-wealth/wealth-table/wealth-table.tsx","../../src/capabilities/projected-wealth/projected-wealth.tsx","../../src/shared/store/set-projected-wealth.ts","../../src/app/config/config-entry.tsx","../../src/app/config/config.tsx","../../src/app/config/scenario-explorer.tsx","../../src/app/invalid-data-dialog.tsx","../../src/shared/hooks/use-export.tsx","../../src/shared/hooks/use-import.tsx","../../src/shared/hooks/use-store-data-error.ts","../../src/app/config/system.tsx","../../src/app/config/config-modal.tsx","../../src/app/app.tsx","../../src/app/router.tsx","../../src/shared/utility/luxon-extensions.ts","../../src/shared/utility/group-by-single.ts","../../src/shared/utility/get-merit-sequence.ts","../../src/shared/utility/get-scenario-size.ts","../../src/shared/web-worker/entry.ts","../../src/main.tsx"],"sourcesContent":["import { DateTime } from \"luxon\";\n\nexport const sortByDate =\n  <T>(select: (data: T) => DateTime, direction: \"asc\" | \"desc\") =>\n  (a: T, b: T) =>\n    direction === \"asc\" ? select(a).toMillis() - select(b).toMillis() : select(b).toMillis() - select(a).toMillis();\n","import { z } from \"zod\";\n\nexport const loanValidator = z.object({\n  principal: z.number(),\n  ratePct: z.number(),\n  paymentsPerYear: z.number(),\n  payment: z.number(),\n  firstPaymentDate: z.string(),\n  ownershipPct: z.number(),\n});\n\nexport type Loan = z.infer<typeof loanValidator>;\n","import { z } from \"zod\";\n\nexport const accountDataValidator = z.object({\n  date: z.string(),\n  value: z.number(),\n});\n\nexport type AccountData = z.infer<typeof accountDataValidator>;\n","import { z } from \"zod\";\n\nexport const accountDataValidator = z.object({\n  date: z.string(),\n  value: z.number(),\n  id: z.string(),\n});\n\nexport type AccountData = z.infer<typeof accountDataValidator>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const accountValidator = z.object({\n  type: z.literal(\"account\"),\n  data: z.array(accountDataValidator),\n});\n\nexport type Account = z.infer<typeof accountValidator>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\nimport { loanValidator } from \"./loan\";\n\nexport const mortgageValidator = z.object({\n  type: z.literal(\"mortgage\"),\n  loan: loanValidator.optional(),\n  data: z.array(accountDataValidator),\n});\n\nexport type Mortgage = z.infer<typeof mortgageValidator>;\n","import { z } from \"zod\";\nimport { accountValidator } from \"./account\";\nimport { mortgageValidator } from \"./mortgage\";\n\nexport const wealth = z.record(z.union([accountValidator, mortgageValidator]));\n\nexport type Wealth = z.infer<typeof wealth>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const projectedIncome = z.object({\n  timeSeries: z.object({\n    paycheck: z.array(accountDataValidator),\n    meritIncreasePct: z.array(accountDataValidator),\n    equityPct: z.array(accountDataValidator),\n    meritBonusPct: z.array(accountDataValidator),\n    meritBonus: z.array(accountDataValidator),\n    companyBonusPct: z.array(accountDataValidator),\n    companyBonus: z.array(accountDataValidator),\n    retirementBonus: z.array(accountDataValidator),\n  }),\n});\n\nexport type ProjectedIncome = z.infer<typeof projectedIncome>;\nexport type TimeSeries = keyof ProjectedIncome[\"timeSeries\"];\n","import { z } from \"zod\";\n\nexport const projectedWealth = z.object({\n  socialSecurityLimit: z.number(),\n  socialSecurityTaxRate: z.number(),\n  medicareSupplementalTaxThreshold: z.number(),\n  medicareSupplementalTaxRate: z.number(),\n  savingsPerMonth: z.number(),\n  retirementContributionPaycheck: z.number(),\n  bonusWitholdingsRate: z.number(),\n});\n\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\nexport type ProjectedWealthKeys = keyof ProjectedWealth;\n","import { z } from \"zod\";\n\nexport const projectedWealth = z.object({\n  socialSecurityLimit: z.number(),\n  socialSecurityTaxRate: z.number(),\n  medicareSupplementalTaxThreshold: z.number(),\n  medicareSupplementalTaxRate: z.number(),\n  savingsPerMonth: z.number(),\n  retirementContributionPaycheck: z.number(),\n});\n\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\nexport type ProjectedWealthKeys = keyof ProjectedWealth;\n","import { z } from \"zod\";\nimport { wealth } from \"../version-0/net-wealth\";\nimport { projectedIncome } from \"../version-0/projected-income\";\nimport { projectedWealth } from \"../version-0/projected-wealth\";\n\nexport const storeValidator = z.object({\n  version: z.literal(1),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { z } from \"zod\";\nimport { projectedIncome, wealth } from \"../version-1\";\nimport { projectedWealth } from \"./projected-wealth\";\n\nexport const storeValidator = z.object({\n  version: z.literal(2),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { z } from \"zod\";\nimport { loanValidator } from \"../version-2\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const mortgageValidator = z.object({\n  type: z.literal(\"mortgage\"),\n  loan: loanValidator.optional(),\n  data: z.array(accountDataValidator),\n});\n\nexport type Mortgage = z.infer<typeof mortgageValidator>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const projectedIncome = z.object({\n  timeSeries: z.object({\n    paycheck: z.array(accountDataValidator),\n    meritIncreasePct: z.array(accountDataValidator),\n    equityPct: z.array(accountDataValidator),\n    meritBonusPct: z.array(accountDataValidator),\n    meritBonus: z.array(accountDataValidator),\n    companyBonusPct: z.array(accountDataValidator),\n    companyBonus: z.array(accountDataValidator),\n    retirementBonus: z.array(accountDataValidator),\n  }),\n});\n\nexport type ProjectedIncome = z.infer<typeof projectedIncome>;\nexport type TimeSeries = ProjectedIncome[\"timeSeries\"];\nexport type TimeSeriesKeys = keyof ProjectedIncome[\"timeSeries\"];\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"../version-3/account-data\";\n\nexport const accountValidator = z.object({\n  type: z.literal(\"account\"),\n  data: z.array(accountDataValidator),\n  hidden: z.boolean().default(false),\n});\n\nexport type Account = z.infer<typeof accountValidator>;\n","import { z } from \"zod\";\nimport { loanValidator } from \"../version-2\";\nimport { accountDataValidator } from \"../version-3/account-data\";\n\nexport const mortgageValidator = z.object({\n  type: z.literal(\"mortgage\"),\n  loan: loanValidator.optional(),\n  data: z.array(accountDataValidator),\n  hidden: z.boolean().default(false),\n});\n\nexport type Mortgage = z.infer<typeof mortgageValidator>;\n","import { z } from \"zod\";\nimport { accountValidator } from \"./account\";\nimport { mortgageValidator } from \"./mortgage\";\n\nexport const wealth = z.record(z.union([accountValidator, mortgageValidator]));\n\nexport type Wealth = z.infer<typeof wealth>;\n","import { Store } from \"./store\";\n\nexport const getDefaultStore = (): Store => ({\n  version: 6,\n  projectedIncome: {\n    timeSeries: {\n      paycheck: [],\n      meritBonusPct: [],\n      companyBonusPct: [],\n      meritBonus: [],\n      companyBonus: [],\n      retirementBonus: [],\n      equityPct: [],\n      meritIncreasePct: [],\n    },\n  },\n  wealth: {},\n  projectedWealth: {\n    medicareSupplementalTaxThreshold: 200_000,\n    socialSecurityLimit: 168_600,\n    socialSecurityTaxRate: 0.062,\n    medicareSupplementalTaxRate: 0.009,\n    savingsPerPaycheck: 0,\n    retirementContributionPaycheck: 0,\n    bonusWithholdingsRate: 0,\n  },\n});\n","import { z } from \"zod\";\n\nexport const projectedWealth = z.object({\n  socialSecurityLimit: z.number(),\n  socialSecurityTaxRate: z.number(),\n  medicareSupplementalTaxThreshold: z.number(),\n  medicareSupplementalTaxRate: z.number(),\n  savingsPerPaycheck: z.number(),\n  retirementContributionPaycheck: z.number(),\n  bonusWithholdingsRate: z.number(),\n});\n\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\nexport type ProjectedWealthKeys = keyof ProjectedWealth;\n","import { z } from \"zod\";\nimport { projectedIncome } from \"../version-3/projected-income\";\nimport { wealth } from \"../version-5/net-wealth\";\nimport { projectedWealth } from \"./projected-wealth\";\n\nexport const storeValidator = z.object({\n  version: z.literal(6),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","export const MAX_NUM_ENTRIES = 10;\nexport const PAYMENTS_PER_YEAR = 26;\nexport const MONTHS_PER_YEAR = 12;\n","import { z } from \"zod\";\nimport { wealth } from \"./net-wealth\";\nimport { projectedIncome } from \"./projected-income\";\nimport { projectedWealth } from \"./projected-wealth\";\n\nexport const storeValidator = z.object({\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const accountValidator = z.object({\n  type: z.literal(\"account\"),\n  data: z.array(accountDataValidator),\n});\n\nexport type Account = z.infer<typeof accountValidator>;\n","import { z } from \"zod\";\nimport { accountValidator } from \"./account\";\nimport { mortgageValidator } from \"./mortgage\";\n\nexport const wealth = z.record(z.union([accountValidator, mortgageValidator]));\n\nexport type Wealth = z.infer<typeof wealth>;\n","import { z } from \"zod\";\n\nexport const projectedWealth = z.object({\n  socialSecurityLimit: z.number(),\n  socialSecurityTaxRate: z.number(),\n  medicareSupplementalTaxThreshold: z.number(),\n  medicareSupplementalTaxRate: z.number(),\n  savingsPerMonth: z.number(),\n  retirementContributionPaycheck: z.number(),\n  bonusWitholdingsRate: z.number(),\n});\n\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\nexport type ProjectedWealthKeys = keyof ProjectedWealth;\n","import { z } from \"zod\";\nimport { wealth } from \"./net-wealth\";\nimport { projectedIncome } from \"./projected-income\";\nimport { projectedWealth } from \"./projected-wealth\";\n\nexport const storeValidator = z.object({\n  version: z.literal(3),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { z } from \"zod\";\n\nexport const projectedWealth = z.object({\n  socialSecurityLimit: z.number(),\n  socialSecurityTaxRate: z.number(),\n  medicareSupplementalTaxThreshold: z.number(),\n  medicareSupplementalTaxRate: z.number(),\n  savingsPerMonth: z.number(),\n  retirementContributionPaycheck: z.number(),\n  bonusWithholdingsRate: z.number(),\n});\n\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\nexport type ProjectedWealthKeys = keyof ProjectedWealth;\n","import { z } from \"zod\";\nimport { wealth } from \"../version-3/net-wealth\";\nimport { projectedIncome } from \"../version-3/projected-income\";\nimport { projectedWealth } from \"./projected-wealth\";\n\nexport const storeValidator = z.object({\n  version: z.literal(4),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { z } from \"zod\";\nimport { projectedIncome } from \"../version-3/projected-income\";\nimport { projectedWealth } from \"../version-4/projected-wealth\";\nimport { wealth } from \"./net-wealth\";\n\nexport const storeValidator = z.object({\n  version: z.literal(5),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { MONTHS_PER_YEAR, PAYMENTS_PER_YEAR } from \"shared/constants\";\nimport { storeValidator } from \"shared/models/store/current\";\nimport { storeValidator as storeV0Validator } from \"shared/models/store/version-0\";\nimport { Store as StoreV1, storeValidator as storeV1Validator } from \"shared/models/store/version-1\";\nimport { Store as StoreV2, storeValidator as storeV2Validator } from \"shared/models/store/version-2\";\nimport { Store as StoreV3, storeValidator as storeV3Validator } from \"shared/models/store/version-3\";\nimport { Store as StoreV4, storeValidator as storeV4Validator } from \"shared/models/store/version-4\";\nimport { Store as StoreV5, storeValidator as storeV5Validator } from \"shared/models/store/version-5\";\nimport { Store as StoreV6 } from \"shared/models/store/version-6\";\n\nexport const migration = (data: unknown) => {\n  if (data === null || data === undefined) {\n    throw new Error(\"parsed data is null or undefined\");\n  } else if (typeof data !== \"object\") {\n    throw new Error(\"Parsed data is not an object\");\n  }\n\n  if (!(\"version\" in data)) {\n    storeV0Validator.parse(data);\n    (data as StoreV1).version = 1;\n  }\n\n  if (\"version\" in data) {\n    if (data.version === 1) {\n      storeV1Validator.parse(data);\n      (data as StoreV2).version = 2;\n      (data as StoreV2).projectedWealth.bonusWitholdingsRate = 0;\n    }\n    if (data.version === 2) {\n      storeV2Validator.parse(data);\n      (data as StoreV3).version = 3;\n    }\n    if (data.version === 3) {\n      storeV3Validator.parse(data);\n      (data as StoreV4).version = 4;\n      (data as StoreV4).projectedWealth.bonusWithholdingsRate = (data as StoreV3).projectedWealth.bonusWitholdingsRate;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      delete (data as any).projectedWealth.bonusWitholdingsRate;\n    }\n    if (data.version === 4) {\n      storeV4Validator.parse(data);\n      (data as StoreV5).version = 5;\n      const keys = Object.keys((data as StoreV5).wealth);\n      for (let i = 0; i < keys.length; i++) {\n        (data as StoreV5).wealth[keys[i]].hidden = false;\n      }\n    }\n    if (data.version === 5) {\n      storeV5Validator.parse(data);\n      (data as StoreV6).version = 6;\n      (data as StoreV6).projectedWealth.savingsPerPaycheck =\n        (data as StoreV5).projectedWealth.savingsPerMonth * (MONTHS_PER_YEAR / PAYMENTS_PER_YEAR);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      delete (data as any).projectedWealth.savingsPerMonth;\n    }\n  }\n\n  const next = storeValidator.parse(data);\n  console.log(next);\n  return next;\n};\n","import { Store as CreateStore } from \"@tanstack/store\";\nimport { ZodSchema } from \"zod\";\nimport { Store, getDefaultStore, storeValidator } from \"../models/store/current\";\nimport { migration } from \"./migrations\";\n\nconst jsonTryParse = (data?: string | null): { result: unknown; isSuccess: boolean } => {\n  if (!data) {\n    return { result: data, isSuccess: false };\n  }\n  try {\n    return { result: JSON.parse(data), isSuccess: true };\n  } catch {\n    return { result: data, isSuccess: false };\n  }\n};\n\nexport const createStore = <T extends object>(validator: ZodSchema<unknown>, defaultValue: T) => {\n  const key = \"store\";\n  const invalidData = \"store-invalid\";\n  const localData = localStorage.getItem(key);\n  const { result: parsedData, isSuccess } = jsonTryParse(localData);\n  const data = isSuccess ? parsedData : defaultValue;\n  const parse = validator.safeParse(data);\n\n  if (!parse.success) {\n    try {\n      migration(data);\n      localStorage.setItem(key, JSON.stringify(data));\n    } catch (err) {\n      console.log(\"error\", err);\n      console.log(\"invalid data\", data);\n      if (localData !== null) {\n        localStorage.setItem(invalidData, localData);\n      }\n      localStorage.setItem(key, JSON.stringify(defaultValue));\n    }\n  }\n\n  const store = new CreateStore<T>(data as T);\n  store.subscribe(() => {\n    const current = localStorage.getItem(key);\n    current && localStorage.setItem(`${key}-previous`, current);\n    localStorage.setItem(key, JSON.stringify(store.state));\n  });\n\n  return store;\n};\n\nexport const store = createStore<Store>(storeValidator, getDefaultStore());\n","import { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { Account } from \"shared/models/store/current\";\nimport { sortByDate } from \"../utility/sort-by-date\";\nimport { store } from \"./store\";\n\nexport const addAccountEntry = (accountName: string, date: DateTime<true>, amount: number) => {\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      (next.wealth[accountName] as Account).data.push({\n        date: date.startOf(\"day\").toString(),\n        value: amount,\n      });\n      next.wealth[accountName].data.sort(sortByDate((x) => DateTime.fromISO(x.date), \"asc\"));\n    });\n  });\n};\n","import { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { TimeSeriesKeys } from \"shared/models/store/current\";\nimport { sortByDate } from \"shared/utility/sort-by-date\";\nimport { store } from \"./store\";\n\nexport const addProjectedIncome = (date: DateTime, timeSeries: TimeSeriesKeys, value: number) => {\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      next.projectedIncome.timeSeries[timeSeries] = next.projectedIncome.timeSeries[timeSeries]\n        .concat({\n          date: date.startOf(\"day\").toString(),\n          value,\n        })\n        .sort(sortByDate((x) => DateTime.fromISO(x.date), \"asc\"));\n    });\n  });\n};\n","import { create } from \"mutative\";\nimport { store } from \"./store\";\n\nexport const hideAccount = (accountName: string) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      if (next.wealth[accountName]) {\n        next.wealth[accountName].hidden = true;\n      }\n    });\n  });\n","import { create } from \"mutative\";\nimport { store } from \"./store\";\n\nexport const removeAccount = (accountName: string) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      delete next.wealth[accountName];\n    });\n  });\n","import { create } from \"mutative\";\nimport { AccountData } from \"shared/models/store/current\";\nimport { store } from \"./store\";\n\nexport const removeAccountEntry = (accountName: string, data: AccountData) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      const idx = prev.wealth[accountName]?.data.findIndex((x) => x === data);\n      if (idx === undefined || idx < 0) {\n        throw new Error(\"failed to find data\");\n      }\n\n      next.wealth[accountName].data.splice(idx, 1);\n      return next;\n    });\n  });\n","import { create } from \"mutative\";\nimport { AccountData, TimeSeriesKeys } from \"shared/models/store/current\";\nimport { store } from \".\";\n\nexport const removeProjectedIncome = (accountName: TimeSeriesKeys, data: AccountData) => {\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      const idx = prev.projectedIncome.timeSeries[accountName]?.findIndex((x) => x === data);\n      if (idx === undefined || idx < 0) {\n        throw new Error(\"failed to find data\");\n      }\n\n      next.projectedIncome.timeSeries[accountName].splice(idx, 1);\n    });\n  });\n};\n","import { getDefaultStore } from \"shared/models/store/current\";\nimport { store } from \"./store\";\n\nexport const resetStore = () => store.setState(() => getDefaultStore());\n","import { create } from \"mutative\";\nimport { Loan, Mortgage } from \"shared/models/store/current\";\nimport { store } from \"./store\";\n\nexport const setLoan = (accountName: string, loan: Loan) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      if (next.wealth[accountName].type === \"mortgage\") {\n        (next.wealth[accountName] as Mortgage).loan = loan;\n      }\n    });\n  });\n","import { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { AccountData } from \"shared/models/store/current\";\nimport { store } from \".\";\n\nexport const updateAccountDate = (accountName: string, data: AccountData, date: DateTime) => {\n  store.setState((prev) => {\n    const next = create(prev, (next) => {\n      const idx = prev.wealth[accountName]?.data.findIndex((x) => x === data);\n      if (idx < 0) {\n        throw new Error(\"failed to find data\");\n      }\n\n      next.wealth[accountName].data[idx].date = date.toISO()!;\n    });\n    return next;\n  });\n};\n","import { create } from \"mutative\";\nimport { store } from \"./store\";\n\nexport const updateAccountName = (currentAccountName: string, newAccountName: string) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      next.wealth[newAccountName] = next.wealth[currentAccountName];\n      delete next.wealth[currentAccountName];\n    });\n  });\n","import { create } from \"mutative\";\nimport { AccountData } from \"shared/models/store/current\";\nimport { store } from \".\";\n\nexport const updateAccountValue = (accountName: string, data: AccountData, value: number) => {\n  store.setState((prev) => {\n    const next = create(prev, (next) => {\n      const idx = prev.wealth[accountName]?.data.findIndex((x) => x === data);\n      if (idx < 0) {\n        throw new Error(\"failed to find data\");\n      }\n\n      next.wealth[accountName].data[idx].value = value;\n    });\n    return next;\n  });\n};\n","import { create } from \"mutative\";\nimport { AccountData, TimeSeriesKeys } from \"shared/models/store/current\";\nimport { store } from \".\";\n\nexport const updateProjectedIncome = (timeSeries: TimeSeriesKeys, data: AccountData, value: number) => {\n  store.setState((prev) => {\n    const next = create(prev, (next) => {\n      const idx = prev.projectedIncome.timeSeries[timeSeries].findIndex((x) => x === data);\n      if (idx < 0) {\n        throw new Error(\"failed to find data\");\n      }\n      next.projectedIncome.timeSeries[timeSeries][idx].value = value;\n    });\n    return next;\n  });\n};\n","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, MenuItem, Stack, TextField } from \"@mui/material\";\nimport { create } from \"mutative\";\nimport { ReactNode, forwardRef, useRef, useState } from \"react\";\nimport { store } from \"shared/store\";\n\ntype AssetType = \"account\" | \"mortgage\";\nexport const NewAccount = forwardRef<HTMLButtonElement, { children?: ReactNode }>(function NewAccount(props, ref) {\n  const [open, setOpen] = useState(false);\n  const nameRef = useRef<HTMLInputElement>(null);\n  const [error, setError] = useState(false);\n  const [accountType, setAccountType] = useState<AssetType>();\n\n  return (\n    <>\n      <Button\n        ref={ref}\n        variant=\"outlined\"\n        onClick={() => {\n          setOpen(true);\n          setError(false);\n          setAccountType(undefined);\n        }}\n        sx={{ marginTop: 3 }}\n      >\n        add account\n      </Button>\n\n      <Dialog open={open} onClose={() => setOpen(false)}>\n        <DialogTitle>Add New Account</DialogTitle>\n        <DialogContent>\n          <Stack spacing={2} margin={2}>\n            <TextField\n              select\n              color={error ? \"error\" : \"primary\"}\n              onChange={(value) => {\n                setError(false);\n                setAccountType(value.target.value as AssetType);\n              }}\n              label=\"Type\"\n            >\n              <MenuItem value=\"mortgage\">Mortgage</MenuItem>\n              <MenuItem value=\"account\">Generic Account</MenuItem>\n            </TextField>\n\n            <TextField\n              placeholder=\"Name\"\n              onChange={() => {\n                setError(false);\n              }}\n              error={error}\n              inputRef={nameRef}\n            />\n          </Stack>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            disabled={error}\n            onClick={() => {\n              store.setState((prev) => {\n                return create(prev, (next) => {\n                  if (!nameRef.current?.value || !accountType || prev.wealth[nameRef.current.value]) {\n                    setError(true);\n                    return;\n                  }\n\n                  next.wealth[nameRef.current.value] = {\n                    type: accountType,\n                    data: [],\n                    hidden: false,\n                  };\n\n                  setOpen(false);\n                });\n              });\n            }}\n          >\n            Add\n          </Button>\n        </DialogActions>\n      </Dialog>\n      {props?.children}\n    </>\n  );\n});\n","import { AgGridReact, AgGridReactProps } from \"ag-grid-react\";\n\nimport { themeQuartz } from \"ag-grid-community\";\n\n// to use myTheme in an application, pass it to the theme grid option\nconst myTheme = themeQuartz.withParams({\n  backgroundColor: \"#1f2836\",\n  browserColorScheme: \"dark\",\n  chromeBackgroundColor: {\n    ref: \"foregroundColor\",\n    mix: 0.07,\n    onto: \"backgroundColor\",\n  },\n  foregroundColor: \"#FFF\",\n  headerFontSize: 14,\n});\n\nexport const AgGrid = (props: AgGridReactProps & { id: string }) => {\n  const { id, ...rest } = props;\n  return (\n    <div id={id} style={{ height: \"100%\" }}>\n      <AgGridReact {...rest} theme={myTheme} suppressMovableColumns />\n    </div>\n  );\n};\n","import { DateTime } from \"luxon\";\n\nexport const getLocalDateTime = () => {\n  const date = DateTime.local();\n  return date;\n};\n\nexport const useLocalDateTime = () => {\n  const date = DateTime.local();\n  return date;\n};\n","export const shortDate = \"yyyy-MM-dd\";\nexport const monthDay = \"MMM dd\";\n","export const formatCashShort = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  notation: \"compact\",\n  maximumFractionDigits: 0,\n  minimumSignificantDigits: 3,\n  maximumSignificantDigits: 3,\n}).format;\n\nexport const formatCash = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  maximumFractionDigits: 0,\n}).format;\n","import { Tooltip } from \"@mui/material\";\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\n\ninterface CashProps {\n  value?: number;\n  fallback?: number;\n  disableTooltip?: boolean;\n  compact?: boolean;\n  tooltip?: string;\n  placement?:\n    | \"top\"\n    | \"right\"\n    | \"bottom\"\n    | \"left\"\n    | \"bottom-end\"\n    | \"bottom-start\"\n    | \"left-end\"\n    | \"left-start\"\n    | \"right-end\"\n    | \"right-start\"\n    | \"top-end\"\n    | \"top-start\"\n    | undefined;\n}\n\nconst format = (value: number | undefined, compact: boolean, fallback: number | undefined) => {\n  if (value === undefined) {\n    return fallback;\n  }\n  return compact ? formatCashShort(value) : formatCash(value);\n};\n\nexport const Cash = ({ value, fallback, disableTooltip, compact = true, tooltip, placement }: CashProps) => {\n  const formatted = format(value, compact, fallback);\n\n  return (\n    <Tooltip\n      placement={placement}\n      disableHoverListener={disableTooltip || !compact || !value}\n      title={[tooltip, formatCash(value!)].join(\" \")}\n    >\n      <span>{formatted}</span>\n    </Tooltip>\n  );\n};\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\nimport { Button } from \"@mui/material\";\nimport { ColDef } from \"ag-grid-community\";\nimport { CustomCellRendererProps } from \"ag-grid-react\";\nimport { DateTime } from \"luxon\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { AccountData } from \"shared/models/store/current\";\nimport { updateAccountDate, updateAccountValue } from \"shared/store\";\nimport { removeAccountEntry } from \"shared/store/remove-account-entry\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const createAccountColumnConfig = (accountName: string): ColDef<AccountData>[] => [\n  {\n    headerName: \"Date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\n    cellEditor: \"agDateCellEditor\",\n    editable: true,\n    valueSetter: (x) => {\n      const date = DateTime.fromJSDate(x.newValue);\n      if (date.isValid) {\n        updateAccountDate(accountName, x.data, date);\n      }\n      return date.isValid;\n    },\n  },\n  {\n    headerName: \"Value\",\n    valueGetter: (x) => x.data?.value,\n    valueSetter: (x) => {\n      updateAccountValue(accountName, x.data, +x.newValue);\n      return true;\n    },\n    cellRenderer: (x: CustomCellRendererProps<AccountData>) => <Cash value={x.value} placement=\"left\" />,\n    editable: true,\n    cellEditor: \"agNumberCellEditor\",\n    type: \"numericColumn\",\n  },\n  {\n    cellStyle: () => ({ display: \"inline-flex\", padding: \"0px\" }),\n    sortable: false,\n    headerName: \"\",\n    width: 80,\n    colId: \"actions\",\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\n      return (\n        <Button\n          onClick={() => {\n            props.data && removeAccountEntry(accountName, props.data);\n          }}\n          color=\"error\"\n          fullWidth\n        >\n          <DeleteForeverIcon />\n        </Button>\n      );\n    },\n  },\n];\n","import { DateTime } from \"luxon\";\nimport { Account, AccountData } from \"shared/models/store/current\";\n\nconst hasJanFistEntry = (x: AccountData, year: number) => {\n  const date = DateTime.fromISO(x.date);\n  const janFirst = DateTime.fromObject({\n    day: 1,\n    month: 1,\n    year: +year,\n  });\n\n  return date.diff(janFirst, [\"days\", \"hours\"]).days == 0;\n};\n\nexport const useMissingYears = (account: Account) => {\n  const accountItemsByYear = Object.groupBy(account.data, (x) => DateTime.fromISO(x.date).year);\n  if (account.data.length === 0) {\n    return [];\n  }\n\n  const years = Object.entries(accountItemsByYear)\n    .filter(([year, entries]) => !!entries?.find((entry) => hasJanFistEntry(entry, +year)))\n    .map(([year]) => +year)\n    .sort();\n\n  const lookup = new Set(years);\n  const missing = [];\n\n  for (let i = years[0]; i <= years[years.length - 1]; i++) {\n    !lookup.has(i) && missing.push(i);\n  }\n\n  return missing;\n};\n","import { Button, Dialog, DialogActions, DialogTitle } from \"@mui/material\";\nimport { ReactElement, useState } from \"react\";\n\ninterface ConfirmDialogProps {\n  onConfirm?: () => void;\n  title: string;\n  children: ReactElement;\n}\nexport const ConfirmDialog = (props: ConfirmDialogProps) => {\n  const { onConfirm, title, children } = props;\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <>\n      <div onClick={() => setIsOpen(true)}>{children}</div>\n      <Dialog open={isOpen} onClose={() => setIsOpen(false)}>\n        <DialogTitle sx={{ minWidth: 300, display: \"flex\", justifyContent: \"center\" }}>{title}</DialogTitle>\n        <DialogActions>\n          <Button sx={{ marginRight: \"auto\" }} onClick={() => setIsOpen(false)}>\n            Cancel\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"error\"\n            onClick={() => {\n              onConfirm?.();\n              setIsOpen(false);\n            }}\n          >\n            Confirm\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n","import Close from \"@mui/icons-material/Close\";\nimport SettingsIcon from \"@mui/icons-material/Settings\";\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Stack, TextField, Typography } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { ConfirmDialog } from \"shared/components/confirm-dialog\";\nimport { hideAccount, removeAccount, updateAccountName } from \"shared/store\";\n\ninterface AccountSettingsProps {\n  accountName: string;\n}\n\nexport const AccountSettings = (props: AccountSettingsProps) => {\n  const { accountName } = props;\n  const [nextAccountName, setNextAccountName] = useState<string>(accountName);\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    <>\n      <IconButton onClick={() => setIsOpen(true)}>\n        <SettingsIcon />\n      </IconButton>\n      <Dialog open={isOpen} onClose={() => setIsOpen(false)}>\n        <DialogTitle>\n          <Stack direction={\"row\"} width=\"100%\" alignItems={\"center\"} justify-content={\"space-between\"}>\n            <Typography variant=\"h6\">{accountName} Settings</Typography>\n            <IconButton onClick={() => setIsOpen(false)}>\n              <Close />\n            </IconButton>\n          </Stack>\n        </DialogTitle>\n        <DialogContent>\n          <Stack spacing={1} marginTop={1}>\n            <TextField\n              label=\"Account Name\"\n              value={nextAccountName}\n              onChange={(event) => setNextAccountName(event.target.value)}\n              placeholder=\"\"\n            />\n          </Stack>\n        </DialogContent>\n        <DialogActions>\n          <ConfirmDialog\n            onConfirm={() => {\n              removeAccount(accountName);\n              setIsOpen(false);\n            }}\n            title={`Confirm Deleting ${accountName} Account`}\n          >\n            <Button color=\"error\">Delete Account</Button>\n          </ConfirmDialog>\n          <ConfirmDialog\n            onConfirm={() => {\n              hideAccount(accountName);\n              setIsOpen(false);\n            }}\n            title={`Confirm Hiding ${accountName} Account`}\n          >\n            <Button sx={{ marginRight: 10 }} color=\"error\">\n              Hide Account\n            </Button>\n          </ConfirmDialog>\n          <Button\n            disabled={!nextAccountName}\n            onClick={() => {\n              setIsOpen(false);\n            }}\n          >\n            Cancel\n          </Button>\n          <Button\n            disabled={!nextAccountName}\n            onClick={() => {\n              accountName != nextAccountName && updateAccountName(accountName, nextAccountName);\n              setIsOpen(false);\n            }}\n          >\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n","import { Alert, Box, Button, InputAdornment, Paper, Stack, TextField, Typography } from \"@mui/material\";\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useState } from \"react\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { Account } from \"shared/models/store/current\";\nimport { addAccountEntry, store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { createAccountColumnConfig } from \"./column-config\";\nimport { useMissingYears } from \"./hooks/useMissingYears\";\nimport { AccountSettings } from \"./settings\";\n\nexport const AccountTab = (props: { accountName: string }) => {\n  const { accountName } = props;\n  const account = useStore(store, (state) => state.wealth[accountName]) as Account;\n  const [date, setDate] = useState(getLocalDateTime());\n  const [amount, setAmount] = useState<number | null>(null);\n  const missingYears = useMissingYears(account);\n  const hasSameDate = !!account?.data?.find((x) => date.hasSame(DateTime.fromISO(x.date), \"day\"));\n  const accountColumnConfig = createAccountColumnConfig(accountName);\n\n  const onAddEntry = () => {\n    if (amount != null) {\n      addAccountEntry(accountName, date, amount);\n      setAmount(null);\n    }\n  };\n\n  return (\n    <Stack height=\"100%\" spacing={2}>\n      <Stack direction={\"row\"}>\n        <Typography variant=\"h5\">{accountName}</Typography>\n        <Box sx={{ marginLeft: \"auto\" }}>\n          <AccountSettings key={accountName} accountName={accountName} />\n        </Box>\n      </Stack>\n      {missingYears.length > 0 && (\n        <Paper elevation={3}>\n          <Alert severity=\"warning\">Ensure an entry for Jan 1st for {missingYears.join(\", \")}</Alert>\n        </Paper>\n      )}\n\n      <DatePicker\n        format={shortDate}\n        sx={{ color: \"white\" }}\n        label=\"Date\"\n        defaultValue={date}\n        onChange={(value) => value && setDate(value)}\n        disableFuture\n      />\n      <TextField\n        label=\"amount\"\n        value={amount ?? \"\"}\n        type=\"number\"\n        onChange={(event) => (event.target.value === \"\" ? setAmount(null) : setAmount(+event.target.value))}\n        slotProps={{\n          input: {\n            startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n          },\n        }}\n        placeholder=\"0\"\n      />\n      <Button disabled={amount === null || !date || hasSameDate} onClick={onAddEntry}>\n        Add Entry\n      </Button>\n\n      <AgGrid\n        rowData={account.data}\n        columnDefs={accountColumnConfig}\n        id={account + \"-history\"}\n        autoSizeStrategy={{ type: \"fitGridWidth\" }}\n        onRowDataUpdated={(x) => x.api.sizeColumnsToFit()}\n        stopEditingWhenCellsLoseFocus\n      />\n    </Stack>\n  );\n};\n","import { DateTime } from \"luxon\";\nimport { AccountData } from \"shared/models/store/current\";\n\nexport const findNearestOnOrBefore = (date: DateTime, data: AccountData[]) => {\n  return data.find((x, idx, array) => {\n    if (idx == 0 && DateTime.fromISO(x.date).startOf(\"day\") >= date) {\n      return true;\n    }\n\n    if (\n      idx < array.length - 1 &&\n      DateTime.fromISO(x.date).startOf(\"day\") <= date &&\n      DateTime.fromISO(data[idx + 1].date).startOf(\"day\") > date\n    ) {\n      return true;\n    }\n\n    if (idx === array.length - 1) {\n      return true;\n    }\n  });\n};\n\nexport const findNearestIdxOnOrBefore = <T>(date: DateTime, data: T[], selector: (data: T) => DateTime) => {\n  return data.findIndex((x, idx, array) => {\n    if (idx == 0 && selector(x) >= date) {\n      return true;\n    }\n\n    if (idx < array.length - 1 && selector(x) <= date && selector(data[idx + 1]) > date) {\n      return true;\n    }\n\n    if (idx === array.length - 1) {\n      return true;\n    }\n  });\n};\n","import { DateTime } from \"luxon\";\nimport { Loan } from \"shared/models/store/current\";\n\nexport const calcLoanBalance = (date: DateTime, loan: Loan) => {\n  const { firstPaymentDate, paymentsPerYear, principal: principal, ratePct: rate, payment: monthlyPayment } = loan;\n  const annualizedRate = rate / paymentsPerYear;\n  const periods = date.diff(DateTime.fromISO(firstPaymentDate), \"months\").months;\n  const totalRate = (1 + annualizedRate) ** periods;\n  const balance = principal * totalRate - (monthlyPayment / annualizedRate) * (totalRate - 1);\n\n  return balance;\n};\n\nexport const calcEquity = (ownershipPct: number, houseValue: number | undefined, loanBalance: number, principal: number) => {\n  return houseValue ? houseValue * ownershipPct - loanBalance : principal - loanBalance;\n};\n","import { DateTime } from \"luxon\";\nimport { Account, Mortgage } from \"shared/models/store/current\";\n\nexport const useGraphDates = (accounts: (Account | Mortgage)[]) => {\n  return [\n    ...new Set(\n      accounts.flatMap((x) => {\n        return x.data.map((x) => DateTime.fromISO(x.date).startOf(\"day\").toISO());\n      })\n    ),\n  ]\n    .map((x) => DateTime.fromISO(x!))\n    .sort((a, b) => a.toMillis() - b.toMillis()) as DateTime<true>[];\n};\n","import { Button, InputAdornment, TextField } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useState } from \"react\";\nimport { addAccountEntry, store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\n\nexport const AddEntry = (props: { accountName: string }) => {\n  const { accountName } = props;\n  const [date, setDate] = useState<DateTime>(getLocalDateTime());\n  const [amount, setAmount] = useState<number | null>(null);\n  const account = useStore(store, (state) => state.wealth[accountName]);\n  const hasSameDate = !!account?.data?.find((x) => date?.hasSame(DateTime.fromISO(x.date), \"day\"));\n\n  const onAddEntry = () => {\n    if (date != undefined && amount != null) {\n      addAccountEntry(accountName, date, amount);\n      setAmount(null);\n    }\n  };\n\n  return (\n    <Stack spacing={2}>\n      <DatePicker\n        value={date}\n        onChange={(date: DateTime | null) => {\n          date && setDate(date);\n        }}\n        disableFuture\n      />\n      <TextField\n        label=\"amount\"\n        value={amount ?? \"\"}\n        type=\"number\"\n        onChange={(event) => (event.target.value === \"\" ? setAmount(null) : setAmount(+event.target.value))}\n        slotProps={{\n          input: {\n            startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n          },\n        }}\n        placeholder=\"0\"\n      />\n      <Button disabled={amount === null || !date || hasSameDate} onClick={onAddEntry}>\n        Add Home Value\n      </Button>\n    </Stack>\n  );\n};\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\nimport { Button } from \"@mui/material\";\nimport { ColDef } from \"ag-grid-community\";\nimport { CustomCellRendererProps } from \"ag-grid-react\";\nimport { DateTime } from \"luxon\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { AccountData } from \"shared/models/store/current\";\nimport { removeAccountEntry, updateAccountDate, updateAccountValue } from \"shared/store\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const createAccountColumnConfig = (accountName: string): ColDef<AccountData>[] => [\n  {\n    cellEditor: \"agDateCellEditor\",\n    editable: true,\n    headerName: \"Date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\n    valueSetter: (x) => {\n      const date = DateTime.fromJSDate(x.newValue);\n      if (date.isValid) {\n        updateAccountDate(accountName, x.data, date);\n      }\n      return date.isValid;\n    },\n  },\n  {\n    editable: true,\n    cellEditor: \"agNumberCellEditor\",\n    headerName: \"Home Value\",\n    cellRenderer: (x: CustomCellRendererProps<AccountData>) => <Cash value={x.value} placement=\"left\" />,\n    valueGetter: (x) => x.data?.value,\n    type: \"numericColumn\",\n    valueSetter: (x) => {\n      updateAccountValue(accountName, x.data, +x.newValue);\n      return true;\n    },\n  },\n  {\n    cellStyle: () => ({ display: \"inline-flex\", padding: \"0px\" }),\n    headerName: \"\",\n    width: 80,\n    sortable: false,\n    colId: \"actions\",\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\n      return (\n        <Button\n          onClick={() => {\n            props.data && removeAccountEntry(accountName, props.data);\n          }}\n          color=\"error\"\n          fullWidth\n        >\n          <DeleteForeverIcon />\n        </Button>\n      );\n    },\n  },\n];\n\ntype House = {\n  date: DateTime;\n  balance: number;\n  equity: number;\n};\n\nexport const mortgageColumnConfig: ColDef<House>[] = [\n  {\n    headerName: \"Date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data?.date,\n  },\n  {\n    headerName: \"Loan Balance\",\n    valueGetter: (x) => x.data?.balance.toFixed(2),\n    cellRenderer: (x: CustomCellRendererProps<House>) => <Cash value={x.value} placement=\"left\" />,\n    type: \"numericColumn\",\n  },\n  {\n    headerName: \"Equity\",\n    valueGetter: (x) => x.data?.equity.toFixed(2),\n    cellRenderer: (x: CustomCellRendererProps<House>) => <Cash value={x.value} placement=\"left\" />,\n    type: \"numericColumn\",\n  },\n];\n","import Close from \"@mui/icons-material/Close\";\nimport SettingsIcon from \"@mui/icons-material/Settings\";\nimport { Box, Button, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Stack, TextField, Typography } from \"@mui/material\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useRef, useState } from \"react\";\nimport { ConfirmDialog } from \"shared/components/confirm-dialog\";\nimport { Loan } from \"shared/models/store/version-1\";\nimport { hideAccount, removeAccount, setLoan, store, updateAccountName } from \"shared/store\";\nimport { ZodIssue, z } from \"zod\";\n\n//todo: use tantstack form\n\nconst convertPct = (value: number) => {\n  return value > 1 ? value / 100 : value;\n};\n\nconst validator: z.ZodType<Loan> = z.object({\n  principal: z.number().min(0),\n  ratePct: z.number().min(0),\n  paymentsPerYear: z.number().min(0),\n  payment: z.number().min(0),\n  firstPaymentDate: z.string().datetime({ offset: true }),\n  ownershipPct: z.number().min(0),\n});\n\ninterface AccountSettingsProps {\n  accountName: string;\n}\n\nexport const AccountSettings = (props: AccountSettingsProps) => {\n  const { accountName } = props;\n  const [nextAccountName, setNextAccountName] = useState<string>(accountName);\n  const loan = useStore(store, (x) => {\n    const account = x.wealth[accountName];\n    if (\"loan\" in account) {\n      return account.loan;\n    }\n  });\n\n  const ref = useRef<Partial<Loan>>(loan ?? {});\n  const [error, setError] = useState<Partial<Record<keyof Loan, ZodIssue>>>({});\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleClose = () => {\n    setError({});\n    ref.current = loan ?? {};\n    setIsOpen(false);\n  };\n\n  return (\n    <>\n      <IconButton onClick={() => setIsOpen(true)}>\n        <SettingsIcon />\n      </IconButton>\n      <Dialog open={isOpen} onClose={handleClose}>\n        <DialogTitle sx={{ width: \"100%\" }}>\n          <Box display={\"flex\"} width=\"100%\" alignItems={\"center\"} sx={{ justifyContent: \"space-between\" }}>\n            <Typography variant=\"h6\">{accountName} Settings</Typography>\n            <IconButton sx={{ marginLeft: \"auto\" }} onClick={handleClose}>\n              <Close />\n            </IconButton>\n          </Box>\n        </DialogTitle>\n        <DialogContent>\n          <Stack spacing={2} marginTop={1}>\n            <TextField\n              label=\"Account Name\"\n              value={nextAccountName}\n              onChange={(event) => setNextAccountName(event.target.value)}\n              placeholder=\"\"\n            />\n            <DatePicker\n              defaultValue={ref.current?.firstPaymentDate ? DateTime.fromISO(ref.current.firstPaymentDate) : null}\n              label=\"First Payment\"\n              slotProps={{\n                textField: {\n                  error: !!error.firstPaymentDate,\n                },\n              }}\n              onChange={(value: DateTime | null) => {\n                if (value) {\n                  ref.current.firstPaymentDate = value.startOf(\"day\").toISO()!;\n                }\n              }}\n            />\n            <TextField\n              error={!!error.principal}\n              defaultValue={loan?.principal}\n              onChange={(event) => {\n                ref.current.principal = +event.target.value;\n              }}\n              variant=\"outlined\"\n              label=\"Principal\"\n              type=\"number\"\n            />\n            <TextField\n              error={!!error.ratePct}\n              defaultValue={(loan?.ratePct ?? 0) * 100}\n              onChange={(event) => {\n                ref.current.ratePct = convertPct(+event.target.value);\n              }}\n              variant=\"outlined\"\n              label=\"Rate (%)\"\n              type=\"number\"\n            />\n            <TextField\n              error={!!error.paymentsPerYear}\n              defaultValue={loan?.paymentsPerYear}\n              onChange={(event) => {\n                ref.current.paymentsPerYear = +event.target.value;\n              }}\n              variant=\"outlined\"\n              label=\"Payments Per Year\"\n              type=\"number\"\n            />\n            <TextField\n              defaultValue={loan?.payment}\n              error={!!error.payment}\n              onChange={(event) => {\n                ref.current.payment = +event.target.value;\n              }}\n              variant=\"outlined\"\n              label=\"Payment\"\n              type=\"number\"\n            />\n            <TextField\n              defaultValue={loan?.ownershipPct}\n              error={!!error.ownershipPct}\n              onChange={(event) => {\n                ref.current.ownershipPct = convertPct(+event.target.value);\n              }}\n              variant=\"outlined\"\n              label=\"Ownership (%)\"\n              type=\"number\"\n            />\n          </Stack>\n        </DialogContent>\n        <DialogActions>\n          <ConfirmDialog\n            onConfirm={() => {\n              removeAccount(accountName);\n              setIsOpen(false);\n            }}\n            title={`Confirm Deleting ${accountName} Mortgage`}\n          >\n            <Button color=\"error\">Delete Account</Button>\n          </ConfirmDialog>\n          <ConfirmDialog\n            onConfirm={() => {\n              hideAccount(accountName);\n              setIsOpen(false);\n            }}\n            title={`Confirm Hiding ${accountName} Account`}\n          >\n            <Button sx={{ marginRight: 10 }} color=\"error\">\n              Hide Account\n            </Button>\n          </ConfirmDialog>\n          <Button disabled={!nextAccountName} onClick={handleClose}>\n            Cancel\n          </Button>\n          <Button\n            disabled={!nextAccountName}\n            onClick={() => {\n              const parsed = validator.safeParse(ref.current);\n              if (parsed.success) {\n                accountName != nextAccountName && updateAccountName(accountName, nextAccountName);\n                setLoan(accountName, parsed.data);\n                handleClose();\n              } else {\n                const issues = Object.groupBy(parsed.error.issues, (x) => x.path.join(\"\"));\n                setError(issues);\n              }\n            }}\n          >\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n","import { Typography } from \"@mui/material\";\nimport { Box, Stack } from \"@mui/system\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { Mortgage } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\nimport { findNearestOnOrBefore } from \"shared/utility/find-nearest-on-or-before\";\nimport { calcEquity, calcLoanBalance } from \"shared/utility/mortgage-calc\";\nimport { useGraphDates } from \"shared/utility/use-graph-dates\";\nimport { AddEntry } from \"./add-entry\";\nimport { createAccountColumnConfig, mortgageColumnConfig } from \"./column-config\";\nimport { AccountSettings } from \"./settings\";\n\nfunction createLoanValueGetter(account: Mortgage) {\n  return (date: DateTime) => {\n    const loanBalance = calcLoanBalance(date, account.loan!);\n    return {\n      date,\n      balance: loanBalance,\n      equity: calcEquity(\n        account.loan!.ownershipPct,\n        findNearestOnOrBefore(date, account.data)?.value,\n        loanBalance,\n        account.loan!.principal\n      ),\n    };\n  };\n}\n\nexport const MortgageTab = (props: { accountName: string }) => {\n  const { accountName } = props;\n  const account = useStore(store, (state) => state.wealth[accountName]) as Mortgage;\n  const allAccounts = useStore(store, (x) => x.wealth);\n  const accountColumnConfig = createAccountColumnConfig(accountName);\n  const accounts = Object.values(allAccounts);\n  const dates = useGraphDates(accounts);\n  const mortgageData = account.loan ? dates.map(createLoanValueGetter(account)) : [];\n\n  return (\n    <Stack height=\"100%\" spacing={2}>\n      <Stack direction={\"row\"}>\n        <Typography variant=\"h5\">{accountName}</Typography>\n        <Box sx={{ marginLeft: \"auto\" }}>\n          <AccountSettings key={accountName} accountName={accountName} />\n        </Box>\n      </Stack>\n      <AddEntry accountName={accountName} />\n      <AgGrid\n        rowData={account?.data ?? []}\n        columnDefs={accountColumnConfig}\n        id={account + \"-history\"}\n        autoSizeStrategy={{ type: \"fitGridWidth\" }}\n      />\n\n      <AgGrid\n        rowData={mortgageData}\n        columnDefs={mortgageColumnConfig}\n        id={account + \"-history\"}\n        autoSizeStrategy={{ type: \"fitGridWidth\" }}\n      />\n    </Stack>\n  );\n};\n","import { Box, Tab, Tabs } from \"@mui/material\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { useEffect, useState } from \"react\";\nimport { store } from \"shared/store\";\nimport { NewAccount } from \"./new-account\";\nimport { AccountTab } from \"./tab-types/account/account\";\nimport { MortgageTab } from \"./tab-types/mortgage\";\n\nexport const AccountTabs = () => {\n  const accounts = useStore(store, (x) => x.wealth);\n  const firstAccount = Object.keys(accounts)?.[0] ?? 0;\n  const [account, setAccount] = useState<string | 0>(firstAccount);\n\n  useEffect(() => {\n    if (!accounts[account]) {\n      setAccount(0);\n    }\n  }, [account, accounts]);\n\n  return (\n    <Box display=\"flex\" width=\"100%\" height=\"100%\" gap={2}>\n      <Box display={\"flex\"} flexDirection={\"column\"} flex={\"0 1 auto\"}>\n        <Tabs\n          orientation=\"vertical\"\n          value={account}\n          onChange={(_, value) => {\n            setAccount(value as string);\n          }}\n        >\n          {Object.entries(accounts)\n            .filter(([, data]) => !data.hidden)\n            .map(([account]) => {\n              return <Tab key={account} value={account} label={account} />;\n            })}\n          <Tab component={NewAccount} />\n        </Tabs>\n      </Box>\n      <Box flex={\"1 1 auto\"} overflow={\"auto\"}>\n        {typeof account === \"string\" && (\n          <>\n            {accounts[account]?.type === \"account\" && <AccountTab accountName={account} />}\n            {accounts[account]?.type === \"mortgage\" && <MortgageTab accountName={account} />}\n          </>\n        )}\n      </Box>\n    </Box>\n  );\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\n\nexport const useEarliestAccountEntry = () => {\n  const accounts = useStore(store, (x) => x.wealth);\n  return DateTime.fromMillis(\n    Object.values(accounts)\n      .map((x) => {\n        if (x.type === \"account\") {\n          return x.data[0]?.date ? DateTime.fromISO(x.data[0].date) : getLocalDateTime();\n        }\n        return getLocalDateTime();\n      })\n      .reduce((acc, curr) => Math.min(acc, curr?.toMillis() ?? Infinity), getLocalDateTime().toMillis())\n  );\n};\n","import { DateTime } from \"luxon\";\nimport { Account, Mortgage } from \"shared/models/store/current\";\nimport { findNearestOnOrBefore } from \"./find-nearest-on-or-before\";\nimport { calcEquity, calcLoanBalance } from \"./mortgage-calc\";\n\nconst getMortgageValue = (date: DateTime, mortgage: Mortgage) => {\n  if (!mortgage.loan) {\n    return 0;\n  }\n  const entry = findNearestOnOrBefore(date, mortgage.data);\n  if (entry?.date && mortgage.data[0] === entry && DateTime.fromISO(entry.date).startOf(\"day\") > date) {\n    return 0;\n  }\n  const { ownershipPct, principal } = mortgage.loan;\n  const balance = calcLoanBalance(date, mortgage.loan);\n  return calcEquity(ownershipPct, entry?.value, balance, principal);\n};\n\nconst getAccountValue = (date: DateTime, account: Account) => {\n  const entry = findNearestOnOrBefore(date, account.data);\n  if (entry?.date && account.data[0] === entry && DateTime.fromISO(entry.date).startOf(\"day\") > date) {\n    return 0;\n  }\n  return entry?.value;\n};\n\nexport const getGraphValue = (date: DateTime, account: Account | Mortgage) => {\n  switch (account.type) {\n    case \"account\":\n      return getAccountValue(date, account);\n    case \"mortgage\":\n      return getMortgageValue(date, account);\n  }\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { store } from \"shared/store\";\nimport { getGraphValue } from \"shared/utility/get-graph-value\";\nimport { useGraphDates } from \"shared/utility/use-graph-dates\";\n\nexport type GraphData = {\n  total: number;\n  date: Date;\n} & Record<string, number | null>;\n\nexport const useGraphData = () => {\n  const wealth = useStore(store, (x) => x.wealth);\n  const dates = useGraphDates(Object.values(wealth));\n  const accounts = Object.entries(wealth);\n\n  const graphData = dates.map((date) => {\n    return accounts.reduce(\n      (acc, [accountName, account]) => {\n        const value = getGraphValue(date, account);\n\n        if (value) {\n          acc[accountName] = value;\n          acc.total = acc.total + value;\n        } else {\n          acc[accountName] = null;\n        }\n\n        acc.date = date.toJSDate();\n        return acc;\n      },\n      { total: 0 } as GraphData\n    );\n  });\n\n  graphData.forEach((graphEntry, index, arr) => {\n    if (index < arr.length - 1) {\n      Object.keys(graphEntry).forEach((key) => {\n        if (graphEntry[key] === null && arr[index + 1][key] !== null) {\n          graphEntry[key] = 0;\n        }\n      });\n    }\n  });\n\n  const firstNonZero = graphData.findIndex((x) => (x[\"total\"] as number) > 0);\n  return graphData.slice(firstNonZero);\n};\n","import { Box } from \"@mui/system\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { AgAreaSeriesOptions, AgCartesianChartOptions, AgLineSeriesOptions, time } from \"ag-charts-community\";\nimport { AgCharts } from \"ag-charts-react\";\nimport { DateTime } from \"luxon\";\nimport { useState } from \"react\";\nimport { useEarliestAccountEntry } from \"shared/hooks/use-earliest-account-entry\";\nimport { store } from \"shared/store\";\nimport { useLocalDateTime } from \"shared/utility/current-date\";\nimport { formatCashShort } from \"shared/utility/format-cash\";\nimport { useGraphData } from \"./use-graph-data\";\n\nexport const WealthChart = () => {\n  const wealth = useStore(store, (x) => x.wealth);\n  const data = useGraphData();\n  const initialFromDate = useEarliestAccountEntry().startOf(\"year\");\n  const localTime = useLocalDateTime();\n  const intialToDate = localTime.endOf(\"year\");\n  const [fromDate, setFromDate] = useState<DateTime>(localTime.plus({ year: -1 }));\n  const [toDate, setToDate] = useState<DateTime>(intialToDate);\n\n  const filteredData = data.filter((x) => {\n    const year = x.date.getFullYear();\n    return year >= fromDate.year && year <= toDate.year;\n  });\n\n  const series = [\n    ...Object.entries(wealth).map(([x, data]) => {\n      return {\n        stacked: true,\n        type: \"area\",\n        xKey: \"date\",\n        yKey: x,\n        yName: `${x}${data.hidden ? \" (hidden)\" : \"\"}`,\n        tooltip: {\n          renderer: ({ datum, yKey, xKey }) => ({\n            content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCashShort(datum[yKey])}`,\n          }),\n        },\n      } as AgAreaSeriesOptions;\n    }),\n    {\n      type: \"line\",\n      xKey: \"date\",\n      yKey: \"total\",\n      yName: \"Total\",\n      tooltip: {\n        renderer: ({ datum, yKey, xKey }) => ({\n          content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCashShort(datum[yKey])}`,\n        }),\n      },\n    } as AgLineSeriesOptions,\n  ];\n\n  const options: AgCartesianChartOptions = {\n    theme: \"ag-default-dark\",\n    title: {\n      text: `Total Wealth ${formatCashShort((data[data.length - 1]?.total ?? 0) as number)}`,\n    },\n    data: filteredData,\n    axes: [\n      {\n        type: \"time\",\n        position: \"bottom\",\n        label: {\n          format: \"%Y\",\n        },\n        nice: false,\n        interval: {\n          step: time.year.every(1, { snapTo: \"start\" }),\n        },\n      },\n      {\n        type: \"number\",\n        position: \"left\",\n      },\n    ],\n    series,\n  };\n\n  return (\n    <Box position={\"relative\"} height=\"100%\" width=\"100%\">\n      <AgCharts options={options} css={{ height: \"100%\", width: \"100%\" }} />\n      <Box position={\"absolute\"} top={16} right={16} zIndex={100} width={250} display={\"flex\"} gap={2}>\n        <DatePicker\n          sx={{ backgroundColor: \"#121212\" }}\n          views={[\"year\"]}\n          label=\"From\"\n          minDate={initialFromDate}\n          maxDate={intialToDate}\n          value={fromDate}\n          onChange={(value) => {\n            value && setFromDate(value);\n          }}\n        />\n        <DatePicker\n          label=\"To\"\n          sx={{ backgroundColor: \"#121212\" }}\n          views={[\"year\"]}\n          value={toDate}\n          minDate={initialFromDate}\n          maxDate={intialToDate}\n          onChange={(value) => {\n            value && setToDate(value);\n          }}\n        />\n      </Box>\n    </Box>\n  );\n};\n","import { Box } from \"@mui/material\";\nimport { AccountTabs } from \"./account-tabs\";\nimport { WealthChart } from \"./wealth-chart\";\n\nexport const NetWealth = () => {\n  return (\n    <Box display={\"flex\"} height=\"100%\" width={\"100%\"} overflow={\"hidden\"} gap={2}>\n      <Box flex=\"0 1 auto\">\n        <Box\n          width={650}\n          height={\"100%\"}\n          sx={{\n            padding: 2,\n            border: \"1px solid rgba(255,255,255,0.1)\",\n            borderRadius: 2,\n            minWidth: 480,\n            backgroundColor: \"#121212\",\n            boxShadow: \"2px 3px 9px 1px #12121252\",\n          }}\n        >\n          <AccountTabs />\n        </Box>\n      </Box>\n      <Box flex=\"1 1 auto\" overflow={\"hidden\"} width=\"100%\" height={\"100%\"}>\n        <WealthChart />\n      </Box>\n    </Box>\n  );\n};\n","import { Box, Divider, Stack, Typography } from \"@mui/material\";\nimport { ReactNode } from \"react\";\n\nexport const Card = (props: { title: ReactNode; children?: ReactNode }) => {\n  const { title, children } = props;\n\n  return (\n    <Box\n      sx={{\n        border: \"1px solid rgba(255,255,255,0.1)\",\n        borderRadius: 2,\n        minWidth: 0,\n        backgroundColor: \"#121212\",\n        boxShadow: \"2px 3px 9px 1px #12121252\",\n\n        minHeight: \"max-content\",\n      }}\n    >\n      <Typography sx={{ paddingBottom: 1, paddingLeft: 2, paddingTop: 1, display: \"flex\" }} variant=\"h5\">\n        {title}\n      </Typography>\n\n      {children && (\n        <>\n          <Divider />\n          <Stack padding={1} direction={\"row\"} spacing={0.5} width={\"100%\"} minHeight={80} justifyContent={\"space-between\"}>\n            {children}\n          </Stack>\n        </>\n      )}\n    </Box>\n  );\n};\n","import { Box } from \"@mui/system\";\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\nimport { Cash } from \"./cash\";\n\ninterface CashProps {\n  min?: number;\n  max?: number;\n  fallback?: number;\n  disableTooltip?: boolean;\n  compact?: boolean;\n  tooltip?: string;\n\n  placement?:\n    | \"top\"\n    | \"right\"\n    | \"bottom\"\n    | \"left\"\n    | \"bottom-end\"\n    | \"bottom-start\"\n    | \"left-end\"\n    | \"left-start\"\n    | \"right-end\"\n    | \"right-start\"\n    | \"top-end\"\n    | \"top-start\"\n    | undefined;\n}\nexport const CashRange = ({ min, max, fallback, disableTooltip, compact = true }: CashProps) => {\n  const minFormatted = compact ? formatCashShort(min ?? 0) : formatCash(min ?? 0);\n  const maxFormatted = compact ? formatCashShort(max ?? 0) : formatCash(max ?? 0);\n  const showRange = minFormatted !== maxFormatted;\n\n  return (\n    <Box>\n      {!showRange && (\n        <Cash\n          fallback={fallback}\n          value={max}\n          tooltip={min != max ? `${formatCash(min ?? 0)} - ` : undefined}\n          disableTooltip={disableTooltip}\n          compact={compact}\n        />\n      )}\n      {showRange && (\n        <>\n          <Cash value={min} fallback={fallback} disableTooltip={disableTooltip} compact={compact} />\n          <span> - </span>\n          <Cash value={max} fallback={fallback} disableTooltip={disableTooltip} compact={compact} />\n        </>\n      )}\n    </Box>\n  );\n};\n","export const formatPercent = new Intl.NumberFormat(\"en-us\", {\n  style: \"percent\",\n  maximumFractionDigits: 1,\n}).format;\n\nexport const formatPercentKatex = (value: number) =>\n  new Intl.NumberFormat(\"en-us\", {\n    style: \"percent\",\n    maximumFractionDigits: 1,\n  })\n    .format(value)\n    .replace(\"%\", \"\\\\%\");\n","export const getProbablityColor = (probability?: number) => {\n  if (!probability) {\n    return \"inherit\";\n  }\n  if (probability >= 0.5) {\n    return \"green\";\n  }\n  if (probability >= 0.25) {\n    return \"orange\";\n  }\n  return \"rgb(244, 67, 54)\";\n};\n","import { Box } from \"@mui/system\";\nimport { ReactNode } from \"react\";\nimport { formatPercent } from \"shared/utility/format-percent\";\nimport { getProbablityColor } from \"shared/utility/get-probablity-color\";\n\ninterface PercentProps {\n  value?: number;\n  probability?: number;\n  fallback?: ReactNode;\n}\n\nexport const Percent = ({ value, probability, fallback }: PercentProps) => {\n  return <Box color={getProbablityColor(probability)}>{value != undefined ? formatPercent(value) : fallback}</Box>;\n};\n","import { Box } from \"@mui/system\";\nimport { Percent } from \"./percent\";\n\ninterface PercentProps {\n  min?: number;\n  max?: number;\n  fallback?: number;\n}\n\nexport const PercentRange = ({ min, max, fallback }: PercentProps) => {\n  return (\n    <Box>\n      {(max ?? 0) / (min ?? 1) <= 1.005 && <Percent fallback={fallback} value={max} />}\n      {(max ?? 0) / (min ?? 1) > 1.005 && (\n        <>\n          <Percent value={min} fallback={fallback} />\n          <span> - </span>\n          <Percent value={max} fallback={fallback} />\n        </>\n      )}\n    </Box>\n  );\n};\n","import { Box } from \"@mui/material\";\nimport { ReactNode } from \"react\";\n\ninterface CellProps {\n  children?: ReactNode;\n  secondaryValue?: ReactNode;\n  tertiaryValue?: ReactNode;\n  title: ReactNode;\n  className?: string;\n}\n\nexport const Value = (props: CellProps) => {\n  const { children, secondaryValue, tertiaryValue, title, className } = props;\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        minWidth: 145,\n        height: 64,\n        padding: \"0px 8px\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"flex-start\",\n        gap: 0.5,\n        flexShrink: 0,\n      }}\n      className={className}\n    >\n      <Box display={\"flex\"} alignItems={\"center\"} gap={0.5}>\n        <Box fontSize={18} fontWeight={700} lineHeight={\"20px\"}>\n          {children ? children : \"?\"}\n        </Box>\n        {!!(secondaryValue ?? tertiaryValue) && (\n          <Box alignSelf={\"flex-end\"} fontSize={12} fontWeight={500} lineHeight={\"16px\"} textTransform={\"uppercase\"} color={\"#888\"}>\n            {secondaryValue ?? tertiaryValue}\n          </Box>\n        )}\n      </Box>\n      <Box fontSize={12} fontWeight={500} lineHeight={\"16px\"} textTransform={\"uppercase\"}>\n        {title}\n      </Box>\n    </Box>\n  );\n};\n","import { Box } from \"@mui/material\";\nimport { DateTime } from \"luxon\";\nimport { CashRange } from \"shared/components/formatters/cash-range\";\nimport { Percent } from \"shared/components/formatters/percent\";\nimport { PercentRange } from \"shared/components/formatters/percent-range\";\nimport { Value } from \"shared/components/formatters/value\";\nimport { Cluster } from \"shared/hooks/use-clusters\";\n\ninterface ClusterValueProps extends Cluster {\n  compact?: boolean;\n  className?: string;\n}\n\nexport const ClusterValue = (props: ClusterValueProps) => {\n  const { min, max, probability, title, compact, className } = props;\n  return (\n    <Value\n      className={className}\n      title={\n        <Box display={\"flex\"} gap={1}>\n          <span>{title}</span>\n          {probability < 1 && probability >= 0 && <Percent probability={probability} value={probability} />}\n        </Box>\n      }\n    >\n      {min < 1 && min > 0 && <PercentRange min={min} max={max} />}\n      {min > 1 && <CashRange compact={compact} min={min} max={max} />}\n      {min === 0 && 0}\n    </Value>\n  );\n};\n\nexport const ClusterValues = (props: { clusters?: Cluster[]; eventDate?: DateTime; compact?: boolean }) => {\n  const { clusters, eventDate, compact = true } = props;\n  return clusters?.map((x, i, arr) => {\n    const title = arr.length === 1 && (eventDate?.diffNow().toMillis() ?? -1) > 0 ? \"Expected\" : x.title;\n    return <ClusterValue {...x} title={title} compact={compact} key={i} />;\n  });\n};\n","import { Duration, DurationUnit } from \"luxon\";\n\nexport function toHuman(dur: Duration, smallestUnit: DurationUnit = \"seconds\"): string {\n  const units = [\"years\", \"months\", \"days\", \"hours\", \"minutes\", \"seconds\", \"milliseconds\"] as DurationUnit[];\n  const smallestIdx = units.indexOf(smallestUnit);\n  const entries = Object.entries(\n    dur\n      .shiftTo(...units)\n      .normalize()\n      .toObject()\n  ).filter(([, amount], idx) => amount > 0 && idx <= smallestIdx);\n  const dur2 = Duration.fromObject(entries.length === 0 ? { [smallestUnit]: 0 } : Object.fromEntries(entries));\n  return dur2.toHuman().replaceAll(\",\", \"\");\n}\n","import { Box, Tooltip } from \"@mui/material\";\nimport { DateTime } from \"luxon\";\nimport { ReactNode } from \"react\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { toHuman } from \"shared/utility/to-human\";\n\ntype Variant = \"countdown\" | \"date\";\n\ninterface DurationProps {\n  dateTime?: DateTime;\n  children?: ReactNode;\n  variant?: Variant;\n  dateFormat?: string;\n}\n\nexport const CountDown = (props: DurationProps) => {\n  const { dateTime, children, variant = \"countdown\", dateFormat = shortDate } = props;\n\n  const countDownStr = useCountdownText(variant, dateTime, dateFormat);\n  const tooltipStr = useTooltipText(variant, dateTime, dateFormat);\n  const countDownColor = useCountDownColor(dateTime);\n\n  return dateTime && dateTime > getLocalDateTime() ? (\n    <Tooltip title={tooltipStr}>\n      <Box color={countDownColor}>{countDownStr}</Box>\n    </Tooltip>\n  ) : (\n    children\n  );\n};\n\nconst useTooltipText = (variant: Variant, dateTime: DateTime | undefined, dateFormat: string) => {\n  if (!dateTime) {\n    return \"??\";\n  }\n\n  if (variant === \"countdown\") {\n    return dateTime?.toFormat(dateFormat);\n  }\n  const diff = dateTime?.diff(getLocalDateTime(), [\"years\", \"months\", \"days\", \"hours\"]);\n\n  return toHuman(diff, \"days\");\n};\n\nconst useCountdownText = (variant: Variant, dateTime: DateTime | undefined, dateFormat: string) => {\n  if (!dateTime) {\n    return \"??\";\n  }\n\n  if (variant === \"countdown\") {\n    const diff = dateTime?.diff(getLocalDateTime(), [\"years\", \"months\", \"days\", \"hours\"]);\n\n    return toHuman(diff, \"days\");\n  }\n\n  return dateTime?.toFormat(dateFormat);\n};\n\nconst useCountDownColor = (dateTime?: DateTime) => {\n  if (!dateTime) {\n    return \"white\";\n  }\n\n  const days = dateTime.diffNow(\"days\").days;\n  if (days < 30) {\n    return \"green\";\n  } else if (days <= 60) {\n    return \"orange\";\n  }\n\n  return \"rgb(244, 67, 54)\";\n};\n","import { Store } from \"@tanstack/store\";\nimport { Scenario } from \"shared/models/scenario\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\n\ninterface ScenarioStore {\n  scenarios: Partial<Record<number, Scenario[]>>;\n  loading: boolean;\n  minYear: number;\n  maxYear: number;\n}\n\nconst year = getLocalDateTime().year;\nexport const scenarioStore = new Store<ScenarioStore>({\n  loading: true,\n  maxYear: year,\n  minYear: year,\n  scenarios: {},\n});\n","export function makeMatrix(columns: number, rows: number) {\n  const matrix = [];\n  for (let i = 0; i < columns; i++) {\n    const column = [];\n    for (let j = 0; j < rows; j++) {\n      column.push(0);\n    }\n    matrix.push(column);\n  }\n  return matrix;\n}\n","export function numericSort<T>(x: T[], selector: (data: T) => number) {\n  return x.toSorted(function (a, b) {\n    return selector(a) - selector(b);\n  });\n}\n","export function uniqueCountSorted<T>(x: T[], selector: (x: T) => number) {\n  let uniqueValueCount = 0,\n    lastSeenValue;\n  for (let i = 0; i < x.length; i++) {\n    const value = selector(x[i]);\n    if (i === 0 || value !== lastSeenValue) {\n      lastSeenValue = value;\n      uniqueValueCount++;\n    }\n  }\n  return uniqueValueCount;\n}\n","import { makeMatrix } from \"./make-matrix\";\nimport { numericSort } from \"./numeric-sort\";\nimport { uniqueCountSorted } from \"./unique-count-sorted\";\n\n/**\n * Generates incrementally computed values based on the sums and sums of\n * squares for the data array\n *\n * @private\n * @param {number} j\n * @param {number} i\n * @param {Array<number>} sums\n * @param {Array<number>} sumsOfSquares\n * @return {number}\n * @example\n * ssq(0, 1, [-1, 0, 2], [1, 1, 5]);\n */\nfunction ssq(j: number, i: number, sums: number[], sumsOfSquares: number[]) {\n  let sji; // s(j, i)\n  if (j > 0) {\n    const muji = (sums[i] - sums[j - 1]) / (i - j + 1); // mu(j, i)\n    sji = sumsOfSquares[i] - sumsOfSquares[j - 1] - (i - j + 1) * muji * muji;\n  } else {\n    sji = sumsOfSquares[i] - (sums[i] * sums[i]) / (i + 1);\n  }\n  if (sji < 0) {\n    return 0;\n  }\n  return sji;\n}\n\n/**\n * Function that recursively divides and conquers computations\n * for cluster j\n *\n * @private\n * @param {number} iMin Minimum index in cluster to be computed\n * @param {number} iMax Maximum index in cluster to be computed\n * @param {number} cluster Index of the cluster currently being computed\n * @param {Array<Array<number>>} matrix\n * @param {Array<Array<number>>} backtrackMatrix\n * @param {Array<number>} sums\n * @param {Array<number>} sumsOfSquares\n */\nfunction fillMatrixColumn(\n  iMin: number,\n  iMax: number,\n  cluster: number,\n  matrix: number[][],\n  backtrackMatrix: number[][],\n  sums: number[],\n  sumsOfSquares: number[]\n) {\n  if (iMin > iMax) {\n    return;\n  }\n\n  // Start at midpoint between iMin and iMax\n  const i = Math.floor((iMin + iMax) / 2);\n\n  matrix[cluster][i] = matrix[cluster - 1][i - 1];\n  backtrackMatrix[cluster][i] = i;\n\n  let jlow = cluster; // the lower end for j\n\n  if (iMin > cluster) {\n    jlow = Math.max(jlow, backtrackMatrix[cluster][iMin - 1] || 0);\n  }\n  jlow = Math.max(jlow, backtrackMatrix[cluster - 1][i] || 0);\n\n  let jhigh = i - 1; // the upper end for j\n  if (iMax < matrix[0].length - 1) {\n    jhigh = Math.min(jhigh, backtrackMatrix[cluster][iMax + 1] || 0);\n  }\n\n  let sji;\n  let sjlowi;\n  let ssqjlow;\n  let ssqj;\n  for (let j = jhigh; j >= jlow; --j) {\n    sji = ssq(j, i, sums, sumsOfSquares);\n\n    if (sji + matrix[cluster - 1][jlow - 1] >= matrix[cluster][i]) {\n      break;\n    }\n\n    // Examine the lower bound of the cluster border\n    sjlowi = ssq(jlow, i, sums, sumsOfSquares);\n\n    ssqjlow = sjlowi + matrix[cluster - 1][jlow - 1];\n\n    if (ssqjlow < matrix[cluster][i]) {\n      // Shrink the lower bound\n      matrix[cluster][i] = ssqjlow;\n      backtrackMatrix[cluster][i] = jlow;\n    }\n    jlow++;\n\n    ssqj = sji + matrix[cluster - 1][j - 1];\n    if (ssqj < matrix[cluster][i]) {\n      matrix[cluster][i] = ssqj;\n      backtrackMatrix[cluster][i] = j;\n    }\n  }\n\n  fillMatrixColumn(iMin, i - 1, cluster, matrix, backtrackMatrix, sums, sumsOfSquares);\n  fillMatrixColumn(i + 1, iMax, cluster, matrix, backtrackMatrix, sums, sumsOfSquares);\n}\n\n/**\n * Initializes the main matrices used in Ckmeans and kicks\n * off the divide and conquer cluster computation strategy\n *\n * @private\n * @param {Array<number>} data sorted array of values\n * @param {Array<Array<number>>} matrix\n * @param {Array<Array<number>>} backtrackMatrix\n */\nfunction fillMatrices<T>(data: T[], matrix: number[][], backtrackMatrix: number[][], selector: (x: T) => number) {\n  const nValues = matrix[0].length;\n\n  // Shift values by the median to improve numeric stability\n  const shift = selector(data[Math.floor(nValues / 2)]);\n\n  // Cumulative sum and cumulative sum of squares for all values in data array\n  const sums: number[] = [];\n  const sumsOfSquares: number[] = [];\n\n  // Initialize first column in matrix & backtrackMatrix\n  for (let i = 0, shiftedValue; i < nValues; ++i) {\n    shiftedValue = selector(data[i]) - shift;\n    if (i === 0) {\n      sums.push(shiftedValue);\n      sumsOfSquares.push(shiftedValue * shiftedValue);\n    } else {\n      sums.push(sums[i - 1] + shiftedValue);\n      sumsOfSquares.push(sumsOfSquares[i - 1] + shiftedValue * shiftedValue);\n    }\n\n    // Initialize for cluster = 0\n    matrix[0][i] = ssq(0, i, sums, sumsOfSquares);\n    backtrackMatrix[0][i] = 0;\n  }\n\n  // Initialize the rest of the columns\n  let iMin;\n  for (let cluster = 1; cluster < matrix.length; ++cluster) {\n    if (cluster < matrix.length - 1) {\n      iMin = cluster;\n    } else {\n      // No need to compute matrix[K-1][0] ... matrix[K-1][N-2]\n      iMin = nValues - 1;\n    }\n\n    fillMatrixColumn(iMin, nValues - 1, cluster, matrix, backtrackMatrix, sums, sumsOfSquares);\n  }\n}\n\n/**\n * Ckmeans clustering is an improvement on heuristic-based clustering\n * approaches like Jenks. The algorithm was developed in\n * [Haizhou Wang and Mingzhou Song](http://journal.r-project.org/archive/2011-2/RJournal_2011-2_Wang+Song.pdf)\n * as a [dynamic programming](https://en.wikipedia.org/wiki/Dynamic_programming) approach\n * to the problem of clustering numeric data into groups with the least\n * within-group sum-of-squared-deviations.\n *\n * Minimizing the difference within groups - what Wang & Song refer to as\n * `withinss`, or within sum-of-squares, means that groups are optimally\n * homogenous within and the data is split into representative groups.\n * This is very useful for visualization, where you may want to represent\n * a continuous variable in discrete color or style groups. This function\n * can provide groups that emphasize differences between data.\n *\n * Being a dynamic approach, this algorithm is based on two matrices that\n * store incrementally-computed values for squared deviations and backtracking\n * indexes.\n *\n * This implementation is based on Ckmeans 3.4.6, which introduced a new divide\n * and conquer approach that improved runtime from O(kn^2) to O(kn log(n)).\n *\n * Unlike the [original implementation](https://cran.r-project.org/web/packages/Ckmeans.1d.dp/index.html),\n * this implementation does not include any code to automatically determine\n * the optimal number of clusters: this information needs to be explicitly\n * provided.\n *\n * ### References\n * _Ckmeans.1d.dp: Optimal k-means Clustering in One Dimension by Dynamic\n * Programming_ Haizhou Wang and Mingzhou Song ISSN 2073-4859\n *\n * from The R Journal Vol. 3/2, December 2011\n * @param {Array<number>} data input data, as an array of number values\n * @param {number} nClusters number of desired classes. This cannot be\n * greater than the number of values in the data array.\n * @returns {Array<Array<number>>} clustered input\n * @throws {Error} if the number of requested clusters is higher than the size of the data\n * @example\n * ckmeans([-1, 2, -1, 2, 4, 5, 6, -1, 2, -1], 3);\n * // The input, clustered into groups of similar numbers.\n * //= [[-1, -1, -1, -1], [2, 2, 2], [4, 5, 6]]);\n */\nexport function ckmeans<T>(data: T[], nClusters: number, selector: (x: T) => number) {\n  if (nClusters === 0) {\n    return [];\n  }\n  if (nClusters > data.length) {\n    throw new Error(\"cannot generate more classes than there are data values\");\n  }\n\n  const sorted = numericSort(data, selector);\n  // we'll use this as the maximum number of clusters\n  const uniqueCount = uniqueCountSorted(sorted, selector);\n\n  // if all of the input values are identical, there's one cluster\n  // with all of the input in it.\n  if (uniqueCount === 1) {\n    return [sorted];\n  }\n\n  // named 'S' originally\n  const matrix = makeMatrix(nClusters, sorted.length);\n  // named 'J' originally\n  const backtrackMatrix = makeMatrix(nClusters, sorted.length);\n\n  // This is a dynamic programming way to solve the problem of minimizing\n  // within-cluster sum of squares. It's similar to linear regression\n  // in this way, and this calculation incrementally computes the\n  // sum of squares that are later read.\n  fillMatrices(sorted, matrix, backtrackMatrix, selector);\n\n  // The real work of Ckmeans clustering happens in the matrix generation:\n  // the generated matrices encode all possible clustering combinations, and\n  // once they're generated we can solve for the best clustering groups\n  // very quickly.\n  const clusters = [];\n  let clusterRight = backtrackMatrix[0].length - 1;\n\n  // Backtrack the clusters from the dynamic programming matrix. This\n  // starts at the bottom-right corner of the matrix (if the top-left is 0, 0),\n  // and moves the cluster target with the loop.\n  for (let cluster = backtrackMatrix.length - 1; cluster >= 0; cluster--) {\n    const clusterLeft = backtrackMatrix[cluster][clusterRight];\n\n    // fill the cluster from the sorted input by taking a slice of the\n    // array. the backtrack matrix makes this easy - it stores the\n    // indexes where the cluster should start and end.\n    clusters[cluster] = sorted.slice(clusterLeft, clusterRight + 1);\n\n    if (cluster > 0) {\n      clusterRight = clusterLeft - 1;\n    }\n  }\n\n  return clusters;\n}\n","const areSetsEqual = <T>(a: Set<T>, b: Set<T>) => [...a].every((value) => b.has(value)) && [...b].every((value) => a.has(value));\n\nexport const collapseClusters = <T>(data: T[][], selector: (data: T) => number) => {\n  const sets = data.map((x) => new Set(x.map((y) => selector(y))));\n  const result: T[][] = [];\n  for (let i = 0; i < sets.length; i++) {\n    const curr = data[i].slice();\n    for (let j = i + 1; j < sets.length; j++) {\n      if (areSetsEqual(sets[i], sets[j])) {\n        curr.push(...data[j]);\n        sets.splice(j, 1);\n        data.splice(j, 1);\n      }\n    }\n    result.push(curr);\n  }\n  return result;\n};\n","import { Cluster } from \"shared/hooks/use-clusters\";\n\nexport const scaleCluster = (cluster: Cluster | undefined, factor: number) => {\n  if (!cluster) {\n    return undefined;\n  }\n  return { ...cluster, min: cluster.min * factor, max: cluster.max * factor, median: cluster.median * factor };\n};\n\nexport const scaleClusters = (clusters: Cluster[] | undefined, factor: number): Cluster[] | undefined => {\n  return clusters?.filter((x) => x).map((x) => scaleCluster(x, factor)!);\n};\n\nexport const findMostMostLikely = (cluster: Cluster[]) => {\n  if (cluster.length === 0) {\n    return;\n  }\n  const mostLikely = cluster.reduce((acc, curr) => {\n    return curr.probability > acc.probability ? curr : acc;\n  });\n  return mostLikely;\n};\n\nexport const clusterTitle = (index: number, length: number) => {\n  if (length === 1) {\n    return \"Actual\";\n  } else if (length == 2) {\n    return [\"Low\", \"High\"][index];\n  } else {\n    return [\"Low\", \"Med\", \"High\"][index];\n  }\n};\n\nexport const getClusterCount = <T>(values: T[], selector: (x: T) => number) => {\n  const uniqeValues = new Set(values.map((x) => selector(x))).size;\n\n  if (uniqeValues < 3) {\n    return uniqeValues;\n  } else if (uniqeValues === 4) {\n    return 2;\n  }\n  return 3;\n};\n\nexport const SumClusters = (clusters: Cluster[][]) => {\n  if (clusters.length == 0) {\n    return [];\n  }\n\n  const numClusters = clusters.reduce((acc, curr) => Math.max(acc, curr.length), 0);\n  const expandedClusters = clusters\n    .filter((x) => x.length > 0)\n    .map((cluster) => {\n      if (cluster.length === 1) {\n        return new Array(numClusters).fill(cluster[0]) as Cluster[];\n      }\n      if (cluster.length === 2 && numClusters === 3) {\n        const min = cluster[0];\n        const max = cluster[1];\n        return [\n          min,\n          {\n            min: (min.min + max.min) / 2,\n            max: (min.max + max.max) / 2,\n            median: (min.median + max.median) / 2,\n            probability: (min.probability + max.probability) / 2,\n            title: \"Med\",\n          },\n          max,\n        ].map((x, _i, arr) => {\n          const probability = x.probability / arr.reduce((acc, curr) => acc + curr.probability, 0);\n          return { ...x, probability };\n        }) as Cluster[];\n      }\n      return cluster;\n    });\n\n  return expandedClusters\n    .reduce((acc, curr) => {\n      return curr.map((x, i) => ({\n        min: x.min + acc[i].min,\n        max: x.max + acc[i].max,\n        median: x.median + acc[i].median,\n        probability: x.probability + acc[i].probability,\n        title: x.title,\n      }));\n    })\n    .map((x, _i, arr) => {\n      const probability = x.probability / arr.reduce((acc, curr) => acc + curr.probability, 0);\n      return { ...x, probability };\n    })\n    .map((x, i, arr) => {\n      return { ...x, title: clusterTitle(i, arr.length) };\n    });\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { Scenario } from \"shared/models/scenario\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\nimport { ckmeans } from \"shared/utility/ckmeans\";\nimport { clusterTitle, getClusterCount } from \"shared/utility/cluster-helpers\";\nimport { max, median, min, sumSimple } from \"simple-statistics\";\n\nexport interface Cluster {\n  min: number;\n  max: number;\n  median: number;\n  probability: number;\n  title: string;\n}\n\nconst clusters = <T extends Scenario>(values: T[] | undefined, selector: (x: T) => number): Cluster[] => {\n  if (!values || values.length === 0) {\n    return [];\n  }\n\n  const totalWeight = sumSimple(values.map((x) => x.weight));\n  const clusterCount = getClusterCount(values, selector);\n  const clusters = ckmeans(values, clusterCount, selector);\n\n  const result = clusters.map((x, i, arr) => {\n    return {\n      min: min(x.map((x) => selector(x))),\n      max: max(x.map((x) => selector(x))),\n      median: median(x.map((x) => selector(x))),\n      probability: sumSimple(x.map((x) => x.weight)) / totalWeight,\n      title: clusterTitle(i, arr.length),\n    };\n  });\n\n  return result;\n};\n\nexport const useClusters = (year: number) => {\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios[year]);\n\n  if (scenarios?.length === 0) {\n    return {\n      totalPay: [],\n      meritBonus: [],\n      retirementBonus: [],\n      companyBonus: [],\n      pay: [],\n      meritIncrease: [],\n      scenarios,\n      taxablePay: [],\n    };\n  }\n\n  return {\n    totalPay: clusters(scenarios, (x) => x.totalPay),\n    meritBonus: clusters(scenarios, (x) => x.meritBonus),\n    retirementBonus: clusters(scenarios, (x) => x.retirementBonus),\n    companyBonus: clusters(scenarios, (x) => x.companyBonus),\n    pay: clusters(scenarios, (x) => x.pay.at(-1)?.value ?? 0),\n    meritIncrease: clusters(scenarios, (x) => x.meritIncreasePct + x.equityIncreasePct),\n    taxablePay: clusters(scenarios, (x) => x.taxablePay),\n    scenarios,\n  };\n};\n\nexport const useTotalPayClusters = () => {\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios);\n  const allScenarios = Object.entries(scenarios);\n  if (allScenarios.length === 0) {\n    return [];\n  }\n\n  return allScenarios.map(([year, scenarios]) => [year, clusters(scenarios, (x) => x.totalPay)]) as [string, Cluster[]][];\n};\n","import { DateTime } from \"luxon\";\nimport { AccountData } from \"shared/models/store/current\";\n\nexport function findSameYear(year: number, data: AccountData[]): AccountData | undefined;\nexport function findSameYear(date: DateTime, data: AccountData[]): AccountData | undefined;\nexport function findSameYear(date: DateTime | number, data: AccountData[]): AccountData | undefined {\n  const year = typeof date === \"number\" ? date : date.year;\n  return data.find((x) => {\n    return DateTime.fromISO(x.date).year === year;\n  });\n}\n","import { DateTime } from \"luxon\";\nimport { AccountData } from \"shared/models/store/current\";\nimport { findSameYear } from \"./find-same-year\";\n\nexport const getActualDate = (year: number | undefined, data: AccountData[]) => {\n  if (!year) {\n    return undefined;\n  }\n\n  const entry = findSameYear(year, data);\n  if (!entry) {\n    return undefined;\n  }\n\n  return DateTime.fromISO(entry.date);\n};\n","import { DateTime } from \"luxon\";\n\nexport const getDefaultPayDates = (year?: number) => {\n  return {\n    meritIncrease: DateTime.fromObject({ month: 4, day: 1, year }),\n    meritBonus: DateTime.fromObject({ month: 4, day: 15, year }),\n    companyBonus: DateTime.fromObject({ month: 6, day: 15, year }),\n    retirementBonus: DateTime.fromObject({ month: 7, day: 15, year }),\n  };\n};\n","import { DateTime } from \"luxon\";\n\nexport const getEligibleIncomeDateRanges = (year: number) => ({\n  base: {\n    start: DateTime.fromObject({ month: 1, day: 1, year }),\n    end: DateTime.fromObject({ month: 12, day: 31, year }).endOf(\"day\"),\n  },\n  meritBonus: {\n    start: DateTime.fromObject({ month: 1, day: 1, year: year - 1 }),\n    end: DateTime.fromObject({ month: 12, day: 31, year: year - 1 }).endOf(\"day\"),\n  },\n  companyBonus: {\n    start: DateTime.fromObject({ day: 1, month: 4, year: year - 1 }),\n    end: DateTime.fromObject({ day: 31, month: 3, year }).endOf(\"day\"),\n  },\n  retirementBonus: {\n    start: DateTime.fromObject({ day: 1, month: 7, year: year - 1 }),\n    end: DateTime.fromObject({ day: 30, month: 6, year }).endOf(\"day\"),\n  },\n});\n","import { useStore } from \"@tanstack/react-store\";\nimport { store } from \"shared/store\";\nimport { getActualDate } from \"shared/utility/get-actual-date\";\nimport { getDefaultPayDates } from \"shared/utility/get-default-pay-dates\";\nimport { getEligibleIncomeDateRanges } from \"shared/utility/get-eligible-income-date-ranges\";\n\nexport const useDates = (year?: number) => {\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\n  const meritBonusDate = getActualDate(year, timeSeries.meritBonus);\n  const companyBonusDate = getActualDate(year, timeSeries.companyBonus);\n  const retirementBonusDate = getActualDate(year, timeSeries.retirementBonus);\n  const defaultDates = getDefaultPayDates(year);\n\n  return {\n    meritIncrease: defaultDates.meritIncrease,\n    meritBonus: meritBonusDate ?? defaultDates.meritBonus,\n    companyBonus: companyBonusDate ?? defaultDates.companyBonus,\n    retirementBonus: retirementBonusDate ?? defaultDates.retirementBonus,\n  };\n};\n\nexport const useDateRanges = (year: number) => {\n  return getEligibleIncomeDateRanges(year);\n};\n","export interface PaymentPeriod {\n  start: string;\n  end: string;\n  payedOn: string;\n  value: number;\n  cumulative: number;\n  type: PaymentType;\n}\n\nexport const PaymentTypes = {\n  regular: \"regular\",\n  bonus: \"taxable bonus\",\n  nonTaxableBonus: \"non-taxable bonus\",\n} as const;\n\nexport type PaymentType = (typeof PaymentTypes)[keyof typeof PaymentTypes];\n","/**\n * @description: chunk an array when the selected value changes\n * @param arr : an array of T.\n * @param select : select a property of T to chunk by.\n * @returns : T[][];\n */\nexport const ChunkByEquality = <T>(arr: T[], select: (data: T) => unknown) => {\n  return arr.reduceRight((acc, curr) => {\n    if (acc.length > 0 && select(acc[0]?.[0]) === select(curr)) {\n      acc[0].unshift(curr);\n    } else {\n      acc.unshift([curr]);\n    }\n\n    return acc;\n  }, [] as T[][]);\n};\n","import InsertChartIcon from \"@mui/icons-material/InsertChart\";\nimport { Tooltip } from \"@mui/material\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { AgCartesianChartOptions, AgColorType } from \"ag-charts-community\";\nimport { AgCharts } from \"ag-charts-react\";\nimport { DateTime } from \"luxon\";\nimport { TimeSeriesKeys } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\nimport { ckmeans, collapseClusters } from \"shared/utility/ckmeans\";\nimport { formatCash } from \"shared/utility/format-cash\";\nimport { formatPercent } from \"shared/utility/format-percent\";\nimport { getProbablityColor } from \"shared/utility/get-probablity-color\";\nimport { sortByDate } from \"shared/utility/sort-by-date\";\n\nexport const SparkChart = (props: { accountName: TimeSeriesKeys; variant: \"cash\" | \"percent\" | \"number\" }) => {\n  const { accountName, variant } = props;\n  const account = useStore(store, (x) => x.projectedIncome.timeSeries[accountName]);\n  const data = account.map((x) => ({ ...x, date: DateTime.fromISO(x.date).toJSDate() }));\n  const selector = (x: { date: Date; value: number }) => x.value;\n  const maxClusters = Math.min(data.length, 3);\n\n  const ckData = collapseClusters(ckmeans(data, maxClusters, selector), selector)\n    .map((x) => {\n      return x.map((y, i, subArr) => ({\n        ...y,\n        cluster: subArr.length / data.length,\n        color: getProbablityColor(subArr.length / data.length) as AgColorType,\n      }));\n    })\n    .flat()\n    .sort(sortByDate((x) => DateTime.fromJSDate(x.date), \"asc\"));\n\n  const options: AgCartesianChartOptions = {\n    data: ckData,\n    theme: \"ag-default-dark\",\n    series: [\n      {\n        type: \"line\",\n        yKey: \"value\",\n        xKey: \"date\",\n        stroke: \"white\",\n        marker: {\n          itemStyler: (params) => {\n            const fill = variant === \"percent\" ? \"#FFF\" : params.datum.color;\n            return {\n              fill,\n              size: 10,\n            };\n          },\n        },\n      },\n    ],\n    axes: [\n      {\n        type: \"number\",\n        position: \"left\",\n\n        nice: true,\n        interval: {\n          maxSpacing: 45,\n        },\n        label: {\n          formatter: (params) => {\n            return variant === \"percent\" ? formatPercent(params.value) : formatCash(params.value);\n          },\n        },\n      },\n      {\n        nice: false,\n        type: \"time\",\n        position: \"bottom\",\n        label: {\n          format: \"%Y\",\n        },\n      },\n    ],\n  };\n\n  const isDisabled = account.length === 0;\n\n  return (\n    <Tooltip\n      disableHoverListener={isDisabled}\n      disableFocusListener={isDisabled}\n      disableTouchListener={isDisabled}\n      slotProps={{\n        tooltip: {\n          sx: {\n            maxWidth: \"unset\",\n          },\n        },\n      }}\n      title={<AgCharts options={options} css={{ width: 750, height: 375 }} />}\n    >\n      <InsertChartIcon color={isDisabled ? \"disabled\" : undefined} />\n    </Tooltip>\n  );\n};\n","import { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { AccountData, TimeSeriesKeys } from \"shared/models/store/current\";\nimport { store } from \".\";\n\nexport const updateProjectedIncomeDate = (timeSeries: TimeSeriesKeys, data: AccountData, date: DateTime) => {\n  store.setState((prev) => {\n    const next = create(prev, (next) => {\n      const idx = prev.projectedIncome.timeSeries[timeSeries].findIndex((x) => x === data);\n      if (idx < 0) {\n        throw new Error(\"failed to find data\");\n      }\n\n      next.projectedIncome.timeSeries[timeSeries][idx].date = date.toISO()!;\n    });\n    return next;\n  });\n};\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\nimport UpdateIcon from \"@mui/icons-material/Update\";\nimport { Button, Tooltip } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { ColDef, ICellRendererParams } from \"ag-grid-community\";\nimport { CustomCellRendererProps } from \"ag-grid-react\";\nimport { DateTime } from \"luxon\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { Percent } from \"shared/components/formatters/percent\";\nimport { AccountData, TimeSeriesKeys } from \"shared/models/store/current\";\nimport { updateProjectedIncome } from \"shared/store\";\nimport { removeProjectedIncome } from \"shared/store/remove-projected-income\";\nimport { updateProjectedIncomeDate } from \"shared/store/update-projected-income-date\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const createAccountColumnConfig = (\n  accountName: TimeSeriesKeys,\n  variant: \"number\" | \"cash\" | \"percent\",\n  dateVariant: \"date\" | \"year\"\n): ColDef<AccountData>[] => [\n  {\n    headerName: dateVariant === \"date\" ? \"Date\" : \"Year\",\n    colId: \"date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(dateVariant === \"date\" ? shortDate : \"yyyy\"),\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\n    tooltipValueGetter: (x) => (dateVariant === \"year\" ? x.value?.toFormat(shortDate) : undefined),\n    cellRenderer: (x: ICellRendererParams<unknown, DateTime>) => {\n      return (\n        <Stack direction={\"row\"} alignItems={\"center\"}>\n          {x.valueFormatted}&nbsp;\n          {x.value && x.value > DateTime.local() && (\n            <Tooltip title=\"Future Event\">\n              <UpdateIcon htmlColor=\"orange\" />\n            </Tooltip>\n          )}\n        </Stack>\n      );\n    },\n    cellEditor: dateVariant === \"date\" ? \"agDateCellEditor\" : \"agNumberCellEditor\",\n    editable: true,\n    valueSetter: (x) => {\n      const date = dateVariant === \"date\" ? DateTime.fromJSDate(x.newValue) : DateTime.fromISO(x.data.date).set({ year: x.newValue });\n\n      if (date.isValid) {\n        updateProjectedIncomeDate(accountName, x.data, date);\n      }\n      return date.isValid;\n    },\n  },\n  {\n    headerName: \"Value\",\n    valueGetter: (x) => x.data?.value,\n    cellRenderer: (x: CustomCellRendererProps<AccountData>) =>\n      variant === \"cash\" ? <Cash compact={false} value={x.value} /> : <Percent value={x.value} />,\n    type: \"numericColumn\",\n    editable: true,\n    cellEditor: \"agNumberCellEditor\",\n    valueSetter: (x) => {\n      updateProjectedIncome(accountName, x.data, +x.newValue);\n      return true;\n    },\n  },\n  {\n    cellStyle: () => ({ display: \"inline-flex\", padding: \"0px\" }),\n    sortable: false,\n    headerName: \"\",\n    width: 80,\n    colId: \"actions\",\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\n      return (\n        <Button\n          onClick={() => {\n            props.data && removeProjectedIncome(accountName, props.data);\n          }}\n          color=\"error\"\n          fullWidth\n        >\n          <DeleteForeverIcon />\n        </Button>\n      );\n    },\n  },\n];\n","import { Box, Button, InputAdornment, Paper, Stack, TextField, Tooltip, Typography } from \"@mui/material\";\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useState } from \"react\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { MAX_NUM_ENTRIES } from \"shared/constants\";\nimport { TimeSeriesKeys } from \"shared/models/store/current\";\nimport { addProjectedIncome, store } from \"shared/store\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { SparkChart } from \"../spark-chart\";\nimport { createAccountColumnConfig } from \"./column-config\";\n\nconst disabledStyle = {\n  color: \"grey\",\n};\n\nconst DataEntry = (props: {\n  timeSeries: TimeSeriesKeys;\n  defaultDate: DateTime;\n  variant?: \"number\" | \"cash\" | \"percent\";\n  dateVariant?: \"date\" | \"year\";\n}) => {\n  const { timeSeries, defaultDate, variant = \"number\", dateVariant = \"date\" } = props;\n  const account = useStore(store, (state) => state.projectedIncome.timeSeries[timeSeries]);\n\n  const [date, setDate] = useState(defaultDate);\n  const [amount, setAmount] = useState<number | null>(null);\n\n  const hasSameDate = !!account?.find((x) => date.hasSame(DateTime.fromISO(x.date), \"day\"));\n\n  const onAddEntry = () => {\n    if (amount != null) {\n      addProjectedIncome(date, timeSeries, variant === \"percent\" ? amount / 100 : amount);\n      setAmount(null);\n    }\n  };\n\n  const accountColumnConfig = createAccountColumnConfig(timeSeries, variant, dateVariant);\n\n  return (\n    <Box display={\"flex\"} flexDirection={\"column\"} height=\"100%\">\n      <Stack spacing={2} flex=\"0 1 auto\">\n        <DatePicker\n          format={dateVariant === \"year\" ? \"yyyy\" : shortDate}\n          views={dateVariant === \"year\" ? [\"year\"] : undefined}\n          sx={{ color: \"white\" }}\n          label={dateVariant === \"date\" ? \"Date\" : \"Year\"}\n          value={date}\n          onChange={(value) => {\n            console.log(value);\n            value && setDate(value);\n          }}\n        />\n        <TextField\n          label=\"Amount\"\n          value={amount ?? \"\"}\n          placeholder=\"0\"\n          type=\"number\"\n          onChange={(event) => (event.target.value === \"\" ? setAmount(null) : setAmount(+event.target.value))}\n          slotProps={{\n            input: {\n              startAdornment: variant !== \"number\" && <InputAdornment position=\"start\">{variant === \"cash\" ? \"$\" : \"%\"}</InputAdornment>,\n            },\n          }}\n        />\n        <Button disabled={amount === null || !date || hasSameDate} onClick={onAddEntry}>\n          Add Entry\n        </Button>\n      </Stack>\n      <Box sx={{ paddingTop: 2, flex: \"1 1 auto\" }}>\n        <AgGrid\n          rowData={account ?? []}\n          columnDefs={accountColumnConfig}\n          id={account + \"-history\"}\n          autoSizeStrategy={{\n            type: \"fitGridWidth\",\n          }}\n          stopEditingWhenCellsLoseFocus\n          getRowStyle={(x) => {\n            return x.rowIndex >= MAX_NUM_ENTRIES ? disabledStyle : undefined;\n          }}\n        />\n      </Box>\n    </Box>\n  );\n};\n\ninterface LayoutProps {\n  title: string;\n  accountName: TimeSeriesKeys;\n  defaultDate: DateTime;\n  variant: \"percent\" | \"number\" | \"cash\";\n  dateVariant?: \"date\" | \"year\";\n}\n\nexport const Layout = (props: LayoutProps) => {\n  const { title, accountName, defaultDate, variant, dateVariant = \"date\" } = props;\n  return (\n    <Paper sx={{ padding: 2, height: \"100%\", width: 450, flexShrink: 0 }}>\n      <Box display=\"flex\" flexDirection=\"column\" height=\"100%\">\n        <Box flex=\"0 1 auto\" marginBottom={4} display={\"flex\"} alignItems={\"center\"} justifyContent={\"space-between\"}>\n          <Typography variant=\"h5\">\n            {title}{\" \"}\n            {variant === \"cash\" && (\n              <Tooltip\n                title={\n                  <>\n                    <span>Cash values are used in lieu of Percent values.</span>\n                    <br />\n                    <span>Cash values are considered actual payment values.</span>\n                  </>\n                }\n              >\n                <span>($)</span>\n              </Tooltip>\n            )}\n            {variant === \"percent\" && (\n              <Tooltip title=\"Percentage values are used for predictions.\">\n                <span>(%)</span>\n              </Tooltip>\n            )}\n          </Typography>\n          <SparkChart accountName={accountName} variant={variant} />\n        </Box>\n        <Box flex=\"1 1 auto\">\n          <DataEntry variant={variant} timeSeries={accountName} defaultDate={defaultDate} dateVariant={dateVariant} />\n        </Box>\n      </Box>\n    </Paper>\n  );\n};\n","import InsertChartIcon from \"@mui/icons-material/InsertChart\";\nimport { Tooltip } from \"@mui/material\";\nimport { AgCartesianChartOptions, AgLineSeriesOptions } from \"ag-charts-community\";\nimport { AgCharts } from \"ag-charts-react\";\nimport { DateTime } from \"luxon\";\nimport { useTotalPayClusters } from \"shared/hooks/use-clusters\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\nimport { formatPercent } from \"shared/utility/format-percent\";\nimport { getProbablityColor } from \"shared/utility/get-probablity-color\";\n\nexport const IncomeChart = () => {\n  const clusters = useTotalPayClusters();\n  const history = clusters\n    .filter(([year]) => +year <= getLocalDateTime().year)\n    .map(([year, x]) => ({\n      totalPay: x[0]?.median ?? 0,\n      date: DateTime.fromObject({ year: +year, month: 1, day: 1 }).toJSDate(),\n    }));\n\n  const future = clusters\n    .filter(([year]) => +year >= getLocalDateTime().year)\n    .map(([year, x]) => {\n      const data = Object.fromEntries(\n        x?.flatMap((x) => {\n          const title = x.title.toLocaleLowerCase();\n          return [\n            [title, x.median],\n            [title + \"Probability\", x.probability],\n          ];\n        })\n      );\n      return {\n        ...data,\n        date: DateTime.fromObject({ year: +year, month: 1, day: 1 }).toJSDate(),\n      };\n    });\n\n  const isDisabled = future.length + history.length === 0;\n\n  const series = [\n    {\n      type: \"line\",\n      xKey: \"date\",\n      yKey: \"totalPay\",\n      data: history,\n      yName: \"Income\",\n\n      tooltip: {\n        renderer: ({ datum, yKey, xKey }) => ({\n          content: `${DateTime.fromJSDate(datum[xKey]).year} ${formatCashShort(datum[yKey])}`,\n        }),\n      },\n    },\n    {\n      type: \"line\",\n      xKey: \"date\",\n      yKey: \"low\",\n      data: future,\n      yName: \"Low\",\n      stroke: \"grey\",\n      marker: {\n        itemStyler: (params) => {\n          const color = getProbablityColor(params.datum.lowProbability);\n          return {\n            fill: color,\n            stroke: color,\n          };\n        },\n      },\n      tooltip: {\n        renderer: ({ datum, yKey, xKey }) => ({\n          content: `${DateTime.fromJSDate(datum[xKey]).year} ${formatCashShort(datum[yKey])} ${formatPercent(datum.lowProbability)}`,\n        }),\n      },\n    },\n    {\n      marker: {\n        itemStyler: (params) => {\n          const color = getProbablityColor(params.datum.medProbability);\n          return {\n            fill: color,\n          };\n        },\n      },\n      type: \"line\",\n      stroke: \"grey\",\n      xKey: \"date\",\n      yKey: \"med\",\n      data: future,\n      yName: \"Medium\",\n      tooltip: {\n        renderer: ({ datum, yKey, xKey }) => ({\n          content: `${DateTime.fromJSDate(datum[xKey]).year} ${formatCashShort(datum[yKey])} ${formatPercent(datum.medProbability)}`,\n        }),\n      },\n    },\n    {\n      stroke: \"grey\",\n      marker: {\n        itemStyler: (params) => {\n          const color = getProbablityColor(params.datum.highProbability);\n          return {\n            fill: color,\n            stroke: color,\n          };\n        },\n      },\n      type: \"line\",\n      xKey: \"date\",\n      yKey: \"high\",\n      data: future,\n      yName: \"High\",\n      tooltip: {\n        renderer: ({ datum, yKey, xKey }) => ({\n          content: `${DateTime.fromJSDate(datum[xKey]).year} ${formatCashShort(datum[yKey])} ${formatPercent(datum.highProbability)}`,\n        }),\n      },\n    },\n  ] as AgLineSeriesOptions[];\n\n  const options: AgCartesianChartOptions = {\n    theme: \"ag-default-dark\",\n    title: {\n      text: `Income`,\n    },\n\n    axes: [\n      {\n        type: \"time\",\n        position: \"bottom\",\n        label: {\n          format: \"%Y\",\n        },\n        nice: false,\n      },\n      {\n        type: \"number\",\n        position: \"left\",\n        nice: true,\n        interval: {\n          maxSpacing: 45,\n        },\n        label: {\n          formatter: (params) => {\n            return formatCash(params.value);\n          },\n        },\n      },\n    ],\n    series,\n  };\n\n  return (\n    <Tooltip\n      disableHoverListener={isDisabled}\n      disableFocusListener={isDisabled}\n      disableTouchListener={isDisabled}\n      slotProps={{\n        tooltip: {\n          sx: {\n            maxWidth: \"unset\",\n          },\n        },\n      }}\n      title={<AgCharts options={options} css={{ height: 375, width: 750 }} />}\n    >\n      <InsertChartIcon color={isDisabled ? \"disabled\" : undefined} />\n    </Tooltip>\n  );\n};\n","import ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\nimport { Table, TableBody, TableCell, TableRow } from \"@mui/material\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { IncomePerPeriod } from \"shared/models/income-per-period\";\nimport { shortDate } from \"shared/utility/format-date\";\n\ninterface IncomePerPeriodTooltipProps {\n  incomePerPeriod: IncomePerPeriod[];\n}\n\nexport const IncomePerPeriodTooltip = (props: IncomePerPeriodTooltipProps) => {\n  const { incomePerPeriod } = props;\n  return (\n    <Table sx={{ width: \"max-content\" }}>\n      <TableBody>\n        {incomePerPeriod.map(({ start, end, value, perPayday, count }, index) => {\n          return (\n            <TableRow key={index}>\n              <TableCell>\n                <Cash value={value} compact={false} />\n              </TableCell>\n              <TableCell>{start.toFormat(shortDate)}</TableCell>\n              <TableCell>\n                <ArrowForwardIcon />\n              </TableCell>\n              <TableCell>{end.toFormat(shortDate)}</TableCell>\n              <TableCell>\n                <Cash value={perPayday} compact={false} /> x {count}\n              </TableCell>\n            </TableRow>\n          );\n        })}\n        <TableRow>\n          <TableCell colSpan={4}>Total:</TableCell>\n          <TableCell>\n            <Cash value={incomePerPeriod.reduce((acc, curr) => curr.value + acc, 0)} compact={false} />\n          </TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  );\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { store } from \"shared/store\";\nimport { findSameYear } from \"shared/utility/find-same-year\";\n\nexport const useHasMeritPairs = () => {\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\n\n  return (\n    timeSeries.meritIncreasePct.every((x) => {\n      return !!findSameYear(DateTime.fromISO(x.date).year, timeSeries.meritBonusPct);\n    }) &&\n    timeSeries.meritBonusPct.every((x) => {\n      return !!findSameYear(DateTime.fromISO(x.date).year, timeSeries.meritIncreasePct);\n    })\n  );\n};\n","import { Alert, CircularProgress, Tooltip } from \"@mui/material\";\nimport { Box, Stack } from \"@mui/system\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useState } from \"react\";\nimport { Card } from \"shared/components/card\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { ClusterValue, ClusterValues } from \"shared/components/formatters/cluster-value\";\nimport { CountDown } from \"shared/components/formatters/countdown\";\nimport { Value } from \"shared/components/formatters/value\";\nimport { useClusters } from \"shared/hooks/use-clusters\";\nimport { useDateRanges, useDates } from \"shared/hooks/use-dates\";\nimport { IncomePerPeriod } from \"shared/models/income-per-period\";\nimport { PaymentTypes } from \"shared/models/payment-periods\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\nimport { ChunkByEquality } from \"shared/utility/chunk-by-equality\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { monthDay } from \"shared/utility/format-date\";\nimport { Layout } from \"./data-entry/data-entry\";\nimport { IncomeChart } from \"./income-chart\";\nimport { IncomePerPeriodTooltip } from \"./income-per-period\";\nimport { useHasMeritPairs } from \"./use-has-merit-pairs\";\n\nconst usePayments = (year: number) => {\n  const dateRanges = useDateRanges(year);\n  const clusters = useClusters(year);\n\n  if (clusters.pay.length !== 1) {\n    return {};\n  }\n  const firstScenario = clusters.scenarios?.at(0);\n  const payPeriods =\n    firstScenario?.payments\n      .filter((x) => x.type === PaymentTypes.regular)\n      .filter((x) => {\n        const payedOn = DateTime.fromISO(x.payedOn);\n        return payedOn >= dateRanges.base.start && payedOn <= dateRanges.base.end;\n      }) ?? [];\n\n  const paychecks = ChunkByEquality(payPeriods, (x) => x.value).map((curr) => {\n    return {\n      start: DateTime.fromISO(curr[0].payedOn),\n      end: DateTime.fromISO(curr[curr.length - 1].payedOn),\n      value: curr.reduce((acc, curr) => acc + curr.value, 0),\n      perPayday: curr[0].value,\n      count: curr.length,\n      type: curr[0].type,\n    } as IncomePerPeriod;\n  });\n\n  return { aprToApr: firstScenario?.aprToApr, basePay: firstScenario?.basePay, paychecks };\n};\n\nexport const ProjectedIncome = () => {\n  const [selectedYear, setSelectedYear] = useState(getLocalDateTime().year);\n  const { aprToApr, basePay, paychecks } = usePayments(selectedYear);\n  const clusters = useClusters(selectedYear);\n  const hasMissingPairs = useHasMeritPairs();\n  const dates = useDates(selectedYear);\n  const scenarios = useStore(scenarioStore);\n\n  return (\n    <Box display=\"flex\" flexDirection=\"row\" height=\"100%\" width={\"100%\"}>\n      <Box flex=\"0 1 auto\" maxWidth={500} height=\"100%\">\n        <Stack gap={2} direction={\"column\"} overflow={\"auto\"} height=\"100%\" paddingRight={1} minWidth={500}>\n          {!hasMissingPairs && <Alert severity=\"error\">Every Merit Increase must have a paired Merit Bonus percent</Alert>}\n          <Card\n            title={\n              <Box display=\"flex\" alignItems={\"center\"} gap={2} width={\"100%\"}>\n                <span>Income</span>\n                <CountDown dateTime={dates.companyBonus} variant=\"date\" dateFormat={monthDay} />\n                <IncomeChart />\n                <Box sx={{ display: \"flex\", marginLeft: \"auto\", alignItems: \"center\", flexWrap: \"wrap\" }}>\n                  {scenarios.loading && <CircularProgress style={{ width: 20, height: 20 }} />}\n                </Box>\n                <DatePicker\n                  sx={{ width: 90, marginRight: 2 }}\n                  label={\"year\"}\n                  views={[\"year\"]}\n                  minDate={getLocalDateTime().set({ year: scenarios.minYear })}\n                  maxDate={getLocalDateTime().set({ year: scenarios.maxYear })}\n                  defaultValue={getLocalDateTime()}\n                  slotProps={{\n                    textField: {\n                      variant: \"standard\",\n                      label: \"\",\n                    },\n                  }}\n                  onChange={(value) => {\n                    setSelectedYear(value?.year ?? getLocalDateTime().year);\n                  }}\n                />\n              </Box>\n            }\n          >\n            <ClusterValues clusters={clusters.totalPay} eventDate={dates.companyBonus} />\n          </Card>\n          <Card\n            title={\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\n                <span>Paycheck</span>\n                <CountDown dateTime={dates.meritIncrease} variant=\"date\" dateFormat={monthDay} />\n              </Box>\n            }\n          >\n            {!basePay && <ClusterValues clusters={clusters.pay} eventDate={dates.meritIncrease} compact={false} />}\n            {basePay && (\n              <>\n                <ClusterValue {...clusters.pay[0]} title={\"Paycheck\"} compact={false} />\n                <Tooltip\n                  placement=\"bottom\"\n                  slotProps={{\n                    tooltip: {\n                      sx: {\n                        maxWidth: \"none\",\n                      },\n                    },\n                  }}\n                  title={paychecks && <IncomePerPeriodTooltip incomePerPeriod={paychecks} />}\n                >\n                  <div>\n                    <Value title={\"Base Pay\"}>\n                      <Cash disableTooltip value={basePay} />\n                    </Value>\n                  </div>\n                </Tooltip>\n                <Value title={\"APR to APR\"}>\n                  <Cash value={aprToApr} />\n                </Value>\n              </>\n            )}\n          </Card>\n          <Card\n            title={\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\n                <span>Merit Increase</span>\n                <CountDown dateTime={dates.meritIncrease} variant=\"date\" dateFormat={monthDay} />\n              </Box>\n            }\n          >\n            <ClusterValues clusters={clusters.meritIncrease} eventDate={dates.meritIncrease} />\n          </Card>\n\n          <Card\n            title={\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\n                <span>Merit Bonus</span>\n                <CountDown dateTime={dates.meritBonus} variant=\"date\" dateFormat={monthDay} />\n              </Box>\n            }\n          >\n            <ClusterValues clusters={clusters.meritBonus} eventDate={dates.meritBonus} />\n          </Card>\n          <Card\n            title={\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\n                <span>Company Bonus</span>\n                <CountDown dateTime={dates.companyBonus} variant=\"date\" dateFormat={monthDay} />\n              </Box>\n            }\n          >\n            <ClusterValues clusters={clusters.companyBonus} eventDate={dates.companyBonus} />\n          </Card>\n          <Card\n            title={\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\n                <span>Retirement Bonus</span>\n                <CountDown dateTime={dates.retirementBonus} variant=\"date\" dateFormat={monthDay} />\n              </Box>\n            }\n          >\n            <ClusterValues clusters={clusters.retirementBonus} eventDate={dates.retirementBonus} />\n          </Card>\n        </Stack>\n      </Box>\n      <Box flex=\"1 1 auto\" overflow={\"auto\"} paddingBottom={2} paddingLeft={1}>\n        <Box display={\"flex\"} height={\"100%\"} width={\"100%\"} gap={2}>\n          <Layout\n            dateVariant=\"year\"\n            accountName=\"paycheck\"\n            variant=\"cash\"\n            defaultDate={DateTime.fromObject({\n              day: 1,\n              month: 4,\n              year: selectedYear,\n            })}\n            title=\"Income Per Paycheck\"\n          />\n          <Layout\n            title=\"Merit Increase\"\n            accountName=\"meritIncreasePct\"\n            variant=\"percent\"\n            defaultDate={dates.meritIncrease}\n            dateVariant=\"year\"\n          />\n          <Layout title=\"Equity Increase\" accountName=\"equityPct\" variant=\"percent\" defaultDate={dates.meritIncrease} dateVariant=\"year\" />\n          <Layout title=\"Merit Bonus\" accountName=\"meritBonusPct\" variant=\"percent\" defaultDate={dates.meritBonus} dateVariant=\"year\" />\n          <Layout title=\"Merit Bonus\" accountName=\"meritBonus\" variant=\"cash\" defaultDate={dates.meritBonus} />\n          <Layout\n            title=\"Company Bonus Factor\"\n            accountName=\"companyBonusPct\"\n            defaultDate={dates.companyBonus}\n            variant=\"percent\"\n            dateVariant=\"year\"\n          />\n          <Layout title=\"Company Bonus\" accountName=\"companyBonus\" defaultDate={dates.companyBonus} variant=\"cash\" />\n          <Layout title=\"Retirement Bonus\" accountName=\"retirementBonus\" defaultDate={dates.retirementBonus} variant=\"cash\" />\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n","import { DateTime } from \"luxon\";\n\nexport const isFuture = (date: DateTime) => date.diffNow(\"milliseconds\").milliseconds > 0;\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { Mortgage } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\nimport { useLocalDateTime } from \"shared/utility/current-date\";\nimport { calcLoanBalance } from \"shared/utility/mortgage-calc\";\n\nexport const useFutureMortgageEquity = (year: number) => {\n  const accounts = useStore(store, (x) => x.wealth);\n  const mortgages = Object.values(accounts).filter((x) => x.type === \"mortgage\") as Mortgage[];\n  const localDate = useLocalDateTime();\n  const januaryFirstSelectedYear = DateTime.fromObject({ month: 1, day: 1, year });\n\n  if (year < localDate.year) {\n    return 0;\n  }\n\n  return mortgages\n    .map((x) => {\n      if (!x.loan) {\n        return 0;\n      }\n\n      const startDate = localDate < januaryFirstSelectedYear ? januaryFirstSelectedYear : localDate.endOf(\"month\");\n      const endDate = startDate.endOf(\"year\");\n\n      return calcLoanBalance(startDate, x.loan) - calcLoanBalance(endDate, x.loan);\n    })\n    .reduce((acc, curr) => acc + curr, 0);\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { PAYMENTS_PER_YEAR } from \"shared/constants\";\nimport { store } from \"shared/store\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\n\nexport const useFutureRetirementContributions = (year: number) => {\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios[year]);\n  const retirementContribution = useStore(store, (x) => x.projectedWealth.retirementContributionPaycheck);\n  const remainingRegularPayments = scenarios?.at(0)?.remainingRegularPayments ?? 0;\n\n  return {\n    remaining: Math.min(remainingRegularPayments, PAYMENTS_PER_YEAR) * retirementContribution,\n    perPaycheck: retirementContribution,\n  };\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { PAYMENTS_PER_YEAR } from \"shared/constants\";\nimport { store } from \"shared/store\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\n\nexport const useFutureSavings = (year: number) => {\n  const savingsPerPaycheck = useStore(store, (x) => x.projectedWealth.savingsPerPaycheck);\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios[year]);\n  const remainingRegularPayments = scenarios?.at(0)?.remainingRegularPayments ?? 0;\n\n  return {\n    remaining: savingsPerPaycheck * Math.min(remainingRegularPayments, PAYMENTS_PER_YEAR),\n    perPaycheck: savingsPerPaycheck,\n  };\n};\n","import { DateTime } from \"luxon\";\nimport { Scenario } from \"shared/models/scenario\";\nimport { isFuture } from \"./is-future\";\n\nexport const getThresholdTaxRemaining = (taxRate: number, threshold: number, scenario: Scenario) => {\n  const remaining = scenario.payments\n    .slice(scenario.currentPaymentIdx)\n    .filter((x) => x.cumulative >= threshold && isFuture(DateTime.fromISO(x.payedOn)))\n    .reduce((acc, curr) => {\n      return acc + Math.min(curr.value, curr.cumulative - threshold) * taxRate;\n    }, 0);\n  return remaining;\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { store } from \"shared/store\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\nimport { getThresholdTaxRemaining } from \"shared/utility/get-threshold-tax-remaining\";\n\ninterface ThresholdTaxData {\n  total: number;\n  firstOccurrence: DateTime;\n  remaining: number;\n  perPaycheck: number;\n}\n\nexport const useFutureSocialSecurity = (year: number): ThresholdTax => {\n  const config = useStore(store, (x) => x.projectedWealth);\n  return useThresholdTax(year, config.socialSecurityLimit, config.socialSecurityTaxRate);\n};\n\nexport const useFutureMedicareTax = (year: number): ThresholdTax => {\n  const config = useStore(store, (x) => x.projectedWealth);\n  const taxes = useThresholdTax(year, config.medicareSupplementalTaxThreshold, -1 * config.medicareSupplementalTaxRate);\n\n  return {\n    min: taxes.max,\n    max: taxes.min,\n  };\n};\n\nexport type ThresholdTax = Partial<Record<\"min\" | \"max\", ThresholdTaxData>>;\n\nconst useThresholdTax = (year: number, threshold: number, taxRate: number): ThresholdTax => {\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios[year]);\n\n  const taxesOwedPerScenario = (scenarios ?? [])\n    .map((x) => {\n      const totalTaxable = x.payments.at(-1)?.cumulative ?? 0;\n      const taxableAmountOverThreshold = Math.max(0, totalTaxable - threshold);\n      const total = taxRate * taxableAmountOverThreshold;\n      const firstOccurrence = x.payments.find((x) => x.cumulative > threshold)?.payedOn;\n      const remaining = getThresholdTaxRemaining(taxRate, threshold, x);\n      const lastPaycheck = x.payments.at(-1)?.value ?? 0;\n      const perPaycheck = total && taxRate * lastPaycheck;\n\n      return {\n        total,\n        firstOccurrence: firstOccurrence ? DateTime.fromISO(firstOccurrence) : undefined,\n        remaining,\n        perPaycheck,\n      };\n    })\n    .filter((x) => x.firstOccurrence) as ThresholdTaxData[];\n\n  return taxesOwedPerScenario.reduce(\n    (acc, curr, i) => {\n      if (i == 0) {\n        return { min: curr, max: curr };\n      } else {\n        if (curr.total < acc.min!.total) {\n          acc.min = curr;\n        }\n        if (curr.total > acc.max!.total) {\n          acc.max = curr;\n        }\n      }\n      return acc;\n    },\n    {} as Partial<Record<\"min\" | \"max\", ThresholdTaxData>>\n  );\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { useDates } from \"shared/hooks/use-dates\";\nimport { store } from \"shared/store\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\nimport { clusterTitle, getClusterCount } from \"shared/utility/cluster-helpers\";\nimport { getThresholdTaxRemaining } from \"shared/utility/get-threshold-tax-remaining\";\nimport { isFuture } from \"shared/utility/is-future\";\nimport { ckmeans, median, sumSimple } from \"simple-statistics\";\nimport { useFutureMortgageEquity } from \"./use-future-mortgage-equity\";\nimport { useFutureRetirementContributions } from \"./use-future-retirement-contributions\";\nimport { useFutureSavings } from \"./use-future-savings\";\n\nexport const useFutureTotals = (year: number, options: { excludeHomeEquity: boolean } = { excludeHomeEquity: false }) => {\n  const { excludeHomeEquity } = options;\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios[year]);\n  const bonusTakeHomeFactor = useStore(store, (x) => 1 - x.projectedWealth.bonusWithholdingsRate);\n  const savings = useFutureSavings(year);\n  const homeEquity = useFutureMortgageEquity(year);\n  const retirement = useFutureRetirementContributions(year);\n  const config = useStore(store, (x) => x.projectedWealth);\n\n  const dates = useDates(year);\n\n  const rawClusters = (() => {\n    const totals = scenarios?.map((x) => {\n      const futureEvents = [\n        isFuture(dates.meritBonus) && x.meritBonus * bonusTakeHomeFactor,\n        isFuture(dates.companyBonus) && x.companyBonus * bonusTakeHomeFactor,\n        isFuture(dates.retirementBonus) && x.retirementBonus,\n        getThresholdTaxRemaining(config.socialSecurityTaxRate, config.socialSecurityLimit, x),\n        getThresholdTaxRemaining(-1 * config.medicareSupplementalTaxRate, config.medicareSupplementalTaxThreshold, x),\n        savings.remaining,\n        retirement.remaining,\n        excludeHomeEquity ? 0 : homeEquity,\n      ].filter((x) => x) as number[];\n      return sumSimple(futureEvents);\n    });\n\n    if (!totals || totals.length === 0) {\n      return [[savings.remaining + retirement.remaining]];\n    }\n\n    const clusters = ckmeans(\n      totals,\n      getClusterCount(totals, (x) => x)\n    );\n    return clusters;\n  })();\n\n  const numValues = rawClusters.flat().length;\n  return rawClusters.map((x, i, arr) => {\n    return {\n      min: Math.min(...x),\n      max: Math.max(...x),\n      median: median(x),\n      probability: x.length / numValues,\n      title: clusterTitle(i, arr.length),\n    };\n  });\n};\n","import { Box, Stack } from \"@mui/system\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { Card } from \"shared/components/card\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { ClusterValues } from \"shared/components/formatters/cluster-value\";\nimport { CountDown } from \"shared/components/formatters/countdown\";\nimport { Value } from \"shared/components/formatters/value\";\nimport { Cluster, useClusters } from \"shared/hooks/use-clusters\";\nimport { useDates } from \"shared/hooks/use-dates\";\nimport { store } from \"shared/store\";\nimport { scaleClusters } from \"shared/utility/cluster-helpers\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { monthDay } from \"shared/utility/format-date\";\nimport { isFuture } from \"shared/utility/is-future\";\nimport { useFutureMortgageEquity } from \"./hooks/use-future-mortgage-equity\";\nimport { useFutureRetirementContributions } from \"./hooks/use-future-retirement-contributions\";\nimport { useFutureSavings } from \"./hooks/use-future-savings\";\nimport { ThresholdTax, useFutureMedicareTax, useFutureSocialSecurity } from \"./hooks/use-future-social-security\";\nimport { useFutureTotals } from \"./hooks/use-future-totals\";\n\nexport const FutureEvents = (props: { year: number; onChange: (year: number) => void }) => {\n  const { year, onChange } = props;\n  const dates = useDates(year);\n\n  const savings = useFutureSavings(year);\n  const retirement = useFutureRetirementContributions(year);\n  const medicare = useFutureMedicareTax(year);\n  const socialSecurity = useFutureSocialSecurity(year);\n  const clusters = useClusters(year);\n  const bonusTakeHomeFactor = useStore(store, (x) => 1 - x.projectedWealth.bonusWithholdingsRate);\n  const total = useFutureTotals(year);\n  const equity = useFutureMortgageEquity(year);\n\n  return (\n    <>\n      <Stack spacing={2} width={550} paddingRight={1}>\n        <Card\n          title={\n            <>\n              <span>Remaining Projected Wealth</span>\n              <DatePicker\n                sx={{ width: 90, marginRight: 2, marginLeft: \"auto\" }}\n                label={\"year\"}\n                views={[\"year\"]}\n                minDate={getLocalDateTime()}\n                maxDate={getLocalDateTime().plus({ years: 1 })}\n                value={getLocalDateTime().set({ year })}\n                slotProps={{\n                  textField: {\n                    variant: \"standard\",\n                    label: \"\",\n                  },\n                }}\n                onChange={(data) => {\n                  data?.year && onChange(data?.year);\n                }}\n              />\n            </>\n          }\n        >\n          <ClusterValues clusters={total} eventDate={dates.companyBonus} />\n        </Card>\n        {isFuture(dates.meritBonus) && clusters.meritBonus.length > 0 && (\n          <ClusterCard title=\"Merit Bonus\" date={dates.meritBonus} cluster={scaleClusters(clusters.meritBonus, bonusTakeHomeFactor)} />\n        )}\n        {isFuture(dates.companyBonus) && clusters.companyBonus.length > 0 && (\n          <ClusterCard\n            title=\"Company Bonus\"\n            date={dates.companyBonus}\n            cluster={scaleClusters(clusters.companyBonus, bonusTakeHomeFactor)}\n          />\n        )}\n        {isFuture(dates.retirementBonus) && clusters.retirementBonus.length > 0 && (\n          <ClusterCard title=\"Retirement Bonus\" date={dates.retirementBonus} cluster={clusters.retirementBonus} />\n        )}\n        {!!socialSecurity.min && <ThresholdTaxCard thresholdTax={socialSecurity} title={\"Social Security Limit\"} />}\n        {!!medicare.min && <ThresholdTaxCard thresholdTax={medicare} title={\"Medicare Supplemental Tax\"} />}\n\n        {(!!savings.perPaycheck || !!retirement.perPaycheck || !!equity) && (\n          <Card title={\"Savings & Retirement\"}>\n            {!!savings.perPaycheck && (\n              <Value title={\"savings\"} secondaryValue={<Cash tooltip=\"Per Month\" value={savings.perPaycheck} />}>\n                <Cash tooltip=\"Total Remaining\" value={savings.remaining} />\n              </Value>\n            )}\n            {!!retirement.perPaycheck && (\n              <Value title={\"retirement\"} secondaryValue={<Cash tooltip=\"Per Paycheck\" value={retirement.perPaycheck} />}>\n                <Cash tooltip=\"Total Remaining\" value={retirement.remaining} />\n              </Value>\n            )}\n            {!!equity && (\n              <Value title={\"Home Equity\"}>\n                <Cash tooltip=\"Total Remaining\" value={equity} />\n              </Value>\n            )}\n          </Card>\n        )}\n      </Stack>\n    </>\n  );\n};\n\nconst ThresholdTaxCard = (props: { thresholdTax: ThresholdTax; title: string }) => {\n  const { thresholdTax, title } = props;\n  return (\n    <Card\n      title={\n        <Box display={\"flex\"} width={\"max-content\"} gap={1} marginRight={2}>\n          <span>{title}</span>\n\n          <CountDown dateFormat={monthDay} variant=\"date\" dateTime={thresholdTax.max?.firstOccurrence} />\n          {thresholdTax.min && thresholdTax.max && !thresholdTax.min.firstOccurrence.equals(thresholdTax.max.firstOccurrence) && (\n            <>\n              <span>or</span>\n              <CountDown dateFormat={monthDay} variant=\"date\" dateTime={thresholdTax.min.firstOccurrence} />\n            </>\n          )}\n        </Box>\n      }\n    >\n      {thresholdTax.max && thresholdTax.max.total === thresholdTax.min?.total && (\n        <Value title={\"Remaining\"}>\n          <Cash value={thresholdTax.max?.remaining} compact={false} />\n        </Value>\n      )}\n      {thresholdTax.max && thresholdTax.max.total !== thresholdTax.min?.total && (\n        <>\n          <Value title={thresholdTax.max.firstOccurrence > getLocalDateTime() ? \"Early\" : \"Low\"}>\n            <Cash value={thresholdTax.max?.remaining} compact={false} />\n          </Value>\n          <Value title={thresholdTax.max.firstOccurrence > getLocalDateTime() ? \"Late\" : \"High\"}>\n            <Cash value={thresholdTax.min?.total} compact={false} />\n          </Value>\n        </>\n      )}\n      <Value title={\"Per Paycheck\"}>\n        <Cash value={thresholdTax.max?.perPaycheck} compact={false} />\n      </Value>\n    </Card>\n  );\n};\n\nconst ClusterCard = (props: { date: DateTime; cluster?: Cluster[]; title: string }) => {\n  const { date, cluster, title } = props;\n  return (\n    <Card\n      title={\n        <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\n          <span>{title}</span>\n          <CountDown variant=\"date\" dateFormat={monthDay} dateTime={date} />\n        </Box>\n      }\n    >\n      <ClusterValues clusters={cluster} eventDate={date} />\n    </Card>\n  );\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useEarliestAccountEntry } from \"shared/hooks/use-earliest-account-entry\";\nimport { store } from \"shared/store\";\nimport { findMostMostLikely } from \"shared/utility/cluster-helpers\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { findNearestIdxOnOrBefore, findNearestOnOrBefore } from \"shared/utility/find-nearest-on-or-before\";\nimport { calcEquity, calcLoanBalance } from \"shared/utility/mortgage-calc\";\nimport { useFutureTotals } from \"./use-future-totals\";\n\nexport interface TimeSeriesWealth {\n  graphDate: Date;\n  date: DateTime;\n  wealth: number;\n  yoyCash?: number;\n  yoyPct?: number;\n}\n\nconst useFuturesWealth = () => {\n  const year = getLocalDateTime().year;\n  const totals = useFutureTotals(year, { excludeHomeEquity: true });\n  const totalsPlusOne = useFutureTotals(year + 1, { excludeHomeEquity: true });\n\n  return {\n    [year + 1]: findMostMostLikely(totals)?.median ?? 0,\n    [year + 2]: (findMostMostLikely(totals)?.median ?? 0) + (findMostMostLikely(totalsPlusOne)?.median ?? 0),\n  };\n};\n\nexport const useTimeSeriesWealth = (year: number) => {\n  const localDateTime = getLocalDateTime().startOf(\"day\");\n  const earliest = useEarliestAccountEntry();\n  const accounts = useStore(store, (x) => x.wealth);\n  const futuresWealth = useFuturesWealth();\n\n  if (!earliest.isValid) {\n    return [] as TimeSeriesWealth[];\n  }\n\n  const dates = new Array(year + 2 - earliest.year)\n    .fill(earliest.year)\n    .map((x, i) => DateTime.fromObject({ day: 1, month: 1, year: x + i }).startOf(\"day\"));\n\n  const futureBenchmarkIdx = findNearestIdxOnOrBefore(localDateTime, dates, (x) => x);\n\n  if (!dates.some((x) => x.equals(localDateTime))) {\n    dates.splice(futureBenchmarkIdx + 1, 0, localDateTime);\n  }\n\n  return dates\n    .map((date) => {\n      const accountsWealth = Object.values(accounts).map((x) => {\n        if (x.type === \"mortgage\" && x.loan) {\n          const houseValue = findNearestOnOrBefore(date, x.data);\n          const balance = calcLoanBalance(date, x.loan);\n          return calcEquity(x.loan.ownershipPct, houseValue?.value, balance, x.loan.principal);\n        } else if (x.type === \"account\") {\n          const entry = findNearestOnOrBefore(date, x.data);\n          return entry?.value ?? 0;\n        }\n        return 0;\n      });\n\n      const accountWealth = accountsWealth.reduce((acc, curr) => acc + curr, 0);\n      const futureWealth = futuresWealth[date.year] ?? 0;\n\n      return {\n        date,\n        graphDate: date.toJSDate(),\n        wealth: accountWealth + futureWealth,\n      };\n    })\n    .map((x, idx, arr) => {\n      if (x.date <= localDateTime || x.date.year === localDateTime.year + 2) {\n        const benchmarkWealth = arr[idx - 1]?.wealth;\n        if (!benchmarkWealth) {\n          return x;\n        }\n        return {\n          ...x,\n          yoyCash: x.wealth - benchmarkWealth,\n          yoyPct: x.wealth / benchmarkWealth - 1,\n        };\n      }\n\n      const benchmarkWealth = arr[futureBenchmarkIdx]?.wealth;\n      if (!benchmarkWealth) {\n        return x;\n      }\n      return {\n        ...x,\n        yoyCash: x.wealth - benchmarkWealth,\n        yoyPct: x.wealth / benchmarkWealth - 1,\n      };\n    }) as TimeSeriesWealth[];\n};\n","import { AgCartesianChartOptions, AgLineSeriesOptions } from \"ag-charts-community\";\nimport { AgCharts } from \"ag-charts-react\";\nimport { DateTime } from \"luxon\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { TimeSeriesWealth, useTimeSeriesWealth } from \"./hooks/use-times-series-wealth\";\n\ninterface MarkerParams<T> {\n  fill: string;\n  fillOpacity: number;\n  highlighted: boolean;\n  seriesId: string;\n  size: number;\n  stroke: string;\n  strokeOpacity: number;\n  strokeWidth: number;\n  xKey: string;\n  yKey: string;\n  datum: T;\n}\n\nexport const WealthChart = (props: { titleYear: number }) => {\n  const dataYear = getLocalDateTime().year + 1;\n  const { titleYear } = props;\n  const data = useTimeSeriesWealth(dataYear);\n  const offsetIdx = getLocalDateTime().year - titleYear + 1;\n\n  const series = [\n    {\n      type: \"line\",\n      xKey: \"graphDate\",\n      yKey: \"wealth\",\n      yName: \"Wealth\",\n      tooltip: {\n        renderer: ({ datum, yKey, xKey }) => ({\n          content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCash(datum[yKey])}`,\n        }),\n      },\n      marker: {\n        itemStyler: (params: MarkerParams<TimeSeriesWealth>) => {\n          if (params.datum.date.year === DateTime.local().plus({ years: 1 }).year) {\n            return {\n              fill: \"orange\",\n            };\n          } else if (params.datum.date.year === DateTime.local().plus({ years: 2 }).year) {\n            return {\n              fill: \"rgb(244, 67, 54)\",\n            };\n          } else if (params.datum.date.hasSame(DateTime.local(), \"day\")) {\n            return {\n              fill: \"lightgrey\",\n            };\n          }\n        },\n      },\n    },\n    {\n      type: \"line\",\n      xKey: \"graphDate\",\n      yKey: \"yoyCash\",\n      yName: \"YoY ($)\",\n      stroke: \"grey\",\n\n      tooltip: {\n        renderer: ({ datum, yKey, xKey }) => ({\n          content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCash(datum[yKey])}`,\n        }),\n      },\n      marker: {\n        fill: \"grey\",\n        itemStyler: (params: MarkerParams<TimeSeriesWealth>) => {\n          if (params.datum.date.year === DateTime.local().plus({ years: 1 }).year) {\n            return {\n              fill: \"orange\",\n            };\n          } else if (params.datum.date.year === DateTime.local().plus({ years: 2 }).year) {\n            return {\n              fill: \"rgb(244, 67, 54)\",\n            };\n          } else if (params.datum.date.hasSame(DateTime.local(), \"day\")) {\n            return {\n              fill: \"lightgrey\",\n            };\n          }\n        },\n      },\n    },\n  ] as AgLineSeriesOptions[];\n\n  const options: AgCartesianChartOptions = {\n    theme: \"ag-default-dark\",\n    title: {\n      text: `${data[data.length - 1 - offsetIdx].date.toFormat(shortDate)} Projected wealth ${formatCashShort(\n        (data[data.length - 1 - offsetIdx]?.wealth ?? 0) as number\n      )}`,\n    },\n    data,\n    axes: [\n      {\n        type: \"time\",\n        position: \"bottom\",\n        label: {\n          format: \"%Y\",\n        },\n      },\n      {\n        type: \"number\",\n        position: \"left\",\n        nice: false,\n      },\n    ],\n    series,\n  };\n\n  return <AgCharts options={options} css={{ height: \"100%\", width: \"100%\" }} />;\n};\n","import QueryStatsIcon from \"@mui/icons-material/QueryStats\";\nimport TodayIcon from \"@mui/icons-material/Today\";\nimport UpdateIcon from \"@mui/icons-material/Update\";\nimport { Tooltip } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { ColDef, ICellRendererParams } from \"ag-grid-community\";\nimport { DateTime } from \"luxon\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { Percent } from \"shared/components/formatters/percent\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { TimeSeriesWealth } from \"../hooks/use-times-series-wealth\";\n\nexport const columnConfig: ColDef<TimeSeriesWealth>[] = [\n  {\n    headerName: \"Date\",\n    colId: \"date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data?.date,\n    cellRenderer: (x: ICellRendererParams<unknown, DateTime>) => {\n      const localDateTime = getLocalDateTime().startOf(\"day\");\n      const systemYear = localDateTime.year;\n      return (\n        <Stack direction={\"row\"} alignItems={\"center\"}>\n          {x.valueFormatted}&nbsp;\n          {x.value && x.value.equals(localDateTime) && (\n            <Tooltip title=\"Today\">\n              <TodayIcon htmlColor=\"orange\" />\n            </Tooltip>\n          )}\n          {x.value &&\n            x.value.equals(\n              DateTime.fromObject({\n                day: 1,\n                month: 1,\n                year: systemYear,\n              })\n            ) && (\n              <Tooltip\n                title={`Benchmark for ${localDateTime.toFormat(shortDate)} & ${localDateTime.set({ day: 1, month: 1 }).plus({ years: 1 }).toFormat(shortDate)} `}\n              >\n                <QueryStatsIcon htmlColor=\"orange\" />\n              </Tooltip>\n            )}\n          {x.value &&\n            x.value.equals(\n              DateTime.fromObject({\n                day: 1,\n                month: 1,\n                year: systemYear + 1,\n              })\n            ) && (\n              <Tooltip title={`Benchmark for ${localDateTime.set({ day: 1, month: 1 }).plus({ years: 2 }).toFormat(shortDate)} `}>\n                <QueryStatsIcon htmlColor=\"rgb(244, 67, 54)\" />\n              </Tooltip>\n            )}\n          {x.value && x.value > localDateTime && (\n            <Tooltip title=\"Future Event\">\n              <UpdateIcon htmlColor={x.value.year - systemYear > 1 ? \"rgb(244, 67, 54)\" : \"orange\"} />\n            </Tooltip>\n          )}\n        </Stack>\n      );\n    },\n  },\n  {\n    type: \"numericColumn\",\n    headerName: \"Wealth\",\n    colId: \"wealth\",\n    valueGetter: (x) => x.data?.wealth,\n    cellRenderer: (x: ICellRendererParams<unknown, number>) => {\n      return x.value && <Cash value={x.value} placement=\"left\" />;\n    },\n  },\n  {\n    colId: \"yoy-cash\",\n    type: \"numericColumn\",\n    headerName: \"YoY ($)\",\n    valueGetter: (x) => x.data?.yoyCash,\n    cellRenderer: (x: ICellRendererParams<unknown, number>) => {\n      return x.value && <Cash value={x.value} placement=\"left\" />;\n    },\n  },\n  {\n    colId: \"yoy-percent\",\n    type: \"numericColumn\",\n    headerName: \"YoY (%)\",\n    valueGetter: (x) => x.data?.yoyPct,\n    cellRenderer: (x: ICellRendererParams<unknown, number>) => {\n      return x.value && <Percent value={x.value} />;\n    },\n    minWidth: 60,\n  },\n];\n","import { Box } from \"@mui/system\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { useTimeSeriesWealth } from \"../hooks/use-times-series-wealth\";\nimport { columnConfig } from \"./colum-config\";\n\nexport const WealthTable = () => {\n  const dataYear = getLocalDateTime().year + 1;\n  const data = useTimeSeriesWealth(dataYear);\n\n  return (\n    <Box height={\"100%\"} width={\"100%\"}>\n      <AgGrid\n        id=\"time-series-wealth\"\n        rowData={data}\n        columnDefs={columnConfig}\n        autoSizeStrategy={{ type: \"fitGridWidth\" }}\n        onRowDataUpdated={(e) => e.api.sizeColumnsToFit()}\n      />\n    </Box>\n  );\n};\n","import { Box, Stack } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { FutureEvents } from \"./future-events\";\nimport { WealthChart } from \"./wealth-chart\";\nimport { WealthTable } from \"./wealth-table\";\n\nexport const ProjectedWealth = () => {\n  const localTime = getLocalDateTime();\n  const [year, setYear] = useState(localTime.year);\n\n  return (\n    <Box display=\"flex\" flexDirection=\"row\" height=\"100%\" width={\"100%\"} gap={1}>\n      <Box flex=\"0 1 auto\" height={\"100%\"} overflow={\"auto\"}>\n        <FutureEvents onChange={setYear} year={year} />\n      </Box>\n      <Box flex=\"1 1 auto\" overflow={\"auto\"}>\n        <Stack spacing={2} height={\"100%\"} width={\"100%\"}>\n          <WealthChart titleYear={year} />\n          <WealthTable />\n        </Stack>\n      </Box>\n    </Box>\n  );\n};\n","import { create } from \"mutative\";\nimport { ProjectedWealthKeys } from \"shared/models/store/current\";\nimport { store } from \".\";\n\nexport const setProjectedWealth = (configName: ProjectedWealthKeys, value: number) => {\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      next.projectedWealth[configName] = value;\n    });\n  });\n};\n","import { InputAdornment, TextField } from \"@mui/material\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { useCallback, useState } from \"react\";\nimport { ProjectedWealthKeys } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\nimport { setProjectedWealth } from \"shared/store/set-projected-wealth\";\n\ninterface ConfigEntryProps {\n  configName: ProjectedWealthKeys;\n  label: string;\n  variant?: \"cash\" | \"percent\";\n}\n\nexport const ConfigEntry = (props: ConfigEntryProps) => {\n  const { configName, label, variant = \"cash\" } = props;\n  const [error, setError] = useState(false);\n  const isPercent = variant === \"percent\";\n\n  const onchange = useCallback(\n    (input: string) => {\n      let value = +input;\n      const isNan = Number.isNaN(value);\n      setError(isNan);\n      if (isNan) {\n        return;\n      }\n\n      if (isPercent) {\n        value /= 100;\n      }\n\n      setProjectedWealth(configName, value);\n    },\n    [configName, isPercent]\n  );\n\n  const value = useStore(store, (x) => x.projectedWealth[configName]);\n  const defaultValue = isPercent ? value * 100 : value;\n\n  return (\n    <TextField\n      error={error}\n      variant=\"outlined\"\n      slotProps={{\n        input: {\n          startAdornment: <InputAdornment position=\"start\">{isPercent ? \"%\" : \"$\"}</InputAdornment>,\n        },\n      }}\n      defaultValue={defaultValue.toFixed(isPercent ? 2 : 0)}\n      type=\"numeric\"\n      label={label}\n      onChange={(event) => {\n        onchange(event.target.value);\n      }}\n    />\n  );\n};\n","import { Card, CardContent, CardHeader } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { ConfigEntry } from \"./config-entry\";\n\nexport const Config = () => {\n  return (\n    <Card>\n      <CardHeader title=\"Configuration\" />\n      <CardContent>\n        <Stack spacing={2}>\n          <ConfigEntry configName=\"savingsPerPaycheck\" label=\"Savings Per Paycheck\" />\n          <ConfigEntry configName=\"retirementContributionPaycheck\" label=\"Retirement Contribution Per Paycheck\" />\n          <ConfigEntry configName=\"bonusWithholdingsRate\" label=\"Bonus Withholdings Rate\" variant=\"percent\" />\n          <Stack direction={\"row\"} spacing={2} width={\"100%\"} sx={{ \"& > *\": { flex: 1 } }}>\n            <ConfigEntry configName=\"socialSecurityLimit\" label=\"Social Security Tax Limit\" />\n            <ConfigEntry configName=\"socialSecurityTaxRate\" label=\"Social Security Tax\" variant=\"percent\" />\n          </Stack>\n          <Stack direction={\"row\"} spacing={2} width={\"100%\"} sx={{ \"& > *\": { flex: 1 } }}>\n            <ConfigEntry configName=\"medicareSupplementalTaxThreshold\" label=\"Medicare Supplemental Threshold\" />\n            <ConfigEntry configName=\"medicareSupplementalTaxRate\" label=\"Medicare Supplemental Tax\" variant=\"percent\" />\n          </Stack>\n        </Stack>\n      </CardContent>\n    </Card>\n  );\n};\n","import Close from \"@mui/icons-material/Close\";\nimport { Box, Button, IconButton, MenuItem, Modal, Paper, Select, Stack, Typography } from \"@mui/material\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { SimpleTreeView } from \"@mui/x-tree-view/SimpleTreeView\";\nimport { TreeItem } from \"@mui/x-tree-view/TreeItem\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useState } from \"react\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { Percent } from \"shared/components/formatters/percent\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { formatCash } from \"shared/utility/format-cash\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { formatPercent } from \"shared/utility/format-percent\";\n\nexport const ScenarioExplorer = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [year, setYear] = useState(getLocalDateTime().year);\n  const [scenarioIndex, setScenarioIndex] = useState(0);\n  const scenarioData = useStore(scenarioStore);\n  const scenarios = scenarioData.scenarios[year];\n  const scenario = scenarios?.[scenarioIndex];\n  if (!scenario) {\n    return null;\n  }\n  return (\n    <>\n      <Button onClick={() => setIsOpen(true)}>Scenario Explorer</Button>\n      <Modal open={isOpen}>\n        <Paper sx={{ position: \"absolute\", top: 24, bottom: 24, right: 24, left: 24, padding: 2, overflow: \"auto\" }}>\n          <IconButton onClick={() => setIsOpen(false)} sx={{ position: \"absolute\", top: 8, right: 8 }}>\n            <Close />\n          </IconButton>\n          <Stack spacing={2}>\n            <Stack direction={\"row\"} alignItems={\"center\"} spacing={2}>\n              <Typography variant=\"h5\">Scenario Explorer</Typography>\n              <DatePicker\n                sx={{ width: 90, marginRight: 2 }}\n                label={\"year\"}\n                views={[\"year\"]}\n                minDate={getLocalDateTime().set({ year: scenarioData?.minYear })}\n                maxDate={getLocalDateTime().set({ year: scenarioData?.maxYear })}\n                defaultValue={getLocalDateTime()}\n                slotProps={{\n                  textField: {\n                    variant: \"standard\",\n                    label: \"\",\n                  },\n                }}\n                onChange={(date) => {\n                  date && setYear(date.year);\n                }}\n              />\n              <Select variant=\"standard\" onChange={(event) => setScenarioIndex(+event.target.value)} defaultValue={\"0\"}>\n                {scenarios?.map((x, i) => (\n                  <MenuItem key={i} value={i}>\n                    {x.weight} {formatCash(x.totalPay)}\n                  </MenuItem>\n                ))}\n              </Select>\n            </Stack>\n\n            <Paper elevation={5} sx={{ padding: 2 }}>\n              <SimpleTreeView\n                defaultExpandedItems={[\"_TotalPay\", \"totalMerit\", \"pay\", \"meritBonus\", \"companyBonus\", \"lastThreeMeritBonusFactor\"]}\n              >\n                <TreeItem itemId=\"scenario\" label={<span>Scenario</span>}>\n                  <TreeItem itemId=\"weight\" label={<span>Weight: {scenario.weight}</span>} />\n                  <TreeItem itemId=\"year\" label={<span>Year: {scenario.year}</span>} />\n                </TreeItem>\n                <TreeItem\n                  itemId=\"_TotalPay\"\n                  label={\n                    <Stack direction={\"row\"} spacing={1}>\n                      <span>Total Pay: </span>\n                      <Cash value={scenario.totalPay} compact={false} />\n                    </Stack>\n                  }\n                >\n                  <TreeItem\n                    itemId=\"aprToApr\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Apr To Apr: </span>\n                        <Cash value={scenario.aprToApr} compact={false} />\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"basePay\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Base Pay: </span>\n                        <Cash value={scenario.basePay} compact={false} />\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"taxablePay\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Taxable Pay: </span>\n                        <Cash value={scenario.taxablePay} compact={false} />\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"totalPay\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Total Pay: </span>\n                        <Cash value={scenario.totalPay} compact={false} />\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"totalMerit\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Total Merit Increase: </span>\n                        <Percent value={scenario.meritIncreasePct + scenario.equityIncreasePct} />\n                      </Stack>\n                    }\n                  >\n                    <TreeItem\n                      itemId=\"meritIncreasePct\"\n                      label={\n                        <Stack direction={\"row\"} spacing={1}>\n                          <span>Merit Increase: </span>\n                          <Percent value={scenario.meritIncreasePct} />\n                        </Stack>\n                      }\n                    />\n                    <TreeItem\n                      itemId=\"equityIncreasePct\"\n                      label={\n                        <Stack direction={\"row\"} spacing={1}>\n                          <span>Equity Increase: </span>\n                          <Percent value={scenario.equityIncreasePct} />\n                        </Stack>\n                      }\n                    />\n                  </TreeItem>\n\n                  <TreeItem\n                    itemId=\"currentPaymentIdx\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Current Payment Index: </span>\n                        <span>{scenario.currentPaymentIdx}</span>\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"remainingPayments\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Remaining Regular Payments: </span>\n                        <span>{scenario.remainingRegularPayments}</span>\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"current_payment\"\n                    label={\n                      <Stack direction={\"row\"} spacing={2}>\n                        <Box>Current Payment: </Box>\n                        <Box>{DateTime.fromISO(scenario.payments[scenario.currentPaymentIdx].payedOn).toFormat(shortDate)}</Box>\n                        <Box width={70} textAlign={\"right\"}>\n                          {formatCash(scenario.payments[scenario.currentPaymentIdx].value)}\n                        </Box>\n                        <Box width={70} textAlign={\"right\"}>\n                          {formatCash(scenario.payments[scenario.currentPaymentIdx].cumulative)}\n                        </Box>\n                        <Box> {scenario.payments[scenario.currentPaymentIdx].type}</Box>\n                      </Stack>\n                    }\n                  ></TreeItem>\n                  <TreeItem itemId=\"payments\" label={\"Payments Considered\"}>\n                    {scenario.payments.toReversed().map((x, i, arr) => (\n                      <TreeItem\n                        key={i}\n                        itemId={`payments-${i}`}\n                        label={\n                          <Stack\n                            sx={{\n                              backgroundColor: scenario.currentPaymentIdx == arr.length - 1 - i ? \"rgba(0,255,0,.15)\" : undefined,\n                            }}\n                            direction={\"row\"}\n                            spacing={2}\n                          >\n                            <Box>{arr.length - 1 - i}</Box>\n                            <Box>{DateTime.fromISO(x.payedOn).toFormat(shortDate)}</Box>\n                            <Box width={70} textAlign={\"right\"}>\n                              {formatCash(x.value)}\n                            </Box>\n                            <Box width={70} textAlign={\"right\"}>\n                              {formatCash(x.cumulative)}\n                            </Box>\n                            <Box> {x.type}</Box>\n                          </Stack>\n                        }\n                      />\n                    ))}\n                  </TreeItem>\n                  <TreeItem itemId=\"pay\" label={\"Pay\"}>\n                    {scenario.pay.toReversed().map((x, i) => (\n                      <TreeItem key={i} itemId={`$pay-${i}`} label={`${DateTime.fromISO(x.date).year} ${x.value}`} />\n                    ))}\n                  </TreeItem>\n                </TreeItem>\n\n                <TreeItem\n                  itemId=\"meritBonus\"\n                  label={\n                    <Stack direction={\"row\"} spacing={1}>\n                      <span>Merit Bonus: </span>\n                      <Cash value={scenario.meritBonus} compact={false} />\n                    </Stack>\n                  }\n                >\n                  <TreeItem\n                    itemId=\"mertiBonusPct\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Merit Bonus Percent: </span>\n                        <Percent value={scenario.meritBonusPct} />\n                      </Stack>\n                    }\n                  />\n                </TreeItem>\n                <TreeItem\n                  itemId=\"companyBonus\"\n                  label={\n                    <Stack direction={\"row\"} spacing={1}>\n                      <span>Company Bonus:</span>\n                      <Cash value={scenario.companyBonus} compact={false} />\n                    </Stack>\n                  }\n                >\n                  <TreeItem\n                    itemId=\"companyBonusFactor.value\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Company Bonus Factor:</span>\n                        <Percent value={scenario.companyBonusFactor} />\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"companyBonusPct.value\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Company Bonus Percent:</span>\n                        <Percent value={scenario.companyBonusPct} />\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"lastThreeMeritBonusFactor\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Last Three Merit Bonus Percent:</span>\n                        <Percent value={scenario.lastThreeMeritBonusFactor} />\n                      </Stack>\n                    }\n                  >\n                    {scenario.lastThreeMeritBonuses.toReversed().map((x, i) => (\n                      <TreeItem key={`${i}${x}`} itemId={`lastThreeMeritBonuses${i}`} label={`${year - i} ${formatPercent(x)}`} />\n                    ))}\n                  </TreeItem>\n                </TreeItem>\n                <TreeItem\n                  itemId=\"retirementBonus\"\n                  label={\n                    <Stack direction={\"row\"} spacing={1}>\n                      <span>Retirement Bonus:</span>\n                      <Cash value={scenario.retirementBonus} compact={false} />\n                    </Stack>\n                  }\n                >\n                  <TreeItem\n                    itemId=\"retirementBonusPct\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Retirement Bonus Percent:</span>\n                        <Percent value={scenario.retirementBonusPct} />\n                      </Stack>\n                    }\n                  />\n                </TreeItem>\n              </SimpleTreeView>\n            </Paper>\n          </Stack>\n        </Paper>\n      </Modal>\n    </>\n  );\n};\n","import { Box, Table, TableBody, TableCell, TableHead, TableRow } from \"@mui/material\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport { ReactNode } from \"react\";\nimport { ZodError } from \"zod\";\n\ninterface InvalidDataDialogProps {\n  open?: boolean;\n  error?: ZodError;\n  children?: ReactNode;\n}\n\nexport default function InvalidDataDialog(props: InvalidDataDialogProps) {\n  const { open, error, children } = props;\n\n  return (\n    <>\n      <Dialog open={!!open}>\n        <DialogTitle id=\"alert-dialog-title\">{\"Error Loading Data\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            <Box maxHeight={500} overflow={\"auto\"}>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Error Message</TableCell>\n                    <TableCell>Path</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {error?.issues.map((x, idx) => {\n                    return (\n                      <TableRow key={idx}>\n                        <TableCell>{x.message}</TableCell>\n                        <TableCell>{x.path.join(\".\")}</TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            </Box>\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>{children}</DialogActions>\n      </Dialog>\n    </>\n  );\n}\n","import { useStore } from \"@tanstack/react-store\";\nimport { useCallback } from \"react\";\nimport { store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const downloadJson = <T,>(filename: string, storeData: T) => {\n  const data = JSON.stringify(storeData, null, 2);\n  const link = document.createElement(\"a\");\n  link.download = filename;\n  const blob = new Blob([data], { type: \"application/json\" });\n  link.href = window.URL.createObjectURL(blob);\n  link.click();\n};\n\nexport const useExport = () => {\n  const storeData = useStore(store);\n  const onExport = useCallback(() => {\n    downloadJson(`wealth-tracker-${getLocalDateTime().toFormat(shortDate)}.json`, storeData);\n  }, [storeData]);\n\n  return onExport;\n};\n","import { useCallback } from \"react\";\nimport { storeValidator } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\nimport { migration } from \"shared/store/migrations\";\n\nfunction selectFile(contentType: string) {\n  return new Promise<File>((resolve) => {\n    const input = document.createElement(\"input\");\n    input.type = \"file\";\n    input.multiple = false;\n    input.accept = contentType;\n\n    input.onchange = () => {\n      const files = Array.from(input.files ?? []);\n      resolve(files[0]);\n    };\n\n    input.click();\n  });\n}\n\nexport const useImport = () => {\n  return useCallback(() => {\n    return new Promise<void>((resolve, reject) => {\n      selectFile(\"application/json\").then((file) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = (readerEvent) => {\n          const content = readerEvent.target?.result?.toString();\n          if (content) {\n            const data = JSON.parse(window.atob(content.split(\",\")[1]));\n            const validation = storeValidator.safeParse(data);\n            if (validation.success) {\n              store.setState(() => data);\n              resolve();\n            } else {\n              try {\n                migration(data);\n                store.setState(() => data);\n                resolve();\n              } catch (err) {\n                console.log(\"error\", err);\n                console.log(\"invalid data\", data);\n                reject(err);\n              }\n            }\n          }\n        };\n      });\n    });\n  }, []);\n};\n","import { storeValidator } from \"shared/models/store/current\";\n\nexport const useStoreDataError = () => {\n  const invalidData = localStorage.getItem(\"store-invalid\");\n\n  if (!invalidData) {\n    return { hadError: false };\n  }\n\n  const jsonInvalidData = JSON.parse(invalidData);\n  const validated = storeValidator.safeParse(jsonInvalidData);\n\n  return {\n    hadError: !!invalidData,\n    invalidData: jsonInvalidData,\n    parseError: invalidData && !validated.success ? validated.error : undefined,\n    resetError: () => {\n      localStorage.removeItem(\"store-invalid\");\n    },\n  };\n};\n","import DeleteForever from \"@mui/icons-material/DeleteForever\";\nimport { Button, Card, CardActions, CardContent, CardHeader, Stack, Typography } from \"@mui/material\";\nimport InvalidDataDialog from \"app/invalid-data-dialog\";\nimport { useState } from \"react\";\nimport { ConfirmDialog } from \"shared/components/confirm-dialog\";\nimport { downloadJson, useExport } from \"shared/hooks/use-export\";\nimport { useImport } from \"shared/hooks/use-import\";\nimport { useStoreDataError } from \"shared/hooks/use-store-data-error\";\nimport { resetStore } from \"shared/store\";\nimport { useLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const System = () => {\n  const onExport = useExport();\n  const onImport = useImport();\n  const { hadError, parseError, resetError, invalidData } = useStoreDataError();\n  const [error, setError] = useState(parseError);\n  const [isOpen, setIsOpen] = useState(hadError);\n  const localTime = useLocalDateTime();\n\n  return (\n    <>\n      <Stack spacing={2}>\n        <Card>\n          <CardHeader title={\"System\"} />\n          <CardContent>\n            <Typography variant=\"body2\">Built On {BUILD_DATE}</Typography>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader title={\"Data\"} />\n\n          <CardActions>\n            <Button\n              onClick={() =>\n                onImport().catch((err) => {\n                  setIsOpen(true);\n                  setError(err);\n                })\n              }\n            >\n              Import\n            </Button>\n            <Button onClick={onExport}>Export</Button>\n            <ConfirmDialog title=\"Reset Everything\" onConfirm={resetStore}>\n              <Button color=\"error\">\n                <DeleteForever />\n                Reset\n              </Button>\n            </ConfirmDialog>\n          </CardActions>\n        </Card>\n      </Stack>\n      <InvalidDataDialog open={isOpen} error={error}>\n        {hadError && (\n          <>\n            <Button\n              color=\"error\"\n              onClick={() => {\n                setIsOpen(false);\n                resetError?.();\n                resetStore();\n              }}\n            >\n              Reset\n            </Button>\n            <Button\n              onClick={() => {\n                downloadJson(`invalid-data-wealth-tracker-${localTime.toFormat(shortDate)}.json`, invalidData);\n              }}\n            >\n              Download Data\n            </Button>\n\n            <Button\n              onClick={() => {\n                setIsOpen(false);\n                resetError?.();\n              }}\n            >\n              Ignore\n            </Button>\n          </>\n        )}\n        {!hadError && (\n          <Button\n            onClick={() => {\n              setIsOpen(false);\n            }}\n          >\n            Cancel\n          </Button>\n        )}\n      </InvalidDataDialog>\n    </>\n  );\n};\n","import CloseIcon from \"@mui/icons-material/Close\";\nimport SettingsIcon from \"@mui/icons-material/Settings\";\nimport { Box, Button, Dialog, DialogContent, DialogTitle, IconButton, Tab, Tabs } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { Config } from \"./config\";\nimport { ScenarioExplorer } from \"./scenario-explorer\";\nimport { System } from \"./system\";\n\nexport const ConfigModal = () => {\n  const [tab, setTab] = useState(\"system\");\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <>\n      <Button onClick={() => setIsOpen(true)}>\n        <SettingsIcon />\n      </Button>\n      <Dialog maxWidth={false} open={isOpen} onClose={() => setIsOpen(false)}>\n        <DialogTitle sx={{ display: \"flex\" }}>\n          <Tabs value={tab} onChange={(_, value) => setTab(value)}>\n            <Tab value=\"projected-Income\" label=\"Projected Income\" />\n            <Tab value=\"projected-wealth\" label=\"Projected Wealth\" />\n            <Tab value=\"system\" label=\"System\" />\n          </Tabs>\n          <IconButton sx={{ height: \"min-content\", marginLeft: \"auto\" }} onClick={() => setIsOpen(false)}>\n            <CloseIcon />\n          </IconButton>\n        </DialogTitle>\n        <DialogContent>\n          <Box width={600} height={450}>\n            {tab === \"projected-Income\" && <ScenarioExplorer />}\n            {tab === \"projected-wealth\" && <Config />}\n            {tab === \"system\" && <System />}\n          </Box>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n};\n","import { Box, Stack, Tab, Tabs } from \"@mui/material\";\nimport { Link, Outlet, useLocation, useNavigate } from \"@tanstack/react-router\";\nimport { ConfigModal } from \"./config/config-modal\";\n\nexport const App = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Extract only the top-level route path for tab matching\n  const currentPath = location.pathname.split(\"/\").slice(2)[0];\n\n  return (\n    <Box padding={2} paddingTop={0} display={\"flex\"} flexDirection={\"column\"} height=\"100%\" gap={2}>\n      <Box flex=\"0 1 auto\">\n        <Stack direction=\"row\">\n          <Tabs value={currentPath} onChange={(_, value) => navigate({ to: value })}>\n            <Tab value=\"net-wealth\" label=\"Total Wealth\" component={Link} to=\"/net-wealth\" />\n            <Tab value=\"projected-income\" label=\"Projected Income\" component={Link} to=\"/projected-income\" />\n            <Tab value=\"projected-wealth\" label=\"Projected Wealth\" component={Link} to=\"/projected-wealth\" />\n          </Tabs>\n          <Box marginLeft={\"auto\"} gap={2} display={\"flex\"}>\n            <ConfigModal />\n          </Box>\n        </Stack>\n      </Box>\n      <Box flex=\"1 1 auto\" height={\"100%\"} width={\"100%\"} overflow=\"hidden\">\n        <Outlet />\n      </Box>\n    </Box>\n  );\n};\n","import { createRootRoute, createRoute, createRouter, redirect } from \"@tanstack/react-router\";\nimport { NetWealth } from \"capabilities/net-wealth\";\nimport { ProjectedIncome } from \"capabilities/projected-income\";\nimport { ProjectedWealth } from \"capabilities/projected-wealth\";\nimport { App } from \"./app\";\n\nconst rootRoute = createRootRoute({\n  component: App,\n});\n\nconst indexRoute = createRoute({\n  getParentRoute: () => rootRoute,\n  path: \"/\",\n  beforeLoad: () => {\n    throw redirect({ to: \"/net-wealth\" });\n  },\n});\n\nconst netWealthRoute = createRoute({\n  getParentRoute: () => rootRoute,\n  path: \"/net-wealth\",\n  component: NetWealth,\n});\n\nconst projectedIncomeRoute = createRoute({\n  getParentRoute: () => rootRoute,\n  path: \"/projected-income\",\n  component: ProjectedIncome,\n});\n\nconst projectedWealthRoute = createRoute({\n  getParentRoute: () => rootRoute,\n  path: \"/projected-wealth\",\n  component: ProjectedWealth,\n});\n\nconst routeTree = rootRoute.addChildren([indexRoute, netWealthRoute, projectedIncomeRoute, projectedWealthRoute]);\n\nexport const router = createRouter({\n  routeTree,\n  defaultPreload: \"intent\",\n  basepath: \"/wealth-tracker\",\n});\n\ndeclare module \"@tanstack/react-router\" {\n  interface Register {\n    router: typeof router;\n  }\n}\n","import { DateTime } from \"luxon\";\n\ndeclare module \"luxon\" {\n  interface DateTime {\n    /**\n     * Type guard function that ensures a DateTime is valid.\n     * @throws Error if the date is invalid\n     * @returns this date as DateTime<true>\n     */\n    toValid(): DateTime<true>;\n  }\n}\n\nDateTime.prototype.toValid = function (this: DateTime): DateTime<true> {\n  if (!this.isValid) {\n    throw new Error(`Invalid date: ${this.invalidReason}`);\n  }\n  return this as DateTime<true>;\n};\n","export const groupBySingle = <T, Tkey extends string | number>(array: T[], selector: (data: T) => Tkey) => {\n  const result = {} as Partial<Record<Tkey, T>>;\n  for (let i = 0; i < array.length; i++) {\n    result[selector(array[i])] ??= array[i];\n  }\n  return result;\n};\n","import { DateTime } from \"luxon\";\nimport { MAX_NUM_ENTRIES } from \"shared/constants\";\nimport { TimeSeries } from \"shared/models/store/current\";\nimport { findSameYear } from \"shared/utility/find-same-year\";\nimport { groupBySingle } from \"shared/utility/group-by-single\";\n\ntype UnweightedPairs = {\n  meritIncreasePct: number;\n  meritBonusPct: number;\n};\n\n/**\n *\n * @param year year to generate merit pairs for\n * @param timeseries pojected\n * @returns an array of possible merit pairs with their frequency weighted\n */\nconst getMeritPairs = (year: number, timeSeries: TimeSeries) => {\n  const meritBonusPct = findSameYear(year, timeSeries.meritBonusPct);\n  const meritIncreasePct = findSameYear(year, timeSeries.meritIncreasePct);\n\n  if (meritBonusPct && meritIncreasePct) {\n    return [\n      {\n        meritIncreasePct: meritIncreasePct.value,\n        meritBonusPct: meritBonusPct.value,\n        weight: 1,\n      },\n    ];\n  }\n\n  const meritBonusPctByYear = groupBySingle(timeSeries.meritBonusPct, (x) => DateTime.fromISO(x.date).year);\n  const unweightedPairs = timeSeries.meritIncreasePct.slice(-1 * MAX_NUM_ENTRIES).map((x) => {\n    const meritBonusPctPair = meritBonusPctByYear[DateTime.fromISO(x.date).year];\n    return {\n      meritIncreasePct: x.value,\n      meritBonusPct: meritBonusPctPair?.value ?? 0,\n    };\n  });\n\n  const groupsOfPairs = Object.values(\n    Object.groupBy(unweightedPairs, (x) => `${x.meritBonusPct} ${x.meritIncreasePct}`)\n  ) as UnweightedPairs[][];\n\n  return groupsOfPairs.map((x) => {\n    return {\n      ...x[0],\n      weight: x.length,\n    };\n  });\n};\n\nexport const getMeritSequence = (year: number, timeSeries: TimeSeries) => {\n  const meritPairs = getMeritPairs(year, timeSeries);\n\n  const pay = timeSeries.paycheck.filter((x) => DateTime.fromISO(x.date).year > year - 3);\n  const mostRecentPay = pay.at(-1) ?? timeSeries.paycheck.at(-1);\n\n  if (!mostRecentPay) {\n    return [];\n  }\n\n  const mostRecentPayYear = DateTime.fromISO(mostRecentPay.date).year;\n  const yearsToGenerate = Math.max(year - mostRecentPayYear, 1);\n\n  //generate all possible merit sequences that could happen from now to target year\n  let meritSequence = meritPairs.slice().map((x) => [x]);\n  for (let i = 0; i < yearsToGenerate - 1; i++) {\n    meritSequence = meritSequence.flatMap((x) => {\n      return meritPairs.map((merit) => {\n        return x.slice().concat(merit);\n      });\n    });\n  }\n\n  return meritSequence.map((values) => {\n    return {\n      weight: values.reduce((acc, curr) => acc * curr.weight, 1),\n      values: values,\n    };\n  });\n};\n","import { MAX_NUM_ENTRIES } from \"shared/constants\";\nimport { TimeSeries } from \"shared/models/store/current\";\nimport { findSameYear } from \"shared/utility/find-same-year\";\nimport { getMeritSequence } from \"./get-merit-sequence\";\n\nexport const getScenarioSize = (year: number, timeSeries: TimeSeries) => {\n  const meritSequence = getMeritSequence(year, timeSeries);\n  const companyBonusFactor = findSameYear(year, timeSeries.companyBonusPct);\n  const companyBonusPcts = companyBonusFactor\n    ? [companyBonusFactor.value]\n    : timeSeries.companyBonusPct.slice(-1 * MAX_NUM_ENTRIES).map((x) => x.value);\n\n  const companyBonusPctWeights = Object.entries(Object.groupBy(companyBonusPcts, (x) => x)).map(([, values]) => {\n    return {\n      weight: values!.length,\n      value: values!.at(0)!,\n    };\n  });\n\n  return meritSequence.slice(-1 * MAX_NUM_ENTRIES).length * companyBonusPctWeights.length;\n};\n","import { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { Scenario } from \"shared/models/scenario\";\nimport { store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { getScenarioSize } from \"shared/utility/get-scenario-size\";\nimport { scenarioStore } from \"../store/scenario-store\";\n\nconst maxScenarioSize = 2499;\nconst currentYear = getLocalDateTime().year;\nconst maxYear = (() => {\n  const timeSeries = store.state.projectedIncome.timeSeries;\n  for (let i = currentYear; i <= currentYear + 5; i++) {\n    const size = getScenarioSize(i, timeSeries);\n    if (size > maxScenarioSize || size === 0) {\n      return Math.max(currentYear, i - 1);\n    }\n  }\n  return currentYear + 5;\n})();\n\nconst workers = [\n  new Worker(new URL(\"worker.js\", import.meta.url), { type: \"module\", name: \"1\" }),\n  new Worker(new URL(\"worker.js\", import.meta.url), { type: \"module\", name: \"2\" }),\n  new Worker(new URL(\"worker.js\", import.meta.url), { type: \"module\", name: \"3\" }),\n  new Worker(new URL(\"worker.js\", import.meta.url), { type: \"module\", name: \"4\" }),\n];\n\nworkers.map(\n  (x) =>\n    (x.onmessage = (event: MessageEvent<{ year: number; scenarios: Scenario[] }>) => {\n      scenarioStore.setState((prev) => {\n        return create(prev, (x) => {\n          x.scenarios[event.data.year] = event.data.scenarios;\n\n          const range = Object.keys(x.scenarios)\n            .map((x) => +x)\n            .filter((x, i, arr) => {\n              return i === 0 ? true : x - arr[i - 1] === 1;\n            });\n          const min = range[0];\n          const max = range.at(-1);\n\n          x.loading = max !== maxYear;\n          x.maxYear = max!;\n          x.minYear = min;\n        });\n      });\n    })\n);\n\nconst loadAllScenarios = () => {\n  const projectedIncome = store.state.projectedIncome;\n  const first = projectedIncome.timeSeries.paycheck[1]?.date;\n  const date = first ? DateTime.fromISO(first) : getLocalDateTime();\n  const oldestYear = date.year;\n\n  workers[0].postMessage({ year: currentYear, projectedIncome });\n\n  let workerIdx = 1;\n  for (let i = oldestYear; i < currentYear; i++) {\n    const idx = workerIdx++ % workers.length;\n    workers[idx].postMessage({ year: i, projectedIncome });\n  }\n\n  for (let i = currentYear + 1; i <= maxYear; i++) {\n    const idx = workerIdx++ % workers.length;\n    workers[idx].postMessage({ year: i, projectedIncome });\n  }\n};\nloadAllScenarios();\n\nlet priorProjectedIncome = store.state.projectedIncome;\nstore.subscribe(() => {\n  if (priorProjectedIncome === store.state.projectedIncome) {\n    return;\n  }\n  scenarioStore.setState(() => ({ loading: false, scenarios: {}, maxYear: currentYear, minYear: currentYear }));\n  priorProjectedIncome = store.state.projectedIncome;\n  loadAllScenarios();\n});\n","import { CssBaseline, ThemeProvider, createTheme } from \"@mui/material\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers\";\nimport { AdapterLuxon } from \"@mui/x-date-pickers/AdapterLuxon\";\nimport { RouterProvider } from \"@tanstack/react-router\";\nimport { router } from \"app/router\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport \"shared/utility/luxon-extensions\";\nimport \"shared/web-worker/entry\";\nimport \"./index.css\";\n\nimport { AllCommunityModule, ModuleRegistry } from \"ag-grid-community\";\nModuleRegistry.registerModules([AllCommunityModule]);\n\nconst darkTheme = createTheme({\n  palette: {\n    mode: \"dark\",\n  },\n});\n\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n  <React.StrictMode>\n    <ErrorBoundary\n      fallbackRender={(props) => {\n        return (\n          <>\n            <div style={{ backgroundColor: \"#FFF\" }}>{props.error.message}</div>\n            <div style={{ backgroundColor: \"#FFF\" }}>{props.error.stackTrace}</div>\n          </>\n        );\n      }}\n    >\n      <LocalizationProvider dateAdapter={AdapterLuxon}>\n        <ThemeProvider theme={darkTheme}>\n          <CssBaseline />\n          <RouterProvider router={router} />\n        </ThemeProvider>\n      </LocalizationProvider>\n    </ErrorBoundary>\n  </React.StrictMode>\n);\n"],"names":["sortByDate","select","direction","a","b","toMillis","loanValidator","z","object","principal","number","ratePct","paymentsPerYear","payment","firstPaymentDate","string","ownershipPct","accountDataValidator","date","value","id","accountValidator","type","literal","data","array","mortgageValidator","loan","optional","wealth","record","union","projectedIncome","timeSeries","paycheck","meritIncreasePct","equityPct","meritBonusPct","meritBonus","companyBonusPct","companyBonus","retirementBonus","projectedWealth","socialSecurityLimit","socialSecurityTaxRate","medicareSupplementalTaxThreshold","medicareSupplementalTaxRate","savingsPerMonth","retirementContributionPaycheck","bonusWitholdingsRate","storeValidator","version","hidden","boolean","default","getDefaultStore","savingsPerPaycheck","bonusWithholdingsRate","MAX_NUM_ENTRIES","PAYMENTS_PER_YEAR","MONTHS_PER_YEAR","migration","Error","storeV0Validator","parse","storeV1Validator","storeV2Validator","storeV3Validator","storeV4Validator","keys","Object","i","length","storeV5Validator","next","console","log","jsonTryParse","result","isSuccess","JSON","createStore","validator","defaultValue","key","invalidData","localData","localStorage","getItem","parsedData","safeParse","success","setItem","stringify","err","store","CreateStore","subscribe","current","state","addAccountEntry","accountName","amount","setState","create","prev","push","startOf","toString","sort","DateTime","fromISO","x","addProjectedIncome","concat","hideAccount","removeAccount","removeAccountEntry","idx","findIndex","undefined","splice","removeProjectedIncome","resetStore","setLoan","updateAccountDate","toISO","updateAccountName","currentAccountName","newAccountName","updateAccountValue","updateProjectedIncome","NewAccount","forwardRef","props","ref","$","_c","open","setOpen","useState","nameRef","useRef","error","setError","accountType","setAccountType","t0","t1","Symbol","for","marginTop","t2","t3","t4","t5","t6","target","t7","t8","t9","t10","t11","t12","t13","t14","t15","t16","children","t17","myTheme","themeQuartz","withParams","backgroundColor","browserColorScheme","chromeBackgroundColor","mix","onto","foregroundColor","headerFontSize","AgGrid","rest","height","getLocalDateTime","local","useLocalDateTime","shortDate","monthDay","formatCashShort","Intl","NumberFormat","style","currency","notation","maximumFractionDigits","minimumSignificantDigits","maximumSignificantDigits","format","formatCash","compact","fallback","Cash","disableTooltip","tooltip","placement","formatted","join","createAccountColumnConfig","headerName","valueFormatter","toFormat","valueGetter","cellEditor","editable","valueSetter","fromJSDate","newValue","isValid","cellRenderer","cellStyle","display","padding","sortable","width","colId","DeleteForeverIcon","hasJanFistEntry","year","janFirst","fromObject","day","month","diff","days","useMissingYears","account","accountItemsByYear","groupBy","years","entries","filter","find","entry","map","lookup","Set","missing","has","ConfirmDialog","onConfirm","title","isOpen","setIsOpen","minWidth","justifyContent","marginRight","AccountSettings","nextAccountName","setNextAccountName","Close","event","t18","t19","t20","t21","t22","AccountTab","useStore","setDate","setAmount","missingYears","hasSameDate","hasSame","accountColumnConfig","onAddEntry","marginLeft","color","input","startAdornment","_temp","x_0","api","sizeColumnsToFit","findNearestOnOrBefore","findNearestIdxOnOrBefore","selector","calcLoanBalance","rate","monthlyPayment","annualizedRate","periods","months","totalRate","balance","calcEquity","houseValue","loanBalance","useGraphDates","accounts","flatMap","AddEntry","date_0","Stack","mortgageColumnConfig","toFixed","equity","convertPct","min","datetime","offset","handleClose","textField","parsed","issues","path","createLoanValueGetter","MortgageTab","allAccounts","values","dates","mortgageData","Box","AccountTabs","firstAccount","setAccount","useEffect","_","_temp2","_temp3","account_0","useEarliestAccountEntry","fromMillis","reduce","acc","curr","Math","Infinity","getMortgageValue","mortgage","getAccountValue","getGraphValue","useGraphData","graphData","total","toJSDate","forEach","firstNonZero","slice","graphEntry","index","arr","WealthChart","initialFromDate","localTime","endOf","intialToDate","plus","fromDate","setFromDate","toDate","setToDate","getFullYear","filteredData","xKey","yKey","yName","renderer","_temp4","series","text","position","label","nice","interval","step","time","every","snapTo","theme","axes","options","value_0","datum","content","toISODate","x_1","data_0","stacked","datum_0","yKey_0","xKey_0","NetWealth","border","borderRadius","boxShadow","Card","minHeight","paddingBottom","paddingLeft","paddingTop","CashRange","max","minFormatted","maxFormatted","showRange","formatPercent","getProbablityColor","probability","Percent","PercentRange","Value","secondaryValue","tertiaryValue","className","flexDirection","alignItems","gap","flexShrink","ClusterValue","ClusterValues","clusters","eventDate","diffNow","toHuman","dur","smallestUnit","units","smallestIdx","indexOf","shiftTo","normalize","toObject","Duration","fromEntries","replaceAll","CountDown","dateTime","variant","dateFormat","countDownStr","useCountdownText","tooltipStr","useTooltipText","countDownColor","useCountDownColor","scenarioStore","Store","loading","maxYear","minYear","scenarios","makeMatrix","columns","rows","matrix","column","j","numericSort","toSorted","uniqueCountSorted","uniqueValueCount","lastSeenValue","ssq","sums","sumsOfSquares","sji","muji","fillMatrixColumn","iMin","iMax","cluster","backtrackMatrix","floor","jlow","jhigh","sjlowi","ssqjlow","ssqj","fillMatrices","nValues","shift","shiftedValue","ckmeans","nClusters","sorted","clusterRight","clusterLeft","areSetsEqual","collapseClusters","sets","y","scaleCluster","factor","median","scaleClusters","findMostMostLikely","clusterTitle","getClusterCount","uniqeValues","size","totalWeight","sumSimple","weight","clusterCount","useClusters","totalPay","pay","meritIncrease","taxablePay","_temp5","_temp6","_temp7","useTotalPayClusters","_temp8","allScenarios","bb0","_temp10","x_2","x_3","x_4","at","x_5","equityIncreasePct","x_6","_temp9","scenarios_0","findSameYear","getActualDate","getDefaultPayDates","getEligibleIncomeDateRanges","base","start","end","useDates","meritBonusDate","companyBonusDate","retirementBonusDate","defaultDates","useDateRanges","PaymentTypes","regular","ChunkByEquality","reduceRight","unshift","SparkChart","maxClusters","subArr","flat","ckData","stroke","marker","itemStyler","params","fill","maxSpacing","formatter","params_0","isDisabled","sx","maxWidth","updateProjectedIncomeDate","dateVariant","tooltipValueGetter","valueFormatted","set","disabledStyle","DataEntry","defaultDate","flex","t23","t24","Layout","rowIndex","IncomeChart","history","future","_temp11","_temp12","_temp13","year_0","year_1","toLocaleLowerCase","year_2","lowProbability","medProbability","datum_1","yKey_1","xKey_1","params_1","color_1","highProbability","datum_2","yKey_2","xKey_2","params_2","IncomePerPeriodTooltip","incomePerPeriod","perPayday","count","useHasMeritPairs","usePayments","dateRanges","firstScenario","payPeriods","payments","payedOn","paychecks","aprToApr","basePay","ProjectedIncome","selectedYear","setSelectedYear","hasMissingPairs","flexWrap","t25","t26","t27","t28","t29","t30","t31","t32","t33","t34","t35","t36","t37","t38","t39","t40","t41","t42","t43","t44","t45","t46","t47","t48","t49","t50","t51","curr_0","isFuture","milliseconds","useFutureMortgageEquity","mortgages","localDate","januaryFirstSelectedYear","startDate","endDate","useFutureRetirementContributions","retirementContribution","remainingRegularPayments","remaining","perPaycheck","useFutureSavings","getThresholdTaxRemaining","taxRate","threshold","scenario","currentPaymentIdx","cumulative","useFutureSocialSecurity","config","useThresholdTax","useFutureMedicareTax","taxes","totalTaxable","taxableAmountOverThreshold","firstOccurrence","lastPaycheck","useFutureTotals","excludeHomeEquity","bonusTakeHomeFactor","savings","homeEquity","retirement","totals","futureEvents","rawClusters","numValues","FutureEvents","onChange","medicare","socialSecurity","ThresholdTaxCard","thresholdTax","equals","ClusterCard","useFuturesWealth","totalsPlusOne","useTimeSeriesWealth","localDateTime","earliest","futuresWealth","Array","futureBenchmarkIdx","some","accountWealth","futureWealth","graphDate","benchmarkWealth","yoyCash","yoyPct","benchmarkWealth_0","dataYear","titleYear","offsetIdx","columnConfig","systemYear","WealthTable","e","ProjectedWealth","setYear","setProjectedWealth","configName","ConfigEntry","isPercent","isNan","Number","isNaN","onchange","Config","ScenarioExplorer","scenarioIndex","setScenarioIndex","scenarioData","top","bottom","right","left","overflow","t52","t53","t54","t55","t56","t57","t58","i_0","toReversed","t59","t60","t61","t62","t63","t64","t65","t66","t67","t68","t69","t70","companyBonusFactor","t71","t72","t73","t74","lastThreeMeritBonusFactor","t75","lastThreeMeritBonuses","t76","i_2","t77","t78","t79","t80","t81","retirementBonusPct","t82","t83","t84","t85","i_1","InvalidDataDialog","message","downloadJson","filename","storeData","link","document","createElement","download","blob","Blob","href","window","URL","createObjectURL","click","useExport","selectFile","contentType","Promise","multiple","accept","files","from","useImport","resolve","reject","then","reader","FileReader","readAsDataURL","file","onload","readerEvent","atob","split","useStoreDataError","hadError","jsonInvalidData","validated","parseError","resetError","removeItem","System","onExport","onImport","BUILD_DATE","catch","ConfigModal","tab","setTab","App","navigate","useNavigate","location","useLocation","pathname","currentPath","to","Link","rootRoute","createRootRoute","component","indexRoute","createRoute","getParentRoute","beforeLoad","redirect","netWealthRoute","projectedIncomeRoute","projectedWealthRoute","routeTree","addChildren","router","createRouter","defaultPreload","basepath","prototype","toValid","invalidReason","groupBySingle","getMeritPairs","meritBonusPctByYear","unweightedPairs","meritBonusPctPair","groupsOfPairs","getMeritSequence","meritPairs","mostRecentPay","mostRecentPayYear","yearsToGenerate","meritSequence","merit","getScenarioSize","companyBonusPcts","companyBonusPctWeights","maxScenarioSize","currentYear","workers","Worker","name","onmessage","range","loadAllScenarios","first","oldestYear","postMessage","workerIdx","priorProjectedIncome","ModuleRegistry","registerModules","AllCommunityModule","darkTheme","createTheme","palette","mode","ReactDOM","createRoot","getElementById","render","stackTrace","AdapterLuxon"],"mappings":"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"}