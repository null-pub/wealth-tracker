var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,"name",{value,configurable:!0});import{j as jsxs,b as jsx,F as Fragment}from"./@emotion-Bs6QCf7O.js";import"./ag-grid-community-Bu5Vi0Ri.js";import{D as Dialog,B as Button,a as DialogTitle,S as Stack,T as TextField,M as MenuItem,b as DialogContent,c as DialogActions,P as Paper,d as Tooltip,e as default_1,G as Grid,A as Alert,f as DatePicker,I as InputAdornment,g as Stack$1,h as Box,i as Tab,j as Tabs,k as Typography,l as Divider,m as default_1$1,n as TableRow,o as TableCell,p as default_1$2,q as TableBody,r as Table,s as Box$1,t as default_1$3,u as Grid$1,L as LinearProgress,v as DialogContentText,w as TableHead,x as createTheme,y as LocalizationProvider,z as AdapterLuxon,C as CssBaseline,E as ThemeProvider}from"./@mui-rvTfm4G1.js";import{S as Store,u as useStore}from"./@tanstack-CrH6LG3c.js";import{r as reactExports,a as React}from"./react-B1yKWjgZ.js";import{c as create}from"./mutative-SUdGWNRE.js";import{z}from"./zod-f9fbzKyR.js";import{D as DateTime}from"./luxon-BOQzYXYm.js";import{A as AgGridReact}from"./ag-grid-react-BZBlC_rI.js";import{v as v4}from"./uuid-DmDH2-Ii.js";import{A as AgChartsReact}from"./ag-charts-react-4b2cucqC.js";import{d as differenceInBusinessDays}from"./date-fns-VlS8-NLi.js";import{c as client}from"./react-dom-A_5VENys.js";import{E as ErrorBoundary}from"./react-error-boundary-B9Apl3jN.js";import"./hoist-non-react-statics-BI0zVOZ1.js";import"./react-is-BurAzYM9.js";import"./@babel-D2qBTQV_.js";import"./stylis-BvCTCaD4.js";import"./clsx-DvC3wpxN.js";import"./prop-types-CkJzlR31.js";import"./react-transition-group-miU5UcGu.js";import"./dom-helpers-Hfa3ly4k.js";import"./@popperjs-4P2G51Yq.js";import"./use-sync-external-store-DV1g71N1.js";import"./ag-charts-community-DCDJerFf.js";import"./scheduler-Dnx1gCjA.js";__name(function(){const relList=document.createElement("link").relList;if(relList&&relList.supports&&relList.supports("modulepreload"))return;for(const link of document.querySelectorAll('link[rel="modulepreload"]'))processPreload(link);new MutationObserver(mutations=>{for(const mutation of mutations)if(mutation.type==="childList")for(const node of mutation.addedNodes)node.tagName==="LINK"&&node.rel==="modulepreload"&&processPreload(node)}).observe(document,{childList:!0,subtree:!0});function getFetchOpts(link){const fetchOpts={};return link.integrity&&(fetchOpts.integrity=link.integrity),link.referrerPolicy&&(fetchOpts.referrerPolicy=link.referrerPolicy),link.crossOrigin==="use-credentials"?fetchOpts.credentials="include":link.crossOrigin==="anonymous"?fetchOpts.credentials="omit":fetchOpts.credentials="same-origin",fetchOpts}__name(getFetchOpts,"getFetchOpts");function processPreload(link){if(link.ep)return;link.ep=!0;const fetchOpts=getFetchOpts(link);fetch(link.href,fetchOpts)}__name(processPreload,"processPreload")},"polyfill")();const sortByDate=__name((select,direction)=>(a,b)=>direction==="asc"?select(a).toMillis()-select(b).toMillis():select(b).toMillis()-select(a).toMillis(),"sortByDate"),accountDataValidator=z.object({date:z.string(),value:z.number(),id:z.string()}),accountValidator=z.object({type:z.literal("account"),data:z.array(accountDataValidator)}),loanValidator=z.object({principal:z.number(),ratePct:z.number(),paymentsPerYear:z.number(),payment:z.number(),firstPaymentDate:z.string(),ownershipPct:z.number()}),mortgageValidator=z.object({type:z.literal("mortgage"),loan:loanValidator.optional(),data:z.array(accountDataValidator)}),wealth=z.record(z.union([accountValidator,mortgageValidator])),projectedIncome=z.object({timeSeries:z.object({paycheck:z.array(accountDataValidator),meritIncreasePct:z.array(accountDataValidator),equityPct:z.array(accountDataValidator),meritBonusPct:z.array(accountDataValidator),meritBonus:z.array(accountDataValidator),companyBonusPct:z.array(accountDataValidator),companyBonus:z.array(accountDataValidator),retirementBonus:z.array(accountDataValidator)})}),projectedWealth=z.object({socialSecurityLimit:z.number(),socialSecurityTaxRate:z.number(),medicareSupplementalTaxThreshold:z.number(),medicareSupplementalTaxRate:z.number(),savingsPerMonth:z.number(),retirementContributionPaycheck:z.number()}),getDefaultStore=__name(()=>({projectedIncome:{timeSeries:{paycheck:[],meritBonusPct:[],companyBonusPct:[{date:"2020-06-15T00:00:00.000-07:00",value:.182,id:"a52883a7-008b-4b5d-83f7-48bb72a90f27"},{date:"2021-06-15T00:00:00.000-07:00",value:.254,id:"ec5a9913-d2ea-45cf-bbe4-4a28bc3a02eb"},{date:"2022-06-15T00:00:00.000-07:00",value:.272,id:"45f44fc7-544a-4652-87fa-49d70eaa412d"},{date:"2023-06-15T00:00:00.000-07:00",value:.168,id:"97af5146-6a4d-466d-8b9e-96552fc70639"}],meritBonus:[],companyBonus:[],retirementBonus:[],equityPct:[],meritIncreasePct:[]}},wealth:{},projectedWealth:{medicareSupplementalTaxThreshold:2e5,socialSecurityLimit:168600,socialSecurityTaxRate:.062,medicareSupplementalTaxRate:.009,savingsPerMonth:0,retirementContributionPaycheck:0}}),"getDefaultStore"),storeValidator=z.object({wealth,projectedIncome,projectedWealth}),createStore=__name((validator2,defaultValue2)=>{const key="store",invalidData="store-invalid",localData=localStorage.getItem(key),data=localData?JSON.parse(localData):defaultValue2,parse=validator2.safeParse(data);parse.success||(console.log("zod error",parse.error),console.log("original",data),localStorage.setItem(invalidData,JSON.stringify(data)),localStorage.setItem(key,JSON.stringify(defaultValue2)));const store2=new Store(data);return store2.subscribe(()=>{const current=localStorage.getItem(key);current&&localStorage.setItem(`${key}-previous`,current),localStorage.setItem(key,JSON.stringify(store2.state))}),store2},"createStore"),store=createStore(storeValidator,getDefaultStore()),AddAccountEntry=__name((accountName,date,amount)=>{store.setState(prev=>create(prev,next=>{next.wealth[accountName].data.push({date:date.startOf("day").toString(),value:amount,id:v4()}),next.wealth[accountName].data.sort(sortByDate(x=>DateTime.fromISO(x.date),"asc"))}))},"AddAccountEntry"),addProjectedIncome=__name((date,timeSeries,value)=>{store.setState(prev=>create(prev,next=>{next.projectedIncome.timeSeries[timeSeries]=next.projectedIncome.timeSeries[timeSeries].concat({date:date.startOf("day").toString(),value,id:v4()}).sort(sortByDate(x=>DateTime.fromISO(x.date),"asc"))}))},"addProjectedIncome"),removeAccount=__name(accountName=>store.setState(prev=>create(prev,next=>{delete next.wealth[accountName]})),"removeAccount"),removeAccountEntry=__name((accountName,id)=>store.setState(prev=>create(prev,next=>{const idxToRemove=next.wealth[accountName].data.findIndex(x=>x.id===id);return next.wealth[accountName].data.splice(idxToRemove,1),next})),"removeAccountEntry"),removeProjectedIncome=__name((accountName,id)=>{store.setState(prev=>create(prev,next=>{const idxToRemove=next.projectedIncome.timeSeries[accountName].findIndex(x=>x.id===id);next.projectedIncome.timeSeries[accountName].splice(idxToRemove,1)}))},"removeProjectedIncome"),resetStore=__name(()=>store.setState(()=>getDefaultStore()),"resetStore"),setLoan=__name((accountName,loan)=>store.setState(prev=>create(prev,next=>{next.wealth[accountName].type==="mortgage"&&(next.wealth[accountName].loan=loan)})),"setLoan"),updateAccountDate=__name((accountName,id,date)=>{store.setState(prev=>create(prev,next2=>{const account=next2.wealth[accountName],idx=account==null?void 0:account.data.findIndex(x=>x.id===id);idx>=0&&(account.data[idx].date=date.toISO())}))},"updateAccountDate"),updateAccountName=__name((currentAccountName,newAccountName)=>store.setState(prev=>create(prev,next=>{next.wealth[newAccountName]=next.wealth[currentAccountName],delete next.wealth[currentAccountName]})),"updateAccountName"),updateAccountValue=__name((accountName,id,value)=>{store.setState(prev=>create(prev,next2=>{const account=next2.wealth[accountName],idx=account==null?void 0:account.data.findIndex(x=>x.id===id);idx>=0&&(account.data[idx].value=value)}))},"updateAccountValue"),updateProjectedIncome=__name((timeSeries,id,value)=>{store.setState(prev=>create(prev,next2=>{const account=next2.projectedIncome.timeSeries[timeSeries],idx=account.findIndex(x=>x.id===id);account[idx].value=value}))},"updateProjectedIncome"),NewAccount=reactExports.forwardRef((props,ref)=>{const[open,setOpen]=reactExports.useState(!1),nameRef=reactExports.useRef(null),[error,setError]=reactExports.useState(!1),[accountType,setAccountType]=reactExports.useState();return jsxs(Fragment,{children:[jsx(Button,{ref,variant:"outlined",onClick:()=>{setOpen(!0),setError(!1),setAccountType(void 0)},sx:{marginLeft:"auto"},children:"add account"}),jsxs(Dialog,{open,onClose:()=>setOpen(!1),children:[jsx(DialogTitle,{children:"Add New Account"}),jsx(DialogContent,{children:jsxs(Stack,{spacing:2,margin:2,children:[jsxs(TextField,{select:!0,color:error?"error":"primary",onChange:value=>{setError(!1),setAccountType(value.target.value)},label:"Type",children:[jsx(MenuItem,{value:"mortgage",children:"Mortgage"}),jsx(MenuItem,{value:"account",children:"Generic Account"})]}),jsx(TextField,{placeholder:"Name",onChange:()=>{setError(!1)},error,inputRef:nameRef})]})}),jsx(DialogActions,{children:jsx(Button,{disabled:error,onClick:()=>{store.setState(prev=>create(prev,next=>{var _a;if(!((_a=nameRef.current)!=null&&_a.value)||!accountType||prev.wealth[nameRef.current.value]){setError(!0);return}next.wealth[nameRef.current.value]={type:accountType,data:[]},setOpen(!1)}))},children:"Add"})})]}),props==null?void 0:props.children]})}),AgGrid=__name(props=>{const{id,...rest}=props;return jsx("div",{id,className:"ag-theme-quartz-dark",style:{height:"100%"},children:jsx(AgGridReact,{...rest})})},"AgGrid"),getLocalDateTime=__name(()=>DateTime.local(),"getLocalDateTime"),shortDate="yyyy-MM-dd",monthDay="MMM dd",DeleteAccount=__name(props=>{const{accountName}=props;return jsx(Paper,{elevation:3,sx:{padding:2,width:"100%"},children:jsx(Button,{onClick:()=>{removeAccount(accountName)},color:"error",children:"Delete Account"})})},"DeleteAccount"),RenameAccount=__name(props=>{const{accountName}=props,[nextAccountName,setNextAccountName]=reactExports.useState(accountName);return jsx(Paper,{elevation:3,sx:{padding:2},children:jsxs(Stack,{spacing:1,children:[jsx(TextField,{label:"Account Name",value:nextAccountName,onChange:event=>setNextAccountName(event.target.value),placeholder:""}),jsx(Button,{disabled:!nextAccountName,onClick:()=>{updateAccountName(accountName,nextAccountName)},children:"Update Name"})]})})},"RenameAccount"),formatCashShort=new Intl.NumberFormat("en-US",{style:"currency",currency:"USD",notation:"compact",maximumFractionDigits:0}).format,formatCash=new Intl.NumberFormat("en-US",{style:"currency",currency:"USD",maximumFractionDigits:0}).format,Cash=__name(({value,fallback,disableTooltip,compact=!0,tooltip,placement})=>{const formatted=reactExports.useMemo(()=>value===void 0?fallback:compact?formatCashShort(value):formatCash(value),[compact,fallback,value]);return jsx(Tooltip,{placement,disableHoverListener:disableTooltip||!compact||!value,title:[tooltip,formatCash(value)].join(" "),children:jsx("span",{children:formatted})})},"Cash"),createAccountColumnConfig$2=__name(accountName=>[{headerName:"Date",sort:"desc",valueFormatter:x=>{var _a;return(_a=x.value)==null?void 0:_a.toFormat(shortDate)},valueGetter:x=>x.data&&DateTime.fromISO(x.data.date),cellEditor:"agDateCellEditor",editable:!0,valueSetter:x=>{const date=DateTime.fromJSDate(x.newValue);return date.isValid&&updateAccountDate(accountName,x.data.id,date),date.isValid}},{headerName:"Value",valueGetter:x=>{var _a;return(_a=x.data)==null?void 0:_a.value},valueSetter:x=>(updateAccountValue(accountName,x.data.id,+x.newValue),!0),cellRenderer:x=>jsx(Cash,{value:x.value,placement:"left"}),editable:!0,cellEditor:"agNumberCellEditor",type:"numericColumn"},{headerName:"Actions",cellRenderer:props=>jsx(Button,{onClick:()=>{props.data&&removeAccountEntry(accountName,props.data.id)},color:"error",fullWidth:!0,children:jsx(default_1,{})})}],"createAccountColumnConfig$2"),useMissingYears=__name(account=>reactExports.useMemo(()=>{var _a,_b;const years=Object.entries(Object.groupBy(account.data,x=>DateTime.fromISO(x.date).year)).map(([year,entries])=>[+year,!!(entries!=null&&entries.find(x=>{const date=DateTime.fromISO(x.date),janFirst=DateTime.fromObject({day:1,month:1,year:+year});return date.diff(janFirst,["days","hours"]).days==0}))]).sort(([a],[b])=>a-b),lookup=Object.fromEntries(years),missing=[];for(let i=((_a=years[0])==null?void 0:_a[0])??0;i<=((_b=years[years.length-1])==null?void 0:_b[0]);i++)lookup[i]||missing.push(i);return missing},[account.data]),"useMissingYears"),AccountTab=__name(props=>{const{accountName}=props,account=useStore(store,state=>state.wealth[accountName]),[date,setDate]=reactExports.useState(getLocalDateTime()),inputRef=reactExports.useRef(null),missingYears=useMissingYears(account),hasSameDate=reactExports.useMemo(()=>{var _a;return!!((_a=account==null?void 0:account.data)!=null&&_a.find(x=>date.hasSame(DateTime.fromISO(x.date),"day")))},[account==null?void 0:account.data,date]),onAddEntry=__name(()=>{var _a;inputRef.current&&AddAccountEntry(accountName,date,+((_a=inputRef.current)==null?void 0:_a.value))},"onAddEntry"),accountColumnConfig=reactExports.useMemo(()=>createAccountColumnConfig$2(accountName),[accountName]);return jsxs(Grid,{container:!0,height:"100%",width:"100%",padding:1,spacing:2,children:[jsx(Grid,{xl:3,lg:4,children:jsx(AgGrid,{reactiveCustomComponents:!0,rowData:(account==null?void 0:account.data)??[],columnDefs:accountColumnConfig,id:account+"-history",autoSizeStrategy:{type:"fitGridWidth"},stopEditingWhenCellsLoseFocus:!0})}),jsx(Grid,{xl:9,lg:8,children:jsx("div",{children:jsxs(Grid,{container:!0,spacing:2,children:[missingYears.length>0&&jsx(Grid,{xs:12,children:jsx(Paper,{elevation:3,children:jsxs(Alert,{severity:"warning",children:["Ensure an entry for Jan 1st for each year ",missingYears.join(", ")]})})}),jsx(Grid,{xl:2,lg:3,children:jsx(Paper,{elevation:3,sx:{padding:2},children:jsxs(Stack,{spacing:1,children:[jsx(DatePicker,{format:shortDate,sx:{color:"white"},label:"Date",defaultValue:date,onChange:value=>value&&setDate(value)}),jsx(TextField,{label:"amount",type:"number",defaultValue:0,inputRef,InputProps:{startAdornment:jsx(InputAdornment,{position:"start",children:"$"})},placeholder:"0"}),jsx(Button,{disabled:!date||hasSameDate,onClick:onAddEntry,children:"Add Entry"})]})})}),jsx(Grid,{xl:8,lg:0}),jsx(Grid,{xl:2,lg:4,children:jsxs(Stack,{spacing:2,children:[jsx(DeleteAccount,{accountName}),jsx(RenameAccount,{accountName},accountName)]})})]})})})]})},"AccountTab"),findNearestOnOrBefore=__name((date,data)=>data.find((x,idx,array)=>{if(idx==0&&DateTime.fromISO(x.date).startOf("day")>=date||idx<array.length-1&&DateTime.fromISO(x.date).startOf("day")<=date&&DateTime.fromISO(data[idx+1].date).startOf("day")>date||idx===array.length-1)return!0}),"findNearestOnOrBefore"),findNearestIdxOnOrBefore=__name((date,data,selector)=>data.findIndex((x,idx,array)=>{if(idx==0&&selector(x)>=date||idx<array.length-1&&selector(x)<=date&&selector(data[idx+1])>date||idx===array.length-1)return!0}),"findNearestIdxOnOrBefore"),getGraphDates=__name(accounts=>[...new Set(accounts.flatMap(x=>x.data.map(x2=>DateTime.fromISO(x2.date).startOf("day").toISO())))].map(x=>DateTime.fromISO(x)).sort((a,b)=>a.toMillis()-b.toMillis()),"getGraphDates"),calcLoanBalance=__name((date,loan)=>{const{firstPaymentDate,paymentsPerYear,principal,ratePct:rate,payment:monthlyPayment}=loan,annualizedRate=rate/paymentsPerYear,periods=date.diff(DateTime.fromISO(firstPaymentDate),"months").months,totalRate=(1+annualizedRate)**periods;return principal*totalRate-monthlyPayment/annualizedRate*(totalRate-1)},"calcLoanBalance"),calcEquity=__name((ownershipPct,houseValue,loanBalance,principal)=>houseValue?houseValue*ownershipPct-loanBalance:principal-loanBalance,"calcEquity"),AddEntry=__name(props=>{const{accountName}=props,ref=reactExports.useRef({date:getLocalDateTime(),value:0}),onAddEntry=__name(()=>{const{date,value}=ref.current;!date||!value||AddAccountEntry(accountName,date,value)},"onAddEntry");return jsx(Paper,{elevation:3,sx:{padding:2},children:jsxs(Stack$1,{spacing:1,children:[jsx(DatePicker,{defaultValue:getLocalDateTime(),onChange:date=>{date&&(ref.current.date=date)}}),jsx(TextField,{label:"Home value",type:"numeric",onChange:event=>{ref.current.value=+event.target.value}}),jsx(Button,{onClick:onAddEntry,children:"Add Home Value"})]})})},"AddEntry");function groupBy(array,selector){return array.reduce((acc,curr)=>{const key=selector(curr);return acc[key]??(acc[key]=[]),acc[key].push(curr),acc},{})}__name(groupBy,"groupBy");const convertPct=__name(value=>value>1?value/100:value,"convertPct"),validator=z.object({principal:z.number().min(0),ratePct:z.number().min(0),paymentsPerYear:z.number().min(0),payment:z.number().min(0),firstPaymentDate:z.string().datetime({offset:!0}),ownershipPct:z.number().min(0)}),AddLoan=__name(props=>{var _a;const{accountName}=props,loan=useStore(store,x=>{const account=x.wealth[accountName];if("loan"in account)return account.loan}),ref=reactExports.useRef(loan??{}),[error,setError]=reactExports.useState({});return jsx(Paper,{elevation:3,sx:{padding:2},children:jsxs(Stack,{spacing:1,children:[jsx(DatePicker,{defaultValue:(_a=ref.current)!=null&&_a.firstPaymentDate?DateTime.fromISO(ref.current.firstPaymentDate):null,label:"First Payment",slotProps:{textField:{error:!!error.firstPaymentDate}},onChange:value=>{value&&(ref.current.firstPaymentDate=value.startOf("day").toISO())}}),jsx(TextField,{error:!!error.principal,defaultValue:loan==null?void 0:loan.principal,onChange:event=>{ref.current.principal=+event.target.value},variant:"outlined",label:"Principal",type:"number"}),jsx(TextField,{error:!!error.ratePct,defaultValue:loan==null?void 0:loan.ratePct,onChange:event=>{ref.current.ratePct=convertPct(+event.target.value)},variant:"outlined",label:"Rate",type:"number"}),jsx(TextField,{error:!!error.paymentsPerYear,defaultValue:loan==null?void 0:loan.paymentsPerYear,onChange:event=>{ref.current.paymentsPerYear=+event.target.value},variant:"outlined",label:"Payments Per Year",type:"number"}),jsx(TextField,{defaultValue:loan==null?void 0:loan.payment,error:!!error.payment,onChange:event=>{ref.current.payment=+event.target.value},variant:"outlined",label:"Payment",type:"number"}),jsx(TextField,{defaultValue:loan==null?void 0:loan.ownershipPct,error:!!error.ownershipPct,onChange:event=>{ref.current.ownershipPct=convertPct(+event.target.value)},variant:"outlined",label:"Ownership (%)",type:"number"}),jsx(Button,{onClick:()=>{const parsed=validator.safeParse(ref.current);if(parsed.success)setError({}),setLoan(accountName,parsed.data);else{const issues=groupBy(parsed.error.issues,x=>x.path.join(""));setError(issues)}},children:"Set Loan"})]})})},"AddLoan"),createAccountColumnConfig$1=__name(accountName=>[{headerName:"Date",sort:"desc",valueFormatter:x=>{var _a;return(_a=x.value)==null?void 0:_a.toFormat(shortDate)},valueGetter:x=>x.data&&DateTime.fromISO(x.data.date)},{headerName:"Home Value",cellRenderer:x=>jsx(Cash,{value:x.value,placement:"left"}),valueGetter:x=>{var _a;return(_a=x.data)==null?void 0:_a.value},type:"numericColumn"},{headerName:"Actions",cellRenderer:props=>jsx(Button,{onClick:()=>{var _a;props.data&&removeAccountEntry(accountName,(_a=props.data)==null?void 0:_a.id)},color:"error",fullWidth:!0,children:jsx(default_1,{})})}],"createAccountColumnConfig$1"),mortgageColumnConfig=[{headerName:"Date",sort:"desc",valueFormatter:x=>{var _a;return(_a=x.value)==null?void 0:_a.toFormat(shortDate)},valueGetter:x=>{var _a;return(_a=x.data)==null?void 0:_a.date}},{headerName:"Loan Balance",valueGetter:x=>{var _a;return(_a=x.data)==null?void 0:_a.balance.toFixed(2)},cellRenderer:x=>jsx(Cash,{value:x.value,placement:"left"}),type:"numericColumn"},{headerName:"Equity",valueGetter:x=>{var _a;return(_a=x.data)==null?void 0:_a.equity.toFixed(2)},cellRenderer:x=>jsx(Cash,{value:x.value,placement:"left"}),type:"numericColumn"}],MortgageTab=__name(props=>{const{accountName}=props,account=useStore(store,state=>state.wealth[accountName]),allAccounts=useStore(store,x=>x.wealth),accountColumnConfig=reactExports.useMemo(()=>createAccountColumnConfig$1(accountName),[accountName]),mortgageData=reactExports.useMemo(()=>account!=null&&account.loan?getGraphDates(Object.values(allAccounts)).map(date=>{var _a;const loanBalance=calcLoanBalance(date,account.loan);return{date,balance:loanBalance,equity:calcEquity(account.loan.ownershipPct,(_a=findNearestOnOrBefore(date,account.data))==null?void 0:_a.value,loanBalance,account.loan.principal)}}):[],[account,allAccounts]);return jsxs(Grid,{container:!0,height:"100%",width:"100%",padding:1,spacing:2,children:[jsx(Grid,{lg:3,children:jsx(AgGrid,{reactiveCustomComponents:!0,rowData:(account==null?void 0:account.data)??[],columnDefs:accountColumnConfig,id:account+"-history"})}),jsx(Grid,{lg:3,children:jsx(AgGrid,{rowData:mortgageData,columnDefs:mortgageColumnConfig,id:account+"-history",autoSizeStrategy:{type:"fitGridWidth"}})}),jsx(Grid,{lg:6,children:jsx("div",{children:jsxs(Grid,{container:!0,spacing:2,children:[jsx(Grid,{xl:3,children:jsx(AddLoan,{accountName})}),jsx(Grid,{xl:3,children:jsx(AddEntry,{accountName})}),jsx(Grid,{xl:0}),jsx(Grid,{xl:3,children:jsxs(Stack$1,{spacing:2,children:[jsx(DeleteAccount,{accountName}),jsx(RenameAccount,{accountName},accountName)]})})]})})})]})},"MortgageTab"),AccountTabs=__name(()=>{var _a,_b,_c;const accounts=useStore(store,x=>x.wealth),firstAccount=(_a=Object.keys(accounts))==null?void 0:_a[0],[account,setAccount]=reactExports.useState(firstAccount);return reactExports.useEffect(()=>{var _a2;accounts[account]||setAccount(((_a2=Object.keys(accounts))==null?void 0:_a2[0])??"")},[account,accounts]),jsxs(Box,{display:"flex",flexDirection:"column",width:"100%",height:"100%",children:[jsxs(Box,{display:"flex",flex:"0 1 auto",children:[Object.keys(accounts).length>0&&jsx(Tabs,{value:account,onChange:(_,value)=>{setAccount(value)},children:Object.keys(accounts).map(account2=>jsx(Tab,{value:account2,label:account2},account2))}),jsx(Tab,{component:NewAccount})]}),jsxs(Box,{flex:"1 1 auto",children:[((_b=accounts[account])==null?void 0:_b.type)==="account"&&jsx(AccountTab,{accountName:account}),((_c=accounts[account])==null?void 0:_c.type)==="mortgage"&&jsx(MortgageTab,{accountName:account})]})]})},"AccountTabs"),getMortgageValue=__name((date,mortgage)=>{if(!mortgage.loan)return 0;const entry=findNearestOnOrBefore(date,mortgage.data);if(entry!=null&&entry.date&&mortgage.data[0]===entry&&DateTime.fromISO(entry.date).startOf("day")>date)return 0;const{ownershipPct,principal}=mortgage.loan,balance=calcLoanBalance(date,mortgage.loan);return calcEquity(ownershipPct,entry==null?void 0:entry.value,balance,principal)},"getMortgageValue"),getAccountValue=__name((date,account)=>{const entry=findNearestOnOrBefore(date,account.data);return entry!=null&&entry.date&&account.data[0]===entry&&DateTime.fromISO(entry.date).startOf("day")>date?0:entry==null?void 0:entry.value},"getAccountValue"),getGraphValue=__name((date,account)=>{switch(account.type){case"account":return getAccountValue(date,account);case"mortgage":return getMortgageValue(date,account)}},"getGraphValue"),useGraphData=__name(()=>{const wealth2=useStore(store,x=>x.wealth);return reactExports.useMemo(()=>{const dates=getGraphDates(Object.values(wealth2)),accounts=Object.entries(wealth2),graphData=dates.map(date=>accounts.reduce((acc,[accountName,account])=>{const value=getGraphValue(date,account);return value?(acc[accountName]=value,acc.total=acc.total+value):acc[accountName]=null,acc.date=date.toJSDate(),acc},{total:0}));graphData.forEach((x,idx,arr)=>{idx<arr.length-1&&Object.keys(x).forEach(key=>{x[key]===null&&arr[idx+1][key]!==null&&(x[key]=0)})});const firstNonZero=graphData.findIndex(x=>x.total>0);return graphData.slice(firstNonZero)},[wealth2])},"useGraphData"),WealthChart$1=__name(()=>{const wealth2=useStore(store,x=>x.wealth),data=useGraphData(),series=reactExports.useMemo(()=>[...Object.keys(wealth2).map(x=>({stacked:!0,type:"area",xKey:"date",yKey:x,yName:x,tooltip:{renderer:({datum,yKey,xKey})=>({content:`${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCashShort(datum[yKey])}`})}})),{type:"line",xKey:"date",yKey:"total",yName:"Total",tooltip:{renderer:({datum,yKey,xKey})=>({content:`${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCashShort(datum[yKey])}`})}}],[wealth2]),options=reactExports.useMemo(()=>{var _a;return{theme:"ag-default-dark",title:{text:`Total Wealth ${formatCashShort(((_a=data[data.length-1])==null?void 0:_a.total)??0)}`},data,axes:[{type:"time",position:"bottom",label:{format:"%Y"}},{type:"number",position:"left"}],series}},[data,series]);return jsx(AgChartsReact,{options})},"WealthChart$1"),NetWealth=__name(()=>jsxs(Grid,{container:!0,height:"100%",width:"100%",spacing:1,children:[jsx(Grid,{xs:12,height:"50%",children:jsx(WealthChart$1,{})}),jsx(Grid,{xs:12,height:"50%",children:jsx(AccountTabs,{})})]}),"NetWealth"),useDates=__name(year=>reactExports.useMemo(()=>({meritIncrease:DateTime.fromObject({month:4,day:1,year}),meritBonus:DateTime.fromObject({month:4,day:15,year}),companyBonus:DateTime.fromObject({month:6,day:15,year}),retirementBonus:DateTime.fromObject({month:7,day:15,year})}),[year]),"useDates"),useDateRanges=__name(year=>reactExports.useMemo(()=>({base:{start:DateTime.fromObject({month:1,day:1,year}),end:DateTime.fromObject({month:12,day:31,year}).endOf("day")},meritBonus:{start:DateTime.fromObject({month:1,day:1,year:year-1}),end:DateTime.fromObject({month:12,day:31,year:year-1}).endOf("day")},companyBonus:{start:DateTime.fromObject({day:1,month:4,year:year-1}),end:DateTime.fromObject({day:31,month:3,year}).endOf("day")},retirementBonus:{start:DateTime.fromObject({day:1,month:7,year:year-1}),end:DateTime.fromObject({day:30,month:6,year}).endOf("day")}}),[year]),"useDateRanges");function findSameYear(date,data){const year=typeof date=="number"?date:date.year;return data.find(x=>DateTime.fromISO(x.date).year===year)}__name(findSameYear,"findSameYear");const minMaxAvg=__name(values=>values.length===0?{min:0,max:0,avg:0}:values.reduce((acc,curr,index,arr)=>{const{min,max,avg}=acc;return{min:Math.min(curr,min),max:Math.max(curr,max),avg:index===arr.length-1?(avg+curr)/arr.length:avg+curr}},{min:1/0,max:0,avg:0}),"minMaxAvg"),outcomeFromSingle=__name(value=>({min:value,max:value,avg:value,actual:value}),"outcomeFromSingle"),actualizedOutcome=__name(outcome=>outcome.actual?outcomeFromSingle(outcome.actual):outcome,"actualizedOutcome"),scaleOutcome=__name((outcome,value)=>({min:outcome.min*value,max:outcome.max*value,avg:outcome.avg*value,actual:outcome.actual?outcome.actual*value:void 0}),"scaleOutcome"),AddOutcome=__name((...outcomes)=>{const everyActualDefined=outcomes.every(x=>x.actual!=null);return outcomes.reduce((acc,curr)=>({min:acc.min+curr.min,avg:acc.avg+curr.avg,max:acc.max+curr.max,actual:everyActualDefined?(acc.actual??0)+(curr.actual??0):void 0}),{min:0,max:0,avg:0,actual:void 0})},"AddOutcome"),aPayday=DateTime.fromObject({month:12,day:1,year:2023});function DateRangesOverlap(a,b){return a.start<=b.end&&b.start<=a.end}__name(DateRangesOverlap,"DateRangesOverlap");const getPayPeriods=__name((anyPayday,start,end)=>{const diff=anyPayday.diff(start,["weeks","days"]).days,startPayDay=start.plus({day:diff}),numPayDays=end.diff(start,["weeks","days"]).weeks/2,periods=[];for(let i=1;i<=numPayDays;i++)periods.push({start:startPayDay.plus({weeks:i*2-3,day:3}),end:startPayDay.plus({weeks:i*2-1}).endOf("day"),payedOn:startPayDay.plus({weeks:i*2})});return periods},"getPayPeriods"),useMostFrequentValue=__name(data=>reactExports.useMemo(()=>{var _a;return(_a=Object.entries(Object.groupBy(data.map(x=>x.value),x=>x)).map(([key,values])=>[+key,(values==null?void 0:values.length)??0]).sort(([,a],[,b])=>b-a)[0])==null?void 0:_a[0]},[data]),"useMostFrequentValue"),valueByDateRange=__name(account=>account.toSorted(sortByDate(x=>DateTime.fromISO(x.date),"asc")).map((x,index,array)=>{const next=array[index+1];return{start:DateTime.fromISO(x.date),end:(next!=null&&next.date?DateTime.fromISO(next==null?void 0:next.date).startOf("day"):DateTime.fromISO(x.date).plus({years:1})).minus({days:1}).endOf("day"),value:x.value}}),"valueByDateRange"),systemYear=getLocalDateTime().year,defaultValue={start:DateTime.fromObject({month:1,day:1,year:systemYear}),end:DateTime.fromObject({month:12,day:31,year:systemYear}).endOf("day"),value:0},useProjectedPay=__name(()=>{const timeSeries=useStore(store,x=>x.projectedIncome.timeSeries),baseIncome=timeSeries.paycheck,meritPct=useMostFrequentValue(timeSeries.meritIncreasePct);return reactExports.useMemo(()=>{var _a,_b,_c,_d;const payPerPeriod=valueByDateRange(baseIncome),mostRecentPay=payPerPeriod[payPerPeriod.length-1]??defaultValue;for(let i=0;i<2;i++){const{start,end,value}=payPerPeriod[0]??mostRecentPay,startDate=start.plus({years:-1}).startOf("day"),equity=((_a=findSameYear(start,timeSeries.equityPct))==null?void 0:_a.value)??0,multiplier=1/(1+(((_b=findSameYear(start,timeSeries.meritIncreasePct))==null?void 0:_b.value)??meritPct??0)+equity);payPerPeriod.unshift({start:startDate,end:end.plus({years:-1}).endOf("day"),value:Math.round(value*multiplier)})}const startIdx=payPerPeriod.length;for(let i=0;i<11;i++){const{start,end,value}=payPerPeriod[startIdx+i-1]??mostRecentPay,startDate=start.plus({years:1}),equity=((_c=findSameYear(startDate,timeSeries.equityPct))==null?void 0:_c.value)??0,multiplier=1+(((_d=findSameYear(startDate,timeSeries.meritIncreasePct))==null?void 0:_d.value)??meritPct??0)+equity;payPerPeriod.push({start:startDate,end:end.plus({years:1}).endOf("day"),value:Math.round(value*multiplier)})}return payPerPeriod},[baseIncome,meritPct,timeSeries.equityPct,timeSeries.meritIncreasePct])},"useProjectedPay"),useBaseIncome=__name((startDate,endDate)=>{const pay=useProjectedPay();return reactExports.useMemo(()=>{const payPeriods=getPayPeriods(aPayday,startDate,endDate).map(payPeriod=>{const sum=pay.filter(x=>DateRangesOverlap(x,payPeriod)).map(x=>{const start=DateTime.max(x.start,payPeriod.start),end=DateTime.min(x.end,payPeriod.end),businessDays=differenceInBusinessDays(end.plus({milliseconds:1}).toJSDate(),start.toJSDate()),value=x.value/10*Math.max(1,businessDays);return{start,end,value}}).reduce((acc,curr)=>acc+curr.value,0);return{...payPeriod,value:sum}}),totalIncome=payPeriods.reduce((acc,curr)=>acc+curr.value,0),incomePerPeriod=payPeriods.reduceRight((acc,curr)=>{var _a,_b;return((_b=(_a=acc[0])==null?void 0:_a[0])==null?void 0:_b.value)===curr.value?acc[0].unshift(curr):acc.unshift([curr]),acc},[]).reduce((acc,curr)=>(acc.push({start:curr[0].payedOn,end:curr[curr.length-1].payedOn,value:curr.reduce((acc2,curr2)=>acc2+curr2.value,0),perPayday:curr[0].value,count:curr.length}),acc),[]);return{totalIncome,payPeriods,incomePerPeriod}},[startDate,endDate,pay])},"useBaseIncome"),useCompanyBonus=__name(year=>{const timeSeries=useStore(store,x=>x.projectedIncome.timeSeries),dateRanges=useDateRanges(year),{totalIncome}=useBaseIncome(dateRanges.companyBonus.start,dateRanges.companyBonus.end);return reactExports.useMemo(()=>{const mostRecentBonus=findSameYear(year,timeSeries.companyBonus),mostRecentPercent=findSameYear(year,timeSeries.companyBonusPct),meritFactor=timeSeries.meritBonusPct.filter(x=>DateTime.fromISO(x.date).year<=year).slice(-3).reduce((acc,curr)=>acc+curr.value,0),outcomes=minMaxAvg(timeSeries.companyBonusPct.map(x=>x.value)),cash=scaleOutcome(outcomes,meritFactor*totalIncome),projectedActual=mostRecentPercent!=null&&mostRecentPercent.value?(mostRecentPercent==null?void 0:mostRecentPercent.value)*meritFactor*totalIncome:void 0;return{percent:actualizedOutcome({...outcomes,actual:mostRecentPercent==null?void 0:mostRecentPercent.value}),cash:actualizedOutcome({...cash,actual:(mostRecentBonus==null?void 0:mostRecentBonus.value)??projectedActual})}},[totalIncome,timeSeries.companyBonus,timeSeries.companyBonusPct,timeSeries.meritBonusPct,year])},"useCompanyBonus"),useMeritBonus=__name(year=>{const timeSeries=useStore(store,x=>x.projectedIncome.timeSeries),ranges=useDateRanges(year),{totalIncome}=useBaseIncome(ranges.meritBonus.start,ranges.meritBonus.end),bonusAmount=reactExports.useMemo(()=>{var _a;return(_a=findSameYear(year,timeSeries.meritBonus))==null?void 0:_a.value},[timeSeries.meritBonus,year]),bonusPercent2=reactExports.useMemo(()=>{var _a;return(_a=findSameYear(year,timeSeries.meritBonusPct))==null?void 0:_a.value},[timeSeries.meritBonusPct,year]),frequentMeritBonusPercent=useMostFrequentValue(timeSeries.meritBonusPct);return reactExports.useMemo(()=>{const meritOutcome=minMaxAvg(timeSeries.meritBonusPct.filter(x=>DateTime.fromISO(x.date).year<=year).map(x=>x.value));return meritOutcome.avg=frequentMeritBonusPercent??0,{percent:actualizedOutcome({...meritOutcome,actual:bonusPercent2}),cash:actualizedOutcome({...scaleOutcome(meritOutcome,totalIncome),actual:bonusAmount??(bonusPercent2?totalIncome*bonusPercent2:void 0)})}},[bonusAmount,bonusPercent2,frequentMeritBonusPercent,timeSeries.meritBonusPct,totalIncome,year])},"useMeritBonus"),bonusPercent=.15,useRetirementBonus=__name(year=>{const actual=useStore(store,x=>{var _a;return(_a=findSameYear(year,x.projectedIncome.timeSeries.retirementBonus))==null?void 0:_a.value}),dateRanges=useDateRanges(year),{totalIncome}=useBaseIncome(dateRanges.retirementBonus.start,dateRanges.retirementBonus.end),meritBonus=useMeritBonus(year),juneBonus=useCompanyBonus(year);return reactExports.useMemo(()=>{const eligibleIncome=outcomeFromSingle(totalIncome),outcome=scaleOutcome(AddOutcome(eligibleIncome,actualizedOutcome(meritBonus.cash),actualizedOutcome(juneBonus.cash)),bonusPercent);return{cash:actualizedOutcome({...outcome,actual:actual??outcome.actual}),percent:{min:.15,max:.15,avg:.15,actual:.15}}},[actual,juneBonus.cash,meritBonus.cash,totalIncome])},"useRetirementBonus"),useTotalIncome=__name(year=>{const{base}=useDateRanges(year),baseIncome=useBaseIncome(base.start,base.end),meritBonus=useMeritBonus(year),juneBonus=useCompanyBonus(year),julyBonus=useRetirementBonus(year);return reactExports.useMemo(()=>{const taxableIncome=AddOutcome(outcomeFromSingle(baseIncome.totalIncome),actualizedOutcome(meritBonus.cash),actualizedOutcome(juneBonus.cash)),totalIncome=AddOutcome(taxableIncome,actualizedOutcome(julyBonus.cash));return{taxableIncome,totalIncome}},[baseIncome.totalIncome,julyBonus.cash,juneBonus.cash,meritBonus.cash])},"useTotalIncome"),Duration=__name(props=>{const{dateTime,children,variant="countdown",dateFormat=shortDate}=props,countDownStr=reactExports.useMemo(()=>{if(!dateTime)return"??";if(variant==="countdown"){const diff=dateTime==null?void 0:dateTime.diffNow(["months","days","hours"]),format=diff&&diff.days===0?"h'hr'":"d'd'";return diff==null?void 0:diff.toFormat(format)}return dateTime==null?void 0:dateTime.toFormat(dateFormat)},[dateFormat,dateTime,variant]),tooltipStr=reactExports.useMemo(()=>variant==="countdown"?dateTime==null?void 0:dateTime.toFormat(dateFormat):dateTime==null?void 0:dateTime.diffNow(["months","days","hours"]).toFormat("d 'days'"),[dateFormat,dateTime,variant]),countDownColor=reactExports.useMemo(()=>{if(!dateTime)return"white";const days=dateTime.diffNow("days").days;return days<30?"green":days<60?"yellow":"red"},[dateTime]);return dateTime&&dateTime>getLocalDateTime()?jsx(Tooltip,{title:tooltipStr,children:jsx(Box,{color:countDownColor,children:countDownStr})}):children},"Duration"),formatPercent=new Intl.NumberFormat("en-us",{style:"percent",maximumFractionDigits:1}).format,Percent=__name(({value})=>formatPercent(value),"Percent"),Value=__name(props=>{const{children,secondaryValue,tertiaryValue,title,className}=props;return jsxs(Box,{sx:{display:"flex",minWidth:106,height:64,padding:"0px 8px",flexDirection:"column",justifyContent:"center",alignItems:"flex-start",gap:.5,flexShrink:0},className,children:[jsxs(Box,{display:"flex",alignItems:"center",gap:.5,children:[jsx(Box,{fontSize:18,fontWeight:700,lineHeight:"20px",children:children||"?"}),!!(secondaryValue??tertiaryValue)&&jsx(Box,{alignSelf:"flex-end",fontSize:12,fontWeight:500,lineHeight:"16px",textTransform:"uppercase",color:"#888",children:secondaryValue??tertiaryValue})]}),jsx(Box,{fontSize:12,fontWeight:500,lineHeight:"16px",textTransform:"uppercase",children:title})]})},"Value"),BonusOutcome=__name(props=>{const{outcome,title,payDate}=props;return jsxs(Box,{sx:{border:"1px solid rgba(255,255,255,0.1)",borderRadius:2},children:[jsx(Typography,{sx:{paddingBottom:1,paddingLeft:2,paddingTop:1,paddingRight:2,width:"max-content"},variant:"h5",children:title}),jsx(Divider,{}),jsxs(Stack,{padding:1,direction:"row",spacing:.5,justifyContent:"center",children:[!outcome.cash.actual&&jsxs(Fragment,{children:[jsx(Value,{secondaryValue:jsx(Percent,{value:outcome.percent.min}),title:"min",children:jsx(Cash,{value:outcome.cash.min,fallback:0})}),jsx(Value,{secondaryValue:jsx(Percent,{value:outcome.percent.avg}),title:"avg",children:jsx(Cash,{value:outcome.cash.avg,fallback:0})}),jsx(Value,{secondaryValue:jsx(Percent,{value:outcome.percent.max}),title:"max",children:jsx(Cash,{value:outcome.cash.max,fallback:0})})]}),jsx(Value,{title:"Actual",tertiaryValue:outcome.percent.actual&&jsx(Percent,{value:outcome.percent.actual}),secondaryValue:outcome.cash.actual&&jsx(Cash,{value:outcome.cash.actual}),children:jsx(Duration,{dateTime:payDate,children:jsx(Cash,{value:outcome.cash.actual})})})]})]})},"BonusOutcome"),updateProjectedIncomeDate=__name((timeSeries,id,date)=>{store.setState(prev=>create(prev,next2=>{const account=next2.projectedIncome.timeSeries[timeSeries],idx=account.findIndex(x=>x.id===id);account[idx].date=date.toISO()}))},"updateProjectedIncomeDate"),createAccountColumnConfig=__name((accountName,variant)=>[{headerName:"Date",sort:"desc",valueFormatter:x=>{var _a;return(_a=x.value)==null?void 0:_a.toFormat(shortDate)},valueGetter:x=>x.data&&DateTime.fromISO(x.data.date),cellRenderer:x=>jsxs(Stack$1,{direction:"row",alignItems:"center",children:[x.valueFormatted," ",x.value&&x.value>DateTime.local()&&jsx(Tooltip,{title:"Future Event",children:jsx(default_1$1,{htmlColor:"yellow"})})]}),cellEditor:"agDateCellEditor",editable:!0,valueSetter:x=>{const date=DateTime.fromJSDate(x.newValue);return date.isValid&&updateProjectedIncomeDate(accountName,x.data.id,DateTime.fromJSDate(x.newValue)),date.isValid}},{headerName:"Value",valueGetter:x=>{var _a;return(_a=x.data)==null?void 0:_a.value},cellRenderer:x=>variant==="cash"?jsx(Cash,{compact:!1,value:x.value}):jsx(Percent,{value:x.value}),type:"numericColumn",editable:!0,cellEditor:"agNumberCellEditor",valueSetter:x=>(updateProjectedIncome(accountName,x.data.id,+x.newValue),!0)},{headerName:"Actions",cellRenderer:props=>jsx(Button,{onClick:()=>{var _a;props.data&&removeProjectedIncome(accountName,(_a=props.data)==null?void 0:_a.id)},color:"error",fullWidth:!0,children:jsx(default_1,{})})}],"createAccountColumnConfig"),DataEntry=__name(props=>{const{timeSeries,defaultDate,variant="number"}=props,account=useStore(store,state=>state.projectedIncome.timeSeries[timeSeries]),[date,setDate]=reactExports.useState(defaultDate),[amount,setAmount]=reactExports.useState(null),hasSameDate=reactExports.useMemo(()=>!!(account!=null&&account.find(x=>date.hasSame(DateTime.fromISO(x.date),"day"))),[account,date]),onAddEntry=__name(()=>{amount!=null&&(addProjectedIncome(date,timeSeries,variant==="percent"?amount/100:amount),setAmount(null))},"onAddEntry"),accountColumnConfig=reactExports.useMemo(()=>createAccountColumnConfig(timeSeries,variant),[timeSeries,variant]);return jsxs(Box,{display:"flex",flexDirection:"column",height:"100%",children:[jsxs(Stack,{spacing:2,flex:"0 1 auto",children:[jsx(DatePicker,{format:shortDate,sx:{color:"white"},label:"Date",value:date,onChange:value=>{console.log(value),value&&setDate(value)}}),jsx(TextField,{label:"amount",value:amount??"",type:"number",onChange:event=>event.target.value===""?setAmount(null):setAmount(+event.target.value),InputProps:{startAdornment:variant!=="number"&&jsx(InputAdornment,{position:"start",children:variant==="cash"?"$":"%"})}}),jsx(Button,{disabled:amount===null||!date||hasSameDate,onClick:onAddEntry,children:"Add Entry"})]}),jsx(Box,{sx:{paddingTop:2,flex:"1 1 auto"},children:jsx(AgGrid,{reactiveCustomComponents:!0,rowData:account??[],columnDefs:accountColumnConfig,id:account+"-history",autoSizeStrategy:{type:"fitGridWidth"},stopEditingWhenCellsLoseFocus:!0})})]})},"DataEntry"),Layout=__name(props=>{const{title,accountName,defaultDate,variant}=props;return jsx(Paper,{sx:{padding:2,height:"100%",width:450,flexShrink:0},children:jsxs(Box,{display:"flex",flexDirection:"column",height:"100%",children:[jsx(Box,{flex:"0 1 auto",marginBottom:2,children:jsxs(Typography,{sx:{marginBottom:2},variant:"h5",children:[title," ",variant==="cash"&&jsx(Tooltip,{title:jsxs(Fragment,{children:[jsx("span",{children:"Cash values are used in lieu of Percent values."}),jsx("br",{}),jsx("span",{children:"Cash values are considered actual payment values."})]}),children:jsx("span",{children:"($)"})}),variant==="percent"&&jsx(Tooltip,{title:"Percentage values are used for predictions.",children:jsx("span",{children:"(%)"})})]})}),jsx(Box,{flex:"1 1 auto",children:jsx(DataEntry,{variant,timeSeries:accountName,defaultDate})})]})})},"Layout"),Until=__name(props=>{const{dateTime,children}=props;return dateTime&&DateTime.local()<dateTime&&children},"Until"),usePaycheck=__name(date=>{const paychecks=useProjectedPay();return reactExports.useMemo(()=>{var _a;return((_a=paychecks.find(({start})=>start.year===date.year))==null?void 0:_a.value)??0},[date.year,paychecks])},"usePaycheck"),IncomePerPeriodTooltip=__name(props=>{const{incomePerPeriod,totalIncome}=props;return jsx(Table,{sx:{width:"max-content"},children:jsxs(TableBody,{children:[incomePerPeriod.map(({start,end,value,perPayday,count},index)=>jsxs(TableRow,{children:[jsx(TableCell,{children:jsx(Cash,{value,compact:!1})}),jsx(TableCell,{children:start.toFormat(shortDate)}),jsx(TableCell,{children:jsx(default_1$2,{})}),jsx(TableCell,{children:end.toFormat(shortDate)}),jsxs(TableCell,{children:[jsx(Cash,{value:perPayday,compact:!1})," x ",count]})]},index)),jsxs(TableRow,{children:[jsx(TableCell,{colSpan:4,children:"Total:"}),jsx(TableCell,{children:jsx(Cash,{value:totalIncome,compact:!1})})]})]})})},"IncomePerPeriodTooltip"),MeritOutcome=__name(props=>{const{title,payDate}=props,dateRanges=useDateRanges(payDate.year),income=useBaseIncome(dateRanges.base.start,dateRanges.base.end),projectedPay=useProjectedPay(),baseAprToApr=reactExports.useMemo(()=>{const pay=projectedPay.find(x=>x.start<=payDate&&payDate<=x.end);return((pay==null?void 0:pay.value)??0)*26},[payDate,projectedPay]),meritIncreases=useStore(store,x=>x.projectedIncome.timeSeries.meritIncreasePct),commonMerit=useMostFrequentValue(meritIncreases),meritPct=useStore(store,x=>{var _a;return((_a=findSameYear(payDate,x.projectedIncome.timeSeries.meritIncreasePct))==null?void 0:_a.value)??commonMerit}),equityPct=useStore(store,x=>payDate&&findSameYear(payDate,x.projectedIncome.timeSeries.equityPct)),totalAdjust=(meritPct??0)+((equityPct==null?void 0:equityPct.value)??0),paycheck=usePaycheck(payDate);return jsxs(Box,{sx:{border:"1px solid rgba(255,255,255,0.1)",borderRadius:2},children:[jsx(Typography,{sx:{paddingBottom:1,paddingLeft:2,paddingTop:1},variant:"h5",children:title}),jsx(Divider,{}),jsxs(Stack,{padding:1,direction:"row",spacing:.5,children:[jsx(Value,{title:"Paycheck",children:jsx(Cash,{value:paycheck,compact:!1})}),jsx(Tooltip,{componentsProps:{tooltip:{sx:{maxWidth:"none"}}},title:jsx(IncomePerPeriodTooltip,{incomePerPeriod:income.incomePerPeriod,totalIncome:income.totalIncome}),children:jsx("div",{children:jsx(Value,{title:"Base Pay",children:jsx(Cash,{disableTooltip:!0,value:income.totalIncome??0})})})}),jsx(Value,{title:"APR to APR",children:jsx(Cash,{value:baseAprToApr})}),jsx(Value,{title:"Actual",secondaryValue:jsx(Until,{dateTime:payDate,children:jsx(Percent,{value:totalAdjust})}),children:jsx(Duration,{dateTime:payDate,children:jsx(Percent,{value:totalAdjust})})})]})]})},"MeritOutcome"),Outcome=__name(props=>{const{outcome,title,payDate}=props;return jsxs(Box,{sx:{border:"1px solid rgba(255,255,255,0.1)",borderRadius:2},children:[jsx(Typography,{sx:{paddingBottom:1,paddingLeft:2,paddingTop:1},variant:"h5",children:title}),jsx(Divider,{}),jsxs(Stack,{padding:1,direction:"row",spacing:.5,children:[!outcome.actual&&jsxs(Fragment,{children:[jsx(Value,{title:"min",children:jsx(Cash,{value:outcome.min,fallback:0})}),jsx(Value,{title:"avg",children:jsx(Cash,{value:outcome.avg,fallback:0})}),jsx(Value,{title:"max",children:jsx(Cash,{value:outcome.max,fallback:0})})]}),payDate&&jsx(Value,{title:"Actual",secondaryValue:jsx(Until,{dateTime:payDate,children:jsx(Cash,{value:outcome.actual})}),children:jsx(Duration,{dateTime:payDate,children:jsx(Cash,{value:outcome.actual})})})]})]})},"Outcome"),ProjectedIncome=__name(()=>{const[selectedYear,setSelectedYear]=reactExports.useState(getLocalDateTime().year),oldestYear=useStore(store,x=>{var _a;const first=(_a=x.projectedIncome.timeSeries.paycheck[1])==null?void 0:_a.date;return(first?DateTime.fromISO(first):getLocalDateTime()).year}),dates=useDates(selectedYear),{totalIncome}=useTotalIncome(selectedYear),meritBonus=useMeritBonus(selectedYear),juneBonus=useCompanyBonus(selectedYear),julyBonus=useRetirementBonus(selectedYear);return jsxs(Box$1,{display:"flex",flexDirection:"column",height:"100%",gap:2,children:[jsx(Box$1,{flex:"0 1 auto",children:jsxs(Stack$1,{gap:2,direction:"row",overflow:"auto",children:[jsx(Outcome,{title:jsxs(Box$1,{display:"flex",alignItems:"center",gap:2,width:"100%",children:[jsx("span",{children:"Income"}),jsx(DatePicker,{sx:{width:90,marginLeft:"auto",marginRight:2},label:"year",views:["year"],minDate:getLocalDateTime().set({year:oldestYear}),maxDate:getLocalDateTime().plus({years:10}),defaultValue:getLocalDateTime(),slotProps:{textField:{variant:"standard",label:""}},onYearChange:year=>{setSelectedYear(year.year)}})]}),outcome:totalIncome,payDate:dates.companyBonus}),jsx(MeritOutcome,{title:"Merit Increase",payDate:dates.meritIncrease}),jsx(BonusOutcome,{title:"Merit Bonus",outcome:meritBonus,payDate:dates.meritBonus}),jsx(BonusOutcome,{title:"Company Bonus",outcome:juneBonus,payDate:dates.companyBonus}),jsx(BonusOutcome,{title:"Retirement Bonus",outcome:julyBonus,payDate:dates.retirementBonus})]})}),jsx(Box$1,{flex:"1 1 auto",children:jsx(Box$1,{overflow:"auto",width:"100%",height:"100%",children:jsxs(Box$1,{height:"100%",display:"flex",gap:2,flexWrap:"nowrap",flexShrink:0,children:[jsx(Layout,{accountName:"paycheck",variant:"cash",defaultDate:DateTime.fromObject({day:1,month:4,year:selectedYear}),title:"Income Per Paycheck"}),jsx(Layout,{title:"Merit Increase",accountName:"meritIncreasePct",variant:"percent",defaultDate:dates.meritIncrease}),jsx(Layout,{title:"Equity Increase",accountName:"equityPct",variant:"percent",defaultDate:dates.meritIncrease}),jsx(Layout,{title:"Merit Bonus",accountName:"meritBonusPct",variant:"percent",defaultDate:dates.meritBonus}),jsx(Layout,{title:"Merit Bonus",accountName:"meritBonus",variant:"cash",defaultDate:dates.meritBonus}),jsx(Layout,{title:"Company Bonus Factor",accountName:"companyBonusPct",defaultDate:dates.companyBonus,variant:"percent"}),jsx(Layout,{title:"Company Bonus",accountName:"companyBonus",defaultDate:dates.companyBonus,variant:"cash"}),jsx(Layout,{title:"Retirement Bonus",accountName:"retirementBonus",defaultDate:dates.retirementBonus,variant:"cash"})]})})})]})},"ProjectedIncome"),setProjectedWealth=__name((configName,value)=>{store.setState(prev=>create(prev,next=>{next.projectedWealth[configName]=value}))},"setProjectedWealth"),ConfigEntry=__name(props=>{const{configName,label,variant="cash"}=props,[error,setError]=reactExports.useState(!1),isPercent=variant==="percent",onchange=reactExports.useCallback(input=>{let value2=+input;const isNan=Number.isNaN(value2);setError(isNan),!isNan&&(isPercent&&(value2/=100),setProjectedWealth(configName,value2))},[configName,isPercent]),value=useStore(store,x=>x.projectedWealth[configName]),defaultValue2=isPercent?value*100:value;return jsx(TextField,{error,variant:"outlined",InputProps:{startAdornment:jsx(InputAdornment,{position:"start",children:isPercent?"%":"$"})},defaultValue:defaultValue2.toFixed(isPercent?2:0),type:"numeric",label,onChange:event=>{onchange(event.target.value)}})},"ConfigEntry"),Config=__name(()=>jsxs(Stack$1,{spacing:2,children:[jsx(Typography,{variant:"h5",children:"Configuration"}),jsx(ConfigEntry,{configName:"savingsPerMonth",label:"Monthly Saving Rate"}),jsx(ConfigEntry,{configName:"retirementContributionPaycheck",label:"Retirement Contribution Per Paycheck"}),jsxs(Stack$1,{direction:"row",spacing:2,width:"100%",sx:{"& > *":{flex:1}},children:[jsx(ConfigEntry,{configName:"socialSecurityLimit",label:"Social Security Tax Limit"}),jsx(ConfigEntry,{configName:"socialSecurityTaxRate",label:"Social Security Tax",variant:"percent"})]}),jsxs(Stack$1,{direction:"row",spacing:2,width:"100%",sx:{"& > *":{flex:1}},children:[jsx(ConfigEntry,{configName:"medicareSupplementalTaxThreshold",label:"Medicare Supplemental Threshold"}),jsx(ConfigEntry,{configName:"medicareSupplementalTaxRate",label:"Medicare Supplemental Tax",variant:"percent"})]})]}),"Config"),useFutureBonuses=__name(()=>{const local=DateTime.local(),year=local.year,dates=useDates(year),meritBonus=useMeritBonus(year),companyBonus=useCompanyBonus(year),retirementBonus=useRetirementBonus(year);return reactExports.useMemo(()=>[[dates.meritBonus,meritBonus.cash.actual??meritBonus.cash.avg],[dates.companyBonus,companyBonus.cash.actual??companyBonus.cash.avg],[dates.retirementBonus,retirementBonus.cash.actual??retirementBonus.cash.avg]].map(([payedOn,amount])=>local<payedOn?amount:0).reduce((acc,curr)=>acc+curr,0),[dates.meritBonus,dates.companyBonus,dates.retirementBonus,meritBonus.cash.actual,meritBonus.cash.avg,companyBonus.cash.actual,companyBonus.cash.avg,retirementBonus.cash.actual,retirementBonus.cash.avg,local])},"useFutureBonuses"),usePayments=__name(()=>{const year=DateTime.local().year,dateRanges=useDateRanges(year),dates=useDates(year),{payPeriods}=useBaseIncome(dateRanges.base.start,dateRanges.base.end),merit=useMeritBonus(year),companyBonus=useCompanyBonus(year);return reactExports.useMemo(()=>{const cumulativePay=payPeriods.map(x=>({...x,cumulative:0})),payBeforeMerit=findNearestIdxOnOrBefore(dates.meritBonus,cumulativePay,x=>x.payedOn);cumulativePay.splice(payBeforeMerit+1,0,{cumulative:0,value:merit.cash.actual??merit.cash.avg,start:dates.meritBonus,end:dates.meritBonus,payedOn:dates.meritBonus});const payBeforeCompanyBonus=findNearestIdxOnOrBefore(dates.companyBonus,cumulativePay,x=>x.payedOn);cumulativePay.splice(payBeforeCompanyBonus+1,0,{cumulative:0,value:companyBonus.cash.actual??companyBonus.cash.avg,start:dates.companyBonus,end:dates.companyBonus,payedOn:dates.companyBonus}),cumulativePay.forEach((x,i,arr)=>{x.cumulative=i>0?arr[i-1].cumulative+x.value:x.value});const previousPay=findNearestIdxOnOrBefore(DateTime.local(),payPeriods,x=>x.payedOn),remainingPayments=payPeriods.length-previousPay;return{payments:cumulativePay,nextPaymentIdx:previousPay+1,numRemaining:remainingPayments,totalBasePayments:payPeriods.length,totalPayments:cumulativePay.length}},[companyBonus.cash.actual,companyBonus.cash.avg,dates.companyBonus,dates.meritBonus,merit.cash.actual,merit.cash.avg,payPeriods])},"usePayments"),useFutureMedicareTax=__name(()=>{const{payments,nextPaymentIdx}=usePayments(),config=useStore(store,x=>x.projectedWealth);return reactExports.useMemo(()=>{var _a,_b,_c;const total=config.medicareSupplementalTaxRate*Math.min(0,config.medicareSupplementalTaxThreshold-(((_a=payments.at(-1))==null?void 0:_a.cumulative)??0)),firstOccurrence=(_b=payments.find(x=>x.cumulative>=config.medicareSupplementalTaxThreshold))==null?void 0:_b.payedOn,remaining=payments.slice(nextPaymentIdx).filter(x=>x.cumulative>=config.medicareSupplementalTaxThreshold).reduce((acc,curr)=>acc-Math.min(curr.value,curr.cumulative-config.medicareSupplementalTaxThreshold)*config.medicareSupplementalTaxRate,0),perPaycheck=total&&(((_c=payments.at(-1))==null?void 0:_c.value)??0)*config.medicareSupplementalTaxRate;return{total,remaining,perPaycheck,firstOccurrence}},[config.medicareSupplementalTaxRate,config.medicareSupplementalTaxThreshold,nextPaymentIdx,payments])},"useFutureMedicareTax"),useFutureRetirementContributions=__name(()=>{const{numRemaining}=usePayments(),retirementContribution=useStore(store,x=>x.projectedWealth.retirementContributionPaycheck);return reactExports.useMemo(()=>({remaining:numRemaining*retirementContribution,perPaycheck:retirementContribution}),[numRemaining,retirementContribution])},"useFutureRetirementContributions"),useFutureSavings=__name(()=>{const config=useStore(store,x=>x.projectedWealth);return reactExports.useMemo(()=>{const systemYear2=getLocalDateTime().year;return{remaining:config.savingsPerMonth*DateTime.fromObject({day:31,month:12,year:systemYear2}).endOf("day").diffNow("months").months,perMonth:config.savingsPerMonth}},[config.savingsPerMonth])},"useFutureSavings"),useFutureSocialSecurity=__name(()=>{const{payments,nextPaymentIdx}=usePayments(),config=useStore(store,x=>x.projectedWealth);return reactExports.useMemo(()=>{var _a,_b,_c;const total=config.socialSecurityTaxRate*Math.max(0,(((_a=payments.at(-1))==null?void 0:_a.cumulative)??0)-config.socialSecurityLimit),firstOccurrence=(_b=payments.find(x=>x.cumulative>=config.socialSecurityLimit))==null?void 0:_b.payedOn,remaining=payments.slice(nextPaymentIdx).filter(x=>x.cumulative>=config.socialSecurityLimit).reduce((acc,curr)=>acc+Math.min(curr.value,curr.cumulative-config.socialSecurityLimit)*config.socialSecurityTaxRate,0),perPaycheck=total&&config.socialSecurityTaxRate*(((_c=payments.at(-1))==null?void 0:_c.value)??0);return{total,remaining,perPaycheck,firstOccurrence}},[config.socialSecurityLimit,config.socialSecurityTaxRate,nextPaymentIdx,payments])},"useFutureSocialSecurity"),BeforeAfter=__name(props=>{const{dateTime,before,after}=props;return dateTime?DateTime.local()<dateTime?before:after:null},"BeforeAfter"),isFuture=__name(date=>date.diffNow("milliseconds").milliseconds>0,"isFuture"),FutureEvents=__name(()=>{const dates=useDates(),systemYear2=getLocalDateTime().year,savings=useFutureSavings(),retirement=useFutureRetirementContributions(),medicare=useFutureMedicareTax(),socialSecurity=useFutureSocialSecurity(),meritBonus=useMeritBonus(systemYear2),companyBonus=useCompanyBonus(systemYear2),retirementBonus=useRetirementBonus(systemYear2),total=useFutureBonuses()+savings.remaining+retirement.remaining+socialSecurity.remaining+medicare.remaining;return jsxs(Fragment,{children:[jsxs(Typography,{variant:"h5",children:[systemYear2," Remaining Projected Wealth ",jsx(Cash,{value:total})]}),jsxs(Stack$1,{direction:"row",sx:{"&& > *":{minWidth:210}},children:[isFuture(dates.meritBonus)&&jsx(Value,{title:"merit bonus",secondaryValue:jsx(Cash,{value:meritBonus.cash.actual??meritBonus.cash.avg}),children:jsx(Duration,{dateFormat:monthDay,variant:"date",dateTime:dates.meritBonus})}),isFuture(dates.companyBonus)&&jsx(Value,{title:"company bonus",secondaryValue:jsx(Cash,{value:companyBonus.cash.actual??companyBonus.cash.avg}),children:jsx(Duration,{variant:"date",dateFormat:monthDay,dateTime:dates.companyBonus})}),isFuture(dates.retirementBonus)&&jsx(Value,{title:"retirement bonus",secondaryValue:jsx(Cash,{value:retirementBonus.cash.actual??retirementBonus.cash.avg}),children:jsx(Duration,{dateFormat:monthDay,variant:"date",dateTime:dates.retirementBonus})})]}),jsxs(Stack$1,{direction:"row",sx:{"&& > *":{minWidth:210}},children:[!!socialSecurity.total&&jsx(Value,{title:"social security cap",secondaryValue:jsx(BeforeAfter,{dateTime:socialSecurity.firstOccurrence,before:jsx(Cash,{tooltip:"Remaining",value:socialSecurity.remaining}),after:jsx(Cash,{tooltip:"Per Paycheck",value:socialSecurity.perPaycheck})}),children:jsx(Duration,{dateFormat:monthDay,variant:"date",dateTime:socialSecurity.firstOccurrence,children:jsx(Cash,{tooltip:"Remaining",value:socialSecurity.remaining})})}),!!medicare.total&&jsx(Value,{title:"medicare supplemental tax",secondaryValue:jsx(BeforeAfter,{dateTime:medicare.firstOccurrence,before:jsx(Cash,{tooltip:"Total",value:medicare.remaining}),after:jsx(Cash,{tooltip:"Per Paycheck",value:medicare.perPaycheck})}),children:jsx(Duration,{dateFormat:monthDay,variant:"date",dateTime:medicare.firstOccurrence,children:jsx(Cash,{tooltip:"Remaining",value:medicare.remaining})})})]}),jsxs(Stack$1,{direction:"row",sx:{"&& > *":{minWidth:210}},children:[!!savings.perMonth&&jsx(Value,{title:"Expected savings",secondaryValue:jsx(Cash,{tooltip:"Per Month",value:savings.perMonth}),children:jsx(Cash,{tooltip:"Total Remaining",value:savings.remaining})}),!!retirement.perPaycheck&&jsx(Value,{title:"retirement contribution",secondaryValue:jsx(Cash,{tooltip:"Per Paycheck",value:retirement.perPaycheck}),children:jsx(Cash,{tooltip:"Total Remaining",value:retirement.remaining})})]})]})},"FutureEvents"),useEarliestAccountEntry=__name(()=>{const accounts=useStore(store,x=>x.wealth);return DateTime.fromMillis(Object.values(accounts).map(x=>{var _a;return x.type==="account"&&(_a=x.data[0])!=null&&_a.date?DateTime.fromISO(x.data[0].date):getLocalDateTime()}).reduce((acc,curr)=>Math.min(acc,(curr==null?void 0:curr.toMillis())??1/0),getLocalDateTime().toMillis()))},"useEarliestAccountEntry"),useTimeSeriesWealth=__name(()=>{const localDateTime=getLocalDateTime(),earliest=useEarliestAccountEntry(),accounts=useStore(store,x=>x.wealth),bonuses=useFutureBonuses(),savings=useFutureSavings(),ssiTaxValue=useFutureSocialSecurity(),medicareTaxValue=useFutureMedicareTax(),retirementContribution=useFutureRetirementContributions();return reactExports.useMemo(()=>{if(!earliest.isValid)return[];const futureWealth=bonuses+savings.remaining+retirementContribution.remaining+ssiTaxValue.remaining+medicareTaxValue.remaining,dates=new Array(localDateTime.year+2-earliest.year).fill(earliest.year).map((x,i)=>DateTime.fromObject({day:1,month:1,year:x+i}).startOf("day"));return localDateTime.equals(dates[dates.length-2])||dates.splice(-1,0,localDateTime),dates.map((date,idx,arr)=>{const isLast=idx===arr.length-1,accountWealth=Object.values(accounts).map(x=>{if(x.type==="mortgage"&&x.loan){const houseValue=findNearestOnOrBefore(date,x.data),balance=calcLoanBalance(date,x.loan);return calcEquity(x.loan.ownershipPct,houseValue==null?void 0:houseValue.value,balance,x.loan.principal)}else if(x.type==="account"){const entry=findNearestOnOrBefore(date,x.data);return(entry==null?void 0:entry.value)??0}return 0}).reduce((acc,curr)=>acc+curr,0);return{date,graphDate:date.toJSDate(),wealth:accountWealth+(isLast?futureWealth:0)}}).map((x,idx,arr)=>{var _a,_b;if(idx!==arr.length-1){const benchmarkWealth2=(_a=arr[idx-1])==null?void 0:_a.wealth;return benchmarkWealth2?{...x,yoyCash:x.wealth-benchmarkWealth2,yoyPct:x.wealth/benchmarkWealth2-1}:x}const benchmarkWealth=(_b=arr[idx-2])==null?void 0:_b.wealth;return benchmarkWealth?{...x,yoyCash:x.wealth-benchmarkWealth,yoyPct:x.wealth/benchmarkWealth-1}:x})},[earliest.isValid,earliest.year,bonuses,savings.remaining,retirementContribution.remaining,ssiTaxValue.remaining,medicareTaxValue.remaining,localDateTime,accounts])},"useTimeSeriesWealth"),WealthChart=__name(()=>{const data=useTimeSeriesWealth(),series=reactExports.useMemo(()=>[{type:"line",xKey:"graphDate",yKey:"wealth",yName:"Wealth",tooltip:{renderer:({datum,yKey,xKey})=>({content:`${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCash(datum[yKey])}`})}},{type:"line",xKey:"graphDate",yKey:"yoyCash",yName:"YoY ($)",tooltip:{renderer:({datum,yKey,xKey})=>({content:`${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCash(datum[yKey])}`})}}],[]),options=reactExports.useMemo(()=>{var _a;return{theme:"ag-default-dark",title:{text:`${data[data.length-1].date.toFormat(shortDate)} Projected wealth ${formatCashShort(((_a=data[data.length-1])==null?void 0:_a.wealth)??0)}`},data,axes:[{type:"time",position:"bottom",label:{format:"%Y"}},{type:"number",position:"left",nice:!1}],series}},[data,series]);return jsx(AgChartsReact,{options})},"WealthChart"),columnConfig=[{headerName:"Date",sort:"desc",valueFormatter:x=>{var _a;return(_a=x.value)==null?void 0:_a.toFormat(shortDate)},valueGetter:x=>{var _a;return(_a=x.data)==null?void 0:_a.date},cellRenderer:x=>{const systemYear2=getLocalDateTime().year;return jsxs(Stack$1,{direction:"row",alignItems:"center",children:[x.valueFormatted," ",x.value&&x.value>getLocalDateTime()&&jsx(Tooltip,{title:"Future Event",children:jsx(default_1$1,{htmlColor:"yellow"})}),x.value&&x.value.equals(DateTime.fromObject({day:1,month:1,year:systemYear2}))&&jsx(Tooltip,{title:"Benchmark for current and future entries",children:jsx(default_1$3,{htmlColor:"yellow"})})]})}},{headerName:"Wealth",valueGetter:x=>{var _a;return(_a=x.data)==null?void 0:_a.wealth},valueFormatter:x=>{var _a;return formatCash(((_a=x.data)==null?void 0:_a.wealth)??0)}},{headerName:"YoY ($)",valueGetter:x=>{var _a;return(_a=x.data)==null?void 0:_a.yoyCash},valueFormatter:x=>x.value!=null?formatCash(x.value):""},{headerName:"YoY (%)",valueGetter:x=>{var _a;return(_a=x.data)==null?void 0:_a.yoyPct},valueFormatter:x=>x.value!==void 0?formatPercent(x.value):""}],WealthTable=__name(()=>{const data=useTimeSeriesWealth();return jsx(AgGrid,{id:"time-series-wealth",rowData:data,columnDefs:columnConfig,autoSizeStrategy:{type:"fitGridWidth"}})},"WealthTable"),ProjectedWealth=__name(()=>jsxs(Grid$1,{container:!0,height:"100%",spacing:2,children:[jsx(Grid$1,{item:!0,xs:6,height:"50%",children:jsx(WealthChart,{})}),jsx(Grid$1,{item:!0,xs:6,height:"50%",children:jsx(Paper,{sx:{padding:2,height:"100%"},children:jsx(Config,{})})}),jsx(Grid$1,{item:!0,xs:6,height:"50%",children:jsx(WealthTable,{})}),jsx(Grid$1,{item:!0,xs:6,height:"50%",children:jsx(Paper,{sx:{padding:2,height:"100%"},children:jsx(FutureEvents,{})})})]}),"ProjectedWealth"),CountDown=__name(props=>{const{timeMs}=props,[time,setTime]=reactExports.useState(timeMs);return reactExports.useEffect(()=>{const interval=setInterval(()=>{setTime(prev=>{const remaining=prev-100;return remaining<0?(clearInterval(interval),0):remaining})},100);return()=>clearInterval(interval)},[props.timeMs]),jsx(LinearProgress,{value:time/timeMs*100,variant:"determinate",color:"inherit"})},"CountDown"),SafetyButton=__name(props=>{const{inactiveLabel,activatingLabel,activeLabel,confirmedLabel,onConfirm,icon,disabled,...rest}=props,[safetyState,setSafetyState]=reactExports.useState("inactive");return reactExports.useEffect(()=>{safetyState==="active"?setTimeout(()=>{setSafetyState(prev=>prev==="active"?"inactive":prev)},3200):safetyState==="activating"?setTimeout(()=>{setSafetyState("active")},1e3):safetyState==="confirmed"&&setTimeout(()=>{setSafetyState("inactive")},3200)},[safetyState]),jsx(Box,{sx:{minWidth:130},children:jsx(Button,{...rest,sx:{height:"100%",width:"100%"},disabled:disabled||safetyState==="activating"||safetyState==="confirmed",size:"small",onClick:()=>{safetyState==="inactive"&&setSafetyState("activating"),safetyState==="active"&&(onConfirm==null||onConfirm(),setSafetyState("confirmed"))},children:jsxs(Stack,{children:[jsxs(Stack,{direction:"row",children:[icon,safetyState==="inactive"&&inactiveLabel,safetyState==="activating"&&activatingLabel,safetyState==="active"&&activeLabel,safetyState==="confirmed"&&confirmedLabel]}),safetyState==="active"&&jsx(CountDown,{timeMs:2800}),safetyState==="activating"&&jsx(CountDown,{timeMs:500})]})})})},"SafetyButton"),downloadJson=__name((filename,storeData)=>{const data=JSON.stringify(storeData,null,2),link=document.createElement("a");link.download=filename;const blob=new Blob([data],{type:"application/json"});link.href=window.URL.createObjectURL(blob),link.click()},"downloadJson"),useExport=__name(()=>{const storeData=useStore(store);return reactExports.useCallback(()=>{downloadJson(`wealth-tracker-${getLocalDateTime().toFormat(shortDate)}.json`,storeData)},[storeData])},"useExport");function selectFile(contentType){return new Promise(resolve=>{const input=document.createElement("input");input.type="file",input.multiple=!1,input.accept=contentType,input.onchange=()=>{const files=Array.from(input.files??[]);resolve(files[0])},input.click()})}__name(selectFile,"selectFile");const useImport=__name(()=>reactExports.useCallback(()=>new Promise((resolve,reject)=>{selectFile("application/json").then(file=>{const reader=new FileReader;reader.readAsDataURL(file),reader.onload=readerEvent=>{var _a,_b;const content=(_b=(_a=readerEvent.target)==null?void 0:_a.result)==null?void 0:_b.toString();if(content){const data=JSON.parse(window.atob(content.split(",")[1])),validation=storeValidator.safeParse(data);validation.success&&store.setState(()=>data),validation.success?resolve():reject(validation.error)}}})}),[]),"useImport"),useStoreDataError=__name(()=>{const invalidData=localStorage.getItem("store-invalid");return reactExports.useMemo(()=>{if(!invalidData)return{hadError:!1};const jsonInvalidData=JSON.parse(invalidData),validated=storeValidator.safeParse(jsonInvalidData);return{hadError:!!invalidData,invalidData:jsonInvalidData,parseError:invalidData&&!validated.success?validated.error:void 0,resetError:()=>{localStorage.removeItem("store-invalid")}}},[invalidData])},"useStoreDataError");function InvalidDataDialog(props){const{open,error,children}=props;return jsx(Fragment,{children:jsxs(Dialog,{open:!!open,children:[jsx(DialogTitle,{id:"alert-dialog-title",children:"Error Loading Data"}),jsx(DialogContent,{children:jsx(DialogContentText,{id:"alert-dialog-description",children:jsx(Box,{maxHeight:500,overflow:"auto",children:jsxs(Table,{children:[jsx(TableHead,{children:jsxs(TableRow,{children:[jsx(TableCell,{children:"Error Message"}),jsx(TableCell,{children:"Path"})]})}),jsx(TableBody,{children:error==null?void 0:error.issues.map((x,idx)=>jsxs(TableRow,{children:[jsx(TableCell,{children:x.message}),jsx(TableCell,{children:x.path.join(".")})]},idx))})]})})})}),jsx(DialogActions,{children})]})})}__name(InvalidDataDialog,"InvalidDataDialog");const App=__name(()=>{const[tab,setTab]=reactExports.useState("wealth"),onExport=useExport(),onImport=useImport(),{hadError,parseError,resetError,invalidData}=useStoreDataError(),[error,setError]=reactExports.useState(parseError),[isOpen,setIsOpen]=reactExports.useState(hadError);return jsxs(Fragment,{children:[jsxs(InvalidDataDialog,{open:isOpen,error,children:[hadError&&jsxs(Fragment,{children:[jsx(Button,{color:"error",onClick:()=>{setIsOpen(!1),resetError==null||resetError(),resetStore()},children:"Reset"}),jsx(Button,{onClick:()=>{downloadJson(`invalid-data-wealth-tracker-${getLocalDateTime().toFormat(shortDate)}.json`,invalidData)},children:"Download Data"}),jsx(Button,{onClick:()=>{setIsOpen(!1),resetError==null||resetError()},children:"Ignore"})]}),!hadError&&jsx(Button,{onClick:()=>{setIsOpen(!1)},children:"Cancel"})]}),jsxs(Stack,{direction:"row",children:[jsxs(Tabs,{value:tab,onChange:(_,value)=>setTab(value),children:[jsx(Tab,{value:"wealth",label:"Total Wealth"}),jsx(Tab,{value:"projected-income",label:"Projected Income"}),jsx(Tab,{value:"projected-wealth",label:"Projected Wealth"})]}),jsxs(Box,{marginLeft:"auto",gap:2,display:"flex",children:[jsx(Button,{onClick:()=>onImport().catch(err=>{setIsOpen(!0),setError(err)}),children:"Import"}),jsx(Button,{onClick:onExport,children:"Export"}),jsx(SafetyButton,{onConfirm:resetStore,inactiveLabel:"Reset",activatingLabel:"Activating",activeLabel:"Confirm",confirmedLabel:"confirmed",color:"error",icon:jsx(default_1,{})})]})]}),jsxs(Box,{padding:2,height:"95%",width:"100%",children:[tab==="wealth"&&jsx(NetWealth,{}),tab==="projected-income"&&jsx(ProjectedIncome,{}),tab==="projected-wealth"&&jsx(ProjectedWealth,{})]})]})},"App"),darkTheme=createTheme({palette:{mode:"dark"}});client.createRoot(document.getElementById("root")).render(jsx(React.StrictMode,{children:jsx(ErrorBoundary,{fallbackRender:props=>jsxs(Fragment,{children:[jsx("div",{style:{backgroundColor:"#FFF"},children:props.error.message}),jsx("div",{style:{backgroundColor:"#FFF"},children:props.error.stackTrace})]}),children:jsx(LocalizationProvider,{dateAdapter:AdapterLuxon,children:jsxs(ThemeProvider,{theme:darkTheme,children:[jsx(CssBaseline,{}),jsx(App,{})]})})})}));
//# sourceMappingURL=index-muWn4HNG.js.map
