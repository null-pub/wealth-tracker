{"version":3,"file":"worker-BaNwFLXa.js","sources":["../node_modules/luxon/src/errors.js","../node_modules/luxon/src/impl/formats.js","../node_modules/luxon/src/zone.js","../node_modules/luxon/src/zones/systemZone.js","../node_modules/luxon/src/zones/IANAZone.js","../node_modules/luxon/src/impl/locale.js","../node_modules/luxon/src/zones/fixedOffsetZone.js","../node_modules/luxon/src/zones/invalidZone.js","../node_modules/luxon/src/impl/zoneUtil.js","../node_modules/luxon/src/impl/digits.js","../node_modules/luxon/src/settings.js","../node_modules/luxon/src/impl/invalid.js","../node_modules/luxon/src/impl/conversions.js","../node_modules/luxon/src/impl/util.js","../node_modules/luxon/src/impl/english.js","../node_modules/luxon/src/impl/formatter.js","../node_modules/luxon/src/impl/regexParser.js","../node_modules/luxon/src/duration.js","../node_modules/luxon/src/interval.js","../node_modules/luxon/src/info.js","../node_modules/luxon/src/impl/diff.js","../node_modules/luxon/src/impl/tokenParser.js","../node_modules/luxon/src/datetime.js","../src/shared/constants.ts","../node_modules/@tanstack/store/dist/esm/scheduler.js","../node_modules/@tanstack/store/dist/esm/store.js","../node_modules/@tanstack/store/dist/esm/derived.js","../node_modules/mutative/dist/mutative.esm.mjs","../node_modules/zod/lib/index.mjs","../src/shared/models/store/version-0/loan.ts","../src/shared/models/store/version-3/account-data.ts","../src/shared/models/store/version-0/account-data.ts","../src/shared/models/store/version-0/account.ts","../src/shared/models/store/version-0/mortgage.ts","../src/shared/models/store/version-0/net-wealth.ts","../src/shared/models/store/version-0/projected-income.ts","../src/shared/models/store/version-2/projected-wealth.ts","../src/shared/models/store/version-0/projected-wealth.ts","../src/shared/models/store/version-1/store.ts","../src/shared/models/store/version-2/store.ts","../src/shared/models/store/version-3/mortgage.ts","../src/shared/models/store/version-3/projected-income.ts","../src/shared/models/store/version-4/projected-wealth.ts","../src/shared/models/store/version-5/account.ts","../src/shared/models/store/version-5/get-default.ts","../src/shared/models/store/version-5/mortgage.ts","../src/shared/models/store/version-5/net-wealth.ts","../src/shared/models/store/version-5/store.ts","../src/shared/models/store/version-0/store.ts","../src/shared/models/store/version-3/account.ts","../src/shared/models/store/version-3/net-wealth.ts","../src/shared/models/store/version-3/projected-wealth.ts","../src/shared/models/store/version-3/store.ts","../src/shared/models/store/version-4/store.ts","../src/shared/store/migrations.ts","../src/shared/store/store.ts","../src/shared/utility/find-same-year.ts","../src/shared/utility/get-actual-date.ts","../src/shared/hooks/use-dates.ts","../src/shared/models/payment-periods.ts","../src/shared/utility/current-date.ts","../src/shared/utility/find-nearest-on-or-before.ts","../node_modules/date-fns/constants.js","../node_modules/date-fns/constructFrom.js","../node_modules/date-fns/_lib/normalizeDates.js","../node_modules/date-fns/toDate.js","../node_modules/date-fns/addDays.js","../node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.js","../node_modules/date-fns/startOfDay.js","../node_modules/date-fns/differenceInCalendarDays.js","../node_modules/date-fns/isSameDay.js","../node_modules/date-fns/isDate.js","../node_modules/date-fns/isValid.js","../node_modules/date-fns/isWeekend.js","../node_modules/date-fns/differenceInBusinessDays.js","../src/shared/utility/a-payday.ts","../src/shared/utility/date-ranges-overlap.ts","../src/shared/utility/get-pay-periods.ts","../src/shared/utility/get-payments.ts","../src/shared/utility/get-values-by-date-range.ts","../src/shared/utility/get-empty-merit-sequence.ts","../src/shared/utility/get-future-pay.ts","../src/shared/utility/group-by-single.ts","../src/shared/utility/get-merit-sequence.ts","../src/shared/utility/payments-by-range.ts","../src/shared/utility/income-by-range.ts","../node_modules/simple-statistics/dist/simple-statistics.mjs","../src/shared/web-worker/scenarios.ts","../src/shared/web-worker/worker.ts"],"sourcesContent":["// these aren't really private, but nor are they really useful to document\n\n/**\n * @private\n */\nclass LuxonError extends Error {}\n\n/**\n * @private\n */\nexport class InvalidDateTimeError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid DateTime: ${reason.toMessage()}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidIntervalError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid Interval: ${reason.toMessage()}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidDurationError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid Duration: ${reason.toMessage()}`);\n  }\n}\n\n/**\n * @private\n */\nexport class ConflictingSpecificationError extends LuxonError {}\n\n/**\n * @private\n */\nexport class InvalidUnitError extends LuxonError {\n  constructor(unit) {\n    super(`Invalid unit ${unit}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidArgumentError extends LuxonError {}\n\n/**\n * @private\n */\nexport class ZoneIsAbstractError extends LuxonError {\n  constructor() {\n    super(\"Zone is an abstract class\");\n  }\n}\n","/**\n * @private\n */\n\nconst n = \"numeric\",\n  s = \"short\",\n  l = \"long\";\n\nexport const DATE_SHORT = {\n  year: n,\n  month: n,\n  day: n,\n};\n\nexport const DATE_MED = {\n  year: n,\n  month: s,\n  day: n,\n};\n\nexport const DATE_MED_WITH_WEEKDAY = {\n  year: n,\n  month: s,\n  day: n,\n  weekday: s,\n};\n\nexport const DATE_FULL = {\n  year: n,\n  month: l,\n  day: n,\n};\n\nexport const DATE_HUGE = {\n  year: n,\n  month: l,\n  day: n,\n  weekday: l,\n};\n\nexport const TIME_SIMPLE = {\n  hour: n,\n  minute: n,\n};\n\nexport const TIME_WITH_SECONDS = {\n  hour: n,\n  minute: n,\n  second: n,\n};\n\nexport const TIME_WITH_SHORT_OFFSET = {\n  hour: n,\n  minute: n,\n  second: n,\n  timeZoneName: s,\n};\n\nexport const TIME_WITH_LONG_OFFSET = {\n  hour: n,\n  minute: n,\n  second: n,\n  timeZoneName: l,\n};\n\nexport const TIME_24_SIMPLE = {\n  hour: n,\n  minute: n,\n  hourCycle: \"h23\",\n};\n\nexport const TIME_24_WITH_SECONDS = {\n  hour: n,\n  minute: n,\n  second: n,\n  hourCycle: \"h23\",\n};\n\nexport const TIME_24_WITH_SHORT_OFFSET = {\n  hour: n,\n  minute: n,\n  second: n,\n  hourCycle: \"h23\",\n  timeZoneName: s,\n};\n\nexport const TIME_24_WITH_LONG_OFFSET = {\n  hour: n,\n  minute: n,\n  second: n,\n  hourCycle: \"h23\",\n  timeZoneName: l,\n};\n\nexport const DATETIME_SHORT = {\n  year: n,\n  month: n,\n  day: n,\n  hour: n,\n  minute: n,\n};\n\nexport const DATETIME_SHORT_WITH_SECONDS = {\n  year: n,\n  month: n,\n  day: n,\n  hour: n,\n  minute: n,\n  second: n,\n};\n\nexport const DATETIME_MED = {\n  year: n,\n  month: s,\n  day: n,\n  hour: n,\n  minute: n,\n};\n\nexport const DATETIME_MED_WITH_SECONDS = {\n  year: n,\n  month: s,\n  day: n,\n  hour: n,\n  minute: n,\n  second: n,\n};\n\nexport const DATETIME_MED_WITH_WEEKDAY = {\n  year: n,\n  month: s,\n  day: n,\n  weekday: s,\n  hour: n,\n  minute: n,\n};\n\nexport const DATETIME_FULL = {\n  year: n,\n  month: l,\n  day: n,\n  hour: n,\n  minute: n,\n  timeZoneName: s,\n};\n\nexport const DATETIME_FULL_WITH_SECONDS = {\n  year: n,\n  month: l,\n  day: n,\n  hour: n,\n  minute: n,\n  second: n,\n  timeZoneName: s,\n};\n\nexport const DATETIME_HUGE = {\n  year: n,\n  month: l,\n  day: n,\n  weekday: l,\n  hour: n,\n  minute: n,\n  timeZoneName: l,\n};\n\nexport const DATETIME_HUGE_WITH_SECONDS = {\n  year: n,\n  month: l,\n  day: n,\n  weekday: l,\n  hour: n,\n  minute: n,\n  second: n,\n  timeZoneName: l,\n};\n","import { ZoneIsAbstractError } from \"./errors.js\";\n\n/**\n * @interface\n */\nexport default class Zone {\n  /**\n   * The type of zone\n   * @abstract\n   * @type {string}\n   */\n  get type() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * The name of this zone.\n   * @abstract\n   * @type {string}\n   */\n  get name() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * The IANA name of this zone.\n   * Defaults to `name` if not overwritten by a subclass.\n   * @abstract\n   * @type {string}\n   */\n  get ianaName() {\n    return this.name;\n  }\n\n  /**\n   * Returns whether the offset is known to be fixed for the whole year.\n   * @abstract\n   * @type {boolean}\n   */\n  get isUniversal() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns the offset's common name (such as EST) at the specified timestamp\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to get the name\n   * @param {Object} opts - Options to affect the format\n   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.\n   * @param {string} opts.locale - What locale to return the offset name in.\n   * @return {string}\n   */\n  offsetName(ts, opts) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns the offset's value as a string\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to get the offset\n   * @param {string} format - What style of offset to return.\n   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively\n   * @return {string}\n   */\n  formatOffset(ts, format) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return the offset in minutes for this zone at the specified timestamp.\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to compute the offset\n   * @return {number}\n   */\n  offset(ts) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return whether this Zone is equal to another zone\n   * @abstract\n   * @param {Zone} otherZone - the zone to compare\n   * @return {boolean}\n   */\n  equals(otherZone) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return whether this Zone is valid.\n   * @abstract\n   * @type {boolean}\n   */\n  get isValid() {\n    throw new ZoneIsAbstractError();\n  }\n}\n","import { formatOffset, parseZoneInfo } from \"../impl/util.js\";\nimport Zone from \"../zone.js\";\n\nlet singleton = null;\n\n/**\n * Represents the local zone for this JavaScript environment.\n * @implements {Zone}\n */\nexport default class SystemZone extends Zone {\n  /**\n   * Get a singleton instance of the local zone\n   * @return {SystemZone}\n   */\n  static get instance() {\n    if (singleton === null) {\n      singleton = new SystemZone();\n    }\n    return singleton;\n  }\n\n  /** @override **/\n  get type() {\n    return \"system\";\n  }\n\n  /** @override **/\n  get name() {\n    return new Intl.DateTimeFormat().resolvedOptions().timeZone;\n  }\n\n  /** @override **/\n  get isUniversal() {\n    return false;\n  }\n\n  /** @override **/\n  offsetName(ts, { format, locale }) {\n    return parseZoneInfo(ts, format, locale);\n  }\n\n  /** @override **/\n  formatOffset(ts, format) {\n    return formatOffset(this.offset(ts), format);\n  }\n\n  /** @override **/\n  offset(ts) {\n    return -new Date(ts).getTimezoneOffset();\n  }\n\n  /** @override **/\n  equals(otherZone) {\n    return otherZone.type === \"system\";\n  }\n\n  /** @override **/\n  get isValid() {\n    return true;\n  }\n}\n","import { formatOffset, parseZoneInfo, isUndefined, objToLocalTS } from \"../impl/util.js\";\nimport Zone from \"../zone.js\";\n\nconst dtfCache = new Map();\nfunction makeDTF(zoneName) {\n  let dtf = dtfCache.get(zoneName);\n  if (dtf === undefined) {\n    dtf = new Intl.DateTimeFormat(\"en-US\", {\n      hour12: false,\n      timeZone: zoneName,\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\",\n      era: \"short\",\n    });\n    dtfCache.set(zoneName, dtf);\n  }\n  return dtf;\n}\n\nconst typeToPos = {\n  year: 0,\n  month: 1,\n  day: 2,\n  era: 3,\n  hour: 4,\n  minute: 5,\n  second: 6,\n};\n\nfunction hackyOffset(dtf, date) {\n  const formatted = dtf.format(date).replace(/\\u200E/g, \"\"),\n    parsed = /(\\d+)\\/(\\d+)\\/(\\d+) (AD|BC),? (\\d+):(\\d+):(\\d+)/.exec(formatted),\n    [, fMonth, fDay, fYear, fadOrBc, fHour, fMinute, fSecond] = parsed;\n  return [fYear, fMonth, fDay, fadOrBc, fHour, fMinute, fSecond];\n}\n\nfunction partsOffset(dtf, date) {\n  const formatted = dtf.formatToParts(date);\n  const filled = [];\n  for (let i = 0; i < formatted.length; i++) {\n    const { type, value } = formatted[i];\n    const pos = typeToPos[type];\n\n    if (type === \"era\") {\n      filled[pos] = value;\n    } else if (!isUndefined(pos)) {\n      filled[pos] = parseInt(value, 10);\n    }\n  }\n  return filled;\n}\n\nconst ianaZoneCache = new Map();\n/**\n * A zone identified by an IANA identifier, like America/New_York\n * @implements {Zone}\n */\nexport default class IANAZone extends Zone {\n  /**\n   * @param {string} name - Zone name\n   * @return {IANAZone}\n   */\n  static create(name) {\n    let zone = ianaZoneCache.get(name);\n    if (zone === undefined) {\n      ianaZoneCache.set(name, (zone = new IANAZone(name)));\n    }\n    return zone;\n  }\n\n  /**\n   * Reset local caches. Should only be necessary in testing scenarios.\n   * @return {void}\n   */\n  static resetCache() {\n    ianaZoneCache.clear();\n    dtfCache.clear();\n  }\n\n  /**\n   * Returns whether the provided string is a valid specifier. This only checks the string's format, not that the specifier identifies a known zone; see isValidZone for that.\n   * @param {string} s - The string to check validity on\n   * @example IANAZone.isValidSpecifier(\"America/New_York\") //=> true\n   * @example IANAZone.isValidSpecifier(\"Sport~~blorp\") //=> false\n   * @deprecated For backward compatibility, this forwards to isValidZone, better use `isValidZone()` directly instead.\n   * @return {boolean}\n   */\n  static isValidSpecifier(s) {\n    return this.isValidZone(s);\n  }\n\n  /**\n   * Returns whether the provided string identifies a real zone\n   * @param {string} zone - The string to check\n   * @example IANAZone.isValidZone(\"America/New_York\") //=> true\n   * @example IANAZone.isValidZone(\"Fantasia/Castle\") //=> false\n   * @example IANAZone.isValidZone(\"Sport~~blorp\") //=> false\n   * @return {boolean}\n   */\n  static isValidZone(zone) {\n    if (!zone) {\n      return false;\n    }\n    try {\n      new Intl.DateTimeFormat(\"en-US\", { timeZone: zone }).format();\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  constructor(name) {\n    super();\n    /** @private **/\n    this.zoneName = name;\n    /** @private **/\n    this.valid = IANAZone.isValidZone(name);\n  }\n\n  /**\n   * The type of zone. `iana` for all instances of `IANAZone`.\n   * @override\n   * @type {string}\n   */\n  get type() {\n    return \"iana\";\n  }\n\n  /**\n   * The name of this zone (i.e. the IANA zone name).\n   * @override\n   * @type {string}\n   */\n  get name() {\n    return this.zoneName;\n  }\n\n  /**\n   * Returns whether the offset is known to be fixed for the whole year:\n   * Always returns false for all IANA zones.\n   * @override\n   * @type {boolean}\n   */\n  get isUniversal() {\n    return false;\n  }\n\n  /**\n   * Returns the offset's common name (such as EST) at the specified timestamp\n   * @override\n   * @param {number} ts - Epoch milliseconds for which to get the name\n   * @param {Object} opts - Options to affect the format\n   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.\n   * @param {string} opts.locale - What locale to return the offset name in.\n   * @return {string}\n   */\n  offsetName(ts, { format, locale }) {\n    return parseZoneInfo(ts, format, locale, this.name);\n  }\n\n  /**\n   * Returns the offset's value as a string\n   * @override\n   * @param {number} ts - Epoch milliseconds for which to get the offset\n   * @param {string} format - What style of offset to return.\n   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively\n   * @return {string}\n   */\n  formatOffset(ts, format) {\n    return formatOffset(this.offset(ts), format);\n  }\n\n  /**\n   * Return the offset in minutes for this zone at the specified timestamp.\n   * @override\n   * @param {number} ts - Epoch milliseconds for which to compute the offset\n   * @return {number}\n   */\n  offset(ts) {\n    if (!this.valid) return NaN;\n    const date = new Date(ts);\n\n    if (isNaN(date)) return NaN;\n\n    const dtf = makeDTF(this.name);\n    let [year, month, day, adOrBc, hour, minute, second] = dtf.formatToParts\n      ? partsOffset(dtf, date)\n      : hackyOffset(dtf, date);\n\n    if (adOrBc === \"BC\") {\n      year = -Math.abs(year) + 1;\n    }\n\n    // because we're using hour12 and https://bugs.chromium.org/p/chromium/issues/detail?id=1025564&can=2&q=%2224%3A00%22%20datetimeformat\n    const adjustedHour = hour === 24 ? 0 : hour;\n\n    const asUTC = objToLocalTS({\n      year,\n      month,\n      day,\n      hour: adjustedHour,\n      minute,\n      second,\n      millisecond: 0,\n    });\n\n    let asTS = +date;\n    const over = asTS % 1000;\n    asTS -= over >= 0 ? over : 1000 + over;\n    return (asUTC - asTS) / (60 * 1000);\n  }\n\n  /**\n   * Return whether this Zone is equal to another zone\n   * @override\n   * @param {Zone} otherZone - the zone to compare\n   * @return {boolean}\n   */\n  equals(otherZone) {\n    return otherZone.type === \"iana\" && otherZone.name === this.name;\n  }\n\n  /**\n   * Return whether this Zone is valid.\n   * @override\n   * @type {boolean}\n   */\n  get isValid() {\n    return this.valid;\n  }\n}\n","import { hasLocaleWeekInfo, hasRelative, padStart, roundTo, validateWeekSettings } from \"./util.js\";\nimport * as English from \"./english.js\";\nimport Settings from \"../settings.js\";\nimport DateTime from \"../datetime.js\";\nimport IANAZone from \"../zones/IANAZone.js\";\n\n// todo - remap caching\n\nlet intlLFCache = {};\nfunction getCachedLF(locString, opts = {}) {\n  const key = JSON.stringify([locString, opts]);\n  let dtf = intlLFCache[key];\n  if (!dtf) {\n    dtf = new Intl.ListFormat(locString, opts);\n    intlLFCache[key] = dtf;\n  }\n  return dtf;\n}\n\nconst intlDTCache = new Map();\nfunction getCachedDTF(locString, opts = {}) {\n  const key = JSON.stringify([locString, opts]);\n  let dtf = intlDTCache.get(key);\n  if (dtf === undefined) {\n    dtf = new Intl.DateTimeFormat(locString, opts);\n    intlDTCache.set(key, dtf);\n  }\n  return dtf;\n}\n\nconst intlNumCache = new Map();\nfunction getCachedINF(locString, opts = {}) {\n  const key = JSON.stringify([locString, opts]);\n  let inf = intlNumCache.get(key);\n  if (inf === undefined) {\n    inf = new Intl.NumberFormat(locString, opts);\n    intlNumCache.set(key, inf);\n  }\n  return inf;\n}\n\nconst intlRelCache = new Map();\nfunction getCachedRTF(locString, opts = {}) {\n  const { base, ...cacheKeyOpts } = opts; // exclude `base` from the options\n  const key = JSON.stringify([locString, cacheKeyOpts]);\n  let inf = intlRelCache.get(key);\n  if (inf === undefined) {\n    inf = new Intl.RelativeTimeFormat(locString, opts);\n    intlRelCache.set(key, inf);\n  }\n  return inf;\n}\n\nlet sysLocaleCache = null;\nfunction systemLocale() {\n  if (sysLocaleCache) {\n    return sysLocaleCache;\n  } else {\n    sysLocaleCache = new Intl.DateTimeFormat().resolvedOptions().locale;\n    return sysLocaleCache;\n  }\n}\n\nconst intlResolvedOptionsCache = new Map();\nfunction getCachedIntResolvedOptions(locString) {\n  let opts = intlResolvedOptionsCache.get(locString);\n  if (opts === undefined) {\n    opts = new Intl.DateTimeFormat(locString).resolvedOptions();\n    intlResolvedOptionsCache.set(locString, opts);\n  }\n  return opts;\n}\n\nconst weekInfoCache = new Map();\nfunction getCachedWeekInfo(locString) {\n  let data = weekInfoCache.get(locString);\n  if (!data) {\n    const locale = new Intl.Locale(locString);\n    // browsers currently implement this as a property, but spec says it should be a getter function\n    data = \"getWeekInfo\" in locale ? locale.getWeekInfo() : locale.weekInfo;\n    // minimalDays was removed from WeekInfo: https://github.com/tc39/proposal-intl-locale-info/issues/86\n    if (!(\"minimalDays\" in data)) {\n      data = { ...fallbackWeekSettings, ...data };\n    }\n    weekInfoCache.set(locString, data);\n  }\n  return data;\n}\n\nfunction parseLocaleString(localeStr) {\n  // I really want to avoid writing a BCP 47 parser\n  // see, e.g. https://github.com/wooorm/bcp-47\n  // Instead, we'll do this:\n\n  // a) if the string has no -u extensions, just leave it alone\n  // b) if it does, use Intl to resolve everything\n  // c) if Intl fails, try again without the -u\n\n  // private subtags and unicode subtags have ordering requirements,\n  // and we're not properly parsing this, so just strip out the\n  // private ones if they exist.\n  const xIndex = localeStr.indexOf(\"-x-\");\n  if (xIndex !== -1) {\n    localeStr = localeStr.substring(0, xIndex);\n  }\n\n  const uIndex = localeStr.indexOf(\"-u-\");\n  if (uIndex === -1) {\n    return [localeStr];\n  } else {\n    let options;\n    let selectedStr;\n    try {\n      options = getCachedDTF(localeStr).resolvedOptions();\n      selectedStr = localeStr;\n    } catch (e) {\n      const smaller = localeStr.substring(0, uIndex);\n      options = getCachedDTF(smaller).resolvedOptions();\n      selectedStr = smaller;\n    }\n\n    const { numberingSystem, calendar } = options;\n    return [selectedStr, numberingSystem, calendar];\n  }\n}\n\nfunction intlConfigString(localeStr, numberingSystem, outputCalendar) {\n  if (outputCalendar || numberingSystem) {\n    if (!localeStr.includes(\"-u-\")) {\n      localeStr += \"-u\";\n    }\n\n    if (outputCalendar) {\n      localeStr += `-ca-${outputCalendar}`;\n    }\n\n    if (numberingSystem) {\n      localeStr += `-nu-${numberingSystem}`;\n    }\n    return localeStr;\n  } else {\n    return localeStr;\n  }\n}\n\nfunction mapMonths(f) {\n  const ms = [];\n  for (let i = 1; i <= 12; i++) {\n    const dt = DateTime.utc(2009, i, 1);\n    ms.push(f(dt));\n  }\n  return ms;\n}\n\nfunction mapWeekdays(f) {\n  const ms = [];\n  for (let i = 1; i <= 7; i++) {\n    const dt = DateTime.utc(2016, 11, 13 + i);\n    ms.push(f(dt));\n  }\n  return ms;\n}\n\nfunction listStuff(loc, length, englishFn, intlFn) {\n  const mode = loc.listingMode();\n\n  if (mode === \"error\") {\n    return null;\n  } else if (mode === \"en\") {\n    return englishFn(length);\n  } else {\n    return intlFn(length);\n  }\n}\n\nfunction supportsFastNumbers(loc) {\n  if (loc.numberingSystem && loc.numberingSystem !== \"latn\") {\n    return false;\n  } else {\n    return (\n      loc.numberingSystem === \"latn\" ||\n      !loc.locale ||\n      loc.locale.startsWith(\"en\") ||\n      getCachedIntResolvedOptions(loc.locale).numberingSystem === \"latn\"\n    );\n  }\n}\n\n/**\n * @private\n */\n\nclass PolyNumberFormatter {\n  constructor(intl, forceSimple, opts) {\n    this.padTo = opts.padTo || 0;\n    this.floor = opts.floor || false;\n\n    const { padTo, floor, ...otherOpts } = opts;\n\n    if (!forceSimple || Object.keys(otherOpts).length > 0) {\n      const intlOpts = { useGrouping: false, ...opts };\n      if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;\n      this.inf = getCachedINF(intl, intlOpts);\n    }\n  }\n\n  format(i) {\n    if (this.inf) {\n      const fixed = this.floor ? Math.floor(i) : i;\n      return this.inf.format(fixed);\n    } else {\n      // to match the browser's numberformatter defaults\n      const fixed = this.floor ? Math.floor(i) : roundTo(i, 3);\n      return padStart(fixed, this.padTo);\n    }\n  }\n}\n\n/**\n * @private\n */\n\nclass PolyDateFormatter {\n  constructor(dt, intl, opts) {\n    this.opts = opts;\n    this.originalZone = undefined;\n\n    let z = undefined;\n    if (this.opts.timeZone) {\n      // Don't apply any workarounds if a timeZone is explicitly provided in opts\n      this.dt = dt;\n    } else if (dt.zone.type === \"fixed\") {\n      // UTC-8 or Etc/UTC-8 are not part of tzdata, only Etc/GMT+8 and the like.\n      // That is why fixed-offset TZ is set to that unless it is:\n      // 1. Representing offset 0 when UTC is used to maintain previous behavior and does not become GMT.\n      // 2. Unsupported by the browser:\n      //    - some do not support Etc/\n      //    - < Etc/GMT-14, > Etc/GMT+12, and 30-minute or 45-minute offsets are not part of tzdata\n      const gmtOffset = -1 * (dt.offset / 60);\n      const offsetZ = gmtOffset >= 0 ? `Etc/GMT+${gmtOffset}` : `Etc/GMT${gmtOffset}`;\n      if (dt.offset !== 0 && IANAZone.create(offsetZ).valid) {\n        z = offsetZ;\n        this.dt = dt;\n      } else {\n        // Not all fixed-offset zones like Etc/+4:30 are present in tzdata so\n        // we manually apply the offset and substitute the zone as needed.\n        z = \"UTC\";\n        this.dt = dt.offset === 0 ? dt : dt.setZone(\"UTC\").plus({ minutes: dt.offset });\n        this.originalZone = dt.zone;\n      }\n    } else if (dt.zone.type === \"system\") {\n      this.dt = dt;\n    } else if (dt.zone.type === \"iana\") {\n      this.dt = dt;\n      z = dt.zone.name;\n    } else {\n      // Custom zones can have any offset / offsetName so we just manually\n      // apply the offset and substitute the zone as needed.\n      z = \"UTC\";\n      this.dt = dt.setZone(\"UTC\").plus({ minutes: dt.offset });\n      this.originalZone = dt.zone;\n    }\n\n    const intlOpts = { ...this.opts };\n    intlOpts.timeZone = intlOpts.timeZone || z;\n    this.dtf = getCachedDTF(intl, intlOpts);\n  }\n\n  format() {\n    if (this.originalZone) {\n      // If we have to substitute in the actual zone name, we have to use\n      // formatToParts so that the timezone can be replaced.\n      return this.formatToParts()\n        .map(({ value }) => value)\n        .join(\"\");\n    }\n    return this.dtf.format(this.dt.toJSDate());\n  }\n\n  formatToParts() {\n    const parts = this.dtf.formatToParts(this.dt.toJSDate());\n    if (this.originalZone) {\n      return parts.map((part) => {\n        if (part.type === \"timeZoneName\") {\n          const offsetName = this.originalZone.offsetName(this.dt.ts, {\n            locale: this.dt.locale,\n            format: this.opts.timeZoneName,\n          });\n          return {\n            ...part,\n            value: offsetName,\n          };\n        } else {\n          return part;\n        }\n      });\n    }\n    return parts;\n  }\n\n  resolvedOptions() {\n    return this.dtf.resolvedOptions();\n  }\n}\n\n/**\n * @private\n */\nclass PolyRelFormatter {\n  constructor(intl, isEnglish, opts) {\n    this.opts = { style: \"long\", ...opts };\n    if (!isEnglish && hasRelative()) {\n      this.rtf = getCachedRTF(intl, opts);\n    }\n  }\n\n  format(count, unit) {\n    if (this.rtf) {\n      return this.rtf.format(count, unit);\n    } else {\n      return English.formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== \"long\");\n    }\n  }\n\n  formatToParts(count, unit) {\n    if (this.rtf) {\n      return this.rtf.formatToParts(count, unit);\n    } else {\n      return [];\n    }\n  }\n}\n\nconst fallbackWeekSettings = {\n  firstDay: 1,\n  minimalDays: 4,\n  weekend: [6, 7],\n};\n\n/**\n * @private\n */\nexport default class Locale {\n  static fromOpts(opts) {\n    return Locale.create(\n      opts.locale,\n      opts.numberingSystem,\n      opts.outputCalendar,\n      opts.weekSettings,\n      opts.defaultToEN\n    );\n  }\n\n  static create(locale, numberingSystem, outputCalendar, weekSettings, defaultToEN = false) {\n    const specifiedLocale = locale || Settings.defaultLocale;\n    // the system locale is useful for human-readable strings but annoying for parsing/formatting known formats\n    const localeR = specifiedLocale || (defaultToEN ? \"en-US\" : systemLocale());\n    const numberingSystemR = numberingSystem || Settings.defaultNumberingSystem;\n    const outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;\n    const weekSettingsR = validateWeekSettings(weekSettings) || Settings.defaultWeekSettings;\n    return new Locale(localeR, numberingSystemR, outputCalendarR, weekSettingsR, specifiedLocale);\n  }\n\n  static resetCache() {\n    sysLocaleCache = null;\n    intlDTCache.clear();\n    intlNumCache.clear();\n    intlRelCache.clear();\n    intlResolvedOptionsCache.clear();\n    weekInfoCache.clear();\n  }\n\n  static fromObject({ locale, numberingSystem, outputCalendar, weekSettings } = {}) {\n    return Locale.create(locale, numberingSystem, outputCalendar, weekSettings);\n  }\n\n  constructor(locale, numbering, outputCalendar, weekSettings, specifiedLocale) {\n    const [parsedLocale, parsedNumberingSystem, parsedOutputCalendar] = parseLocaleString(locale);\n\n    this.locale = parsedLocale;\n    this.numberingSystem = numbering || parsedNumberingSystem || null;\n    this.outputCalendar = outputCalendar || parsedOutputCalendar || null;\n    this.weekSettings = weekSettings;\n    this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);\n\n    this.weekdaysCache = { format: {}, standalone: {} };\n    this.monthsCache = { format: {}, standalone: {} };\n    this.meridiemCache = null;\n    this.eraCache = {};\n\n    this.specifiedLocale = specifiedLocale;\n    this.fastNumbersCached = null;\n  }\n\n  get fastNumbers() {\n    if (this.fastNumbersCached == null) {\n      this.fastNumbersCached = supportsFastNumbers(this);\n    }\n\n    return this.fastNumbersCached;\n  }\n\n  listingMode() {\n    const isActuallyEn = this.isEnglish();\n    const hasNoWeirdness =\n      (this.numberingSystem === null || this.numberingSystem === \"latn\") &&\n      (this.outputCalendar === null || this.outputCalendar === \"gregory\");\n    return isActuallyEn && hasNoWeirdness ? \"en\" : \"intl\";\n  }\n\n  clone(alts) {\n    if (!alts || Object.getOwnPropertyNames(alts).length === 0) {\n      return this;\n    } else {\n      return Locale.create(\n        alts.locale || this.specifiedLocale,\n        alts.numberingSystem || this.numberingSystem,\n        alts.outputCalendar || this.outputCalendar,\n        validateWeekSettings(alts.weekSettings) || this.weekSettings,\n        alts.defaultToEN || false\n      );\n    }\n  }\n\n  redefaultToEN(alts = {}) {\n    return this.clone({ ...alts, defaultToEN: true });\n  }\n\n  redefaultToSystem(alts = {}) {\n    return this.clone({ ...alts, defaultToEN: false });\n  }\n\n  months(length, format = false) {\n    return listStuff(this, length, English.months, () => {\n      const intl = format ? { month: length, day: \"numeric\" } : { month: length },\n        formatStr = format ? \"format\" : \"standalone\";\n      if (!this.monthsCache[formatStr][length]) {\n        this.monthsCache[formatStr][length] = mapMonths((dt) => this.extract(dt, intl, \"month\"));\n      }\n      return this.monthsCache[formatStr][length];\n    });\n  }\n\n  weekdays(length, format = false) {\n    return listStuff(this, length, English.weekdays, () => {\n      const intl = format\n          ? { weekday: length, year: \"numeric\", month: \"long\", day: \"numeric\" }\n          : { weekday: length },\n        formatStr = format ? \"format\" : \"standalone\";\n      if (!this.weekdaysCache[formatStr][length]) {\n        this.weekdaysCache[formatStr][length] = mapWeekdays((dt) =>\n          this.extract(dt, intl, \"weekday\")\n        );\n      }\n      return this.weekdaysCache[formatStr][length];\n    });\n  }\n\n  meridiems() {\n    return listStuff(\n      this,\n      undefined,\n      () => English.meridiems,\n      () => {\n        // In theory there could be aribitrary day periods. We're gonna assume there are exactly two\n        // for AM and PM. This is probably wrong, but it's makes parsing way easier.\n        if (!this.meridiemCache) {\n          const intl = { hour: \"numeric\", hourCycle: \"h12\" };\n          this.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(\n            (dt) => this.extract(dt, intl, \"dayperiod\")\n          );\n        }\n\n        return this.meridiemCache;\n      }\n    );\n  }\n\n  eras(length) {\n    return listStuff(this, length, English.eras, () => {\n      const intl = { era: length };\n\n      // This is problematic. Different calendars are going to define eras totally differently. What I need is the minimum set of dates\n      // to definitely enumerate them.\n      if (!this.eraCache[length]) {\n        this.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map((dt) =>\n          this.extract(dt, intl, \"era\")\n        );\n      }\n\n      return this.eraCache[length];\n    });\n  }\n\n  extract(dt, intlOpts, field) {\n    const df = this.dtFormatter(dt, intlOpts),\n      results = df.formatToParts(),\n      matching = results.find((m) => m.type.toLowerCase() === field);\n    return matching ? matching.value : null;\n  }\n\n  numberFormatter(opts = {}) {\n    // this forcesimple option is never used (the only caller short-circuits on it, but it seems safer to leave)\n    // (in contrast, the rest of the condition is used heavily)\n    return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);\n  }\n\n  dtFormatter(dt, intlOpts = {}) {\n    return new PolyDateFormatter(dt, this.intl, intlOpts);\n  }\n\n  relFormatter(opts = {}) {\n    return new PolyRelFormatter(this.intl, this.isEnglish(), opts);\n  }\n\n  listFormatter(opts = {}) {\n    return getCachedLF(this.intl, opts);\n  }\n\n  isEnglish() {\n    return (\n      this.locale === \"en\" ||\n      this.locale.toLowerCase() === \"en-us\" ||\n      getCachedIntResolvedOptions(this.intl).locale.startsWith(\"en-us\")\n    );\n  }\n\n  getWeekSettings() {\n    if (this.weekSettings) {\n      return this.weekSettings;\n    } else if (!hasLocaleWeekInfo()) {\n      return fallbackWeekSettings;\n    } else {\n      return getCachedWeekInfo(this.locale);\n    }\n  }\n\n  getStartOfWeek() {\n    return this.getWeekSettings().firstDay;\n  }\n\n  getMinDaysInFirstWeek() {\n    return this.getWeekSettings().minimalDays;\n  }\n\n  getWeekendDays() {\n    return this.getWeekSettings().weekend;\n  }\n\n  equals(other) {\n    return (\n      this.locale === other.locale &&\n      this.numberingSystem === other.numberingSystem &&\n      this.outputCalendar === other.outputCalendar\n    );\n  }\n\n  toString() {\n    return `Locale(${this.locale}, ${this.numberingSystem}, ${this.outputCalendar})`;\n  }\n}\n","import { formatOffset, signedOffset } from \"../impl/util.js\";\nimport Zone from \"../zone.js\";\n\nlet singleton = null;\n\n/**\n * A zone with a fixed offset (meaning no DST)\n * @implements {Zone}\n */\nexport default class FixedOffsetZone extends Zone {\n  /**\n   * Get a singleton instance of UTC\n   * @return {FixedOffsetZone}\n   */\n  static get utcInstance() {\n    if (singleton === null) {\n      singleton = new FixedOffsetZone(0);\n    }\n    return singleton;\n  }\n\n  /**\n   * Get an instance with a specified offset\n   * @param {number} offset - The offset in minutes\n   * @return {FixedOffsetZone}\n   */\n  static instance(offset) {\n    return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);\n  }\n\n  /**\n   * Get an instance of FixedOffsetZone from a UTC offset string, like \"UTC+6\"\n   * @param {string} s - The offset string to parse\n   * @example FixedOffsetZone.parseSpecifier(\"UTC+6\")\n   * @example FixedOffsetZone.parseSpecifier(\"UTC+06\")\n   * @example FixedOffsetZone.parseSpecifier(\"UTC-6:00\")\n   * @return {FixedOffsetZone}\n   */\n  static parseSpecifier(s) {\n    if (s) {\n      const r = s.match(/^utc(?:([+-]\\d{1,2})(?::(\\d{2}))?)?$/i);\n      if (r) {\n        return new FixedOffsetZone(signedOffset(r[1], r[2]));\n      }\n    }\n    return null;\n  }\n\n  constructor(offset) {\n    super();\n    /** @private **/\n    this.fixed = offset;\n  }\n\n  /**\n   * The type of zone. `fixed` for all instances of `FixedOffsetZone`.\n   * @override\n   * @type {string}\n   */\n  get type() {\n    return \"fixed\";\n  }\n\n  /**\n   * The name of this zone.\n   * All fixed zones' names always start with \"UTC\" (plus optional offset)\n   * @override\n   * @type {string}\n   */\n  get name() {\n    return this.fixed === 0 ? \"UTC\" : `UTC${formatOffset(this.fixed, \"narrow\")}`;\n  }\n\n  /**\n   * The IANA name of this zone, i.e. `Etc/UTC` or `Etc/GMT+/-nn`\n   *\n   * @override\n   * @type {string}\n   */\n  get ianaName() {\n    if (this.fixed === 0) {\n      return \"Etc/UTC\";\n    } else {\n      return `Etc/GMT${formatOffset(-this.fixed, \"narrow\")}`;\n    }\n  }\n\n  /**\n   * Returns the offset's common name at the specified timestamp.\n   *\n   * For fixed offset zones this equals to the zone name.\n   * @override\n   */\n  offsetName() {\n    return this.name;\n  }\n\n  /**\n   * Returns the offset's value as a string\n   * @override\n   * @param {number} ts - Epoch milliseconds for which to get the offset\n   * @param {string} format - What style of offset to return.\n   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively\n   * @return {string}\n   */\n  formatOffset(ts, format) {\n    return formatOffset(this.fixed, format);\n  }\n\n  /**\n   * Returns whether the offset is known to be fixed for the whole year:\n   * Always returns true for all fixed offset zones.\n   * @override\n   * @type {boolean}\n   */\n  get isUniversal() {\n    return true;\n  }\n\n  /**\n   * Return the offset in minutes for this zone at the specified timestamp.\n   *\n   * For fixed offset zones, this is constant and does not depend on a timestamp.\n   * @override\n   * @return {number}\n   */\n  offset() {\n    return this.fixed;\n  }\n\n  /**\n   * Return whether this Zone is equal to another zone (i.e. also fixed and same offset)\n   * @override\n   * @param {Zone} otherZone - the zone to compare\n   * @return {boolean}\n   */\n  equals(otherZone) {\n    return otherZone.type === \"fixed\" && otherZone.fixed === this.fixed;\n  }\n\n  /**\n   * Return whether this Zone is valid:\n   * All fixed offset zones are valid.\n   * @override\n   * @type {boolean}\n   */\n  get isValid() {\n    return true;\n  }\n}\n","import Zone from \"../zone.js\";\n\n/**\n * A zone that failed to parse. You should never need to instantiate this.\n * @implements {Zone}\n */\nexport default class InvalidZone extends Zone {\n  constructor(zoneName) {\n    super();\n    /**  @private */\n    this.zoneName = zoneName;\n  }\n\n  /** @override **/\n  get type() {\n    return \"invalid\";\n  }\n\n  /** @override **/\n  get name() {\n    return this.zoneName;\n  }\n\n  /** @override **/\n  get isUniversal() {\n    return false;\n  }\n\n  /** @override **/\n  offsetName() {\n    return null;\n  }\n\n  /** @override **/\n  formatOffset() {\n    return \"\";\n  }\n\n  /** @override **/\n  offset() {\n    return NaN;\n  }\n\n  /** @override **/\n  equals() {\n    return false;\n  }\n\n  /** @override **/\n  get isValid() {\n    return false;\n  }\n}\n","/**\n * @private\n */\n\nimport Zone from \"../zone.js\";\nimport IANAZone from \"../zones/IANAZone.js\";\nimport FixedOffsetZone from \"../zones/fixedOffsetZone.js\";\nimport InvalidZone from \"../zones/invalidZone.js\";\n\nimport { isUndefined, isString, isNumber } from \"./util.js\";\nimport SystemZone from \"../zones/systemZone.js\";\n\nexport function normalizeZone(input, defaultZone) {\n  let offset;\n  if (isUndefined(input) || input === null) {\n    return defaultZone;\n  } else if (input instanceof Zone) {\n    return input;\n  } else if (isString(input)) {\n    const lowered = input.toLowerCase();\n    if (lowered === \"default\") return defaultZone;\n    else if (lowered === \"local\" || lowered === \"system\") return SystemZone.instance;\n    else if (lowered === \"utc\" || lowered === \"gmt\") return FixedOffsetZone.utcInstance;\n    else return FixedOffsetZone.parseSpecifier(lowered) || IANAZone.create(input);\n  } else if (isNumber(input)) {\n    return FixedOffsetZone.instance(input);\n  } else if (typeof input === \"object\" && \"offset\" in input && typeof input.offset === \"function\") {\n    // This is dumb, but the instanceof check above doesn't seem to really work\n    // so we're duck checking it\n    return input;\n  } else {\n    return new InvalidZone(input);\n  }\n}\n","const numberingSystems = {\n  arab: \"[\\u0660-\\u0669]\",\n  arabext: \"[\\u06F0-\\u06F9]\",\n  bali: \"[\\u1B50-\\u1B59]\",\n  beng: \"[\\u09E6-\\u09EF]\",\n  deva: \"[\\u0966-\\u096F]\",\n  fullwide: \"[\\uFF10-\\uFF19]\",\n  gujr: \"[\\u0AE6-\\u0AEF]\",\n  hanidec: \"[〇|一|二|三|四|五|六|七|八|九]\",\n  khmr: \"[\\u17E0-\\u17E9]\",\n  knda: \"[\\u0CE6-\\u0CEF]\",\n  laoo: \"[\\u0ED0-\\u0ED9]\",\n  limb: \"[\\u1946-\\u194F]\",\n  mlym: \"[\\u0D66-\\u0D6F]\",\n  mong: \"[\\u1810-\\u1819]\",\n  mymr: \"[\\u1040-\\u1049]\",\n  orya: \"[\\u0B66-\\u0B6F]\",\n  tamldec: \"[\\u0BE6-\\u0BEF]\",\n  telu: \"[\\u0C66-\\u0C6F]\",\n  thai: \"[\\u0E50-\\u0E59]\",\n  tibt: \"[\\u0F20-\\u0F29]\",\n  latn: \"\\\\d\",\n};\n\nconst numberingSystemsUTF16 = {\n  arab: [1632, 1641],\n  arabext: [1776, 1785],\n  bali: [6992, 7001],\n  beng: [2534, 2543],\n  deva: [2406, 2415],\n  fullwide: [65296, 65303],\n  gujr: [2790, 2799],\n  khmr: [6112, 6121],\n  knda: [3302, 3311],\n  laoo: [3792, 3801],\n  limb: [6470, 6479],\n  mlym: [3430, 3439],\n  mong: [6160, 6169],\n  mymr: [4160, 4169],\n  orya: [2918, 2927],\n  tamldec: [3046, 3055],\n  telu: [3174, 3183],\n  thai: [3664, 3673],\n  tibt: [3872, 3881],\n};\n\nconst hanidecChars = numberingSystems.hanidec.replace(/[\\[|\\]]/g, \"\").split(\"\");\n\nexport function parseDigits(str) {\n  let value = parseInt(str, 10);\n  if (isNaN(value)) {\n    value = \"\";\n    for (let i = 0; i < str.length; i++) {\n      const code = str.charCodeAt(i);\n\n      if (str[i].search(numberingSystems.hanidec) !== -1) {\n        value += hanidecChars.indexOf(str[i]);\n      } else {\n        for (const key in numberingSystemsUTF16) {\n          const [min, max] = numberingSystemsUTF16[key];\n          if (code >= min && code <= max) {\n            value += code - min;\n          }\n        }\n      }\n    }\n    return parseInt(value, 10);\n  } else {\n    return value;\n  }\n}\n\n// cache of {numberingSystem: {append: regex}}\nconst digitRegexCache = new Map();\nexport function resetDigitRegexCache() {\n  digitRegexCache.clear();\n}\n\nexport function digitRegex({ numberingSystem }, append = \"\") {\n  const ns = numberingSystem || \"latn\";\n\n  let appendCache = digitRegexCache.get(ns);\n  if (appendCache === undefined) {\n    appendCache = new Map();\n    digitRegexCache.set(ns, appendCache);\n  }\n  let regex = appendCache.get(append);\n  if (regex === undefined) {\n    regex = new RegExp(`${numberingSystems[ns]}${append}`);\n    appendCache.set(append, regex);\n  }\n\n  return regex;\n}\n","import SystemZone from \"./zones/systemZone.js\";\nimport IANAZone from \"./zones/IANAZone.js\";\nimport Locale from \"./impl/locale.js\";\nimport DateTime from \"./datetime.js\";\n\nimport { normalizeZone } from \"./impl/zoneUtil.js\";\nimport { validateWeekSettings } from \"./impl/util.js\";\nimport { resetDigitRegexCache } from \"./impl/digits.js\";\n\nlet now = () => Date.now(),\n  defaultZone = \"system\",\n  defaultLocale = null,\n  defaultNumberingSystem = null,\n  defaultOutputCalendar = null,\n  twoDigitCutoffYear = 60,\n  throwOnInvalid,\n  defaultWeekSettings = null;\n\n/**\n * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.\n */\nexport default class Settings {\n  /**\n   * Get the callback for returning the current timestamp.\n   * @type {function}\n   */\n  static get now() {\n    return now;\n  }\n\n  /**\n   * Set the callback for returning the current timestamp.\n   * The function should return a number, which will be interpreted as an Epoch millisecond count\n   * @type {function}\n   * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future\n   * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time\n   */\n  static set now(n) {\n    now = n;\n  }\n\n  /**\n   * Set the default time zone to create DateTimes in. Does not affect existing instances.\n   * Use the value \"system\" to reset this value to the system's time zone.\n   * @type {string}\n   */\n  static set defaultZone(zone) {\n    defaultZone = zone;\n  }\n\n  /**\n   * Get the default time zone object currently used to create DateTimes. Does not affect existing instances.\n   * The default value is the system's time zone (the one set on the machine that runs this code).\n   * @type {Zone}\n   */\n  static get defaultZone() {\n    return normalizeZone(defaultZone, SystemZone.instance);\n  }\n\n  /**\n   * Get the default locale to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultLocale() {\n    return defaultLocale;\n  }\n\n  /**\n   * Set the default locale to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultLocale(locale) {\n    defaultLocale = locale;\n  }\n\n  /**\n   * Get the default numbering system to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultNumberingSystem() {\n    return defaultNumberingSystem;\n  }\n\n  /**\n   * Set the default numbering system to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultNumberingSystem(numberingSystem) {\n    defaultNumberingSystem = numberingSystem;\n  }\n\n  /**\n   * Get the default output calendar to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultOutputCalendar() {\n    return defaultOutputCalendar;\n  }\n\n  /**\n   * Set the default output calendar to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultOutputCalendar(outputCalendar) {\n    defaultOutputCalendar = outputCalendar;\n  }\n\n  /**\n   * @typedef {Object} WeekSettings\n   * @property {number} firstDay\n   * @property {number} minimalDays\n   * @property {number[]} weekend\n   */\n\n  /**\n   * @return {WeekSettings|null}\n   */\n  static get defaultWeekSettings() {\n    return defaultWeekSettings;\n  }\n\n  /**\n   * Allows overriding the default locale week settings, i.e. the start of the week, the weekend and\n   * how many days are required in the first week of a year.\n   * Does not affect existing instances.\n   *\n   * @param {WeekSettings|null} weekSettings\n   */\n  static set defaultWeekSettings(weekSettings) {\n    defaultWeekSettings = validateWeekSettings(weekSettings);\n  }\n\n  /**\n   * Get the cutoff year for whether a 2-digit year string is interpreted in the current or previous century. Numbers higher than the cutoff will be considered to mean 19xx and numbers lower or equal to the cutoff will be considered 20xx.\n   * @type {number}\n   */\n  static get twoDigitCutoffYear() {\n    return twoDigitCutoffYear;\n  }\n\n  /**\n   * Set the cutoff year for whether a 2-digit year string is interpreted in the current or previous century. Numbers higher than the cutoff will be considered to mean 19xx and numbers lower or equal to the cutoff will be considered 20xx.\n   * @type {number}\n   * @example Settings.twoDigitCutoffYear = 0 // all 'yy' are interpreted as 20th century\n   * @example Settings.twoDigitCutoffYear = 99 // all 'yy' are interpreted as 21st century\n   * @example Settings.twoDigitCutoffYear = 50 // '49' -> 2049; '50' -> 1950\n   * @example Settings.twoDigitCutoffYear = 1950 // interpreted as 50\n   * @example Settings.twoDigitCutoffYear = 2050 // ALSO interpreted as 50\n   */\n  static set twoDigitCutoffYear(cutoffYear) {\n    twoDigitCutoffYear = cutoffYear % 100;\n  }\n\n  /**\n   * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {boolean}\n   */\n  static get throwOnInvalid() {\n    return throwOnInvalid;\n  }\n\n  /**\n   * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {boolean}\n   */\n  static set throwOnInvalid(t) {\n    throwOnInvalid = t;\n  }\n\n  /**\n   * Reset Luxon's global caches. Should only be necessary in testing scenarios.\n   * @return {void}\n   */\n  static resetCaches() {\n    Locale.resetCache();\n    IANAZone.resetCache();\n    DateTime.resetCache();\n    resetDigitRegexCache();\n  }\n}\n","export default class Invalid {\n  constructor(reason, explanation) {\n    this.reason = reason;\n    this.explanation = explanation;\n  }\n\n  toMessage() {\n    if (this.explanation) {\n      return `${this.reason}: ${this.explanation}`;\n    } else {\n      return this.reason;\n    }\n  }\n}\n","import {\n  integerBetween,\n  isLeapYear,\n  timeObject,\n  daysInYear,\n  daysInMonth,\n  weeksInWeekYear,\n  isInteger,\n  isUndefined,\n} from \"./util.js\";\nimport Invalid from \"./invalid.js\";\nimport { ConflictingSpecificationError } from \"../errors.js\";\n\nconst nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],\n  leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];\n\nfunction unitOutOfRange(unit, value) {\n  return new Invalid(\n    \"unit out of range\",\n    `you specified ${value} (of type ${typeof value}) as a ${unit}, which is invalid`\n  );\n}\n\nexport function dayOfWeek(year, month, day) {\n  const d = new Date(Date.UTC(year, month - 1, day));\n\n  if (year < 100 && year >= 0) {\n    d.setUTCFullYear(d.getUTCFullYear() - 1900);\n  }\n\n  const js = d.getUTCDay();\n\n  return js === 0 ? 7 : js;\n}\n\nfunction computeOrdinal(year, month, day) {\n  return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];\n}\n\nfunction uncomputeOrdinal(year, ordinal) {\n  const table = isLeapYear(year) ? leapLadder : nonLeapLadder,\n    month0 = table.findIndex((i) => i < ordinal),\n    day = ordinal - table[month0];\n  return { month: month0 + 1, day };\n}\n\nexport function isoWeekdayToLocal(isoWeekday, startOfWeek) {\n  return ((isoWeekday - startOfWeek + 7) % 7) + 1;\n}\n\n/**\n * @private\n */\n\nexport function gregorianToWeek(gregObj, minDaysInFirstWeek = 4, startOfWeek = 1) {\n  const { year, month, day } = gregObj,\n    ordinal = computeOrdinal(year, month, day),\n    weekday = isoWeekdayToLocal(dayOfWeek(year, month, day), startOfWeek);\n\n  let weekNumber = Math.floor((ordinal - weekday + 14 - minDaysInFirstWeek) / 7),\n    weekYear;\n\n  if (weekNumber < 1) {\n    weekYear = year - 1;\n    weekNumber = weeksInWeekYear(weekYear, minDaysInFirstWeek, startOfWeek);\n  } else if (weekNumber > weeksInWeekYear(year, minDaysInFirstWeek, startOfWeek)) {\n    weekYear = year + 1;\n    weekNumber = 1;\n  } else {\n    weekYear = year;\n  }\n\n  return { weekYear, weekNumber, weekday, ...timeObject(gregObj) };\n}\n\nexport function weekToGregorian(weekData, minDaysInFirstWeek = 4, startOfWeek = 1) {\n  const { weekYear, weekNumber, weekday } = weekData,\n    weekdayOfJan4 = isoWeekdayToLocal(dayOfWeek(weekYear, 1, minDaysInFirstWeek), startOfWeek),\n    yearInDays = daysInYear(weekYear);\n\n  let ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 7 + minDaysInFirstWeek,\n    year;\n\n  if (ordinal < 1) {\n    year = weekYear - 1;\n    ordinal += daysInYear(year);\n  } else if (ordinal > yearInDays) {\n    year = weekYear + 1;\n    ordinal -= daysInYear(weekYear);\n  } else {\n    year = weekYear;\n  }\n\n  const { month, day } = uncomputeOrdinal(year, ordinal);\n  return { year, month, day, ...timeObject(weekData) };\n}\n\nexport function gregorianToOrdinal(gregData) {\n  const { year, month, day } = gregData;\n  const ordinal = computeOrdinal(year, month, day);\n  return { year, ordinal, ...timeObject(gregData) };\n}\n\nexport function ordinalToGregorian(ordinalData) {\n  const { year, ordinal } = ordinalData;\n  const { month, day } = uncomputeOrdinal(year, ordinal);\n  return { year, month, day, ...timeObject(ordinalData) };\n}\n\n/**\n * Check if local week units like localWeekday are used in obj.\n * If so, validates that they are not mixed with ISO week units and then copies them to the normal week unit properties.\n * Modifies obj in-place!\n * @param obj the object values\n */\nexport function usesLocalWeekValues(obj, loc) {\n  const hasLocaleWeekData =\n    !isUndefined(obj.localWeekday) ||\n    !isUndefined(obj.localWeekNumber) ||\n    !isUndefined(obj.localWeekYear);\n  if (hasLocaleWeekData) {\n    const hasIsoWeekData =\n      !isUndefined(obj.weekday) || !isUndefined(obj.weekNumber) || !isUndefined(obj.weekYear);\n\n    if (hasIsoWeekData) {\n      throw new ConflictingSpecificationError(\n        \"Cannot mix locale-based week fields with ISO-based week fields\"\n      );\n    }\n    if (!isUndefined(obj.localWeekday)) obj.weekday = obj.localWeekday;\n    if (!isUndefined(obj.localWeekNumber)) obj.weekNumber = obj.localWeekNumber;\n    if (!isUndefined(obj.localWeekYear)) obj.weekYear = obj.localWeekYear;\n    delete obj.localWeekday;\n    delete obj.localWeekNumber;\n    delete obj.localWeekYear;\n    return {\n      minDaysInFirstWeek: loc.getMinDaysInFirstWeek(),\n      startOfWeek: loc.getStartOfWeek(),\n    };\n  } else {\n    return { minDaysInFirstWeek: 4, startOfWeek: 1 };\n  }\n}\n\nexport function hasInvalidWeekData(obj, minDaysInFirstWeek = 4, startOfWeek = 1) {\n  const validYear = isInteger(obj.weekYear),\n    validWeek = integerBetween(\n      obj.weekNumber,\n      1,\n      weeksInWeekYear(obj.weekYear, minDaysInFirstWeek, startOfWeek)\n    ),\n    validWeekday = integerBetween(obj.weekday, 1, 7);\n\n  if (!validYear) {\n    return unitOutOfRange(\"weekYear\", obj.weekYear);\n  } else if (!validWeek) {\n    return unitOutOfRange(\"week\", obj.weekNumber);\n  } else if (!validWeekday) {\n    return unitOutOfRange(\"weekday\", obj.weekday);\n  } else return false;\n}\n\nexport function hasInvalidOrdinalData(obj) {\n  const validYear = isInteger(obj.year),\n    validOrdinal = integerBetween(obj.ordinal, 1, daysInYear(obj.year));\n\n  if (!validYear) {\n    return unitOutOfRange(\"year\", obj.year);\n  } else if (!validOrdinal) {\n    return unitOutOfRange(\"ordinal\", obj.ordinal);\n  } else return false;\n}\n\nexport function hasInvalidGregorianData(obj) {\n  const validYear = isInteger(obj.year),\n    validMonth = integerBetween(obj.month, 1, 12),\n    validDay = integerBetween(obj.day, 1, daysInMonth(obj.year, obj.month));\n\n  if (!validYear) {\n    return unitOutOfRange(\"year\", obj.year);\n  } else if (!validMonth) {\n    return unitOutOfRange(\"month\", obj.month);\n  } else if (!validDay) {\n    return unitOutOfRange(\"day\", obj.day);\n  } else return false;\n}\n\nexport function hasInvalidTimeData(obj) {\n  const { hour, minute, second, millisecond } = obj;\n  const validHour =\n      integerBetween(hour, 0, 23) ||\n      (hour === 24 && minute === 0 && second === 0 && millisecond === 0),\n    validMinute = integerBetween(minute, 0, 59),\n    validSecond = integerBetween(second, 0, 59),\n    validMillisecond = integerBetween(millisecond, 0, 999);\n\n  if (!validHour) {\n    return unitOutOfRange(\"hour\", hour);\n  } else if (!validMinute) {\n    return unitOutOfRange(\"minute\", minute);\n  } else if (!validSecond) {\n    return unitOutOfRange(\"second\", second);\n  } else if (!validMillisecond) {\n    return unitOutOfRange(\"millisecond\", millisecond);\n  } else return false;\n}\n","/*\n  This is just a junk drawer, containing anything used across multiple classes.\n  Because Luxon is small(ish), this should stay small and we won't worry about splitting\n  it up into, say, parsingUtil.js and basicUtil.js and so on. But they are divided up by feature area.\n*/\n\nimport { InvalidArgumentError } from \"../errors.js\";\nimport Settings from \"../settings.js\";\nimport { dayOfWeek, isoWeekdayToLocal } from \"./conversions.js\";\n\n/**\n * @private\n */\n\n// TYPES\n\nexport function isUndefined(o) {\n  return typeof o === \"undefined\";\n}\n\nexport function isNumber(o) {\n  return typeof o === \"number\";\n}\n\nexport function isInteger(o) {\n  return typeof o === \"number\" && o % 1 === 0;\n}\n\nexport function isString(o) {\n  return typeof o === \"string\";\n}\n\nexport function isDate(o) {\n  return Object.prototype.toString.call(o) === \"[object Date]\";\n}\n\n// CAPABILITIES\n\nexport function hasRelative() {\n  try {\n    return typeof Intl !== \"undefined\" && !!Intl.RelativeTimeFormat;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport function hasLocaleWeekInfo() {\n  try {\n    return (\n      typeof Intl !== \"undefined\" &&\n      !!Intl.Locale &&\n      (\"weekInfo\" in Intl.Locale.prototype || \"getWeekInfo\" in Intl.Locale.prototype)\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\n// OBJECTS AND ARRAYS\n\nexport function maybeArray(thing) {\n  return Array.isArray(thing) ? thing : [thing];\n}\n\nexport function bestBy(arr, by, compare) {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  return arr.reduce((best, next) => {\n    const pair = [by(next), next];\n    if (!best) {\n      return pair;\n    } else if (compare(best[0], pair[0]) === best[0]) {\n      return best;\n    } else {\n      return pair;\n    }\n  }, null)[1];\n}\n\nexport function pick(obj, keys) {\n  return keys.reduce((a, k) => {\n    a[k] = obj[k];\n    return a;\n  }, {});\n}\n\nexport function hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nexport function validateWeekSettings(settings) {\n  if (settings == null) {\n    return null;\n  } else if (typeof settings !== \"object\") {\n    throw new InvalidArgumentError(\"Week settings must be an object\");\n  } else {\n    if (\n      !integerBetween(settings.firstDay, 1, 7) ||\n      !integerBetween(settings.minimalDays, 1, 7) ||\n      !Array.isArray(settings.weekend) ||\n      settings.weekend.some((v) => !integerBetween(v, 1, 7))\n    ) {\n      throw new InvalidArgumentError(\"Invalid week settings\");\n    }\n    return {\n      firstDay: settings.firstDay,\n      minimalDays: settings.minimalDays,\n      weekend: Array.from(settings.weekend),\n    };\n  }\n}\n\n// NUMBERS AND STRINGS\n\nexport function integerBetween(thing, bottom, top) {\n  return isInteger(thing) && thing >= bottom && thing <= top;\n}\n\n// x % n but takes the sign of n instead of x\nexport function floorMod(x, n) {\n  return x - n * Math.floor(x / n);\n}\n\nexport function padStart(input, n = 2) {\n  const isNeg = input < 0;\n  let padded;\n  if (isNeg) {\n    padded = \"-\" + (\"\" + -input).padStart(n, \"0\");\n  } else {\n    padded = (\"\" + input).padStart(n, \"0\");\n  }\n  return padded;\n}\n\nexport function parseInteger(string) {\n  if (isUndefined(string) || string === null || string === \"\") {\n    return undefined;\n  } else {\n    return parseInt(string, 10);\n  }\n}\n\nexport function parseFloating(string) {\n  if (isUndefined(string) || string === null || string === \"\") {\n    return undefined;\n  } else {\n    return parseFloat(string);\n  }\n}\n\nexport function parseMillis(fraction) {\n  // Return undefined (instead of 0) in these cases, where fraction is not set\n  if (isUndefined(fraction) || fraction === null || fraction === \"\") {\n    return undefined;\n  } else {\n    const f = parseFloat(\"0.\" + fraction) * 1000;\n    return Math.floor(f);\n  }\n}\n\nexport function roundTo(number, digits, towardZero = false) {\n  const factor = 10 ** digits,\n    rounder = towardZero ? Math.trunc : Math.round;\n  return rounder(number * factor) / factor;\n}\n\n// DATE BASICS\n\nexport function isLeapYear(year) {\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\n\nexport function daysInYear(year) {\n  return isLeapYear(year) ? 366 : 365;\n}\n\nexport function daysInMonth(year, month) {\n  const modMonth = floorMod(month - 1, 12) + 1,\n    modYear = year + (month - modMonth) / 12;\n\n  if (modMonth === 2) {\n    return isLeapYear(modYear) ? 29 : 28;\n  } else {\n    return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][modMonth - 1];\n  }\n}\n\n// convert a calendar object to a local timestamp (epoch, but with the offset baked in)\nexport function objToLocalTS(obj) {\n  let d = Date.UTC(\n    obj.year,\n    obj.month - 1,\n    obj.day,\n    obj.hour,\n    obj.minute,\n    obj.second,\n    obj.millisecond\n  );\n\n  // for legacy reasons, years between 0 and 99 are interpreted as 19XX; revert that\n  if (obj.year < 100 && obj.year >= 0) {\n    d = new Date(d);\n    // set the month and day again, this is necessary because year 2000 is a leap year, but year 100 is not\n    // so if obj.year is in 99, but obj.day makes it roll over into year 100,\n    // the calculations done by Date.UTC are using year 2000 - which is incorrect\n    d.setUTCFullYear(obj.year, obj.month - 1, obj.day);\n  }\n  return +d;\n}\n\n// adapted from moment.js: https://github.com/moment/moment/blob/000ac1800e620f770f4eb31b5ae908f6167b0ab2/src/lib/units/week-calendar-utils.js\nfunction firstWeekOffset(year, minDaysInFirstWeek, startOfWeek) {\n  const fwdlw = isoWeekdayToLocal(dayOfWeek(year, 1, minDaysInFirstWeek), startOfWeek);\n  return -fwdlw + minDaysInFirstWeek - 1;\n}\n\nexport function weeksInWeekYear(weekYear, minDaysInFirstWeek = 4, startOfWeek = 1) {\n  const weekOffset = firstWeekOffset(weekYear, minDaysInFirstWeek, startOfWeek);\n  const weekOffsetNext = firstWeekOffset(weekYear + 1, minDaysInFirstWeek, startOfWeek);\n  return (daysInYear(weekYear) - weekOffset + weekOffsetNext) / 7;\n}\n\nexport function untruncateYear(year) {\n  if (year > 99) {\n    return year;\n  } else return year > Settings.twoDigitCutoffYear ? 1900 + year : 2000 + year;\n}\n\n// PARSING\n\nexport function parseZoneInfo(ts, offsetFormat, locale, timeZone = null) {\n  const date = new Date(ts),\n    intlOpts = {\n      hourCycle: \"h23\",\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    };\n\n  if (timeZone) {\n    intlOpts.timeZone = timeZone;\n  }\n\n  const modified = { timeZoneName: offsetFormat, ...intlOpts };\n\n  const parsed = new Intl.DateTimeFormat(locale, modified)\n    .formatToParts(date)\n    .find((m) => m.type.toLowerCase() === \"timezonename\");\n  return parsed ? parsed.value : null;\n}\n\n// signedOffset('-5', '30') -> -330\nexport function signedOffset(offHourStr, offMinuteStr) {\n  let offHour = parseInt(offHourStr, 10);\n\n  // don't || this because we want to preserve -0\n  if (Number.isNaN(offHour)) {\n    offHour = 0;\n  }\n\n  const offMin = parseInt(offMinuteStr, 10) || 0,\n    offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;\n  return offHour * 60 + offMinSigned;\n}\n\n// COERCION\n\nexport function asNumber(value) {\n  const numericValue = Number(value);\n  if (typeof value === \"boolean\" || value === \"\" || Number.isNaN(numericValue))\n    throw new InvalidArgumentError(`Invalid unit value ${value}`);\n  return numericValue;\n}\n\nexport function normalizeObject(obj, normalizer) {\n  const normalized = {};\n  for (const u in obj) {\n    if (hasOwnProperty(obj, u)) {\n      const v = obj[u];\n      if (v === undefined || v === null) continue;\n      normalized[normalizer(u)] = asNumber(v);\n    }\n  }\n  return normalized;\n}\n\n/**\n * Returns the offset's value as a string\n * @param {number} ts - Epoch milliseconds for which to get the offset\n * @param {string} format - What style of offset to return.\n *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively\n * @return {string}\n */\nexport function formatOffset(offset, format) {\n  const hours = Math.trunc(Math.abs(offset / 60)),\n    minutes = Math.trunc(Math.abs(offset % 60)),\n    sign = offset >= 0 ? \"+\" : \"-\";\n\n  switch (format) {\n    case \"short\":\n      return `${sign}${padStart(hours, 2)}:${padStart(minutes, 2)}`;\n    case \"narrow\":\n      return `${sign}${hours}${minutes > 0 ? `:${minutes}` : \"\"}`;\n    case \"techie\":\n      return `${sign}${padStart(hours, 2)}${padStart(minutes, 2)}`;\n    default:\n      throw new RangeError(`Value format ${format} is out of range for property format`);\n  }\n}\n\nexport function timeObject(obj) {\n  return pick(obj, [\"hour\", \"minute\", \"second\", \"millisecond\"]);\n}\n","import * as Formats from \"./formats.js\";\nimport { pick } from \"./util.js\";\n\nfunction stringify(obj) {\n  return JSON.stringify(obj, Object.keys(obj).sort());\n}\n\n/**\n * @private\n */\n\nexport const monthsLong = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\n\nexport const monthsShort = [\n  \"Jan\",\n  \"Feb\",\n  \"Mar\",\n  \"Apr\",\n  \"May\",\n  \"Jun\",\n  \"Jul\",\n  \"Aug\",\n  \"Sep\",\n  \"Oct\",\n  \"Nov\",\n  \"Dec\",\n];\n\nexport const monthsNarrow = [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"];\n\nexport function months(length) {\n  switch (length) {\n    case \"narrow\":\n      return [...monthsNarrow];\n    case \"short\":\n      return [...monthsShort];\n    case \"long\":\n      return [...monthsLong];\n    case \"numeric\":\n      return [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"];\n    case \"2-digit\":\n      return [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"];\n    default:\n      return null;\n  }\n}\n\nexport const weekdaysLong = [\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n  \"Sunday\",\n];\n\nexport const weekdaysShort = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n\nexport const weekdaysNarrow = [\"M\", \"T\", \"W\", \"T\", \"F\", \"S\", \"S\"];\n\nexport function weekdays(length) {\n  switch (length) {\n    case \"narrow\":\n      return [...weekdaysNarrow];\n    case \"short\":\n      return [...weekdaysShort];\n    case \"long\":\n      return [...weekdaysLong];\n    case \"numeric\":\n      return [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"];\n    default:\n      return null;\n  }\n}\n\nexport const meridiems = [\"AM\", \"PM\"];\n\nexport const erasLong = [\"Before Christ\", \"Anno Domini\"];\n\nexport const erasShort = [\"BC\", \"AD\"];\n\nexport const erasNarrow = [\"B\", \"A\"];\n\nexport function eras(length) {\n  switch (length) {\n    case \"narrow\":\n      return [...erasNarrow];\n    case \"short\":\n      return [...erasShort];\n    case \"long\":\n      return [...erasLong];\n    default:\n      return null;\n  }\n}\n\nexport function meridiemForDateTime(dt) {\n  return meridiems[dt.hour < 12 ? 0 : 1];\n}\n\nexport function weekdayForDateTime(dt, length) {\n  return weekdays(length)[dt.weekday - 1];\n}\n\nexport function monthForDateTime(dt, length) {\n  return months(length)[dt.month - 1];\n}\n\nexport function eraForDateTime(dt, length) {\n  return eras(length)[dt.year < 0 ? 0 : 1];\n}\n\nexport function formatRelativeTime(unit, count, numeric = \"always\", narrow = false) {\n  const units = {\n    years: [\"year\", \"yr.\"],\n    quarters: [\"quarter\", \"qtr.\"],\n    months: [\"month\", \"mo.\"],\n    weeks: [\"week\", \"wk.\"],\n    days: [\"day\", \"day\", \"days\"],\n    hours: [\"hour\", \"hr.\"],\n    minutes: [\"minute\", \"min.\"],\n    seconds: [\"second\", \"sec.\"],\n  };\n\n  const lastable = [\"hours\", \"minutes\", \"seconds\"].indexOf(unit) === -1;\n\n  if (numeric === \"auto\" && lastable) {\n    const isDay = unit === \"days\";\n    switch (count) {\n      case 1:\n        return isDay ? \"tomorrow\" : `next ${units[unit][0]}`;\n      case -1:\n        return isDay ? \"yesterday\" : `last ${units[unit][0]}`;\n      case 0:\n        return isDay ? \"today\" : `this ${units[unit][0]}`;\n      default: // fall through\n    }\n  }\n\n  const isInPast = Object.is(count, -0) || count < 0,\n    fmtValue = Math.abs(count),\n    singular = fmtValue === 1,\n    lilUnits = units[unit],\n    fmtUnit = narrow\n      ? singular\n        ? lilUnits[1]\n        : lilUnits[2] || lilUnits[1]\n      : singular\n      ? units[unit][0]\n      : unit;\n  return isInPast ? `${fmtValue} ${fmtUnit} ago` : `in ${fmtValue} ${fmtUnit}`;\n}\n\nexport function formatString(knownFormat) {\n  // these all have the offsets removed because we don't have access to them\n  // without all the intl stuff this is backfilling\n  const filtered = pick(knownFormat, [\n      \"weekday\",\n      \"era\",\n      \"year\",\n      \"month\",\n      \"day\",\n      \"hour\",\n      \"minute\",\n      \"second\",\n      \"timeZoneName\",\n      \"hourCycle\",\n    ]),\n    key = stringify(filtered),\n    dateTimeHuge = \"EEEE, LLLL d, yyyy, h:mm a\";\n  switch (key) {\n    case stringify(Formats.DATE_SHORT):\n      return \"M/d/yyyy\";\n    case stringify(Formats.DATE_MED):\n      return \"LLL d, yyyy\";\n    case stringify(Formats.DATE_MED_WITH_WEEKDAY):\n      return \"EEE, LLL d, yyyy\";\n    case stringify(Formats.DATE_FULL):\n      return \"LLLL d, yyyy\";\n    case stringify(Formats.DATE_HUGE):\n      return \"EEEE, LLLL d, yyyy\";\n    case stringify(Formats.TIME_SIMPLE):\n      return \"h:mm a\";\n    case stringify(Formats.TIME_WITH_SECONDS):\n      return \"h:mm:ss a\";\n    case stringify(Formats.TIME_WITH_SHORT_OFFSET):\n      return \"h:mm a\";\n    case stringify(Formats.TIME_WITH_LONG_OFFSET):\n      return \"h:mm a\";\n    case stringify(Formats.TIME_24_SIMPLE):\n      return \"HH:mm\";\n    case stringify(Formats.TIME_24_WITH_SECONDS):\n      return \"HH:mm:ss\";\n    case stringify(Formats.TIME_24_WITH_SHORT_OFFSET):\n      return \"HH:mm\";\n    case stringify(Formats.TIME_24_WITH_LONG_OFFSET):\n      return \"HH:mm\";\n    case stringify(Formats.DATETIME_SHORT):\n      return \"M/d/yyyy, h:mm a\";\n    case stringify(Formats.DATETIME_MED):\n      return \"LLL d, yyyy, h:mm a\";\n    case stringify(Formats.DATETIME_FULL):\n      return \"LLLL d, yyyy, h:mm a\";\n    case stringify(Formats.DATETIME_HUGE):\n      return dateTimeHuge;\n    case stringify(Formats.DATETIME_SHORT_WITH_SECONDS):\n      return \"M/d/yyyy, h:mm:ss a\";\n    case stringify(Formats.DATETIME_MED_WITH_SECONDS):\n      return \"LLL d, yyyy, h:mm:ss a\";\n    case stringify(Formats.DATETIME_MED_WITH_WEEKDAY):\n      return \"EEE, d LLL yyyy, h:mm a\";\n    case stringify(Formats.DATETIME_FULL_WITH_SECONDS):\n      return \"LLLL d, yyyy, h:mm:ss a\";\n    case stringify(Formats.DATETIME_HUGE_WITH_SECONDS):\n      return \"EEEE, LLLL d, yyyy, h:mm:ss a\";\n    default:\n      return dateTimeHuge;\n  }\n}\n","import * as English from \"./english.js\";\nimport * as Formats from \"./formats.js\";\nimport { padStart } from \"./util.js\";\n\nfunction stringifyTokens(splits, tokenToString) {\n  let s = \"\";\n  for (const token of splits) {\n    if (token.literal) {\n      s += token.val;\n    } else {\n      s += tokenToString(token.val);\n    }\n  }\n  return s;\n}\n\nconst macroTokenToFormatOpts = {\n  D: Formats.DATE_SHORT,\n  DD: Formats.DATE_MED,\n  DDD: Formats.DATE_FULL,\n  DDDD: Formats.DATE_HUGE,\n  t: Formats.TIME_SIMPLE,\n  tt: Formats.TIME_WITH_SECONDS,\n  ttt: Formats.TIME_WITH_SHORT_OFFSET,\n  tttt: Formats.TIME_WITH_LONG_OFFSET,\n  T: Formats.TIME_24_SIMPLE,\n  TT: Formats.TIME_24_WITH_SECONDS,\n  TTT: Formats.TIME_24_WITH_SHORT_OFFSET,\n  TTTT: Formats.TIME_24_WITH_LONG_OFFSET,\n  f: Formats.DATETIME_SHORT,\n  ff: Formats.DATETIME_MED,\n  fff: Formats.DATETIME_FULL,\n  ffff: Formats.DATETIME_HUGE,\n  F: Formats.DATETIME_SHORT_WITH_SECONDS,\n  FF: Formats.DATETIME_MED_WITH_SECONDS,\n  FFF: Formats.DATETIME_FULL_WITH_SECONDS,\n  FFFF: Formats.DATETIME_HUGE_WITH_SECONDS,\n};\n\n/**\n * @private\n */\n\nexport default class Formatter {\n  static create(locale, opts = {}) {\n    return new Formatter(locale, opts);\n  }\n\n  static parseFormat(fmt) {\n    // white-space is always considered a literal in user-provided formats\n    // the \" \" token has a special meaning (see unitForToken)\n\n    let current = null,\n      currentFull = \"\",\n      bracketed = false;\n    const splits = [];\n    for (let i = 0; i < fmt.length; i++) {\n      const c = fmt.charAt(i);\n      if (c === \"'\") {\n        if (currentFull.length > 0) {\n          splits.push({ literal: bracketed || /^\\s+$/.test(currentFull), val: currentFull });\n        }\n        current = null;\n        currentFull = \"\";\n        bracketed = !bracketed;\n      } else if (bracketed) {\n        currentFull += c;\n      } else if (c === current) {\n        currentFull += c;\n      } else {\n        if (currentFull.length > 0) {\n          splits.push({ literal: /^\\s+$/.test(currentFull), val: currentFull });\n        }\n        currentFull = c;\n        current = c;\n      }\n    }\n\n    if (currentFull.length > 0) {\n      splits.push({ literal: bracketed || /^\\s+$/.test(currentFull), val: currentFull });\n    }\n\n    return splits;\n  }\n\n  static macroTokenToFormatOpts(token) {\n    return macroTokenToFormatOpts[token];\n  }\n\n  constructor(locale, formatOpts) {\n    this.opts = formatOpts;\n    this.loc = locale;\n    this.systemLoc = null;\n  }\n\n  formatWithSystemDefault(dt, opts) {\n    if (this.systemLoc === null) {\n      this.systemLoc = this.loc.redefaultToSystem();\n    }\n    const df = this.systemLoc.dtFormatter(dt, { ...this.opts, ...opts });\n    return df.format();\n  }\n\n  dtFormatter(dt, opts = {}) {\n    return this.loc.dtFormatter(dt, { ...this.opts, ...opts });\n  }\n\n  formatDateTime(dt, opts) {\n    return this.dtFormatter(dt, opts).format();\n  }\n\n  formatDateTimeParts(dt, opts) {\n    return this.dtFormatter(dt, opts).formatToParts();\n  }\n\n  formatInterval(interval, opts) {\n    const df = this.dtFormatter(interval.start, opts);\n    return df.dtf.formatRange(interval.start.toJSDate(), interval.end.toJSDate());\n  }\n\n  resolvedOptions(dt, opts) {\n    return this.dtFormatter(dt, opts).resolvedOptions();\n  }\n\n  num(n, p = 0) {\n    // we get some perf out of doing this here, annoyingly\n    if (this.opts.forceSimple) {\n      return padStart(n, p);\n    }\n\n    const opts = { ...this.opts };\n\n    if (p > 0) {\n      opts.padTo = p;\n    }\n\n    return this.loc.numberFormatter(opts).format(n);\n  }\n\n  formatDateTimeFromString(dt, fmt) {\n    const knownEnglish = this.loc.listingMode() === \"en\",\n      useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== \"gregory\",\n      string = (opts, extract) => this.loc.extract(dt, opts, extract),\n      formatOffset = (opts) => {\n        if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {\n          return \"Z\";\n        }\n\n        return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : \"\";\n      },\n      meridiem = () =>\n        knownEnglish\n          ? English.meridiemForDateTime(dt)\n          : string({ hour: \"numeric\", hourCycle: \"h12\" }, \"dayperiod\"),\n      month = (length, standalone) =>\n        knownEnglish\n          ? English.monthForDateTime(dt, length)\n          : string(standalone ? { month: length } : { month: length, day: \"numeric\" }, \"month\"),\n      weekday = (length, standalone) =>\n        knownEnglish\n          ? English.weekdayForDateTime(dt, length)\n          : string(\n              standalone ? { weekday: length } : { weekday: length, month: \"long\", day: \"numeric\" },\n              \"weekday\"\n            ),\n      maybeMacro = (token) => {\n        const formatOpts = Formatter.macroTokenToFormatOpts(token);\n        if (formatOpts) {\n          return this.formatWithSystemDefault(dt, formatOpts);\n        } else {\n          return token;\n        }\n      },\n      era = (length) =>\n        knownEnglish ? English.eraForDateTime(dt, length) : string({ era: length }, \"era\"),\n      tokenToString = (token) => {\n        // Where possible: https://cldr.unicode.org/translation/date-time/date-time-symbols\n        switch (token) {\n          // ms\n          case \"S\":\n            return this.num(dt.millisecond);\n          case \"u\":\n          // falls through\n          case \"SSS\":\n            return this.num(dt.millisecond, 3);\n          // seconds\n          case \"s\":\n            return this.num(dt.second);\n          case \"ss\":\n            return this.num(dt.second, 2);\n          // fractional seconds\n          case \"uu\":\n            return this.num(Math.floor(dt.millisecond / 10), 2);\n          case \"uuu\":\n            return this.num(Math.floor(dt.millisecond / 100));\n          // minutes\n          case \"m\":\n            return this.num(dt.minute);\n          case \"mm\":\n            return this.num(dt.minute, 2);\n          // hours\n          case \"h\":\n            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);\n          case \"hh\":\n            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);\n          case \"H\":\n            return this.num(dt.hour);\n          case \"HH\":\n            return this.num(dt.hour, 2);\n          // offset\n          case \"Z\":\n            // like +6\n            return formatOffset({ format: \"narrow\", allowZ: this.opts.allowZ });\n          case \"ZZ\":\n            // like +06:00\n            return formatOffset({ format: \"short\", allowZ: this.opts.allowZ });\n          case \"ZZZ\":\n            // like +0600\n            return formatOffset({ format: \"techie\", allowZ: this.opts.allowZ });\n          case \"ZZZZ\":\n            // like EST\n            return dt.zone.offsetName(dt.ts, { format: \"short\", locale: this.loc.locale });\n          case \"ZZZZZ\":\n            // like Eastern Standard Time\n            return dt.zone.offsetName(dt.ts, { format: \"long\", locale: this.loc.locale });\n          // zone\n          case \"z\":\n            // like America/New_York\n            return dt.zoneName;\n          // meridiems\n          case \"a\":\n            return meridiem();\n          // dates\n          case \"d\":\n            return useDateTimeFormatter ? string({ day: \"numeric\" }, \"day\") : this.num(dt.day);\n          case \"dd\":\n            return useDateTimeFormatter ? string({ day: \"2-digit\" }, \"day\") : this.num(dt.day, 2);\n          // weekdays - standalone\n          case \"c\":\n            // like 1\n            return this.num(dt.weekday);\n          case \"ccc\":\n            // like 'Tues'\n            return weekday(\"short\", true);\n          case \"cccc\":\n            // like 'Tuesday'\n            return weekday(\"long\", true);\n          case \"ccccc\":\n            // like 'T'\n            return weekday(\"narrow\", true);\n          // weekdays - format\n          case \"E\":\n            // like 1\n            return this.num(dt.weekday);\n          case \"EEE\":\n            // like 'Tues'\n            return weekday(\"short\", false);\n          case \"EEEE\":\n            // like 'Tuesday'\n            return weekday(\"long\", false);\n          case \"EEEEE\":\n            // like 'T'\n            return weekday(\"narrow\", false);\n          // months - standalone\n          case \"L\":\n            // like 1\n            return useDateTimeFormatter\n              ? string({ month: \"numeric\", day: \"numeric\" }, \"month\")\n              : this.num(dt.month);\n          case \"LL\":\n            // like 01, doesn't seem to work\n            return useDateTimeFormatter\n              ? string({ month: \"2-digit\", day: \"numeric\" }, \"month\")\n              : this.num(dt.month, 2);\n          case \"LLL\":\n            // like Jan\n            return month(\"short\", true);\n          case \"LLLL\":\n            // like January\n            return month(\"long\", true);\n          case \"LLLLL\":\n            // like J\n            return month(\"narrow\", true);\n          // months - format\n          case \"M\":\n            // like 1\n            return useDateTimeFormatter\n              ? string({ month: \"numeric\" }, \"month\")\n              : this.num(dt.month);\n          case \"MM\":\n            // like 01\n            return useDateTimeFormatter\n              ? string({ month: \"2-digit\" }, \"month\")\n              : this.num(dt.month, 2);\n          case \"MMM\":\n            // like Jan\n            return month(\"short\", false);\n          case \"MMMM\":\n            // like January\n            return month(\"long\", false);\n          case \"MMMMM\":\n            // like J\n            return month(\"narrow\", false);\n          // years\n          case \"y\":\n            // like 2014\n            return useDateTimeFormatter ? string({ year: \"numeric\" }, \"year\") : this.num(dt.year);\n          case \"yy\":\n            // like 14\n            return useDateTimeFormatter\n              ? string({ year: \"2-digit\" }, \"year\")\n              : this.num(dt.year.toString().slice(-2), 2);\n          case \"yyyy\":\n            // like 0012\n            return useDateTimeFormatter\n              ? string({ year: \"numeric\" }, \"year\")\n              : this.num(dt.year, 4);\n          case \"yyyyyy\":\n            // like 000012\n            return useDateTimeFormatter\n              ? string({ year: \"numeric\" }, \"year\")\n              : this.num(dt.year, 6);\n          // eras\n          case \"G\":\n            // like AD\n            return era(\"short\");\n          case \"GG\":\n            // like Anno Domini\n            return era(\"long\");\n          case \"GGGGG\":\n            return era(\"narrow\");\n          case \"kk\":\n            return this.num(dt.weekYear.toString().slice(-2), 2);\n          case \"kkkk\":\n            return this.num(dt.weekYear, 4);\n          case \"W\":\n            return this.num(dt.weekNumber);\n          case \"WW\":\n            return this.num(dt.weekNumber, 2);\n          case \"n\":\n            return this.num(dt.localWeekNumber);\n          case \"nn\":\n            return this.num(dt.localWeekNumber, 2);\n          case \"ii\":\n            return this.num(dt.localWeekYear.toString().slice(-2), 2);\n          case \"iiii\":\n            return this.num(dt.localWeekYear, 4);\n          case \"o\":\n            return this.num(dt.ordinal);\n          case \"ooo\":\n            return this.num(dt.ordinal, 3);\n          case \"q\":\n            // like 1\n            return this.num(dt.quarter);\n          case \"qq\":\n            // like 01\n            return this.num(dt.quarter, 2);\n          case \"X\":\n            return this.num(Math.floor(dt.ts / 1000));\n          case \"x\":\n            return this.num(dt.ts);\n          default:\n            return maybeMacro(token);\n        }\n      };\n\n    return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);\n  }\n\n  formatDurationFromString(dur, fmt) {\n    const tokenToField = (token) => {\n        switch (token[0]) {\n          case \"S\":\n            return \"millisecond\";\n          case \"s\":\n            return \"second\";\n          case \"m\":\n            return \"minute\";\n          case \"h\":\n            return \"hour\";\n          case \"d\":\n            return \"day\";\n          case \"w\":\n            return \"week\";\n          case \"M\":\n            return \"month\";\n          case \"y\":\n            return \"year\";\n          default:\n            return null;\n        }\n      },\n      tokenToString = (lildur) => (token) => {\n        const mapped = tokenToField(token);\n        if (mapped) {\n          return this.num(lildur.get(mapped), token.length);\n        } else {\n          return token;\n        }\n      },\n      tokens = Formatter.parseFormat(fmt),\n      realTokens = tokens.reduce(\n        (found, { literal, val }) => (literal ? found : found.concat(val)),\n        []\n      ),\n      collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter((t) => t));\n    return stringifyTokens(tokens, tokenToString(collapsed));\n  }\n}\n","import {\n  untruncateYear,\n  signedOffset,\n  parseInteger,\n  parseMillis,\n  isUndefined,\n  parseFloating,\n} from \"./util.js\";\nimport * as English from \"./english.js\";\nimport FixedOffsetZone from \"../zones/fixedOffsetZone.js\";\nimport IANAZone from \"../zones/IANAZone.js\";\n\n/*\n * This file handles parsing for well-specified formats. Here's how it works:\n * Two things go into parsing: a regex to match with and an extractor to take apart the groups in the match.\n * An extractor is just a function that takes a regex match array and returns a { year: ..., month: ... } object\n * parse() does the work of executing the regex and applying the extractor. It takes multiple regex/extractor pairs to try in sequence.\n * Extractors can take a \"cursor\" representing the offset in the match to look at. This makes it easy to combine extractors.\n * combineExtractors() does the work of combining them, keeping track of the cursor through multiple extractions.\n * Some extractions are super dumb and simpleParse and fromStrings help DRY them.\n */\n\nconst ianaRegex = /[A-Za-z_+-]{1,256}(?::?\\/[A-Za-z0-9_+-]{1,256}(?:\\/[A-Za-z0-9_+-]{1,256})?)?/;\n\nfunction combineRegexes(...regexes) {\n  const full = regexes.reduce((f, r) => f + r.source, \"\");\n  return RegExp(`^${full}$`);\n}\n\nfunction combineExtractors(...extractors) {\n  return (m) =>\n    extractors\n      .reduce(\n        ([mergedVals, mergedZone, cursor], ex) => {\n          const [val, zone, next] = ex(m, cursor);\n          return [{ ...mergedVals, ...val }, zone || mergedZone, next];\n        },\n        [{}, null, 1]\n      )\n      .slice(0, 2);\n}\n\nfunction parse(s, ...patterns) {\n  if (s == null) {\n    return [null, null];\n  }\n\n  for (const [regex, extractor] of patterns) {\n    const m = regex.exec(s);\n    if (m) {\n      return extractor(m);\n    }\n  }\n  return [null, null];\n}\n\nfunction simpleParse(...keys) {\n  return (match, cursor) => {\n    const ret = {};\n    let i;\n\n    for (i = 0; i < keys.length; i++) {\n      ret[keys[i]] = parseInteger(match[cursor + i]);\n    }\n    return [ret, null, cursor + i];\n  };\n}\n\n// ISO and SQL parsing\nconst offsetRegex = /(?:(Z)|([+-]\\d\\d)(?::?(\\d\\d))?)/;\nconst isoExtendedZone = `(?:${offsetRegex.source}?(?:\\\\[(${ianaRegex.source})\\\\])?)?`;\nconst isoTimeBaseRegex = /(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:[.,](\\d{1,30}))?)?)?/;\nconst isoTimeRegex = RegExp(`${isoTimeBaseRegex.source}${isoExtendedZone}`);\nconst isoTimeExtensionRegex = RegExp(`(?:T${isoTimeRegex.source})?`);\nconst isoYmdRegex = /([+-]\\d{6}|\\d{4})(?:-?(\\d\\d)(?:-?(\\d\\d))?)?/;\nconst isoWeekRegex = /(\\d{4})-?W(\\d\\d)(?:-?(\\d))?/;\nconst isoOrdinalRegex = /(\\d{4})-?(\\d{3})/;\nconst extractISOWeekData = simpleParse(\"weekYear\", \"weekNumber\", \"weekDay\");\nconst extractISOOrdinalData = simpleParse(\"year\", \"ordinal\");\nconst sqlYmdRegex = /(\\d{4})-(\\d\\d)-(\\d\\d)/; // dumbed-down version of the ISO one\nconst sqlTimeRegex = RegExp(\n  `${isoTimeBaseRegex.source} ?(?:${offsetRegex.source}|(${ianaRegex.source}))?`\n);\nconst sqlTimeExtensionRegex = RegExp(`(?: ${sqlTimeRegex.source})?`);\n\nfunction int(match, pos, fallback) {\n  const m = match[pos];\n  return isUndefined(m) ? fallback : parseInteger(m);\n}\n\nfunction extractISOYmd(match, cursor) {\n  const item = {\n    year: int(match, cursor),\n    month: int(match, cursor + 1, 1),\n    day: int(match, cursor + 2, 1),\n  };\n\n  return [item, null, cursor + 3];\n}\n\nfunction extractISOTime(match, cursor) {\n  const item = {\n    hours: int(match, cursor, 0),\n    minutes: int(match, cursor + 1, 0),\n    seconds: int(match, cursor + 2, 0),\n    milliseconds: parseMillis(match[cursor + 3]),\n  };\n\n  return [item, null, cursor + 4];\n}\n\nfunction extractISOOffset(match, cursor) {\n  const local = !match[cursor] && !match[cursor + 1],\n    fullOffset = signedOffset(match[cursor + 1], match[cursor + 2]),\n    zone = local ? null : FixedOffsetZone.instance(fullOffset);\n  return [{}, zone, cursor + 3];\n}\n\nfunction extractIANAZone(match, cursor) {\n  const zone = match[cursor] ? IANAZone.create(match[cursor]) : null;\n  return [{}, zone, cursor + 1];\n}\n\n// ISO time parsing\n\nconst isoTimeOnly = RegExp(`^T?${isoTimeBaseRegex.source}$`);\n\n// ISO duration parsing\n\nconst isoDuration =\n  /^-?P(?:(?:(-?\\d{1,20}(?:\\.\\d{1,20})?)Y)?(?:(-?\\d{1,20}(?:\\.\\d{1,20})?)M)?(?:(-?\\d{1,20}(?:\\.\\d{1,20})?)W)?(?:(-?\\d{1,20}(?:\\.\\d{1,20})?)D)?(?:T(?:(-?\\d{1,20}(?:\\.\\d{1,20})?)H)?(?:(-?\\d{1,20}(?:\\.\\d{1,20})?)M)?(?:(-?\\d{1,20})(?:[.,](-?\\d{1,20}))?S)?)?)$/;\n\nfunction extractISODuration(match) {\n  const [s, yearStr, monthStr, weekStr, dayStr, hourStr, minuteStr, secondStr, millisecondsStr] =\n    match;\n\n  const hasNegativePrefix = s[0] === \"-\";\n  const negativeSeconds = secondStr && secondStr[0] === \"-\";\n\n  const maybeNegate = (num, force = false) =>\n    num !== undefined && (force || (num && hasNegativePrefix)) ? -num : num;\n\n  return [\n    {\n      years: maybeNegate(parseFloating(yearStr)),\n      months: maybeNegate(parseFloating(monthStr)),\n      weeks: maybeNegate(parseFloating(weekStr)),\n      days: maybeNegate(parseFloating(dayStr)),\n      hours: maybeNegate(parseFloating(hourStr)),\n      minutes: maybeNegate(parseFloating(minuteStr)),\n      seconds: maybeNegate(parseFloating(secondStr), secondStr === \"-0\"),\n      milliseconds: maybeNegate(parseMillis(millisecondsStr), negativeSeconds),\n    },\n  ];\n}\n\n// These are a little braindead. EDT *should* tell us that we're in, say, America/New_York\n// and not just that we're in -240 *right now*. But since I don't think these are used that often\n// I'm just going to ignore that\nconst obsOffsets = {\n  GMT: 0,\n  EDT: -4 * 60,\n  EST: -5 * 60,\n  CDT: -5 * 60,\n  CST: -6 * 60,\n  MDT: -6 * 60,\n  MST: -7 * 60,\n  PDT: -7 * 60,\n  PST: -8 * 60,\n};\n\nfunction fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\n  const result = {\n    year: yearStr.length === 2 ? untruncateYear(parseInteger(yearStr)) : parseInteger(yearStr),\n    month: English.monthsShort.indexOf(monthStr) + 1,\n    day: parseInteger(dayStr),\n    hour: parseInteger(hourStr),\n    minute: parseInteger(minuteStr),\n  };\n\n  if (secondStr) result.second = parseInteger(secondStr);\n  if (weekdayStr) {\n    result.weekday =\n      weekdayStr.length > 3\n        ? English.weekdaysLong.indexOf(weekdayStr) + 1\n        : English.weekdaysShort.indexOf(weekdayStr) + 1;\n  }\n\n  return result;\n}\n\n// RFC 2822/5322\nconst rfc2822 =\n  /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\\d\\d)(\\d\\d)))$/;\n\nfunction extractRFC2822(match) {\n  const [\n      ,\n      weekdayStr,\n      dayStr,\n      monthStr,\n      yearStr,\n      hourStr,\n      minuteStr,\n      secondStr,\n      obsOffset,\n      milOffset,\n      offHourStr,\n      offMinuteStr,\n    ] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n\n  let offset;\n  if (obsOffset) {\n    offset = obsOffsets[obsOffset];\n  } else if (milOffset) {\n    offset = 0;\n  } else {\n    offset = signedOffset(offHourStr, offMinuteStr);\n  }\n\n  return [result, new FixedOffsetZone(offset)];\n}\n\nfunction preprocessRFC2822(s) {\n  // Remove comments and folding whitespace and replace multiple-spaces with a single space\n  return s\n    .replace(/\\([^()]*\\)|[\\n\\t]/g, \" \")\n    .replace(/(\\s\\s+)/g, \" \")\n    .trim();\n}\n\n// http date\n\nconst rfc1123 =\n    /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\\d\\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\\d{4}) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\n  rfc850 =\n    /^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\\d\\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\n  ascii =\n    /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \\d|\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) (\\d{4})$/;\n\nfunction extractRFC1123Or850(match) {\n  const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  return [result, FixedOffsetZone.utcInstance];\n}\n\nfunction extractASCII(match) {\n  const [, weekdayStr, monthStr, dayStr, hourStr, minuteStr, secondStr, yearStr] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  return [result, FixedOffsetZone.utcInstance];\n}\n\nconst isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);\nconst isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);\nconst isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);\nconst isoTimeCombinedRegex = combineRegexes(isoTimeRegex);\n\nconst extractISOYmdTimeAndOffset = combineExtractors(\n  extractISOYmd,\n  extractISOTime,\n  extractISOOffset,\n  extractIANAZone\n);\nconst extractISOWeekTimeAndOffset = combineExtractors(\n  extractISOWeekData,\n  extractISOTime,\n  extractISOOffset,\n  extractIANAZone\n);\nconst extractISOOrdinalDateAndTime = combineExtractors(\n  extractISOOrdinalData,\n  extractISOTime,\n  extractISOOffset,\n  extractIANAZone\n);\nconst extractISOTimeAndOffset = combineExtractors(\n  extractISOTime,\n  extractISOOffset,\n  extractIANAZone\n);\n\n/*\n * @private\n */\n\nexport function parseISODate(s) {\n  return parse(\n    s,\n    [isoYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset],\n    [isoWeekWithTimeExtensionRegex, extractISOWeekTimeAndOffset],\n    [isoOrdinalWithTimeExtensionRegex, extractISOOrdinalDateAndTime],\n    [isoTimeCombinedRegex, extractISOTimeAndOffset]\n  );\n}\n\nexport function parseRFC2822Date(s) {\n  return parse(preprocessRFC2822(s), [rfc2822, extractRFC2822]);\n}\n\nexport function parseHTTPDate(s) {\n  return parse(\n    s,\n    [rfc1123, extractRFC1123Or850],\n    [rfc850, extractRFC1123Or850],\n    [ascii, extractASCII]\n  );\n}\n\nexport function parseISODuration(s) {\n  return parse(s, [isoDuration, extractISODuration]);\n}\n\nconst extractISOTimeOnly = combineExtractors(extractISOTime);\n\nexport function parseISOTimeOnly(s) {\n  return parse(s, [isoTimeOnly, extractISOTimeOnly]);\n}\n\nconst sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);\nconst sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);\n\nconst extractISOTimeOffsetAndIANAZone = combineExtractors(\n  extractISOTime,\n  extractISOOffset,\n  extractIANAZone\n);\n\nexport function parseSQL(s) {\n  return parse(\n    s,\n    [sqlYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset],\n    [sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone]\n  );\n}\n","import { InvalidArgumentError, InvalidDurationError, InvalidUnitError } from \"./errors.js\";\nimport Formatter from \"./impl/formatter.js\";\nimport Invalid from \"./impl/invalid.js\";\nimport Locale from \"./impl/locale.js\";\nimport { parseISODuration, parseISOTimeOnly } from \"./impl/regexParser.js\";\nimport {\n  asNumber,\n  hasOwnProperty,\n  isNumber,\n  isUndefined,\n  normalizeObject,\n  roundTo,\n} from \"./impl/util.js\";\nimport Settings from \"./settings.js\";\nimport DateTime from \"./datetime.js\";\n\nconst INVALID = \"Invalid Duration\";\n\n// unit conversion constants\nexport const lowOrderMatrix = {\n    weeks: {\n      days: 7,\n      hours: 7 * 24,\n      minutes: 7 * 24 * 60,\n      seconds: 7 * 24 * 60 * 60,\n      milliseconds: 7 * 24 * 60 * 60 * 1000,\n    },\n    days: {\n      hours: 24,\n      minutes: 24 * 60,\n      seconds: 24 * 60 * 60,\n      milliseconds: 24 * 60 * 60 * 1000,\n    },\n    hours: { minutes: 60, seconds: 60 * 60, milliseconds: 60 * 60 * 1000 },\n    minutes: { seconds: 60, milliseconds: 60 * 1000 },\n    seconds: { milliseconds: 1000 },\n  },\n  casualMatrix = {\n    years: {\n      quarters: 4,\n      months: 12,\n      weeks: 52,\n      days: 365,\n      hours: 365 * 24,\n      minutes: 365 * 24 * 60,\n      seconds: 365 * 24 * 60 * 60,\n      milliseconds: 365 * 24 * 60 * 60 * 1000,\n    },\n    quarters: {\n      months: 3,\n      weeks: 13,\n      days: 91,\n      hours: 91 * 24,\n      minutes: 91 * 24 * 60,\n      seconds: 91 * 24 * 60 * 60,\n      milliseconds: 91 * 24 * 60 * 60 * 1000,\n    },\n    months: {\n      weeks: 4,\n      days: 30,\n      hours: 30 * 24,\n      minutes: 30 * 24 * 60,\n      seconds: 30 * 24 * 60 * 60,\n      milliseconds: 30 * 24 * 60 * 60 * 1000,\n    },\n\n    ...lowOrderMatrix,\n  },\n  daysInYearAccurate = 146097.0 / 400,\n  daysInMonthAccurate = 146097.0 / 4800,\n  accurateMatrix = {\n    years: {\n      quarters: 4,\n      months: 12,\n      weeks: daysInYearAccurate / 7,\n      days: daysInYearAccurate,\n      hours: daysInYearAccurate * 24,\n      minutes: daysInYearAccurate * 24 * 60,\n      seconds: daysInYearAccurate * 24 * 60 * 60,\n      milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000,\n    },\n    quarters: {\n      months: 3,\n      weeks: daysInYearAccurate / 28,\n      days: daysInYearAccurate / 4,\n      hours: (daysInYearAccurate * 24) / 4,\n      minutes: (daysInYearAccurate * 24 * 60) / 4,\n      seconds: (daysInYearAccurate * 24 * 60 * 60) / 4,\n      milliseconds: (daysInYearAccurate * 24 * 60 * 60 * 1000) / 4,\n    },\n    months: {\n      weeks: daysInMonthAccurate / 7,\n      days: daysInMonthAccurate,\n      hours: daysInMonthAccurate * 24,\n      minutes: daysInMonthAccurate * 24 * 60,\n      seconds: daysInMonthAccurate * 24 * 60 * 60,\n      milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1000,\n    },\n    ...lowOrderMatrix,\n  };\n\n// units ordered by size\nconst orderedUnits = [\n  \"years\",\n  \"quarters\",\n  \"months\",\n  \"weeks\",\n  \"days\",\n  \"hours\",\n  \"minutes\",\n  \"seconds\",\n  \"milliseconds\",\n];\n\nconst reverseUnits = orderedUnits.slice(0).reverse();\n\n// clone really means \"create another instance just like this one, but with these changes\"\nfunction clone(dur, alts, clear = false) {\n  // deep merge for vals\n  const conf = {\n    values: clear ? alts.values : { ...dur.values, ...(alts.values || {}) },\n    loc: dur.loc.clone(alts.loc),\n    conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy,\n    matrix: alts.matrix || dur.matrix,\n  };\n  return new Duration(conf);\n}\n\nfunction durationToMillis(matrix, vals) {\n  let sum = vals.milliseconds ?? 0;\n  for (const unit of reverseUnits.slice(1)) {\n    if (vals[unit]) {\n      sum += vals[unit] * matrix[unit][\"milliseconds\"];\n    }\n  }\n  return sum;\n}\n\n// NB: mutates parameters\nfunction normalizeValues(matrix, vals) {\n  // the logic below assumes the overall value of the duration is positive\n  // if this is not the case, factor is used to make it so\n  const factor = durationToMillis(matrix, vals) < 0 ? -1 : 1;\n\n  orderedUnits.reduceRight((previous, current) => {\n    if (!isUndefined(vals[current])) {\n      if (previous) {\n        const previousVal = vals[previous] * factor;\n        const conv = matrix[current][previous];\n\n        // if (previousVal < 0):\n        // lower order unit is negative (e.g. { years: 2, days: -2 })\n        // normalize this by reducing the higher order unit by the appropriate amount\n        // and increasing the lower order unit\n        // this can never make the higher order unit negative, because this function only operates\n        // on positive durations, so the amount of time represented by the lower order unit cannot\n        // be larger than the higher order unit\n        // else:\n        // lower order unit is positive (e.g. { years: 2, days: 450 } or { years: -2, days: 450 })\n        // in this case we attempt to convert as much as possible from the lower order unit into\n        // the higher order one\n        //\n        // Math.floor takes care of both of these cases, rounding away from 0\n        // if previousVal < 0 it makes the absolute value larger\n        // if previousVal >= it makes the absolute value smaller\n        const rollUp = Math.floor(previousVal / conv);\n        vals[current] += rollUp * factor;\n        vals[previous] -= rollUp * conv * factor;\n      }\n      return current;\n    } else {\n      return previous;\n    }\n  }, null);\n\n  // try to convert any decimals into smaller units if possible\n  // for example for { years: 2.5, days: 0, seconds: 0 } we want to get { years: 2, days: 182, hours: 12 }\n  orderedUnits.reduce((previous, current) => {\n    if (!isUndefined(vals[current])) {\n      if (previous) {\n        const fraction = vals[previous] % 1;\n        vals[previous] -= fraction;\n        vals[current] += fraction * matrix[previous][current];\n      }\n      return current;\n    } else {\n      return previous;\n    }\n  }, null);\n}\n\n// Remove all properties with a value of 0 from an object\nfunction removeZeroes(vals) {\n  const newVals = {};\n  for (const [key, value] of Object.entries(vals)) {\n    if (value !== 0) {\n      newVals[key] = value;\n    }\n  }\n  return newVals;\n}\n\n/**\n * A Duration object represents a period of time, like \"2 months\" or \"1 day, 1 hour\". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime#plus} to add a Duration object to a DateTime, producing another DateTime.\n *\n * Here is a brief overview of commonly used methods and getters in Duration:\n *\n * * **Creation** To create a Duration, use {@link Duration.fromMillis}, {@link Duration.fromObject}, or {@link Duration.fromISO}.\n * * **Unit values** See the {@link Duration#years}, {@link Duration#months}, {@link Duration#weeks}, {@link Duration#days}, {@link Duration#hours}, {@link Duration#minutes}, {@link Duration#seconds}, {@link Duration#milliseconds} accessors.\n * * **Configuration** See  {@link Duration#locale} and {@link Duration#numberingSystem} accessors.\n * * **Transformation** To create new Durations out of old ones use {@link Duration#plus}, {@link Duration#minus}, {@link Duration#normalize}, {@link Duration#set}, {@link Duration#reconfigure}, {@link Duration#shiftTo}, and {@link Duration#negate}.\n * * **Output** To convert the Duration into other representations, see {@link Duration#as}, {@link Duration#toISO}, {@link Duration#toFormat}, and {@link Duration#toJSON}\n *\n * There's are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.\n */\nexport default class Duration {\n  /**\n   * @private\n   */\n  constructor(config) {\n    const accurate = config.conversionAccuracy === \"longterm\" || false;\n    let matrix = accurate ? accurateMatrix : casualMatrix;\n\n    if (config.matrix) {\n      matrix = config.matrix;\n    }\n\n    /**\n     * @access private\n     */\n    this.values = config.values;\n    /**\n     * @access private\n     */\n    this.loc = config.loc || Locale.create();\n    /**\n     * @access private\n     */\n    this.conversionAccuracy = accurate ? \"longterm\" : \"casual\";\n    /**\n     * @access private\n     */\n    this.invalid = config.invalid || null;\n    /**\n     * @access private\n     */\n    this.matrix = matrix;\n    /**\n     * @access private\n     */\n    this.isLuxonDuration = true;\n  }\n\n  /**\n   * Create Duration from a number of milliseconds.\n   * @param {number} count of milliseconds\n   * @param {Object} opts - options for parsing\n   * @param {string} [opts.locale='en-US'] - the locale to use\n   * @param {string} opts.numberingSystem - the numbering system to use\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  static fromMillis(count, opts) {\n    return Duration.fromObject({ milliseconds: count }, opts);\n  }\n\n  /**\n   * Create a Duration from a JavaScript object with keys like 'years' and 'hours'.\n   * If this object is empty then a zero milliseconds duration is returned.\n   * @param {Object} obj - the object to create the DateTime from\n   * @param {number} obj.years\n   * @param {number} obj.quarters\n   * @param {number} obj.months\n   * @param {number} obj.weeks\n   * @param {number} obj.days\n   * @param {number} obj.hours\n   * @param {number} obj.minutes\n   * @param {number} obj.seconds\n   * @param {number} obj.milliseconds\n   * @param {Object} [opts=[]] - options for creating this Duration\n   * @param {string} [opts.locale='en-US'] - the locale to use\n   * @param {string} opts.numberingSystem - the numbering system to use\n   * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use\n   * @param {string} [opts.matrix=Object] - the custom conversion system to use\n   * @return {Duration}\n   */\n  static fromObject(obj, opts = {}) {\n    if (obj == null || typeof obj !== \"object\") {\n      throw new InvalidArgumentError(\n        `Duration.fromObject: argument expected to be an object, got ${\n          obj === null ? \"null\" : typeof obj\n        }`\n      );\n    }\n\n    return new Duration({\n      values: normalizeObject(obj, Duration.normalizeUnit),\n      loc: Locale.fromObject(opts),\n      conversionAccuracy: opts.conversionAccuracy,\n      matrix: opts.matrix,\n    });\n  }\n\n  /**\n   * Create a Duration from DurationLike.\n   *\n   * @param {Object | number | Duration} durationLike\n   * One of:\n   * - object with keys like 'years' and 'hours'.\n   * - number representing milliseconds\n   * - Duration instance\n   * @return {Duration}\n   */\n  static fromDurationLike(durationLike) {\n    if (isNumber(durationLike)) {\n      return Duration.fromMillis(durationLike);\n    } else if (Duration.isDuration(durationLike)) {\n      return durationLike;\n    } else if (typeof durationLike === \"object\") {\n      return Duration.fromObject(durationLike);\n    } else {\n      throw new InvalidArgumentError(\n        `Unknown duration argument ${durationLike} of type ${typeof durationLike}`\n      );\n    }\n  }\n\n  /**\n   * Create a Duration from an ISO 8601 duration string.\n   * @param {string} text - text to parse\n   * @param {Object} opts - options for parsing\n   * @param {string} [opts.locale='en-US'] - the locale to use\n   * @param {string} opts.numberingSystem - the numbering system to use\n   * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use\n   * @param {string} [opts.matrix=Object] - the preset conversion system to use\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\n   * @example Duration.fromISO('P3Y6M1W4DT12H30M5S').toObject() //=> { years: 3, months: 6, weeks: 1, days: 4, hours: 12, minutes: 30, seconds: 5 }\n   * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }\n   * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }\n   * @return {Duration}\n   */\n  static fromISO(text, opts) {\n    const [parsed] = parseISODuration(text);\n    if (parsed) {\n      return Duration.fromObject(parsed, opts);\n    } else {\n      return Duration.invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ISO 8601`);\n    }\n  }\n\n  /**\n   * Create a Duration from an ISO 8601 time string.\n   * @param {string} text - text to parse\n   * @param {Object} opts - options for parsing\n   * @param {string} [opts.locale='en-US'] - the locale to use\n   * @param {string} opts.numberingSystem - the numbering system to use\n   * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use\n   * @param {string} [opts.matrix=Object] - the conversion system to use\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Times\n   * @example Duration.fromISOTime('11:22:33.444').toObject() //=> { hours: 11, minutes: 22, seconds: 33, milliseconds: 444 }\n   * @example Duration.fromISOTime('11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }\n   * @example Duration.fromISOTime('T11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }\n   * @example Duration.fromISOTime('1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }\n   * @example Duration.fromISOTime('T1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }\n   * @return {Duration}\n   */\n  static fromISOTime(text, opts) {\n    const [parsed] = parseISOTimeOnly(text);\n    if (parsed) {\n      return Duration.fromObject(parsed, opts);\n    } else {\n      return Duration.invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ISO 8601`);\n    }\n  }\n\n  /**\n   * Create an invalid Duration.\n   * @param {string} reason - simple string of why this datetime is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {Duration}\n   */\n  static invalid(reason, explanation = null) {\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the Duration is invalid\");\n    }\n\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (Settings.throwOnInvalid) {\n      throw new InvalidDurationError(invalid);\n    } else {\n      return new Duration({ invalid });\n    }\n  }\n\n  /**\n   * @private\n   */\n  static normalizeUnit(unit) {\n    const normalized = {\n      year: \"years\",\n      years: \"years\",\n      quarter: \"quarters\",\n      quarters: \"quarters\",\n      month: \"months\",\n      months: \"months\",\n      week: \"weeks\",\n      weeks: \"weeks\",\n      day: \"days\",\n      days: \"days\",\n      hour: \"hours\",\n      hours: \"hours\",\n      minute: \"minutes\",\n      minutes: \"minutes\",\n      second: \"seconds\",\n      seconds: \"seconds\",\n      millisecond: \"milliseconds\",\n      milliseconds: \"milliseconds\",\n    }[unit ? unit.toLowerCase() : unit];\n\n    if (!normalized) throw new InvalidUnitError(unit);\n\n    return normalized;\n  }\n\n  /**\n   * Check if an object is a Duration. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n  static isDuration(o) {\n    return (o && o.isLuxonDuration) || false;\n  }\n\n  /**\n   * Get  the locale of a Duration, such 'en-GB'\n   * @type {string}\n   */\n  get locale() {\n    return this.isValid ? this.loc.locale : null;\n  }\n\n  /**\n   * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration\n   *\n   * @type {string}\n   */\n  get numberingSystem() {\n    return this.isValid ? this.loc.numberingSystem : null;\n  }\n\n  /**\n   * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:\n   * * `S` for milliseconds\n   * * `s` for seconds\n   * * `m` for minutes\n   * * `h` for hours\n   * * `d` for days\n   * * `w` for weeks\n   * * `M` for months\n   * * `y` for years\n   * Notes:\n   * * Add padding by repeating the token, e.g. \"yy\" pads the years to two digits, \"hhhh\" pads the hours out to four digits\n   * * Tokens can be escaped by wrapping with single quotes.\n   * * The duration will be converted to the set of units in the format string using {@link Duration#shiftTo} and the Durations's conversion accuracy setting.\n   * @param {string} fmt - the format string\n   * @param {Object} opts - options\n   * @param {boolean} [opts.floor=true] - floor numerical values\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"y d s\") //=> \"1 6 2\"\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"yy dd sss\") //=> \"01 06 002\"\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"M S\") //=> \"12 518402000\"\n   * @return {string}\n   */\n  toFormat(fmt, opts = {}) {\n    // reverse-compat since 1.2; we always round down now, never up, and we do it by default\n    const fmtOpts = {\n      ...opts,\n      floor: opts.round !== false && opts.floor !== false,\n    };\n    return this.isValid\n      ? Formatter.create(this.loc, fmtOpts).formatDurationFromString(this, fmt)\n      : INVALID;\n  }\n\n  /**\n   * Returns a string representation of a Duration with all units included.\n   * To modify its behavior, use `listStyle` and any Intl.NumberFormat option, though `unitDisplay` is especially relevant.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options\n   * @param {Object} opts - Formatting options. Accepts the same keys as the options parameter of the native `Intl.NumberFormat` constructor, as well as `listStyle`.\n   * @param {string} [opts.listStyle='narrow'] - How to format the merged list. Corresponds to the `style` property of the options parameter of the native `Intl.ListFormat` constructor.\n   * @example\n   * ```js\n   * var dur = Duration.fromObject({ days: 1, hours: 5, minutes: 6 })\n   * dur.toHuman() //=> '1 day, 5 hours, 6 minutes'\n   * dur.toHuman({ listStyle: \"long\" }) //=> '1 day, 5 hours, and 6 minutes'\n   * dur.toHuman({ unitDisplay: \"short\" }) //=> '1 day, 5 hr, 6 min'\n   * ```\n   */\n  toHuman(opts = {}) {\n    if (!this.isValid) return INVALID;\n\n    const l = orderedUnits\n      .map((unit) => {\n        const val = this.values[unit];\n        if (isUndefined(val)) {\n          return null;\n        }\n        return this.loc\n          .numberFormatter({ style: \"unit\", unitDisplay: \"long\", ...opts, unit: unit.slice(0, -1) })\n          .format(val);\n      })\n      .filter((n) => n);\n\n    return this.loc\n      .listFormatter({ type: \"conjunction\", style: opts.listStyle || \"narrow\", ...opts })\n      .format(l);\n  }\n\n  /**\n   * Returns a JavaScript object with this Duration's values.\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }\n   * @return {Object}\n   */\n  toObject() {\n    if (!this.isValid) return {};\n    return { ...this.values };\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Duration.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\n   * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'\n   * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'\n   * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'\n   * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'\n   * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'\n   * @return {string}\n   */\n  toISO() {\n    // we could use the formatter, but this is an easier way to get the minimum string\n    if (!this.isValid) return null;\n\n    let s = \"P\";\n    if (this.years !== 0) s += this.years + \"Y\";\n    if (this.months !== 0 || this.quarters !== 0) s += this.months + this.quarters * 3 + \"M\";\n    if (this.weeks !== 0) s += this.weeks + \"W\";\n    if (this.days !== 0) s += this.days + \"D\";\n    if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0)\n      s += \"T\";\n    if (this.hours !== 0) s += this.hours + \"H\";\n    if (this.minutes !== 0) s += this.minutes + \"M\";\n    if (this.seconds !== 0 || this.milliseconds !== 0)\n      // this will handle \"floating point madness\" by removing extra decimal places\n      // https://stackoverflow.com/questions/588004/is-floating-point-math-broken\n      s += roundTo(this.seconds + this.milliseconds / 1000, 3) + \"S\";\n    if (s === \"P\") s += \"T0S\";\n    return s;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Duration, formatted as a time of day.\n   * Note that this will return null if the duration is invalid, negative, or equal to or greater than 24 hours.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Times\n   * @param {Object} opts - options\n   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0\n   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0\n   * @param {boolean} [opts.includePrefix=false] - include the `T` prefix\n   * @param {string} [opts.format='extended'] - choose between the basic and extended format\n   * @example Duration.fromObject({ hours: 11 }).toISOTime() //=> '11:00:00.000'\n   * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressMilliseconds: true }) //=> '11:00:00'\n   * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressSeconds: true }) //=> '11:00'\n   * @example Duration.fromObject({ hours: 11 }).toISOTime({ includePrefix: true }) //=> 'T11:00:00.000'\n   * @example Duration.fromObject({ hours: 11 }).toISOTime({ format: 'basic' }) //=> '110000.000'\n   * @return {string}\n   */\n  toISOTime(opts = {}) {\n    if (!this.isValid) return null;\n\n    const millis = this.toMillis();\n    if (millis < 0 || millis >= 86400000) return null;\n\n    opts = {\n      suppressMilliseconds: false,\n      suppressSeconds: false,\n      includePrefix: false,\n      format: \"extended\",\n      ...opts,\n      includeOffset: false,\n    };\n\n    const dateTime = DateTime.fromMillis(millis, { zone: \"UTC\" });\n    return dateTime.toISOTime(opts);\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.\n   * @return {string}\n   */\n  toJSON() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.\n   * @return {string}\n   */\n  toString() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns a string representation of this Duration appropriate for the REPL.\n   * @return {string}\n   */\n  [Symbol.for(\"nodejs.util.inspect.custom\")]() {\n    if (this.isValid) {\n      return `Duration { values: ${JSON.stringify(this.values)} }`;\n    } else {\n      return `Duration { Invalid, reason: ${this.invalidReason} }`;\n    }\n  }\n\n  /**\n   * Returns an milliseconds value of this Duration.\n   * @return {number}\n   */\n  toMillis() {\n    if (!this.isValid) return NaN;\n\n    return durationToMillis(this.matrix, this.values);\n  }\n\n  /**\n   * Returns an milliseconds value of this Duration. Alias of {@link toMillis}\n   * @return {number}\n   */\n  valueOf() {\n    return this.toMillis();\n  }\n\n  /**\n   * Make this Duration longer by the specified amount. Return a newly-constructed Duration.\n   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @return {Duration}\n   */\n  plus(duration) {\n    if (!this.isValid) return this;\n\n    const dur = Duration.fromDurationLike(duration),\n      result = {};\n\n    for (const k of orderedUnits) {\n      if (hasOwnProperty(dur.values, k) || hasOwnProperty(this.values, k)) {\n        result[k] = dur.get(k) + this.get(k);\n      }\n    }\n\n    return clone(this, { values: result }, true);\n  }\n\n  /**\n   * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.\n   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @return {Duration}\n   */\n  minus(duration) {\n    if (!this.isValid) return this;\n\n    const dur = Duration.fromDurationLike(duration);\n    return this.plus(dur.negate());\n  }\n\n  /**\n   * Scale this Duration by the specified amount. Return a newly-constructed Duration.\n   * @param {function} fn - The function to apply to each unit. Arity is 1 or 2: the value of the unit and, optionally, the unit name. Must return a number.\n   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits(x => x * 2) //=> { hours: 2, minutes: 60 }\n   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits((x, u) => u === \"hours\" ? x * 2 : x) //=> { hours: 2, minutes: 30 }\n   * @return {Duration}\n   */\n  mapUnits(fn) {\n    if (!this.isValid) return this;\n    const result = {};\n    for (const k of Object.keys(this.values)) {\n      result[k] = asNumber(fn(this.values[k], k));\n    }\n    return clone(this, { values: result }, true);\n  }\n\n  /**\n   * Get the value of unit.\n   * @param {string} unit - a unit such as 'minute' or 'day'\n   * @example Duration.fromObject({years: 2, days: 3}).get('years') //=> 2\n   * @example Duration.fromObject({years: 2, days: 3}).get('months') //=> 0\n   * @example Duration.fromObject({years: 2, days: 3}).get('days') //=> 3\n   * @return {number}\n   */\n  get(unit) {\n    return this[Duration.normalizeUnit(unit)];\n  }\n\n  /**\n   * \"Set\" the values of specified units. Return a newly-constructed Duration.\n   * @param {Object} values - a mapping of units to numbers\n   * @example dur.set({ years: 2017 })\n   * @example dur.set({ hours: 8, minutes: 30 })\n   * @return {Duration}\n   */\n  set(values) {\n    if (!this.isValid) return this;\n\n    const mixed = { ...this.values, ...normalizeObject(values, Duration.normalizeUnit) };\n    return clone(this, { values: mixed });\n  }\n\n  /**\n   * \"Set\" the locale and/or numberingSystem.  Returns a newly-constructed Duration.\n   * @example dur.reconfigure({ locale: 'en-GB' })\n   * @return {Duration}\n   */\n  reconfigure({ locale, numberingSystem, conversionAccuracy, matrix } = {}) {\n    const loc = this.loc.clone({ locale, numberingSystem });\n    const opts = { loc, matrix, conversionAccuracy };\n    return clone(this, opts);\n  }\n\n  /**\n   * Return the length of the duration in the specified unit.\n   * @param {string} unit - a unit such as 'minutes' or 'days'\n   * @example Duration.fromObject({years: 1}).as('days') //=> 365\n   * @example Duration.fromObject({years: 1}).as('months') //=> 12\n   * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5\n   * @return {number}\n   */\n  as(unit) {\n    return this.isValid ? this.shiftTo(unit).get(unit) : NaN;\n  }\n\n  /**\n   * Reduce this Duration to its canonical representation in its current units.\n   * Assuming the overall value of the Duration is positive, this means:\n   * - excessive values for lower-order units are converted to higher-order units (if possible, see first and second example)\n   * - negative lower-order units are converted to higher order units (there must be such a higher order unit, otherwise\n   *   the overall value would be negative, see third example)\n   * - fractional values for higher-order units are converted to lower-order units (if possible, see fourth example)\n   *\n   * If the overall value is negative, the result of this method is equivalent to `this.negate().normalize().negate()`.\n   * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }\n   * @example Duration.fromObject({ days: 5000 }).normalize().toObject() //=> { days: 5000 }\n   * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }\n   * @example Duration.fromObject({ years: 2.5, days: 0, hours: 0 }).normalize().toObject() //=> { years: 2, days: 182, hours: 12 }\n   * @return {Duration}\n   */\n  normalize() {\n    if (!this.isValid) return this;\n    const vals = this.toObject();\n    normalizeValues(this.matrix, vals);\n    return clone(this, { values: vals }, true);\n  }\n\n  /**\n   * Rescale units to its largest representation\n   * @example Duration.fromObject({ milliseconds: 90000 }).rescale().toObject() //=> { minutes: 1, seconds: 30 }\n   * @return {Duration}\n   */\n  rescale() {\n    if (!this.isValid) return this;\n    const vals = removeZeroes(this.normalize().shiftToAll().toObject());\n    return clone(this, { values: vals }, true);\n  }\n\n  /**\n   * Convert this Duration into its representation in a different set of units.\n   * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }\n   * @return {Duration}\n   */\n  shiftTo(...units) {\n    if (!this.isValid) return this;\n\n    if (units.length === 0) {\n      return this;\n    }\n\n    units = units.map((u) => Duration.normalizeUnit(u));\n\n    const built = {},\n      accumulated = {},\n      vals = this.toObject();\n    let lastUnit;\n\n    for (const k of orderedUnits) {\n      if (units.indexOf(k) >= 0) {\n        lastUnit = k;\n\n        let own = 0;\n\n        // anything we haven't boiled down yet should get boiled to this unit\n        for (const ak in accumulated) {\n          own += this.matrix[ak][k] * accumulated[ak];\n          accumulated[ak] = 0;\n        }\n\n        // plus anything that's already in this unit\n        if (isNumber(vals[k])) {\n          own += vals[k];\n        }\n\n        // only keep the integer part for now in the hopes of putting any decimal part\n        // into a smaller unit later\n        const i = Math.trunc(own);\n        built[k] = i;\n        accumulated[k] = (own * 1000 - i * 1000) / 1000;\n\n        // otherwise, keep it in the wings to boil it later\n      } else if (isNumber(vals[k])) {\n        accumulated[k] = vals[k];\n      }\n    }\n\n    // anything leftover becomes the decimal for the last unit\n    // lastUnit must be defined since units is not empty\n    for (const key in accumulated) {\n      if (accumulated[key] !== 0) {\n        built[lastUnit] +=\n          key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];\n      }\n    }\n\n    normalizeValues(this.matrix, built);\n    return clone(this, { values: built }, true);\n  }\n\n  /**\n   * Shift this Duration to all available units.\n   * Same as shiftTo(\"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", \"seconds\", \"milliseconds\")\n   * @return {Duration}\n   */\n  shiftToAll() {\n    if (!this.isValid) return this;\n    return this.shiftTo(\n      \"years\",\n      \"months\",\n      \"weeks\",\n      \"days\",\n      \"hours\",\n      \"minutes\",\n      \"seconds\",\n      \"milliseconds\"\n    );\n  }\n\n  /**\n   * Return the negative of this Duration.\n   * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }\n   * @return {Duration}\n   */\n  negate() {\n    if (!this.isValid) return this;\n    const negated = {};\n    for (const k of Object.keys(this.values)) {\n      negated[k] = this.values[k] === 0 ? 0 : -this.values[k];\n    }\n    return clone(this, { values: negated }, true);\n  }\n\n  /**\n   * Get the years.\n   * @type {number}\n   */\n  get years() {\n    return this.isValid ? this.values.years || 0 : NaN;\n  }\n\n  /**\n   * Get the quarters.\n   * @type {number}\n   */\n  get quarters() {\n    return this.isValid ? this.values.quarters || 0 : NaN;\n  }\n\n  /**\n   * Get the months.\n   * @type {number}\n   */\n  get months() {\n    return this.isValid ? this.values.months || 0 : NaN;\n  }\n\n  /**\n   * Get the weeks\n   * @type {number}\n   */\n  get weeks() {\n    return this.isValid ? this.values.weeks || 0 : NaN;\n  }\n\n  /**\n   * Get the days.\n   * @type {number}\n   */\n  get days() {\n    return this.isValid ? this.values.days || 0 : NaN;\n  }\n\n  /**\n   * Get the hours.\n   * @type {number}\n   */\n  get hours() {\n    return this.isValid ? this.values.hours || 0 : NaN;\n  }\n\n  /**\n   * Get the minutes.\n   * @type {number}\n   */\n  get minutes() {\n    return this.isValid ? this.values.minutes || 0 : NaN;\n  }\n\n  /**\n   * Get the seconds.\n   * @return {number}\n   */\n  get seconds() {\n    return this.isValid ? this.values.seconds || 0 : NaN;\n  }\n\n  /**\n   * Get the milliseconds.\n   * @return {number}\n   */\n  get milliseconds() {\n    return this.isValid ? this.values.milliseconds || 0 : NaN;\n  }\n\n  /**\n   * Returns whether the Duration is invalid. Invalid durations are returned by diff operations\n   * on invalid DateTimes or Intervals.\n   * @return {boolean}\n   */\n  get isValid() {\n    return this.invalid === null;\n  }\n\n  /**\n   * Returns an error code if this Duration became invalid, or null if the Duration is valid\n   * @return {string}\n   */\n  get invalidReason() {\n    return this.invalid ? this.invalid.reason : null;\n  }\n\n  /**\n   * Returns an explanation of why this Duration became invalid, or null if the Duration is valid\n   * @type {string}\n   */\n  get invalidExplanation() {\n    return this.invalid ? this.invalid.explanation : null;\n  }\n\n  /**\n   * Equality check\n   * Two Durations are equal iff they have the same units and the same values for each unit.\n   * @param {Duration} other\n   * @return {boolean}\n   */\n  equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n\n    if (!this.loc.equals(other.loc)) {\n      return false;\n    }\n\n    function eq(v1, v2) {\n      // Consider 0 and undefined as equal\n      if (v1 === undefined || v1 === 0) return v2 === undefined || v2 === 0;\n      return v1 === v2;\n    }\n\n    for (const u of orderedUnits) {\n      if (!eq(this.values[u], other.values[u])) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","import DateTime, { friendlyDateTime } from \"./datetime.js\";\nimport Duration from \"./duration.js\";\nimport Settings from \"./settings.js\";\nimport { InvalidArgumentError, InvalidIntervalError } from \"./errors.js\";\nimport Invalid from \"./impl/invalid.js\";\nimport Formatter from \"./impl/formatter.js\";\nimport * as Formats from \"./impl/formats.js\";\n\nconst INVALID = \"Invalid Interval\";\n\n// checks if the start is equal to or before the end\nfunction validateStartEnd(start, end) {\n  if (!start || !start.isValid) {\n    return Interval.invalid(\"missing or invalid start\");\n  } else if (!end || !end.isValid) {\n    return Interval.invalid(\"missing or invalid end\");\n  } else if (end < start) {\n    return Interval.invalid(\n      \"end before start\",\n      `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`\n    );\n  } else {\n    return null;\n  }\n}\n\n/**\n * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.\n *\n * Here is a brief overview of the most commonly used methods and getters in Interval:\n *\n * * **Creation** To create an Interval, use {@link Interval.fromDateTimes}, {@link Interval.after}, {@link Interval.before}, or {@link Interval.fromISO}.\n * * **Accessors** Use {@link Interval#start} and {@link Interval#end} to get the start and end.\n * * **Interrogation** To analyze the Interval, use {@link Interval#count}, {@link Interval#length}, {@link Interval#hasSame}, {@link Interval#contains}, {@link Interval#isAfter}, or {@link Interval#isBefore}.\n * * **Transformation** To create other Intervals out of this one, use {@link Interval#set}, {@link Interval#splitAt}, {@link Interval#splitBy}, {@link Interval#divideEqually}, {@link Interval.merge}, {@link Interval.xor}, {@link Interval#union}, {@link Interval#intersection}, or {@link Interval#difference}.\n * * **Comparison** To compare this Interval to another one, use {@link Interval#equals}, {@link Interval#overlaps}, {@link Interval#abutsStart}, {@link Interval#abutsEnd}, {@link Interval#engulfs}\n * * **Output** To convert the Interval into other representations, see {@link Interval#toString}, {@link Interval#toLocaleString}, {@link Interval#toISO}, {@link Interval#toISODate}, {@link Interval#toISOTime}, {@link Interval#toFormat}, and {@link Interval#toDuration}.\n */\nexport default class Interval {\n  /**\n   * @private\n   */\n  constructor(config) {\n    /**\n     * @access private\n     */\n    this.s = config.start;\n    /**\n     * @access private\n     */\n    this.e = config.end;\n    /**\n     * @access private\n     */\n    this.invalid = config.invalid || null;\n    /**\n     * @access private\n     */\n    this.isLuxonInterval = true;\n  }\n\n  /**\n   * Create an invalid Interval.\n   * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {Interval}\n   */\n  static invalid(reason, explanation = null) {\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the Interval is invalid\");\n    }\n\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (Settings.throwOnInvalid) {\n      throw new InvalidIntervalError(invalid);\n    } else {\n      return new Interval({ invalid });\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.\n   * @param {DateTime|Date|Object} start\n   * @param {DateTime|Date|Object} end\n   * @return {Interval}\n   */\n  static fromDateTimes(start, end) {\n    const builtStart = friendlyDateTime(start),\n      builtEnd = friendlyDateTime(end);\n\n    const validateError = validateStartEnd(builtStart, builtEnd);\n\n    if (validateError == null) {\n      return new Interval({\n        start: builtStart,\n        end: builtEnd,\n      });\n    } else {\n      return validateError;\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and a Duration to extend to.\n   * @param {DateTime|Date|Object} start\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static after(start, duration) {\n    const dur = Duration.fromDurationLike(duration),\n      dt = friendlyDateTime(start);\n    return Interval.fromDateTimes(dt, dt.plus(dur));\n  }\n\n  /**\n   * Create an Interval from an end DateTime and a Duration to extend backwards to.\n   * @param {DateTime|Date|Object} end\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static before(end, duration) {\n    const dur = Duration.fromDurationLike(duration),\n      dt = friendlyDateTime(end);\n    return Interval.fromDateTimes(dt.minus(dur), dt);\n  }\n\n  /**\n   * Create an Interval from an ISO 8601 string.\n   * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.\n   * @param {string} text - the ISO string to parse\n   * @param {Object} [opts] - options to pass {@link DateTime#fromISO} and optionally {@link Duration#fromISO}\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {Interval}\n   */\n  static fromISO(text, opts) {\n    const [s, e] = (text || \"\").split(\"/\", 2);\n    if (s && e) {\n      let start, startIsValid;\n      try {\n        start = DateTime.fromISO(s, opts);\n        startIsValid = start.isValid;\n      } catch (e) {\n        startIsValid = false;\n      }\n\n      let end, endIsValid;\n      try {\n        end = DateTime.fromISO(e, opts);\n        endIsValid = end.isValid;\n      } catch (e) {\n        endIsValid = false;\n      }\n\n      if (startIsValid && endIsValid) {\n        return Interval.fromDateTimes(start, end);\n      }\n\n      if (startIsValid) {\n        const dur = Duration.fromISO(e, opts);\n        if (dur.isValid) {\n          return Interval.after(start, dur);\n        }\n      } else if (endIsValid) {\n        const dur = Duration.fromISO(s, opts);\n        if (dur.isValid) {\n          return Interval.before(end, dur);\n        }\n      }\n    }\n    return Interval.invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ISO 8601`);\n  }\n\n  /**\n   * Check if an object is an Interval. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n  static isInterval(o) {\n    return (o && o.isLuxonInterval) || false;\n  }\n\n  /**\n   * Returns the start of the Interval\n   * @type {DateTime}\n   */\n  get start() {\n    return this.isValid ? this.s : null;\n  }\n\n  /**\n   * Returns the end of the Interval\n   * @type {DateTime}\n   */\n  get end() {\n    return this.isValid ? this.e : null;\n  }\n\n  /**\n   * Returns the last DateTime included in the interval (since end is not part of the interval)\n   * @type {DateTime}\n   */\n  get lastDateTime() {\n    return this.isValid ? (this.e ? this.e.minus(1) : null) : null;\n  }\n\n  /**\n   * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.\n   * @type {boolean}\n   */\n  get isValid() {\n    return this.invalidReason === null;\n  }\n\n  /**\n   * Returns an error code if this Interval is invalid, or null if the Interval is valid\n   * @type {string}\n   */\n  get invalidReason() {\n    return this.invalid ? this.invalid.reason : null;\n  }\n\n  /**\n   * Returns an explanation of why this Interval became invalid, or null if the Interval is valid\n   * @type {string}\n   */\n  get invalidExplanation() {\n    return this.invalid ? this.invalid.explanation : null;\n  }\n\n  /**\n   * Returns the length of the Interval in the specified unit.\n   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.\n   * @return {number}\n   */\n  length(unit = \"milliseconds\") {\n    return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;\n  }\n\n  /**\n   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.\n   * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'\n   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'\n   * @param {string} [unit='milliseconds'] - the unit of time to count.\n   * @param {Object} opts - options\n   * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week; this operation will always use the locale of the start DateTime\n   * @return {number}\n   */\n  count(unit = \"milliseconds\", opts) {\n    if (!this.isValid) return NaN;\n    const start = this.start.startOf(unit, opts);\n    let end;\n    if (opts?.useLocaleWeeks) {\n      end = this.end.reconfigure({ locale: start.locale });\n    } else {\n      end = this.end;\n    }\n    end = end.startOf(unit, opts);\n    return Math.floor(end.diff(start, unit).get(unit)) + (end.valueOf() !== this.end.valueOf());\n  }\n\n  /**\n   * Returns whether this Interval's start and end are both in the same unit of time\n   * @param {string} unit - the unit of time to check sameness on\n   * @return {boolean}\n   */\n  hasSame(unit) {\n    return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end DateTimes.\n   * @return {boolean}\n   */\n  isEmpty() {\n    return this.s.valueOf() === this.e.valueOf();\n  }\n\n  /**\n   * Return whether this Interval's start is after the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isAfter(dateTime) {\n    if (!this.isValid) return false;\n    return this.s > dateTime;\n  }\n\n  /**\n   * Return whether this Interval's end is before the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isBefore(dateTime) {\n    if (!this.isValid) return false;\n    return this.e <= dateTime;\n  }\n\n  /**\n   * Return whether this Interval contains the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  contains(dateTime) {\n    if (!this.isValid) return false;\n    return this.s <= dateTime && this.e > dateTime;\n  }\n\n  /**\n   * \"Sets\" the start and/or end dates. Returns a newly-constructed Interval.\n   * @param {Object} values - the values to set\n   * @param {DateTime} values.start - the starting DateTime\n   * @param {DateTime} values.end - the ending DateTime\n   * @return {Interval}\n   */\n  set({ start, end } = {}) {\n    if (!this.isValid) return this;\n    return Interval.fromDateTimes(start || this.s, end || this.e);\n  }\n\n  /**\n   * Split this Interval at each of the specified DateTimes\n   * @param {...DateTime} dateTimes - the unit of time to count.\n   * @return {Array}\n   */\n  splitAt(...dateTimes) {\n    if (!this.isValid) return [];\n    const sorted = dateTimes\n        .map(friendlyDateTime)\n        .filter((d) => this.contains(d))\n        .sort((a, b) => a.toMillis() - b.toMillis()),\n      results = [];\n    let { s } = this,\n      i = 0;\n\n    while (s < this.e) {\n      const added = sorted[i] || this.e,\n        next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      i += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into smaller Intervals, each of the specified length.\n   * Left over time is grouped into a smaller interval\n   * @param {Duration|Object|number} duration - The length of each resulting interval.\n   * @return {Array}\n   */\n  splitBy(duration) {\n    const dur = Duration.fromDurationLike(duration);\n\n    if (!this.isValid || !dur.isValid || dur.as(\"milliseconds\") === 0) {\n      return [];\n    }\n\n    let { s } = this,\n      idx = 1,\n      next;\n\n    const results = [];\n    while (s < this.e) {\n      const added = this.start.plus(dur.mapUnits((x) => x * idx));\n      next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      idx += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into the specified number of smaller intervals.\n   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.\n   * @return {Array}\n   */\n  divideEqually(numberOfParts) {\n    if (!this.isValid) return [];\n    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);\n  }\n\n  /**\n   * Return whether this Interval overlaps with the specified Interval\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  overlaps(other) {\n    return this.e > other.s && this.s < other.e;\n  }\n\n  /**\n   * Return whether this Interval's end is adjacent to the specified Interval's start.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsStart(other) {\n    if (!this.isValid) return false;\n    return +this.e === +other.s;\n  }\n\n  /**\n   * Return whether this Interval's start is adjacent to the specified Interval's end.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsEnd(other) {\n    if (!this.isValid) return false;\n    return +other.e === +this.s;\n  }\n\n  /**\n   * Returns true if this Interval fully contains the specified Interval, specifically if the intersect (of this Interval and the other Interval) is equal to the other Interval; false otherwise.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  engulfs(other) {\n    if (!this.isValid) return false;\n    return this.s <= other.s && this.e >= other.e;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end as the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n\n    return this.s.equals(other.s) && this.e.equals(other.e);\n  }\n\n  /**\n   * Return an Interval representing the intersection of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.\n   * Returns null if the intersection is empty, meaning, the intervals don't intersect.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  intersection(other) {\n    if (!this.isValid) return this;\n    const s = this.s > other.s ? this.s : other.s,\n      e = this.e < other.e ? this.e : other.e;\n\n    if (s >= e) {\n      return null;\n    } else {\n      return Interval.fromDateTimes(s, e);\n    }\n  }\n\n  /**\n   * Return an Interval representing the union of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  union(other) {\n    if (!this.isValid) return this;\n    const s = this.s < other.s ? this.s : other.s,\n      e = this.e > other.e ? this.e : other.e;\n    return Interval.fromDateTimes(s, e);\n  }\n\n  /**\n   * Merge an array of Intervals into an equivalent minimal set of Intervals.\n   * Combines overlapping and adjacent Intervals.\n   * The resulting array will contain the Intervals in ascending order, that is, starting with the earliest Interval\n   * and ending with the latest.\n   *\n   * @param {Array} intervals\n   * @return {Array}\n   */\n  static merge(intervals) {\n    const [found, final] = intervals\n      .sort((a, b) => a.s - b.s)\n      .reduce(\n        ([sofar, current], item) => {\n          if (!current) {\n            return [sofar, item];\n          } else if (current.overlaps(item) || current.abutsStart(item)) {\n            return [sofar, current.union(item)];\n          } else {\n            return [sofar.concat([current]), item];\n          }\n        },\n        [[], null]\n      );\n    if (final) {\n      found.push(final);\n    }\n    return found;\n  }\n\n  /**\n   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.\n   * @param {Array} intervals\n   * @return {Array}\n   */\n  static xor(intervals) {\n    let start = null,\n      currentCount = 0;\n    const results = [],\n      ends = intervals.map((i) => [\n        { time: i.s, type: \"s\" },\n        { time: i.e, type: \"e\" },\n      ]),\n      flattened = Array.prototype.concat(...ends),\n      arr = flattened.sort((a, b) => a.time - b.time);\n\n    for (const i of arr) {\n      currentCount += i.type === \"s\" ? 1 : -1;\n\n      if (currentCount === 1) {\n        start = i.time;\n      } else {\n        if (start && +start !== +i.time) {\n          results.push(Interval.fromDateTimes(start, i.time));\n        }\n\n        start = null;\n      }\n    }\n\n    return Interval.merge(results);\n  }\n\n  /**\n   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.\n   * @param {...Interval} intervals\n   * @return {Array}\n   */\n  difference(...intervals) {\n    return Interval.xor([this].concat(intervals))\n      .map((i) => this.intersection(i))\n      .filter((i) => i && !i.isEmpty());\n  }\n\n  /**\n   * Returns a string representation of this Interval appropriate for debugging.\n   * @return {string}\n   */\n  toString() {\n    if (!this.isValid) return INVALID;\n    return `[${this.s.toISO()} – ${this.e.toISO()})`;\n  }\n\n  /**\n   * Returns a string representation of this Interval appropriate for the REPL.\n   * @return {string}\n   */\n  [Symbol.for(\"nodejs.util.inspect.custom\")]() {\n    if (this.isValid) {\n      return `Interval { start: ${this.s.toISO()}, end: ${this.e.toISO()} }`;\n    } else {\n      return `Interval { Invalid, reason: ${this.invalidReason} }`;\n    }\n  }\n\n  /**\n   * Returns a localized string representing this Interval. Accepts the same options as the\n   * Intl.DateTimeFormat constructor and any presets defined by Luxon, such as\n   * {@link DateTime.DATE_FULL} or {@link DateTime.TIME_SIMPLE}. The exact behavior of this method\n   * is browser-specific, but in general it will return an appropriate representation of the\n   * Interval in the assigned locale. Defaults to the system's locale if no locale has been\n   * specified.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {Object} [formatOpts=DateTime.DATE_SHORT] - Either a DateTime preset or\n   * Intl.DateTimeFormat constructor options.\n   * @param {Object} opts - Options to override the configuration of the start DateTime.\n   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(); //=> 11/7/2022 – 11/8/2022\n   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL); //=> November 7 – 8, 2022\n   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL, { locale: 'fr-FR' }); //=> 7–8 novembre 2022\n   * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString(DateTime.TIME_SIMPLE); //=> 6:00 – 8:00 PM\n   * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> Mon, Nov 07, 6:00 – 8:00 p\n   * @return {string}\n   */\n  toLocaleString(formatOpts = Formats.DATE_SHORT, opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.s.loc.clone(opts), formatOpts).formatInterval(this)\n      : INVALID;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Interval.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime#toISO}\n   * @return {string}\n   */\n  toISO(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of date of this Interval.\n   * The time components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {string}\n   */\n  toISODate() {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISODate()}/${this.e.toISODate()}`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of time of this Interval.\n   * The date components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime#toISO}\n   * @return {string}\n   */\n  toISOTime(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;\n  }\n\n  /**\n   * Returns a string representation of this Interval formatted according to the specified format\n   * string. **You may not want this.** See {@link Interval#toLocaleString} for a more flexible\n   * formatting tool.\n   * @param {string} dateFormat - The format string. This string formats the start and end time.\n   * See {@link DateTime#toFormat} for details.\n   * @param {Object} opts - Options.\n   * @param {string} [opts.separator =  ' – '] - A separator to place between the start and end\n   * representations.\n   * @return {string}\n   */\n  toFormat(dateFormat, { separator = \" – \" } = {}) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;\n  }\n\n  /**\n   * Return a Duration representing the time spanned by this interval.\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }\n   * @return {Duration}\n   */\n  toDuration(unit, opts) {\n    if (!this.isValid) {\n      return Duration.invalid(this.invalidReason);\n    }\n    return this.e.diff(this.s, unit, opts);\n  }\n\n  /**\n   * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes\n   * @param {function} mapFn\n   * @return {Interval}\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))\n   */\n  mapEndpoints(mapFn) {\n    return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));\n  }\n}\n","import DateTime from \"./datetime.js\";\nimport Settings from \"./settings.js\";\nimport Locale from \"./impl/locale.js\";\nimport IANAZone from \"./zones/IANAZone.js\";\nimport { normalizeZone } from \"./impl/zoneUtil.js\";\n\nimport { hasLocaleWeekInfo, hasRelative } from \"./impl/util.js\";\n\n/**\n * The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.\n */\nexport default class Info {\n  /**\n   * Return whether the specified zone contains a DST.\n   * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.\n   * @return {boolean}\n   */\n  static hasDST(zone = Settings.defaultZone) {\n    const proto = DateTime.now().setZone(zone).set({ month: 12 });\n\n    return !zone.isUniversal && proto.offset !== proto.set({ month: 6 }).offset;\n  }\n\n  /**\n   * Return whether the specified zone is a valid IANA specifier.\n   * @param {string} zone - Zone to check\n   * @return {boolean}\n   */\n  static isValidIANAZone(zone) {\n    return IANAZone.isValidZone(zone);\n  }\n\n  /**\n   * Converts the input into a {@link Zone} instance.\n   *\n   * * If `input` is already a Zone instance, it is returned unchanged.\n   * * If `input` is a string containing a valid time zone name, a Zone instance\n   *   with that name is returned.\n   * * If `input` is a string that doesn't refer to a known time zone, a Zone\n   *   instance with {@link Zone#isValid} == false is returned.\n   * * If `input is a number, a Zone instance with the specified fixed offset\n   *   in minutes is returned.\n   * * If `input` is `null` or `undefined`, the default zone is returned.\n   * @param {string|Zone|number} [input] - the value to be converted\n   * @return {Zone}\n   */\n  static normalizeZone(input) {\n    return normalizeZone(input, Settings.defaultZone);\n  }\n\n  /**\n   * Get the weekday on which the week starts according to the given locale.\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @returns {number} the start of the week, 1 for Monday through 7 for Sunday\n   */\n  static getStartOfWeek({ locale = null, locObj = null } = {}) {\n    return (locObj || Locale.create(locale)).getStartOfWeek();\n  }\n\n  /**\n   * Get the minimum number of days necessary in a week before it is considered part of the next year according\n   * to the given locale.\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @returns {number}\n   */\n  static getMinimumDaysInFirstWeek({ locale = null, locObj = null } = {}) {\n    return (locObj || Locale.create(locale)).getMinDaysInFirstWeek();\n  }\n\n  /**\n   * Get the weekdays, which are considered the weekend according to the given locale\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @returns {number[]} an array of weekdays, 1 for Monday through 7 for Sunday\n   */\n  static getWeekendWeekdays({ locale = null, locObj = null } = {}) {\n    // copy the array, because we cache it internally\n    return (locObj || Locale.create(locale)).getWeekendDays().slice();\n  }\n\n  /**\n   * Return an array of standalone month names.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {string} [length='long'] - the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @example Info.months()[0] //=> 'January'\n   * @example Info.months('short')[0] //=> 'Jan'\n   * @example Info.months('numeric')[0] //=> '1'\n   * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'\n   * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'\n   * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'\n   * @return {Array}\n   */\n  static months(\n    length = \"long\",\n    { locale = null, numberingSystem = null, locObj = null, outputCalendar = \"gregory\" } = {}\n  ) {\n    return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length);\n  }\n\n  /**\n   * Return an array of format month names.\n   * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that\n   * changes the string.\n   * See {@link Info#months}\n   * @param {string} [length='long'] - the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @return {Array}\n   */\n  static monthsFormat(\n    length = \"long\",\n    { locale = null, numberingSystem = null, locObj = null, outputCalendar = \"gregory\" } = {}\n  ) {\n    return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length, true);\n  }\n\n  /**\n   * Return an array of standalone week names.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {string} [length='long'] - the length of the weekday representation, such as \"narrow\", \"short\", \"long\".\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @example Info.weekdays()[0] //=> 'Monday'\n   * @example Info.weekdays('short')[0] //=> 'Mon'\n   * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'\n   * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'\n   * @return {Array}\n   */\n  static weekdays(length = \"long\", { locale = null, numberingSystem = null, locObj = null } = {}) {\n    return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length);\n  }\n\n  /**\n   * Return an array of format week names.\n   * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that\n   * changes the string.\n   * See {@link Info#weekdays}\n   * @param {string} [length='long'] - the length of the month representation, such as \"narrow\", \"short\", \"long\".\n   * @param {Object} opts - options\n   * @param {string} [opts.locale=null] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @return {Array}\n   */\n  static weekdaysFormat(\n    length = \"long\",\n    { locale = null, numberingSystem = null, locObj = null } = {}\n  ) {\n    return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length, true);\n  }\n\n  /**\n   * Return an array of meridiems.\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @example Info.meridiems() //=> [ 'AM', 'PM' ]\n   * @example Info.meridiems({ locale: 'my' }) //=> [ 'နံနက်', 'ညနေ' ]\n   * @return {Array}\n   */\n  static meridiems({ locale = null } = {}) {\n    return Locale.create(locale).meridiems();\n  }\n\n  /**\n   * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.\n   * @param {string} [length='short'] - the length of the era representation, such as \"short\" or \"long\".\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @example Info.eras() //=> [ 'BC', 'AD' ]\n   * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]\n   * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]\n   * @return {Array}\n   */\n  static eras(length = \"short\", { locale = null } = {}) {\n    return Locale.create(locale, null, \"gregory\").eras(length);\n  }\n\n  /**\n   * Return the set of available features in this environment.\n   * Some features of Luxon are not available in all environments. For example, on older browsers, relative time formatting support is not available. Use this function to figure out if that's the case.\n   * Keys:\n   * * `relative`: whether this environment supports relative time formatting\n   * * `localeWeek`: whether this environment supports different weekdays for the start of the week based on the locale\n   * @example Info.features() //=> { relative: false, localeWeek: true }\n   * @return {Object}\n   */\n  static features() {\n    return { relative: hasRelative(), localeWeek: hasLocaleWeekInfo() };\n  }\n}\n","import Duration from \"../duration.js\";\n\nfunction dayDiff(earlier, later) {\n  const utcDayStart = (dt) => dt.toUTC(0, { keepLocalTime: true }).startOf(\"day\").valueOf(),\n    ms = utcDayStart(later) - utcDayStart(earlier);\n  return Math.floor(Duration.fromMillis(ms).as(\"days\"));\n}\n\nfunction highOrderDiffs(cursor, later, units) {\n  const differs = [\n    [\"years\", (a, b) => b.year - a.year],\n    [\"quarters\", (a, b) => b.quarter - a.quarter + (b.year - a.year) * 4],\n    [\"months\", (a, b) => b.month - a.month + (b.year - a.year) * 12],\n    [\n      \"weeks\",\n      (a, b) => {\n        const days = dayDiff(a, b);\n        return (days - (days % 7)) / 7;\n      },\n    ],\n    [\"days\", dayDiff],\n  ];\n\n  const results = {};\n  const earlier = cursor;\n  let lowestOrder, highWater;\n\n  /* This loop tries to diff using larger units first.\n     If we overshoot, we backtrack and try the next smaller unit.\n     \"cursor\" starts out at the earlier timestamp and moves closer and closer to \"later\"\n     as we use smaller and smaller units.\n     highWater keeps track of where we would be if we added one more of the smallest unit,\n     this is used later to potentially convert any difference smaller than the smallest higher order unit\n     into a fraction of that smallest higher order unit\n  */\n  for (const [unit, differ] of differs) {\n    if (units.indexOf(unit) >= 0) {\n      lowestOrder = unit;\n\n      results[unit] = differ(cursor, later);\n      highWater = earlier.plus(results);\n\n      if (highWater > later) {\n        // we overshot the end point, backtrack cursor by 1\n        results[unit]--;\n        cursor = earlier.plus(results);\n\n        // if we are still overshooting now, we need to backtrack again\n        // this happens in certain situations when diffing times in different zones,\n        // because this calculation ignores time zones\n        if (cursor > later) {\n          // keep the \"overshot by 1\" around as highWater\n          highWater = cursor;\n          // backtrack cursor by 1\n          results[unit]--;\n          cursor = earlier.plus(results);\n        }\n      } else {\n        cursor = highWater;\n      }\n    }\n  }\n\n  return [cursor, results, highWater, lowestOrder];\n}\n\nexport default function (earlier, later, units, opts) {\n  let [cursor, results, highWater, lowestOrder] = highOrderDiffs(earlier, later, units);\n\n  const remainingMillis = later - cursor;\n\n  const lowerOrderUnits = units.filter(\n    (u) => [\"hours\", \"minutes\", \"seconds\", \"milliseconds\"].indexOf(u) >= 0\n  );\n\n  if (lowerOrderUnits.length === 0) {\n    if (highWater < later) {\n      highWater = cursor.plus({ [lowestOrder]: 1 });\n    }\n\n    if (highWater !== cursor) {\n      results[lowestOrder] = (results[lowestOrder] || 0) + remainingMillis / (highWater - cursor);\n    }\n  }\n\n  const duration = Duration.fromObject(results, opts);\n\n  if (lowerOrderUnits.length > 0) {\n    return Duration.fromMillis(remainingMillis, opts)\n      .shiftTo(...lowerOrderUnits)\n      .plus(duration);\n  } else {\n    return duration;\n  }\n}\n","import { parseMillis, isUndefined, untruncateYear, signedOffset, hasOwnProperty } from \"./util.js\";\nimport Formatter from \"./formatter.js\";\nimport FixedOffsetZone from \"../zones/fixedOffsetZone.js\";\nimport IANAZone from \"../zones/IANAZone.js\";\nimport DateTime from \"../datetime.js\";\nimport { digitRegex, parseDigits } from \"./digits.js\";\nimport { ConflictingSpecificationError } from \"../errors.js\";\n\nconst MISSING_FTP = \"missing Intl.DateTimeFormat.formatToParts support\";\n\nfunction intUnit(regex, post = (i) => i) {\n  return { regex, deser: ([s]) => post(parseDigits(s)) };\n}\n\nconst NBSP = String.fromCharCode(160);\nconst spaceOrNBSP = `[ ${NBSP}]`;\nconst spaceOrNBSPRegExp = new RegExp(spaceOrNBSP, \"g\");\n\nfunction fixListRegex(s) {\n  // make dots optional and also make them literal\n  // make space and non breakable space characters interchangeable\n  return s.replace(/\\./g, \"\\\\.?\").replace(spaceOrNBSPRegExp, spaceOrNBSP);\n}\n\nfunction stripInsensitivities(s) {\n  return s\n    .replace(/\\./g, \"\") // ignore dots that were made optional\n    .replace(spaceOrNBSPRegExp, \" \") // interchange space and nbsp\n    .toLowerCase();\n}\n\nfunction oneOf(strings, startIndex) {\n  if (strings === null) {\n    return null;\n  } else {\n    return {\n      regex: RegExp(strings.map(fixListRegex).join(\"|\")),\n      deser: ([s]) =>\n        strings.findIndex((i) => stripInsensitivities(s) === stripInsensitivities(i)) + startIndex,\n    };\n  }\n}\n\nfunction offset(regex, groups) {\n  return { regex, deser: ([, h, m]) => signedOffset(h, m), groups };\n}\n\nfunction simple(regex) {\n  return { regex, deser: ([s]) => s };\n}\n\nfunction escapeToken(value) {\n  return value.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\");\n}\n\n/**\n * @param token\n * @param {Locale} loc\n */\nfunction unitForToken(token, loc) {\n  const one = digitRegex(loc),\n    two = digitRegex(loc, \"{2}\"),\n    three = digitRegex(loc, \"{3}\"),\n    four = digitRegex(loc, \"{4}\"),\n    six = digitRegex(loc, \"{6}\"),\n    oneOrTwo = digitRegex(loc, \"{1,2}\"),\n    oneToThree = digitRegex(loc, \"{1,3}\"),\n    oneToSix = digitRegex(loc, \"{1,6}\"),\n    oneToNine = digitRegex(loc, \"{1,9}\"),\n    twoToFour = digitRegex(loc, \"{2,4}\"),\n    fourToSix = digitRegex(loc, \"{4,6}\"),\n    literal = (t) => ({ regex: RegExp(escapeToken(t.val)), deser: ([s]) => s, literal: true }),\n    unitate = (t) => {\n      if (token.literal) {\n        return literal(t);\n      }\n      switch (t.val) {\n        // era\n        case \"G\":\n          return oneOf(loc.eras(\"short\"), 0);\n        case \"GG\":\n          return oneOf(loc.eras(\"long\"), 0);\n        // years\n        case \"y\":\n          return intUnit(oneToSix);\n        case \"yy\":\n          return intUnit(twoToFour, untruncateYear);\n        case \"yyyy\":\n          return intUnit(four);\n        case \"yyyyy\":\n          return intUnit(fourToSix);\n        case \"yyyyyy\":\n          return intUnit(six);\n        // months\n        case \"M\":\n          return intUnit(oneOrTwo);\n        case \"MM\":\n          return intUnit(two);\n        case \"MMM\":\n          return oneOf(loc.months(\"short\", true), 1);\n        case \"MMMM\":\n          return oneOf(loc.months(\"long\", true), 1);\n        case \"L\":\n          return intUnit(oneOrTwo);\n        case \"LL\":\n          return intUnit(two);\n        case \"LLL\":\n          return oneOf(loc.months(\"short\", false), 1);\n        case \"LLLL\":\n          return oneOf(loc.months(\"long\", false), 1);\n        // dates\n        case \"d\":\n          return intUnit(oneOrTwo);\n        case \"dd\":\n          return intUnit(two);\n        // ordinals\n        case \"o\":\n          return intUnit(oneToThree);\n        case \"ooo\":\n          return intUnit(three);\n        // time\n        case \"HH\":\n          return intUnit(two);\n        case \"H\":\n          return intUnit(oneOrTwo);\n        case \"hh\":\n          return intUnit(two);\n        case \"h\":\n          return intUnit(oneOrTwo);\n        case \"mm\":\n          return intUnit(two);\n        case \"m\":\n          return intUnit(oneOrTwo);\n        case \"q\":\n          return intUnit(oneOrTwo);\n        case \"qq\":\n          return intUnit(two);\n        case \"s\":\n          return intUnit(oneOrTwo);\n        case \"ss\":\n          return intUnit(two);\n        case \"S\":\n          return intUnit(oneToThree);\n        case \"SSS\":\n          return intUnit(three);\n        case \"u\":\n          return simple(oneToNine);\n        case \"uu\":\n          return simple(oneOrTwo);\n        case \"uuu\":\n          return intUnit(one);\n        // meridiem\n        case \"a\":\n          return oneOf(loc.meridiems(), 0);\n        // weekYear (k)\n        case \"kkkk\":\n          return intUnit(four);\n        case \"kk\":\n          return intUnit(twoToFour, untruncateYear);\n        // weekNumber (W)\n        case \"W\":\n          return intUnit(oneOrTwo);\n        case \"WW\":\n          return intUnit(two);\n        // weekdays\n        case \"E\":\n        case \"c\":\n          return intUnit(one);\n        case \"EEE\":\n          return oneOf(loc.weekdays(\"short\", false), 1);\n        case \"EEEE\":\n          return oneOf(loc.weekdays(\"long\", false), 1);\n        case \"ccc\":\n          return oneOf(loc.weekdays(\"short\", true), 1);\n        case \"cccc\":\n          return oneOf(loc.weekdays(\"long\", true), 1);\n        // offset/zone\n        case \"Z\":\n        case \"ZZ\":\n          return offset(new RegExp(`([+-]${oneOrTwo.source})(?::(${two.source}))?`), 2);\n        case \"ZZZ\":\n          return offset(new RegExp(`([+-]${oneOrTwo.source})(${two.source})?`), 2);\n        // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing\n        // because we don't have any way to figure out what they are\n        case \"z\":\n          return simple(/[a-z_+-/]{1,256}?/i);\n        // this special-case \"token\" represents a place where a macro-token expanded into a white-space literal\n        // in this case we accept any non-newline white-space\n        case \" \":\n          return simple(/[^\\S\\n\\r]/);\n        default:\n          return literal(t);\n      }\n    };\n\n  const unit = unitate(token) || {\n    invalidReason: MISSING_FTP,\n  };\n\n  unit.token = token;\n\n  return unit;\n}\n\nconst partTypeStyleToTokenVal = {\n  year: {\n    \"2-digit\": \"yy\",\n    numeric: \"yyyyy\",\n  },\n  month: {\n    numeric: \"M\",\n    \"2-digit\": \"MM\",\n    short: \"MMM\",\n    long: \"MMMM\",\n  },\n  day: {\n    numeric: \"d\",\n    \"2-digit\": \"dd\",\n  },\n  weekday: {\n    short: \"EEE\",\n    long: \"EEEE\",\n  },\n  dayperiod: \"a\",\n  dayPeriod: \"a\",\n  hour12: {\n    numeric: \"h\",\n    \"2-digit\": \"hh\",\n  },\n  hour24: {\n    numeric: \"H\",\n    \"2-digit\": \"HH\",\n  },\n  minute: {\n    numeric: \"m\",\n    \"2-digit\": \"mm\",\n  },\n  second: {\n    numeric: \"s\",\n    \"2-digit\": \"ss\",\n  },\n  timeZoneName: {\n    long: \"ZZZZZ\",\n    short: \"ZZZ\",\n  },\n};\n\nfunction tokenForPart(part, formatOpts, resolvedOpts) {\n  const { type, value } = part;\n\n  if (type === \"literal\") {\n    const isSpace = /^\\s+$/.test(value);\n    return {\n      literal: !isSpace,\n      val: isSpace ? \" \" : value,\n    };\n  }\n\n  const style = formatOpts[type];\n\n  // The user might have explicitly specified hour12 or hourCycle\n  // if so, respect their decision\n  // if not, refer back to the resolvedOpts, which are based on the locale\n  let actualType = type;\n  if (type === \"hour\") {\n    if (formatOpts.hour12 != null) {\n      actualType = formatOpts.hour12 ? \"hour12\" : \"hour24\";\n    } else if (formatOpts.hourCycle != null) {\n      if (formatOpts.hourCycle === \"h11\" || formatOpts.hourCycle === \"h12\") {\n        actualType = \"hour12\";\n      } else {\n        actualType = \"hour24\";\n      }\n    } else {\n      // tokens only differentiate between 24 hours or not,\n      // so we do not need to check hourCycle here, which is less supported anyways\n      actualType = resolvedOpts.hour12 ? \"hour12\" : \"hour24\";\n    }\n  }\n  let val = partTypeStyleToTokenVal[actualType];\n  if (typeof val === \"object\") {\n    val = val[style];\n  }\n\n  if (val) {\n    return {\n      literal: false,\n      val,\n    };\n  }\n\n  return undefined;\n}\n\nfunction buildRegex(units) {\n  const re = units.map((u) => u.regex).reduce((f, r) => `${f}(${r.source})`, \"\");\n  return [`^${re}$`, units];\n}\n\nfunction match(input, regex, handlers) {\n  const matches = input.match(regex);\n\n  if (matches) {\n    const all = {};\n    let matchIndex = 1;\n    for (const i in handlers) {\n      if (hasOwnProperty(handlers, i)) {\n        const h = handlers[i],\n          groups = h.groups ? h.groups + 1 : 1;\n        if (!h.literal && h.token) {\n          all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));\n        }\n        matchIndex += groups;\n      }\n    }\n    return [matches, all];\n  } else {\n    return [matches, {}];\n  }\n}\n\nfunction dateTimeFromMatches(matches) {\n  const toField = (token) => {\n    switch (token) {\n      case \"S\":\n        return \"millisecond\";\n      case \"s\":\n        return \"second\";\n      case \"m\":\n        return \"minute\";\n      case \"h\":\n      case \"H\":\n        return \"hour\";\n      case \"d\":\n        return \"day\";\n      case \"o\":\n        return \"ordinal\";\n      case \"L\":\n      case \"M\":\n        return \"month\";\n      case \"y\":\n        return \"year\";\n      case \"E\":\n      case \"c\":\n        return \"weekday\";\n      case \"W\":\n        return \"weekNumber\";\n      case \"k\":\n        return \"weekYear\";\n      case \"q\":\n        return \"quarter\";\n      default:\n        return null;\n    }\n  };\n\n  let zone = null;\n  let specificOffset;\n  if (!isUndefined(matches.z)) {\n    zone = IANAZone.create(matches.z);\n  }\n\n  if (!isUndefined(matches.Z)) {\n    if (!zone) {\n      zone = new FixedOffsetZone(matches.Z);\n    }\n    specificOffset = matches.Z;\n  }\n\n  if (!isUndefined(matches.q)) {\n    matches.M = (matches.q - 1) * 3 + 1;\n  }\n\n  if (!isUndefined(matches.h)) {\n    if (matches.h < 12 && matches.a === 1) {\n      matches.h += 12;\n    } else if (matches.h === 12 && matches.a === 0) {\n      matches.h = 0;\n    }\n  }\n\n  if (matches.G === 0 && matches.y) {\n    matches.y = -matches.y;\n  }\n\n  if (!isUndefined(matches.u)) {\n    matches.S = parseMillis(matches.u);\n  }\n\n  const vals = Object.keys(matches).reduce((r, k) => {\n    const f = toField(k);\n    if (f) {\n      r[f] = matches[k];\n    }\n\n    return r;\n  }, {});\n\n  return [vals, zone, specificOffset];\n}\n\nlet dummyDateTimeCache = null;\n\nfunction getDummyDateTime() {\n  if (!dummyDateTimeCache) {\n    dummyDateTimeCache = DateTime.fromMillis(1555555555555);\n  }\n\n  return dummyDateTimeCache;\n}\n\nfunction maybeExpandMacroToken(token, locale) {\n  if (token.literal) {\n    return token;\n  }\n\n  const formatOpts = Formatter.macroTokenToFormatOpts(token.val);\n  const tokens = formatOptsToTokens(formatOpts, locale);\n\n  if (tokens == null || tokens.includes(undefined)) {\n    return token;\n  }\n\n  return tokens;\n}\n\nexport function expandMacroTokens(tokens, locale) {\n  return Array.prototype.concat(...tokens.map((t) => maybeExpandMacroToken(t, locale)));\n}\n\n/**\n * @private\n */\n\nexport class TokenParser {\n  constructor(locale, format) {\n    this.locale = locale;\n    this.format = format;\n    this.tokens = expandMacroTokens(Formatter.parseFormat(format), locale);\n    this.units = this.tokens.map((t) => unitForToken(t, locale));\n    this.disqualifyingUnit = this.units.find((t) => t.invalidReason);\n\n    if (!this.disqualifyingUnit) {\n      const [regexString, handlers] = buildRegex(this.units);\n      this.regex = RegExp(regexString, \"i\");\n      this.handlers = handlers;\n    }\n  }\n\n  explainFromTokens(input) {\n    if (!this.isValid) {\n      return { input, tokens: this.tokens, invalidReason: this.invalidReason };\n    } else {\n      const [rawMatches, matches] = match(input, this.regex, this.handlers),\n        [result, zone, specificOffset] = matches\n          ? dateTimeFromMatches(matches)\n          : [null, null, undefined];\n      if (hasOwnProperty(matches, \"a\") && hasOwnProperty(matches, \"H\")) {\n        throw new ConflictingSpecificationError(\n          \"Can't include meridiem when specifying 24-hour format\"\n        );\n      }\n      return {\n        input,\n        tokens: this.tokens,\n        regex: this.regex,\n        rawMatches,\n        matches,\n        result,\n        zone,\n        specificOffset,\n      };\n    }\n  }\n\n  get isValid() {\n    return !this.disqualifyingUnit;\n  }\n\n  get invalidReason() {\n    return this.disqualifyingUnit ? this.disqualifyingUnit.invalidReason : null;\n  }\n}\n\nexport function explainFromTokens(locale, input, format) {\n  const parser = new TokenParser(locale, format);\n  return parser.explainFromTokens(input);\n}\n\nexport function parseFromTokens(locale, input, format) {\n  const { result, zone, specificOffset, invalidReason } = explainFromTokens(locale, input, format);\n  return [result, zone, specificOffset, invalidReason];\n}\n\nexport function formatOptsToTokens(formatOpts, locale) {\n  if (!formatOpts) {\n    return null;\n  }\n\n  const formatter = Formatter.create(locale, formatOpts);\n  const df = formatter.dtFormatter(getDummyDateTime());\n  const parts = df.formatToParts();\n  const resolvedOpts = df.resolvedOptions();\n  return parts.map((p) => tokenForPart(p, formatOpts, resolvedOpts));\n}\n","import Duration from \"./duration.js\";\nimport Interval from \"./interval.js\";\nimport Settings from \"./settings.js\";\nimport Info from \"./info.js\";\nimport Formatter from \"./impl/formatter.js\";\nimport FixedOffsetZone from \"./zones/fixedOffsetZone.js\";\nimport Locale from \"./impl/locale.js\";\nimport {\n  isUndefined,\n  maybeArray,\n  isDate,\n  isNumber,\n  bestBy,\n  daysInMonth,\n  daysInYear,\n  isLeapYear,\n  weeksInWeekYear,\n  normalizeObject,\n  roundTo,\n  objToLocalTS,\n  padStart,\n} from \"./impl/util.js\";\nimport { normalizeZone } from \"./impl/zoneUtil.js\";\nimport diff from \"./impl/diff.js\";\nimport { parseRFC2822Date, parseISODate, parseHTTPDate, parseSQL } from \"./impl/regexParser.js\";\nimport {\n  parseFromTokens,\n  explainFromTokens,\n  formatOptsToTokens,\n  expandMacroTokens,\n  TokenParser,\n} from \"./impl/tokenParser.js\";\nimport {\n  gregorianToWeek,\n  weekToGregorian,\n  gregorianToOrdinal,\n  ordinalToGregorian,\n  hasInvalidGregorianData,\n  hasInvalidWeekData,\n  hasInvalidOrdinalData,\n  hasInvalidTimeData,\n  usesLocalWeekValues,\n  isoWeekdayToLocal,\n} from \"./impl/conversions.js\";\nimport * as Formats from \"./impl/formats.js\";\nimport {\n  InvalidArgumentError,\n  ConflictingSpecificationError,\n  InvalidUnitError,\n  InvalidDateTimeError,\n} from \"./errors.js\";\nimport Invalid from \"./impl/invalid.js\";\n\nconst INVALID = \"Invalid DateTime\";\nconst MAX_DATE = 8.64e15;\n\nfunction unsupportedZone(zone) {\n  return new Invalid(\"unsupported zone\", `the zone \"${zone.name}\" is not supported`);\n}\n\n// we cache week data on the DT object and this intermediates the cache\n/**\n * @param {DateTime} dt\n */\nfunction possiblyCachedWeekData(dt) {\n  if (dt.weekData === null) {\n    dt.weekData = gregorianToWeek(dt.c);\n  }\n  return dt.weekData;\n}\n\n/**\n * @param {DateTime} dt\n */\nfunction possiblyCachedLocalWeekData(dt) {\n  if (dt.localWeekData === null) {\n    dt.localWeekData = gregorianToWeek(\n      dt.c,\n      dt.loc.getMinDaysInFirstWeek(),\n      dt.loc.getStartOfWeek()\n    );\n  }\n  return dt.localWeekData;\n}\n\n// clone really means, \"make a new object with these modifications\". all \"setters\" really use this\n// to create a new object while only changing some of the properties\nfunction clone(inst, alts) {\n  const current = {\n    ts: inst.ts,\n    zone: inst.zone,\n    c: inst.c,\n    o: inst.o,\n    loc: inst.loc,\n    invalid: inst.invalid,\n  };\n  return new DateTime({ ...current, ...alts, old: current });\n}\n\n// find the right offset a given local time. The o input is our guess, which determines which\n// offset we'll pick in ambiguous cases (e.g. there are two 3 AMs b/c Fallback DST)\nfunction fixOffset(localTS, o, tz) {\n  // Our UTC time is just a guess because our offset is just a guess\n  let utcGuess = localTS - o * 60 * 1000;\n\n  // Test whether the zone matches the offset for this ts\n  const o2 = tz.offset(utcGuess);\n\n  // If so, offset didn't change and we're done\n  if (o === o2) {\n    return [utcGuess, o];\n  }\n\n  // If not, change the ts by the difference in the offset\n  utcGuess -= (o2 - o) * 60 * 1000;\n\n  // If that gives us the local time we want, we're done\n  const o3 = tz.offset(utcGuess);\n  if (o2 === o3) {\n    return [utcGuess, o2];\n  }\n\n  // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time\n  return [localTS - Math.min(o2, o3) * 60 * 1000, Math.max(o2, o3)];\n}\n\n// convert an epoch timestamp into a calendar object with the given offset\nfunction tsToObj(ts, offset) {\n  ts += offset * 60 * 1000;\n\n  const d = new Date(ts);\n\n  return {\n    year: d.getUTCFullYear(),\n    month: d.getUTCMonth() + 1,\n    day: d.getUTCDate(),\n    hour: d.getUTCHours(),\n    minute: d.getUTCMinutes(),\n    second: d.getUTCSeconds(),\n    millisecond: d.getUTCMilliseconds(),\n  };\n}\n\n// convert a calendar object to a epoch timestamp\nfunction objToTS(obj, offset, zone) {\n  return fixOffset(objToLocalTS(obj), offset, zone);\n}\n\n// create a new DT instance by adding a duration, adjusting for DSTs\nfunction adjustTime(inst, dur) {\n  const oPre = inst.o,\n    year = inst.c.year + Math.trunc(dur.years),\n    month = inst.c.month + Math.trunc(dur.months) + Math.trunc(dur.quarters) * 3,\n    c = {\n      ...inst.c,\n      year,\n      month,\n      day:\n        Math.min(inst.c.day, daysInMonth(year, month)) +\n        Math.trunc(dur.days) +\n        Math.trunc(dur.weeks) * 7,\n    },\n    millisToAdd = Duration.fromObject({\n      years: dur.years - Math.trunc(dur.years),\n      quarters: dur.quarters - Math.trunc(dur.quarters),\n      months: dur.months - Math.trunc(dur.months),\n      weeks: dur.weeks - Math.trunc(dur.weeks),\n      days: dur.days - Math.trunc(dur.days),\n      hours: dur.hours,\n      minutes: dur.minutes,\n      seconds: dur.seconds,\n      milliseconds: dur.milliseconds,\n    }).as(\"milliseconds\"),\n    localTS = objToLocalTS(c);\n\n  let [ts, o] = fixOffset(localTS, oPre, inst.zone);\n\n  if (millisToAdd !== 0) {\n    ts += millisToAdd;\n    // that could have changed the offset by going over a DST, but we want to keep the ts the same\n    o = inst.zone.offset(ts);\n  }\n\n  return { ts, o };\n}\n\n// helper useful in turning the results of parsing into real dates\n// by handling the zone options\nfunction parseDataToDateTime(parsed, parsedZone, opts, format, text, specificOffset) {\n  const { setZone, zone } = opts;\n  if ((parsed && Object.keys(parsed).length !== 0) || parsedZone) {\n    const interpretationZone = parsedZone || zone,\n      inst = DateTime.fromObject(parsed, {\n        ...opts,\n        zone: interpretationZone,\n        specificOffset,\n      });\n    return setZone ? inst : inst.setZone(zone);\n  } else {\n    return DateTime.invalid(\n      new Invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ${format}`)\n    );\n  }\n}\n\n// if you want to output a technical format (e.g. RFC 2822), this helper\n// helps handle the details\nfunction toTechFormat(dt, format, allowZ = true) {\n  return dt.isValid\n    ? Formatter.create(Locale.create(\"en-US\"), {\n        allowZ,\n        forceSimple: true,\n      }).formatDateTimeFromString(dt, format)\n    : null;\n}\n\nfunction toISODate(o, extended) {\n  const longFormat = o.c.year > 9999 || o.c.year < 0;\n  let c = \"\";\n  if (longFormat && o.c.year >= 0) c += \"+\";\n  c += padStart(o.c.year, longFormat ? 6 : 4);\n\n  if (extended) {\n    c += \"-\";\n    c += padStart(o.c.month);\n    c += \"-\";\n    c += padStart(o.c.day);\n  } else {\n    c += padStart(o.c.month);\n    c += padStart(o.c.day);\n  }\n  return c;\n}\n\nfunction toISOTime(\n  o,\n  extended,\n  suppressSeconds,\n  suppressMilliseconds,\n  includeOffset,\n  extendedZone\n) {\n  let c = padStart(o.c.hour);\n  if (extended) {\n    c += \":\";\n    c += padStart(o.c.minute);\n    if (o.c.millisecond !== 0 || o.c.second !== 0 || !suppressSeconds) {\n      c += \":\";\n    }\n  } else {\n    c += padStart(o.c.minute);\n  }\n\n  if (o.c.millisecond !== 0 || o.c.second !== 0 || !suppressSeconds) {\n    c += padStart(o.c.second);\n\n    if (o.c.millisecond !== 0 || !suppressMilliseconds) {\n      c += \".\";\n      c += padStart(o.c.millisecond, 3);\n    }\n  }\n\n  if (includeOffset) {\n    if (o.isOffsetFixed && o.offset === 0 && !extendedZone) {\n      c += \"Z\";\n    } else if (o.o < 0) {\n      c += \"-\";\n      c += padStart(Math.trunc(-o.o / 60));\n      c += \":\";\n      c += padStart(Math.trunc(-o.o % 60));\n    } else {\n      c += \"+\";\n      c += padStart(Math.trunc(o.o / 60));\n      c += \":\";\n      c += padStart(Math.trunc(o.o % 60));\n    }\n  }\n\n  if (extendedZone) {\n    c += \"[\" + o.zone.ianaName + \"]\";\n  }\n  return c;\n}\n\n// defaults for unspecified units in the supported calendars\nconst defaultUnitValues = {\n    month: 1,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0,\n  },\n  defaultWeekUnitValues = {\n    weekNumber: 1,\n    weekday: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0,\n  },\n  defaultOrdinalUnitValues = {\n    ordinal: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0,\n  };\n\n// Units in the supported calendars, sorted by bigness\nconst orderedUnits = [\"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\", \"millisecond\"],\n  orderedWeekUnits = [\n    \"weekYear\",\n    \"weekNumber\",\n    \"weekday\",\n    \"hour\",\n    \"minute\",\n    \"second\",\n    \"millisecond\",\n  ],\n  orderedOrdinalUnits = [\"year\", \"ordinal\", \"hour\", \"minute\", \"second\", \"millisecond\"];\n\n// standardize case and plurality in units\nfunction normalizeUnit(unit) {\n  const normalized = {\n    year: \"year\",\n    years: \"year\",\n    month: \"month\",\n    months: \"month\",\n    day: \"day\",\n    days: \"day\",\n    hour: \"hour\",\n    hours: \"hour\",\n    minute: \"minute\",\n    minutes: \"minute\",\n    quarter: \"quarter\",\n    quarters: \"quarter\",\n    second: \"second\",\n    seconds: \"second\",\n    millisecond: \"millisecond\",\n    milliseconds: \"millisecond\",\n    weekday: \"weekday\",\n    weekdays: \"weekday\",\n    weeknumber: \"weekNumber\",\n    weeksnumber: \"weekNumber\",\n    weeknumbers: \"weekNumber\",\n    weekyear: \"weekYear\",\n    weekyears: \"weekYear\",\n    ordinal: \"ordinal\",\n  }[unit.toLowerCase()];\n\n  if (!normalized) throw new InvalidUnitError(unit);\n\n  return normalized;\n}\n\nfunction normalizeUnitWithLocalWeeks(unit) {\n  switch (unit.toLowerCase()) {\n    case \"localweekday\":\n    case \"localweekdays\":\n      return \"localWeekday\";\n    case \"localweeknumber\":\n    case \"localweeknumbers\":\n      return \"localWeekNumber\";\n    case \"localweekyear\":\n    case \"localweekyears\":\n      return \"localWeekYear\";\n    default:\n      return normalizeUnit(unit);\n  }\n}\n\n// cache offsets for zones based on the current timestamp when this function is\n// first called. When we are handling a datetime from components like (year,\n// month, day, hour) in a time zone, we need a guess about what the timezone\n// offset is so that we can convert into a UTC timestamp. One way is to find the\n// offset of now in the zone. The actual date may have a different offset (for\n// example, if we handle a date in June while we're in December in a zone that\n// observes DST), but we can check and adjust that.\n//\n// When handling many dates, calculating the offset for now every time is\n// expensive. It's just a guess, so we can cache the offset to use even if we\n// are right on a time change boundary (we'll just correct in the other\n// direction). Using a timestamp from first read is a slight optimization for\n// handling dates close to the current date, since those dates will usually be\n// in the same offset (we could set the timestamp statically, instead). We use a\n// single timestamp for all zones to make things a bit more predictable.\n//\n// This is safe for quickDT (used by local() and utc()) because we don't fill in\n// higher-order units from tsNow (as we do in fromObject, this requires that\n// offset is calculated from tsNow).\n/**\n * @param {Zone} zone\n * @return {number}\n */\nfunction guessOffsetForZone(zone) {\n  if (zoneOffsetTs === undefined) {\n    zoneOffsetTs = Settings.now();\n  }\n\n  // Do not cache anything but IANA zones, because it is not safe to do so.\n  // Guessing an offset which is not present in the zone can cause wrong results from fixOffset\n  if (zone.type !== \"iana\") {\n    return zone.offset(zoneOffsetTs);\n  }\n  const zoneName = zone.name;\n  let offsetGuess = zoneOffsetGuessCache.get(zoneName);\n  if (offsetGuess === undefined) {\n    offsetGuess = zone.offset(zoneOffsetTs);\n    zoneOffsetGuessCache.set(zoneName, offsetGuess);\n  }\n  return offsetGuess;\n}\n\n// this is a dumbed down version of fromObject() that runs about 60% faster\n// but doesn't do any validation, makes a bunch of assumptions about what units\n// are present, and so on.\nfunction quickDT(obj, opts) {\n  const zone = normalizeZone(opts.zone, Settings.defaultZone);\n  if (!zone.isValid) {\n    return DateTime.invalid(unsupportedZone(zone));\n  }\n\n  const loc = Locale.fromObject(opts);\n\n  let ts, o;\n\n  // assume we have the higher-order units\n  if (!isUndefined(obj.year)) {\n    for (const u of orderedUnits) {\n      if (isUndefined(obj[u])) {\n        obj[u] = defaultUnitValues[u];\n      }\n    }\n\n    const invalid = hasInvalidGregorianData(obj) || hasInvalidTimeData(obj);\n    if (invalid) {\n      return DateTime.invalid(invalid);\n    }\n\n    const offsetProvis = guessOffsetForZone(zone);\n    [ts, o] = objToTS(obj, offsetProvis, zone);\n  } else {\n    ts = Settings.now();\n  }\n\n  return new DateTime({ ts, zone, loc, o });\n}\n\nfunction diffRelative(start, end, opts) {\n  const round = isUndefined(opts.round) ? true : opts.round,\n    format = (c, unit) => {\n      c = roundTo(c, round || opts.calendary ? 0 : 2, true);\n      const formatter = end.loc.clone(opts).relFormatter(opts);\n      return formatter.format(c, unit);\n    },\n    differ = (unit) => {\n      if (opts.calendary) {\n        if (!end.hasSame(start, unit)) {\n          return end.startOf(unit).diff(start.startOf(unit), unit).get(unit);\n        } else return 0;\n      } else {\n        return end.diff(start, unit).get(unit);\n      }\n    };\n\n  if (opts.unit) {\n    return format(differ(opts.unit), opts.unit);\n  }\n\n  for (const unit of opts.units) {\n    const count = differ(unit);\n    if (Math.abs(count) >= 1) {\n      return format(count, unit);\n    }\n  }\n  return format(start > end ? -0 : 0, opts.units[opts.units.length - 1]);\n}\n\nfunction lastOpts(argList) {\n  let opts = {},\n    args;\n  if (argList.length > 0 && typeof argList[argList.length - 1] === \"object\") {\n    opts = argList[argList.length - 1];\n    args = Array.from(argList).slice(0, argList.length - 1);\n  } else {\n    args = Array.from(argList);\n  }\n  return [opts, args];\n}\n\n/**\n * Timestamp to use for cached zone offset guesses (exposed for test)\n */\nlet zoneOffsetTs;\n/**\n * Cache for zone offset guesses (exposed for test).\n *\n * This optimizes quickDT via guessOffsetForZone to avoid repeated calls of\n * zone.offset().\n */\nconst zoneOffsetGuessCache = new Map();\n\n/**\n * A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.\n *\n * A DateTime comprises of:\n * * A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.\n * * A time zone. Each instance is considered in the context of a specific zone (by default the local system's zone).\n * * Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.\n *\n * Here is a brief overview of the most commonly used functionality it provides:\n *\n * * **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link DateTime.local}, {@link DateTime.utc}, and (most flexibly) {@link DateTime.fromObject}. To create one from a standard string format, use {@link DateTime.fromISO}, {@link DateTime.fromHTTP}, and {@link DateTime.fromRFC2822}. To create one from a custom string format, use {@link DateTime.fromFormat}. To create one from a native JS date, use {@link DateTime.fromJSDate}.\n * * **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link DateTime#toObject}), use the {@link DateTime#year}, {@link DateTime#month},\n * {@link DateTime#day}, {@link DateTime#hour}, {@link DateTime#minute}, {@link DateTime#second}, {@link DateTime#millisecond} accessors.\n * * **Week calendar**: For ISO week calendar attributes, see the {@link DateTime#weekYear}, {@link DateTime#weekNumber}, and {@link DateTime#weekday} accessors.\n * * **Configuration** See the {@link DateTime#locale} and {@link DateTime#numberingSystem} accessors.\n * * **Transformation**: To transform the DateTime into other DateTimes, use {@link DateTime#set}, {@link DateTime#reconfigure}, {@link DateTime#setZone}, {@link DateTime#setLocale}, {@link DateTime.plus}, {@link DateTime#minus}, {@link DateTime#endOf}, {@link DateTime#startOf}, {@link DateTime#toUTC}, and {@link DateTime#toLocal}.\n * * **Output**: To convert the DateTime to other representations, use the {@link DateTime#toRelative}, {@link DateTime#toRelativeCalendar}, {@link DateTime#toJSON}, {@link DateTime#toISO}, {@link DateTime#toHTTP}, {@link DateTime#toObject}, {@link DateTime#toRFC2822}, {@link DateTime#toString}, {@link DateTime#toLocaleString}, {@link DateTime#toFormat}, {@link DateTime#toMillis} and {@link DateTime#toJSDate}.\n *\n * There's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.\n */\nexport default class DateTime {\n  /**\n   * @access private\n   */\n  constructor(config) {\n    const zone = config.zone || Settings.defaultZone;\n\n    let invalid =\n      config.invalid ||\n      (Number.isNaN(config.ts) ? new Invalid(\"invalid input\") : null) ||\n      (!zone.isValid ? unsupportedZone(zone) : null);\n    /**\n     * @access private\n     */\n    this.ts = isUndefined(config.ts) ? Settings.now() : config.ts;\n\n    let c = null,\n      o = null;\n    if (!invalid) {\n      const unchanged = config.old && config.old.ts === this.ts && config.old.zone.equals(zone);\n\n      if (unchanged) {\n        [c, o] = [config.old.c, config.old.o];\n      } else {\n        // If an offset has been passed and we have not been called from\n        // clone(), we can trust it and avoid the offset calculation.\n        const ot = isNumber(config.o) && !config.old ? config.o : zone.offset(this.ts);\n        c = tsToObj(this.ts, ot);\n        invalid = Number.isNaN(c.year) ? new Invalid(\"invalid input\") : null;\n        c = invalid ? null : c;\n        o = invalid ? null : ot;\n      }\n    }\n\n    /**\n     * @access private\n     */\n    this._zone = zone;\n    /**\n     * @access private\n     */\n    this.loc = config.loc || Locale.create();\n    /**\n     * @access private\n     */\n    this.invalid = invalid;\n    /**\n     * @access private\n     */\n    this.weekData = null;\n    /**\n     * @access private\n     */\n    this.localWeekData = null;\n    /**\n     * @access private\n     */\n    this.c = c;\n    /**\n     * @access private\n     */\n    this.o = o;\n    /**\n     * @access private\n     */\n    this.isLuxonDateTime = true;\n  }\n\n  // CONSTRUCT\n\n  /**\n   * Create a DateTime for the current instant, in the system's time zone.\n   *\n   * Use Settings to override these default values if needed.\n   * @example DateTime.now().toISO() //~> now in the ISO format\n   * @return {DateTime}\n   */\n  static now() {\n    return new DateTime({});\n  }\n\n  /**\n   * Create a local DateTime\n   * @param {number} [year] - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used\n   * @param {number} [month=1] - The month, 1-indexed\n   * @param {number} [day=1] - The day of the month, 1-indexed\n   * @param {number} [hour=0] - The hour of the day, in 24-hour time\n   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59\n   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59\n   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999\n   * @example DateTime.local()                                  //~> now\n   * @example DateTime.local({ zone: \"America/New_York\" })      //~> now, in US east coast time\n   * @example DateTime.local(2017)                              //~> 2017-01-01T00:00:00\n   * @example DateTime.local(2017, 3)                           //~> 2017-03-01T00:00:00\n   * @example DateTime.local(2017, 3, 12, { locale: \"fr\" })     //~> 2017-03-12T00:00:00, with a French locale\n   * @example DateTime.local(2017, 3, 12, 5)                    //~> 2017-03-12T05:00:00\n   * @example DateTime.local(2017, 3, 12, 5, { zone: \"utc\" })   //~> 2017-03-12T05:00:00, in UTC\n   * @example DateTime.local(2017, 3, 12, 5, 45)                //~> 2017-03-12T05:45:00\n   * @example DateTime.local(2017, 3, 12, 5, 45, 10)            //~> 2017-03-12T05:45:10\n   * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765)       //~> 2017-03-12T05:45:10.765\n   * @return {DateTime}\n   */\n  static local() {\n    const [opts, args] = lastOpts(arguments),\n      [year, month, day, hour, minute, second, millisecond] = args;\n    return quickDT({ year, month, day, hour, minute, second, millisecond }, opts);\n  }\n\n  /**\n   * Create a DateTime in UTC\n   * @param {number} [year] - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used\n   * @param {number} [month=1] - The month, 1-indexed\n   * @param {number} [day=1] - The day of the month\n   * @param {number} [hour=0] - The hour of the day, in 24-hour time\n   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59\n   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59\n   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\n   * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance\n   * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance\n   * @param {string} [options.weekSettings] - the week settings to set on the resulting DateTime instance\n   * @example DateTime.utc()                                              //~> now\n   * @example DateTime.utc(2017)                                          //~> 2017-01-01T00:00:00Z\n   * @example DateTime.utc(2017, 3)                                       //~> 2017-03-01T00:00:00Z\n   * @example DateTime.utc(2017, 3, 12)                                   //~> 2017-03-12T00:00:00Z\n   * @example DateTime.utc(2017, 3, 12, 5)                                //~> 2017-03-12T05:00:00Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45)                            //~> 2017-03-12T05:45:00Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45, { locale: \"fr\" })          //~> 2017-03-12T05:45:00Z with a French locale\n   * @example DateTime.utc(2017, 3, 12, 5, 45, 10)                        //~> 2017-03-12T05:45:10Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765, { locale: \"fr\" }) //~> 2017-03-12T05:45:10.765Z with a French locale\n   * @return {DateTime}\n   */\n  static utc() {\n    const [opts, args] = lastOpts(arguments),\n      [year, month, day, hour, minute, second, millisecond] = args;\n\n    opts.zone = FixedOffsetZone.utcInstance;\n    return quickDT({ year, month, day, hour, minute, second, millisecond }, opts);\n  }\n\n  /**\n   * Create a DateTime from a JavaScript Date object. Uses the default zone.\n   * @param {Date} date - a JavaScript Date object\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @return {DateTime}\n   */\n  static fromJSDate(date, options = {}) {\n    const ts = isDate(date) ? date.valueOf() : NaN;\n    if (Number.isNaN(ts)) {\n      return DateTime.invalid(\"invalid input\");\n    }\n\n    const zoneToUse = normalizeZone(options.zone, Settings.defaultZone);\n    if (!zoneToUse.isValid) {\n      return DateTime.invalid(unsupportedZone(zoneToUse));\n    }\n\n    return new DateTime({\n      ts: ts,\n      zone: zoneToUse,\n      loc: Locale.fromObject(options),\n    });\n  }\n\n  /**\n   * Create a DateTime from a number of milliseconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.\n   * @param {number} milliseconds - a number of milliseconds since 1970 UTC\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @param {string} options.weekSettings - the week settings to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  static fromMillis(milliseconds, options = {}) {\n    if (!isNumber(milliseconds)) {\n      throw new InvalidArgumentError(\n        `fromMillis requires a numerical input, but received a ${typeof milliseconds} with value ${milliseconds}`\n      );\n    } else if (milliseconds < -MAX_DATE || milliseconds > MAX_DATE) {\n      // this isn't perfect because we can still end up out of range because of additional shifting, but it's a start\n      return DateTime.invalid(\"Timestamp out of range\");\n    } else {\n      return new DateTime({\n        ts: milliseconds,\n        zone: normalizeZone(options.zone, Settings.defaultZone),\n        loc: Locale.fromObject(options),\n      });\n    }\n  }\n\n  /**\n   * Create a DateTime from a number of seconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.\n   * @param {number} seconds - a number of seconds since 1970 UTC\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @param {string} options.weekSettings - the week settings to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  static fromSeconds(seconds, options = {}) {\n    if (!isNumber(seconds)) {\n      throw new InvalidArgumentError(\"fromSeconds requires a numerical input\");\n    } else {\n      return new DateTime({\n        ts: seconds * 1000,\n        zone: normalizeZone(options.zone, Settings.defaultZone),\n        loc: Locale.fromObject(options),\n      });\n    }\n  }\n\n  /**\n   * Create a DateTime from a JavaScript object with keys like 'year' and 'hour' with reasonable defaults.\n   * @param {Object} obj - the object to create the DateTime from\n   * @param {number} obj.year - a year, such as 1987\n   * @param {number} obj.month - a month, 1-12\n   * @param {number} obj.day - a day of the month, 1-31, depending on the month\n   * @param {number} obj.ordinal - day of the year, 1-365 or 366\n   * @param {number} obj.weekYear - an ISO week year\n   * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year\n   * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday\n   * @param {number} obj.localWeekYear - a week year, according to the locale\n   * @param {number} obj.localWeekNumber - a week number, between 1 and 52 or 53, depending on the year, according to the locale\n   * @param {number} obj.localWeekday - a weekday, 1-7, where 1 is the first and 7 is the last day of the week, according to the locale\n   * @param {number} obj.hour - hour of the day, 0-23\n   * @param {number} obj.minute - minute of the hour, 0-59\n   * @param {number} obj.second - second of the minute, 0-59\n   * @param {number} obj.millisecond - millisecond of the second, 0-999\n   * @param {Object} opts - options for creating this DateTime\n   * @param {string|Zone} [opts.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()\n   * @param {string} [opts.locale='system\\'s locale'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance\n   * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'\n   * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01'\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'utc' }),\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'local' })\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'America/New_York' })\n   * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'\n   * @example DateTime.fromObject({ localWeekYear: 2022, localWeekNumber: 1, localWeekday: 1 }, { locale: \"en-US\" }).toISODate() //=> '2021-12-26'\n   * @return {DateTime}\n   */\n  static fromObject(obj, opts = {}) {\n    obj = obj || {};\n    const zoneToUse = normalizeZone(opts.zone, Settings.defaultZone);\n    if (!zoneToUse.isValid) {\n      return DateTime.invalid(unsupportedZone(zoneToUse));\n    }\n\n    const loc = Locale.fromObject(opts);\n    const normalized = normalizeObject(obj, normalizeUnitWithLocalWeeks);\n    const { minDaysInFirstWeek, startOfWeek } = usesLocalWeekValues(normalized, loc);\n\n    const tsNow = Settings.now(),\n      offsetProvis = !isUndefined(opts.specificOffset)\n        ? opts.specificOffset\n        : zoneToUse.offset(tsNow),\n      containsOrdinal = !isUndefined(normalized.ordinal),\n      containsGregorYear = !isUndefined(normalized.year),\n      containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day),\n      containsGregor = containsGregorYear || containsGregorMD,\n      definiteWeekDef = normalized.weekYear || normalized.weekNumber;\n\n    // cases:\n    // just a weekday -> this week's instance of that weekday, no worries\n    // (gregorian data or ordinal) + (weekYear or weekNumber) -> error\n    // (gregorian month or day) + ordinal -> error\n    // otherwise just use weeks or ordinals or gregorian, depending on what's specified\n\n    if ((containsGregor || containsOrdinal) && definiteWeekDef) {\n      throw new ConflictingSpecificationError(\n        \"Can't mix weekYear/weekNumber units with year/month/day or ordinals\"\n      );\n    }\n\n    if (containsGregorMD && containsOrdinal) {\n      throw new ConflictingSpecificationError(\"Can't mix ordinal dates with month/day\");\n    }\n\n    const useWeekData = definiteWeekDef || (normalized.weekday && !containsGregor);\n\n    // configure ourselves to deal with gregorian dates or week stuff\n    let units,\n      defaultValues,\n      objNow = tsToObj(tsNow, offsetProvis);\n    if (useWeekData) {\n      units = orderedWeekUnits;\n      defaultValues = defaultWeekUnitValues;\n      objNow = gregorianToWeek(objNow, minDaysInFirstWeek, startOfWeek);\n    } else if (containsOrdinal) {\n      units = orderedOrdinalUnits;\n      defaultValues = defaultOrdinalUnitValues;\n      objNow = gregorianToOrdinal(objNow);\n    } else {\n      units = orderedUnits;\n      defaultValues = defaultUnitValues;\n    }\n\n    // set default values for missing stuff\n    let foundFirst = false;\n    for (const u of units) {\n      const v = normalized[u];\n      if (!isUndefined(v)) {\n        foundFirst = true;\n      } else if (foundFirst) {\n        normalized[u] = defaultValues[u];\n      } else {\n        normalized[u] = objNow[u];\n      }\n    }\n\n    // make sure the values we have are in range\n    const higherOrderInvalid = useWeekData\n        ? hasInvalidWeekData(normalized, minDaysInFirstWeek, startOfWeek)\n        : containsOrdinal\n        ? hasInvalidOrdinalData(normalized)\n        : hasInvalidGregorianData(normalized),\n      invalid = higherOrderInvalid || hasInvalidTimeData(normalized);\n\n    if (invalid) {\n      return DateTime.invalid(invalid);\n    }\n\n    // compute the actual time\n    const gregorian = useWeekData\n        ? weekToGregorian(normalized, minDaysInFirstWeek, startOfWeek)\n        : containsOrdinal\n        ? ordinalToGregorian(normalized)\n        : normalized,\n      [tsFinal, offsetFinal] = objToTS(gregorian, offsetProvis, zoneToUse),\n      inst = new DateTime({\n        ts: tsFinal,\n        zone: zoneToUse,\n        o: offsetFinal,\n        loc,\n      });\n\n    // gregorian data + weekday serves only to validate\n    if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {\n      return DateTime.invalid(\n        \"mismatched weekday\",\n        `you can't specify both a weekday of ${normalized.weekday} and a date of ${inst.toISO()}`\n      );\n    }\n\n    if (!inst.isValid) {\n      return DateTime.invalid(inst.invalid);\n    }\n\n    return inst;\n  }\n\n  /**\n   * Create a DateTime from an ISO 8601 string\n   * @param {string} text - the ISO string\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone\n   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance\n   * @param {string} [opts.outputCalendar] - the output calendar to set on the resulting DateTime instance\n   * @param {string} [opts.numberingSystem] - the numbering system to set on the resulting DateTime instance\n   * @param {string} [opts.weekSettings] - the week settings to set on the resulting DateTime instance\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123')\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})\n   * @example DateTime.fromISO('2016-W05-4')\n   * @return {DateTime}\n   */\n  static fromISO(text, opts = {}) {\n    const [vals, parsedZone] = parseISODate(text);\n    return parseDataToDateTime(vals, parsedZone, opts, \"ISO 8601\", text);\n  }\n\n  /**\n   * Create a DateTime from an RFC 2822 string\n   * @param {string} text - the RFC 2822 string\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\n   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance\n   * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')\n   * @example DateTime.fromRFC2822('Fri, 25 Nov 2016 13:23:12 +0600')\n   * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')\n   * @return {DateTime}\n   */\n  static fromRFC2822(text, opts = {}) {\n    const [vals, parsedZone] = parseRFC2822Date(text);\n    return parseDataToDateTime(vals, parsedZone, opts, \"RFC 2822\", text);\n  }\n\n  /**\n   * Create a DateTime from an HTTP header date\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\n   * @param {string} text - the HTTP header date\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\n   * @param {boolean} [opts.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.\n   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance\n   * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')\n   * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')\n   * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')\n   * @return {DateTime}\n   */\n  static fromHTTP(text, opts = {}) {\n    const [vals, parsedZone] = parseHTTPDate(text);\n    return parseDataToDateTime(vals, parsedZone, opts, \"HTTP\", opts);\n  }\n\n  /**\n   * Create a DateTime from an input string and format string.\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/parsing?id=table-of-tokens).\n   * @param {string} text - the string to parse\n   * @param {string} fmt - the format the string is expected to be in (see the link below for the formats)\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone\n   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale\n   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system\n   * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  static fromFormat(text, fmt, opts = {}) {\n    if (isUndefined(text) || isUndefined(fmt)) {\n      throw new InvalidArgumentError(\"fromFormat requires an input string and a format\");\n    }\n\n    const { locale = null, numberingSystem = null } = opts,\n      localeToUse = Locale.fromOpts({\n        locale,\n        numberingSystem,\n        defaultToEN: true,\n      }),\n      [vals, parsedZone, specificOffset, invalid] = parseFromTokens(localeToUse, text, fmt);\n    if (invalid) {\n      return DateTime.invalid(invalid);\n    } else {\n      return parseDataToDateTime(vals, parsedZone, opts, `format ${fmt}`, text, specificOffset);\n    }\n  }\n\n  /**\n   * @deprecated use fromFormat instead\n   */\n  static fromString(text, fmt, opts = {}) {\n    return DateTime.fromFormat(text, fmt, opts);\n  }\n\n  /**\n   * Create a DateTime from a SQL date, time, or datetime\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale\n   * @param {string} text - the string to parse\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone\n   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale\n   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system\n   * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @example DateTime.fromSQL('2017-05-15')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })\n   * @example DateTime.fromSQL('09:12:34.342')\n   * @return {DateTime}\n   */\n  static fromSQL(text, opts = {}) {\n    const [vals, parsedZone] = parseSQL(text);\n    return parseDataToDateTime(vals, parsedZone, opts, \"SQL\", text);\n  }\n\n  /**\n   * Create an invalid DateTime.\n   * @param {string} reason - simple string of why this DateTime is invalid. Should not contain parameters or anything else data-dependent.\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {DateTime}\n   */\n  static invalid(reason, explanation = null) {\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the DateTime is invalid\");\n    }\n\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (Settings.throwOnInvalid) {\n      throw new InvalidDateTimeError(invalid);\n    } else {\n      return new DateTime({ invalid });\n    }\n  }\n\n  /**\n   * Check if an object is an instance of DateTime. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n  static isDateTime(o) {\n    return (o && o.isLuxonDateTime) || false;\n  }\n\n  /**\n   * Produce the format string for a set of options\n   * @param formatOpts\n   * @param localeOpts\n   * @returns {string}\n   */\n  static parseFormatForOpts(formatOpts, localeOpts = {}) {\n    const tokenList = formatOptsToTokens(formatOpts, Locale.fromObject(localeOpts));\n    return !tokenList ? null : tokenList.map((t) => (t ? t.val : null)).join(\"\");\n  }\n\n  /**\n   * Produce the the fully expanded format token for the locale\n   * Does NOT quote characters, so quoted tokens will not round trip correctly\n   * @param fmt\n   * @param localeOpts\n   * @returns {string}\n   */\n  static expandFormat(fmt, localeOpts = {}) {\n    const expanded = expandMacroTokens(Formatter.parseFormat(fmt), Locale.fromObject(localeOpts));\n    return expanded.map((t) => t.val).join(\"\");\n  }\n\n  static resetCache() {\n    zoneOffsetTs = undefined;\n    zoneOffsetGuessCache.clear();\n  }\n\n  // INFO\n\n  /**\n   * Get the value of unit.\n   * @param {string} unit - a unit such as 'minute' or 'day'\n   * @example DateTime.local(2017, 7, 4).get('month'); //=> 7\n   * @example DateTime.local(2017, 7, 4).get('day'); //=> 4\n   * @return {number}\n   */\n  get(unit) {\n    return this[unit];\n  }\n\n  /**\n   * Returns whether the DateTime is valid. Invalid DateTimes occur when:\n   * * The DateTime was created from invalid calendar information, such as the 13th month or February 30\n   * * The DateTime was created by an operation on another invalid date\n   * @type {boolean}\n   */\n  get isValid() {\n    return this.invalid === null;\n  }\n\n  /**\n   * Returns an error code if this DateTime is invalid, or null if the DateTime is valid\n   * @type {string}\n   */\n  get invalidReason() {\n    return this.invalid ? this.invalid.reason : null;\n  }\n\n  /**\n   * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid\n   * @type {string}\n   */\n  get invalidExplanation() {\n    return this.invalid ? this.invalid.explanation : null;\n  }\n\n  /**\n   * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime\n   *\n   * @type {string}\n   */\n  get locale() {\n    return this.isValid ? this.loc.locale : null;\n  }\n\n  /**\n   * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime\n   *\n   * @type {string}\n   */\n  get numberingSystem() {\n    return this.isValid ? this.loc.numberingSystem : null;\n  }\n\n  /**\n   * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime\n   *\n   * @type {string}\n   */\n  get outputCalendar() {\n    return this.isValid ? this.loc.outputCalendar : null;\n  }\n\n  /**\n   * Get the time zone associated with this DateTime.\n   * @type {Zone}\n   */\n  get zone() {\n    return this._zone;\n  }\n\n  /**\n   * Get the name of the time zone.\n   * @type {string}\n   */\n  get zoneName() {\n    return this.isValid ? this.zone.name : null;\n  }\n\n  /**\n   * Get the year\n   * @example DateTime.local(2017, 5, 25).year //=> 2017\n   * @type {number}\n   */\n  get year() {\n    return this.isValid ? this.c.year : NaN;\n  }\n\n  /**\n   * Get the quarter\n   * @example DateTime.local(2017, 5, 25).quarter //=> 2\n   * @type {number}\n   */\n  get quarter() {\n    return this.isValid ? Math.ceil(this.c.month / 3) : NaN;\n  }\n\n  /**\n   * Get the month (1-12).\n   * @example DateTime.local(2017, 5, 25).month //=> 5\n   * @type {number}\n   */\n  get month() {\n    return this.isValid ? this.c.month : NaN;\n  }\n\n  /**\n   * Get the day of the month (1-30ish).\n   * @example DateTime.local(2017, 5, 25).day //=> 25\n   * @type {number}\n   */\n  get day() {\n    return this.isValid ? this.c.day : NaN;\n  }\n\n  /**\n   * Get the hour of the day (0-23).\n   * @example DateTime.local(2017, 5, 25, 9).hour //=> 9\n   * @type {number}\n   */\n  get hour() {\n    return this.isValid ? this.c.hour : NaN;\n  }\n\n  /**\n   * Get the minute of the hour (0-59).\n   * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30\n   * @type {number}\n   */\n  get minute() {\n    return this.isValid ? this.c.minute : NaN;\n  }\n\n  /**\n   * Get the second of the minute (0-59).\n   * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52\n   * @type {number}\n   */\n  get second() {\n    return this.isValid ? this.c.second : NaN;\n  }\n\n  /**\n   * Get the millisecond of the second (0-999).\n   * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654\n   * @type {number}\n   */\n  get millisecond() {\n    return this.isValid ? this.c.millisecond : NaN;\n  }\n\n  /**\n   * Get the week year\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2014, 12, 31).weekYear //=> 2015\n   * @type {number}\n   */\n  get weekYear() {\n    return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;\n  }\n\n  /**\n   * Get the week number of the week year (1-52ish).\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2017, 5, 25).weekNumber //=> 21\n   * @type {number}\n   */\n  get weekNumber() {\n    return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;\n  }\n\n  /**\n   * Get the day of the week.\n   * 1 is Monday and 7 is Sunday\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2014, 11, 31).weekday //=> 4\n   * @type {number}\n   */\n  get weekday() {\n    return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;\n  }\n\n  /**\n   * Returns true if this date is on a weekend according to the locale, false otherwise\n   * @returns {boolean}\n   */\n  get isWeekend() {\n    return this.isValid && this.loc.getWeekendDays().includes(this.weekday);\n  }\n\n  /**\n   * Get the day of the week according to the locale.\n   * 1 is the first day of the week and 7 is the last day of the week.\n   * If the locale assigns Sunday as the first day of the week, then a date which is a Sunday will return 1,\n   * @returns {number}\n   */\n  get localWeekday() {\n    return this.isValid ? possiblyCachedLocalWeekData(this).weekday : NaN;\n  }\n\n  /**\n   * Get the week number of the week year according to the locale. Different locales assign week numbers differently,\n   * because the week can start on different days of the week (see localWeekday) and because a different number of days\n   * is required for a week to count as the first week of a year.\n   * @returns {number}\n   */\n  get localWeekNumber() {\n    return this.isValid ? possiblyCachedLocalWeekData(this).weekNumber : NaN;\n  }\n\n  /**\n   * Get the week year according to the locale. Different locales assign week numbers (and therefor week years)\n   * differently, see localWeekNumber.\n   * @returns {number}\n   */\n  get localWeekYear() {\n    return this.isValid ? possiblyCachedLocalWeekData(this).weekYear : NaN;\n  }\n\n  /**\n   * Get the ordinal (meaning the day of the year)\n   * @example DateTime.local(2017, 5, 25).ordinal //=> 145\n   * @type {number|DateTime}\n   */\n  get ordinal() {\n    return this.isValid ? gregorianToOrdinal(this.c).ordinal : NaN;\n  }\n\n  /**\n   * Get the human readable short month name, such as 'Oct'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).monthShort //=> Oct\n   * @type {string}\n   */\n  get monthShort() {\n    return this.isValid ? Info.months(\"short\", { locObj: this.loc })[this.month - 1] : null;\n  }\n\n  /**\n   * Get the human readable long month name, such as 'October'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).monthLong //=> October\n   * @type {string}\n   */\n  get monthLong() {\n    return this.isValid ? Info.months(\"long\", { locObj: this.loc })[this.month - 1] : null;\n  }\n\n  /**\n   * Get the human readable short weekday, such as 'Mon'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon\n   * @type {string}\n   */\n  get weekdayShort() {\n    return this.isValid ? Info.weekdays(\"short\", { locObj: this.loc })[this.weekday - 1] : null;\n  }\n\n  /**\n   * Get the human readable long weekday, such as 'Monday'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday\n   * @type {string}\n   */\n  get weekdayLong() {\n    return this.isValid ? Info.weekdays(\"long\", { locObj: this.loc })[this.weekday - 1] : null;\n  }\n\n  /**\n   * Get the UTC offset of this DateTime in minutes\n   * @example DateTime.now().offset //=> -240\n   * @example DateTime.utc().offset //=> 0\n   * @type {number}\n   */\n  get offset() {\n    return this.isValid ? +this.o : NaN;\n  }\n\n  /**\n   * Get the short human name for the zone's current offset, for example \"EST\" or \"EDT\".\n   * Defaults to the system's locale if no locale has been specified\n   * @type {string}\n   */\n  get offsetNameShort() {\n    if (this.isValid) {\n      return this.zone.offsetName(this.ts, {\n        format: \"short\",\n        locale: this.locale,\n      });\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get the long human name for the zone's current offset, for example \"Eastern Standard Time\" or \"Eastern Daylight Time\".\n   * Defaults to the system's locale if no locale has been specified\n   * @type {string}\n   */\n  get offsetNameLong() {\n    if (this.isValid) {\n      return this.zone.offsetName(this.ts, {\n        format: \"long\",\n        locale: this.locale,\n      });\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get whether this zone's offset ever changes, as in a DST.\n   * @type {boolean}\n   */\n  get isOffsetFixed() {\n    return this.isValid ? this.zone.isUniversal : null;\n  }\n\n  /**\n   * Get whether the DateTime is in a DST.\n   * @type {boolean}\n   */\n  get isInDST() {\n    if (this.isOffsetFixed) {\n      return false;\n    } else {\n      return (\n        this.offset > this.set({ month: 1, day: 1 }).offset ||\n        this.offset > this.set({ month: 5 }).offset\n      );\n    }\n  }\n\n  /**\n   * Get those DateTimes which have the same local time as this DateTime, but a different offset from UTC\n   * in this DateTime's zone. During DST changes local time can be ambiguous, for example\n   * `2023-10-29T02:30:00` in `Europe/Berlin` can have offset `+01:00` or `+02:00`.\n   * This method will return both possible DateTimes if this DateTime's local time is ambiguous.\n   * @returns {DateTime[]}\n   */\n  getPossibleOffsets() {\n    if (!this.isValid || this.isOffsetFixed) {\n      return [this];\n    }\n    const dayMs = 86400000;\n    const minuteMs = 60000;\n    const localTS = objToLocalTS(this.c);\n    const oEarlier = this.zone.offset(localTS - dayMs);\n    const oLater = this.zone.offset(localTS + dayMs);\n\n    const o1 = this.zone.offset(localTS - oEarlier * minuteMs);\n    const o2 = this.zone.offset(localTS - oLater * minuteMs);\n    if (o1 === o2) {\n      return [this];\n    }\n    const ts1 = localTS - o1 * minuteMs;\n    const ts2 = localTS - o2 * minuteMs;\n    const c1 = tsToObj(ts1, o1);\n    const c2 = tsToObj(ts2, o2);\n    if (\n      c1.hour === c2.hour &&\n      c1.minute === c2.minute &&\n      c1.second === c2.second &&\n      c1.millisecond === c2.millisecond\n    ) {\n      return [clone(this, { ts: ts1 }), clone(this, { ts: ts2 })];\n    }\n    return [this];\n  }\n\n  /**\n   * Returns true if this DateTime is in a leap year, false otherwise\n   * @example DateTime.local(2016).isInLeapYear //=> true\n   * @example DateTime.local(2013).isInLeapYear //=> false\n   * @type {boolean}\n   */\n  get isInLeapYear() {\n    return isLeapYear(this.year);\n  }\n\n  /**\n   * Returns the number of days in this DateTime's month\n   * @example DateTime.local(2016, 2).daysInMonth //=> 29\n   * @example DateTime.local(2016, 3).daysInMonth //=> 31\n   * @type {number}\n   */\n  get daysInMonth() {\n    return daysInMonth(this.year, this.month);\n  }\n\n  /**\n   * Returns the number of days in this DateTime's year\n   * @example DateTime.local(2016).daysInYear //=> 366\n   * @example DateTime.local(2013).daysInYear //=> 365\n   * @type {number}\n   */\n  get daysInYear() {\n    return this.isValid ? daysInYear(this.year) : NaN;\n  }\n\n  /**\n   * Returns the number of weeks in this DateTime's year\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2004).weeksInWeekYear //=> 53\n   * @example DateTime.local(2013).weeksInWeekYear //=> 52\n   * @type {number}\n   */\n  get weeksInWeekYear() {\n    return this.isValid ? weeksInWeekYear(this.weekYear) : NaN;\n  }\n\n  /**\n   * Returns the number of weeks in this DateTime's local week year\n   * @example DateTime.local(2020, 6, {locale: 'en-US'}).weeksInLocalWeekYear //=> 52\n   * @example DateTime.local(2020, 6, {locale: 'de-DE'}).weeksInLocalWeekYear //=> 53\n   * @type {number}\n   */\n  get weeksInLocalWeekYear() {\n    return this.isValid\n      ? weeksInWeekYear(\n          this.localWeekYear,\n          this.loc.getMinDaysInFirstWeek(),\n          this.loc.getStartOfWeek()\n        )\n      : NaN;\n  }\n\n  /**\n   * Returns the resolved Intl options for this DateTime.\n   * This is useful in understanding the behavior of formatting methods\n   * @param {Object} opts - the same options as toLocaleString\n   * @return {Object}\n   */\n  resolvedLocaleOptions(opts = {}) {\n    const { locale, numberingSystem, calendar } = Formatter.create(\n      this.loc.clone(opts),\n      opts\n    ).resolvedOptions(this);\n    return { locale, numberingSystem, outputCalendar: calendar };\n  }\n\n  // TRANSFORM\n\n  /**\n   * \"Set\" the DateTime's zone to UTC. Returns a newly-constructed DateTime.\n   *\n   * Equivalent to {@link DateTime#setZone}('utc')\n   * @param {number} [offset=0] - optionally, an offset from UTC in minutes\n   * @param {Object} [opts={}] - options to pass to `setZone()`\n   * @return {DateTime}\n   */\n  toUTC(offset = 0, opts = {}) {\n    return this.setZone(FixedOffsetZone.instance(offset), opts);\n  }\n\n  /**\n   * \"Set\" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.\n   *\n   * Equivalent to `setZone('local')`\n   * @return {DateTime}\n   */\n  toLocal() {\n    return this.setZone(Settings.defaultZone);\n  }\n\n  /**\n   * \"Set\" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.\n   *\n   * By default, the setter keeps the underlying time the same (as in, the same timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link DateTime#plus}. You may wish to use {@link DateTime#toLocal} and {@link DateTime#toUTC} which provide simple convenience wrappers for commonly used zones.\n   * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link DateTime#Zone} class.\n   * @param {Object} opts - options\n   * @param {boolean} [opts.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.\n   * @return {DateTime}\n   */\n  setZone(zone, { keepLocalTime = false, keepCalendarTime = false } = {}) {\n    zone = normalizeZone(zone, Settings.defaultZone);\n    if (zone.equals(this.zone)) {\n      return this;\n    } else if (!zone.isValid) {\n      return DateTime.invalid(unsupportedZone(zone));\n    } else {\n      let newTS = this.ts;\n      if (keepLocalTime || keepCalendarTime) {\n        const offsetGuess = zone.offset(this.ts);\n        const asObj = this.toObject();\n        [newTS] = objToTS(asObj, offsetGuess, zone);\n      }\n      return clone(this, { ts: newTS, zone });\n    }\n  }\n\n  /**\n   * \"Set\" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.\n   * @param {Object} properties - the properties to set\n   * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })\n   * @return {DateTime}\n   */\n  reconfigure({ locale, numberingSystem, outputCalendar } = {}) {\n    const loc = this.loc.clone({ locale, numberingSystem, outputCalendar });\n    return clone(this, { loc });\n  }\n\n  /**\n   * \"Set\" the locale. Returns a newly-constructed DateTime.\n   * Just a convenient alias for reconfigure({ locale })\n   * @example DateTime.local(2017, 5, 25).setLocale('en-GB')\n   * @return {DateTime}\n   */\n  setLocale(locale) {\n    return this.reconfigure({ locale });\n  }\n\n  /**\n   * \"Set\" the values of specified units. Returns a newly-constructed DateTime.\n   * You can only set units with this method; for \"setting\" metadata, see {@link DateTime#reconfigure} and {@link DateTime#setZone}.\n   *\n   * This method also supports setting locale-based week units, i.e. `localWeekday`, `localWeekNumber` and `localWeekYear`.\n   * They cannot be mixed with ISO-week units like `weekday`.\n   * @param {Object} values - a mapping of units to numbers\n   * @example dt.set({ year: 2017 })\n   * @example dt.set({ hour: 8, minute: 30 })\n   * @example dt.set({ weekday: 5 })\n   * @example dt.set({ year: 2005, ordinal: 234 })\n   * @return {DateTime}\n   */\n  set(values) {\n    if (!this.isValid) return this;\n\n    const normalized = normalizeObject(values, normalizeUnitWithLocalWeeks);\n    const { minDaysInFirstWeek, startOfWeek } = usesLocalWeekValues(normalized, this.loc);\n\n    const settingWeekStuff =\n        !isUndefined(normalized.weekYear) ||\n        !isUndefined(normalized.weekNumber) ||\n        !isUndefined(normalized.weekday),\n      containsOrdinal = !isUndefined(normalized.ordinal),\n      containsGregorYear = !isUndefined(normalized.year),\n      containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day),\n      containsGregor = containsGregorYear || containsGregorMD,\n      definiteWeekDef = normalized.weekYear || normalized.weekNumber;\n\n    if ((containsGregor || containsOrdinal) && definiteWeekDef) {\n      throw new ConflictingSpecificationError(\n        \"Can't mix weekYear/weekNumber units with year/month/day or ordinals\"\n      );\n    }\n\n    if (containsGregorMD && containsOrdinal) {\n      throw new ConflictingSpecificationError(\"Can't mix ordinal dates with month/day\");\n    }\n\n    let mixed;\n    if (settingWeekStuff) {\n      mixed = weekToGregorian(\n        { ...gregorianToWeek(this.c, minDaysInFirstWeek, startOfWeek), ...normalized },\n        minDaysInFirstWeek,\n        startOfWeek\n      );\n    } else if (!isUndefined(normalized.ordinal)) {\n      mixed = ordinalToGregorian({ ...gregorianToOrdinal(this.c), ...normalized });\n    } else {\n      mixed = { ...this.toObject(), ...normalized };\n\n      // if we didn't set the day but we ended up on an overflow date,\n      // use the last day of the right month\n      if (isUndefined(normalized.day)) {\n        mixed.day = Math.min(daysInMonth(mixed.year, mixed.month), mixed.day);\n      }\n    }\n\n    const [ts, o] = objToTS(mixed, this.o, this.zone);\n    return clone(this, { ts, o });\n  }\n\n  /**\n   * Add a period of time to this DateTime and return the resulting DateTime\n   *\n   * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.\n   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @example DateTime.now().plus(123) //~> in 123 milliseconds\n   * @example DateTime.now().plus({ minutes: 15 }) //~> in 15 minutes\n   * @example DateTime.now().plus({ days: 1 }) //~> this time tomorrow\n   * @example DateTime.now().plus({ days: -1 }) //~> this time yesterday\n   * @example DateTime.now().plus({ hours: 3, minutes: 13 }) //~> in 3 hr, 13 min\n   * @example DateTime.now().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 3 hr, 13 min\n   * @return {DateTime}\n   */\n  plus(duration) {\n    if (!this.isValid) return this;\n    const dur = Duration.fromDurationLike(duration);\n    return clone(this, adjustTime(this, dur));\n  }\n\n  /**\n   * Subtract a period of time to this DateTime and return the resulting DateTime\n   * See {@link DateTime#plus}\n   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   @return {DateTime}\n   */\n  minus(duration) {\n    if (!this.isValid) return this;\n    const dur = Duration.fromDurationLike(duration).negate();\n    return clone(this, adjustTime(this, dur));\n  }\n\n  /**\n   * \"Set\" this DateTime to the beginning of a unit of time.\n   * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.\n   * @param {Object} opts - options\n   * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week\n   * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'\n   * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'\n   * @example DateTime.local(2014, 3, 3).startOf('week').toISODate(); //=> '2014-03-03', weeks always start on Mondays\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'\n   * @return {DateTime}\n   */\n  startOf(unit, { useLocaleWeeks = false } = {}) {\n    if (!this.isValid) return this;\n\n    const o = {},\n      normalizedUnit = Duration.normalizeUnit(unit);\n    switch (normalizedUnit) {\n      case \"years\":\n        o.month = 1;\n      // falls through\n      case \"quarters\":\n      case \"months\":\n        o.day = 1;\n      // falls through\n      case \"weeks\":\n      case \"days\":\n        o.hour = 0;\n      // falls through\n      case \"hours\":\n        o.minute = 0;\n      // falls through\n      case \"minutes\":\n        o.second = 0;\n      // falls through\n      case \"seconds\":\n        o.millisecond = 0;\n        break;\n      case \"milliseconds\":\n        break;\n      // no default, invalid units throw in normalizeUnit()\n    }\n\n    if (normalizedUnit === \"weeks\") {\n      if (useLocaleWeeks) {\n        const startOfWeek = this.loc.getStartOfWeek();\n        const { weekday } = this;\n        if (weekday < startOfWeek) {\n          o.weekNumber = this.weekNumber - 1;\n        }\n        o.weekday = startOfWeek;\n      } else {\n        o.weekday = 1;\n      }\n    }\n\n    if (normalizedUnit === \"quarters\") {\n      const q = Math.ceil(this.month / 3);\n      o.month = (q - 1) * 3 + 1;\n    }\n\n    return this.set(o);\n  }\n\n  /**\n   * \"Set\" this DateTime to the end (meaning the last millisecond) of a unit of time\n   * @param {string} unit - The unit to go to the end of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.\n   * @param {Object} opts - options\n   * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week\n   * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3).endOf('week').toISO(); // => '2014-03-09T23:59:59.999-05:00', weeks start on Mondays\n   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'\n   * @return {DateTime}\n   */\n  endOf(unit, opts) {\n    return this.isValid\n      ? this.plus({ [unit]: 1 })\n          .startOf(unit, opts)\n          .minus(1)\n      : this;\n  }\n\n  // OUTPUT\n\n  /**\n   * Returns a string representation of this DateTime formatted according to the specified format string.\n   * **You may not want this.** See {@link DateTime#toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/formatting?id=table-of-tokens).\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale.\n   * @param {string} fmt - the format string\n   * @param {Object} opts - opts to override the configuration options on this DateTime\n   * @example DateTime.now().toFormat('yyyy LLL dd') //=> '2017 Apr 22'\n   * @example DateTime.now().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'\n   * @example DateTime.now().toFormat('yyyy LLL dd', { locale: \"fr\" }) //=> '2017 avr. 22'\n   * @example DateTime.now().toFormat(\"HH 'hours and' mm 'minutes'\") //=> '20 hours and 55 minutes'\n   * @return {string}\n   */\n  toFormat(fmt, opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt)\n      : INVALID;\n  }\n\n  /**\n   * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.\n   * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation\n   * of the DateTime in the assigned locale.\n   * Defaults to the system's locale if no locale has been specified\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param formatOpts {Object} - Intl.DateTimeFormat constructor options and configuration options\n   * @param {Object} opts - opts to override the configuration options on this DateTime\n   * @example DateTime.now().toLocaleString(); //=> 4/20/2017\n   * @example DateTime.now().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'\n   * @example DateTime.now().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'\n   * @example DateTime.now().toLocaleString(DateTime.DATE_FULL, { locale: 'fr' }); //=> '28 août 2022'\n   * @example DateTime.now().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'\n   * @example DateTime.now().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'\n   * @example DateTime.now().toLocaleString({ weekday: 'long', month: 'long', day: '2-digit' }); //=> 'Thursday, April 20'\n   * @example DateTime.now().toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> 'Thu, Apr 20, 11:27 AM'\n   * @example DateTime.now().toLocaleString({ hour: '2-digit', minute: '2-digit', hourCycle: 'h23' }); //=> '11:32'\n   * @return {string}\n   */\n  toLocaleString(formatOpts = Formats.DATE_SHORT, opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc.clone(opts), formatOpts).formatDateTime(this)\n      : INVALID;\n  }\n\n  /**\n   * Returns an array of format \"parts\", meaning individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.\n   * Defaults to the system's locale if no locale has been specified\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts\n   * @param opts {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.\n   * @example DateTime.now().toLocaleParts(); //=> [\n   *                                   //=>   { type: 'day', value: '25' },\n   *                                   //=>   { type: 'literal', value: '/' },\n   *                                   //=>   { type: 'month', value: '05' },\n   *                                   //=>   { type: 'literal', value: '/' },\n   *                                   //=>   { type: 'year', value: '1982' }\n   *                                   //=> ]\n   */\n  toLocaleParts(opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this)\n      : [];\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime\n   * @param {Object} opts - options\n   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0\n   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @param {boolean} [opts.extendedZone=false] - add the time zone format extension\n   * @param {string} [opts.format='extended'] - choose between the basic and extended format\n   * @example DateTime.utc(1983, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'\n   * @example DateTime.now().toISO() //=> '2017-04-22T20:47:05.335-04:00'\n   * @example DateTime.now().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'\n   * @example DateTime.now().toISO({ format: 'basic' }) //=> '20170422T204705.335-0400'\n   * @return {string|null}\n   */\n  toISO({\n    format = \"extended\",\n    suppressSeconds = false,\n    suppressMilliseconds = false,\n    includeOffset = true,\n    extendedZone = false,\n  } = {}) {\n    if (!this.isValid) {\n      return null;\n    }\n\n    const ext = format === \"extended\";\n\n    let c = toISODate(this, ext);\n    c += \"T\";\n    c += toISOTime(this, ext, suppressSeconds, suppressMilliseconds, includeOffset, extendedZone);\n    return c;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's date component\n   * @param {Object} opts - options\n   * @param {string} [opts.format='extended'] - choose between the basic and extended format\n   * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'\n   * @example DateTime.utc(1982, 5, 25).toISODate({ format: 'basic' }) //=> '19820525'\n   * @return {string|null}\n   */\n  toISODate({ format = \"extended\" } = {}) {\n    if (!this.isValid) {\n      return null;\n    }\n\n    return toISODate(this, format === \"extended\");\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's week date\n   * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'\n   * @return {string}\n   */\n  toISOWeekDate() {\n    return toTechFormat(this, \"kkkk-'W'WW-c\");\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's time component\n   * @param {Object} opts - options\n   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0\n   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @param {boolean} [opts.extendedZone=true] - add the time zone format extension\n   * @param {boolean} [opts.includePrefix=false] - include the `T` prefix\n   * @param {string} [opts.format='extended'] - choose between the basic and extended format\n   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime() //=> '07:34:19.361Z'\n   * @example DateTime.utc().set({ hour: 7, minute: 34, seconds: 0, milliseconds: 0 }).toISOTime({ suppressSeconds: true }) //=> '07:34Z'\n   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ format: 'basic' }) //=> '073419.361Z'\n   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ includePrefix: true }) //=> 'T07:34:19.361Z'\n   * @return {string}\n   */\n  toISOTime({\n    suppressMilliseconds = false,\n    suppressSeconds = false,\n    includeOffset = true,\n    includePrefix = false,\n    extendedZone = false,\n    format = \"extended\",\n  } = {}) {\n    if (!this.isValid) {\n      return null;\n    }\n\n    let c = includePrefix ? \"T\" : \"\";\n    return (\n      c +\n      toISOTime(\n        this,\n        format === \"extended\",\n        suppressSeconds,\n        suppressMilliseconds,\n        includeOffset,\n        extendedZone\n      )\n    );\n  }\n\n  /**\n   * Returns an RFC 2822-compatible string representation of this DateTime\n   * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'\n   * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'\n   * @return {string}\n   */\n  toRFC2822() {\n    return toTechFormat(this, \"EEE, dd LLL yyyy HH:mm:ss ZZZ\", false);\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in HTTP headers. The output is always expressed in GMT.\n   * Specifically, the string conforms to RFC 1123.\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\n   * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'\n   * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'\n   * @return {string}\n   */\n  toHTTP() {\n    return toTechFormat(this.toUTC(), \"EEE, dd LLL yyyy HH:mm:ss 'GMT'\");\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL Date\n   * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'\n   * @return {string|null}\n   */\n  toSQLDate() {\n    if (!this.isValid) {\n      return null;\n    }\n    return toISODate(this, true);\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL Time\n   * @param {Object} opts - options\n   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'\n   * @example DateTime.utc().toSQL() //=> '05:15:16.345'\n   * @example DateTime.now().toSQL() //=> '05:15:16.345 -04:00'\n   * @example DateTime.now().toSQL({ includeOffset: false }) //=> '05:15:16.345'\n   * @example DateTime.now().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'\n   * @return {string}\n   */\n  toSQLTime({ includeOffset = true, includeZone = false, includeOffsetSpace = true } = {}) {\n    let fmt = \"HH:mm:ss.SSS\";\n\n    if (includeZone || includeOffset) {\n      if (includeOffsetSpace) {\n        fmt += \" \";\n      }\n      if (includeZone) {\n        fmt += \"z\";\n      } else if (includeOffset) {\n        fmt += \"ZZ\";\n      }\n    }\n\n    return toTechFormat(this, fmt, true);\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL DateTime\n   * @param {Object} opts - options\n   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'\n   * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'\n   * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'\n   * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'\n   * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'\n   * @return {string}\n   */\n  toSQL(opts = {}) {\n    if (!this.isValid) {\n      return null;\n    }\n\n    return `${this.toSQLDate()} ${this.toSQLTime(opts)}`;\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for debugging\n   * @return {string}\n   */\n  toString() {\n    return this.isValid ? this.toISO() : INVALID;\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for the REPL.\n   * @return {string}\n   */\n  [Symbol.for(\"nodejs.util.inspect.custom\")]() {\n    if (this.isValid) {\n      return `DateTime { ts: ${this.toISO()}, zone: ${this.zone.name}, locale: ${this.locale} }`;\n    } else {\n      return `DateTime { Invalid, reason: ${this.invalidReason} }`;\n    }\n  }\n\n  /**\n   * Returns the epoch milliseconds of this DateTime. Alias of {@link DateTime#toMillis}\n   * @return {number}\n   */\n  valueOf() {\n    return this.toMillis();\n  }\n\n  /**\n   * Returns the epoch milliseconds of this DateTime.\n   * @return {number}\n   */\n  toMillis() {\n    return this.isValid ? this.ts : NaN;\n  }\n\n  /**\n   * Returns the epoch seconds (including milliseconds in the fractional part) of this DateTime.\n   * @return {number}\n   */\n  toSeconds() {\n    return this.isValid ? this.ts / 1000 : NaN;\n  }\n\n  /**\n   * Returns the epoch seconds (as a whole number) of this DateTime.\n   * @return {number}\n   */\n  toUnixInteger() {\n    return this.isValid ? Math.floor(this.ts / 1000) : NaN;\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.\n   * @return {string}\n   */\n  toJSON() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns a BSON serializable equivalent to this DateTime.\n   * @return {Date}\n   */\n  toBSON() {\n    return this.toJSDate();\n  }\n\n  /**\n   * Returns a JavaScript object with this DateTime's year, month, day, and so on.\n   * @param opts - options for generating the object\n   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output\n   * @example DateTime.now().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }\n   * @return {Object}\n   */\n  toObject(opts = {}) {\n    if (!this.isValid) return {};\n\n    const base = { ...this.c };\n\n    if (opts.includeConfig) {\n      base.outputCalendar = this.outputCalendar;\n      base.numberingSystem = this.loc.numberingSystem;\n      base.locale = this.loc.locale;\n    }\n    return base;\n  }\n\n  /**\n   * Returns a JavaScript Date equivalent to this DateTime.\n   * @return {Date}\n   */\n  toJSDate() {\n    return new Date(this.isValid ? this.ts : NaN);\n  }\n\n  // COMPARE\n\n  /**\n   * Return the difference between two DateTimes as a Duration.\n   * @param {DateTime} otherDateTime - the DateTime to compare this one to\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example\n   * var i1 = DateTime.fromISO('1982-05-25T09:45'),\n   *     i2 = DateTime.fromISO('1983-10-14T10:30');\n   * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }\n   * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }\n   * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }\n   * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }\n   * @return {Duration}\n   */\n  diff(otherDateTime, unit = \"milliseconds\", opts = {}) {\n    if (!this.isValid || !otherDateTime.isValid) {\n      return Duration.invalid(\"created by diffing an invalid DateTime\");\n    }\n\n    const durOpts = { locale: this.locale, numberingSystem: this.numberingSystem, ...opts };\n\n    const units = maybeArray(unit).map(Duration.normalizeUnit),\n      otherIsLater = otherDateTime.valueOf() > this.valueOf(),\n      earlier = otherIsLater ? this : otherDateTime,\n      later = otherIsLater ? otherDateTime : this,\n      diffed = diff(earlier, later, units, durOpts);\n\n    return otherIsLater ? diffed.negate() : diffed;\n  }\n\n  /**\n   * Return the difference between this DateTime and right now.\n   * See {@link DateTime#diff}\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  diffNow(unit = \"milliseconds\", opts = {}) {\n    return this.diff(DateTime.now(), unit, opts);\n  }\n\n  /**\n   * Return an Interval spanning between this DateTime and another DateTime\n   * @param {DateTime} otherDateTime - the other end point of the Interval\n   * @return {Interval|DateTime}\n   */\n  until(otherDateTime) {\n    return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;\n  }\n\n  /**\n   * Return whether this DateTime is in the same unit of time as another DateTime.\n   * Higher-order units must also be identical for this function to return `true`.\n   * Note that time zones are **ignored** in this comparison, which compares the **local** calendar time. Use {@link DateTime#setZone} to convert one of the dates if needed.\n   * @param {DateTime} otherDateTime - the other DateTime\n   * @param {string} unit - the unit of time to check sameness on\n   * @param {Object} opts - options\n   * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week; only the locale of this DateTime is used\n   * @example DateTime.now().hasSame(otherDT, 'day'); //~> true if otherDT is in the same current calendar day\n   * @return {boolean}\n   */\n  hasSame(otherDateTime, unit, opts) {\n    if (!this.isValid) return false;\n\n    const inputMs = otherDateTime.valueOf();\n    const adjustedToZone = this.setZone(otherDateTime.zone, { keepLocalTime: true });\n    return (\n      adjustedToZone.startOf(unit, opts) <= inputMs && inputMs <= adjustedToZone.endOf(unit, opts)\n    );\n  }\n\n  /**\n   * Equality check\n   * Two DateTimes are equal if and only if they represent the same millisecond, have the same zone and location, and are both valid.\n   * To compare just the millisecond values, use `+dt1 === +dt2`.\n   * @param {DateTime} other - the other DateTime\n   * @return {boolean}\n   */\n  equals(other) {\n    return (\n      this.isValid &&\n      other.isValid &&\n      this.valueOf() === other.valueOf() &&\n      this.zone.equals(other.zone) &&\n      this.loc.equals(other.loc)\n    );\n  }\n\n  /**\n   * Returns a string representation of a this time relative to now, such as \"in two days\". Can only internationalize if your\n   * platform supports Intl.RelativeTimeFormat. Rounds down by default.\n   * @param {Object} options - options that affect the output\n   * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.\n   * @param {string} [options.style=\"long\"] - the style of units, must be \"long\", \"short\", or \"narrow\"\n   * @param {string|string[]} options.unit - use a specific unit or array of units; if omitted, or an array, the method will pick the best unit. Use an array or one of \"years\", \"quarters\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", or \"seconds\"\n   * @param {boolean} [options.round=true] - whether to round the numbers in the output.\n   * @param {number} [options.padding=0] - padding in milliseconds. This allows you to round up the result if it fits inside the threshold. Don't use in combination with {round: false} because the decimal output will include the padding.\n   * @param {string} options.locale - override the locale of this DateTime\n   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this\n   * @example DateTime.now().plus({ days: 1 }).toRelative() //=> \"in 1 day\"\n   * @example DateTime.now().setLocale(\"es\").toRelative({ days: 1 }) //=> \"dentro de 1 día\"\n   * @example DateTime.now().plus({ days: 1 }).toRelative({ locale: \"fr\" }) //=> \"dans 23 heures\"\n   * @example DateTime.now().minus({ days: 2 }).toRelative() //=> \"2 days ago\"\n   * @example DateTime.now().minus({ days: 2 }).toRelative({ unit: \"hours\" }) //=> \"48 hours ago\"\n   * @example DateTime.now().minus({ hours: 36 }).toRelative({ round: false }) //=> \"1.5 days ago\"\n   */\n  toRelative(options = {}) {\n    if (!this.isValid) return null;\n    const base = options.base || DateTime.fromObject({}, { zone: this.zone }),\n      padding = options.padding ? (this < base ? -options.padding : options.padding) : 0;\n    let units = [\"years\", \"months\", \"days\", \"hours\", \"minutes\", \"seconds\"];\n    let unit = options.unit;\n    if (Array.isArray(options.unit)) {\n      units = options.unit;\n      unit = undefined;\n    }\n    return diffRelative(base, this.plus(padding), {\n      ...options,\n      numeric: \"always\",\n      units,\n      unit,\n    });\n  }\n\n  /**\n   * Returns a string representation of this date relative to today, such as \"yesterday\" or \"next month\".\n   * Only internationalizes on platforms that supports Intl.RelativeTimeFormat.\n   * @param {Object} options - options that affect the output\n   * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.\n   * @param {string} options.locale - override the locale of this DateTime\n   * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of \"years\", \"quarters\", \"months\", \"weeks\", or \"days\"\n   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this\n   * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar() //=> \"tomorrow\"\n   * @example DateTime.now().setLocale(\"es\").plus({ days: 1 }).toRelative() //=> \"\"mañana\"\n   * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar({ locale: \"fr\" }) //=> \"demain\"\n   * @example DateTime.now().minus({ days: 2 }).toRelativeCalendar() //=> \"2 days ago\"\n   */\n  toRelativeCalendar(options = {}) {\n    if (!this.isValid) return null;\n\n    return diffRelative(options.base || DateTime.fromObject({}, { zone: this.zone }), this, {\n      ...options,\n      numeric: \"auto\",\n      units: [\"years\", \"months\", \"days\"],\n      calendary: true,\n    });\n  }\n\n  /**\n   * Return the min of several date times\n   * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum\n   * @return {DateTime} the min DateTime, or undefined if called with no argument\n   */\n  static min(...dateTimes) {\n    if (!dateTimes.every(DateTime.isDateTime)) {\n      throw new InvalidArgumentError(\"min requires all arguments be DateTimes\");\n    }\n    return bestBy(dateTimes, (i) => i.valueOf(), Math.min);\n  }\n\n  /**\n   * Return the max of several date times\n   * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum\n   * @return {DateTime} the max DateTime, or undefined if called with no argument\n   */\n  static max(...dateTimes) {\n    if (!dateTimes.every(DateTime.isDateTime)) {\n      throw new InvalidArgumentError(\"max requires all arguments be DateTimes\");\n    }\n    return bestBy(dateTimes, (i) => i.valueOf(), Math.max);\n  }\n\n  // MISC\n\n  /**\n   * Explain how a string would be parsed by fromFormat()\n   * @param {string} text - the string to parse\n   * @param {string} fmt - the format the string is expected to be in (see description)\n   * @param {Object} options - options taken by fromFormat()\n   * @return {Object}\n   */\n  static fromFormatExplain(text, fmt, options = {}) {\n    const { locale = null, numberingSystem = null } = options,\n      localeToUse = Locale.fromOpts({\n        locale,\n        numberingSystem,\n        defaultToEN: true,\n      });\n    return explainFromTokens(localeToUse, text, fmt);\n  }\n\n  /**\n   * @deprecated use fromFormatExplain instead\n   */\n  static fromStringExplain(text, fmt, options = {}) {\n    return DateTime.fromFormatExplain(text, fmt, options);\n  }\n\n  /**\n   * Build a parser for `fmt` using the given locale. This parser can be passed\n   * to {@link DateTime.fromFormatParser} to a parse a date in this format. This\n   * can be used to optimize cases where many dates need to be parsed in a\n   * specific format.\n   *\n   * @param {String} fmt - the format the string is expected to be in (see\n   * description)\n   * @param {Object} options - options used to set locale and numberingSystem\n   * for parser\n   * @returns {TokenParser} - opaque object to be used\n   */\n  static buildFormatParser(fmt, options = {}) {\n    const { locale = null, numberingSystem = null } = options,\n      localeToUse = Locale.fromOpts({\n        locale,\n        numberingSystem,\n        defaultToEN: true,\n      });\n    return new TokenParser(localeToUse, fmt);\n  }\n\n  /**\n   * Create a DateTime from an input string and format parser.\n   *\n   * The format parser must have been created with the same locale as this call.\n   *\n   * @param {String} text - the string to parse\n   * @param {TokenParser} formatParser - parser from {@link DateTime.buildFormatParser}\n   * @param {Object} opts - options taken by fromFormat()\n   * @returns {DateTime}\n   */\n  static fromFormatParser(text, formatParser, opts = {}) {\n    if (isUndefined(text) || isUndefined(formatParser)) {\n      throw new InvalidArgumentError(\n        \"fromFormatParser requires an input string and a format parser\"\n      );\n    }\n    const { locale = null, numberingSystem = null } = opts,\n      localeToUse = Locale.fromOpts({\n        locale,\n        numberingSystem,\n        defaultToEN: true,\n      });\n\n    if (!localeToUse.equals(formatParser.locale)) {\n      throw new InvalidArgumentError(\n        `fromFormatParser called with a locale of ${localeToUse}, ` +\n          `but the format parser was created for ${formatParser.locale}`\n      );\n    }\n\n    const { result, zone, specificOffset, invalidReason } = formatParser.explainFromTokens(text);\n\n    if (invalidReason) {\n      return DateTime.invalid(invalidReason);\n    } else {\n      return parseDataToDateTime(\n        result,\n        zone,\n        opts,\n        `format ${formatParser.format}`,\n        text,\n        specificOffset\n      );\n    }\n  }\n\n  // FORMAT PRESETS\n\n  /**\n   * {@link DateTime#toLocaleString} format like 10/14/1983\n   * @type {Object}\n   */\n  static get DATE_SHORT() {\n    return Formats.DATE_SHORT;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Oct 14, 1983'\n   * @type {Object}\n   */\n  static get DATE_MED() {\n    return Formats.DATE_MED;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Fri, Oct 14, 1983'\n   * @type {Object}\n   */\n  static get DATE_MED_WITH_WEEKDAY() {\n    return Formats.DATE_MED_WITH_WEEKDAY;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'October 14, 1983'\n   * @type {Object}\n   */\n  static get DATE_FULL() {\n    return Formats.DATE_FULL;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Tuesday, October 14, 1983'\n   * @type {Object}\n   */\n  static get DATE_HUGE() {\n    return Formats.DATE_HUGE;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get TIME_SIMPLE() {\n    return Formats.TIME_SIMPLE;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get TIME_WITH_SECONDS() {\n    return Formats.TIME_WITH_SECONDS;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get TIME_WITH_SHORT_OFFSET() {\n    return Formats.TIME_WITH_SHORT_OFFSET;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get TIME_WITH_LONG_OFFSET() {\n    return Formats.TIME_WITH_LONG_OFFSET;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30', always 24-hour.\n   * @type {Object}\n   */\n  static get TIME_24_SIMPLE() {\n    return Formats.TIME_24_SIMPLE;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30:23', always 24-hour.\n   * @type {Object}\n   */\n  static get TIME_24_WITH_SECONDS() {\n    return Formats.TIME_24_WITH_SECONDS;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30:23 EDT', always 24-hour.\n   * @type {Object}\n   */\n  static get TIME_24_WITH_SHORT_OFFSET() {\n    return Formats.TIME_24_WITH_SHORT_OFFSET;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.\n   * @type {Object}\n   */\n  static get TIME_24_WITH_LONG_OFFSET() {\n    return Formats.TIME_24_WITH_LONG_OFFSET;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_SHORT() {\n    return Formats.DATETIME_SHORT;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_SHORT_WITH_SECONDS() {\n    return Formats.DATETIME_SHORT_WITH_SECONDS;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_MED() {\n    return Formats.DATETIME_MED;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_MED_WITH_SECONDS() {\n    return Formats.DATETIME_MED_WITH_SECONDS;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Fri, 14 Oct 1983, 9:30 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_MED_WITH_WEEKDAY() {\n    return Formats.DATETIME_MED_WITH_WEEKDAY;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_FULL() {\n    return Formats.DATETIME_FULL;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30:33 AM EDT'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_FULL_WITH_SECONDS() {\n    return Formats.DATETIME_FULL_WITH_SECONDS;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_HUGE() {\n    return Formats.DATETIME_HUGE;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_HUGE_WITH_SECONDS() {\n    return Formats.DATETIME_HUGE_WITH_SECONDS;\n  }\n}\n\n/**\n * @private\n */\nexport function friendlyDateTime(dateTimeish) {\n  if (DateTime.isDateTime(dateTimeish)) {\n    return dateTimeish;\n  } else if (dateTimeish && dateTimeish.valueOf && isNumber(dateTimeish.valueOf())) {\n    return DateTime.fromJSDate(dateTimeish);\n  } else if (dateTimeish && typeof dateTimeish === \"object\") {\n    return DateTime.fromObject(dateTimeish);\n  } else {\n    throw new InvalidArgumentError(\n      `Unknown datetime argument: ${dateTimeish}, of type ${typeof dateTimeish}`\n    );\n  }\n}\n","export const MAX_NUM_ENTRIES = 10;\n","import { Derived } from \"./derived.js\";\nconst __storeToDerived = /* @__PURE__ */ new WeakMap();\nconst __derivedToStore = /* @__PURE__ */ new WeakMap();\nconst __depsThatHaveWrittenThisTick = {\n  current: []\n};\nlet __isFlushing = false;\nlet __batchDepth = 0;\nconst __pendingUpdates = /* @__PURE__ */ new Set();\nconst __initialBatchValues = /* @__PURE__ */ new Map();\nfunction __flush_internals(relatedVals) {\n  const sorted = Array.from(relatedVals).sort((a, b) => {\n    if (a instanceof Derived && a.options.deps.includes(b)) return 1;\n    if (b instanceof Derived && b.options.deps.includes(a)) return -1;\n    return 0;\n  });\n  for (const derived of sorted) {\n    if (__depsThatHaveWrittenThisTick.current.includes(derived)) {\n      continue;\n    }\n    __depsThatHaveWrittenThisTick.current.push(derived);\n    derived.recompute();\n    const stores = __derivedToStore.get(derived);\n    if (stores) {\n      for (const store of stores) {\n        const relatedLinkedDerivedVals = __storeToDerived.get(store);\n        if (!relatedLinkedDerivedVals) continue;\n        __flush_internals(relatedLinkedDerivedVals);\n      }\n    }\n  }\n}\nfunction __notifyListeners(store) {\n  store.listeners.forEach(\n    (listener) => listener({\n      prevVal: store.prevState,\n      currentVal: store.state\n    })\n  );\n}\nfunction __notifyDerivedListeners(derived) {\n  derived.listeners.forEach(\n    (listener) => listener({\n      prevVal: derived.prevState,\n      currentVal: derived.state\n    })\n  );\n}\nfunction __flush(store) {\n  if (__batchDepth > 0 && !__initialBatchValues.has(store)) {\n    __initialBatchValues.set(store, store.prevState);\n  }\n  __pendingUpdates.add(store);\n  if (__batchDepth > 0) return;\n  if (__isFlushing) return;\n  try {\n    __isFlushing = true;\n    while (__pendingUpdates.size > 0) {\n      const stores = Array.from(__pendingUpdates);\n      __pendingUpdates.clear();\n      for (const store2 of stores) {\n        const prevState = __initialBatchValues.get(store2) ?? store2.prevState;\n        store2.prevState = prevState;\n        __notifyListeners(store2);\n      }\n      for (const store2 of stores) {\n        const derivedVals = __storeToDerived.get(store2);\n        if (!derivedVals) continue;\n        __depsThatHaveWrittenThisTick.current.push(store2);\n        __flush_internals(derivedVals);\n      }\n      for (const store2 of stores) {\n        const derivedVals = __storeToDerived.get(store2);\n        if (!derivedVals) continue;\n        for (const derived of derivedVals) {\n          __notifyDerivedListeners(derived);\n        }\n      }\n    }\n  } finally {\n    __isFlushing = false;\n    __depsThatHaveWrittenThisTick.current = [];\n    __initialBatchValues.clear();\n  }\n}\nfunction batch(fn) {\n  __batchDepth++;\n  try {\n    fn();\n  } finally {\n    __batchDepth--;\n    if (__batchDepth === 0) {\n      const pendingUpdateToFlush = Array.from(__pendingUpdates)[0];\n      if (pendingUpdateToFlush) {\n        __flush(pendingUpdateToFlush);\n      }\n    }\n  }\n}\nexport {\n  __depsThatHaveWrittenThisTick,\n  __derivedToStore,\n  __flush,\n  __storeToDerived,\n  batch\n};\n//# sourceMappingURL=scheduler.js.map\n","import { __flush } from \"./scheduler.js\";\nclass Store {\n  constructor(initialState, options) {\n    this.listeners = /* @__PURE__ */ new Set();\n    this.subscribe = (listener) => {\n      var _a, _b;\n      this.listeners.add(listener);\n      const unsub = (_b = (_a = this.options) == null ? void 0 : _a.onSubscribe) == null ? void 0 : _b.call(_a, listener, this);\n      return () => {\n        this.listeners.delete(listener);\n        unsub == null ? void 0 : unsub();\n      };\n    };\n    this.setState = (updater) => {\n      var _a, _b, _c;\n      this.prevState = this.state;\n      this.state = ((_a = this.options) == null ? void 0 : _a.updateFn) ? this.options.updateFn(this.prevState)(updater) : updater(this.prevState);\n      (_c = (_b = this.options) == null ? void 0 : _b.onUpdate) == null ? void 0 : _c.call(_b);\n      __flush(this);\n    };\n    this.prevState = initialState;\n    this.state = initialState;\n    this.options = options;\n  }\n}\nexport {\n  Store\n};\n//# sourceMappingURL=store.js.map\n","import { Store } from \"./store.js\";\nimport { __storeToDerived, __derivedToStore } from \"./scheduler.js\";\nclass Derived {\n  constructor(options) {\n    this.listeners = /* @__PURE__ */ new Set();\n    this._subscriptions = [];\n    this.lastSeenDepValues = [];\n    this.getDepVals = () => {\n      const prevDepVals = [];\n      const currDepVals = [];\n      for (const dep of this.options.deps) {\n        prevDepVals.push(dep.prevState);\n        currDepVals.push(dep.state);\n      }\n      this.lastSeenDepValues = currDepVals;\n      return {\n        prevDepVals,\n        currDepVals,\n        prevVal: this.prevState ?? void 0\n      };\n    };\n    this.recompute = () => {\n      var _a, _b;\n      this.prevState = this.state;\n      const { prevDepVals, currDepVals, prevVal } = this.getDepVals();\n      this.state = this.options.fn({\n        prevDepVals,\n        currDepVals,\n        prevVal\n      });\n      (_b = (_a = this.options).onUpdate) == null ? void 0 : _b.call(_a);\n    };\n    this.checkIfRecalculationNeededDeeply = () => {\n      for (const dep of this.options.deps) {\n        if (dep instanceof Derived) {\n          dep.checkIfRecalculationNeededDeeply();\n        }\n      }\n      let shouldRecompute = false;\n      const lastSeenDepValues = this.lastSeenDepValues;\n      const { currDepVals } = this.getDepVals();\n      for (let i = 0; i < currDepVals.length; i++) {\n        if (currDepVals[i] !== lastSeenDepValues[i]) {\n          shouldRecompute = true;\n          break;\n        }\n      }\n      if (shouldRecompute) {\n        this.recompute();\n      }\n    };\n    this.mount = () => {\n      this.registerOnGraph();\n      this.checkIfRecalculationNeededDeeply();\n      return () => {\n        this.unregisterFromGraph();\n        for (const cleanup of this._subscriptions) {\n          cleanup();\n        }\n      };\n    };\n    this.subscribe = (listener) => {\n      var _a, _b;\n      this.listeners.add(listener);\n      const unsub = (_b = (_a = this.options).onSubscribe) == null ? void 0 : _b.call(_a, listener, this);\n      return () => {\n        this.listeners.delete(listener);\n        unsub == null ? void 0 : unsub();\n      };\n    };\n    this.options = options;\n    this.state = options.fn({\n      prevDepVals: void 0,\n      prevVal: void 0,\n      currDepVals: this.getDepVals().currDepVals\n    });\n  }\n  registerOnGraph(deps = this.options.deps) {\n    for (const dep of deps) {\n      if (dep instanceof Derived) {\n        dep.registerOnGraph();\n        this.registerOnGraph(dep.options.deps);\n      } else if (dep instanceof Store) {\n        let relatedLinkedDerivedVals = __storeToDerived.get(dep);\n        if (!relatedLinkedDerivedVals) {\n          relatedLinkedDerivedVals = /* @__PURE__ */ new Set();\n          __storeToDerived.set(dep, relatedLinkedDerivedVals);\n        }\n        relatedLinkedDerivedVals.add(this);\n        let relatedStores = __derivedToStore.get(this);\n        if (!relatedStores) {\n          relatedStores = /* @__PURE__ */ new Set();\n          __derivedToStore.set(this, relatedStores);\n        }\n        relatedStores.add(dep);\n      }\n    }\n  }\n  unregisterFromGraph(deps = this.options.deps) {\n    for (const dep of deps) {\n      if (dep instanceof Derived) {\n        this.unregisterFromGraph(dep.options.deps);\n      } else if (dep instanceof Store) {\n        const relatedLinkedDerivedVals = __storeToDerived.get(dep);\n        if (relatedLinkedDerivedVals) {\n          relatedLinkedDerivedVals.delete(this);\n        }\n        const relatedStores = __derivedToStore.get(this);\n        if (relatedStores) {\n          relatedStores.delete(dep);\n        }\n      }\n    }\n  }\n}\nexport {\n  Derived\n};\n//# sourceMappingURL=derived.js.map\n","const Operation = {\n    Remove: 'remove',\n    Replace: 'replace',\n    Add: 'add',\n};\n\n// Don't use `Symbol()` just for 3rd party access the draft\nconst PROXY_DRAFT = Symbol.for('__MUTATIVE_PROXY_DRAFT__');\nconst RAW_RETURN_SYMBOL = Symbol('__MUTATIVE_RAW_RETURN_SYMBOL__');\nconst iteratorSymbol = Symbol.iterator;\nconst dataTypes = {\n    mutable: 'mutable',\n    immutable: 'immutable',\n};\n\nconst internal = {};\n\nfunction has(target, key) {\n    return target instanceof Map\n        ? target.has(key)\n        : Object.prototype.hasOwnProperty.call(target, key);\n}\nfunction getDescriptor(target, key) {\n    if (key in target) {\n        let prototype = Reflect.getPrototypeOf(target);\n        while (prototype) {\n            const descriptor = Reflect.getOwnPropertyDescriptor(prototype, key);\n            if (descriptor)\n                return descriptor;\n            prototype = Reflect.getPrototypeOf(prototype);\n        }\n    }\n    return;\n}\nfunction isBaseSetInstance(obj) {\n    return Object.getPrototypeOf(obj) === Set.prototype;\n}\nfunction isBaseMapInstance(obj) {\n    return Object.getPrototypeOf(obj) === Map.prototype;\n}\n\nfunction latest(proxyDraft) {\n    var _a;\n    return (_a = proxyDraft.copy) !== null && _a !== void 0 ? _a : proxyDraft.original;\n}\n/**\n * Check if the value is a draft\n */\nfunction isDraft(target) {\n    return !!getProxyDraft(target);\n}\nfunction getProxyDraft(value) {\n    if (typeof value !== 'object')\n        return null;\n    return value === null || value === void 0 ? void 0 : value[PROXY_DRAFT];\n}\nfunction getValue(value) {\n    var _a;\n    const proxyDraft = getProxyDraft(value);\n    return proxyDraft ? (_a = proxyDraft.copy) !== null && _a !== void 0 ? _a : proxyDraft.original : value;\n}\n/**\n * Check if a value is draftable\n */\nfunction isDraftable(value, options) {\n    if (!value || typeof value !== 'object')\n        return false;\n    let markResult;\n    return (Object.getPrototypeOf(value) === Object.prototype ||\n        Array.isArray(value) ||\n        value instanceof Map ||\n        value instanceof Set ||\n        (!!(options === null || options === void 0 ? void 0 : options.mark) &&\n            ((markResult = options.mark(value, dataTypes)) === dataTypes.immutable ||\n                typeof markResult === 'function')));\n}\nfunction getPath(target, path = []) {\n    if (Object.hasOwnProperty.call(target, 'key')) {\n        // check if the parent is a draft and the original value is not equal to the current value\n        const parentCopy = target.parent.copy;\n        const proxyDraft = getProxyDraft(get(parentCopy, target.key));\n        if (proxyDraft !== null && (proxyDraft === null || proxyDraft === void 0 ? void 0 : proxyDraft.original) !== target.original) {\n            return null;\n        }\n        const isSet = target.parent.type === 3 /* DraftType.Set */;\n        const key = isSet\n            ? Array.from(target.parent.setMap.keys()).indexOf(target.key)\n            : target.key;\n        // check if the key is still in the next state parent\n        if (!((isSet && parentCopy.size > key) || has(parentCopy, key)))\n            return null;\n        path.push(key);\n    }\n    if (target.parent) {\n        return getPath(target.parent, path);\n    }\n    // `target` is root draft.\n    path.reverse();\n    try {\n        // check if the path is valid\n        resolvePath(target.copy, path);\n    }\n    catch (e) {\n        return null;\n    }\n    return path;\n}\nfunction getType(target) {\n    if (Array.isArray(target))\n        return 1 /* DraftType.Array */;\n    if (target instanceof Map)\n        return 2 /* DraftType.Map */;\n    if (target instanceof Set)\n        return 3 /* DraftType.Set */;\n    return 0 /* DraftType.Object */;\n}\nfunction get(target, key) {\n    return getType(target) === 2 /* DraftType.Map */ ? target.get(key) : target[key];\n}\nfunction set(target, key, value) {\n    const type = getType(target);\n    if (type === 2 /* DraftType.Map */) {\n        target.set(key, value);\n    }\n    else {\n        target[key] = value;\n    }\n}\nfunction peek(target, key) {\n    const state = getProxyDraft(target);\n    const source = state ? latest(state) : target;\n    return source[key];\n}\nfunction isEqual(x, y) {\n    if (x === y) {\n        return x !== 0 || 1 / x === 1 / y;\n    }\n    else {\n        return x !== x && y !== y;\n    }\n}\nfunction revokeProxy(proxyDraft) {\n    if (!proxyDraft)\n        return;\n    while (proxyDraft.finalities.revoke.length > 0) {\n        const revoke = proxyDraft.finalities.revoke.pop();\n        revoke();\n    }\n}\n// handle JSON Pointer path with spec https://www.rfc-editor.org/rfc/rfc6901\nfunction escapePath(path, pathAsArray) {\n    return pathAsArray\n        ? path\n        : ['']\n            .concat(path)\n            .map((_item) => {\n            const item = `${_item}`;\n            if (item.indexOf('/') === -1 && item.indexOf('~') === -1)\n                return item;\n            return item.replace(/~/g, '~0').replace(/\\//g, '~1');\n        })\n            .join('/');\n}\nfunction unescapePath(path) {\n    if (Array.isArray(path))\n        return path;\n    return path\n        .split('/')\n        .map((_item) => _item.replace(/~1/g, '/').replace(/~0/g, '~'))\n        .slice(1);\n}\nfunction resolvePath(base, path) {\n    for (let index = 0; index < path.length - 1; index += 1) {\n        const key = path[index];\n        // use `index` in Set draft\n        base = get(getType(base) === 3 /* DraftType.Set */ ? Array.from(base) : base, key);\n        if (typeof base !== 'object') {\n            throw new Error(`Cannot resolve patch at '${path.join('/')}'.`);\n        }\n    }\n    return base;\n}\n\nfunction strictCopy(target) {\n    const copy = Object.create(Object.getPrototypeOf(target));\n    Reflect.ownKeys(target).forEach((key) => {\n        let desc = Reflect.getOwnPropertyDescriptor(target, key);\n        if (desc.enumerable && desc.configurable && desc.writable) {\n            copy[key] = target[key];\n            return;\n        }\n        // for freeze\n        if (!desc.writable) {\n            desc.writable = true;\n            desc.configurable = true;\n        }\n        if (desc.get || desc.set)\n            desc = {\n                configurable: true,\n                writable: true,\n                enumerable: desc.enumerable,\n                value: target[key],\n            };\n        Reflect.defineProperty(copy, key, desc);\n    });\n    return copy;\n}\nconst propIsEnum = Object.prototype.propertyIsEnumerable;\nfunction shallowCopy(original, options) {\n    let markResult;\n    if (Array.isArray(original)) {\n        return Array.prototype.concat.call(original);\n    }\n    else if (original instanceof Set) {\n        if (!isBaseSetInstance(original)) {\n            const SubClass = Object.getPrototypeOf(original).constructor;\n            return new SubClass(original.values());\n        }\n        return Set.prototype.difference\n            ? Set.prototype.difference.call(original, new Set())\n            : new Set(original.values());\n    }\n    else if (original instanceof Map) {\n        if (!isBaseMapInstance(original)) {\n            const SubClass = Object.getPrototypeOf(original).constructor;\n            return new SubClass(original);\n        }\n        return new Map(original);\n    }\n    else if ((options === null || options === void 0 ? void 0 : options.mark) &&\n        ((markResult = options.mark(original, dataTypes)),\n            markResult !== undefined) &&\n        markResult !== dataTypes.mutable) {\n        if (markResult === dataTypes.immutable) {\n            return strictCopy(original);\n        }\n        else if (typeof markResult === 'function') {\n            if ((options.enablePatches || options.enableAutoFreeze)) {\n                throw new Error(`You can't use mark and patches or auto freeze together.`);\n            }\n            return markResult();\n        }\n        throw new Error(`Unsupported mark result: ${markResult}`);\n    }\n    else if (typeof original === 'object' &&\n        Object.getPrototypeOf(original) === Object.prototype) {\n        // For best performance with shallow copies,\n        // don't use `Object.create(Object.getPrototypeOf(obj), Object.getOwnPropertyDescriptors(obj));` by default.\n        const copy = {};\n        Object.keys(original).forEach((key) => {\n            copy[key] = original[key];\n        });\n        Object.getOwnPropertySymbols(original).forEach((key) => {\n            if (propIsEnum.call(original, key)) {\n                copy[key] = original[key];\n            }\n        });\n        return copy;\n    }\n    else {\n        throw new Error(`Please check mark() to ensure that it is a stable marker draftable function.`);\n    }\n}\nfunction ensureShallowCopy(target) {\n    if (target.copy)\n        return;\n    target.copy = shallowCopy(target.original, target.options);\n}\nfunction deepClone(target) {\n    if (!isDraftable(target))\n        return getValue(target);\n    if (Array.isArray(target))\n        return target.map(deepClone);\n    if (target instanceof Map) {\n        const iterable = Array.from(target.entries()).map(([k, v]) => [\n            k,\n            deepClone(v),\n        ]);\n        if (!isBaseMapInstance(target)) {\n            const SubClass = Object.getPrototypeOf(target).constructor;\n            return new SubClass(iterable);\n        }\n        return new Map(iterable);\n    }\n    if (target instanceof Set) {\n        const iterable = Array.from(target).map(deepClone);\n        if (!isBaseSetInstance(target)) {\n            const SubClass = Object.getPrototypeOf(target).constructor;\n            return new SubClass(iterable);\n        }\n        return new Set(iterable);\n    }\n    const copy = Object.create(Object.getPrototypeOf(target));\n    for (const key in target)\n        copy[key] = deepClone(target[key]);\n    return copy;\n}\nfunction cloneIfNeeded(target) {\n    return isDraft(target) ? deepClone(target) : target;\n}\n\nfunction markChanged(proxyDraft) {\n    var _a;\n    proxyDraft.assignedMap = (_a = proxyDraft.assignedMap) !== null && _a !== void 0 ? _a : new Map();\n    if (!proxyDraft.operated) {\n        proxyDraft.operated = true;\n        if (proxyDraft.parent) {\n            markChanged(proxyDraft.parent);\n        }\n    }\n}\n\nfunction throwFrozenError() {\n    throw new Error('Cannot modify frozen object');\n}\nfunction deepFreeze(target, subKey, updatedValues, stack, keys) {\n    {\n        updatedValues = updatedValues !== null && updatedValues !== void 0 ? updatedValues : new WeakMap();\n        stack = stack !== null && stack !== void 0 ? stack : [];\n        keys = keys !== null && keys !== void 0 ? keys : [];\n        const value = updatedValues.has(target)\n            ? updatedValues.get(target)\n            : target;\n        if (stack.length > 0) {\n            const index = stack.indexOf(value);\n            if (value && typeof value === 'object' && index !== -1) {\n                if (stack[0] === value) {\n                    throw new Error(`Forbids circular reference`);\n                }\n                throw new Error(`Forbids circular reference: ~/${keys\n                    .slice(0, index)\n                    .map((key, index) => {\n                    if (typeof key === 'symbol')\n                        return `[${key.toString()}]`;\n                    const parent = stack[index];\n                    if (typeof key === 'object' &&\n                        (parent instanceof Map || parent instanceof Set))\n                        return Array.from(parent.keys()).indexOf(key);\n                    return key;\n                })\n                    .join('/')}`);\n            }\n            stack.push(value);\n            keys.push(subKey);\n        }\n        else {\n            stack.push(value);\n        }\n    }\n    if (Object.isFrozen(target) || isDraft(target)) {\n        {\n            stack.pop();\n            keys.pop();\n        }\n        return;\n    }\n    const type = getType(target);\n    switch (type) {\n        case 2 /* DraftType.Map */:\n            for (const [key, value] of target) {\n                deepFreeze(key, key, updatedValues, stack, keys);\n                deepFreeze(value, key, updatedValues, stack, keys);\n            }\n            target.set = target.clear = target.delete = throwFrozenError;\n            break;\n        case 3 /* DraftType.Set */:\n            for (const value of target) {\n                deepFreeze(value, value, updatedValues, stack, keys);\n            }\n            target.add = target.clear = target.delete = throwFrozenError;\n            break;\n        case 1 /* DraftType.Array */:\n            Object.freeze(target);\n            let index = 0;\n            for (const value of target) {\n                deepFreeze(value, index, updatedValues, stack, keys);\n                index += 1;\n            }\n            break;\n        default:\n            Object.freeze(target);\n            // ignore non-enumerable or symbol properties\n            Object.keys(target).forEach((name) => {\n                const value = target[name];\n                deepFreeze(value, name, updatedValues, stack, keys);\n            });\n    }\n    {\n        stack.pop();\n        keys.pop();\n    }\n}\n\nfunction forEach(target, iter) {\n    const type = getType(target);\n    if (type === 0 /* DraftType.Object */) {\n        Reflect.ownKeys(target).forEach((key) => {\n            iter(key, target[key], target);\n        });\n    }\n    else if (type === 1 /* DraftType.Array */) {\n        let index = 0;\n        for (const entry of target) {\n            iter(index, entry, target);\n            index += 1;\n        }\n    }\n    else {\n        target.forEach((entry, index) => iter(index, entry, target));\n    }\n}\n\nfunction handleValue(target, handledSet, options) {\n    if (isDraft(target) ||\n        !isDraftable(target, options) ||\n        handledSet.has(target) ||\n        Object.isFrozen(target))\n        return;\n    const isSet = target instanceof Set;\n    const setMap = isSet ? new Map() : undefined;\n    handledSet.add(target);\n    forEach(target, (key, value) => {\n        var _a;\n        if (isDraft(value)) {\n            const proxyDraft = getProxyDraft(value);\n            ensureShallowCopy(proxyDraft);\n            // A draft where a child node has been changed, or assigned a value\n            const updatedValue = ((_a = proxyDraft.assignedMap) === null || _a === void 0 ? void 0 : _a.size) || proxyDraft.operated\n                ? proxyDraft.copy\n                : proxyDraft.original;\n            // final update value\n            set(isSet ? setMap : target, key, updatedValue);\n        }\n        else {\n            handleValue(value, handledSet, options);\n        }\n    });\n    if (setMap) {\n        const set = target;\n        const values = Array.from(set);\n        set.clear();\n        values.forEach((value) => {\n            set.add(setMap.has(value) ? setMap.get(value) : value);\n        });\n    }\n}\nfunction finalizeAssigned(proxyDraft, key) {\n    // handle the draftable assigned values， and the value is not a draft\n    const copy = proxyDraft.type === 3 /* DraftType.Set */ ? proxyDraft.setMap : proxyDraft.copy;\n    if (proxyDraft.finalities.revoke.length > 1 &&\n        proxyDraft.assignedMap.get(key) &&\n        copy) {\n        handleValue(get(copy, key), proxyDraft.finalities.handledSet, proxyDraft.options);\n    }\n}\nfunction finalizeSetValue(target) {\n    if (target.type === 3 /* DraftType.Set */ && target.copy) {\n        target.copy.clear();\n        target.setMap.forEach((value) => {\n            target.copy.add(getValue(value));\n        });\n    }\n}\nfunction finalizePatches(target, generatePatches, patches, inversePatches) {\n    const shouldFinalize = target.operated &&\n        target.assignedMap &&\n        target.assignedMap.size > 0 &&\n        !target.finalized;\n    if (shouldFinalize) {\n        if (patches && inversePatches) {\n            const basePath = getPath(target);\n            if (basePath) {\n                generatePatches(target, basePath, patches, inversePatches);\n            }\n        }\n        target.finalized = true;\n    }\n}\nfunction markFinalization(target, key, value, generatePatches) {\n    const proxyDraft = getProxyDraft(value);\n    if (proxyDraft) {\n        // !case: assign the draft value\n        if (!proxyDraft.callbacks) {\n            proxyDraft.callbacks = [];\n        }\n        proxyDraft.callbacks.push((patches, inversePatches) => {\n            var _a;\n            const copy = target.type === 3 /* DraftType.Set */ ? target.setMap : target.copy;\n            if (isEqual(get(copy, key), value)) {\n                let updatedValue = proxyDraft.original;\n                if (proxyDraft.copy) {\n                    updatedValue = proxyDraft.copy;\n                }\n                finalizeSetValue(target);\n                finalizePatches(target, generatePatches, patches, inversePatches);\n                if (target.options.enableAutoFreeze) {\n                    target.options.updatedValues =\n                        (_a = target.options.updatedValues) !== null && _a !== void 0 ? _a : new WeakMap();\n                    target.options.updatedValues.set(updatedValue, proxyDraft.original);\n                }\n                // final update value\n                set(copy, key, updatedValue);\n            }\n        });\n        if (target.options.enableAutoFreeze) {\n            // !case: assign the draft value in cross draft tree\n            if (proxyDraft.finalities !== target.finalities) {\n                target.options.enableAutoFreeze = false;\n            }\n        }\n    }\n    if (isDraftable(value, target.options)) {\n        // !case: assign the non-draft value\n        target.finalities.draft.push(() => {\n            const copy = target.type === 3 /* DraftType.Set */ ? target.setMap : target.copy;\n            if (isEqual(get(copy, key), value)) {\n                finalizeAssigned(target, key);\n            }\n        });\n    }\n}\n\nfunction generateArrayPatches(proxyState, basePath, patches, inversePatches, pathAsArray) {\n    let { original, assignedMap, options } = proxyState;\n    let copy = proxyState.copy;\n    if (copy.length < original.length) {\n        [original, copy] = [copy, original];\n        [patches, inversePatches] = [inversePatches, patches];\n    }\n    for (let index = 0; index < original.length; index += 1) {\n        if (assignedMap.get(index.toString()) && copy[index] !== original[index]) {\n            const _path = basePath.concat([index]);\n            const path = escapePath(_path, pathAsArray);\n            patches.push({\n                op: Operation.Replace,\n                path,\n                // If it is a draft, it needs to be deep cloned, and it may also be non-draft.\n                value: cloneIfNeeded(copy[index]),\n            });\n            inversePatches.push({\n                op: Operation.Replace,\n                path,\n                // If it is a draft, it needs to be deep cloned, and it may also be non-draft.\n                value: cloneIfNeeded(original[index]),\n            });\n        }\n    }\n    for (let index = original.length; index < copy.length; index += 1) {\n        const _path = basePath.concat([index]);\n        const path = escapePath(_path, pathAsArray);\n        patches.push({\n            op: Operation.Add,\n            path,\n            // If it is a draft, it needs to be deep cloned, and it may also be non-draft.\n            value: cloneIfNeeded(copy[index]),\n        });\n    }\n    if (original.length < copy.length) {\n        // https://www.rfc-editor.org/rfc/rfc6902#appendix-A.4\n        // For performance, here we only generate an operation that replaces the length of the array,\n        // which is inconsistent with JSON Patch specification\n        const { arrayLengthAssignment = true } = options.enablePatches;\n        if (arrayLengthAssignment) {\n            const _path = basePath.concat(['length']);\n            const path = escapePath(_path, pathAsArray);\n            inversePatches.push({\n                op: Operation.Replace,\n                path,\n                value: original.length,\n            });\n        }\n        else {\n            for (let index = copy.length; original.length < index; index -= 1) {\n                const _path = basePath.concat([index - 1]);\n                const path = escapePath(_path, pathAsArray);\n                inversePatches.push({\n                    op: Operation.Remove,\n                    path,\n                });\n            }\n        }\n    }\n}\nfunction generatePatchesFromAssigned({ original, copy, assignedMap }, basePath, patches, inversePatches, pathAsArray) {\n    assignedMap.forEach((assignedValue, key) => {\n        const originalValue = get(original, key);\n        const value = cloneIfNeeded(get(copy, key));\n        const op = !assignedValue\n            ? Operation.Remove\n            : has(original, key)\n                ? Operation.Replace\n                : Operation.Add;\n        if (isEqual(originalValue, value) && op === Operation.Replace)\n            return;\n        const _path = basePath.concat(key);\n        const path = escapePath(_path, pathAsArray);\n        patches.push(op === Operation.Remove ? { op, path } : { op, path, value });\n        inversePatches.push(op === Operation.Add\n            ? { op: Operation.Remove, path }\n            : op === Operation.Remove\n                ? { op: Operation.Add, path, value: originalValue }\n                : { op: Operation.Replace, path, value: originalValue });\n    });\n}\nfunction generateSetPatches({ original, copy }, basePath, patches, inversePatches, pathAsArray) {\n    let index = 0;\n    original.forEach((value) => {\n        if (!copy.has(value)) {\n            const _path = basePath.concat([index]);\n            const path = escapePath(_path, pathAsArray);\n            patches.push({\n                op: Operation.Remove,\n                path,\n                value,\n            });\n            inversePatches.unshift({\n                op: Operation.Add,\n                path,\n                value,\n            });\n        }\n        index += 1;\n    });\n    index = 0;\n    copy.forEach((value) => {\n        if (!original.has(value)) {\n            const _path = basePath.concat([index]);\n            const path = escapePath(_path, pathAsArray);\n            patches.push({\n                op: Operation.Add,\n                path,\n                value,\n            });\n            inversePatches.unshift({\n                op: Operation.Remove,\n                path,\n                value,\n            });\n        }\n        index += 1;\n    });\n}\nfunction generatePatches(proxyState, basePath, patches, inversePatches) {\n    const { pathAsArray = true } = proxyState.options.enablePatches;\n    switch (proxyState.type) {\n        case 0 /* DraftType.Object */:\n        case 2 /* DraftType.Map */:\n            return generatePatchesFromAssigned(proxyState, basePath, patches, inversePatches, pathAsArray);\n        case 1 /* DraftType.Array */:\n            return generateArrayPatches(proxyState, basePath, patches, inversePatches, pathAsArray);\n        case 3 /* DraftType.Set */:\n            return generateSetPatches(proxyState, basePath, patches, inversePatches, pathAsArray);\n    }\n}\n\nlet readable = false;\nconst checkReadable = (value, options, ignoreCheckDraftable = false) => {\n    if (typeof value === 'object' &&\n        value !== null &&\n        (!isDraftable(value, options) || ignoreCheckDraftable) &&\n        !readable) {\n        throw new Error(`Strict mode: Mutable data cannot be accessed directly, please use 'unsafe(callback)' wrap.`);\n    }\n};\n/**\n * `unsafe(callback)` to access mutable data directly in strict mode.\n *\n * ## Example\n *\n * ```ts\n * import { create, unsafe } from '../index';\n *\n * class Foobar {\n *   bar = 1;\n * }\n *\n * const baseState = { foobar: new Foobar() };\n * const state = create(\n *   baseState,\n *   (draft) => {\n *    unsafe(() => {\n *      draft.foobar.bar = 2;\n *    });\n *   },\n *   {\n *     strict: true,\n *   }\n * );\n *\n * expect(state).toBe(baseState);\n * expect(state.foobar).toBe(baseState.foobar);\n * expect(state.foobar.bar).toBe(2);\n * ```\n */\nfunction unsafe(callback) {\n    readable = true;\n    let result;\n    try {\n        result = callback();\n    }\n    finally {\n        readable = false;\n    }\n    return result;\n}\n\nconst mapHandler = {\n    get size() {\n        const current = latest(getProxyDraft(this));\n        return current.size;\n    },\n    has(key) {\n        return latest(getProxyDraft(this)).has(key);\n    },\n    set(key, value) {\n        const target = getProxyDraft(this);\n        const source = latest(target);\n        if (!source.has(key) || !isEqual(source.get(key), value)) {\n            ensureShallowCopy(target);\n            markChanged(target);\n            target.assignedMap.set(key, true);\n            target.copy.set(key, value);\n            markFinalization(target, key, value, generatePatches);\n        }\n        return this;\n    },\n    delete(key) {\n        if (!this.has(key)) {\n            return false;\n        }\n        const target = getProxyDraft(this);\n        ensureShallowCopy(target);\n        markChanged(target);\n        if (target.original.has(key)) {\n            target.assignedMap.set(key, false);\n        }\n        else {\n            target.assignedMap.delete(key);\n        }\n        target.copy.delete(key);\n        return true;\n    },\n    clear() {\n        const target = getProxyDraft(this);\n        if (!this.size)\n            return;\n        ensureShallowCopy(target);\n        markChanged(target);\n        target.assignedMap = new Map();\n        for (const [key] of target.original) {\n            target.assignedMap.set(key, false);\n        }\n        target.copy.clear();\n    },\n    forEach(callback, thisArg) {\n        const target = getProxyDraft(this);\n        latest(target).forEach((_value, _key) => {\n            callback.call(thisArg, this.get(_key), _key, this);\n        });\n    },\n    get(key) {\n        var _a, _b;\n        const target = getProxyDraft(this);\n        const value = latest(target).get(key);\n        const mutable = ((_b = (_a = target.options).mark) === null || _b === void 0 ? void 0 : _b.call(_a, value, dataTypes)) === dataTypes.mutable;\n        if (target.options.strict) {\n            checkReadable(value, target.options, mutable);\n        }\n        if (mutable) {\n            return value;\n        }\n        if (target.finalized || !isDraftable(value, target.options)) {\n            return value;\n        }\n        // drafted or reassigned\n        if (value !== target.original.get(key)) {\n            return value;\n        }\n        const draft = internal.createDraft({\n            original: value,\n            parentDraft: target,\n            key,\n            finalities: target.finalities,\n            options: target.options,\n        });\n        ensureShallowCopy(target);\n        target.copy.set(key, draft);\n        return draft;\n    },\n    keys() {\n        return latest(getProxyDraft(this)).keys();\n    },\n    values() {\n        const iterator = this.keys();\n        return {\n            [iteratorSymbol]: () => this.values(),\n            next: () => {\n                const result = iterator.next();\n                if (result.done)\n                    return result;\n                const value = this.get(result.value);\n                return {\n                    done: false,\n                    value,\n                };\n            },\n        };\n    },\n    entries() {\n        const iterator = this.keys();\n        return {\n            [iteratorSymbol]: () => this.entries(),\n            next: () => {\n                const result = iterator.next();\n                if (result.done)\n                    return result;\n                const value = this.get(result.value);\n                return {\n                    done: false,\n                    value: [result.value, value],\n                };\n            },\n        };\n    },\n    [iteratorSymbol]() {\n        return this.entries();\n    },\n};\nconst mapHandlerKeys = Reflect.ownKeys(mapHandler);\n\nconst getNextIterator = (target, iterator, { isValuesIterator }) => () => {\n    var _a, _b;\n    const result = iterator.next();\n    if (result.done)\n        return result;\n    const key = result.value;\n    let value = target.setMap.get(key);\n    const currentDraft = getProxyDraft(value);\n    const mutable = ((_b = (_a = target.options).mark) === null || _b === void 0 ? void 0 : _b.call(_a, value, dataTypes)) === dataTypes.mutable;\n    if (target.options.strict) {\n        checkReadable(key, target.options, mutable);\n    }\n    if (!mutable &&\n        !currentDraft &&\n        isDraftable(key, target.options) &&\n        !target.finalized &&\n        target.original.has(key)) {\n        // draft a draftable original set item\n        const proxy = internal.createDraft({\n            original: key,\n            parentDraft: target,\n            key,\n            finalities: target.finalities,\n            options: target.options,\n        });\n        target.setMap.set(key, proxy);\n        value = proxy;\n    }\n    else if (currentDraft) {\n        // drafted\n        value = currentDraft.proxy;\n    }\n    return {\n        done: false,\n        value: isValuesIterator ? value : [value, value],\n    };\n};\nconst setHandler = {\n    get size() {\n        const target = getProxyDraft(this);\n        return target.setMap.size;\n    },\n    has(value) {\n        const target = getProxyDraft(this);\n        // reassigned or non-draftable values\n        if (target.setMap.has(value))\n            return true;\n        ensureShallowCopy(target);\n        const valueProxyDraft = getProxyDraft(value);\n        // drafted\n        if (valueProxyDraft && target.setMap.has(valueProxyDraft.original))\n            return true;\n        return false;\n    },\n    add(value) {\n        const target = getProxyDraft(this);\n        if (!this.has(value)) {\n            ensureShallowCopy(target);\n            markChanged(target);\n            target.assignedMap.set(value, true);\n            target.setMap.set(value, value);\n            markFinalization(target, value, value, generatePatches);\n        }\n        return this;\n    },\n    delete(value) {\n        if (!this.has(value)) {\n            return false;\n        }\n        const target = getProxyDraft(this);\n        ensureShallowCopy(target);\n        markChanged(target);\n        const valueProxyDraft = getProxyDraft(value);\n        if (valueProxyDraft && target.setMap.has(valueProxyDraft.original)) {\n            // delete drafted\n            target.assignedMap.set(valueProxyDraft.original, false);\n            return target.setMap.delete(valueProxyDraft.original);\n        }\n        if (!valueProxyDraft && target.setMap.has(value)) {\n            // non-draftable values\n            target.assignedMap.set(value, false);\n        }\n        else {\n            // reassigned\n            target.assignedMap.delete(value);\n        }\n        // delete reassigned or non-draftable values\n        return target.setMap.delete(value);\n    },\n    clear() {\n        if (!this.size)\n            return;\n        const target = getProxyDraft(this);\n        ensureShallowCopy(target);\n        markChanged(target);\n        for (const value of target.original) {\n            target.assignedMap.set(value, false);\n        }\n        target.setMap.clear();\n    },\n    values() {\n        const target = getProxyDraft(this);\n        ensureShallowCopy(target);\n        const iterator = target.setMap.keys();\n        return {\n            [Symbol.iterator]: () => this.values(),\n            next: getNextIterator(target, iterator, { isValuesIterator: true }),\n        };\n    },\n    entries() {\n        const target = getProxyDraft(this);\n        ensureShallowCopy(target);\n        const iterator = target.setMap.keys();\n        return {\n            [Symbol.iterator]: () => this.entries(),\n            next: getNextIterator(target, iterator, {\n                isValuesIterator: false,\n            }),\n        };\n    },\n    keys() {\n        return this.values();\n    },\n    [iteratorSymbol]() {\n        return this.values();\n    },\n    forEach(callback, thisArg) {\n        const iterator = this.values();\n        let result = iterator.next();\n        while (!result.done) {\n            callback.call(thisArg, result.value, result.value, this);\n            result = iterator.next();\n        }\n    },\n};\nif (Set.prototype.difference) {\n    // for compatibility with new Set methods\n    // https://github.com/tc39/proposal-set-methods\n    // And `https://github.com/tc39/proposal-set-methods/blob/main/details.md#symbolspecies` has some details about the `@@species` symbol.\n    // So we can't use SubSet instance constructor to get the constructor of the SubSet instance.\n    Object.assign(setHandler, {\n        intersection(other) {\n            return Set.prototype.intersection.call(new Set(this.values()), other);\n        },\n        union(other) {\n            return Set.prototype.union.call(new Set(this.values()), other);\n        },\n        difference(other) {\n            return Set.prototype.difference.call(new Set(this.values()), other);\n        },\n        symmetricDifference(other) {\n            return Set.prototype.symmetricDifference.call(new Set(this.values()), other);\n        },\n        isSubsetOf(other) {\n            return Set.prototype.isSubsetOf.call(new Set(this.values()), other);\n        },\n        isSupersetOf(other) {\n            return Set.prototype.isSupersetOf.call(new Set(this.values()), other);\n        },\n        isDisjointFrom(other) {\n            return Set.prototype.isDisjointFrom.call(new Set(this.values()), other);\n        },\n    });\n}\nconst setHandlerKeys = Reflect.ownKeys(setHandler);\n\nconst draftsCache = new WeakSet();\nconst proxyHandler = {\n    get(target, key, receiver) {\n        var _a, _b;\n        const copy = (_a = target.copy) === null || _a === void 0 ? void 0 : _a[key];\n        // Improve draft reading performance by caching the draft copy.\n        if (copy && draftsCache.has(copy)) {\n            return copy;\n        }\n        if (key === PROXY_DRAFT)\n            return target;\n        let markResult;\n        if (target.options.mark) {\n            // handle `Uncaught TypeError: Method get Map.prototype.size called on incompatible receiver #<Map>`\n            // or `Uncaught TypeError: Method get Set.prototype.size called on incompatible receiver #<Set>`\n            const value = key === 'size' &&\n                (target.original instanceof Map || target.original instanceof Set)\n                ? Reflect.get(target.original, key)\n                : Reflect.get(target.original, key, receiver);\n            markResult = target.options.mark(value, dataTypes);\n            if (markResult === dataTypes.mutable) {\n                if (target.options.strict) {\n                    checkReadable(value, target.options, true);\n                }\n                return value;\n            }\n        }\n        const source = latest(target);\n        if (source instanceof Map && mapHandlerKeys.includes(key)) {\n            if (key === 'size') {\n                return Object.getOwnPropertyDescriptor(mapHandler, 'size').get.call(target.proxy);\n            }\n            const handle = mapHandler[key];\n            if (handle) {\n                return handle.bind(target.proxy);\n            }\n        }\n        if (source instanceof Set && setHandlerKeys.includes(key)) {\n            if (key === 'size') {\n                return Object.getOwnPropertyDescriptor(setHandler, 'size').get.call(target.proxy);\n            }\n            const handle = setHandler[key];\n            if (handle) {\n                return handle.bind(target.proxy);\n            }\n        }\n        if (!has(source, key)) {\n            const desc = getDescriptor(source, key);\n            return desc\n                ? `value` in desc\n                    ? desc.value\n                    : // !case: support for getter\n                        (_b = desc.get) === null || _b === void 0 ? void 0 : _b.call(target.proxy)\n                : undefined;\n        }\n        const value = source[key];\n        if (target.options.strict) {\n            checkReadable(value, target.options);\n        }\n        if (target.finalized || !isDraftable(value, target.options)) {\n            return value;\n        }\n        // Ensure that the assigned values are not drafted\n        if (value === peek(target.original, key)) {\n            ensureShallowCopy(target);\n            target.copy[key] = createDraft({\n                original: target.original[key],\n                parentDraft: target,\n                key: target.type === 1 /* DraftType.Array */ ? Number(key) : key,\n                finalities: target.finalities,\n                options: target.options,\n            });\n            // !case: support for custom shallow copy function\n            if (typeof markResult === 'function') {\n                const subProxyDraft = getProxyDraft(target.copy[key]);\n                ensureShallowCopy(subProxyDraft);\n                // Trigger a custom shallow copy to update to a new copy\n                markChanged(subProxyDraft);\n                return subProxyDraft.copy;\n            }\n            return target.copy[key];\n        }\n        return value;\n    },\n    set(target, key, value) {\n        var _a;\n        if (target.type === 3 /* DraftType.Set */ || target.type === 2 /* DraftType.Map */) {\n            throw new Error(`Map/Set draft does not support any property assignment.`);\n        }\n        let _key;\n        if (target.type === 1 /* DraftType.Array */ &&\n            key !== 'length' &&\n            !(Number.isInteger((_key = Number(key))) &&\n                _key >= 0 &&\n                (key === 0 || _key === 0 || String(_key) === String(key)))) {\n            throw new Error(`Only supports setting array indices and the 'length' property.`);\n        }\n        const desc = getDescriptor(latest(target), key);\n        if (desc === null || desc === void 0 ? void 0 : desc.set) {\n            // !case: cover the case of setter\n            desc.set.call(target.proxy, value);\n            return true;\n        }\n        const current = peek(latest(target), key);\n        const currentProxyDraft = getProxyDraft(current);\n        if (currentProxyDraft && isEqual(currentProxyDraft.original, value)) {\n            // !case: ignore the case of assigning the original draftable value to a draft\n            target.copy[key] = value;\n            target.assignedMap = (_a = target.assignedMap) !== null && _a !== void 0 ? _a : new Map();\n            target.assignedMap.set(key, false);\n            return true;\n        }\n        // !case: handle new props with value 'undefined'\n        if (isEqual(value, current) &&\n            (value !== undefined || has(target.original, key)))\n            return true;\n        ensureShallowCopy(target);\n        markChanged(target);\n        if (has(target.original, key) && isEqual(value, target.original[key])) {\n            // !case: handle the case of assigning the original non-draftable value to a draft\n            target.assignedMap.delete(key);\n        }\n        else {\n            target.assignedMap.set(key, true);\n        }\n        target.copy[key] = value;\n        markFinalization(target, key, value, generatePatches);\n        return true;\n    },\n    has(target, key) {\n        return key in latest(target);\n    },\n    ownKeys(target) {\n        return Reflect.ownKeys(latest(target));\n    },\n    getOwnPropertyDescriptor(target, key) {\n        const source = latest(target);\n        const descriptor = Reflect.getOwnPropertyDescriptor(source, key);\n        if (!descriptor)\n            return descriptor;\n        return {\n            writable: true,\n            configurable: target.type !== 1 /* DraftType.Array */ || key !== 'length',\n            enumerable: descriptor.enumerable,\n            value: source[key],\n        };\n    },\n    getPrototypeOf(target) {\n        return Reflect.getPrototypeOf(target.original);\n    },\n    setPrototypeOf() {\n        throw new Error(`Cannot call 'setPrototypeOf()' on drafts`);\n    },\n    defineProperty() {\n        throw new Error(`Cannot call 'defineProperty()' on drafts`);\n    },\n    deleteProperty(target, key) {\n        var _a;\n        if (target.type === 1 /* DraftType.Array */) {\n            return proxyHandler.set.call(this, target, key, undefined, target.proxy);\n        }\n        if (peek(target.original, key) !== undefined || key in target.original) {\n            // !case: delete an existing key\n            ensureShallowCopy(target);\n            markChanged(target);\n            target.assignedMap.set(key, false);\n        }\n        else {\n            target.assignedMap = (_a = target.assignedMap) !== null && _a !== void 0 ? _a : new Map();\n            // The original non-existent key has been deleted\n            target.assignedMap.delete(key);\n        }\n        if (target.copy)\n            delete target.copy[key];\n        return true;\n    },\n};\nfunction createDraft(createDraftOptions) {\n    const { original, parentDraft, key, finalities, options } = createDraftOptions;\n    const type = getType(original);\n    const proxyDraft = {\n        type,\n        finalized: false,\n        parent: parentDraft,\n        original,\n        copy: null,\n        proxy: null,\n        finalities,\n        options,\n        // Mapping of draft Set items to their corresponding draft values.\n        setMap: type === 3 /* DraftType.Set */\n            ? new Map(original.entries())\n            : undefined,\n    };\n    // !case: undefined as a draft map key\n    if (key || 'key' in createDraftOptions) {\n        proxyDraft.key = key;\n    }\n    const { proxy, revoke } = Proxy.revocable(type === 1 /* DraftType.Array */ ? Object.assign([], proxyDraft) : proxyDraft, proxyHandler);\n    finalities.revoke.push(revoke);\n    draftsCache.add(proxy);\n    proxyDraft.proxy = proxy;\n    if (parentDraft) {\n        const target = parentDraft;\n        target.finalities.draft.push((patches, inversePatches) => {\n            var _a, _b;\n            const oldProxyDraft = getProxyDraft(proxy);\n            // if target is a Set draft, `setMap` is the real Set copies proxy mapping.\n            let copy = target.type === 3 /* DraftType.Set */ ? target.setMap : target.copy;\n            const draft = get(copy, key);\n            const proxyDraft = getProxyDraft(draft);\n            if (proxyDraft) {\n                // assign the updated value to the copy object\n                let updatedValue = proxyDraft.original;\n                if (proxyDraft.operated) {\n                    updatedValue = getValue(draft);\n                }\n                finalizeSetValue(proxyDraft);\n                finalizePatches(proxyDraft, generatePatches, patches, inversePatches);\n                if (target.options.enableAutoFreeze) {\n                    target.options.updatedValues =\n                        (_a = target.options.updatedValues) !== null && _a !== void 0 ? _a : new WeakMap();\n                    target.options.updatedValues.set(updatedValue, proxyDraft.original);\n                }\n                // final update value\n                set(copy, key, updatedValue);\n            }\n            // !case: handle the deleted key\n            (_b = oldProxyDraft.callbacks) === null || _b === void 0 ? void 0 : _b.forEach((callback) => {\n                callback(patches, inversePatches);\n            });\n        });\n    }\n    else {\n        // !case: handle the root draft\n        const target = getProxyDraft(proxy);\n        target.finalities.draft.push((patches, inversePatches) => {\n            finalizeSetValue(target);\n            finalizePatches(target, generatePatches, patches, inversePatches);\n        });\n    }\n    return proxy;\n}\ninternal.createDraft = createDraft;\nfunction finalizeDraft(result, returnedValue, patches, inversePatches, enableAutoFreeze) {\n    var _a;\n    const proxyDraft = getProxyDraft(result);\n    const original = (_a = proxyDraft === null || proxyDraft === void 0 ? void 0 : proxyDraft.original) !== null && _a !== void 0 ? _a : result;\n    const hasReturnedValue = !!returnedValue.length;\n    if (proxyDraft === null || proxyDraft === void 0 ? void 0 : proxyDraft.operated) {\n        while (proxyDraft.finalities.draft.length > 0) {\n            const finalize = proxyDraft.finalities.draft.pop();\n            finalize(patches, inversePatches);\n        }\n    }\n    const state = hasReturnedValue\n        ? returnedValue[0]\n        : proxyDraft\n            ? proxyDraft.operated\n                ? proxyDraft.copy\n                : proxyDraft.original\n            : result;\n    if (proxyDraft)\n        revokeProxy(proxyDraft);\n    if (enableAutoFreeze) {\n        deepFreeze(state, state, proxyDraft === null || proxyDraft === void 0 ? void 0 : proxyDraft.options.updatedValues);\n    }\n    return [\n        state,\n        patches && hasReturnedValue\n            ? [{ op: Operation.Replace, path: [], value: returnedValue[0] }]\n            : patches,\n        inversePatches && hasReturnedValue\n            ? [{ op: Operation.Replace, path: [], value: original }]\n            : inversePatches,\n    ];\n}\n\nfunction draftify(baseState, options) {\n    var _a;\n    const finalities = {\n        draft: [],\n        revoke: [],\n        handledSet: new WeakSet(),\n    };\n    let patches;\n    let inversePatches;\n    if (options.enablePatches) {\n        patches = [];\n        inversePatches = [];\n    }\n    const isMutable = ((_a = options.mark) === null || _a === void 0 ? void 0 : _a.call(options, baseState, dataTypes)) === dataTypes.mutable ||\n        !isDraftable(baseState, options);\n    const draft = isMutable\n        ? baseState\n        : createDraft({\n            original: baseState,\n            parentDraft: null,\n            finalities,\n            options,\n        });\n    return [\n        draft,\n        (returnedValue = []) => {\n            const [finalizedState, finalizedPatches, finalizedInversePatches] = finalizeDraft(draft, returnedValue, patches, inversePatches, options.enableAutoFreeze);\n            return (options.enablePatches\n                ? [finalizedState, finalizedPatches, finalizedInversePatches]\n                : finalizedState);\n        },\n    ];\n}\n\nfunction handleReturnValue(options) {\n    const { rootDraft, value, useRawReturn = false, isRoot = true } = options;\n    forEach(value, (key, item, source) => {\n        const proxyDraft = getProxyDraft(item);\n        // just handle the draft which is created by the same rootDraft\n        if (proxyDraft &&\n            rootDraft &&\n            proxyDraft.finalities === rootDraft.finalities) {\n            options.isContainDraft = true;\n            const currentValue = proxyDraft.original;\n            // final update value, but just handle return value\n            if (source instanceof Set) {\n                const arr = Array.from(source);\n                source.clear();\n                arr.forEach((_item) => source.add(key === _item ? currentValue : _item));\n            }\n            else {\n                set(source, key, currentValue);\n            }\n        }\n        else if (typeof item === 'object' && item !== null) {\n            options.value = item;\n            options.isRoot = false;\n            handleReturnValue(options);\n        }\n    });\n    if (isRoot) {\n        if (!options.isContainDraft)\n            console.warn(`The return value does not contain any draft, please use 'rawReturn()' to wrap the return value to improve performance.`);\n        if (useRawReturn) {\n            console.warn(`The return value contains drafts, please don't use 'rawReturn()' to wrap the return value.`);\n        }\n    }\n}\nfunction getCurrent(target) {\n    var _a;\n    const proxyDraft = getProxyDraft(target);\n    if (!isDraftable(target, proxyDraft === null || proxyDraft === void 0 ? void 0 : proxyDraft.options))\n        return target;\n    const type = getType(target);\n    if (proxyDraft && !proxyDraft.operated)\n        return proxyDraft.original;\n    let currentValue;\n    function ensureShallowCopy() {\n        currentValue =\n            type === 2 /* DraftType.Map */\n                ? !isBaseMapInstance(target)\n                    ? new (Object.getPrototypeOf(target).constructor)(target)\n                    : new Map(target)\n                : type === 3 /* DraftType.Set */\n                    ? Array.from(proxyDraft.setMap.values())\n                    : shallowCopy(target, proxyDraft === null || proxyDraft === void 0 ? void 0 : proxyDraft.options);\n    }\n    if (proxyDraft) {\n        // It's a proxy draft, let's create a shallow copy eagerly\n        proxyDraft.finalized = true;\n        try {\n            ensureShallowCopy();\n        }\n        finally {\n            proxyDraft.finalized = false;\n        }\n    }\n    else {\n        // It's not a proxy draft, let's use the target directly and let's see\n        // lazily if we need to create a shallow copy\n        currentValue = target;\n    }\n    forEach(currentValue, (key, value) => {\n        if (proxyDraft && isEqual(get(proxyDraft.original, key), value))\n            return;\n        const newValue = getCurrent(value);\n        if (newValue !== value) {\n            if (currentValue === target)\n                ensureShallowCopy();\n            set(currentValue, key, newValue);\n        }\n    });\n    if (type === 3 /* DraftType.Set */) {\n        const value = (_a = proxyDraft === null || proxyDraft === void 0 ? void 0 : proxyDraft.original) !== null && _a !== void 0 ? _a : currentValue;\n        return !isBaseSetInstance(value)\n            ? new (Object.getPrototypeOf(value).constructor)(currentValue)\n            : new Set(currentValue);\n    }\n    return currentValue;\n}\nfunction current(target) {\n    if (!isDraft(target)) {\n        throw new Error(`current() is only used for Draft, parameter: ${target}`);\n    }\n    return getCurrent(target);\n}\n\n/**\n * `makeCreator(options)` to make a creator function.\n *\n * ## Example\n *\n * ```ts\n * import { makeCreator } from '../index';\n *\n * const baseState = { foo: { bar: 'str' }, arr: [] };\n * const create = makeCreator({ enableAutoFreeze: true });\n * const state = create(\n *   baseState,\n *   (draft) => {\n *     draft.foo.bar = 'str2';\n *   },\n * );\n *\n * expect(state).toEqual({ foo: { bar: 'str2' }, arr: [] });\n * expect(state).not.toBe(baseState);\n * expect(state.foo).not.toBe(baseState.foo);\n * expect(state.arr).toBe(baseState.arr);\n * expect(Object.isFrozen(state)).toBeTruthy();\n * ```\n */\nconst makeCreator = (arg) => {\n    if (arg !== undefined &&\n        Object.prototype.toString.call(arg) !== '[object Object]') {\n        throw new Error(`Invalid options: ${String(arg)}, 'options' should be an object.`);\n    }\n    return function create(arg0, arg1, arg2) {\n        var _a, _b, _c;\n        if (typeof arg0 === 'function' && typeof arg1 !== 'function') {\n            return function (base, ...args) {\n                return create(base, (draft) => arg0.call(this, draft, ...args), arg1);\n            };\n        }\n        const base = arg0;\n        const mutate = arg1;\n        let options = arg2;\n        if (typeof arg1 !== 'function') {\n            options = arg1;\n        }\n        if (options !== undefined &&\n            Object.prototype.toString.call(options) !== '[object Object]') {\n            throw new Error(`Invalid options: ${options}, 'options' should be an object.`);\n        }\n        options = Object.assign(Object.assign({}, arg), options);\n        const state = isDraft(base) ? current(base) : base;\n        const mark = Array.isArray(options.mark)\n            ? ((value, types) => {\n                for (const mark of options.mark) {\n                    if (typeof mark !== 'function') {\n                        throw new Error(`Invalid mark: ${mark}, 'mark' should be a function.`);\n                    }\n                    const result = mark(value, types);\n                    if (result) {\n                        return result;\n                    }\n                }\n                return;\n            })\n            : options.mark;\n        const enablePatches = (_a = options.enablePatches) !== null && _a !== void 0 ? _a : false;\n        const strict = (_b = options.strict) !== null && _b !== void 0 ? _b : false;\n        const enableAutoFreeze = (_c = options.enableAutoFreeze) !== null && _c !== void 0 ? _c : false;\n        const _options = {\n            enableAutoFreeze,\n            mark,\n            strict,\n            enablePatches,\n        };\n        if (!isDraftable(state, _options) &&\n            typeof state === 'object' &&\n            state !== null) {\n            throw new Error(`Invalid base state: create() only supports plain objects, arrays, Set, Map or using mark() to mark the state as immutable.`);\n        }\n        const [draft, finalize] = draftify(state, _options);\n        if (typeof arg1 !== 'function') {\n            if (!isDraftable(state, _options)) {\n                throw new Error(`Invalid base state: create() only supports plain objects, arrays, Set, Map or using mark() to mark the state as immutable.`);\n            }\n            return [draft, finalize];\n        }\n        let result;\n        try {\n            result = mutate(draft);\n        }\n        catch (error) {\n            revokeProxy(getProxyDraft(draft));\n            throw error;\n        }\n        const returnValue = (value) => {\n            const proxyDraft = getProxyDraft(draft);\n            if (!isDraft(value)) {\n                if (value !== undefined &&\n                    !isEqual(value, draft) &&\n                    (proxyDraft === null || proxyDraft === void 0 ? void 0 : proxyDraft.operated)) {\n                    throw new Error(`Either the value is returned as a new non-draft value, or only the draft is modified without returning any value.`);\n                }\n                const rawReturnValue = value === null || value === void 0 ? void 0 : value[RAW_RETURN_SYMBOL];\n                if (rawReturnValue) {\n                    const _value = rawReturnValue[0];\n                    if (_options.strict && typeof value === 'object' && value !== null) {\n                        handleReturnValue({\n                            rootDraft: proxyDraft,\n                            value,\n                            useRawReturn: true,\n                        });\n                    }\n                    return finalize([_value]);\n                }\n                if (value !== undefined) {\n                    if (typeof value === 'object' && value !== null) {\n                        handleReturnValue({ rootDraft: proxyDraft, value });\n                    }\n                    return finalize([value]);\n                }\n            }\n            if (value === draft || value === undefined) {\n                return finalize([]);\n            }\n            const returnedProxyDraft = getProxyDraft(value);\n            if (_options === returnedProxyDraft.options) {\n                if (returnedProxyDraft.operated) {\n                    throw new Error(`Cannot return a modified child draft.`);\n                }\n                return finalize([current(value)]);\n            }\n            return finalize([value]);\n        };\n        if (result instanceof Promise) {\n            return result.then(returnValue, (error) => {\n                revokeProxy(getProxyDraft(draft));\n                throw error;\n            });\n        }\n        return returnValue(result);\n    };\n};\n\n/**\n * `create(baseState, callback, options)` to create the next state\n *\n * ## Example\n *\n * ```ts\n * import { create } from '../index';\n *\n * const baseState = { foo: { bar: 'str' }, arr: [] };\n * const state = create(\n *   baseState,\n *   (draft) => {\n *     draft.foo.bar = 'str2';\n *   },\n * );\n *\n * expect(state).toEqual({ foo: { bar: 'str2' }, arr: [] });\n * expect(state).not.toBe(baseState);\n * expect(state.foo).not.toBe(baseState.foo);\n * expect(state.arr).toBe(baseState.arr);\n * ```\n */\nconst create = makeCreator();\n\n/**\n * `apply(state, patches)` to apply patches to state\n *\n * ## Example\n *\n * ```ts\n * import { create, apply } from '../index';\n *\n * const baseState = { foo: { bar: 'str' }, arr: [] };\n * const [state, patches] = create(\n *   baseState,\n *   (draft) => {\n *     draft.foo.bar = 'str2';\n *   },\n *   { enablePatches: true }\n * );\n * expect(state).toEqual({ foo: { bar: 'str2' }, arr: [] });\n * expect(patches).toEqual([{ op: 'replace', path: ['foo', 'bar'], value: 'str2' }]);\n * expect(state).toEqual(apply(baseState, patches));\n * ```\n */\nfunction apply(state, patches, applyOptions) {\n    let i;\n    for (i = patches.length - 1; i >= 0; i -= 1) {\n        const { value, op, path } = patches[i];\n        if ((!path.length && op === Operation.Replace) ||\n            (path === '' && op === Operation.Add)) {\n            state = value;\n            break;\n        }\n    }\n    if (i > -1) {\n        patches = patches.slice(i + 1);\n    }\n    const mutate = (draft) => {\n        patches.forEach((patch) => {\n            const { path: _path, op } = patch;\n            const path = unescapePath(_path);\n            let base = draft;\n            for (let index = 0; index < path.length - 1; index += 1) {\n                const parentType = getType(base);\n                let key = path[index];\n                if (typeof key !== 'string' && typeof key !== 'number') {\n                    key = String(key);\n                }\n                if (((parentType === 0 /* DraftType.Object */ ||\n                    parentType === 1 /* DraftType.Array */) &&\n                    (key === '__proto__' || key === 'constructor')) ||\n                    (typeof base === 'function' && key === 'prototype')) {\n                    throw new Error(`Patching reserved attributes like __proto__ and constructor is not allowed.`);\n                }\n                // use `index` in Set draft\n                base = get(parentType === 3 /* DraftType.Set */ ? Array.from(base) : base, key);\n                if (typeof base !== 'object') {\n                    throw new Error(`Cannot apply patch at '${path.join('/')}'.`);\n                }\n            }\n            const type = getType(base);\n            // ensure the original patch is not modified.\n            const value = deepClone(patch.value);\n            const key = path[path.length - 1];\n            switch (op) {\n                case Operation.Replace:\n                    switch (type) {\n                        case 2 /* DraftType.Map */:\n                            return base.set(key, value);\n                        case 3 /* DraftType.Set */:\n                            throw new Error(`Cannot apply replace patch to set.`);\n                        default:\n                            return (base[key] = value);\n                    }\n                case Operation.Add:\n                    switch (type) {\n                        case 1 /* DraftType.Array */:\n                            // If the \"-\" character is used to\n                            // index the end of the array (see [RFC6901](https://datatracker.ietf.org/doc/html/rfc6902)),\n                            // this has the effect of appending the value to the array.\n                            return key === '-'\n                                ? base.push(value)\n                                : base.splice(key, 0, value);\n                        case 2 /* DraftType.Map */:\n                            return base.set(key, value);\n                        case 3 /* DraftType.Set */:\n                            return base.add(value);\n                        default:\n                            return (base[key] = value);\n                    }\n                case Operation.Remove:\n                    switch (type) {\n                        case 1 /* DraftType.Array */:\n                            return base.splice(key, 1);\n                        case 2 /* DraftType.Map */:\n                            return base.delete(key);\n                        case 3 /* DraftType.Set */:\n                            return base.delete(patch.value);\n                        default:\n                            return delete base[key];\n                    }\n                default:\n                    throw new Error(`Unsupported patch operation: ${op}.`);\n            }\n        });\n    };\n    if (isDraft(state)) {\n        if (applyOptions !== undefined) {\n            throw new Error(`Cannot apply patches with options to a draft.`);\n        }\n        mutate(state);\n        return state;\n    }\n    return create(state, mutate, Object.assign(Object.assign({}, applyOptions), { enablePatches: false }));\n}\n\n/**\n * `original(draft)` to get original state in the draft mutation function.\n *\n * ## Example\n *\n * ```ts\n * import { create, original } from '../index';\n *\n * const baseState = { foo: { bar: 'str' }, arr: [] };\n * const state = create(\n *   baseState,\n *   (draft) => {\n *     draft.foo.bar = 'str2';\n *     expect(original(draft.foo)).toEqual({ bar: 'str' });\n *   }\n * );\n * ```\n */\nfunction original(target) {\n    const proxyDraft = getProxyDraft(target);\n    if (!proxyDraft) {\n        throw new Error(`original() is only used for a draft, parameter: ${target}`);\n    }\n    return proxyDraft.original;\n}\n\n/**\n * Use rawReturn() to wrap the return value to skip the draft check and thus improve performance.\n *\n * ## Example\n *\n * ```ts\n * import { create, rawReturn } from '../index';\n *\n * const baseState = { foo: { bar: 'str' }, arr: [] };\n * const state = create(\n *   baseState,\n *   (draft) => {\n *     return rawReturn(baseState);\n *   },\n * );\n * expect(state).toBe(baseState);\n * ```\n */\nfunction rawReturn(value) {\n    if (arguments.length === 0) {\n        throw new Error('rawReturn() must be called with a value.');\n    }\n    if (arguments.length > 1) {\n        throw new Error('rawReturn() must be called with one argument.');\n    }\n    if (value !== undefined &&\n        (typeof value !== 'object' || value === null)) {\n        console.warn('rawReturn() must be called with an object(including plain object, arrays, Set, Map, etc.) or `undefined`, other types do not need to be returned via rawReturn().');\n    }\n    return {\n        [RAW_RETURN_SYMBOL]: [value],\n    };\n}\n\nconst constructorString = Object.prototype.constructor.toString();\n/**\n * Check if the value is a simple object(No prototype chain object or iframe same-origin object),\n * support case: https://github.com/unadlib/mutative/issues/17\n */\nconst isSimpleObject = (value) => {\n    if (!value || typeof value !== 'object')\n        return false;\n    const prototype = Object.getPrototypeOf(value);\n    if (prototype === null) {\n        return true;\n    }\n    const constructor = Object.hasOwnProperty.call(prototype, 'constructor') &&\n        prototype.constructor;\n    if (constructor === Object)\n        return true;\n    return (typeof constructor === 'function' &&\n        Function.toString.call(constructor) === constructorString);\n};\nconst markSimpleObject = (value) => {\n    if (isSimpleObject(value)) {\n        return dataTypes.immutable;\n    }\n    return;\n};\n\n/**\n * Cast a value to an Draft type value.\n */\nfunction castDraft(value) {\n    return value;\n}\n/**\n * Cast a value to an Immutable type value.\n */\nfunction castImmutable(value) {\n    return value;\n}\n/**\n * Cast a value to an Mutable type value.\n */\nfunction castMutable(draft) {\n    return draft;\n}\n\nexport { apply, castDraft, castImmutable, castMutable, create, current, isDraft, isDraftable, makeCreator, markSimpleObject, original, rawReturn, unsafe };\n//# sourceMappingURL=mutative.esm.mjs.map\n","var util;\n(function (util) {\n    util.assertEqual = (val) => val;\n    function assertIs(_arg) { }\n    util.assertIs = assertIs;\n    function assertNever(_x) {\n        throw new Error();\n    }\n    util.assertNever = assertNever;\n    util.arrayToEnum = (items) => {\n        const obj = {};\n        for (const item of items) {\n            obj[item] = item;\n        }\n        return obj;\n    };\n    util.getValidEnumValues = (obj) => {\n        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== \"number\");\n        const filtered = {};\n        for (const k of validKeys) {\n            filtered[k] = obj[k];\n        }\n        return util.objectValues(filtered);\n    };\n    util.objectValues = (obj) => {\n        return util.objectKeys(obj).map(function (e) {\n            return obj[e];\n        });\n    };\n    util.objectKeys = typeof Object.keys === \"function\" // eslint-disable-line ban/ban\n        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban\n        : (object) => {\n            const keys = [];\n            for (const key in object) {\n                if (Object.prototype.hasOwnProperty.call(object, key)) {\n                    keys.push(key);\n                }\n            }\n            return keys;\n        };\n    util.find = (arr, checker) => {\n        for (const item of arr) {\n            if (checker(item))\n                return item;\n        }\n        return undefined;\n    };\n    util.isInteger = typeof Number.isInteger === \"function\"\n        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban\n        : (val) => typeof val === \"number\" && isFinite(val) && Math.floor(val) === val;\n    function joinValues(array, separator = \" | \") {\n        return array\n            .map((val) => (typeof val === \"string\" ? `'${val}'` : val))\n            .join(separator);\n    }\n    util.joinValues = joinValues;\n    util.jsonStringifyReplacer = (_, value) => {\n        if (typeof value === \"bigint\") {\n            return value.toString();\n        }\n        return value;\n    };\n})(util || (util = {}));\nvar objectUtil;\n(function (objectUtil) {\n    objectUtil.mergeShapes = (first, second) => {\n        return {\n            ...first,\n            ...second, // second overwrites first\n        };\n    };\n})(objectUtil || (objectUtil = {}));\nconst ZodParsedType = util.arrayToEnum([\n    \"string\",\n    \"nan\",\n    \"number\",\n    \"integer\",\n    \"float\",\n    \"boolean\",\n    \"date\",\n    \"bigint\",\n    \"symbol\",\n    \"function\",\n    \"undefined\",\n    \"null\",\n    \"array\",\n    \"object\",\n    \"unknown\",\n    \"promise\",\n    \"void\",\n    \"never\",\n    \"map\",\n    \"set\",\n]);\nconst getParsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"undefined\":\n            return ZodParsedType.undefined;\n        case \"string\":\n            return ZodParsedType.string;\n        case \"number\":\n            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n        case \"boolean\":\n            return ZodParsedType.boolean;\n        case \"function\":\n            return ZodParsedType.function;\n        case \"bigint\":\n            return ZodParsedType.bigint;\n        case \"symbol\":\n            return ZodParsedType.symbol;\n        case \"object\":\n            if (Array.isArray(data)) {\n                return ZodParsedType.array;\n            }\n            if (data === null) {\n                return ZodParsedType.null;\n            }\n            if (data.then &&\n                typeof data.then === \"function\" &&\n                data.catch &&\n                typeof data.catch === \"function\") {\n                return ZodParsedType.promise;\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return ZodParsedType.map;\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return ZodParsedType.set;\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return ZodParsedType.date;\n            }\n            return ZodParsedType.object;\n        default:\n            return ZodParsedType.unknown;\n    }\n};\n\nconst ZodIssueCode = util.arrayToEnum([\n    \"invalid_type\",\n    \"invalid_literal\",\n    \"custom\",\n    \"invalid_union\",\n    \"invalid_union_discriminator\",\n    \"invalid_enum_value\",\n    \"unrecognized_keys\",\n    \"invalid_arguments\",\n    \"invalid_return_type\",\n    \"invalid_date\",\n    \"invalid_string\",\n    \"too_small\",\n    \"too_big\",\n    \"invalid_intersection_types\",\n    \"not_multiple_of\",\n    \"not_finite\",\n]);\nconst quotelessJson = (obj) => {\n    const json = JSON.stringify(obj, null, 2);\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nclass ZodError extends Error {\n    get errors() {\n        return this.issues;\n    }\n    constructor(issues) {\n        super();\n        this.issues = [];\n        this.addIssue = (sub) => {\n            this.issues = [...this.issues, sub];\n        };\n        this.addIssues = (subs = []) => {\n            this.issues = [...this.issues, ...subs];\n        };\n        const actualProto = new.target.prototype;\n        if (Object.setPrototypeOf) {\n            // eslint-disable-next-line ban/ban\n            Object.setPrototypeOf(this, actualProto);\n        }\n        else {\n            this.__proto__ = actualProto;\n        }\n        this.name = \"ZodError\";\n        this.issues = issues;\n    }\n    format(_mapper) {\n        const mapper = _mapper ||\n            function (issue) {\n                return issue.message;\n            };\n        const fieldErrors = { _errors: [] };\n        const processError = (error) => {\n            for (const issue of error.issues) {\n                if (issue.code === \"invalid_union\") {\n                    issue.unionErrors.map(processError);\n                }\n                else if (issue.code === \"invalid_return_type\") {\n                    processError(issue.returnTypeError);\n                }\n                else if (issue.code === \"invalid_arguments\") {\n                    processError(issue.argumentsError);\n                }\n                else if (issue.path.length === 0) {\n                    fieldErrors._errors.push(mapper(issue));\n                }\n                else {\n                    let curr = fieldErrors;\n                    let i = 0;\n                    while (i < issue.path.length) {\n                        const el = issue.path[i];\n                        const terminal = i === issue.path.length - 1;\n                        if (!terminal) {\n                            curr[el] = curr[el] || { _errors: [] };\n                            // if (typeof el === \"string\") {\n                            //   curr[el] = curr[el] || { _errors: [] };\n                            // } else if (typeof el === \"number\") {\n                            //   const errorArray: any = [];\n                            //   errorArray._errors = [];\n                            //   curr[el] = curr[el] || errorArray;\n                            // }\n                        }\n                        else {\n                            curr[el] = curr[el] || { _errors: [] };\n                            curr[el]._errors.push(mapper(issue));\n                        }\n                        curr = curr[el];\n                        i++;\n                    }\n                }\n            }\n        };\n        processError(this);\n        return fieldErrors;\n    }\n    static assert(value) {\n        if (!(value instanceof ZodError)) {\n            throw new Error(`Not a ZodError: ${value}`);\n        }\n    }\n    toString() {\n        return this.message;\n    }\n    get message() {\n        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\n    }\n    get isEmpty() {\n        return this.issues.length === 0;\n    }\n    flatten(mapper = (issue) => issue.message) {\n        const fieldErrors = {};\n        const formErrors = [];\n        for (const sub of this.issues) {\n            if (sub.path.length > 0) {\n                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];\n                fieldErrors[sub.path[0]].push(mapper(sub));\n            }\n            else {\n                formErrors.push(mapper(sub));\n            }\n        }\n        return { formErrors, fieldErrors };\n    }\n    get formErrors() {\n        return this.flatten();\n    }\n}\nZodError.create = (issues) => {\n    const error = new ZodError(issues);\n    return error;\n};\n\nconst errorMap = (issue, _ctx) => {\n    let message;\n    switch (issue.code) {\n        case ZodIssueCode.invalid_type:\n            if (issue.received === ZodParsedType.undefined) {\n                message = \"Required\";\n            }\n            else {\n                message = `Expected ${issue.expected}, received ${issue.received}`;\n            }\n            break;\n        case ZodIssueCode.invalid_literal:\n            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;\n            break;\n        case ZodIssueCode.unrecognized_keys:\n            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, \", \")}`;\n            break;\n        case ZodIssueCode.invalid_union:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_union_discriminator:\n            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;\n            break;\n        case ZodIssueCode.invalid_enum_value:\n            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;\n            break;\n        case ZodIssueCode.invalid_arguments:\n            message = `Invalid function arguments`;\n            break;\n        case ZodIssueCode.invalid_return_type:\n            message = `Invalid function return type`;\n            break;\n        case ZodIssueCode.invalid_date:\n            message = `Invalid date`;\n            break;\n        case ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n                if (\"includes\" in issue.validation) {\n                    message = `Invalid input: must include \"${issue.validation.includes}\"`;\n                    if (typeof issue.validation.position === \"number\") {\n                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n                    }\n                }\n                else if (\"startsWith\" in issue.validation) {\n                    message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n                }\n                else if (\"endsWith\" in issue.validation) {\n                    message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n                }\n                else {\n                    util.assertNever(issue.validation);\n                }\n            }\n            else if (issue.validation !== \"regex\") {\n                message = `Invalid ${issue.validation}`;\n            }\n            else {\n                message = \"Invalid\";\n            }\n            break;\n        case ZodIssueCode.too_small:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${new Date(Number(issue.minimum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.too_big:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"bigint\")\n                message = `BigInt must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `smaller than or equal to`\n                        : `smaller than`} ${new Date(Number(issue.maximum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.custom:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_intersection_types:\n            message = `Intersection results could not be merged`;\n            break;\n        case ZodIssueCode.not_multiple_of:\n            message = `Number must be a multiple of ${issue.multipleOf}`;\n            break;\n        case ZodIssueCode.not_finite:\n            message = \"Number must be finite\";\n            break;\n        default:\n            message = _ctx.defaultError;\n            util.assertNever(issue);\n    }\n    return { message };\n};\n\nlet overrideErrorMap = errorMap;\nfunction setErrorMap(map) {\n    overrideErrorMap = map;\n}\nfunction getErrorMap() {\n    return overrideErrorMap;\n}\n\nconst makeIssue = (params) => {\n    const { data, path, errorMaps, issueData } = params;\n    const fullPath = [...path, ...(issueData.path || [])];\n    const fullIssue = {\n        ...issueData,\n        path: fullPath,\n    };\n    if (issueData.message !== undefined) {\n        return {\n            ...issueData,\n            path: fullPath,\n            message: issueData.message,\n        };\n    }\n    let errorMessage = \"\";\n    const maps = errorMaps\n        .filter((m) => !!m)\n        .slice()\n        .reverse();\n    for (const map of maps) {\n        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\n    }\n    return {\n        ...issueData,\n        path: fullPath,\n        message: errorMessage,\n    };\n};\nconst EMPTY_PATH = [];\nfunction addIssueToContext(ctx, issueData) {\n    const overrideMap = getErrorMap();\n    const issue = makeIssue({\n        issueData: issueData,\n        data: ctx.data,\n        path: ctx.path,\n        errorMaps: [\n            ctx.common.contextualErrorMap, // contextual error map is first priority\n            ctx.schemaErrorMap, // then schema-bound map if available\n            overrideMap, // then global override map\n            overrideMap === errorMap ? undefined : errorMap, // then global default map\n        ].filter((x) => !!x),\n    });\n    ctx.common.issues.push(issue);\n}\nclass ParseStatus {\n    constructor() {\n        this.value = \"valid\";\n    }\n    dirty() {\n        if (this.value === \"valid\")\n            this.value = \"dirty\";\n    }\n    abort() {\n        if (this.value !== \"aborted\")\n            this.value = \"aborted\";\n    }\n    static mergeArray(status, results) {\n        const arrayValue = [];\n        for (const s of results) {\n            if (s.status === \"aborted\")\n                return INVALID;\n            if (s.status === \"dirty\")\n                status.dirty();\n            arrayValue.push(s.value);\n        }\n        return { status: status.value, value: arrayValue };\n    }\n    static async mergeObjectAsync(status, pairs) {\n        const syncPairs = [];\n        for (const pair of pairs) {\n            const key = await pair.key;\n            const value = await pair.value;\n            syncPairs.push({\n                key,\n                value,\n            });\n        }\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n    }\n    static mergeObjectSync(status, pairs) {\n        const finalObject = {};\n        for (const pair of pairs) {\n            const { key, value } = pair;\n            if (key.status === \"aborted\")\n                return INVALID;\n            if (value.status === \"aborted\")\n                return INVALID;\n            if (key.status === \"dirty\")\n                status.dirty();\n            if (value.status === \"dirty\")\n                status.dirty();\n            if (key.value !== \"__proto__\" &&\n                (typeof value.value !== \"undefined\" || pair.alwaysSet)) {\n                finalObject[key.value] = value.value;\n            }\n        }\n        return { status: status.value, value: finalObject };\n    }\n}\nconst INVALID = Object.freeze({\n    status: \"aborted\",\n});\nconst DIRTY = (value) => ({ status: \"dirty\", value });\nconst OK = (value) => ({ status: \"valid\", value });\nconst isAborted = (x) => x.status === \"aborted\";\nconst isDirty = (x) => x.status === \"dirty\";\nconst isValid = (x) => x.status === \"valid\";\nconst isAsync = (x) => typeof Promise !== \"undefined\" && x instanceof Promise;\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nvar errorUtil;\n(function (errorUtil) {\n    errorUtil.errToObj = (message) => typeof message === \"string\" ? { message } : message || {};\n    errorUtil.toString = (message) => typeof message === \"string\" ? message : message === null || message === void 0 ? void 0 : message.message;\n})(errorUtil || (errorUtil = {}));\n\nvar _ZodEnum_cache, _ZodNativeEnum_cache;\nclass ParseInputLazyPath {\n    constructor(parent, value, path, key) {\n        this._cachedPath = [];\n        this.parent = parent;\n        this.data = value;\n        this._path = path;\n        this._key = key;\n    }\n    get path() {\n        if (!this._cachedPath.length) {\n            if (this._key instanceof Array) {\n                this._cachedPath.push(...this._path, ...this._key);\n            }\n            else {\n                this._cachedPath.push(...this._path, this._key);\n            }\n        }\n        return this._cachedPath;\n    }\n}\nconst handleResult = (ctx, result) => {\n    if (isValid(result)) {\n        return { success: true, data: result.value };\n    }\n    else {\n        if (!ctx.common.issues.length) {\n            throw new Error(\"Validation failed but no issues detected.\");\n        }\n        return {\n            success: false,\n            get error() {\n                if (this._error)\n                    return this._error;\n                const error = new ZodError(ctx.common.issues);\n                this._error = error;\n                return this._error;\n            },\n        };\n    }\n};\nfunction processCreateParams(params) {\n    if (!params)\n        return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    }\n    if (errorMap)\n        return { errorMap: errorMap, description };\n    const customMap = (iss, ctx) => {\n        var _a, _b;\n        const { message } = params;\n        if (iss.code === \"invalid_enum_value\") {\n            return { message: message !== null && message !== void 0 ? message : ctx.defaultError };\n        }\n        if (typeof ctx.data === \"undefined\") {\n            return { message: (_a = message !== null && message !== void 0 ? message : required_error) !== null && _a !== void 0 ? _a : ctx.defaultError };\n        }\n        if (iss.code !== \"invalid_type\")\n            return { message: ctx.defaultError };\n        return { message: (_b = message !== null && message !== void 0 ? message : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError };\n    };\n    return { errorMap: customMap, description };\n}\nclass ZodType {\n    get description() {\n        return this._def.description;\n    }\n    _getType(input) {\n        return getParsedType(input.data);\n    }\n    _getOrReturnCtx(input, ctx) {\n        return (ctx || {\n            common: input.parent.common,\n            data: input.data,\n            parsedType: getParsedType(input.data),\n            schemaErrorMap: this._def.errorMap,\n            path: input.path,\n            parent: input.parent,\n        });\n    }\n    _processInputParams(input) {\n        return {\n            status: new ParseStatus(),\n            ctx: {\n                common: input.parent.common,\n                data: input.data,\n                parsedType: getParsedType(input.data),\n                schemaErrorMap: this._def.errorMap,\n                path: input.path,\n                parent: input.parent,\n            },\n        };\n    }\n    _parseSync(input) {\n        const result = this._parse(input);\n        if (isAsync(result)) {\n            throw new Error(\"Synchronous parse encountered promise.\");\n        }\n        return result;\n    }\n    _parseAsync(input) {\n        const result = this._parse(input);\n        return Promise.resolve(result);\n    }\n    parse(data, params) {\n        const result = this.safeParse(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    safeParse(data, params) {\n        var _a;\n        const ctx = {\n            common: {\n                issues: [],\n                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const result = this._parseSync({ data, path: ctx.path, parent: ctx });\n        return handleResult(ctx, result);\n    }\n    \"~validate\"(data) {\n        var _a, _b;\n        const ctx = {\n            common: {\n                issues: [],\n                async: !!this[\"~standard\"].async,\n            },\n            path: [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        if (!this[\"~standard\"].async) {\n            try {\n                const result = this._parseSync({ data, path: [], parent: ctx });\n                return isValid(result)\n                    ? {\n                        value: result.value,\n                    }\n                    : {\n                        issues: ctx.common.issues,\n                    };\n            }\n            catch (err) {\n                if ((_b = (_a = err === null || err === void 0 ? void 0 : err.message) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.includes(\"encountered\")) {\n                    this[\"~standard\"].async = true;\n                }\n                ctx.common = {\n                    issues: [],\n                    async: true,\n                };\n            }\n        }\n        return this._parseAsync({ data, path: [], parent: ctx }).then((result) => isValid(result)\n            ? {\n                value: result.value,\n            }\n            : {\n                issues: ctx.common.issues,\n            });\n    }\n    async parseAsync(data, params) {\n        const result = await this.safeParseAsync(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    async safeParseAsync(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n                async: true,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });\n        const result = await (isAsync(maybeAsyncResult)\n            ? maybeAsyncResult\n            : Promise.resolve(maybeAsyncResult));\n        return handleResult(ctx, result);\n    }\n    refine(check, message) {\n        const getIssueProperties = (val) => {\n            if (typeof message === \"string\" || typeof message === \"undefined\") {\n                return { message };\n            }\n            else if (typeof message === \"function\") {\n                return message(val);\n            }\n            else {\n                return message;\n            }\n        };\n        return this._refinement((val, ctx) => {\n            const result = check(val);\n            const setError = () => ctx.addIssue({\n                code: ZodIssueCode.custom,\n                ...getIssueProperties(val),\n            });\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n                return result.then((data) => {\n                    if (!data) {\n                        setError();\n                        return false;\n                    }\n                    else {\n                        return true;\n                    }\n                });\n            }\n            if (!result) {\n                setError();\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    refinement(check, refinementData) {\n        return this._refinement((val, ctx) => {\n            if (!check(val)) {\n                ctx.addIssue(typeof refinementData === \"function\"\n                    ? refinementData(val, ctx)\n                    : refinementData);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    _refinement(refinement) {\n        return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"refinement\", refinement },\n        });\n    }\n    superRefine(refinement) {\n        return this._refinement(refinement);\n    }\n    constructor(def) {\n        /** Alias of safeParseAsync */\n        this.spa = this.safeParseAsync;\n        this._def = def;\n        this.parse = this.parse.bind(this);\n        this.safeParse = this.safeParse.bind(this);\n        this.parseAsync = this.parseAsync.bind(this);\n        this.safeParseAsync = this.safeParseAsync.bind(this);\n        this.spa = this.spa.bind(this);\n        this.refine = this.refine.bind(this);\n        this.refinement = this.refinement.bind(this);\n        this.superRefine = this.superRefine.bind(this);\n        this.optional = this.optional.bind(this);\n        this.nullable = this.nullable.bind(this);\n        this.nullish = this.nullish.bind(this);\n        this.array = this.array.bind(this);\n        this.promise = this.promise.bind(this);\n        this.or = this.or.bind(this);\n        this.and = this.and.bind(this);\n        this.transform = this.transform.bind(this);\n        this.brand = this.brand.bind(this);\n        this.default = this.default.bind(this);\n        this.catch = this.catch.bind(this);\n        this.describe = this.describe.bind(this);\n        this.pipe = this.pipe.bind(this);\n        this.readonly = this.readonly.bind(this);\n        this.isNullable = this.isNullable.bind(this);\n        this.isOptional = this.isOptional.bind(this);\n        this[\"~standard\"] = {\n            version: 1,\n            vendor: \"zod\",\n            validate: (data) => this[\"~validate\"](data),\n        };\n    }\n    optional() {\n        return ZodOptional.create(this, this._def);\n    }\n    nullable() {\n        return ZodNullable.create(this, this._def);\n    }\n    nullish() {\n        return this.nullable().optional();\n    }\n    array() {\n        return ZodArray.create(this);\n    }\n    promise() {\n        return ZodPromise.create(this, this._def);\n    }\n    or(option) {\n        return ZodUnion.create([this, option], this._def);\n    }\n    and(incoming) {\n        return ZodIntersection.create(this, incoming, this._def);\n    }\n    transform(transform) {\n        return new ZodEffects({\n            ...processCreateParams(this._def),\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"transform\", transform },\n        });\n    }\n    default(def) {\n        const defaultValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodDefault({\n            ...processCreateParams(this._def),\n            innerType: this,\n            defaultValue: defaultValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodDefault,\n        });\n    }\n    brand() {\n        return new ZodBranded({\n            typeName: ZodFirstPartyTypeKind.ZodBranded,\n            type: this,\n            ...processCreateParams(this._def),\n        });\n    }\n    catch(def) {\n        const catchValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodCatch({\n            ...processCreateParams(this._def),\n            innerType: this,\n            catchValue: catchValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodCatch,\n        });\n    }\n    describe(description) {\n        const This = this.constructor;\n        return new This({\n            ...this._def,\n            description,\n        });\n    }\n    pipe(target) {\n        return ZodPipeline.create(this, target);\n    }\n    readonly() {\n        return ZodReadonly.create(this);\n    }\n    isOptional() {\n        return this.safeParse(undefined).success;\n    }\n    isNullable() {\n        return this.safeParse(null).success;\n    }\n}\nconst cuidRegex = /^c[^\\s-]{8,}$/i;\nconst cuid2Regex = /^[0-9a-z]+$/;\nconst ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;\n// const uuidRegex =\n//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\nconst uuidRegex = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i;\nconst nanoidRegex = /^[a-z0-9_-]{21}$/i;\nconst jwtRegex = /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/;\nconst durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\\d+Y)|(?:[-+]?\\d+[.,]\\d+Y$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:(?:[-+]?\\d+W)|(?:[-+]?\\d+[.,]\\d+W$))?(?:(?:[-+]?\\d+D)|(?:[-+]?\\d+[.,]\\d+D$))?(?:T(?=[\\d+-])(?:(?:[-+]?\\d+H)|(?:[-+]?\\d+[.,]\\d+H$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:[-+]?\\d+(?:[.,]\\d+)?S)?)??$/;\n// from https://stackoverflow.com/a/46181/1550155\n// old version: too slow, didn't support unicode\n// const emailRegex = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i;\n//old email regex\n// const emailRegex = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{1,})[^-<>()[\\].,;:\\s@\"]$/i;\n// eslint-disable-next-line\n// const emailRegex =\n//   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;\n// const emailRegex =\n//   /^[a-zA-Z0-9\\.\\!\\#\\$\\%\\&\\'\\*\\+\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n// const emailRegex =\n//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/i;\nconst emailRegex = /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+\\-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;\n// const emailRegex =\n//   /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\\.[a-z0-9\\-]+)*$/i;\n// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression\nconst _emojiRegex = `^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$`;\nlet emojiRegex;\n// faster, simpler, safer\nconst ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;\nconst ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/(3[0-2]|[12]?[0-9])$/;\n// const ipv6Regex =\n// /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;\nconst ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;\nconst ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;\n// https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript\nconst base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n// https://base64.guru/standards/base64url\nconst base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;\n// simple\n// const dateRegexSource = `\\\\d{4}-\\\\d{2}-\\\\d{2}`;\n// no leap year validation\n// const dateRegexSource = `\\\\d{4}-((0[13578]|10|12)-31|(0[13-9]|1[0-2])-30|(0[1-9]|1[0-2])-(0[1-9]|1\\\\d|2\\\\d))`;\n// with leap year validation\nconst dateRegexSource = `((\\\\d\\\\d[2468][048]|\\\\d\\\\d[13579][26]|\\\\d\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\\\d|30)|(02)-(0[1-9]|1\\\\d|2[0-8])))`;\nconst dateRegex = new RegExp(`^${dateRegexSource}$`);\nfunction timeRegexSource(args) {\n    // let regex = `\\\\d{2}:\\\\d{2}:\\\\d{2}`;\n    let regex = `([01]\\\\d|2[0-3]):[0-5]\\\\d:[0-5]\\\\d`;\n    if (args.precision) {\n        regex = `${regex}\\\\.\\\\d{${args.precision}}`;\n    }\n    else if (args.precision == null) {\n        regex = `${regex}(\\\\.\\\\d+)?`;\n    }\n    return regex;\n}\nfunction timeRegex(args) {\n    return new RegExp(`^${timeRegexSource(args)}$`);\n}\n// Adapted from https://stackoverflow.com/a/3143231\nfunction datetimeRegex(args) {\n    let regex = `${dateRegexSource}T${timeRegexSource(args)}`;\n    const opts = [];\n    opts.push(args.local ? `Z?` : `Z`);\n    if (args.offset)\n        opts.push(`([+-]\\\\d{2}:?\\\\d{2})`);\n    regex = `${regex}(${opts.join(\"|\")})`;\n    return new RegExp(`^${regex}$`);\n}\nfunction isValidIP(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4Regex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6Regex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nfunction isValidJWT(jwt, alg) {\n    if (!jwtRegex.test(jwt))\n        return false;\n    try {\n        const [header] = jwt.split(\".\");\n        // Convert base64url to base64\n        const base64 = header\n            .replace(/-/g, \"+\")\n            .replace(/_/g, \"/\")\n            .padEnd(header.length + ((4 - (header.length % 4)) % 4), \"=\");\n        const decoded = JSON.parse(atob(base64));\n        if (typeof decoded !== \"object\" || decoded === null)\n            return false;\n        if (!decoded.typ || !decoded.alg)\n            return false;\n        if (alg && decoded.alg !== alg)\n            return false;\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nfunction isValidCidr(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4CidrRegex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6CidrRegex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nclass ZodString extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = String(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.string) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.string,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.length < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.length > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"length\") {\n                const tooBig = input.data.length > check.value;\n                const tooSmall = input.data.length < check.value;\n                if (tooBig || tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    if (tooBig) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_big,\n                            maximum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    else if (tooSmall) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_small,\n                            minimum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"email\") {\n                if (!emailRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"email\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"emoji\") {\n                if (!emojiRegex) {\n                    emojiRegex = new RegExp(_emojiRegex, \"u\");\n                }\n                if (!emojiRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"emoji\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"uuid\") {\n                if (!uuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"uuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"nanoid\") {\n                if (!nanoidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"nanoid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid\") {\n                if (!cuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid2\") {\n                if (!cuid2Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid2\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ulid\") {\n                if (!ulidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ulid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"url\") {\n                try {\n                    new URL(input.data);\n                }\n                catch (_a) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"regex\") {\n                check.regex.lastIndex = 0;\n                const testResult = check.regex.test(input.data);\n                if (!testResult) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"regex\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"trim\") {\n                input.data = input.data.trim();\n            }\n            else if (check.kind === \"includes\") {\n                if (!input.data.includes(check.value, check.position)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { includes: check.value, position: check.position },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"toLowerCase\") {\n                input.data = input.data.toLowerCase();\n            }\n            else if (check.kind === \"toUpperCase\") {\n                input.data = input.data.toUpperCase();\n            }\n            else if (check.kind === \"startsWith\") {\n                if (!input.data.startsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { startsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"endsWith\") {\n                if (!input.data.endsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { endsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"datetime\") {\n                const regex = datetimeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"datetime\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"date\") {\n                const regex = dateRegex;\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"date\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"time\") {\n                const regex = timeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"time\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"duration\") {\n                if (!durationRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"duration\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ip\") {\n                if (!isValidIP(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ip\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"jwt\") {\n                if (!isValidJWT(input.data, check.alg)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"jwt\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cidr\") {\n                if (!isValidCidr(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cidr\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64\") {\n                if (!base64Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64url\") {\n                if (!base64urlRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _regex(regex, validation, message) {\n        return this.refinement((data) => regex.test(data), {\n            validation,\n            code: ZodIssueCode.invalid_string,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    _addCheck(check) {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    email(message) {\n        return this._addCheck({ kind: \"email\", ...errorUtil.errToObj(message) });\n    }\n    url(message) {\n        return this._addCheck({ kind: \"url\", ...errorUtil.errToObj(message) });\n    }\n    emoji(message) {\n        return this._addCheck({ kind: \"emoji\", ...errorUtil.errToObj(message) });\n    }\n    uuid(message) {\n        return this._addCheck({ kind: \"uuid\", ...errorUtil.errToObj(message) });\n    }\n    nanoid(message) {\n        return this._addCheck({ kind: \"nanoid\", ...errorUtil.errToObj(message) });\n    }\n    cuid(message) {\n        return this._addCheck({ kind: \"cuid\", ...errorUtil.errToObj(message) });\n    }\n    cuid2(message) {\n        return this._addCheck({ kind: \"cuid2\", ...errorUtil.errToObj(message) });\n    }\n    ulid(message) {\n        return this._addCheck({ kind: \"ulid\", ...errorUtil.errToObj(message) });\n    }\n    base64(message) {\n        return this._addCheck({ kind: \"base64\", ...errorUtil.errToObj(message) });\n    }\n    base64url(message) {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return this._addCheck({\n            kind: \"base64url\",\n            ...errorUtil.errToObj(message),\n        });\n    }\n    jwt(options) {\n        return this._addCheck({ kind: \"jwt\", ...errorUtil.errToObj(options) });\n    }\n    ip(options) {\n        return this._addCheck({ kind: \"ip\", ...errorUtil.errToObj(options) });\n    }\n    cidr(options) {\n        return this._addCheck({ kind: \"cidr\", ...errorUtil.errToObj(options) });\n    }\n    datetime(options) {\n        var _a, _b;\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"datetime\",\n                precision: null,\n                offset: false,\n                local: false,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"datetime\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,\n            local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    date(message) {\n        return this._addCheck({ kind: \"date\", message });\n    }\n    time(options) {\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"time\",\n                precision: null,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"time\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    duration(message) {\n        return this._addCheck({ kind: \"duration\", ...errorUtil.errToObj(message) });\n    }\n    regex(regex, message) {\n        return this._addCheck({\n            kind: \"regex\",\n            regex: regex,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    includes(value, options) {\n        return this._addCheck({\n            kind: \"includes\",\n            value: value,\n            position: options === null || options === void 0 ? void 0 : options.position,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    startsWith(value, message) {\n        return this._addCheck({\n            kind: \"startsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    endsWith(value, message) {\n        return this._addCheck({\n            kind: \"endsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    min(minLength, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    max(maxLength, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    length(len, message) {\n        return this._addCheck({\n            kind: \"length\",\n            value: len,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    /**\n     * Equivalent to `.min(1)`\n     */\n    nonempty(message) {\n        return this.min(1, errorUtil.errToObj(message));\n    }\n    trim() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"trim\" }],\n        });\n    }\n    toLowerCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toLowerCase\" }],\n        });\n    }\n    toUpperCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toUpperCase\" }],\n        });\n    }\n    get isDatetime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"datetime\");\n    }\n    get isDate() {\n        return !!this._def.checks.find((ch) => ch.kind === \"date\");\n    }\n    get isTime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"time\");\n    }\n    get isDuration() {\n        return !!this._def.checks.find((ch) => ch.kind === \"duration\");\n    }\n    get isEmail() {\n        return !!this._def.checks.find((ch) => ch.kind === \"email\");\n    }\n    get isURL() {\n        return !!this._def.checks.find((ch) => ch.kind === \"url\");\n    }\n    get isEmoji() {\n        return !!this._def.checks.find((ch) => ch.kind === \"emoji\");\n    }\n    get isUUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\n    }\n    get isNANOID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"nanoid\");\n    }\n    get isCUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\n    }\n    get isCUID2() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid2\");\n    }\n    get isULID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ulid\");\n    }\n    get isIP() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ip\");\n    }\n    get isCIDR() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cidr\");\n    }\n    get isBase64() {\n        return !!this._def.checks.find((ch) => ch.kind === \"base64\");\n    }\n    get isBase64url() {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return !!this._def.checks.find((ch) => ch.kind === \"base64url\");\n    }\n    get minLength() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxLength() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodString.create = (params) => {\n    var _a;\n    return new ZodString({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodString,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\n// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\nfunction floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return (valInt % stepInt) / Math.pow(10, decCount);\n}\nclass ZodNumber extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n        this.step = this.multipleOf;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Number(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.number) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.number,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"int\") {\n                if (!util.isInteger(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_type,\n                        expected: \"integer\",\n                        received: \"float\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (floatSafeRemainder(input.data, check.value) !== 0) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"finite\") {\n                if (!Number.isFinite(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_finite,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    int(message) {\n        return this._addCheck({\n            kind: \"int\",\n            message: errorUtil.toString(message),\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value: value,\n            message: errorUtil.toString(message),\n        });\n    }\n    finite(message) {\n        return this._addCheck({\n            kind: \"finite\",\n            message: errorUtil.toString(message),\n        });\n    }\n    safe(message) {\n        return this._addCheck({\n            kind: \"min\",\n            inclusive: true,\n            value: Number.MIN_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        })._addCheck({\n            kind: \"max\",\n            inclusive: true,\n            value: Number.MAX_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n    get isInt() {\n        return !!this._def.checks.find((ch) => ch.kind === \"int\" ||\n            (ch.kind === \"multipleOf\" && util.isInteger(ch.value)));\n    }\n    get isFinite() {\n        let max = null, min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"finite\" ||\n                ch.kind === \"int\" ||\n                ch.kind === \"multipleOf\") {\n                return true;\n            }\n            else if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n            else if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return Number.isFinite(min) && Number.isFinite(max);\n    }\n}\nZodNumber.create = (params) => {\n    return new ZodNumber({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodNumber,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBigInt extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            try {\n                input.data = BigInt(input.data);\n            }\n            catch (_a) {\n                return this._getInvalidInput(input);\n            }\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.bigint) {\n            return this._getInvalidInput(input);\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        type: \"bigint\",\n                        minimum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        type: \"bigint\",\n                        maximum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (input.data % check.value !== BigInt(0)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _getInvalidInput(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.bigint,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodBigInt.create = (params) => {\n    var _a;\n    return new ZodBigInt({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodBigInt,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBoolean extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Boolean(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.boolean) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.boolean,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodBoolean.create = (params) => {\n    return new ZodBoolean({\n        typeName: ZodFirstPartyTypeKind.ZodBoolean,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDate extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = new Date(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.date) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.date,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (isNaN(input.data.getTime())) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_date,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.getTime() < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        minimum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.getTime() > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        maximum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: new Date(input.data.getTime()),\n        };\n    }\n    _addCheck(check) {\n        return new ZodDate({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    min(minDate, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    max(maxDate, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    get minDate() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min != null ? new Date(min) : null;\n    }\n    get maxDate() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max != null ? new Date(max) : null;\n    }\n}\nZodDate.create = (params) => {\n    return new ZodDate({\n        checks: [],\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        typeName: ZodFirstPartyTypeKind.ZodDate,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSymbol extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.symbol) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.symbol,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodSymbol.create = (params) => {\n    return new ZodSymbol({\n        typeName: ZodFirstPartyTypeKind.ZodSymbol,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUndefined extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.undefined,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodUndefined.create = (params) => {\n    return new ZodUndefined({\n        typeName: ZodFirstPartyTypeKind.ZodUndefined,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNull extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.null) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.null,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodNull.create = (params) => {\n    return new ZodNull({\n        typeName: ZodFirstPartyTypeKind.ZodNull,\n        ...processCreateParams(params),\n    });\n};\nclass ZodAny extends ZodType {\n    constructor() {\n        super(...arguments);\n        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.\n        this._any = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodAny.create = (params) => {\n    return new ZodAny({\n        typeName: ZodFirstPartyTypeKind.ZodAny,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnknown extends ZodType {\n    constructor() {\n        super(...arguments);\n        // required\n        this._unknown = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodUnknown.create = (params) => {\n    return new ZodUnknown({\n        typeName: ZodFirstPartyTypeKind.ZodUnknown,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNever extends ZodType {\n    _parse(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.never,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n}\nZodNever.create = (params) => {\n    return new ZodNever({\n        typeName: ZodFirstPartyTypeKind.ZodNever,\n        ...processCreateParams(params),\n    });\n};\nclass ZodVoid extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.void,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodVoid.create = (params) => {\n    return new ZodVoid({\n        typeName: ZodFirstPartyTypeKind.ZodVoid,\n        ...processCreateParams(params),\n    });\n};\nclass ZodArray extends ZodType {\n    _parse(input) {\n        const { ctx, status } = this._processInputParams(input);\n        const def = this._def;\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (def.exactLength !== null) {\n            const tooBig = ctx.data.length > def.exactLength.value;\n            const tooSmall = ctx.data.length < def.exactLength.value;\n            if (tooBig || tooSmall) {\n                addIssueToContext(ctx, {\n                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,\n                    minimum: (tooSmall ? def.exactLength.value : undefined),\n                    maximum: (tooBig ? def.exactLength.value : undefined),\n                    type: \"array\",\n                    inclusive: true,\n                    exact: true,\n                    message: def.exactLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.minLength !== null) {\n            if (ctx.data.length < def.minLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxLength !== null) {\n            if (ctx.data.length > def.maxLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.all([...ctx.data].map((item, i) => {\n                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n            })).then((result) => {\n                return ParseStatus.mergeArray(status, result);\n            });\n        }\n        const result = [...ctx.data].map((item, i) => {\n            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n        });\n        return ParseStatus.mergeArray(status, result);\n    }\n    get element() {\n        return this._def.type;\n    }\n    min(minLength, message) {\n        return new ZodArray({\n            ...this._def,\n            minLength: { value: minLength, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxLength, message) {\n        return new ZodArray({\n            ...this._def,\n            maxLength: { value: maxLength, message: errorUtil.toString(message) },\n        });\n    }\n    length(len, message) {\n        return new ZodArray({\n            ...this._def,\n            exactLength: { value: len, message: errorUtil.toString(message) },\n        });\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodArray.create = (schema, params) => {\n    return new ZodArray({\n        type: schema,\n        minLength: null,\n        maxLength: null,\n        exactLength: null,\n        typeName: ZodFirstPartyTypeKind.ZodArray,\n        ...processCreateParams(params),\n    });\n};\nfunction deepPartialify(schema) {\n    if (schema instanceof ZodObject) {\n        const newShape = {};\n        for (const key in schema.shape) {\n            const fieldSchema = schema.shape[key];\n            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n        }\n        return new ZodObject({\n            ...schema._def,\n            shape: () => newShape,\n        });\n    }\n    else if (schema instanceof ZodArray) {\n        return new ZodArray({\n            ...schema._def,\n            type: deepPartialify(schema.element),\n        });\n    }\n    else if (schema instanceof ZodOptional) {\n        return ZodOptional.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodNullable) {\n        return ZodNullable.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodTuple) {\n        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));\n    }\n    else {\n        return schema;\n    }\n}\nclass ZodObject extends ZodType {\n    constructor() {\n        super(...arguments);\n        this._cached = null;\n        /**\n         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.\n         * If you want to pass through unknown properties, use `.passthrough()` instead.\n         */\n        this.nonstrict = this.passthrough;\n        // extend<\n        //   Augmentation extends ZodRawShape,\n        //   NewOutput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_output\"]\n        //       : k extends keyof Output\n        //       ? Output[k]\n        //       : never;\n        //   }>,\n        //   NewInput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_input\"]\n        //       : k extends keyof Input\n        //       ? Input[k]\n        //       : never;\n        //   }>\n        // >(\n        //   augmentation: Augmentation\n        // ): ZodObject<\n        //   extendShape<T, Augmentation>,\n        //   UnknownKeys,\n        //   Catchall,\n        //   NewOutput,\n        //   NewInput\n        // > {\n        //   return new ZodObject({\n        //     ...this._def,\n        //     shape: () => ({\n        //       ...this._def.shape(),\n        //       ...augmentation,\n        //     }),\n        //   }) as any;\n        // }\n        /**\n         * @deprecated Use `.extend` instead\n         *  */\n        this.augment = this.extend;\n    }\n    _getCached() {\n        if (this._cached !== null)\n            return this._cached;\n        const shape = this._def.shape();\n        const keys = util.objectKeys(shape);\n        return (this._cached = { shape, keys });\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.object) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const { status, ctx } = this._processInputParams(input);\n        const { shape, keys: shapeKeys } = this._getCached();\n        const extraKeys = [];\n        if (!(this._def.catchall instanceof ZodNever &&\n            this._def.unknownKeys === \"strip\")) {\n            for (const key in ctx.data) {\n                if (!shapeKeys.includes(key)) {\n                    extraKeys.push(key);\n                }\n            }\n        }\n        const pairs = [];\n        for (const key of shapeKeys) {\n            const keyValidator = shape[key];\n            const value = ctx.data[key];\n            pairs.push({\n                key: { status: \"valid\", value: key },\n                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (this._def.catchall instanceof ZodNever) {\n            const unknownKeys = this._def.unknownKeys;\n            if (unknownKeys === \"passthrough\") {\n                for (const key of extraKeys) {\n                    pairs.push({\n                        key: { status: \"valid\", value: key },\n                        value: { status: \"valid\", value: ctx.data[key] },\n                    });\n                }\n            }\n            else if (unknownKeys === \"strict\") {\n                if (extraKeys.length > 0) {\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.unrecognized_keys,\n                        keys: extraKeys,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (unknownKeys === \"strip\") ;\n            else {\n                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n            }\n        }\n        else {\n            // run catchall validation\n            const catchall = this._def.catchall;\n            for (const key of extraKeys) {\n                const value = ctx.data[key];\n                pairs.push({\n                    key: { status: \"valid\", value: key },\n                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)\n                    ),\n                    alwaysSet: key in ctx.data,\n                });\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.resolve()\n                .then(async () => {\n                const syncPairs = [];\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    syncPairs.push({\n                        key,\n                        value,\n                        alwaysSet: pair.alwaysSet,\n                    });\n                }\n                return syncPairs;\n            })\n                .then((syncPairs) => {\n                return ParseStatus.mergeObjectSync(status, syncPairs);\n            });\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get shape() {\n        return this._def.shape();\n    }\n    strict(message) {\n        errorUtil.errToObj;\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strict\",\n            ...(message !== undefined\n                ? {\n                    errorMap: (issue, ctx) => {\n                        var _a, _b, _c, _d;\n                        const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;\n                        if (issue.code === \"unrecognized_keys\")\n                            return {\n                                message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError,\n                            };\n                        return {\n                            message: defaultError,\n                        };\n                    },\n                }\n                : {}),\n        });\n    }\n    strip() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strip\",\n        });\n    }\n    passthrough() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"passthrough\",\n        });\n    }\n    // const AugmentFactory =\n    //   <Def extends ZodObjectDef>(def: Def) =>\n    //   <Augmentation extends ZodRawShape>(\n    //     augmentation: Augmentation\n    //   ): ZodObject<\n    //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n    //     Def[\"unknownKeys\"],\n    //     Def[\"catchall\"]\n    //   > => {\n    //     return new ZodObject({\n    //       ...def,\n    //       shape: () => ({\n    //         ...def.shape(),\n    //         ...augmentation,\n    //       }),\n    //     }) as any;\n    //   };\n    extend(augmentation) {\n        return new ZodObject({\n            ...this._def,\n            shape: () => ({\n                ...this._def.shape(),\n                ...augmentation,\n            }),\n        });\n    }\n    /**\n     * Prior to zod@1.0.12 there was a bug in the\n     * inferred type of merged objects. Please\n     * upgrade if you are experiencing issues.\n     */\n    merge(merging) {\n        const merged = new ZodObject({\n            unknownKeys: merging._def.unknownKeys,\n            catchall: merging._def.catchall,\n            shape: () => ({\n                ...this._def.shape(),\n                ...merging._def.shape(),\n            }),\n            typeName: ZodFirstPartyTypeKind.ZodObject,\n        });\n        return merged;\n    }\n    // merge<\n    //   Incoming extends AnyZodObject,\n    //   Augmentation extends Incoming[\"shape\"],\n    //   NewOutput extends {\n    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_output\"]\n    //       : k extends keyof Output\n    //       ? Output[k]\n    //       : never;\n    //   },\n    //   NewInput extends {\n    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_input\"]\n    //       : k extends keyof Input\n    //       ? Input[k]\n    //       : never;\n    //   }\n    // >(\n    //   merging: Incoming\n    // ): ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"],\n    //   NewOutput,\n    //   NewInput\n    // > {\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    setKey(key, schema) {\n        return this.augment({ [key]: schema });\n    }\n    // merge<Incoming extends AnyZodObject>(\n    //   merging: Incoming\n    // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n    // ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"]\n    // > {\n    //   // const mergedShape = objectUtil.mergeShapes(\n    //   //   this._def.shape(),\n    //   //   merging._def.shape()\n    //   // );\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    catchall(index) {\n        return new ZodObject({\n            ...this._def,\n            catchall: index,\n        });\n    }\n    pick(mask) {\n        const shape = {};\n        util.objectKeys(mask).forEach((key) => {\n            if (mask[key] && this.shape[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    omit(mask) {\n        const shape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (!mask[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    /**\n     * @deprecated\n     */\n    deepPartial() {\n        return deepPartialify(this);\n    }\n    partial(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            const fieldSchema = this.shape[key];\n            if (mask && !mask[key]) {\n                newShape[key] = fieldSchema;\n            }\n            else {\n                newShape[key] = fieldSchema.optional();\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    required(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (mask && !mask[key]) {\n                newShape[key] = this.shape[key];\n            }\n            else {\n                const fieldSchema = this.shape[key];\n                let newField = fieldSchema;\n                while (newField instanceof ZodOptional) {\n                    newField = newField._def.innerType;\n                }\n                newShape[key] = newField;\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    keyof() {\n        return createZodEnum(util.objectKeys(this.shape));\n    }\n}\nZodObject.create = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.strictCreate = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strict\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.lazycreate = (shape, params) => {\n    return new ZodObject({\n        shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const options = this._def.options;\n        function handleResults(results) {\n            // return first issue-free validation if it exists\n            for (const result of results) {\n                if (result.result.status === \"valid\") {\n                    return result.result;\n                }\n            }\n            for (const result of results) {\n                if (result.result.status === \"dirty\") {\n                    // add issues from dirty option\n                    ctx.common.issues.push(...result.ctx.common.issues);\n                    return result.result;\n                }\n            }\n            // return invalid\n            const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return Promise.all(options.map(async (option) => {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                return {\n                    result: await option._parseAsync({\n                        data: ctx.data,\n                        path: ctx.path,\n                        parent: childCtx,\n                    }),\n                    ctx: childCtx,\n                };\n            })).then(handleResults);\n        }\n        else {\n            let dirty = undefined;\n            const issues = [];\n            for (const option of options) {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                const result = option._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: childCtx,\n                });\n                if (result.status === \"valid\") {\n                    return result;\n                }\n                else if (result.status === \"dirty\" && !dirty) {\n                    dirty = { result, ctx: childCtx };\n                }\n                if (childCtx.common.issues.length) {\n                    issues.push(childCtx.common.issues);\n                }\n            }\n            if (dirty) {\n                ctx.common.issues.push(...dirty.ctx.common.issues);\n                return dirty.result;\n            }\n            const unionErrors = issues.map((issues) => new ZodError(issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n    }\n    get options() {\n        return this._def.options;\n    }\n}\nZodUnion.create = (types, params) => {\n    return new ZodUnion({\n        options: types,\n        typeName: ZodFirstPartyTypeKind.ZodUnion,\n        ...processCreateParams(params),\n    });\n};\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n//////////                                 //////////\n//////////      ZodDiscriminatedUnion      //////////\n//////////                                 //////////\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\nconst getDiscriminator = (type) => {\n    if (type instanceof ZodLazy) {\n        return getDiscriminator(type.schema);\n    }\n    else if (type instanceof ZodEffects) {\n        return getDiscriminator(type.innerType());\n    }\n    else if (type instanceof ZodLiteral) {\n        return [type.value];\n    }\n    else if (type instanceof ZodEnum) {\n        return type.options;\n    }\n    else if (type instanceof ZodNativeEnum) {\n        // eslint-disable-next-line ban/ban\n        return util.objectValues(type.enum);\n    }\n    else if (type instanceof ZodDefault) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else if (type instanceof ZodUndefined) {\n        return [undefined];\n    }\n    else if (type instanceof ZodNull) {\n        return [null];\n    }\n    else if (type instanceof ZodOptional) {\n        return [undefined, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodNullable) {\n        return [null, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodBranded) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodReadonly) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodCatch) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else {\n        return [];\n    }\n};\nclass ZodDiscriminatedUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const discriminator = this.discriminator;\n        const discriminatorValue = ctx.data[discriminator];\n        const option = this.optionsMap.get(discriminatorValue);\n        if (!option) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union_discriminator,\n                options: Array.from(this.optionsMap.keys()),\n                path: [discriminator],\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return option._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n        else {\n            return option._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n    }\n    get discriminator() {\n        return this._def.discriminator;\n    }\n    get options() {\n        return this._def.options;\n    }\n    get optionsMap() {\n        return this._def.optionsMap;\n    }\n    /**\n     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n     * have a different value for each object in the union.\n     * @param discriminator the name of the discriminator property\n     * @param types an array of object schemas\n     * @param params\n     */\n    static create(discriminator, options, params) {\n        // Get all the valid discriminator values\n        const optionsMap = new Map();\n        // try {\n        for (const type of options) {\n            const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n            if (!discriminatorValues.length) {\n                throw new Error(`A discriminator value for key \\`${discriminator}\\` could not be extracted from all schema options`);\n            }\n            for (const value of discriminatorValues) {\n                if (optionsMap.has(value)) {\n                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\n                }\n                optionsMap.set(value, type);\n            }\n        }\n        return new ZodDiscriminatedUnion({\n            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n            discriminator,\n            options,\n            optionsMap,\n            ...processCreateParams(params),\n        });\n    }\n}\nfunction mergeValues(a, b) {\n    const aType = getParsedType(a);\n    const bType = getParsedType(b);\n    if (a === b) {\n        return { valid: true, data: a };\n    }\n    else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\n        const bKeys = util.objectKeys(b);\n        const sharedKeys = util\n            .objectKeys(a)\n            .filter((key) => bKeys.indexOf(key) !== -1);\n        const newObj = { ...a, ...b };\n        for (const key of sharedKeys) {\n            const sharedValue = mergeValues(a[key], b[key]);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newObj[key] = sharedValue.data;\n        }\n        return { valid: true, data: newObj };\n    }\n    else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\n        if (a.length !== b.length) {\n            return { valid: false };\n        }\n        const newArray = [];\n        for (let index = 0; index < a.length; index++) {\n            const itemA = a[index];\n            const itemB = b[index];\n            const sharedValue = mergeValues(itemA, itemB);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newArray.push(sharedValue.data);\n        }\n        return { valid: true, data: newArray };\n    }\n    else if (aType === ZodParsedType.date &&\n        bType === ZodParsedType.date &&\n        +a === +b) {\n        return { valid: true, data: a };\n    }\n    else {\n        return { valid: false };\n    }\n}\nclass ZodIntersection extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const handleParsed = (parsedLeft, parsedRight) => {\n            if (isAborted(parsedLeft) || isAborted(parsedRight)) {\n                return INVALID;\n            }\n            const merged = mergeValues(parsedLeft.value, parsedRight.value);\n            if (!merged.valid) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.invalid_intersection_types,\n                });\n                return INVALID;\n            }\n            if (isDirty(parsedLeft) || isDirty(parsedRight)) {\n                status.dirty();\n            }\n            return { status: status.value, value: merged.data };\n        };\n        if (ctx.common.async) {\n            return Promise.all([\n                this._def.left._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n                this._def.right._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n            ]).then(([left, right]) => handleParsed(left, right));\n        }\n        else {\n            return handleParsed(this._def.left._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }), this._def.right._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }));\n        }\n    }\n}\nZodIntersection.create = (left, right, params) => {\n    return new ZodIntersection({\n        left: left,\n        right: right,\n        typeName: ZodFirstPartyTypeKind.ZodIntersection,\n        ...processCreateParams(params),\n    });\n};\nclass ZodTuple extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (ctx.data.length < this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_small,\n                minimum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            return INVALID;\n        }\n        const rest = this._def.rest;\n        if (!rest && ctx.data.length > this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_big,\n                maximum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            status.dirty();\n        }\n        const items = [...ctx.data]\n            .map((item, itemIndex) => {\n            const schema = this._def.items[itemIndex] || this._def.rest;\n            if (!schema)\n                return null;\n            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n        })\n            .filter((x) => !!x); // filter nulls\n        if (ctx.common.async) {\n            return Promise.all(items).then((results) => {\n                return ParseStatus.mergeArray(status, results);\n            });\n        }\n        else {\n            return ParseStatus.mergeArray(status, items);\n        }\n    }\n    get items() {\n        return this._def.items;\n    }\n    rest(rest) {\n        return new ZodTuple({\n            ...this._def,\n            rest,\n        });\n    }\n}\nZodTuple.create = (schemas, params) => {\n    if (!Array.isArray(schemas)) {\n        throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n    }\n    return new ZodTuple({\n        items: schemas,\n        typeName: ZodFirstPartyTypeKind.ZodTuple,\n        rest: null,\n        ...processCreateParams(params),\n    });\n};\nclass ZodRecord extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const pairs = [];\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        for (const key in ctx.data) {\n            pairs.push({\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (ctx.common.async) {\n            return ParseStatus.mergeObjectAsync(status, pairs);\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get element() {\n        return this._def.valueType;\n    }\n    static create(first, second, third) {\n        if (second instanceof ZodType) {\n            return new ZodRecord({\n                keyType: first,\n                valueType: second,\n                typeName: ZodFirstPartyTypeKind.ZodRecord,\n                ...processCreateParams(third),\n            });\n        }\n        return new ZodRecord({\n            keyType: ZodString.create(),\n            valueType: first,\n            typeName: ZodFirstPartyTypeKind.ZodRecord,\n            ...processCreateParams(second),\n        });\n    }\n}\nclass ZodMap extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.map) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.map,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        const pairs = [...ctx.data.entries()].map(([key, value], index) => {\n            return {\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, \"key\"])),\n                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, \"value\"])),\n            };\n        });\n        if (ctx.common.async) {\n            const finalMap = new Map();\n            return Promise.resolve().then(async () => {\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    if (key.status === \"aborted\" || value.status === \"aborted\") {\n                        return INVALID;\n                    }\n                    if (key.status === \"dirty\" || value.status === \"dirty\") {\n                        status.dirty();\n                    }\n                    finalMap.set(key.value, value.value);\n                }\n                return { status: status.value, value: finalMap };\n            });\n        }\n        else {\n            const finalMap = new Map();\n            for (const pair of pairs) {\n                const key = pair.key;\n                const value = pair.value;\n                if (key.status === \"aborted\" || value.status === \"aborted\") {\n                    return INVALID;\n                }\n                if (key.status === \"dirty\" || value.status === \"dirty\") {\n                    status.dirty();\n                }\n                finalMap.set(key.value, value.value);\n            }\n            return { status: status.value, value: finalMap };\n        }\n    }\n}\nZodMap.create = (keyType, valueType, params) => {\n    return new ZodMap({\n        valueType,\n        keyType,\n        typeName: ZodFirstPartyTypeKind.ZodMap,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSet extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.set) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.set,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const def = this._def;\n        if (def.minSize !== null) {\n            if (ctx.data.size < def.minSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minSize.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxSize !== null) {\n            if (ctx.data.size > def.maxSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxSize.message,\n                });\n                status.dirty();\n            }\n        }\n        const valueType = this._def.valueType;\n        function finalizeSet(elements) {\n            const parsedSet = new Set();\n            for (const element of elements) {\n                if (element.status === \"aborted\")\n                    return INVALID;\n                if (element.status === \"dirty\")\n                    status.dirty();\n                parsedSet.add(element.value);\n            }\n            return { status: status.value, value: parsedSet };\n        }\n        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n        if (ctx.common.async) {\n            return Promise.all(elements).then((elements) => finalizeSet(elements));\n        }\n        else {\n            return finalizeSet(elements);\n        }\n    }\n    min(minSize, message) {\n        return new ZodSet({\n            ...this._def,\n            minSize: { value: minSize, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxSize, message) {\n        return new ZodSet({\n            ...this._def,\n            maxSize: { value: maxSize, message: errorUtil.toString(message) },\n        });\n    }\n    size(size, message) {\n        return this.min(size, message).max(size, message);\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodSet.create = (valueType, params) => {\n    return new ZodSet({\n        valueType,\n        minSize: null,\n        maxSize: null,\n        typeName: ZodFirstPartyTypeKind.ZodSet,\n        ...processCreateParams(params),\n    });\n};\nclass ZodFunction extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.validate = this.implement;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.function) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.function,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        function makeArgsIssue(args, error) {\n            return makeIssue({\n                data: args,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_arguments,\n                    argumentsError: error,\n                },\n            });\n        }\n        function makeReturnsIssue(returns, error) {\n            return makeIssue({\n                data: returns,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_return_type,\n                    returnTypeError: error,\n                },\n            });\n        }\n        const params = { errorMap: ctx.common.contextualErrorMap };\n        const fn = ctx.data;\n        if (this._def.returns instanceof ZodPromise) {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(async function (...args) {\n                const error = new ZodError([]);\n                const parsedArgs = await me._def.args\n                    .parseAsync(args, params)\n                    .catch((e) => {\n                    error.addIssue(makeArgsIssue(args, e));\n                    throw error;\n                });\n                const result = await Reflect.apply(fn, this, parsedArgs);\n                const parsedReturns = await me._def.returns._def.type\n                    .parseAsync(result, params)\n                    .catch((e) => {\n                    error.addIssue(makeReturnsIssue(result, e));\n                    throw error;\n                });\n                return parsedReturns;\n            });\n        }\n        else {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(function (...args) {\n                const parsedArgs = me._def.args.safeParse(args, params);\n                if (!parsedArgs.success) {\n                    throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);\n                }\n                const result = Reflect.apply(fn, this, parsedArgs.data);\n                const parsedReturns = me._def.returns.safeParse(result, params);\n                if (!parsedReturns.success) {\n                    throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);\n                }\n                return parsedReturns.data;\n            });\n        }\n    }\n    parameters() {\n        return this._def.args;\n    }\n    returnType() {\n        return this._def.returns;\n    }\n    args(...items) {\n        return new ZodFunction({\n            ...this._def,\n            args: ZodTuple.create(items).rest(ZodUnknown.create()),\n        });\n    }\n    returns(returnType) {\n        return new ZodFunction({\n            ...this._def,\n            returns: returnType,\n        });\n    }\n    implement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    strictImplement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    static create(args, returns, params) {\n        return new ZodFunction({\n            args: (args\n                ? args\n                : ZodTuple.create([]).rest(ZodUnknown.create())),\n            returns: returns || ZodUnknown.create(),\n            typeName: ZodFirstPartyTypeKind.ZodFunction,\n            ...processCreateParams(params),\n        });\n    }\n}\nclass ZodLazy extends ZodType {\n    get schema() {\n        return this._def.getter();\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const lazySchema = this._def.getter();\n        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });\n    }\n}\nZodLazy.create = (getter, params) => {\n    return new ZodLazy({\n        getter: getter,\n        typeName: ZodFirstPartyTypeKind.ZodLazy,\n        ...processCreateParams(params),\n    });\n};\nclass ZodLiteral extends ZodType {\n    _parse(input) {\n        if (input.data !== this._def.value) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_literal,\n                expected: this._def.value,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n    get value() {\n        return this._def.value;\n    }\n}\nZodLiteral.create = (value, params) => {\n    return new ZodLiteral({\n        value: value,\n        typeName: ZodFirstPartyTypeKind.ZodLiteral,\n        ...processCreateParams(params),\n    });\n};\nfunction createZodEnum(values, params) {\n    return new ZodEnum({\n        values,\n        typeName: ZodFirstPartyTypeKind.ZodEnum,\n        ...processCreateParams(params),\n    });\n}\nclass ZodEnum extends ZodType {\n    constructor() {\n        super(...arguments);\n        _ZodEnum_cache.set(this, void 0);\n    }\n    _parse(input) {\n        if (typeof input.data !== \"string\") {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (!__classPrivateFieldGet(this, _ZodEnum_cache, \"f\")) {\n            __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values), \"f\");\n        }\n        if (!__classPrivateFieldGet(this, _ZodEnum_cache, \"f\").has(input.data)) {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get options() {\n        return this._def.values;\n    }\n    get enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Values() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    extract(values, newDef = this._def) {\n        return ZodEnum.create(values, {\n            ...this._def,\n            ...newDef,\n        });\n    }\n    exclude(values, newDef = this._def) {\n        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {\n            ...this._def,\n            ...newDef,\n        });\n    }\n}\n_ZodEnum_cache = new WeakMap();\nZodEnum.create = createZodEnum;\nclass ZodNativeEnum extends ZodType {\n    constructor() {\n        super(...arguments);\n        _ZodNativeEnum_cache.set(this, void 0);\n    }\n    _parse(input) {\n        const nativeEnumValues = util.getValidEnumValues(this._def.values);\n        const ctx = this._getOrReturnCtx(input);\n        if (ctx.parsedType !== ZodParsedType.string &&\n            ctx.parsedType !== ZodParsedType.number) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, \"f\")) {\n            __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util.getValidEnumValues(this._def.values)), \"f\");\n        }\n        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, \"f\").has(input.data)) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get enum() {\n        return this._def.values;\n    }\n}\n_ZodNativeEnum_cache = new WeakMap();\nZodNativeEnum.create = (values, params) => {\n    return new ZodNativeEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n        ...processCreateParams(params),\n    });\n};\nclass ZodPromise extends ZodType {\n    unwrap() {\n        return this._def.type;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.promise &&\n            ctx.common.async === false) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.promise,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const promisified = ctx.parsedType === ZodParsedType.promise\n            ? ctx.data\n            : Promise.resolve(ctx.data);\n        return OK(promisified.then((data) => {\n            return this._def.type.parseAsync(data, {\n                path: ctx.path,\n                errorMap: ctx.common.contextualErrorMap,\n            });\n        }));\n    }\n}\nZodPromise.create = (schema, params) => {\n    return new ZodPromise({\n        type: schema,\n        typeName: ZodFirstPartyTypeKind.ZodPromise,\n        ...processCreateParams(params),\n    });\n};\nclass ZodEffects extends ZodType {\n    innerType() {\n        return this._def.schema;\n    }\n    sourceType() {\n        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects\n            ? this._def.schema.sourceType()\n            : this._def.schema;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const effect = this._def.effect || null;\n        const checkCtx = {\n            addIssue: (arg) => {\n                addIssueToContext(ctx, arg);\n                if (arg.fatal) {\n                    status.abort();\n                }\n                else {\n                    status.dirty();\n                }\n            },\n            get path() {\n                return ctx.path;\n            },\n        };\n        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n        if (effect.type === \"preprocess\") {\n            const processed = effect.transform(ctx.data, checkCtx);\n            if (ctx.common.async) {\n                return Promise.resolve(processed).then(async (processed) => {\n                    if (status.value === \"aborted\")\n                        return INVALID;\n                    const result = await this._def.schema._parseAsync({\n                        data: processed,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                    if (result.status === \"aborted\")\n                        return INVALID;\n                    if (result.status === \"dirty\")\n                        return DIRTY(result.value);\n                    if (status.value === \"dirty\")\n                        return DIRTY(result.value);\n                    return result;\n                });\n            }\n            else {\n                if (status.value === \"aborted\")\n                    return INVALID;\n                const result = this._def.schema._parseSync({\n                    data: processed,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (result.status === \"aborted\")\n                    return INVALID;\n                if (result.status === \"dirty\")\n                    return DIRTY(result.value);\n                if (status.value === \"dirty\")\n                    return DIRTY(result.value);\n                return result;\n            }\n        }\n        if (effect.type === \"refinement\") {\n            const executeRefinement = (acc) => {\n                const result = effect.refinement(acc, checkCtx);\n                if (ctx.common.async) {\n                    return Promise.resolve(result);\n                }\n                if (result instanceof Promise) {\n                    throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n                }\n                return acc;\n            };\n            if (ctx.common.async === false) {\n                const inner = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inner.status === \"aborted\")\n                    return INVALID;\n                if (inner.status === \"dirty\")\n                    status.dirty();\n                // return value is ignored\n                executeRefinement(inner.value);\n                return { status: status.value, value: inner.value };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((inner) => {\n                    if (inner.status === \"aborted\")\n                        return INVALID;\n                    if (inner.status === \"dirty\")\n                        status.dirty();\n                    return executeRefinement(inner.value).then(() => {\n                        return { status: status.value, value: inner.value };\n                    });\n                });\n            }\n        }\n        if (effect.type === \"transform\") {\n            if (ctx.common.async === false) {\n                const base = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (!isValid(base))\n                    return base;\n                const result = effect.transform(base.value, checkCtx);\n                if (result instanceof Promise) {\n                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n                }\n                return { status: status.value, value: result };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((base) => {\n                    if (!isValid(base))\n                        return base;\n                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));\n                });\n            }\n        }\n        util.assertNever(effect);\n    }\n}\nZodEffects.create = (schema, effect, params) => {\n    return new ZodEffects({\n        schema,\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        effect,\n        ...processCreateParams(params),\n    });\n};\nZodEffects.createWithPreprocess = (preprocess, schema, params) => {\n    return new ZodEffects({\n        schema,\n        effect: { type: \"preprocess\", transform: preprocess },\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        ...processCreateParams(params),\n    });\n};\nclass ZodOptional extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.undefined) {\n            return OK(undefined);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodOptional.create = (type, params) => {\n    return new ZodOptional({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNullable extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.null) {\n            return OK(null);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodNullable.create = (type, params) => {\n    return new ZodNullable({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodNullable,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDefault extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        let data = ctx.data;\n        if (ctx.parsedType === ZodParsedType.undefined) {\n            data = this._def.defaultValue();\n        }\n        return this._def.innerType._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    removeDefault() {\n        return this._def.innerType;\n    }\n}\nZodDefault.create = (type, params) => {\n    return new ZodDefault({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodDefault,\n        defaultValue: typeof params.default === \"function\"\n            ? params.default\n            : () => params.default,\n        ...processCreateParams(params),\n    });\n};\nclass ZodCatch extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        // newCtx is used to not collect issues from inner types in ctx\n        const newCtx = {\n            ...ctx,\n            common: {\n                ...ctx.common,\n                issues: [],\n            },\n        };\n        const result = this._def.innerType._parse({\n            data: newCtx.data,\n            path: newCtx.path,\n            parent: {\n                ...newCtx,\n            },\n        });\n        if (isAsync(result)) {\n            return result.then((result) => {\n                return {\n                    status: \"valid\",\n                    value: result.status === \"valid\"\n                        ? result.value\n                        : this._def.catchValue({\n                            get error() {\n                                return new ZodError(newCtx.common.issues);\n                            },\n                            input: newCtx.data,\n                        }),\n                };\n            });\n        }\n        else {\n            return {\n                status: \"valid\",\n                value: result.status === \"valid\"\n                    ? result.value\n                    : this._def.catchValue({\n                        get error() {\n                            return new ZodError(newCtx.common.issues);\n                        },\n                        input: newCtx.data,\n                    }),\n            };\n        }\n    }\n    removeCatch() {\n        return this._def.innerType;\n    }\n}\nZodCatch.create = (type, params) => {\n    return new ZodCatch({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodCatch,\n        catchValue: typeof params.catch === \"function\" ? params.catch : () => params.catch,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNaN extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.nan) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.nan,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n}\nZodNaN.create = (params) => {\n    return new ZodNaN({\n        typeName: ZodFirstPartyTypeKind.ZodNaN,\n        ...processCreateParams(params),\n    });\n};\nconst BRAND = Symbol(\"zod_brand\");\nclass ZodBranded extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    unwrap() {\n        return this._def.type;\n    }\n}\nclass ZodPipeline extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.common.async) {\n            const handleAsync = async () => {\n                const inResult = await this._def.in._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inResult.status === \"aborted\")\n                    return INVALID;\n                if (inResult.status === \"dirty\") {\n                    status.dirty();\n                    return DIRTY(inResult.value);\n                }\n                else {\n                    return this._def.out._parseAsync({\n                        data: inResult.value,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                }\n            };\n            return handleAsync();\n        }\n        else {\n            const inResult = this._def.in._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n            if (inResult.status === \"aborted\")\n                return INVALID;\n            if (inResult.status === \"dirty\") {\n                status.dirty();\n                return {\n                    status: \"dirty\",\n                    value: inResult.value,\n                };\n            }\n            else {\n                return this._def.out._parseSync({\n                    data: inResult.value,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n            }\n        }\n    }\n    static create(a, b) {\n        return new ZodPipeline({\n            in: a,\n            out: b,\n            typeName: ZodFirstPartyTypeKind.ZodPipeline,\n        });\n    }\n}\nclass ZodReadonly extends ZodType {\n    _parse(input) {\n        const result = this._def.innerType._parse(input);\n        const freeze = (data) => {\n            if (isValid(data)) {\n                data.value = Object.freeze(data.value);\n            }\n            return data;\n        };\n        return isAsync(result)\n            ? result.then((data) => freeze(data))\n            : freeze(result);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodReadonly.create = (type, params) => {\n    return new ZodReadonly({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodReadonly,\n        ...processCreateParams(params),\n    });\n};\n////////////////////////////////////////\n////////////////////////////////////////\n//////////                    //////////\n//////////      z.custom      //////////\n//////////                    //////////\n////////////////////////////////////////\n////////////////////////////////////////\nfunction cleanParams(params, data) {\n    const p = typeof params === \"function\"\n        ? params(data)\n        : typeof params === \"string\"\n            ? { message: params }\n            : params;\n    const p2 = typeof p === \"string\" ? { message: p } : p;\n    return p2;\n}\nfunction custom(check, _params = {}, \n/**\n * @deprecated\n *\n * Pass `fatal` into the params object instead:\n *\n * ```ts\n * z.string().custom((val) => val.length > 5, { fatal: false })\n * ```\n *\n */\nfatal) {\n    if (check)\n        return ZodAny.create().superRefine((data, ctx) => {\n            var _a, _b;\n            const r = check(data);\n            if (r instanceof Promise) {\n                return r.then((r) => {\n                    var _a, _b;\n                    if (!r) {\n                        const params = cleanParams(_params, data);\n                        const _fatal = (_b = (_a = params.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n                        ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n                    }\n                });\n            }\n            if (!r) {\n                const params = cleanParams(_params, data);\n                const _fatal = (_b = (_a = params.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n                ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n            }\n            return;\n        });\n    return ZodAny.create();\n}\nconst late = {\n    object: ZodObject.lazycreate,\n};\nvar ZodFirstPartyTypeKind;\n(function (ZodFirstPartyTypeKind) {\n    ZodFirstPartyTypeKind[\"ZodString\"] = \"ZodString\";\n    ZodFirstPartyTypeKind[\"ZodNumber\"] = \"ZodNumber\";\n    ZodFirstPartyTypeKind[\"ZodNaN\"] = \"ZodNaN\";\n    ZodFirstPartyTypeKind[\"ZodBigInt\"] = \"ZodBigInt\";\n    ZodFirstPartyTypeKind[\"ZodBoolean\"] = \"ZodBoolean\";\n    ZodFirstPartyTypeKind[\"ZodDate\"] = \"ZodDate\";\n    ZodFirstPartyTypeKind[\"ZodSymbol\"] = \"ZodSymbol\";\n    ZodFirstPartyTypeKind[\"ZodUndefined\"] = \"ZodUndefined\";\n    ZodFirstPartyTypeKind[\"ZodNull\"] = \"ZodNull\";\n    ZodFirstPartyTypeKind[\"ZodAny\"] = \"ZodAny\";\n    ZodFirstPartyTypeKind[\"ZodUnknown\"] = \"ZodUnknown\";\n    ZodFirstPartyTypeKind[\"ZodNever\"] = \"ZodNever\";\n    ZodFirstPartyTypeKind[\"ZodVoid\"] = \"ZodVoid\";\n    ZodFirstPartyTypeKind[\"ZodArray\"] = \"ZodArray\";\n    ZodFirstPartyTypeKind[\"ZodObject\"] = \"ZodObject\";\n    ZodFirstPartyTypeKind[\"ZodUnion\"] = \"ZodUnion\";\n    ZodFirstPartyTypeKind[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n    ZodFirstPartyTypeKind[\"ZodIntersection\"] = \"ZodIntersection\";\n    ZodFirstPartyTypeKind[\"ZodTuple\"] = \"ZodTuple\";\n    ZodFirstPartyTypeKind[\"ZodRecord\"] = \"ZodRecord\";\n    ZodFirstPartyTypeKind[\"ZodMap\"] = \"ZodMap\";\n    ZodFirstPartyTypeKind[\"ZodSet\"] = \"ZodSet\";\n    ZodFirstPartyTypeKind[\"ZodFunction\"] = \"ZodFunction\";\n    ZodFirstPartyTypeKind[\"ZodLazy\"] = \"ZodLazy\";\n    ZodFirstPartyTypeKind[\"ZodLiteral\"] = \"ZodLiteral\";\n    ZodFirstPartyTypeKind[\"ZodEnum\"] = \"ZodEnum\";\n    ZodFirstPartyTypeKind[\"ZodEffects\"] = \"ZodEffects\";\n    ZodFirstPartyTypeKind[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n    ZodFirstPartyTypeKind[\"ZodOptional\"] = \"ZodOptional\";\n    ZodFirstPartyTypeKind[\"ZodNullable\"] = \"ZodNullable\";\n    ZodFirstPartyTypeKind[\"ZodDefault\"] = \"ZodDefault\";\n    ZodFirstPartyTypeKind[\"ZodCatch\"] = \"ZodCatch\";\n    ZodFirstPartyTypeKind[\"ZodPromise\"] = \"ZodPromise\";\n    ZodFirstPartyTypeKind[\"ZodBranded\"] = \"ZodBranded\";\n    ZodFirstPartyTypeKind[\"ZodPipeline\"] = \"ZodPipeline\";\n    ZodFirstPartyTypeKind[\"ZodReadonly\"] = \"ZodReadonly\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\nconst instanceOfType = (\n// const instanceOfType = <T extends new (...args: any[]) => any>(\ncls, params = {\n    message: `Input not instance of ${cls.name}`,\n}) => custom((data) => data instanceof cls, params);\nconst stringType = ZodString.create;\nconst numberType = ZodNumber.create;\nconst nanType = ZodNaN.create;\nconst bigIntType = ZodBigInt.create;\nconst booleanType = ZodBoolean.create;\nconst dateType = ZodDate.create;\nconst symbolType = ZodSymbol.create;\nconst undefinedType = ZodUndefined.create;\nconst nullType = ZodNull.create;\nconst anyType = ZodAny.create;\nconst unknownType = ZodUnknown.create;\nconst neverType = ZodNever.create;\nconst voidType = ZodVoid.create;\nconst arrayType = ZodArray.create;\nconst objectType = ZodObject.create;\nconst strictObjectType = ZodObject.strictCreate;\nconst unionType = ZodUnion.create;\nconst discriminatedUnionType = ZodDiscriminatedUnion.create;\nconst intersectionType = ZodIntersection.create;\nconst tupleType = ZodTuple.create;\nconst recordType = ZodRecord.create;\nconst mapType = ZodMap.create;\nconst setType = ZodSet.create;\nconst functionType = ZodFunction.create;\nconst lazyType = ZodLazy.create;\nconst literalType = ZodLiteral.create;\nconst enumType = ZodEnum.create;\nconst nativeEnumType = ZodNativeEnum.create;\nconst promiseType = ZodPromise.create;\nconst effectsType = ZodEffects.create;\nconst optionalType = ZodOptional.create;\nconst nullableType = ZodNullable.create;\nconst preprocessType = ZodEffects.createWithPreprocess;\nconst pipelineType = ZodPipeline.create;\nconst ostring = () => stringType().optional();\nconst onumber = () => numberType().optional();\nconst oboolean = () => booleanType().optional();\nconst coerce = {\n    string: ((arg) => ZodString.create({ ...arg, coerce: true })),\n    number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),\n    boolean: ((arg) => ZodBoolean.create({\n        ...arg,\n        coerce: true,\n    })),\n    bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),\n    date: ((arg) => ZodDate.create({ ...arg, coerce: true })),\n};\nconst NEVER = INVALID;\n\nvar z = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    defaultErrorMap: errorMap,\n    setErrorMap: setErrorMap,\n    getErrorMap: getErrorMap,\n    makeIssue: makeIssue,\n    EMPTY_PATH: EMPTY_PATH,\n    addIssueToContext: addIssueToContext,\n    ParseStatus: ParseStatus,\n    INVALID: INVALID,\n    DIRTY: DIRTY,\n    OK: OK,\n    isAborted: isAborted,\n    isDirty: isDirty,\n    isValid: isValid,\n    isAsync: isAsync,\n    get util () { return util; },\n    get objectUtil () { return objectUtil; },\n    ZodParsedType: ZodParsedType,\n    getParsedType: getParsedType,\n    ZodType: ZodType,\n    datetimeRegex: datetimeRegex,\n    ZodString: ZodString,\n    ZodNumber: ZodNumber,\n    ZodBigInt: ZodBigInt,\n    ZodBoolean: ZodBoolean,\n    ZodDate: ZodDate,\n    ZodSymbol: ZodSymbol,\n    ZodUndefined: ZodUndefined,\n    ZodNull: ZodNull,\n    ZodAny: ZodAny,\n    ZodUnknown: ZodUnknown,\n    ZodNever: ZodNever,\n    ZodVoid: ZodVoid,\n    ZodArray: ZodArray,\n    ZodObject: ZodObject,\n    ZodUnion: ZodUnion,\n    ZodDiscriminatedUnion: ZodDiscriminatedUnion,\n    ZodIntersection: ZodIntersection,\n    ZodTuple: ZodTuple,\n    ZodRecord: ZodRecord,\n    ZodMap: ZodMap,\n    ZodSet: ZodSet,\n    ZodFunction: ZodFunction,\n    ZodLazy: ZodLazy,\n    ZodLiteral: ZodLiteral,\n    ZodEnum: ZodEnum,\n    ZodNativeEnum: ZodNativeEnum,\n    ZodPromise: ZodPromise,\n    ZodEffects: ZodEffects,\n    ZodTransformer: ZodEffects,\n    ZodOptional: ZodOptional,\n    ZodNullable: ZodNullable,\n    ZodDefault: ZodDefault,\n    ZodCatch: ZodCatch,\n    ZodNaN: ZodNaN,\n    BRAND: BRAND,\n    ZodBranded: ZodBranded,\n    ZodPipeline: ZodPipeline,\n    ZodReadonly: ZodReadonly,\n    custom: custom,\n    Schema: ZodType,\n    ZodSchema: ZodType,\n    late: late,\n    get ZodFirstPartyTypeKind () { return ZodFirstPartyTypeKind; },\n    coerce: coerce,\n    any: anyType,\n    array: arrayType,\n    bigint: bigIntType,\n    boolean: booleanType,\n    date: dateType,\n    discriminatedUnion: discriminatedUnionType,\n    effect: effectsType,\n    'enum': enumType,\n    'function': functionType,\n    'instanceof': instanceOfType,\n    intersection: intersectionType,\n    lazy: lazyType,\n    literal: literalType,\n    map: mapType,\n    nan: nanType,\n    nativeEnum: nativeEnumType,\n    never: neverType,\n    'null': nullType,\n    nullable: nullableType,\n    number: numberType,\n    object: objectType,\n    oboolean: oboolean,\n    onumber: onumber,\n    optional: optionalType,\n    ostring: ostring,\n    pipeline: pipelineType,\n    preprocess: preprocessType,\n    promise: promiseType,\n    record: recordType,\n    set: setType,\n    strictObject: strictObjectType,\n    string: stringType,\n    symbol: symbolType,\n    transformer: effectsType,\n    tuple: tupleType,\n    'undefined': undefinedType,\n    union: unionType,\n    unknown: unknownType,\n    'void': voidType,\n    NEVER: NEVER,\n    ZodIssueCode: ZodIssueCode,\n    quotelessJson: quotelessJson,\n    ZodError: ZodError\n});\n\nexport { BRAND, DIRTY, EMPTY_PATH, INVALID, NEVER, OK, ParseStatus, ZodType as Schema, ZodAny, ZodArray, ZodBigInt, ZodBoolean, ZodBranded, ZodCatch, ZodDate, ZodDefault, ZodDiscriminatedUnion, ZodEffects, ZodEnum, ZodError, ZodFirstPartyTypeKind, ZodFunction, ZodIntersection, ZodIssueCode, ZodLazy, ZodLiteral, ZodMap, ZodNaN, ZodNativeEnum, ZodNever, ZodNull, ZodNullable, ZodNumber, ZodObject, ZodOptional, ZodParsedType, ZodPipeline, ZodPromise, ZodReadonly, ZodRecord, ZodType as ZodSchema, ZodSet, ZodString, ZodSymbol, ZodEffects as ZodTransformer, ZodTuple, ZodType, ZodUndefined, ZodUnion, ZodUnknown, ZodVoid, addIssueToContext, anyType as any, arrayType as array, bigIntType as bigint, booleanType as boolean, coerce, custom, dateType as date, datetimeRegex, z as default, errorMap as defaultErrorMap, discriminatedUnionType as discriminatedUnion, effectsType as effect, enumType as enum, functionType as function, getErrorMap, getParsedType, instanceOfType as instanceof, intersectionType as intersection, isAborted, isAsync, isDirty, isValid, late, lazyType as lazy, literalType as literal, makeIssue, mapType as map, nanType as nan, nativeEnumType as nativeEnum, neverType as never, nullType as null, nullableType as nullable, numberType as number, objectType as object, objectUtil, oboolean, onumber, optionalType as optional, ostring, pipelineType as pipeline, preprocessType as preprocess, promiseType as promise, quotelessJson, recordType as record, setType as set, setErrorMap, strictObjectType as strictObject, stringType as string, symbolType as symbol, effectsType as transformer, tupleType as tuple, undefinedType as undefined, unionType as union, unknownType as unknown, util, voidType as void, z };\n","import { z } from \"zod\";\n\nexport const loanValidator = z.object({\n  principal: z.number(),\n  ratePct: z.number(),\n  paymentsPerYear: z.number(),\n  payment: z.number(),\n  firstPaymentDate: z.string(),\n  ownershipPct: z.number(),\n});\n\nexport type Loan = z.infer<typeof loanValidator>;\n","import { z } from \"zod\";\n\nexport const accountDataValidator = z.object({\n  date: z.string(),\n  value: z.number(),\n});\n\nexport type AccountData = z.infer<typeof accountDataValidator>;\n","import { z } from \"zod\";\n\nexport const accountDataValidator = z.object({\n  date: z.string(),\n  value: z.number(),\n  id: z.string(),\n});\n\nexport type AccountData = z.infer<typeof accountDataValidator>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const accountValidator = z.object({\n  type: z.literal(\"account\"),\n  data: z.array(accountDataValidator),\n});\n\nexport type Account = z.infer<typeof accountValidator>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\nimport { loanValidator } from \"./loan\";\n\nexport const mortgageValidator = z.object({\n  type: z.literal(\"mortgage\"),\n  loan: loanValidator.optional(),\n  data: z.array(accountDataValidator),\n});\n\nexport type Mortgage = z.infer<typeof mortgageValidator>;\n","import { z } from \"zod\";\nimport { accountValidator } from \"./account\";\nimport { mortgageValidator } from \"./mortgage\";\n\nexport const wealth = z.record(z.union([accountValidator, mortgageValidator]));\n\nexport type Wealth = z.infer<typeof wealth>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const projectedIncome = z.object({\n  timeSeries: z.object({\n    paycheck: z.array(accountDataValidator),\n    meritIncreasePct: z.array(accountDataValidator),\n    equityPct: z.array(accountDataValidator),\n    meritBonusPct: z.array(accountDataValidator),\n    meritBonus: z.array(accountDataValidator),\n    companyBonusPct: z.array(accountDataValidator),\n    companyBonus: z.array(accountDataValidator),\n    retirementBonus: z.array(accountDataValidator),\n  }),\n});\n\nexport type ProjectedIncome = z.infer<typeof projectedIncome>;\nexport type TimeSeries = keyof ProjectedIncome[\"timeSeries\"];\n","import { z } from \"zod\";\n\nexport const projectedWealth = z.object({\n  socialSecurityLimit: z.number(),\n  socialSecurityTaxRate: z.number(),\n  medicareSupplementalTaxThreshold: z.number(),\n  medicareSupplementalTaxRate: z.number(),\n  savingsPerMonth: z.number(),\n  retirementContributionPaycheck: z.number(),\n  bonusWitholdingsRate: z.number(),\n});\n\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\nexport type ProjectedWealthKeys = keyof ProjectedWealth;\n","import { z } from \"zod\";\n\nexport const projectedWealth = z.object({\n  socialSecurityLimit: z.number(),\n  socialSecurityTaxRate: z.number(),\n  medicareSupplementalTaxThreshold: z.number(),\n  medicareSupplementalTaxRate: z.number(),\n  savingsPerMonth: z.number(),\n  retirementContributionPaycheck: z.number(),\n});\n\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\nexport type ProjectedWealthKeys = keyof ProjectedWealth;\n","import { z } from \"zod\";\nimport { wealth } from \"../version-0/net-wealth\";\nimport { projectedIncome } from \"../version-0/projected-income\";\nimport { projectedWealth } from \"../version-0/projected-wealth\";\n\nexport const storeValidator = z.object({\n  version: z.literal(1),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { z } from \"zod\";\nimport { projectedIncome, wealth } from \"../version-1\";\nimport { projectedWealth } from \"./projected-wealth\";\n\nexport const storeValidator = z.object({\n  version: z.literal(2),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { z } from \"zod\";\nimport { loanValidator } from \"../version-2\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const mortgageValidator = z.object({\n  type: z.literal(\"mortgage\"),\n  loan: loanValidator.optional(),\n  data: z.array(accountDataValidator),\n});\n\nexport type Mortgage = z.infer<typeof mortgageValidator>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const projectedIncome = z.object({\n  timeSeries: z.object({\n    paycheck: z.array(accountDataValidator),\n    meritIncreasePct: z.array(accountDataValidator),\n    equityPct: z.array(accountDataValidator),\n    meritBonusPct: z.array(accountDataValidator),\n    meritBonus: z.array(accountDataValidator),\n    companyBonusPct: z.array(accountDataValidator),\n    companyBonus: z.array(accountDataValidator),\n    retirementBonus: z.array(accountDataValidator),\n  }),\n});\n\nexport type ProjectedIncome = z.infer<typeof projectedIncome>;\nexport type TimeSeries = ProjectedIncome[\"timeSeries\"];\nexport type TimeSeriesKeys = keyof ProjectedIncome[\"timeSeries\"];\n","import { z } from \"zod\";\n\nexport const projectedWealth = z.object({\n  socialSecurityLimit: z.number(),\n  socialSecurityTaxRate: z.number(),\n  medicareSupplementalTaxThreshold: z.number(),\n  medicareSupplementalTaxRate: z.number(),\n  savingsPerMonth: z.number(),\n  retirementContributionPaycheck: z.number(),\n  bonusWithholdingsRate: z.number(),\n});\n\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\nexport type ProjectedWealthKeys = keyof ProjectedWealth;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"../version-3/account-data\";\n\nexport const accountValidator = z.object({\n  type: z.literal(\"account\"),\n  data: z.array(accountDataValidator),\n  hidden: z.boolean().default(false),\n});\n\nexport type Account = z.infer<typeof accountValidator>;\n","import { Store } from \"./store\";\n\nexport const getDefaultStore = (): Store => ({\n  version: 5,\n  projectedIncome: {\n    timeSeries: {\n      paycheck: [],\n      meritBonusPct: [],\n      companyBonusPct: [\n        {\n          date: \"2014-06-15T00:00:00.000-07:00\",\n          value: 0.248,\n        },\n        {\n          date: \"2015-06-15T00:00:00.000-07:00\",\n          value: 0.248,\n        },\n        {\n          date: \"2016-06-15T00:00:00.000-07:00\",\n          value: 0.204,\n        },\n        {\n          date: \"2017-06-15T00:00:00.000-07:00\",\n          value: 0.22,\n        },\n        {\n          date: \"2018-06-15T00:00:00.000-07:00\",\n          value: 0.26,\n        },\n        {\n          date: \"2019-06-15T00:00:00.000-07:00\",\n          value: 0.242,\n        },\n        {\n          date: \"2020-06-15T00:00:00.000-07:00\",\n          value: 0.219,\n        },\n        {\n          date: \"2021-06-15T00:00:00.000-07:00\",\n          value: 0.254,\n        },\n        {\n          date: \"2022-06-15T00:00:00.000-07:00\",\n          value: 0.272,\n        },\n        {\n          date: \"2023-06-15T00:00:00.000-07:00\",\n          value: 0.168,\n        },\n        {\n          date: \"2024-06-15T00:00:00.000-07:00\",\n          value: 0.2075,\n        },\n      ],\n      meritBonus: [],\n      companyBonus: [],\n      retirementBonus: [],\n      equityPct: [],\n      meritIncreasePct: [],\n    },\n  },\n  wealth: {},\n  projectedWealth: {\n    medicareSupplementalTaxThreshold: 200_000,\n    socialSecurityLimit: 168_600,\n    socialSecurityTaxRate: 0.062,\n    medicareSupplementalTaxRate: 0.009,\n    savingsPerMonth: 0,\n    retirementContributionPaycheck: 0,\n    bonusWithholdingsRate: 0,\n  },\n});\n","import { z } from \"zod\";\nimport { loanValidator } from \"../version-2\";\nimport { accountDataValidator } from \"../version-3/account-data\";\n\nexport const mortgageValidator = z.object({\n  type: z.literal(\"mortgage\"),\n  loan: loanValidator.optional(),\n  data: z.array(accountDataValidator),\n  hidden: z.boolean().default(false),\n});\n\nexport type Mortgage = z.infer<typeof mortgageValidator>;\n","import { z } from \"zod\";\nimport { accountValidator } from \"./account\";\nimport { mortgageValidator } from \"./mortgage\";\n\nexport const wealth = z.record(z.union([accountValidator, mortgageValidator]));\n\nexport type Wealth = z.infer<typeof wealth>;\n","import { z } from \"zod\";\nimport { projectedIncome } from \"../version-3/projected-income\";\nimport { projectedWealth } from \"../version-4/projected-wealth\";\nimport { wealth } from \"./net-wealth\";\n\nexport const storeValidator = z.object({\n  version: z.literal(5),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { z } from \"zod\";\nimport { wealth } from \"./net-wealth\";\nimport { projectedIncome } from \"./projected-income\";\nimport { projectedWealth } from \"./projected-wealth\";\n\nexport const storeValidator = z.object({\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const accountValidator = z.object({\n  type: z.literal(\"account\"),\n  data: z.array(accountDataValidator),\n});\n\nexport type Account = z.infer<typeof accountValidator>;\n","import { z } from \"zod\";\nimport { accountValidator } from \"./account\";\nimport { mortgageValidator } from \"./mortgage\";\n\nexport const wealth = z.record(z.union([accountValidator, mortgageValidator]));\n\nexport type Wealth = z.infer<typeof wealth>;\n","import { z } from \"zod\";\n\nexport const projectedWealth = z.object({\n  socialSecurityLimit: z.number(),\n  socialSecurityTaxRate: z.number(),\n  medicareSupplementalTaxThreshold: z.number(),\n  medicareSupplementalTaxRate: z.number(),\n  savingsPerMonth: z.number(),\n  retirementContributionPaycheck: z.number(),\n  bonusWitholdingsRate: z.number(),\n});\n\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\nexport type ProjectedWealthKeys = keyof ProjectedWealth;\n","import { z } from \"zod\";\nimport { wealth } from \"./net-wealth\";\nimport { projectedIncome } from \"./projected-income\";\nimport { projectedWealth } from \"./projected-wealth\";\n\nexport const storeValidator = z.object({\n  version: z.literal(3),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { z } from \"zod\";\nimport { wealth } from \"../version-3/net-wealth\";\nimport { projectedIncome } from \"../version-3/projected-income\";\nimport { projectedWealth } from \"./projected-wealth\";\n\nexport const storeValidator = z.object({\n  version: z.literal(4),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { storeValidator } from \"shared/models/store/current\";\nimport { storeValidator as storeV0Validator } from \"shared/models/store/version-0\";\nimport { Store as StoreV1, storeValidator as storeV1Validator } from \"shared/models/store/version-1\";\nimport { Store as StoreV2, storeValidator as storeV2Validator } from \"shared/models/store/version-2\";\nimport { Store as StoreV3, storeValidator as storeV3Validator } from \"shared/models/store/version-3\";\nimport { Store as StoreV4, storeValidator as storeV4Validator } from \"shared/models/store/version-4\";\nimport { Store as StoreV5 } from \"shared/models/store/version-5\";\n\nexport const migration = (data: unknown) => {\n  if (data === null || data === undefined) {\n    throw new Error(\"parsed data is null or undefined\");\n  } else if (typeof data !== \"object\") {\n    throw new Error(\"Parsed data is not an object\");\n  }\n\n  if (!(\"version\" in data)) {\n    storeV0Validator.parse(data);\n    (data as StoreV1).version = 1;\n  }\n\n  if (\"version\" in data) {\n    if (data.version === 1) {\n      storeV1Validator.parse(data);\n      (data as StoreV2).version = 2;\n      (data as StoreV2).projectedWealth.bonusWitholdingsRate = 0;\n    }\n    if (data.version === 2) {\n      storeV2Validator.parse(data);\n      (data as StoreV3).version = 3;\n    }\n    if (data.version === 3) {\n      storeV3Validator.parse(data);\n      (data as StoreV4).version = 4;\n      (data as StoreV4).projectedWealth.bonusWithholdingsRate = (data as StoreV3).projectedWealth.bonusWitholdingsRate;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      delete (data as any).projectedWealth.bonusWitholdingsRate;\n    }\n    if (data.version === 4) {\n      storeV4Validator.parse(data);\n      (data as StoreV5).version = 5;\n      const keys = Object.keys((data as StoreV5).wealth);\n      for (let i = 0; i < keys.length; i++) {\n        (data as StoreV5).wealth[keys[i]].hidden = false;\n      }\n    }\n  }\n\n  const next = storeValidator.parse(data);\n  console.log(next);\n  return next;\n};\n","import { Store as CreateStore } from \"@tanstack/store\";\nimport { ZodSchema } from \"zod\";\nimport { Store, getDefaultStore, storeValidator } from \"../models/store/current\";\nimport { migration } from \"./migrations\";\n\nconst createStore = <T extends object>(validator: ZodSchema, defaultValue: T) => {\n  const key = \"store\";\n  const invalidData = \"store-invalid\";\n  const localData = localStorage.getItem(key);\n  const data = localData ? JSON.parse(localData) : defaultValue;\n  const parse = validator.safeParse(data);\n\n  if (!parse.success) {\n    try {\n      migration(data);\n      localStorage.setItem(key, JSON.stringify(data));\n    } catch (err) {\n      console.log(\"error\", err);\n      console.log(\"invalid data\", data);\n      localStorage.setItem(invalidData, JSON.stringify(data));\n      localStorage.setItem(key, JSON.stringify(defaultValue));\n    }\n  }\n\n  const store = new CreateStore<T>(data);\n  store.subscribe(() => {\n    const current = localStorage.getItem(key);\n    current && localStorage.setItem(`${key}-previous`, current);\n    localStorage.setItem(key, JSON.stringify(store.state));\n  });\n\n  return store;\n};\n\nexport const store = createStore<Store>(storeValidator, getDefaultStore());\n","import { DateTime } from \"luxon\";\nimport { AccountData } from \"shared/models/store/current\";\n\nexport function findSameYear(year: number, data: AccountData[]): AccountData | undefined;\nexport function findSameYear(date: DateTime, data: AccountData[]): AccountData | undefined;\nexport function findSameYear(date: DateTime | number, data: AccountData[]): AccountData | undefined {\n  const year = typeof date === \"number\" ? date : date.year;\n  return data.find((x) => {\n    return DateTime.fromISO(x.date).year === year;\n  });\n}\n","import { DateTime } from \"luxon\";\nimport { AccountData } from \"shared/models/store/current\";\nimport { findSameYear } from \"./find-same-year\";\n\nexport const getActualDate = (year: number | undefined, data: AccountData[]) => {\n  if (!year) {\n    return undefined;\n  }\n\n  const entry = findSameYear(year, data);\n  if (!entry) {\n    return undefined;\n  }\n\n  return DateTime.fromISO(entry.date);\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { store } from \"shared/store\";\nimport { getActualDate } from \"shared/utility/get-actual-date\";\n\nexport const getDefaultPayDates = (year?: number) => {\n  return {\n    meritIncrease: DateTime.fromObject({ month: 4, day: 1, year }),\n    meritBonus: DateTime.fromObject({ month: 4, day: 15, year }),\n    companyBonus: DateTime.fromObject({ month: 6, day: 15, year }),\n    retirementBonus: DateTime.fromObject({ month: 7, day: 15, year }),\n  };\n};\n\nexport const useDates = (year?: number) => {\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\n  const meritBonusDate = getActualDate(year, timeSeries.meritBonus);\n  const companyBonusDate = getActualDate(year, timeSeries.companyBonus);\n  const retirementBonusDate = getActualDate(year, timeSeries.retirementBonus);\n  const defaultDates = getDefaultPayDates(year);\n\n  return {\n    meritIncrease: defaultDates.meritIncrease,\n    meritBonus: meritBonusDate ?? defaultDates.meritBonus,\n    companyBonus: companyBonusDate ?? defaultDates.companyBonus,\n    retirementBonus: retirementBonusDate ?? defaultDates.retirementBonus,\n  };\n};\n\nexport const getDateRanges = (year: number) => ({\n  base: {\n    start: DateTime.fromObject({ month: 1, day: 1, year }),\n    end: DateTime.fromObject({ month: 12, day: 31, year }).endOf(\"day\"),\n  },\n  meritBonus: {\n    start: DateTime.fromObject({ month: 1, day: 1, year: year - 1 }),\n    end: DateTime.fromObject({ month: 12, day: 31, year: year - 1 }).endOf(\"day\"),\n  },\n  companyBonus: {\n    start: DateTime.fromObject({ day: 1, month: 4, year: year - 1 }),\n    end: DateTime.fromObject({ day: 31, month: 3, year }).endOf(\"day\"),\n  },\n  retirementBonus: {\n    start: DateTime.fromObject({ day: 1, month: 7, year: year - 1 }),\n    end: DateTime.fromObject({ day: 30, month: 6, year }).endOf(\"day\"),\n  },\n});\n\nexport const useDateRanges = (year: number) => {\n  return getDateRanges(year);\n};\n","export interface PaymentPeriod {\n  start: string;\n  end: string;\n  payedOn: string;\n  value: number;\n  cumulative: number;\n  type: PaymentType;\n}\n\nexport const PaymentTypes = {\n  regular: \"regular\",\n  bonus: \"taxable bonus\",\n  nonTaxableBonus: \"non-taxable bonus\",\n} as const;\n\nexport type PaymentType = (typeof PaymentTypes)[keyof typeof PaymentTypes];\n","import { DateTime } from \"luxon\";\n\nexport const getLocalDateTime = () => {\n  const date = DateTime.local();\n  return date;\n};\n\nexport const useLocalDateTime = () => {\n  const date = DateTime.local();\n  return date;\n};\n","import { DateTime } from \"luxon\";\nimport { AccountData } from \"shared/models/store/current\";\n\nexport const findNearestOnOrBefore = (date: DateTime, data: AccountData[]) => {\n  return data.find((x, idx, array) => {\n    if (idx == 0 && DateTime.fromISO(x.date).startOf(\"day\") >= date) {\n      return true;\n    }\n\n    if (\n      idx < array.length - 1 &&\n      DateTime.fromISO(x.date).startOf(\"day\") <= date &&\n      DateTime.fromISO(data[idx + 1].date).startOf(\"day\") > date\n    ) {\n      return true;\n    }\n\n    if (idx === array.length - 1) {\n      return true;\n    }\n  });\n};\n\nexport const findNearestIdxOnOrBefore = <T>(date: DateTime, data: T[], selector: (data: T) => DateTime) => {\n  return data.findIndex((x, idx, array) => {\n    if (idx == 0 && selector(x) >= date) {\n      return true;\n    }\n\n    if (idx < array.length - 1 && selector(x) <= date && selector(data[idx + 1]) > date) {\n      return true;\n    }\n\n    if (idx === array.length - 1) {\n      return true;\n    }\n  });\n};\n","/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n\n/**\n * @constant\n * @name constructFromSymbol\n * @summary Symbol enabling Date extensions to inherit properties from the reference date.\n *\n * The symbol is used to enable the `constructFrom` function to construct a date\n * using a reference date and a value. It allows to transfer extra properties\n * from the reference date to the new date. It's useful for extensions like\n * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as\n * a constructor argument.\n */\nexport const constructFromSymbol = Symbol.for(\"constructDateFrom\");\n","import { constructFromSymbol } from \"./constants.js\";\n\n/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * Starting from v3.7.0, it allows to construct a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from \"./constructFrom/date-fns\";\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date>(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use constructor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   );\n * }\n */\nexport function constructFrom(date, value) {\n  if (typeof date === \"function\") return date(value);\n\n  if (date && typeof date === \"object\" && constructFromSymbol in date)\n    return date[constructFromSymbol](value);\n\n  if (date instanceof Date) return new date.constructor(value);\n\n  return new Date(value);\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n","import { constructFrom } from \"../constructFrom.js\";\n\nexport function normalizeDates(context, ...dates) {\n  const normalize = constructFrom.bind(\n    null,\n    context || dates.find((date) => typeof date === \"object\"),\n  );\n  return dates.map(normalize);\n}\n","import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument, context) {\n  // [TODO] Get rid of `toDate` or `constructFrom`?\n  return constructFrom(context || argument, argument);\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n","import { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addDays} function options.\n */\n\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be added.\n * @param options - An object with options\n *\n * @returns The new date with the days added\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nexport function addDays(date, amount, options) {\n  const _date = toDate(date, options?.in);\n  if (isNaN(amount)) return constructFrom(options?.in || date, NaN);\n\n  // If 0 days, no-op to avoid changing times in the hour before end of DST\n  if (!amount) return _date;\n\n  _date.setDate(_date.getDate() + amount);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default addDays;\n","import { toDate } from \"../toDate.js\";\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport function getTimezoneOffsetInMilliseconds(date) {\n  const _date = toDate(date);\n  const utcDate = new Date(\n    Date.UTC(\n      _date.getFullYear(),\n      _date.getMonth(),\n      _date.getDate(),\n      _date.getHours(),\n      _date.getMinutes(),\n      _date.getSeconds(),\n      _date.getMilliseconds(),\n    ),\n  );\n  utcDate.setUTCFullYear(_date.getFullYear());\n  return +date - +utcDate;\n}\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfDay} function options.\n */\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nexport function startOfDay(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfDay;\n","import { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { millisecondsInDay } from \"./constants.js\";\nimport { startOfDay } from \"./startOfDay.js\";\n\n/**\n * The {@link differenceInCalendarDays} function options.\n */\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - The options object\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nexport function differenceInCalendarDays(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const laterStartOfDay = startOfDay(laterDate_);\n  const earlierStartOfDay = startOfDay(earlierDate_);\n\n  const laterTimestamp =\n    +laterStartOfDay - getTimezoneOffsetInMilliseconds(laterStartOfDay);\n  const earlierTimestamp =\n    +earlierStartOfDay - getTimezoneOffsetInMilliseconds(earlierStartOfDay);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((laterTimestamp - earlierTimestamp) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarDays;\n","import { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { startOfDay } from \"./startOfDay.js\";\n\n/**\n * The {@link isSameDay} function options.\n */\n\n/**\n * @name isSameDay\n * @category Day Helpers\n * @summary Are the given dates in the same day (and year and month)?\n *\n * @description\n * Are the given dates in the same day (and year and month)?\n *\n * @param laterDate - The first date to check\n * @param earlierDate - The second date to check\n * @param options - An object with options\n *\n * @returns The dates are in the same day (and year and month)\n *\n * @example\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\n * const result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\n * //=> true\n *\n * @example\n * // Are 4 September and 4 October in the same day?\n * const result = isSameDay(new Date(2014, 8, 4), new Date(2014, 9, 4))\n * //=> false\n *\n * @example\n * // Are 4 September, 2014 and 4 September, 2015 in the same day?\n * const result = isSameDay(new Date(2014, 8, 4), new Date(2015, 8, 4))\n * //=> false\n */\nexport function isSameDay(laterDate, earlierDate, options) {\n  const [dateLeft_, dateRight_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n  return +startOfDay(dateLeft_) === +startOfDay(dateRight_);\n}\n\n// Fallback for modularized imports:\nexport default isSameDay;\n","/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param value - The value to check\n *\n * @returns True if the given value is a date\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\nexport function isDate(value) {\n  return (\n    value instanceof Date ||\n    (typeof value === \"object\" &&\n      Object.prototype.toString.call(value) === \"[object Date]\")\n  );\n}\n\n// Fallback for modularized imports:\nexport default isDate;\n","import { isDate } from \"./isDate.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertible into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\nexport function isValid(date) {\n  return !((!isDate(date) && typeof date !== \"number\") || isNaN(+toDate(date)));\n}\n\n// Fallback for modularized imports:\nexport default isValid;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link isWeekend} function options.\n */\n\n/**\n * @name isWeekend\n * @category Weekday Helpers\n * @summary Does the given date fall on a weekend?\n *\n * @description\n * Does the given date fall on a weekend? A weekend is either Saturday (`6`) or Sunday (`0`).\n *\n * @param date - The date to check\n * @param options - An object with options\n *\n * @returns The date falls on a weekend\n *\n * @example\n * // Does 5 October 2014 fall on a weekend?\n * const result = isWeekend(new Date(2014, 9, 5))\n * //=> true\n */\nexport function isWeekend(date, options) {\n  const day = toDate(date, options?.in).getDay();\n  return day === 0 || day === 6;\n}\n\n// Fallback for modularized imports:\nexport default isWeekend;\n","import { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { addDays } from \"./addDays.js\";\nimport { differenceInCalendarDays } from \"./differenceInCalendarDays.js\";\nimport { isSameDay } from \"./isSameDay.js\";\nimport { isValid } from \"./isValid.js\";\nimport { isWeekend } from \"./isWeekend.js\";\n\n/**\n * The {@link differenceInBusinessDays} function options.\n */\n\n/**\n * @name differenceInBusinessDays\n * @category Day Helpers\n * @summary Get the number of business days between the given dates.\n *\n * @description\n * Get the number of business day periods between the given dates.\n * Business days being days that aren't in the weekend.\n * Like `differenceInCalendarDays`, the function removes the times from\n * the dates before calculating the difference.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n *\n * @returns The number of business days\n *\n * @example\n * // How many business days are between\n * // 10 January 2014 and 20 July 2014?\n * const result = differenceInBusinessDays(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 0, 10)\n * )\n * //=> 136\n *\n * // How many business days are between\n * // 30 November 2021 and 1 November 2021?\n * const result = differenceInBusinessDays(\n *   new Date(2021, 10, 30),\n *   new Date(2021, 10, 1)\n * )\n * //=> 21\n *\n * // How many business days are between\n * // 1 November 2021 and 1 December 2021?\n * const result = differenceInBusinessDays(\n *   new Date(2021, 10, 1),\n *   new Date(2021, 11, 1)\n * )\n * //=> -22\n *\n * // How many business days are between\n * // 1 November 2021 and 1 November 2021 ?\n * const result = differenceInBusinessDays(\n *   new Date(2021, 10, 1),\n *   new Date(2021, 10, 1)\n * )\n * //=> 0\n */\nexport function differenceInBusinessDays(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  if (!isValid(laterDate_) || !isValid(earlierDate_)) return NaN;\n\n  const diff = differenceInCalendarDays(laterDate_, earlierDate_);\n  const sign = diff < 0 ? -1 : 1;\n  const weeks = Math.trunc(diff / 7);\n\n  let result = weeks * 5;\n  let movingDate = addDays(earlierDate_, weeks * 7);\n\n  // the loop below will run at most 6 times to account for the remaining days that don't makeup a full week\n  while (!isSameDay(laterDate_, movingDate)) {\n    // sign is used to account for both negative and positive differences\n    result += isWeekend(movingDate, options) ? 0 : sign;\n    movingDate = addDays(movingDate, sign);\n  }\n\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}\n\n// Fallback for modularized imports:\nexport default differenceInBusinessDays;\n","import { DateTime } from \"luxon\";\n\nexport const aPayday = DateTime.fromObject({ month: 12, day: 1, year: 2023 });\n","import { DateTime } from \"luxon\";\n\nexport function DateRangesOverlap(a: { start: DateTime; end: DateTime }, b: { start: DateTime; end: DateTime }) {\n  return a.start <= b.end && b.start <= a.end;\n}\n","import { DateTime } from \"luxon\";\n\ninterface PayPeriod {\n  start: DateTime;\n  end: DateTime;\n  payedOn: DateTime;\n}\n\nexport const getPayPeriods = (anyPayday: DateTime, start: DateTime, end: DateTime): PayPeriod[] => {\n  const diff = anyPayday.diff(start, [\"weeks\", \"days\"]);\n  const startPayDay = start.plus({\n    days: diff.days,\n    weeks: +(diff.weeks % 2 !== 0),\n  });\n\n  const numPayDays = end.diff(start, [\"weeks\", \"days\"]).weeks / 2;\n  const periods = [];\n  for (let i = 0; i <= numPayDays; i++) {\n    periods.push({\n      start: startPayDay.plus({ weeks: i * 2 - 3, day: 3 }),\n      end: startPayDay.plus({ weeks: i * 2 - 1 }).endOf(\"day\"),\n      payedOn: startPayDay.plus({ weeks: i * 2 }),\n    });\n  }\n\n  return periods.filter((x) => x.payedOn > start && x.payedOn < end);\n};\n","import { differenceInBusinessDays } from \"date-fns/differenceInBusinessDays\";\nimport { DateTime } from \"luxon\";\nimport { PaymentPeriod } from \"shared/models/payment-periods\";\nimport { aPayday } from \"./a-payday\";\nimport { DateRangesOverlap } from \"./date-ranges-overlap\";\nimport { getPayPeriods } from \"./get-pay-periods\";\n\ninterface ProjectedPay {\n  start: DateTime<true> | DateTime<false>;\n  end: DateTime<true> | DateTime<false>;\n  value: number;\n}\n\nexport function getPayments(startDate: DateTime, endDate: DateTime, pay: ProjectedPay[]): PaymentPeriod[] {\n  const payPeriods = getPayPeriods(aPayday, startDate, endDate);\n  return payPeriods.map((payPeriod) => {\n    const dateRanges = pay.filter((x) => DateRangesOverlap(x, payPeriod));\n    const payDuringPeriod = dateRanges.map((x) => {\n      const start = DateTime.max(x.start, payPeriod.start);\n      const end = DateTime.min(x.end, payPeriod.end);\n      const businessDays = differenceInBusinessDays(end.plus({ milliseconds: 1 }).toJSDate(), start.toJSDate());\n      const value = (x.value / 10) * Math.max(1, businessDays);\n      return {\n        start: start.toISO(),\n        end: end.toISO(),\n        value,\n      };\n    });\n    const sum = payDuringPeriod.reduce((acc, curr) => acc + curr.value, 0);\n\n    return {\n      value: sum,\n      cumulative: 0,\n      start: payPeriod.start.toISO()!,\n      end: payPeriod.end.toISO()!,\n      payedOn: payPeriod.payedOn.toISO()!,\n      type: \"regular\",\n    };\n  });\n}\n","import { DateTime } from \"luxon\";\nimport { AccountData } from \"shared/models/store/current\";\n\ninterface TimeSpanValue {\n  start: DateTime;\n  end: DateTime;\n  value: number;\n}\n\nexport const getValueByDateRange = (account: AccountData[]): TimeSpanValue[] => {\n  return account.map((x, index, array) => {\n    const next = array[index + 1];\n    return {\n      start: DateTime.fromISO(x.date),\n      end: (next?.date ? DateTime.fromISO(next?.date).startOf(\"day\") : DateTime.fromISO(x.date).plus({ years: 1 }))\n        .minus({ days: 1 })\n        .endOf(\"day\"),\n      value: x.value,\n    };\n  });\n};\n","import { DateTime } from \"luxon\";\nimport { PaymentPeriod } from \"shared/models/payment-periods\";\nimport { AccountData, ProjectedIncome } from \"shared/models/store/current\";\nimport { findSameYear } from \"./find-same-year\";\nimport { getPayments } from \"./get-payments\";\nimport { getValueByDateRange } from \"./get-values-by-date-range\";\n\nexport interface MeritSequence {\n  year: number;\n  pay: AccountData[];\n  lastThreeMeritBonusFactor: number;\n  lastThreeMeritBonuses: number[];\n  meritBonusPct: number;\n  meritIncreasePct: number;\n  payments: PaymentPeriod[];\n  equityIncreasePct: number;\n  retirementBonusPct: number;\n  weight: number;\n}\n\nexport const getEmptyMeritSequence = (year: number, projectedIncome: ProjectedIncome, pay: AccountData[]) => {\n  const timeSeries = projectedIncome.timeSeries;\n  const equityIncreasePct = findSameYear(year, timeSeries.equityPct)?.value ?? 0;\n  const meritIncreasePct = findSameYear(year, timeSeries.meritIncreasePct)?.value ?? 0;\n  const meritBonusPct = findSameYear(year, timeSeries.meritBonusPct)?.value ?? 0;\n  const meritBonuses = pay.map((x) => findSameYear(DateTime.fromISO(x.date).year, timeSeries.meritBonusPct)?.value ?? 0);\n\n  const lastThreeMeritBonuses = meritBonuses.slice(-3);\n  const lastThreeMeritBonusFactor = meritBonuses.slice(-3).reduce((acc, curr) => acc + curr, 0);\n  const payments = getPayments(\n    DateTime.fromObject({ day: 1, month: 1, year: year - 1 }),\n    DateTime.fromObject({ day: 31, month: 12, year: year }).endOf(\"day\"),\n    getValueByDateRange(pay)\n  );\n\n  return {\n    year,\n    pay: pay.slice(),\n    lastThreeMeritBonusFactor,\n    lastThreeMeritBonuses,\n    meritBonusPct,\n    meritIncreasePct,\n    payments,\n    equityIncreasePct,\n    retirementBonusPct: 0.15,\n    weight: 1,\n  } as MeritSequence;\n};\n","import { DateTime } from \"luxon\";\nimport { AccountData } from \"shared/models/store/current\";\n\nexport function getFuturePay(\n  pay: AccountData[],\n  meritIncreasePcts: number[],\n  meritIncrease: DateTime,\n  year: number,\n  equityLookup: Partial<Record<number, AccountData>>\n) {\n  const nextPay = pay.slice();\n  const initial = nextPay.length;\n  const mostRecentPay = pay.at(-1);\n\n  for (let i = initial; i < meritIncreasePcts.length + initial; i++) {\n    const prior = nextPay[i - 1] ?? mostRecentPay;\n    const date = DateTime.fromISO(prior.date ?? mostRecentPay?.date)\n      .plus({ years: 1 })\n      .set({ month: meritIncrease.month, day: meritIncrease.day });\n\n    if (date.year > year) {\n      break;\n    }\n    const equity = equityLookup[date.year]?.value ?? 0;\n    nextPay.push({\n      date: date.toISO()!,\n      value: prior.value * (1 + meritIncreasePcts[i - initial] + equity),\n    });\n  }\n  return nextPay;\n}\n","export const groupBySingle = <T, Tkey extends string | number>(array: T[], selector: (data: T) => Tkey) => {\n  const result = {} as Partial<Record<Tkey, T>>;\n  for (let i = 0; i < array.length; i++) {\n    result[selector(array[i])] ??= array[i];\n  }\n  return result;\n};\n","import { DateTime } from \"luxon\";\nimport { MAX_NUM_ENTRIES } from \"shared/constants\";\nimport { ProjectedIncome, TimeSeries } from \"shared/models/store/current\";\nimport { findSameYear } from \"shared/utility/find-same-year\";\nimport { groupBySingle } from \"shared/utility/group-by-single\";\n\ntype UnweightedPairs = {\n  meritIncreasePct: number;\n  meritBonusPct: number;\n};\n\n/**\n *\n * @param year year to generate merit pairs for\n * @param timeseries pojected\n * @returns an array of possible merit pairs with their frequency weighted\n */\nconst getMeritPairs = (year: number, timeSeries: TimeSeries) => {\n  const meritBonusPct = findSameYear(year, timeSeries.meritBonusPct);\n  const meritIncreasePct = findSameYear(year, timeSeries.meritIncreasePct);\n\n  if (meritBonusPct && meritIncreasePct) {\n    return [\n      {\n        meritIncreasePct: meritIncreasePct.value,\n        meritBonusPct: meritBonusPct.value,\n        weight: 1,\n      },\n    ];\n  }\n\n  const meritBonusPctByYear = groupBySingle(timeSeries.meritBonusPct, (x) => DateTime.fromISO(x.date).year);\n  const unweightedPairs = timeSeries.meritIncreasePct.slice(-1 * MAX_NUM_ENTRIES).map((x) => {\n    const meritBonusPctPair = meritBonusPctByYear[DateTime.fromISO(x.date).year];\n    return {\n      meritIncreasePct: x.value,\n      meritBonusPct: meritBonusPctPair?.value ?? 0,\n    };\n  });\n\n  const groupsOfPairs = Object.values(\n    Object.groupBy(unweightedPairs, (x) => `${x.meritBonusPct} ${x.meritIncreasePct}`)\n  ) as UnweightedPairs[][];\n\n  return groupsOfPairs.map((x) => {\n    return {\n      ...x[0],\n      weight: x.length,\n    };\n  });\n};\n\nexport const getMeritSequence = (year: number, projectedIncome: ProjectedIncome) => {\n  const timeSeries = projectedIncome.timeSeries;\n  const meritPairs = getMeritPairs(year, timeSeries);\n\n  const pay = timeSeries.paycheck.filter((x) => DateTime.fromISO(x.date).year > year - 3);\n  const mostRecentPay = pay.at(-1) ?? timeSeries.paycheck.at(-1);\n\n  if (!mostRecentPay) {\n    return [];\n  }\n\n  const mostRecentPayYear = DateTime.fromISO(mostRecentPay.date).year;\n  const yearsToGenerate = Math.max(year - mostRecentPayYear, 1);\n\n  //generate all possible merit sequences that could happen from now to target year\n  let meritSequence = meritPairs.slice().map((x) => [x]);\n  for (let i = 0; i < yearsToGenerate - 1; i++) {\n    meritSequence = meritSequence.flatMap((x) => {\n      return meritPairs.map((merit) => {\n        return x.slice().concat(merit);\n      });\n    });\n  }\n\n  return meritSequence.map((values) => {\n    return {\n      weight: values!.reduce((acc, curr) => acc + curr.weight, 0),\n      values: values,\n    };\n  });\n};\n","import { DateTime } from \"luxon\";\nimport { PaymentPeriod, PaymentType } from \"shared/models/payment-periods\";\n\nexport const paymentsByRange = (types: PaymentType[], range: { start: DateTime; end: DateTime }, pay: PaymentPeriod[]) => {\n  const setTypes = new Set(types);\n\n  return pay.filter((x) => {\n    const payedOn = DateTime.fromISO(x.payedOn);\n    return payedOn >= range.start && payedOn <= range.end && setTypes.has(x.type);\n  });\n};\n","import { DateTime } from \"luxon\";\nimport { PaymentPeriod, PaymentType } from \"shared/models/payment-periods\";\nimport { paymentsByRange } from \"./payments-by-range\";\n\nexport const incomeByRange = (types: PaymentType[], range: { start: DateTime; end: DateTime }, pay: PaymentPeriod[]) => {\n  return paymentsByRange(types, range, pay).reduce((acc, curr) => acc + curr.value, 0);\n};\n","/**\n * [Simple linear regression](http://en.wikipedia.org/wiki/Simple_linear_regression)\n * is a simple way to find a fitted line\n * between a set of coordinates. This algorithm finds the slope and y-intercept of a regression line\n * using the least sum of squares.\n *\n * @param {Array<Array<number>>} data an array of two-element of arrays,\n * like `[[0, 1], [2, 3]]`\n * @returns {Object} object containing slope and intersect of regression line\n * @example\n * linearRegression([[0, 0], [1, 1]]); // => { m: 1, b: 0 }\n */\nfunction linearRegression(data) {\n    var m;\n    var b;\n\n    // Store data length in a local variable to reduce\n    // repeated object property lookups\n    var dataLength = data.length;\n\n    //if there's only one point, arbitrarily choose a slope of 0\n    //and a y-intercept of whatever the y of the initial point is\n    if (dataLength === 1) {\n        m = 0;\n        b = data[0][1];\n    } else {\n        // Initialize our sums and scope the `m` and `b`\n        // variables that define the line.\n        var sumX = 0;\n        var sumY = 0;\n        var sumXX = 0;\n        var sumXY = 0;\n\n        // Use local variables to grab point values\n        // with minimal object property lookups\n        var point;\n        var x;\n        var y;\n\n        // Gather the sum of all x values, the sum of all\n        // y values, and the sum of x^2 and (x*y) for each\n        // value.\n        //\n        // In math notation, these would be SS_x, SS_y, SS_xx, and SS_xy\n        for (var i = 0; i < dataLength; i++) {\n            point = data[i];\n            x = point[0];\n            y = point[1];\n\n            sumX += x;\n            sumY += y;\n\n            sumXX += x * x;\n            sumXY += x * y;\n        }\n\n        // `m` is the slope of the regression line\n        m =\n            (dataLength * sumXY - sumX * sumY) /\n            (dataLength * sumXX - sumX * sumX);\n\n        // `b` is the y-intercept of the line.\n        b = sumY / dataLength - (m * sumX) / dataLength;\n    }\n\n    // Return both values as an object.\n    return {\n        m: m,\n        b: b\n    };\n}\n\n/**\n * Given the output of `linearRegression`: an object\n * with `m` and `b` values indicating slope and intercept,\n * respectively, generate a line function that translates\n * x values into y values.\n *\n * @param {Object} mb object with `m` and `b` members, representing\n * slope and intersect of desired line\n * @returns {Function} method that computes y-value at any given\n * x-value on the line.\n * @example\n * var l = linearRegressionLine(linearRegression([[0, 0], [1, 1]]));\n * l(0) // = 0\n * l(2) // = 2\n * linearRegressionLine({ b: 0, m: 1 })(1); // => 1\n * linearRegressionLine({ b: 1, m: 1 })(1); // => 2\n */\nfunction linearRegressionLine(mb /*: { b: number, m: number }*/) {\n    // Return a function that computes a `y` value for each\n    // x value it is given, based on the values of `b` and `a`\n    // that we just computed.\n    return function (x) {\n        return mb.b + mb.m * x;\n    };\n}\n\n/**\n * Our default sum is the [Kahan-Babuska algorithm](https://pdfs.semanticscholar.org/1760/7d467cda1d0277ad272deb2113533131dc09.pdf).\n * This method is an improvement over the classical\n * [Kahan summation algorithm](https://en.wikipedia.org/wiki/Kahan_summation_algorithm).\n * It aims at computing the sum of a list of numbers while correcting for\n * floating-point errors. Traditionally, sums are calculated as many\n * successive additions, each one with its own floating-point roundoff. These\n * losses in precision add up as the number of numbers increases. This alternative\n * algorithm is more accurate than the simple way of calculating sums by simple\n * addition.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x input\n * @return {number} sum of all input numbers\n * @example\n * sum([1, 2, 3]); // => 6\n */\nfunction sum(x) {\n    // If the array is empty, we needn't bother computing its sum\n    if (x.length === 0) {\n        return 0;\n    }\n\n    // Initializing the sum as the first number in the array\n    var sum = x[0];\n\n    // Keeping track of the floating-point error correction\n    var correction = 0;\n\n    var transition;\n\n    if (typeof sum !== \"number\") {\n        return Number.NaN;\n    }\n\n    for (var i = 1; i < x.length; i++) {\n        if (typeof x[i] !== \"number\") {\n            return Number.NaN;\n        }\n        transition = sum + x[i];\n\n        // Here we need to update the correction in a different fashion\n        // if the new absolute value is greater than the absolute sum\n        if (Math.abs(sum) >= Math.abs(x[i])) {\n            correction += sum - transition + x[i];\n        } else {\n            correction += x[i] - transition + sum;\n        }\n\n        sum = transition;\n    }\n\n    // Returning the corrected sum\n    return sum + correction;\n}\n\n/**\n * The mean, _also known as average_,\n * is the sum of all values over the number of values.\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x sample of one or more data points\n * @throws {Error} if the length of x is less than one\n * @returns {number} mean\n * @example\n * mean([0, 10]); // => 5\n */\nfunction mean(x) {\n    if (x.length === 0) {\n        throw new Error(\"mean requires at least one data point\");\n    }\n\n    return sum(x) / x.length;\n}\n\n/**\n * The sum of deviations to the Nth power.\n * When n=2 it's the sum of squared deviations.\n * When n=3 it's the sum of cubed deviations.\n *\n * @param {Array<number>} x\n * @param {number} n power\n * @returns {number} sum of nth power deviations\n *\n * @example\n * var input = [1, 2, 3];\n * // since the variance of a set is the mean squared\n * // deviations, we can calculate that with sumNthPowerDeviations:\n * sumNthPowerDeviations(input, 2) / input.length;\n */\nfunction sumNthPowerDeviations(x, n) {\n    var meanValue = mean(x);\n    var sum = 0;\n    var tempValue;\n    var i;\n\n    // This is an optimization: when n is 2 (we're computing a number squared),\n    // multiplying the number by itself is significantly faster than using\n    // the Math.pow method.\n    if (n === 2) {\n        for (i = 0; i < x.length; i++) {\n            tempValue = x[i] - meanValue;\n            sum += tempValue * tempValue;\n        }\n    } else {\n        for (i = 0; i < x.length; i++) {\n            sum += Math.pow(x[i] - meanValue, n);\n        }\n    }\n\n    return sum;\n}\n\n/**\n * The [variance](http://en.wikipedia.org/wiki/Variance)\n * is the sum of squared deviations from the mean.\n *\n * This is an implementation of variance, not sample variance:\n * see the `sampleVariance` method if you want a sample measure.\n *\n * @param {Array<number>} x a population of one or more data points\n * @returns {number} variance: a value greater than or equal to zero.\n * zero indicates that all values are identical.\n * @throws {Error} if x's length is 0\n * @example\n * variance([1, 2, 3, 4, 5, 6]); // => 2.9166666666666665\n */\nfunction variance(x) {\n    if (x.length === 0) {\n        throw new Error(\"variance requires at least one data point\");\n    }\n\n    // Find the mean of squared deviations between the\n    // mean value and each value.\n    return sumNthPowerDeviations(x, 2) / x.length;\n}\n\n/**\n * The [standard deviation](http://en.wikipedia.org/wiki/Standard_deviation)\n * is the square root of the variance. This is also known as the population\n * standard deviation. It's useful for measuring the amount\n * of variation or dispersion in a set of values.\n *\n * Standard deviation is only appropriate for full-population knowledge: for\n * samples of a population, {@link sampleStandardDeviation} is\n * more appropriate.\n *\n * @param {Array<number>} x input\n * @returns {number} standard deviation\n * @example\n * variance([2, 4, 4, 4, 5, 5, 7, 9]); // => 4\n * standardDeviation([2, 4, 4, 4, 5, 5, 7, 9]); // => 2\n */\nfunction standardDeviation(x) {\n    if (x.length === 1) {\n        return 0;\n    }\n    var v = variance(x);\n    return Math.sqrt(v);\n}\n\n/**\n * The [R Squared](http://en.wikipedia.org/wiki/Coefficient_of_determination)\n * value of data compared with a function `f`\n * is the sum of the squared differences between the prediction\n * and the actual value.\n *\n * @param {Array<Array<number>>} x input data: this should be doubly-nested\n * @param {Function} func function called on `[i][0]` values within the dataset\n * @returns {number} r-squared value\n * @example\n * var samples = [[0, 0], [1, 1]];\n * var regressionLine = linearRegressionLine(linearRegression(samples));\n * rSquared(samples, regressionLine); // = 1 this line is a perfect fit\n */\nfunction rSquared(x, func) {\n    if (x.length < 2) {\n        return 1;\n    }\n\n    // Compute the average y value for the actual\n    // data set in order to compute the\n    // _total sum of squares_\n    var sum = 0;\n    for (var i = 0; i < x.length; i++) {\n        sum += x[i][1];\n    }\n    var average = sum / x.length;\n\n    // Compute the total sum of squares - the\n    // squared difference between each point\n    // and the average of all points.\n    var sumOfSquares = 0;\n    for (var j = 0; j < x.length; j++) {\n        sumOfSquares += Math.pow(average - x[j][1], 2);\n    }\n\n    // Finally estimate the error: the squared\n    // difference between the estimate and the actual data\n    // value at each point.\n    var err = 0;\n    for (var k = 0; k < x.length; k++) {\n        err += Math.pow(x[k][1] - func(x[k][0]), 2);\n    }\n\n    // As the error grows larger, its ratio to the\n    // sum of squares increases and the r squared\n    // value grows lower.\n    return 1 - err / sumOfSquares;\n}\n\n/**\n * The [mode](https://en.wikipedia.org/wiki/Mode_%28statistics%29) is the number\n * that appears in a list the highest number of times.\n * There can be multiple modes in a list: in the event of a tie, this\n * algorithm will return the most recently seen mode.\n *\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * This runs in `O(n)` because the input is sorted.\n *\n * @param {Array<number>} sorted a sample of one or more data points\n * @returns {number} mode\n * @throws {Error} if sorted is empty\n * @example\n * modeSorted([0, 0, 1]); // => 0\n */\nfunction modeSorted(sorted) {\n    // Handle edge cases:\n    // The mode of an empty list is undefined\n    if (sorted.length === 0) {\n        throw new Error(\"mode requires at least one data point\");\n    }\n    if (sorted.length === 1) {\n        return sorted[0];\n    }\n\n    // This assumes it is dealing with an array of size > 1, since size\n    // 0 and 1 are handled immediately. Hence it starts at index 1 in the\n    // array.\n    var last = sorted[0];\n    // store the mode as we find new modes\n    var value = Number.NaN;\n    // store how many times we've seen the mode\n    var maxSeen = 0;\n    // how many times the current candidate for the mode\n    // has been seen\n    var seenThis = 1;\n\n    // end at sorted.length + 1 to fix the case in which the mode is\n    // the highest number that occurs in the sequence. the last iteration\n    // compares sorted[i], which is undefined, to the highest number\n    // in the series\n    for (var i = 1; i < sorted.length + 1; i++) {\n        // we're seeing a new number pass by\n        if (sorted[i] !== last) {\n            // the last number is the new mode since we saw it more\n            // often than the old one\n            if (seenThis > maxSeen) {\n                maxSeen = seenThis;\n                value = last;\n            }\n            seenThis = 1;\n            last = sorted[i];\n            // if this isn't a new number, it's one more occurrence of\n            // the potential mode\n        } else {\n            seenThis++;\n        }\n    }\n    return value;\n}\n\n/**\n * Sort an array of numbers by their numeric value, ensuring that the\n * array is not changed in place.\n *\n * This is necessary because the default behavior of .sort\n * in JavaScript is to sort arrays as string values\n *\n *     [1, 10, 12, 102, 20].sort()\n *     // output\n *     [1, 10, 102, 12, 20]\n *\n * @param {Array<number>} x input array\n * @return {Array<number>} sorted array\n * @private\n * @example\n * numericSort([3, 2, 1]) // => [1, 2, 3]\n */\nfunction numericSort(x) {\n    return (\n        x\n            // ensure the array is not changed in-place\n            .slice()\n            // comparator function that treats input as numeric\n            .sort(function (a, b) {\n                return a - b;\n            })\n    );\n}\n\n/**\n * The [mode](https://en.wikipedia.org/wiki/Mode_%28statistics%29) is the number\n * that appears in a list the highest number of times.\n * There can be multiple modes in a list: in the event of a tie, this\n * algorithm will return the most recently seen mode.\n *\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * This runs in `O(n log(n))` because it needs to sort the array internally\n * before running an `O(n)` search to find the mode.\n *\n * @param {Array<number>} x input\n * @returns {number} mode\n * @example\n * mode([0, 0, 1]); // => 0\n */\nfunction mode(x) {\n    // Sorting the array lets us iterate through it below and be sure\n    // that every time we see a new number it's new and we'll never\n    // see the same number twice\n    return modeSorted(numericSort(x));\n}\n\n/* globals Map: false */\n\n/**\n * The [mode](https://en.wikipedia.org/wiki/Mode_%28statistics%29) is the number\n * that appears in a list the highest number of times.\n * There can be multiple modes in a list: in the event of a tie, this\n * algorithm will return the most recently seen mode.\n *\n * modeFast uses a Map object to keep track of the mode, instead of the approach\n * used with `mode`, a sorted array. As a result, it is faster\n * than `mode` and supports any data type that can be compared with `==`.\n * It also requires a\n * [JavaScript environment with support for Map](https://kangax.github.io/compat-table/es6/#test-Map),\n * and will throw an error if Map is not available.\n *\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * @param {Array<*>} x a sample of one or more data points\n * @returns {?*} mode\n * @throws {ReferenceError} if the JavaScript environment doesn't support Map\n * @throws {Error} if x is empty\n * @example\n * modeFast(['rabbits', 'rabbits', 'squirrels']); // => 'rabbits'\n */\nfunction modeFast(x) {\n    // This index will reflect the incidence of different values, indexing\n    // them like\n    // { value: count }\n    var index = new Map();\n\n    // A running `mode` and the number of times it has been encountered.\n    var mode;\n    var modeCount = 0;\n\n    for (var i = 0; i < x.length; i++) {\n        var newCount = index.get(x[i]);\n        if (newCount === undefined) {\n            newCount = 1;\n        } else {\n            newCount++;\n        }\n        if (newCount > modeCount) {\n            mode = x[i];\n            modeCount = newCount;\n        }\n        index.set(x[i], newCount);\n    }\n\n    if (modeCount === 0) {\n        throw new Error(\"mode requires at last one data point\");\n    }\n\n    return mode;\n}\n\n/**\n * The min is the lowest number in the array.\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x sample of one or more data points\n * @throws {Error} if the length of x is less than one\n * @returns {number} minimum value\n * @example\n * min([1, 5, -10, 100, 2]); // => -10\n */\nfunction min(x) {\n    if (x.length === 0) {\n        throw new Error(\"min requires at least one data point\");\n    }\n\n    var value = x[0];\n    for (var i = 1; i < x.length; i++) {\n        if (x[i] < value) {\n            value = x[i];\n        }\n    }\n    return value;\n}\n\n/**\n * This computes the maximum number in an array.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x sample of one or more data points\n * @returns {number} maximum value\n * @throws {Error} if the length of x is less than one\n * @example\n * max([1, 2, 3, 4]);\n * // => 4\n */\nfunction max(x) {\n    if (x.length === 0) {\n        throw new Error(\"max requires at least one data point\");\n    }\n\n    var value = x[0];\n    for (var i = 1; i < x.length; i++) {\n        if (x[i] > value) {\n            value = x[i];\n        }\n    }\n    return value;\n}\n\n/**\n * This computes the minimum & maximum number in an array.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x sample of one or more data points\n * @returns {Array<number>} minimum & maximum value\n * @throws {Error} if the length of x is less than one\n * @example\n * extent([1, 2, 3, 4]);\n * // => [1, 4]\n */\nfunction extent(x) {\n    if (x.length === 0) {\n        throw new Error(\"extent requires at least one data point\");\n    }\n\n    var min = x[0];\n    var max = x[0];\n    for (var i = 1; i < x.length; i++) {\n        if (x[i] > max) {\n            max = x[i];\n        }\n        if (x[i] < min) {\n            min = x[i];\n        }\n    }\n    return [min, max];\n}\n\n/**\n * The minimum is the lowest number in the array. With a sorted array,\n * the first element in the array is always the smallest, so this calculation\n * can be done in one step, or constant time.\n *\n * @param {Array<number>} x input\n * @returns {number} minimum value\n * @example\n * minSorted([-100, -10, 1, 2, 5]); // => -100\n */\nfunction minSorted(x) {\n    return x[0];\n}\n\n/**\n * The maximum is the highest number in the array. With a sorted array,\n * the last element in the array is always the largest, so this calculation\n * can be done in one step, or constant time.\n *\n * @param {Array<number>} x input\n * @returns {number} maximum value\n * @example\n * maxSorted([-100, -10, 1, 2, 5]); // => 5\n */\nfunction maxSorted(x) {\n    return x[x.length - 1];\n}\n\n/**\n * The extent is the lowest & highest number in the array. With a sorted array,\n * the first element in the array is always the lowest while the last element is always the largest, so this calculation\n * can be done in one step, or constant time.\n *\n * @param {Array<number>} x input\n * @returns {Array<number>} minimum & maximum value\n * @example\n * extentSorted([-100, -10, 1, 2, 5]); // => [-100, 5]\n */\nfunction extentSorted(x) {\n    return [x[0], x[x.length - 1]];\n}\n\n/**\n * The simple [sum](https://en.wikipedia.org/wiki/Summation) of an array\n * is the result of adding all numbers together, starting from zero.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x input\n * @return {number} sum of all input numbers\n * @example\n * sumSimple([1, 2, 3]); // => 6\n */\nfunction sumSimple(x) {\n    var value = 0;\n    for (var i = 0; i < x.length; i++) {\n        if (typeof x[i] !== \"number\") {\n            return Number.NaN;\n        }\n        value += x[i];\n    }\n    return value;\n}\n\n/**\n * The [product](https://en.wikipedia.org/wiki/Product_(mathematics)) of an array\n * is the result of multiplying all numbers together, starting using one as the multiplicative identity.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x input\n * @return {number} product of all input numbers\n * @example\n * product([1, 2, 3, 4]); // => 24\n */\nfunction product(x) {\n    var value = 1;\n    for (var i = 0; i < x.length; i++) {\n        value *= x[i];\n    }\n    return value;\n}\n\n/**\n * This is the internal implementation of quantiles: when you know\n * that the order is sorted, you don't need to re-sort it, and the computations\n * are faster.\n *\n * @param {Array<number>} x sample of one or more data points\n * @param {number} p desired quantile: a number between 0 to 1, inclusive\n * @returns {number} quantile value\n * @throws {Error} if p ix outside of the range from 0 to 1\n * @throws {Error} if x is empty\n * @example\n * quantileSorted([3, 6, 7, 8, 8, 9, 10, 13, 15, 16, 20], 0.5); // => 9\n */\nfunction quantileSorted(x, p) {\n    var idx = x.length * p;\n    if (x.length === 0) {\n        throw new Error(\"quantile requires at least one data point.\");\n    } else if (p < 0 || p > 1) {\n        throw new Error(\"quantiles must be between 0 and 1\");\n    } else if (p === 1) {\n        // If p is 1, directly return the last element\n        return x[x.length - 1];\n    } else if (p === 0) {\n        // If p is 0, directly return the first element\n        return x[0];\n    } else if (idx % 1 !== 0) {\n        // If p is not integer, return the next element in array\n        return x[Math.ceil(idx) - 1];\n    } else if (x.length % 2 === 0) {\n        // If the list has even-length, we'll take the average of this number\n        // and the next value, if there is one\n        return (x[idx - 1] + x[idx]) / 2;\n    } else {\n        // Finally, in the simple case of an integer value\n        // with an odd-length list, return the x value at the index.\n        return x[idx];\n    }\n}\n\n/**\n * Rearrange items in `arr` so that all items in `[left, k]` range are the smallest.\n * The `k`-th element will have the `(k - left + 1)`-th smallest value in `[left, right]`.\n *\n * Implements Floyd-Rivest selection algorithm https://en.wikipedia.org/wiki/Floyd-Rivest_algorithm\n *\n * @param {Array<number>} arr input array\n * @param {number} k pivot index\n * @param {number} [left] left index\n * @param {number} [right] right index\n * @returns {void} mutates input array\n * @example\n * var arr = [65, 28, 59, 33, 21, 56, 22, 95, 50, 12, 90, 53, 28, 77, 39];\n * quickselect(arr, 8);\n * // = [39, 28, 28, 33, 21, 12, 22, 50, 53, 56, 59, 65, 90, 77, 95]\n */\nfunction quickselect(arr, k, left, right) {\n    left = left || 0;\n    right = right || arr.length - 1;\n\n    while (right > left) {\n        // 600 and 0.5 are arbitrary constants chosen in the original paper to minimize execution time\n        if (right - left > 600) {\n            var n = right - left + 1;\n            var m = k - left + 1;\n            var z = Math.log(n);\n            var s = 0.5 * Math.exp((2 * z) / 3);\n            var sd = 0.5 * Math.sqrt((z * s * (n - s)) / n);\n            if (m - n / 2 < 0) { sd *= -1; }\n            var newLeft = Math.max(left, Math.floor(k - (m * s) / n + sd));\n            var newRight = Math.min(\n                right,\n                Math.floor(k + ((n - m) * s) / n + sd)\n            );\n            quickselect(arr, k, newLeft, newRight);\n        }\n\n        var t = arr[k];\n        var i = left;\n        var j = right;\n\n        swap(arr, left, k);\n        if (arr[right] > t) { swap(arr, left, right); }\n\n        while (i < j) {\n            swap(arr, i, j);\n            i++;\n            j--;\n            while (arr[i] < t) { i++; }\n            while (arr[j] > t) { j--; }\n        }\n\n        if (arr[left] === t) { swap(arr, left, j); }\n        else {\n            j++;\n            swap(arr, j, right);\n        }\n\n        if (j <= k) { left = j + 1; }\n        if (k <= j) { right = j - 1; }\n    }\n}\n\nfunction swap(arr, i, j) {\n    var tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\n/**\n * The [quantile](https://en.wikipedia.org/wiki/Quantile):\n * this is a population quantile, since we assume to know the entire\n * dataset in this library. This is an implementation of the\n * [Quantiles of a Population](http://en.wikipedia.org/wiki/Quantile#Quantiles_of_a_population)\n * algorithm from wikipedia.\n *\n * Sample is a one-dimensional array of numbers,\n * and p is either a decimal number from 0 to 1 or an array of decimal\n * numbers from 0 to 1.\n * In terms of a k/q quantile, p = k/q - it's just dealing with fractions or dealing\n * with decimal values.\n * When p is an array, the result of the function is also an array containing the appropriate\n * quantiles in input order\n *\n * @param {Array<number>} x sample of one or more numbers\n * @param {Array<number> | number} p the desired quantile, as a number between 0 and 1\n * @returns {number} quantile\n * @example\n * quantile([3, 6, 7, 8, 8, 9, 10, 13, 15, 16, 20], 0.5); // => 9\n */\nfunction quantile(x, p) {\n    var copy = x.slice();\n\n    if (Array.isArray(p)) {\n        // rearrange elements so that each element corresponding to a requested\n        // quantile is on a place it would be if the array was fully sorted\n        multiQuantileSelect(copy, p);\n        // Initialize the result array\n        var results = [];\n        // For each requested quantile\n        for (var i = 0; i < p.length; i++) {\n            results[i] = quantileSorted(copy, p[i]);\n        }\n        return results;\n    } else {\n        var idx = quantileIndex(copy.length, p);\n        quantileSelect(copy, idx, 0, copy.length - 1);\n        return quantileSorted(copy, p);\n    }\n}\n\nfunction quantileSelect(arr, k, left, right) {\n    if (k % 1 === 0) {\n        quickselect(arr, k, left, right);\n    } else {\n        k = Math.floor(k);\n        quickselect(arr, k, left, right);\n        quickselect(arr, k + 1, k + 1, right);\n    }\n}\n\nfunction multiQuantileSelect(arr, p) {\n    var indices = [0];\n    for (var i = 0; i < p.length; i++) {\n        indices.push(quantileIndex(arr.length, p[i]));\n    }\n    indices.push(arr.length - 1);\n    indices.sort(compare);\n\n    var stack = [0, indices.length - 1];\n\n    while (stack.length) {\n        var r = Math.ceil(stack.pop());\n        var l = Math.floor(stack.pop());\n        if (r - l <= 1) { continue; }\n\n        var m = Math.floor((l + r) / 2);\n        quantileSelect(\n            arr,\n            indices[m],\n            Math.floor(indices[l]),\n            Math.ceil(indices[r])\n        );\n\n        stack.push(l, m, m, r);\n    }\n}\n\nfunction compare(a, b) {\n    return a - b;\n}\n\nfunction quantileIndex(len, p) {\n    var idx = len * p;\n    if (p === 1) {\n        // If p is 1, directly return the last index\n        return len - 1;\n    } else if (p === 0) {\n        // If p is 0, directly return the first index\n        return 0;\n    } else if (idx % 1 !== 0) {\n        // If index is not integer, return the next index in array\n        return Math.ceil(idx) - 1;\n    } else if (len % 2 === 0) {\n        // If the list has even-length, we'll return the middle of two indices\n        // around quantile to indicate that we need an average value of the two\n        return idx - 0.5;\n    } else {\n        // Finally, in the simple case of an integer index\n        // with an odd-length list, return the index\n        return idx;\n    }\n}\n\n/* eslint no-bitwise: 0 */\n\n/**\n * This function returns the quantile in which one would find the given value in\n * the given array. With a sorted array, leveraging binary search, we can find\n * this information in logarithmic time.\n *\n * @param {Array<number>} x input\n * @returns {number} value value\n * @example\n * quantileRankSorted([1, 2, 3, 4], 3); // => 0.75\n * quantileRankSorted([1, 2, 3, 3, 4], 3); // => 0.7\n * quantileRankSorted([1, 2, 3, 4], 6); // => 1\n * quantileRankSorted([1, 2, 3, 3, 5], 4); // => 0.8\n */\nfunction quantileRankSorted(x, value) {\n    // Value is lesser than any value in the array\n    if (value < x[0]) {\n        return 0;\n    }\n\n    // Value is greater than any value in the array\n    if (value > x[x.length - 1]) {\n        return 1;\n    }\n\n    var l = lowerBound(x, value);\n\n    // Value is not in the array\n    if (x[l] !== value) {\n        return l / x.length;\n    }\n\n    l++;\n\n    var u = upperBound(x, value);\n\n    // The value exists only once in the array\n    if (u === l) {\n        return l / x.length;\n    }\n\n    // Here, we are basically computing the mean of the range of indices\n    // containing our searched value. But, instead, of initializing an\n    // array and looping over it, there is a dedicated math formula that\n    // we apply below to get the result.\n    var r = u - l + 1;\n    var sum = (r * (u + l)) / 2;\n    var mean = sum / r;\n\n    return mean / x.length;\n}\n\nfunction lowerBound(x, value) {\n    var mid = 0;\n    var lo = 0;\n    var hi = x.length;\n\n    while (lo < hi) {\n        mid = (lo + hi) >>> 1;\n\n        if (value <= x[mid]) {\n            hi = mid;\n        } else {\n            lo = -~mid;\n        }\n    }\n\n    return lo;\n}\n\nfunction upperBound(x, value) {\n    var mid = 0;\n    var lo = 0;\n    var hi = x.length;\n\n    while (lo < hi) {\n        mid = (lo + hi) >>> 1;\n\n        if (value >= x[mid]) {\n            lo = -~mid;\n        } else {\n            hi = mid;\n        }\n    }\n\n    return lo;\n}\n\n/**\n * This function returns the quantile in which one would find the given value in\n * the given array. It will copy and sort your array before each run, so\n * if you know your array is already sorted, you should use `quantileRankSorted`\n * instead.\n *\n * @param {Array<number>} x input\n * @returns {number} value value\n * @example\n * quantileRank([4, 3, 1, 2], 3); // => 0.75\n * quantileRank([4, 3, 2, 3, 1], 3); // => 0.7\n * quantileRank([2, 4, 1, 3], 6); // => 1\n * quantileRank([5, 3, 1, 2, 3], 4); // => 0.8\n */\nfunction quantileRank(x, value) {\n    // Cloning and sorting the array\n    var sortedCopy = numericSort(x);\n\n    return quantileRankSorted(sortedCopy, value);\n}\n\n/**\n * The [Interquartile range](http://en.wikipedia.org/wiki/Interquartile_range) is\n * a measure of statistical dispersion, or how scattered, spread, or\n * concentrated a distribution is. It's computed as the difference between\n * the third quartile and first quartile.\n *\n * @param {Array<number>} x sample of one or more numbers\n * @returns {number} interquartile range: the span between lower and upper quartile,\n * 0.25 and 0.75\n * @example\n * interquartileRange([0, 1, 2, 3]); // => 2\n */\nfunction interquartileRange(x) {\n    // Interquartile range is the span between the upper quartile,\n    // at `0.75`, and lower quartile, `0.25`\n    var q1 = quantile(x, 0.75);\n    var q2 = quantile(x, 0.25);\n\n    if (typeof q1 === \"number\" && typeof q2 === \"number\") {\n        return q1 - q2;\n    }\n}\n\n/**\n * The [median](http://en.wikipedia.org/wiki/Median) is\n * the middle number of a list. This is often a good indicator of 'the middle'\n * when there are outliers that skew the `mean()` value.\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * The median isn't necessarily one of the elements in the list: the value\n * can be the average of two elements if the list has an even length\n * and the two central values are different.\n *\n * @param {Array<number>} x input\n * @returns {number} median value\n * @example\n * median([10, 2, 5, 100, 2, 1]); // => 3.5\n */\nfunction median(x) {\n    return +quantile(x, 0.5);\n}\n\n/**\n * The [Median Absolute Deviation](http://en.wikipedia.org/wiki/Median_absolute_deviation) is\n * a robust measure of statistical\n * dispersion. It is more resilient to outliers than the standard deviation.\n *\n * @param {Array<number>} x input array\n * @returns {number} median absolute deviation\n * @example\n * medianAbsoluteDeviation([1, 1, 2, 2, 4, 6, 9]); // => 1\n */\nfunction medianAbsoluteDeviation(x) {\n    var medianValue = median(x);\n    var medianAbsoluteDeviations = [];\n\n    // Make a list of absolute deviations from the median\n    for (var i = 0; i < x.length; i++) {\n        medianAbsoluteDeviations.push(Math.abs(x[i] - medianValue));\n    }\n\n    // Find the median value of that list\n    return median(medianAbsoluteDeviations);\n}\n\n/**\n * Split an array into chunks of a specified size. This function\n * has the same behavior as [PHP's array_chunk](http://php.net/manual/en/function.array-chunk.php)\n * function, and thus will insert smaller-sized chunks at the end if\n * the input size is not divisible by the chunk size.\n *\n * `x` is expected to be an array, and `chunkSize` a number.\n * The `x` array can contain any kind of data.\n *\n * @param {Array} x a sample\n * @param {number} chunkSize size of each output array. must be a positive integer\n * @returns {Array<Array>} a chunked array\n * @throws {Error} if chunk size is less than 1 or not an integer\n * @example\n * chunk([1, 2, 3, 4, 5, 6], 2);\n * // => [[1, 2], [3, 4], [5, 6]]\n */\nfunction chunk(x, chunkSize) {\n    // a list of result chunks, as arrays in an array\n    var output = [];\n\n    // `chunkSize` must be zero or higher - otherwise the loop below,\n    // in which we call `start += chunkSize`, will loop infinitely.\n    // So, we'll detect and throw in that case to indicate\n    // invalid input.\n    if (chunkSize < 1) {\n        throw new Error(\"chunk size must be a positive number\");\n    }\n\n    if (Math.floor(chunkSize) !== chunkSize) {\n        throw new Error(\"chunk size must be an integer\");\n    }\n\n    // `start` is the index at which `.slice` will start selecting\n    // new array elements\n    for (var start = 0; start < x.length; start += chunkSize) {\n        // for each chunk, slice that part of the array and add it\n        // to the output. The `.slice` function does not change\n        // the original array.\n        output.push(x.slice(start, start + chunkSize));\n    }\n    return output;\n}\n\n/**\n * Sampling with replacement is a type of sampling that allows the same\n * item to be picked out of a population more than once.\n *\n * @param {Array<*>} x an array of any kind of value\n * @param {number} n count of how many elements to take\n * @param {Function} [randomSource=Math.random] an optional entropy source that\n * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)\n * @return {Array} n sampled items from the population\n * @example\n * var values = [1, 2, 3, 4];\n * sampleWithReplacement(values, 2); // returns 2 random values, like [2, 4];\n */\nfunction sampleWithReplacement(x, n, randomSource) {\n    if (x.length === 0) {\n        return [];\n    }\n\n    // a custom random number source can be provided if you want to use\n    // a fixed seed or another random number generator, like\n    // [random-js](https://www.npmjs.org/package/random-js)\n    randomSource = randomSource || Math.random;\n\n    var length = x.length;\n    var sample = [];\n\n    for (var i = 0; i < n; i++) {\n        var index = Math.floor(randomSource() * length);\n\n        sample.push(x[index]);\n    }\n\n    return sample;\n}\n\n/**\n * A [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)\n * in-place - which means that it **will change the order of the original\n * array by reference**.\n *\n * This is an algorithm that generates a random [permutation](https://en.wikipedia.org/wiki/Permutation)\n * of a set.\n *\n * @param {Array} x sample of one or more numbers\n * @param {Function} [randomSource=Math.random] an optional entropy source that\n * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)\n * @returns {Array} x\n * @example\n * var x = [1, 2, 3, 4];\n * shuffleInPlace(x);\n * // x is shuffled to a value like [2, 1, 4, 3]\n */\nfunction shuffleInPlace(x, randomSource) {\n    // a custom random number source can be provided if you want to use\n    // a fixed seed or another random number generator, like\n    // [random-js](https://www.npmjs.org/package/random-js)\n    randomSource = randomSource || Math.random;\n\n    // store the current length of the x to determine\n    // when no elements remain to shuffle.\n    var length = x.length;\n\n    // temporary is used to hold an item when it is being\n    // swapped between indices.\n    var temporary;\n\n    // The index to swap at each stage.\n    var index;\n\n    // While there are still items to shuffle\n    while (length > 0) {\n        // choose a random index within the subset of the array\n        // that is not yet shuffled\n        index = Math.floor(randomSource() * length--);\n\n        // store the value that we'll move temporarily\n        temporary = x[length];\n\n        // swap the value at `x[length]` with `x[index]`\n        x[length] = x[index];\n        x[index] = temporary;\n    }\n\n    return x;\n}\n\n/**\n * A [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)\n * is a fast way to create a random permutation of a finite set. This is\n * a function around `shuffle_in_place` that adds the guarantee that\n * it will not modify its input.\n *\n * @param {Array} x sample of 0 or more numbers\n * @param {Function} [randomSource=Math.random] an optional entropy source that\n * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)\n * @return {Array} shuffled version of input\n * @example\n * var shuffled = shuffle([1, 2, 3, 4]);\n * shuffled; // = [2, 3, 1, 4] or any other random permutation\n */\nfunction shuffle(x, randomSource) {\n    // slice the original array so that it is not modified\n    var sample = x.slice();\n\n    // and then shuffle that shallow-copied array, in place\n    return shuffleInPlace(sample, randomSource);\n}\n\n/**\n * Create a [simple random sample](http://en.wikipedia.org/wiki/Simple_random_sample)\n * from a given array of `n` elements.\n *\n * The sampled values will be in any order, not necessarily the order\n * they appear in the input.\n *\n * @param {Array<any>} x input array. can contain any type\n * @param {number} n count of how many elements to take\n * @param {Function} [randomSource=Math.random] an optional entropy source that\n * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)\n * @return {Array} subset of n elements in original array\n *\n * @example\n * var values = [1, 2, 4, 5, 6, 7, 8, 9];\n * sample(values, 3); // returns 3 random values, like [2, 5, 8];\n */\nfunction sample(x, n, randomSource) {\n    // shuffle the original array using a fisher-yates shuffle\n    var shuffled = shuffle(x, randomSource);\n\n    // and then return a subset of it - the first `n` elements.\n    return shuffled.slice(0, n);\n}\n\n/**\n * Create a new column x row matrix.\n *\n * @private\n * @param {number} columns\n * @param {number} rows\n * @return {Array<Array<number>>} matrix\n * @example\n * makeMatrix(10, 10);\n */\nfunction makeMatrix(columns, rows) {\n    var matrix = [];\n    for (var i = 0; i < columns; i++) {\n        var column = [];\n        for (var j = 0; j < rows; j++) {\n            column.push(0);\n        }\n        matrix.push(column);\n    }\n    return matrix;\n}\n\n/**\n * For a sorted input, counting the number of unique values\n * is possible in constant time and constant memory. This is\n * a simple implementation of the algorithm.\n *\n * Values are compared with `===`, so objects and non-primitive objects\n * are not handled in any special way.\n *\n * @param {Array<*>} x an array of any kind of value\n * @returns {number} count of unique values\n * @example\n * uniqueCountSorted([1, 2, 3]); // => 3\n * uniqueCountSorted([1, 1, 1]); // => 1\n */\nfunction uniqueCountSorted(x) {\n    var uniqueValueCount = 0;\n    var lastSeenValue;\n    for (var i = 0; i < x.length; i++) {\n        if (i === 0 || x[i] !== lastSeenValue) {\n            lastSeenValue = x[i];\n            uniqueValueCount++;\n        }\n    }\n    return uniqueValueCount;\n}\n\n/**\n * Generates incrementally computed values based on the sums and sums of\n * squares for the data array\n *\n * @private\n * @param {number} j\n * @param {number} i\n * @param {Array<number>} sums\n * @param {Array<number>} sumsOfSquares\n * @return {number}\n * @example\n * ssq(0, 1, [-1, 0, 2], [1, 1, 5]);\n */\nfunction ssq(j, i, sums, sumsOfSquares) {\n    var sji; // s(j, i)\n    if (j > 0) {\n        var muji = (sums[i] - sums[j - 1]) / (i - j + 1); // mu(j, i)\n        sji =\n            sumsOfSquares[i] - sumsOfSquares[j - 1] - (i - j + 1) * muji * muji;\n    } else {\n        sji = sumsOfSquares[i] - (sums[i] * sums[i]) / (i + 1);\n    }\n    if (sji < 0) {\n        return 0;\n    }\n    return sji;\n}\n\n/**\n * Function that recursively divides and conquers computations\n * for cluster j\n *\n * @private\n * @param {number} iMin Minimum index in cluster to be computed\n * @param {number} iMax Maximum index in cluster to be computed\n * @param {number} cluster Index of the cluster currently being computed\n * @param {Array<Array<number>>} matrix\n * @param {Array<Array<number>>} backtrackMatrix\n * @param {Array<number>} sums\n * @param {Array<number>} sumsOfSquares\n */\nfunction fillMatrixColumn(\n    iMin,\n    iMax,\n    cluster,\n    matrix,\n    backtrackMatrix,\n    sums,\n    sumsOfSquares\n) {\n    if (iMin > iMax) {\n        return;\n    }\n\n    // Start at midpoint between iMin and iMax\n    var i = Math.floor((iMin + iMax) / 2);\n\n    matrix[cluster][i] = matrix[cluster - 1][i - 1];\n    backtrackMatrix[cluster][i] = i;\n\n    var jlow = cluster; // the lower end for j\n\n    if (iMin > cluster) {\n        jlow = Math.max(jlow, backtrackMatrix[cluster][iMin - 1] || 0);\n    }\n    jlow = Math.max(jlow, backtrackMatrix[cluster - 1][i] || 0);\n\n    var jhigh = i - 1; // the upper end for j\n    if (iMax < matrix[0].length - 1) {\n        /* c8 ignore start */\n        jhigh = Math.min(jhigh, backtrackMatrix[cluster][iMax + 1] || 0);\n        /* c8 ignore end */\n    }\n\n    var sji;\n    var sjlowi;\n    var ssqjlow;\n    var ssqj;\n    for (var j = jhigh; j >= jlow; --j) {\n        sji = ssq(j, i, sums, sumsOfSquares);\n\n        if (sji + matrix[cluster - 1][jlow - 1] >= matrix[cluster][i]) {\n            break;\n        }\n\n        // Examine the lower bound of the cluster border\n        sjlowi = ssq(jlow, i, sums, sumsOfSquares);\n\n        ssqjlow = sjlowi + matrix[cluster - 1][jlow - 1];\n\n        if (ssqjlow < matrix[cluster][i]) {\n            // Shrink the lower bound\n            matrix[cluster][i] = ssqjlow;\n            backtrackMatrix[cluster][i] = jlow;\n        }\n        jlow++;\n\n        ssqj = sji + matrix[cluster - 1][j - 1];\n        if (ssqj < matrix[cluster][i]) {\n            matrix[cluster][i] = ssqj;\n            backtrackMatrix[cluster][i] = j;\n        }\n    }\n\n    fillMatrixColumn(\n        iMin,\n        i - 1,\n        cluster,\n        matrix,\n        backtrackMatrix,\n        sums,\n        sumsOfSquares\n    );\n    fillMatrixColumn(\n        i + 1,\n        iMax,\n        cluster,\n        matrix,\n        backtrackMatrix,\n        sums,\n        sumsOfSquares\n    );\n}\n\n/**\n * Initializes the main matrices used in Ckmeans and kicks\n * off the divide and conquer cluster computation strategy\n *\n * @private\n * @param {Array<number>} data sorted array of values\n * @param {Array<Array<number>>} matrix\n * @param {Array<Array<number>>} backtrackMatrix\n */\nfunction fillMatrices(data, matrix, backtrackMatrix) {\n    var nValues = matrix[0].length;\n\n    // Shift values by the median to improve numeric stability\n    var shift = data[Math.floor(nValues / 2)];\n\n    // Cumulative sum and cumulative sum of squares for all values in data array\n    var sums = [];\n    var sumsOfSquares = [];\n\n    // Initialize first column in matrix & backtrackMatrix\n    for (var i = 0, shiftedValue = (void 0); i < nValues; ++i) {\n        shiftedValue = data[i] - shift;\n        if (i === 0) {\n            sums.push(shiftedValue);\n            sumsOfSquares.push(shiftedValue * shiftedValue);\n        } else {\n            sums.push(sums[i - 1] + shiftedValue);\n            sumsOfSquares.push(\n                sumsOfSquares[i - 1] + shiftedValue * shiftedValue\n            );\n        }\n\n        // Initialize for cluster = 0\n        matrix[0][i] = ssq(0, i, sums, sumsOfSquares);\n        backtrackMatrix[0][i] = 0;\n    }\n\n    // Initialize the rest of the columns\n    var iMin;\n    for (var cluster = 1; cluster < matrix.length; ++cluster) {\n        if (cluster < matrix.length - 1) {\n            iMin = cluster;\n        } else {\n            // No need to compute matrix[K-1][0] ... matrix[K-1][N-2]\n            iMin = nValues - 1;\n        }\n\n        fillMatrixColumn(\n            iMin,\n            nValues - 1,\n            cluster,\n            matrix,\n            backtrackMatrix,\n            sums,\n            sumsOfSquares\n        );\n    }\n}\n\n/**\n * Ckmeans clustering is an improvement on heuristic-based clustering\n * approaches like Jenks. The algorithm was developed in\n * [Haizhou Wang and Mingzhou Song](http://journal.r-project.org/archive/2011-2/RJournal_2011-2_Wang+Song.pdf)\n * as a [dynamic programming](https://en.wikipedia.org/wiki/Dynamic_programming) approach\n * to the problem of clustering numeric data into groups with the least\n * within-group sum-of-squared-deviations.\n *\n * Minimizing the difference within groups - what Wang & Song refer to as\n * `withinss`, or within sum-of-squares, means that groups are optimally\n * homogenous within and the data is split into representative groups.\n * This is very useful for visualization, where you may want to represent\n * a continuous variable in discrete color or style groups. This function\n * can provide groups that emphasize differences between data.\n *\n * Being a dynamic approach, this algorithm is based on two matrices that\n * store incrementally-computed values for squared deviations and backtracking\n * indexes.\n *\n * This implementation is based on Ckmeans 3.4.6, which introduced a new divide\n * and conquer approach that improved runtime from O(kn^2) to O(kn log(n)).\n *\n * Unlike the [original implementation](https://cran.r-project.org/web/packages/Ckmeans.1d.dp/index.html),\n * this implementation does not include any code to automatically determine\n * the optimal number of clusters: this information needs to be explicitly\n * provided.\n *\n * ### References\n * _Ckmeans.1d.dp: Optimal k-means Clustering in One Dimension by Dynamic\n * Programming_ Haizhou Wang and Mingzhou Song ISSN 2073-4859\n *\n * from The R Journal Vol. 3/2, December 2011\n * @param {Array<number>} x input data, as an array of number values\n * @param {number} nClusters number of desired classes. This cannot be\n * greater than the number of values in the data array.\n * @returns {Array<Array<number>>} clustered input\n * @throws {Error} if the number of requested clusters is higher than the size of the data\n * @example\n * ckmeans([-1, 2, -1, 2, 4, 5, 6, -1, 2, -1], 3);\n * // The input, clustered into groups of similar numbers.\n * //= [[-1, -1, -1, -1], [2, 2, 2], [4, 5, 6]]);\n */\nfunction ckmeans(x, nClusters) {\n    if (nClusters > x.length) {\n        throw new Error(\n            \"cannot generate more classes than there are data values\"\n        );\n    }\n\n    var sorted = numericSort(x);\n    // we'll use this as the maximum number of clusters\n    var uniqueCount = uniqueCountSorted(sorted);\n\n    // if all of the input values are identical, there's one cluster\n    // with all of the input in it.\n    if (uniqueCount === 1) {\n        return [sorted];\n    }\n\n    // named 'S' originally\n    var matrix = makeMatrix(nClusters, sorted.length);\n    // named 'J' originally\n    var backtrackMatrix = makeMatrix(nClusters, sorted.length);\n\n    // This is a dynamic programming way to solve the problem of minimizing\n    // within-cluster sum of squares. It's similar to linear regression\n    // in this way, and this calculation incrementally computes the\n    // sum of squares that are later read.\n    fillMatrices(sorted, matrix, backtrackMatrix);\n\n    // The real work of Ckmeans clustering happens in the matrix generation:\n    // the generated matrices encode all possible clustering combinations, and\n    // once they're generated we can solve for the best clustering groups\n    // very quickly.\n    var clusters = [];\n    var clusterRight = backtrackMatrix[0].length - 1;\n\n    // Backtrack the clusters from the dynamic programming matrix. This\n    // starts at the bottom-right corner of the matrix (if the top-left is 0, 0),\n    // and moves the cluster target with the loop.\n    for (var cluster = backtrackMatrix.length - 1; cluster >= 0; cluster--) {\n        var clusterLeft = backtrackMatrix[cluster][clusterRight];\n\n        // fill the cluster from the sorted input by taking a slice of the\n        // array. the backtrack matrix makes this easy - it stores the\n        // indexes where the cluster should start and end.\n        clusters[cluster] = sorted.slice(clusterLeft, clusterRight + 1);\n\n        if (cluster > 0) {\n            clusterRight = clusterLeft - 1;\n        }\n    }\n\n    return clusters;\n}\n\n/*\n * Pull Breaks Values for Jenks\n *\n * the second part of the jenks recipe: take the calculated matrices\n * and derive an array of n breaks.\n *\n * @private\n */\nfunction jenksBreaks(data, lowerClassLimits, nClasses) {\n    var k = data.length;\n    var kclass = [];\n    var countNum = nClasses;\n\n    // the calculation of classes will never include the upper\n    // bound, so we need to explicitly set it\n    kclass[nClasses] = data[data.length - 1];\n\n    // the lowerClassLimits matrix is used as indices into itself\n    // here: the `k` variable is reused in each iteration.\n    while (countNum > 0) {\n        kclass[countNum - 1] = data[lowerClassLimits[k][countNum] - 1];\n        k = lowerClassLimits[k][countNum] - 1;\n        countNum--;\n    }\n\n    return kclass;\n}\n\n/*\n * Compute Matrices for Jenks\n *\n * Compute the matrices required for Jenks breaks. These matrices\n * can be used for any classing of data with `classes <= nClasses`\n *\n * @private\n */\nfunction jenksMatrices(data, nClasses) {\n    // in the original implementation, these matrices are referred to\n    // as `LC` and `OP`\n    //\n    // * lowerClassLimits (LC): optimal lower class limits\n    // * varianceCombinations (OP): optimal variance combinations for all classes\n    var lowerClassLimits = [];\n    var varianceCombinations = [];\n    // loop counters\n    var i;\n    var j;\n    // the variance, as computed at each step in the calculation\n    var variance = 0;\n\n    // Initialize and fill each matrix with zeroes\n    for (i = 0; i < data.length + 1; i++) {\n        var tmp1 = [];\n        var tmp2 = [];\n        // despite these arrays having the same values, we need\n        // to keep them separate so that changing one does not change\n        // the other\n        for (j = 0; j < nClasses + 1; j++) {\n            tmp1.push(0);\n            tmp2.push(0);\n        }\n        lowerClassLimits.push(tmp1);\n        varianceCombinations.push(tmp2);\n    }\n\n    for (i = 1; i < nClasses + 1; i++) {\n        lowerClassLimits[1][i] = 1;\n        varianceCombinations[1][i] = 0;\n        // in the original implementation, 9999999 is used but\n        // since Javascript has `Infinity`, we use that.\n        for (j = 2; j < data.length + 1; j++) {\n            varianceCombinations[j][i] = Number.POSITIVE_INFINITY;\n        }\n    }\n\n    for (var l = 2; l < data.length + 1; l++) {\n        // `SZ` originally. this is the sum of the values seen thus\n        // far when calculating variance.\n        var sum = 0;\n        // `ZSQ` originally. the sum of squares of values seen\n        // thus far\n        var sumSquares = 0;\n        // `WT` originally. This is the number of\n        var w = 0;\n        // `IV` originally\n        var i4 = 0;\n\n        // in several instances, you could say `Math.pow(x, 2)`\n        // instead of `x * x`, but this is slower in some browsers\n        // introduces an unnecessary concept.\n        for (var m = 1; m < l + 1; m++) {\n            // `III` originally\n            var lowerClassLimit = l - m + 1;\n            var val = data[lowerClassLimit - 1];\n\n            // here we're estimating variance for each potential classing\n            // of the data, for each potential number of classes. `w`\n            // is the number of data points considered so far.\n            w++;\n\n            // increase the current sum and sum-of-squares\n            sum += val;\n            sumSquares += val * val;\n\n            // the variance at this point in the sequence is the difference\n            // between the sum of squares and the total x 2, over the number\n            // of samples.\n            variance = sumSquares - (sum * sum) / w;\n\n            i4 = lowerClassLimit - 1;\n\n            if (i4 !== 0) {\n                for (j = 2; j < nClasses + 1; j++) {\n                    // if adding this element to an existing class\n                    // will increase its variance beyond the limit, break\n                    // the class at this point, setting the `lowerClassLimit`\n                    // at this point.\n                    if (\n                        varianceCombinations[l][j] >=\n                        variance + varianceCombinations[i4][j - 1]\n                    ) {\n                        lowerClassLimits[l][j] = lowerClassLimit;\n                        varianceCombinations[l][j] =\n                            variance + varianceCombinations[i4][j - 1];\n                    }\n                }\n            }\n        }\n\n        lowerClassLimits[l][1] = 1;\n        varianceCombinations[l][1] = variance;\n    }\n\n    // return the two matrices. for just providing breaks, only\n    // `lowerClassLimits` is needed, but variances can be useful to\n    // evaluate goodness of fit.\n    return {\n        lowerClassLimits: lowerClassLimits,\n        varianceCombinations: varianceCombinations\n    };\n}\n\n/**\n * The **[jenks natural breaks optimization](http://en.wikipedia.org/wiki/Jenks_natural_breaks_optimization)**\n * is an algorithm commonly used in cartography and visualization to decide\n * upon groupings of data values that minimize variance within themselves\n * and maximize variation between themselves.\n *\n * For instance, cartographers often use jenks in order to choose which\n * values are assigned to which colors in a [choropleth](https://en.wikipedia.org/wiki/Choropleth_map)\n * map.\n *\n * @param {Array<number>} data input data, as an array of number values\n * @param {number} nClasses number of desired classes\n * @returns {Array<number>} array of class break positions\n * // split data into 3 break points\n * jenks([1, 2, 4, 5, 7, 9, 10, 20], 3) // = [1, 7, 20, 20]\n */\nfunction jenks(data, nClasses) {\n    if (nClasses > data.length) {\n        return null;\n    }\n\n    // sort data in numerical order, since this is expected\n    // by the matrices function\n    data = data.slice().sort(function (a, b) {\n        return a - b;\n    });\n\n    // get our basic matrices\n    var matrices = jenksMatrices(data, nClasses);\n    // we only need lower class limits here\n    var lowerClassLimits = matrices.lowerClassLimits;\n\n    // extract nClasses out of the computed matrices\n    return jenksBreaks(data, lowerClassLimits, nClasses);\n}\n\n/**\n * Given an array of x, this will find the extent of the\n * x and return an array of breaks that can be used\n * to categorize the x into a number of classes. The\n * returned array will always be 1 longer than the number of\n * classes because it includes the minimum value.\n *\n * @param {Array<number>} x an array of number values\n * @param {number} nClasses number of desired classes\n * @returns {Array<number>} array of class break positions\n * @example\n * equalIntervalBreaks([1, 2, 3, 4, 5, 6], 4); // => [1, 2.25, 3.5, 4.75, 6]\n */\nfunction equalIntervalBreaks(x, nClasses) {\n    if (x.length < 2) {\n        return x;\n    }\n\n    var theMin = min(x);\n    var theMax = max(x);\n\n    // the first break will always be the minimum value\n    // in the xset\n    var breaks = [theMin];\n\n    // The size of each break is the full range of the x\n    // divided by the number of classes requested\n    var breakSize = (theMax - theMin) / nClasses;\n\n    // In the case of nClasses = 1, this loop won't run\n    // and the returned breaks will be [min, max]\n    for (var i = 1; i < nClasses; i++) {\n        breaks.push(breaks[0] + breakSize * i);\n    }\n\n    // the last break will always be the\n    // maximum.\n    breaks.push(theMax);\n\n    return breaks;\n}\n\n/**\n * [Sample covariance](https://en.wikipedia.org/wiki/Sample_mean_and_covariance) of two datasets:\n * how much do the two datasets move together?\n * x and y are two datasets, represented as arrays of numbers.\n *\n * @param {Array<number>} x a sample of two or more data points\n * @param {Array<number>} y a sample of two or more data points\n * @throws {Error} if x and y do not have equal lengths\n * @throws {Error} if x or y have length of one or less\n * @returns {number} sample covariance\n * @example\n * sampleCovariance([1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 1]); // => -3.5\n */\nfunction sampleCovariance(x, y) {\n    // The two datasets must have the same length which must be more than 1\n    if (x.length !== y.length) {\n        throw new Error(\"sampleCovariance requires samples with equal lengths\");\n    }\n\n    if (x.length < 2) {\n        throw new Error(\n            \"sampleCovariance requires at least two data points in each sample\"\n        );\n    }\n\n    // determine the mean of each dataset so that we can judge each\n    // value of the dataset fairly as the difference from the mean. this\n    // way, if one dataset is [1, 2, 3] and [2, 3, 4], their covariance\n    // does not suffer because of the difference in absolute values\n    var xmean = mean(x);\n    var ymean = mean(y);\n    var sum = 0;\n\n    // for each pair of values, the covariance increases when their\n    // difference from the mean is associated - if both are well above\n    // or if both are well below\n    // the mean, the covariance increases significantly.\n    for (var i = 0; i < x.length; i++) {\n        sum += (x[i] - xmean) * (y[i] - ymean);\n    }\n\n    // this is Bessels' Correction: an adjustment made to sample statistics\n    // that allows for the reduced degree of freedom entailed in calculating\n    // values from samples rather than complete populations.\n    var besselsCorrection = x.length - 1;\n\n    // the covariance is weighted by the length of the datasets.\n    return sum / besselsCorrection;\n}\n\n/**\n * The [sample variance](https://en.wikipedia.org/wiki/Variance#Sample_variance)\n * is the sum of squared deviations from the mean. The sample variance\n * is distinguished from the variance by the usage of [Bessel's Correction](https://en.wikipedia.org/wiki/Bessel's_correction):\n * instead of dividing the sum of squared deviations by the length of the input,\n * it is divided by the length minus one. This corrects the bias in estimating\n * a value from a set that you don't know if full.\n *\n * References:\n * * [Wolfram MathWorld on Sample Variance](http://mathworld.wolfram.com/SampleVariance.html)\n *\n * @param {Array<number>} x a sample of two or more data points\n * @throws {Error} if the length of x is less than 2\n * @return {number} sample variance\n * @example\n * sampleVariance([1, 2, 3, 4, 5]); // => 2.5\n */\nfunction sampleVariance(x) {\n    if (x.length < 2) {\n        throw new Error(\"sampleVariance requires at least two data points\");\n    }\n\n    var sumSquaredDeviationsValue = sumNthPowerDeviations(x, 2);\n\n    // this is Bessels' Correction: an adjustment made to sample statistics\n    // that allows for the reduced degree of freedom entailed in calculating\n    // values from samples rather than complete populations.\n    var besselsCorrection = x.length - 1;\n\n    // Find the mean value of that list\n    return sumSquaredDeviationsValue / besselsCorrection;\n}\n\n/**\n * The [sample standard deviation](http://en.wikipedia.org/wiki/Standard_deviation#Sample_standard_deviation)\n * is the square root of the sample variance.\n *\n * @param {Array<number>} x input array\n * @returns {number} sample standard deviation\n * @example\n * sampleStandardDeviation([2, 4, 4, 4, 5, 5, 7, 9]).toFixed(2);\n * // => '2.14'\n */\nfunction sampleStandardDeviation(x) {\n    var sampleVarianceX = sampleVariance(x);\n    return Math.sqrt(sampleVarianceX);\n}\n\n/**\n * The [correlation](http://en.wikipedia.org/wiki/Correlation_and_dependence) is\n * a measure of how correlated two datasets are, between -1 and 1\n *\n * @param {Array<number>} x first input\n * @param {Array<number>} y second input\n * @returns {number} sample correlation\n * @example\n * sampleCorrelation([1, 2, 3, 4, 5, 6], [2, 2, 3, 4, 5, 60]).toFixed(2);\n * // => '0.69'\n */\nfunction sampleCorrelation(x, y) {\n    var cov = sampleCovariance(x, y);\n    var xstd = sampleStandardDeviation(x);\n    var ystd = sampleStandardDeviation(y);\n\n    return cov / xstd / ystd;\n}\n\n/**\n * The [rank correlation](https://en.wikipedia.org/wiki/Rank_correlation) is\n * a measure of the strength of monotonic relationship between two arrays\n *\n * @param {Array<number>} x first input\n * @param {Array<number>} y second input\n * @returns {number} sample rank correlation\n */\nfunction sampleRankCorrelation(x, y) {\n    var xIndexes = x\n        .map(function (value, index) { return [value, index]; })\n        .sort(function (a, b) { return a[0] - b[0]; })\n        .map(function (pair) { return pair[1]; });\n    var yIndexes = y\n        .map(function (value, index) { return [value, index]; })\n        .sort(function (a, b) { return a[0] - b[0]; })\n        .map(function (pair) { return pair[1]; });\n\n    // At this step, we have an array of indexes\n    // that map from sorted numbers to their original indexes. We reverse\n    // that so that it is an array of the sorted destination index.\n    var xRanks = Array(xIndexes.length);\n    var yRanks = Array(xIndexes.length);\n    for (var i = 0; i < xIndexes.length; i++) {\n        xRanks[xIndexes[i]] = i;\n        yRanks[yIndexes[i]] = i;\n    }\n\n    return sampleCorrelation(xRanks, yRanks);\n}\n\n/**\n * [Skewness](http://en.wikipedia.org/wiki/Skewness) is\n * a measure of the extent to which a probability distribution of a\n * real-valued random variable \"leans\" to one side of the mean.\n * The skewness value can be positive or negative, or even undefined.\n *\n * Implementation is based on the adjusted Fisher-Pearson standardized\n * moment coefficient, which is the version found in Excel and several\n * statistical packages including Minitab, SAS and SPSS.\n *\n * @since 4.1.0\n * @param {Array<number>} x a sample of 3 or more data points\n * @returns {number} sample skewness\n * @throws {Error} if x has length less than 3\n * @example\n * sampleSkewness([2, 4, 6, 3, 1]); // => 0.590128656384365\n */\nfunction sampleSkewness(x) {\n    if (x.length < 3) {\n        throw new Error(\"sampleSkewness requires at least three data points\");\n    }\n\n    var meanValue = mean(x);\n    var tempValue;\n    var sumSquaredDeviations = 0;\n    var sumCubedDeviations = 0;\n\n    for (var i = 0; i < x.length; i++) {\n        tempValue = x[i] - meanValue;\n        sumSquaredDeviations += tempValue * tempValue;\n        sumCubedDeviations += tempValue * tempValue * tempValue;\n    }\n\n    // this is Bessels' Correction: an adjustment made to sample statistics\n    // that allows for the reduced degree of freedom entailed in calculating\n    // values from samples rather than complete populations.\n    var besselsCorrection = x.length - 1;\n\n    // Find the mean value of that list\n    var theSampleStandardDeviation = Math.sqrt(\n        sumSquaredDeviations / besselsCorrection\n    );\n\n    var n = x.length;\n    var cubedS = Math.pow(theSampleStandardDeviation, 3);\n\n    return (n * sumCubedDeviations) / ((n - 1) * (n - 2) * cubedS);\n}\n\n/**\n * [Kurtosis](http://en.wikipedia.org/wiki/Kurtosis) is\n * a measure of the heaviness of a distribution's tails relative to its\n * variance. The kurtosis value can be positive or negative, or even undefined.\n *\n * Implementation is based on Fisher's excess kurtosis definition and uses\n * unbiased moment estimators. This is the version found in Excel and available\n * in several statistical packages, including SAS and SciPy.\n *\n * @param {Array<number>} x a sample of 4 or more data points\n * @returns {number} sample kurtosis\n * @throws {Error} if x has length less than 4\n * @example\n * sampleKurtosis([1, 2, 2, 3, 5]); // => 1.4555765595463122\n */\nfunction sampleKurtosis(x) {\n    var n = x.length;\n\n    if (n < 4) {\n        throw new Error(\"sampleKurtosis requires at least four data points\");\n    }\n\n    var meanValue = mean(x);\n    var tempValue;\n    var secondCentralMoment = 0;\n    var fourthCentralMoment = 0;\n\n    for (var i = 0; i < n; i++) {\n        tempValue = x[i] - meanValue;\n        secondCentralMoment += tempValue * tempValue;\n        fourthCentralMoment += tempValue * tempValue * tempValue * tempValue;\n    }\n\n    return (\n        ((n - 1) / ((n - 2) * (n - 3))) *\n        ((n * (n + 1) * fourthCentralMoment) /\n            (secondCentralMoment * secondCentralMoment) -\n            3 * (n - 1))\n    );\n}\n\n/**\n * Implementation of [Heap's Algorithm](https://en.wikipedia.org/wiki/Heap%27s_algorithm)\n * for generating permutations.\n *\n * @param {Array} elements any type of data\n * @returns {Array<Array>} array of permutations\n */\nfunction permutationsHeap(elements) {\n    var indexes = new Array(elements.length);\n    var permutations = [elements.slice()];\n\n    for (var i = 0; i < elements.length; i++) {\n        indexes[i] = 0;\n    }\n\n    for (var i$1 = 0; i$1 < elements.length; ) {\n        if (indexes[i$1] < i$1) {\n            // At odd indexes, swap from indexes[i] instead\n            // of from the beginning of the array\n            var swapFrom = 0;\n            if (i$1 % 2 !== 0) {\n                swapFrom = indexes[i$1];\n            }\n\n            // swap between swapFrom and i, using\n            // a temporary variable as storage.\n            var temp = elements[swapFrom];\n            elements[swapFrom] = elements[i$1];\n            elements[i$1] = temp;\n\n            permutations.push(elements.slice());\n            indexes[i$1]++;\n            i$1 = 0;\n        } else {\n            indexes[i$1] = 0;\n            i$1++;\n        }\n    }\n\n    return permutations;\n}\n\n/**\n * Implementation of Combinations\n * Combinations are unique subsets of a collection - in this case, k x from a collection at a time.\n * https://en.wikipedia.org/wiki/Combination\n * @param {Array} x any type of data\n * @param {int} k the number of objects in each group (without replacement)\n * @returns {Array<Array>} array of permutations\n * @example\n * combinations([1, 2, 3], 2); // => [[1,2], [1,3], [2,3]]\n */\n\nfunction combinations(x, k) {\n    var i;\n    var subI;\n    var combinationList = [];\n    var subsetCombinations;\n    var next;\n\n    for (i = 0; i < x.length; i++) {\n        if (k === 1) {\n            combinationList.push([x[i]]);\n        } else {\n            subsetCombinations = combinations(x.slice(i + 1, x.length), k - 1);\n            for (subI = 0; subI < subsetCombinations.length; subI++) {\n                next = subsetCombinations[subI];\n                next.unshift(x[i]);\n                combinationList.push(next);\n            }\n        }\n    }\n    return combinationList;\n}\n\n/**\n * Implementation of [Combinations](https://en.wikipedia.org/wiki/Combination) with replacement\n * Combinations are unique subsets of a collection - in this case, k x from a collection at a time.\n * 'With replacement' means that a given element can be chosen multiple times.\n * Unlike permutation, order doesn't matter for combinations.\n *\n * @param {Array} x any type of data\n * @param {int} k the number of objects in each group (without replacement)\n * @returns {Array<Array>} array of permutations\n * @example\n * combinationsReplacement([1, 2], 2); // => [[1, 1], [1, 2], [2, 2]]\n */\nfunction combinationsReplacement(x, k) {\n    var combinationList = [];\n\n    for (var i = 0; i < x.length; i++) {\n        if (k === 1) {\n            // If we're requested to find only one element, we don't need\n            // to recurse: just push `x[i]` onto the list of combinations.\n            combinationList.push([x[i]]);\n        } else {\n            // Otherwise, recursively find combinations, given `k - 1`. Note that\n            // we request `k - 1`, so if you were looking for k=3 combinations, we're\n            // requesting k=2. This -1 gets reversed in the for loop right after this\n            // code, since we concatenate `x[i]` onto the selected combinations,\n            // bringing `k` back up to your requested level.\n            // This recursion may go many levels deep, since it only stops once\n            // k=1.\n            var subsetCombinations = combinationsReplacement(\n                x.slice(i, x.length),\n                k - 1\n            );\n\n            for (var j = 0; j < subsetCombinations.length; j++) {\n                combinationList.push([x[i]].concat(subsetCombinations[j]));\n            }\n        }\n    }\n\n    return combinationList;\n}\n\n/**\n * When adding a new value to a list, one does not have to necessary\n * recompute the mean of the list in linear time. They can instead use\n * this function to compute the new mean by providing the current mean,\n * the number of elements in the list that produced it and the new\n * value to add.\n *\n * @since 2.5.0\n * @param {number} mean current mean\n * @param {number} n number of items in the list\n * @param {number} newValue the added value\n * @returns {number} the new mean\n *\n * @example\n * addToMean(14, 5, 53); // => 20.5\n */\nfunction addToMean(mean, n, newValue) {\n    return mean + (newValue - mean) / (n + 1);\n}\n\n/**\n * When combining two lists of values for which one already knows the means,\n * one does not have to necessary recompute the mean of the combined lists in\n * linear time. They can instead use this function to compute the combined\n * mean by providing the mean & number of values of the first list and the mean\n * & number of values of the second list.\n *\n * @since 3.0.0\n * @param {number} mean1 mean of the first list\n * @param {number} n1 number of items in the first list\n * @param {number} mean2 mean of the second list\n * @param {number} n2 number of items in the second list\n * @returns {number} the combined mean\n *\n * @example\n * combineMeans(5, 3, 4, 3); // => 4.5\n */\nfunction combineMeans(mean1, n1, mean2, n2) {\n    return (mean1 * n1 + mean2 * n2) / (n1 + n2);\n}\n\n/**\n * When combining two lists of values for which one already knows the variances,\n * one does not have to necessary recompute the variance of the combined lists\n * in linear time. They can instead use this function to compute the combined\n * variance by providing the variance, mean & number of values of the first list\n * and the variance, mean & number of values of the second list.\n *\n * @since 3.0.0\n * @param {number} variance1 variance of the first list\n * @param {number} mean1 mean of the first list\n * @param {number} n1 number of items in the first list\n * @param {number} variance2 variance of the second list\n * @param {number} mean2 mean of the second list\n * @param {number} n2 number of items in the second list\n * @returns {number} the combined mean\n *\n * @example\n * combineVariances(14 / 3, 5, 3, 8 / 3, 4, 3); // => 47 / 12\n */\nfunction combineVariances(variance1, mean1, n1, variance2, mean2, n2) {\n    var newMean = combineMeans(mean1, n1, mean2, n2);\n\n    return (\n        (n1 * (variance1 + Math.pow(mean1 - newMean, 2)) +\n            n2 * (variance2 + Math.pow(mean2 - newMean, 2))) /\n        (n1 + n2)\n    );\n}\n\n/**\n * The [Geometric Mean](https://en.wikipedia.org/wiki/Geometric_mean) is\n * a mean function that is more useful for numbers in different\n * ranges.\n *\n * This is the nth root of the input numbers multiplied by each other.\n *\n * The geometric mean is often useful for\n * **[proportional growth](https://en.wikipedia.org/wiki/Geometric_mean#Proportional_growth)**: given\n * growth rates for multiple years, like _80%, 16.66% and 42.85%_, a simple\n * mean will incorrectly estimate an average growth rate, whereas a geometric\n * mean will correctly estimate a growth rate that, over those years,\n * will yield the same end value.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x sample of one or more data points\n * @returns {number} geometric mean\n * @throws {Error} if x is empty\n * @throws {Error} if x contains a negative number\n * @example\n * var growthRates = [1.80, 1.166666, 1.428571];\n * var averageGrowth = ss.geometricMean(growthRates);\n * var averageGrowthRates = [averageGrowth, averageGrowth, averageGrowth];\n * var startingValue = 10;\n * var startingValueMean = 10;\n * growthRates.forEach(function(rate) {\n *   startingValue *= rate;\n * });\n * averageGrowthRates.forEach(function(rate) {\n *   startingValueMean *= rate;\n * });\n * startingValueMean === startingValue;\n */\nfunction geometricMean(x) {\n    if (x.length === 0) {\n        throw new Error(\"geometricMean requires at least one data point\");\n    }\n\n    // the starting value.\n    var value = 1;\n\n    for (var i = 0; i < x.length; i++) {\n        // the geometric mean is only valid for positive numbers\n        if (x[i] < 0) {\n            throw new Error(\n                \"geometricMean requires only non-negative numbers as input\"\n            );\n        }\n\n        // repeatedly multiply the value by each number\n        value *= x[i];\n    }\n\n    return Math.pow(value, 1 / x.length);\n}\n\n/**\n * The [log average](https://en.wikipedia.org/wiki/https://en.wikipedia.org/wiki/Geometric_mean#Relationship_with_logarithms)\n * is an equivalent way of computing the geometric mean of an array suitable for large or small products.\n *\n * It's found by calculating the average logarithm of the elements and exponentiating.\n *\n * @param {Array<number>} x sample of one or more data points\n * @returns {number} geometric mean\n * @throws {Error} if x is empty\n * @throws {Error} if x contains a negative number\n */\nfunction logAverage(x) {\n    if (x.length === 0) {\n        throw new Error(\"logAverage requires at least one data point\");\n    }\n\n    var value = 0;\n    for (var i = 0; i < x.length; i++) {\n        if (x[i] < 0) {\n            throw new Error(\n                \"logAverage requires only non-negative numbers as input\"\n            );\n        }\n        value += Math.log(x[i]);\n    }\n\n    return Math.exp(value / x.length);\n}\n\n/**\n * The [Harmonic Mean](https://en.wikipedia.org/wiki/Harmonic_mean) is\n * a mean function typically used to find the average of rates.\n * This mean is calculated by taking the reciprocal of the arithmetic mean\n * of the reciprocals of the input numbers.\n *\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x sample of one or more data points\n * @returns {number} harmonic mean\n * @throws {Error} if x is empty\n * @throws {Error} if x contains a negative number\n * @example\n * harmonicMean([2, 3]).toFixed(2) // => '2.40'\n */\nfunction harmonicMean(x) {\n    if (x.length === 0) {\n        throw new Error(\"harmonicMean requires at least one data point\");\n    }\n\n    var reciprocalSum = 0;\n\n    for (var i = 0; i < x.length; i++) {\n        // the harmonic mean is only valid for positive numbers\n        if (x[i] <= 0) {\n            throw new Error(\n                \"harmonicMean requires only positive numbers as input\"\n            );\n        }\n\n        reciprocalSum += 1 / x[i];\n    }\n\n    // divide n by the reciprocal sum\n    return x.length / reciprocalSum;\n}\n\n/**\n * The mean, _also known as average_,\n * is the sum of all values over the number of values.\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * The simple mean uses the successive addition method internally\n * to calculate it's result. Errors in floating-point addition are\n * not accounted for, so if precision is required, the standard {@link mean}\n * method should be used instead.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n *\n * @param {Array<number>} x sample of one or more data points\n * @throws {Error} if the length of x is less than one\n * @returns {number} mean\n * @example\n * mean([0, 10]); // => 5\n */\nfunction meanSimple(x) {\n    if (x.length === 0) {\n        throw new Error(\"meanSimple requires at least one data point\");\n    }\n\n    return sumSimple(x) / x.length;\n}\n\n/**\n * The [median](http://en.wikipedia.org/wiki/Median) is\n * the middle number of a list. This is often a good indicator of 'the middle'\n * when there are outliers that skew the `mean()` value.\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * The median isn't necessarily one of the elements in the list: the value\n * can be the average of two elements if the list has an even length\n * and the two central values are different.\n *\n * @param {Array<number>} sorted input\n * @returns {number} median value\n * @example\n * medianSorted([10, 2, 5, 100, 2, 1]); // => 52.5\n */\nfunction medianSorted(sorted) {\n    return quantileSorted(sorted, 0.5);\n}\n\n/**\n * When removing a value from a list, one does not have to necessary\n * recompute the mean of the list in linear time. They can instead use\n * this function to compute the new mean by providing the current mean,\n * the number of elements in the list that produced it and the value to remove.\n *\n * @since 3.0.0\n * @param {number} mean current mean\n * @param {number} n number of items in the list\n * @param {number} value the value to remove\n * @returns {number} the new mean\n *\n * @example\n * subtractFromMean(20.5, 6, 53); // => 14\n */\nfunction subtractFromMean(mean, n, value) {\n    return (mean * n - value) / (n - 1);\n}\n\n/**\n * The Root Mean Square (RMS) is\n * a mean function used as a measure of the magnitude of a set\n * of numbers, regardless of their sign.\n * This is the square root of the mean of the squares of the\n * input numbers.\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x a sample of one or more data points\n * @returns {number} root mean square\n * @throws {Error} if x is empty\n * @example\n * rootMeanSquare([-1, 1, -1, 1]); // => 1\n */\nfunction rootMeanSquare(x) {\n    if (x.length === 0) {\n        throw new Error(\"rootMeanSquare requires at least one data point\");\n    }\n\n    var sumOfSquares = 0;\n    for (var i = 0; i < x.length; i++) {\n        sumOfSquares += Math.pow(x[i], 2);\n    }\n\n    return Math.sqrt(sumOfSquares / x.length);\n}\n\n/**\n * The`coefficient of variation`_ is the ratio of the standard deviation to the mean.\n * .._`coefficient of variation`: https://en.wikipedia.org/wiki/Coefficient_of_variation\n *\n *\n * @param {Array} x input\n * @returns {number} coefficient of variation\n * @example\n * coefficientOfVariation([1, 2, 3, 4]).toFixed(3); // => 0.516\n * coefficientOfVariation([1, 2, 3, 4, 5]).toFixed(3); // => 0.527\n * coefficientOfVariation([-1, 0, 1, 2, 3, 4]).toFixed(3); // => 1.247\n */\nfunction coefficientOfVariation(x) {\n    return sampleStandardDeviation(x) / mean(x);\n}\n\n/**\n * This is to compute [a one-sample t-test](https://en.wikipedia.org/wiki/Student%27s_t-test#One-sample_t-test), comparing the mean\n * of a sample to a known value, x.\n *\n * in this case, we're trying to determine whether the\n * population mean is equal to the value that we know, which is `x`\n * here. Usually the results here are used to look up a\n * [p-value](http://en.wikipedia.org/wiki/P-value), which, for\n * a certain level of significance, will let you determine that the\n * null hypothesis can or cannot be rejected.\n *\n * @param {Array<number>} x sample of one or more numbers\n * @param {number} expectedValue expected value of the population mean\n * @returns {number} value\n * @example\n * tTest([1, 2, 3, 4, 5, 6], 3.385).toFixed(2); // => '0.16'\n */\nfunction tTest(x, expectedValue) {\n    // The mean of the sample\n    var sampleMean = mean(x);\n\n    // The standard deviation of the sample\n    var sd = standardDeviation(x);\n\n    // Square root the length of the sample\n    var rootN = Math.sqrt(x.length);\n\n    // returning the t value\n    return (sampleMean - expectedValue) / (sd / rootN);\n}\n\n/**\n * This is to compute [two sample t-test](http://en.wikipedia.org/wiki/Student's_t-test).\n * Tests whether \"mean(X)-mean(Y) = difference\", (\n * in the most common case, we often have `difference == 0` to test if two samples\n * are likely to be taken from populations with the same mean value) with\n * no prior knowledge on standard deviations of both samples\n * other than the fact that they have the same standard deviation.\n *\n * Usually the results here are used to look up a\n * [p-value](http://en.wikipedia.org/wiki/P-value), which, for\n * a certain level of significance, will let you determine that the\n * null hypothesis can or cannot be rejected.\n *\n * `diff` can be omitted if it equals 0.\n *\n * [This is used to reject](https://en.wikipedia.org/wiki/Exclusion_of_the_null_hypothesis)\n * a null hypothesis that the two populations that have been sampled into\n * `sampleX` and `sampleY` are equal to each other.\n *\n * @param {Array<number>} sampleX a sample as an array of numbers\n * @param {Array<number>} sampleY a sample as an array of numbers\n * @param {number} [difference=0]\n * @returns {number|null} test result\n *\n * @example\n * tTestTwoSample([1, 2, 3, 4], [3, 4, 5, 6], 0); // => -2.1908902300206643\n */\nfunction tTestTwoSample(sampleX, sampleY, difference) {\n    var n = sampleX.length;\n    var m = sampleY.length;\n\n    // If either sample doesn't actually have any values, we can't\n    // compute this at all, so we return `null`.\n    if (!n || !m) {\n        return null;\n    }\n\n    // default difference (mu) is zero\n    if (!difference) {\n        difference = 0;\n    }\n\n    var meanX = mean(sampleX);\n    var meanY = mean(sampleY);\n    var sampleVarianceX = sampleVariance(sampleX);\n    var sampleVarianceY = sampleVariance(sampleY);\n\n    if (\n        typeof meanX === \"number\" &&\n        typeof meanY === \"number\" &&\n        typeof sampleVarianceX === \"number\" &&\n        typeof sampleVarianceY === \"number\"\n    ) {\n        var weightedVariance =\n            ((n - 1) * sampleVarianceX + (m - 1) * sampleVarianceY) /\n            (n + m - 2);\n\n        return (\n            (meanX - meanY - difference) /\n            Math.sqrt(weightedVariance * (1 / n + 1 / m))\n        );\n    }\n}\n\n/**\n * This function calculates the Wilcoxon rank sum statistic for the first sample\n * with respect to the second. The Wilcoxon rank sum test is a non-parametric\n * alternative to the t-test which is equivalent to the\n * [Mann-Whitney U test](https://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U_test).\n * The statistic is calculated by pooling all the observations together, ranking them,\n * and then summing the ranks associated with one of the samples. If this rank sum is\n * sufficiently large or small we reject the hypothesis that the two samples come\n * from the same distribution in favor of the alternative that one is shifted with\n * respect to the other.\n *\n * @param {Array<number>} sampleX a sample as an array of numbers\n * @param {Array<number>} sampleY a sample as an array of numbers\n * @returns {number} rank sum for sampleX\n *\n * @example\n * wilcoxonRankSum([1, 4, 8], [9, 12, 15]); // => 6\n */\nfunction wilcoxonRankSum(sampleX, sampleY) {\n    if (!sampleX.length || !sampleY.length) {\n        throw new Error(\"Neither sample can be empty\");\n    }\n\n    var pooledSamples = sampleX\n        .map(function (x) { return ({ label: \"x\", value: x }); })\n        .concat(sampleY.map(function (y) { return ({ label: \"y\", value: y }); }))\n        .sort(function (a, b) { return a.value - b.value; });\n\n    for (var rank = 0; rank < pooledSamples.length; rank++) {\n        pooledSamples[rank].rank = rank;\n    }\n\n    var tiedRanks = [pooledSamples[0].rank];\n    for (var i = 1; i < pooledSamples.length; i++) {\n        if (pooledSamples[i].value === pooledSamples[i - 1].value) {\n            tiedRanks.push(pooledSamples[i].rank);\n            if (i === pooledSamples.length - 1) {\n                replaceRanksInPlace(pooledSamples, tiedRanks);\n            }\n        } else if (tiedRanks.length > 1) {\n            replaceRanksInPlace(pooledSamples, tiedRanks);\n        } else {\n            tiedRanks = [pooledSamples[i].rank];\n        }\n    }\n\n    function replaceRanksInPlace(pooledSamples, tiedRanks) {\n        var average = (tiedRanks[0] + tiedRanks[tiedRanks.length - 1]) / 2;\n        for (var i = 0; i < tiedRanks.length; i++) {\n            pooledSamples[tiedRanks[i]].rank = average;\n        }\n    }\n\n    var rankSum = 0;\n\n    for (var i$1 = 0; i$1 < pooledSamples.length; i$1++) {\n        var sample = pooledSamples[i$1];\n        if (sample.label === \"x\") {\n            rankSum += sample.rank + 1;\n        }\n    }\n\n    return rankSum;\n}\n\n/**\n * [Bayesian Classifier](http://en.wikipedia.org/wiki/Naive_Bayes_classifier)\n *\n * This is a naïve bayesian classifier that takes\n * singly-nested objects.\n *\n * @class\n * @example\n * var bayes = new BayesianClassifier();\n * bayes.train({\n *   species: 'Cat'\n * }, 'animal');\n * var result = bayes.score({\n *   species: 'Cat'\n * })\n * // result\n * // {\n * //   animal: 1\n * // }\n */\nvar BayesianClassifier = function BayesianClassifier() {\n    // The number of items that are currently\n    // classified in the model\n    this.totalCount = 0;\n    // Every item classified in the model\n    this.data = {};\n};\n\n/**\n * Train the classifier with a new item, which has a single\n * dimension of Javascript literal keys and values.\n *\n * @param {Object} item an object with singly-deep properties\n * @param {string} category the category this item belongs to\n * @return {undefined} adds the item to the classifier\n */\nBayesianClassifier.prototype.train = function train (item, category) {\n    // If the data object doesn't have any values\n    // for this category, create a new object for it.\n    if (!this.data[category]) {\n        this.data[category] = {};\n    }\n\n    // Iterate through each key in the item.\n    for (var k in item) {\n        var v = item[k];\n        // Initialize the nested object `data[category][k][item[k]]`\n        // with an object of keys that equal 0.\n        if (this.data[category][k] === undefined) {\n            this.data[category][k] = {};\n        }\n        if (this.data[category][k][v] === undefined) {\n            this.data[category][k][v] = 0;\n        }\n\n        // And increment the key for this key/value combination.\n        this.data[category][k][v]++;\n    }\n\n    // Increment the number of items classified\n    this.totalCount++;\n};\n\n/**\n * Generate a score of how well this item matches all\n * possible categories based on its attributes\n *\n * @param {Object} item an item in the same format as with train\n * @returns {Object} of probabilities that this item belongs to a\n * given category.\n */\nBayesianClassifier.prototype.score = function score (item) {\n    // Initialize an empty array of odds per category.\n    var odds = {};\n    var category;\n    // Iterate through each key in the item,\n    // then iterate through each category that has been used\n    // in previous calls to `.train()`\n    for (var k in item) {\n        var v = item[k];\n        for (category in this.data) {\n            // Create an empty object for storing key - value combinations\n            // for this category.\n            odds[category] = {};\n\n            // If this item doesn't even have a property, it counts for nothing,\n            // but if it does have the property that we're looking for from\n            // the item to categorize, it counts based on how popular it is\n            // versus the whole population.\n            if (this.data[category][k]) {\n                odds[category][k + \"_\" + v] =\n                    (this.data[category][k][v] || 0) / this.totalCount;\n            } else {\n                odds[category][k + \"_\" + v] = 0;\n            }\n        }\n    }\n\n    // Set up a new object that will contain sums of these odds by category\n    var oddsSums = {};\n\n    for (category in odds) {\n        // Tally all of the odds for each category-combination pair -\n        // the non-existence of a category does not add anything to the\n        // score.\n        oddsSums[category] = 0;\n        for (var combination in odds[category]) {\n            oddsSums[category] += odds[category][combination];\n        }\n    }\n\n    return oddsSums;\n};\n\n/**\n * This is a single-layer [Perceptron Classifier](http://en.wikipedia.org/wiki/Perceptron) that takes\n * arrays of numbers and predicts whether they should be classified\n * as either 0 or 1 (negative or positive examples).\n * @class\n * @example\n * // Create the model\n * var p = new PerceptronModel();\n * // Train the model with input with a diagonal boundary.\n * for (var i = 0; i < 5; i++) {\n *     p.train([1, 1], 1);\n *     p.train([0, 1], 0);\n *     p.train([1, 0], 0);\n *     p.train([0, 0], 0);\n * }\n * p.predict([0, 0]); // 0\n * p.predict([0, 1]); // 0\n * p.predict([1, 0]); // 0\n * p.predict([1, 1]); // 1\n */\nvar PerceptronModel = function PerceptronModel() {\n    // The weights, or coefficients of the model;\n    // weights are only populated when training with data.\n    this.weights = [];\n    // The bias term, or intercept; it is also a weight but\n    // it's stored separately for convenience as it is always\n    // multiplied by one.\n    this.bias = 0;\n};\n/**\n * **Predict**: Use an array of features with the weight array and bias\n * to predict whether an example is labeled 0 or 1.\n *\n * @param {Array<number>} features an array of features as numbers\n * @returns {number} 1 if the score is over 0, otherwise 0\n */\nPerceptronModel.prototype.predict = function predict (features) {\n    // Only predict if previously trained\n    // on the same size feature array(s).\n    if (features.length !== this.weights.length) {\n        return null;\n    }\n\n    // Calculate the sum of features times weights,\n    // with the bias added (implicitly times one).\n    var score = 0;\n    for (var i = 0; i < this.weights.length; i++) {\n        score += this.weights[i] * features[i];\n    }\n    score += this.bias;\n\n    // Classify as 1 if the score is over 0, otherwise 0.\n    if (score > 0) {\n        return 1;\n    } else {\n        return 0;\n    }\n};\n\n/**\n * **Train** the classifier with a new example, which is\n * a numeric array of features and a 0 or 1 label.\n *\n * @param {Array<number>} features an array of features as numbers\n * @param {number} label either 0 or 1\n * @returns {PerceptronModel} this\n */\nPerceptronModel.prototype.train = function train (features, label) {\n    // Require that only labels of 0 or 1 are considered.\n    if (label !== 0 && label !== 1) {\n        return null;\n    }\n    // The length of the feature array determines\n    // the length of the weight array.\n    // The perceptron will continue learning as long as\n    // it keeps seeing feature arrays of the same length.\n    // When it sees a new data shape, it initializes.\n    if (features.length !== this.weights.length) {\n        this.weights = features;\n        this.bias = 1;\n    }\n    // Make a prediction based on current weights.\n    var prediction = this.predict(features);\n    // Update the weights if the prediction is wrong.\n    if (typeof prediction === \"number\" && prediction !== label) {\n        var gradient = label - prediction;\n        for (var i = 0; i < this.weights.length; i++) {\n            this.weights[i] += gradient * features[i];\n        }\n        this.bias += gradient;\n    }\n    return this;\n};\n\n/**\n * We use `ε`, epsilon, as a stopping criterion when we want to iterate\n * until we're \"close enough\". Epsilon is a very small number: for\n * simple statistics, that number is **0.0001**\n *\n * This is used in calculations like the binomialDistribution, in which\n * the process of finding a value is [iterative](https://en.wikipedia.org/wiki/Iterative_method):\n * it progresses until it is close enough.\n *\n * Below is an example of using epsilon in [gradient descent](https://en.wikipedia.org/wiki/Gradient_descent),\n * where we're trying to find a local minimum of a function's derivative,\n * given by the `fDerivative` method.\n *\n * @example\n * // From calculation, we expect that the local minimum occurs at x=9/4\n * var x_old = 0;\n * // The algorithm starts at x=6\n * var x_new = 6;\n * var stepSize = 0.01;\n *\n * function fDerivative(x) {\n *   return 4 * Math.pow(x, 3) - 9 * Math.pow(x, 2);\n * }\n *\n * // The loop runs until the difference between the previous\n * // value and the current value is smaller than epsilon - a rough\n * // meaure of 'close enough'\n * while (Math.abs(x_new - x_old) > ss.epsilon) {\n *   x_old = x_new;\n *   x_new = x_old - stepSize * fDerivative(x_old);\n * }\n *\n * console.log('Local minimum occurs at', x_new);\n */\nvar epsilon = 0.0001;\n\n/**\n * A [Factorial](https://en.wikipedia.org/wiki/Factorial), usually written n!, is the product of all positive\n * integers less than or equal to n. Often factorial is implemented\n * recursively, but this iterative approach is significantly faster\n * and simpler.\n *\n * @param {number} n input, must be an integer number 1 or greater\n * @returns {number} factorial: n!\n * @throws {Error} if n is less than 0 or not an integer\n * @example\n * factorial(5); // => 120\n */\nfunction factorial(n) {\n    // factorial is mathematically undefined for negative numbers\n    if (n < 0) {\n        throw new Error(\"factorial requires a non-negative value\");\n    }\n\n    if (Math.floor(n) !== n) {\n        throw new Error(\"factorial requires an integer input\");\n    }\n\n    // typically you'll expand the factorial function going down, like\n    // 5! = 5 * 4 * 3 * 2 * 1. This is going in the opposite direction,\n    // counting from 2 up to the number in question, and since anything\n    // multiplied by 1 is itself, the loop only needs to start at 2.\n    var accumulator = 1;\n    for (var i = 2; i <= n; i++) {\n        // for each number up to and including the number `n`, multiply\n        // the accumulator my that number.\n        accumulator *= i;\n    }\n    return accumulator;\n}\n\n/**\n * Compute the [gamma function](https://en.wikipedia.org/wiki/Gamma_function) of a value using Nemes' approximation.\n * The gamma of n is equivalent to (n-1)!, but unlike the factorial function, gamma is defined for all real n except zero\n * and negative integers (where NaN is returned). Note, the gamma function is also well-defined for complex numbers,\n * though this implementation currently does not handle complex numbers as input values.\n * Nemes' approximation is defined [here](https://arxiv.org/abs/1003.6020) as Theorem 2.2.\n * Negative values use [Euler's reflection formula](https://en.wikipedia.org/wiki/Gamma_function#Properties) for computation.\n *\n * @param {number} n Any real number except for zero and negative integers.\n * @returns {number} The gamma of the input value.\n *\n * @example\n * gamma(11.5); // 11899423.084037038\n * gamma(-11.5); // 2.29575810481609e-8\n * gamma(5); // 24\n */\nfunction gamma(n) {\n    if (Number.isInteger(n)) {\n        if (n <= 0) {\n            // gamma not defined for zero or negative integers\n            return Number.NaN;\n        } else {\n            // use factorial for integer inputs\n            return factorial(n - 1);\n        }\n    }\n\n    // Decrement n, because approximation is defined for n - 1\n    n--;\n\n    if (n < 0) {\n        // Use Euler's reflection formula for negative inputs\n        // see:  https://en.wikipedia.org/wiki/Gamma_function#Properties\n        return Math.PI / (Math.sin(Math.PI * -n) * gamma(-n));\n    } else {\n        // Nemes' expansion approximation\n        var seriesCoefficient =\n            Math.pow(n / Math.E, n) * Math.sqrt(2 * Math.PI * (n + 1 / 6));\n\n        var seriesDenom = n + 1 / 4;\n\n        var seriesExpansion =\n            1 +\n            1 / 144 / Math.pow(seriesDenom, 2) -\n            1 / 12960 / Math.pow(seriesDenom, 3) -\n            257 / 207360 / Math.pow(seriesDenom, 4) -\n            52 / 2612736 / Math.pow(seriesDenom, 5) +\n            5741173 / 9405849600 / Math.pow(seriesDenom, 6) +\n            37529 / 18811699200 / Math.pow(seriesDenom, 7);\n\n        return seriesCoefficient * seriesExpansion;\n    }\n}\n\n// Define series coefficients\nvar COEFFICIENTS = [\n    0.99999999999999709182, 57.156235665862923517, -59.597960355475491248,\n    14.136097974741747174, -0.49191381609762019978, 0.33994649984811888699e-4,\n    0.46523628927048575665e-4, -0.98374475304879564677e-4,\n    0.15808870322491248884e-3, -0.21026444172410488319e-3,\n    0.2174396181152126432e-3, -0.16431810653676389022e-3,\n    0.84418223983852743293e-4, -0.2619083840158140867e-4,\n    0.36899182659531622704e-5\n];\n\nvar g = 607 / 128;\nvar LOGSQRT2PI = Math.log(Math.sqrt(2 * Math.PI));\n\n/**\n * Compute the logarithm of the [gamma function](https://en.wikipedia.org/wiki/Gamma_function) of a value using Lanczos' approximation.\n * This function takes as input any real-value n greater than 0.\n * This function is useful for values of n too large for the normal gamma function (n > 165).\n * The code is based on Lanczo's Gamma approximation, defined [here](http://my.fit.edu/~gabdo/gamma.txt).\n *\n * @param {number} n Any real number greater than zero.\n * @returns {number} The logarithm of gamma of the input value.\n *\n * @example\n * gammaln(500); // 2605.1158503617335\n * gammaln(2.4); // 0.21685932244884043\n */\nfunction gammaln(n) {\n    // Return infinity if value not in domain\n    if (n <= 0) {\n        return Number.POSITIVE_INFINITY;\n    }\n\n    // Decrement n, because approximation is defined for n - 1\n    n--;\n\n    // Create series approximation\n    var a = COEFFICIENTS[0];\n\n    for (var i = 1; i < 15; i++) {\n        a += COEFFICIENTS[i] / (n + i);\n    }\n\n    var tmp = g + 0.5 + n;\n\n    // Return natural logarithm of gamma(n)\n    return LOGSQRT2PI + Math.log(a) - tmp + (n + 0.5) * Math.log(tmp);\n}\n\n/**\n * The [Bernoulli distribution](http://en.wikipedia.org/wiki/Bernoulli_distribution)\n * is the probability discrete\n * distribution of a random variable which takes value 1 with success\n * probability `p` and value 0 with failure\n * probability `q` = 1 - `p`. It can be used, for example, to represent the\n * toss of a coin, where \"1\" is defined to mean \"heads\" and \"0\" is defined\n * to mean \"tails\" (or vice versa). It is\n * a special case of a Binomial Distribution\n * where `n` = 1.\n *\n * @param {number} p input value, between 0 and 1 inclusive\n * @returns {number[]} values of bernoulli distribution at this point\n * @throws {Error} if p is outside 0 and 1\n * @example\n * bernoulliDistribution(0.3); // => [0.7, 0.3]\n */\nfunction bernoulliDistribution(p) /*: number[] */ {\n    // Check that `p` is a valid probability (0 ≤ p ≤ 1)\n    if (p < 0 || p > 1) {\n        throw new Error(\n            \"bernoulliDistribution requires probability to be between 0 and 1 inclusive\"\n        );\n    }\n\n    return [1 - p, p];\n}\n\n/**\n * The [Binomial Distribution](http://en.wikipedia.org/wiki/Binomial_distribution) is the discrete probability\n * distribution of the number of successes in a sequence of n independent yes/no experiments, each of which yields\n * success with probability `probability`. Such a success/failure experiment is also called a Bernoulli experiment or\n * Bernoulli trial; when trials = 1, the Binomial Distribution is a Bernoulli Distribution.\n *\n * @param {number} trials number of trials to simulate\n * @param {number} probability\n * @returns {number[]} output\n */\nfunction binomialDistribution(trials, probability) /*: ?number[] */ {\n    // Check that `p` is a valid probability (0 ≤ p ≤ 1),\n    // that `n` is an integer, strictly positive.\n    if (probability < 0 || probability > 1 || trials <= 0 || trials % 1 !== 0) {\n        return undefined;\n    }\n\n    // We initialize `x`, the random variable, and `accumulator`, an accumulator\n    // for the cumulative distribution function to 0. `distribution_functions`\n    // is the object we'll return with the `probability_of_x` and the\n    // `cumulativeProbability_of_x`, as well as the calculated mean &\n    // variance. We iterate until the `cumulativeProbability_of_x` is\n    // within `epsilon` of 1.0.\n    var x = 0;\n    var cumulativeProbability = 0;\n    var cells = [];\n    var binomialCoefficient = 1;\n\n    // This algorithm iterates through each potential outcome,\n    // until the `cumulativeProbability` is very close to 1, at\n    // which point we've defined the vast majority of outcomes\n    do {\n        // a [probability mass function](https://en.wikipedia.org/wiki/Probability_mass_function)\n        cells[x] =\n            binomialCoefficient *\n            Math.pow(probability, x) *\n            Math.pow(1 - probability, trials - x);\n        cumulativeProbability += cells[x];\n        x++;\n        binomialCoefficient = (binomialCoefficient * (trials - x + 1)) / x;\n        // when the cumulativeProbability is nearly 1, we've calculated\n        // the useful range of this distribution\n    } while (cumulativeProbability < 1 - epsilon);\n\n    return cells;\n}\n\n/**\n * The [Poisson Distribution](http://en.wikipedia.org/wiki/Poisson_distribution)\n * is a discrete probability distribution that expresses the probability\n * of a given number of events occurring in a fixed interval of time\n * and/or space if these events occur with a known average rate and\n * independently of the time since the last event.\n *\n * The Poisson Distribution is characterized by the strictly positive\n * mean arrival or occurrence rate, `λ`.\n *\n * @param {number} lambda location poisson distribution\n * @returns {number[]} values of poisson distribution at that point\n */\nfunction poissonDistribution(lambda) /*: ?number[] */ {\n    // Check that lambda is strictly positive\n    if (lambda <= 0) {\n        return undefined;\n    }\n\n    // our current place in the distribution\n    var x = 0;\n    // and we keep track of the current cumulative probability, in\n    // order to know when to stop calculating chances.\n    var cumulativeProbability = 0;\n    // the calculated cells to be returned\n    var cells = [];\n    var factorialX = 1;\n\n    // This algorithm iterates through each potential outcome,\n    // until the `cumulativeProbability` is very close to 1, at\n    // which point we've defined the vast majority of outcomes\n    do {\n        // a [probability mass function](https://en.wikipedia.org/wiki/Probability_mass_function)\n        cells[x] = (Math.exp(-lambda) * Math.pow(lambda, x)) / factorialX;\n        cumulativeProbability += cells[x];\n        x++;\n        factorialX *= x;\n        // when the cumulativeProbability is nearly 1, we've calculated\n        // the useful range of this distribution\n    } while (cumulativeProbability < 1 - epsilon);\n\n    return cells;\n}\n\n/**\n * **Percentage Points of the χ2 (Chi-Squared) Distribution**\n *\n * The [χ2 (Chi-Squared) Distribution](http://en.wikipedia.org/wiki/Chi-squared_distribution) is used in the common\n * chi-squared tests for goodness of fit of an observed distribution to a theoretical one, the independence of two\n * criteria of classification of qualitative data, and in confidence interval estimation for a population standard\n * deviation of a normal distribution from a sample standard deviation.\n *\n * Values from Appendix 1, Table III of William W. Hines & Douglas C. Montgomery, \"Probability and Statistics in\n * Engineering and Management Science\", Wiley (1980).\n */\nvar chiSquaredDistributionTable = {\n    1: {\n        0.995: 0,\n        0.99: 0,\n        0.975: 0,\n        0.95: 0,\n        0.9: 0.02,\n        0.5: 0.45,\n        0.1: 2.71,\n        0.05: 3.84,\n        0.025: 5.02,\n        0.01: 6.63,\n        0.005: 7.88\n    },\n    2: {\n        0.995: 0.01,\n        0.99: 0.02,\n        0.975: 0.05,\n        0.95: 0.1,\n        0.9: 0.21,\n        0.5: 1.39,\n        0.1: 4.61,\n        0.05: 5.99,\n        0.025: 7.38,\n        0.01: 9.21,\n        0.005: 10.6\n    },\n    3: {\n        0.995: 0.07,\n        0.99: 0.11,\n        0.975: 0.22,\n        0.95: 0.35,\n        0.9: 0.58,\n        0.5: 2.37,\n        0.1: 6.25,\n        0.05: 7.81,\n        0.025: 9.35,\n        0.01: 11.34,\n        0.005: 12.84\n    },\n    4: {\n        0.995: 0.21,\n        0.99: 0.3,\n        0.975: 0.48,\n        0.95: 0.71,\n        0.9: 1.06,\n        0.5: 3.36,\n        0.1: 7.78,\n        0.05: 9.49,\n        0.025: 11.14,\n        0.01: 13.28,\n        0.005: 14.86\n    },\n    5: {\n        0.995: 0.41,\n        0.99: 0.55,\n        0.975: 0.83,\n        0.95: 1.15,\n        0.9: 1.61,\n        0.5: 4.35,\n        0.1: 9.24,\n        0.05: 11.07,\n        0.025: 12.83,\n        0.01: 15.09,\n        0.005: 16.75\n    },\n    6: {\n        0.995: 0.68,\n        0.99: 0.87,\n        0.975: 1.24,\n        0.95: 1.64,\n        0.9: 2.2,\n        0.5: 5.35,\n        0.1: 10.65,\n        0.05: 12.59,\n        0.025: 14.45,\n        0.01: 16.81,\n        0.005: 18.55\n    },\n    7: {\n        0.995: 0.99,\n        0.99: 1.25,\n        0.975: 1.69,\n        0.95: 2.17,\n        0.9: 2.83,\n        0.5: 6.35,\n        0.1: 12.02,\n        0.05: 14.07,\n        0.025: 16.01,\n        0.01: 18.48,\n        0.005: 20.28\n    },\n    8: {\n        0.995: 1.34,\n        0.99: 1.65,\n        0.975: 2.18,\n        0.95: 2.73,\n        0.9: 3.49,\n        0.5: 7.34,\n        0.1: 13.36,\n        0.05: 15.51,\n        0.025: 17.53,\n        0.01: 20.09,\n        0.005: 21.96\n    },\n    9: {\n        0.995: 1.73,\n        0.99: 2.09,\n        0.975: 2.7,\n        0.95: 3.33,\n        0.9: 4.17,\n        0.5: 8.34,\n        0.1: 14.68,\n        0.05: 16.92,\n        0.025: 19.02,\n        0.01: 21.67,\n        0.005: 23.59\n    },\n    10: {\n        0.995: 2.16,\n        0.99: 2.56,\n        0.975: 3.25,\n        0.95: 3.94,\n        0.9: 4.87,\n        0.5: 9.34,\n        0.1: 15.99,\n        0.05: 18.31,\n        0.025: 20.48,\n        0.01: 23.21,\n        0.005: 25.19\n    },\n    11: {\n        0.995: 2.6,\n        0.99: 3.05,\n        0.975: 3.82,\n        0.95: 4.57,\n        0.9: 5.58,\n        0.5: 10.34,\n        0.1: 17.28,\n        0.05: 19.68,\n        0.025: 21.92,\n        0.01: 24.72,\n        0.005: 26.76\n    },\n    12: {\n        0.995: 3.07,\n        0.99: 3.57,\n        0.975: 4.4,\n        0.95: 5.23,\n        0.9: 6.3,\n        0.5: 11.34,\n        0.1: 18.55,\n        0.05: 21.03,\n        0.025: 23.34,\n        0.01: 26.22,\n        0.005: 28.3\n    },\n    13: {\n        0.995: 3.57,\n        0.99: 4.11,\n        0.975: 5.01,\n        0.95: 5.89,\n        0.9: 7.04,\n        0.5: 12.34,\n        0.1: 19.81,\n        0.05: 22.36,\n        0.025: 24.74,\n        0.01: 27.69,\n        0.005: 29.82\n    },\n    14: {\n        0.995: 4.07,\n        0.99: 4.66,\n        0.975: 5.63,\n        0.95: 6.57,\n        0.9: 7.79,\n        0.5: 13.34,\n        0.1: 21.06,\n        0.05: 23.68,\n        0.025: 26.12,\n        0.01: 29.14,\n        0.005: 31.32\n    },\n    15: {\n        0.995: 4.6,\n        0.99: 5.23,\n        0.975: 6.27,\n        0.95: 7.26,\n        0.9: 8.55,\n        0.5: 14.34,\n        0.1: 22.31,\n        0.05: 25,\n        0.025: 27.49,\n        0.01: 30.58,\n        0.005: 32.8\n    },\n    16: {\n        0.995: 5.14,\n        0.99: 5.81,\n        0.975: 6.91,\n        0.95: 7.96,\n        0.9: 9.31,\n        0.5: 15.34,\n        0.1: 23.54,\n        0.05: 26.3,\n        0.025: 28.85,\n        0.01: 32,\n        0.005: 34.27\n    },\n    17: {\n        0.995: 5.7,\n        0.99: 6.41,\n        0.975: 7.56,\n        0.95: 8.67,\n        0.9: 10.09,\n        0.5: 16.34,\n        0.1: 24.77,\n        0.05: 27.59,\n        0.025: 30.19,\n        0.01: 33.41,\n        0.005: 35.72\n    },\n    18: {\n        0.995: 6.26,\n        0.99: 7.01,\n        0.975: 8.23,\n        0.95: 9.39,\n        0.9: 10.87,\n        0.5: 17.34,\n        0.1: 25.99,\n        0.05: 28.87,\n        0.025: 31.53,\n        0.01: 34.81,\n        0.005: 37.16\n    },\n    19: {\n        0.995: 6.84,\n        0.99: 7.63,\n        0.975: 8.91,\n        0.95: 10.12,\n        0.9: 11.65,\n        0.5: 18.34,\n        0.1: 27.2,\n        0.05: 30.14,\n        0.025: 32.85,\n        0.01: 36.19,\n        0.005: 38.58\n    },\n    20: {\n        0.995: 7.43,\n        0.99: 8.26,\n        0.975: 9.59,\n        0.95: 10.85,\n        0.9: 12.44,\n        0.5: 19.34,\n        0.1: 28.41,\n        0.05: 31.41,\n        0.025: 34.17,\n        0.01: 37.57,\n        0.005: 40\n    },\n    21: {\n        0.995: 8.03,\n        0.99: 8.9,\n        0.975: 10.28,\n        0.95: 11.59,\n        0.9: 13.24,\n        0.5: 20.34,\n        0.1: 29.62,\n        0.05: 32.67,\n        0.025: 35.48,\n        0.01: 38.93,\n        0.005: 41.4\n    },\n    22: {\n        0.995: 8.64,\n        0.99: 9.54,\n        0.975: 10.98,\n        0.95: 12.34,\n        0.9: 14.04,\n        0.5: 21.34,\n        0.1: 30.81,\n        0.05: 33.92,\n        0.025: 36.78,\n        0.01: 40.29,\n        0.005: 42.8\n    },\n    23: {\n        0.995: 9.26,\n        0.99: 10.2,\n        0.975: 11.69,\n        0.95: 13.09,\n        0.9: 14.85,\n        0.5: 22.34,\n        0.1: 32.01,\n        0.05: 35.17,\n        0.025: 38.08,\n        0.01: 41.64,\n        0.005: 44.18\n    },\n    24: {\n        0.995: 9.89,\n        0.99: 10.86,\n        0.975: 12.4,\n        0.95: 13.85,\n        0.9: 15.66,\n        0.5: 23.34,\n        0.1: 33.2,\n        0.05: 36.42,\n        0.025: 39.36,\n        0.01: 42.98,\n        0.005: 45.56\n    },\n    25: {\n        0.995: 10.52,\n        0.99: 11.52,\n        0.975: 13.12,\n        0.95: 14.61,\n        0.9: 16.47,\n        0.5: 24.34,\n        0.1: 34.28,\n        0.05: 37.65,\n        0.025: 40.65,\n        0.01: 44.31,\n        0.005: 46.93\n    },\n    26: {\n        0.995: 11.16,\n        0.99: 12.2,\n        0.975: 13.84,\n        0.95: 15.38,\n        0.9: 17.29,\n        0.5: 25.34,\n        0.1: 35.56,\n        0.05: 38.89,\n        0.025: 41.92,\n        0.01: 45.64,\n        0.005: 48.29\n    },\n    27: {\n        0.995: 11.81,\n        0.99: 12.88,\n        0.975: 14.57,\n        0.95: 16.15,\n        0.9: 18.11,\n        0.5: 26.34,\n        0.1: 36.74,\n        0.05: 40.11,\n        0.025: 43.19,\n        0.01: 46.96,\n        0.005: 49.65\n    },\n    28: {\n        0.995: 12.46,\n        0.99: 13.57,\n        0.975: 15.31,\n        0.95: 16.93,\n        0.9: 18.94,\n        0.5: 27.34,\n        0.1: 37.92,\n        0.05: 41.34,\n        0.025: 44.46,\n        0.01: 48.28,\n        0.005: 50.99\n    },\n    29: {\n        0.995: 13.12,\n        0.99: 14.26,\n        0.975: 16.05,\n        0.95: 17.71,\n        0.9: 19.77,\n        0.5: 28.34,\n        0.1: 39.09,\n        0.05: 42.56,\n        0.025: 45.72,\n        0.01: 49.59,\n        0.005: 52.34\n    },\n    30: {\n        0.995: 13.79,\n        0.99: 14.95,\n        0.975: 16.79,\n        0.95: 18.49,\n        0.9: 20.6,\n        0.5: 29.34,\n        0.1: 40.26,\n        0.05: 43.77,\n        0.025: 46.98,\n        0.01: 50.89,\n        0.005: 53.67\n    },\n    40: {\n        0.995: 20.71,\n        0.99: 22.16,\n        0.975: 24.43,\n        0.95: 26.51,\n        0.9: 29.05,\n        0.5: 39.34,\n        0.1: 51.81,\n        0.05: 55.76,\n        0.025: 59.34,\n        0.01: 63.69,\n        0.005: 66.77\n    },\n    50: {\n        0.995: 27.99,\n        0.99: 29.71,\n        0.975: 32.36,\n        0.95: 34.76,\n        0.9: 37.69,\n        0.5: 49.33,\n        0.1: 63.17,\n        0.05: 67.5,\n        0.025: 71.42,\n        0.01: 76.15,\n        0.005: 79.49\n    },\n    60: {\n        0.995: 35.53,\n        0.99: 37.48,\n        0.975: 40.48,\n        0.95: 43.19,\n        0.9: 46.46,\n        0.5: 59.33,\n        0.1: 74.4,\n        0.05: 79.08,\n        0.025: 83.3,\n        0.01: 88.38,\n        0.005: 91.95\n    },\n    70: {\n        0.995: 43.28,\n        0.99: 45.44,\n        0.975: 48.76,\n        0.95: 51.74,\n        0.9: 55.33,\n        0.5: 69.33,\n        0.1: 85.53,\n        0.05: 90.53,\n        0.025: 95.02,\n        0.01: 100.42,\n        0.005: 104.22\n    },\n    80: {\n        0.995: 51.17,\n        0.99: 53.54,\n        0.975: 57.15,\n        0.95: 60.39,\n        0.9: 64.28,\n        0.5: 79.33,\n        0.1: 96.58,\n        0.05: 101.88,\n        0.025: 106.63,\n        0.01: 112.33,\n        0.005: 116.32\n    },\n    90: {\n        0.995: 59.2,\n        0.99: 61.75,\n        0.975: 65.65,\n        0.95: 69.13,\n        0.9: 73.29,\n        0.5: 89.33,\n        0.1: 107.57,\n        0.05: 113.14,\n        0.025: 118.14,\n        0.01: 124.12,\n        0.005: 128.3\n    },\n    100: {\n        0.995: 67.33,\n        0.99: 70.06,\n        0.975: 74.22,\n        0.95: 77.93,\n        0.9: 82.36,\n        0.5: 99.33,\n        0.1: 118.5,\n        0.05: 124.34,\n        0.025: 129.56,\n        0.01: 135.81,\n        0.005: 140.17\n    }\n};\n\n/**\n * The [χ2 (Chi-Squared) Goodness-of-Fit Test](http://en.wikipedia.org/wiki/Goodness_of_fit#Pearson.27s_chi-squared_test)\n * uses a measure of goodness of fit which is the sum of differences between observed and expected outcome frequencies\n * (that is, counts of observations), each squared and divided by the number of observations expected given the\n * hypothesized distribution. The resulting χ2 statistic, `chiSquared`, can be compared to the chi-squared distribution\n * to determine the goodness of fit. In order to determine the degrees of freedom of the chi-squared distribution, one\n * takes the total number of observed frequencies and subtracts the number of estimated parameters. The test statistic\n * follows, approximately, a chi-square distribution with (k − c) degrees of freedom where `k` is the number of non-empty\n * cells and `c` is the number of estimated parameters for the distribution.\n *\n * @param {Array<number>} data\n * @param {Function} distributionType a function that returns a point in a distribution:\n * for instance, binomial, bernoulli, or poisson\n * @param {number} significance\n * @returns {number} chi squared goodness of fit\n * @example\n * // Data from Poisson goodness-of-fit example 10-19 in William W. Hines & Douglas C. Montgomery,\n * // \"Probability and Statistics in Engineering and Management Science\", Wiley (1980).\n * var data1019 = [\n *     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n *     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n *     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n *     2, 2, 2, 2, 2, 2, 2, 2, 2,\n *     3, 3, 3, 3\n * ];\n * ss.chiSquaredGoodnessOfFit(data1019, ss.poissonDistribution, 0.05); //= false\n */\nfunction chiSquaredGoodnessOfFit(data, distributionType, significance) {\n    // Estimate from the sample data, a weighted mean.\n    var inputMean = mean(data);\n    // Calculated value of the χ2 statistic.\n    var chiSquared = 0;\n    // Number of hypothesized distribution parameters estimated, expected to be supplied in the distribution test.\n    // Lose one degree of freedom for estimating `lambda` from the sample data.\n    var c = 1;\n    // The hypothesized distribution.\n    // Generate the hypothesized distribution.\n    var hypothesizedDistribution = distributionType(inputMean);\n    var observedFrequencies = [];\n    var expectedFrequencies = [];\n\n    // Create an array holding a histogram from the sample data, of\n    // the form `{ value: numberOfOcurrences }`\n    for (var i = 0; i < data.length; i++) {\n        if (observedFrequencies[data[i]] === undefined) {\n            observedFrequencies[data[i]] = 0;\n        }\n        observedFrequencies[data[i]]++;\n    }\n\n    // The histogram we created might be sparse - there might be gaps\n    // between values. So we iterate through the histogram, making\n    // sure that instead of undefined, gaps have 0 values.\n    for (var i$1 = 0; i$1 < observedFrequencies.length; i$1++) {\n        if (observedFrequencies[i$1] === undefined) {\n            observedFrequencies[i$1] = 0;\n        }\n    }\n\n    // Create an array holding a histogram of expected data given the\n    // sample size and hypothesized distribution.\n    for (var k in hypothesizedDistribution) {\n        if (k in observedFrequencies) {\n            expectedFrequencies[+k] = hypothesizedDistribution[k] * data.length;\n        }\n    }\n\n    // Working backward through the expected frequencies, collapse classes\n    // if less than three observations are expected for a class.\n    // This transformation is applied to the observed frequencies as well.\n    for (var k$1 = expectedFrequencies.length - 1; k$1 >= 0; k$1--) {\n        if (expectedFrequencies[k$1] < 3) {\n            expectedFrequencies[k$1 - 1] += expectedFrequencies[k$1];\n            expectedFrequencies.pop();\n\n            observedFrequencies[k$1 - 1] += observedFrequencies[k$1];\n            observedFrequencies.pop();\n        }\n    }\n\n    // Iterate through the squared differences between observed & expected\n    // frequencies, accumulating the `chiSquared` statistic.\n    for (var k$2 = 0; k$2 < observedFrequencies.length; k$2++) {\n        chiSquared +=\n            Math.pow(observedFrequencies[k$2] - expectedFrequencies[k$2], 2) /\n            expectedFrequencies[k$2];\n    }\n\n    // Calculate degrees of freedom for this test and look it up in the\n    // `chiSquaredDistributionTable` in order to\n    // accept or reject the goodness-of-fit of the hypothesized distribution.\n    // Degrees of freedom, calculated as (number of class intervals -\n    // number of hypothesized distribution parameters estimated - 1)\n    var degreesOfFreedom = observedFrequencies.length - c - 1;\n    return (\n        chiSquaredDistributionTable[degreesOfFreedom][significance] < chiSquared\n    );\n}\n\nvar SQRT_2PI$1 = Math.sqrt(2 * Math.PI);\n\n/**\n * [Well-known kernels](https://en.wikipedia.org/wiki/Kernel_(statistics)#Kernel_functions_in_common_use)\n * @private\n */\nvar kernels = {\n    /**\n     * The gaussian kernel.\n     * @private\n     */\n    gaussian: function (u) {\n        return Math.exp(-0.5 * u * u) / SQRT_2PI$1;\n    }\n};\n\n/**\n * Well known bandwidth selection methods\n * @private\n */\nvar bandwidthMethods = {\n    /**\n     * The [\"normal reference distribution\"\n     * rule-of-thumb](https://stat.ethz.ch/R-manual/R-devel/library/MASS/html/bandwidth.nrd.html),\n     * a commonly used version of [Silverman's\n     * rule-of-thumb](https://en.wikipedia.org/wiki/Kernel_density_estimation#A_rule-of-thumb_bandwidth_estimator).\n     * @private\n     */\n    nrd: function (x) {\n        var s = sampleStandardDeviation(x);\n        var iqr = interquartileRange(x);\n        if (typeof iqr === \"number\") {\n            s = Math.min(s, iqr / 1.34);\n        }\n        return 1.06 * s * Math.pow(x.length, -0.2);\n    }\n};\n\n/**\n * [Kernel density estimation](https://en.wikipedia.org/wiki/Kernel_density_estimation)\n * is a useful tool for, among other things, estimating the shape of the\n * underlying probability distribution from a sample.\n *\n * @name kernelDensityEstimation\n * @param X sample values\n * @param kernel The kernel function to use. If a function is provided, it should return non-negative values and integrate to 1. Defaults to 'gaussian'.\n * @param bandwidthMethod The \"bandwidth selection\" method to use, or a fixed bandwidth value. Defaults to \"nrd\", the commonly-used [\"normal reference distribution\" rule-of-thumb](https://stat.ethz.ch/R-manual/R-devel/library/MASS/html/bandwidth.nrd.html).\n * @returns {Function} An estimated [probability density function](https://en.wikipedia.org/wiki/Probability_density_function) for the given sample. The returned function runs in `O(X.length)`.\n */\nfunction kernelDensityEstimation(X, kernel, bandwidthMethod) {\n    var kernelFn;\n    if (kernel === undefined) {\n        kernelFn = kernels.gaussian;\n    } else if (typeof kernel === \"string\") {\n        if (!kernels[kernel]) {\n            throw new Error('Unknown kernel \"' + kernel + '\"');\n        }\n        kernelFn = kernels[kernel];\n    } else {\n        kernelFn = kernel;\n    }\n\n    var bandwidth;\n    if (typeof bandwidthMethod === \"undefined\") {\n        bandwidth = bandwidthMethods.nrd(X);\n    } else if (typeof bandwidthMethod === \"string\") {\n        if (!bandwidthMethods[bandwidthMethod]) {\n            throw new Error(\n                'Unknown bandwidth method \"' + bandwidthMethod + '\"'\n            );\n        }\n        bandwidth = bandwidthMethods[bandwidthMethod](X);\n    } else {\n        bandwidth = bandwidthMethod;\n    }\n\n    return function (x) {\n        var i = 0;\n        var sum = 0;\n        for (i = 0; i < X.length; i++) {\n            sum += kernelFn((x - X[i]) / bandwidth);\n        }\n        return sum / bandwidth / X.length;\n    };\n}\n\n/**\n * The [Z-Score, or Standard Score](http://en.wikipedia.org/wiki/Standard_score).\n *\n * The standard score is the number of standard deviations an observation\n * or datum is above or below the mean. Thus, a positive standard score\n * represents a datum above the mean, while a negative standard score\n * represents a datum below the mean. It is a dimensionless quantity\n * obtained by subtracting the population mean from an individual raw\n * score and then dividing the difference by the population standard\n * deviation.\n *\n * The z-score is only defined if one knows the population parameters;\n * if one only has a sample set, then the analogous computation with\n * sample mean and sample standard deviation yields the\n * Student's t-statistic.\n *\n * @param {number} x\n * @param {number} mean\n * @param {number} standardDeviation\n * @return {number} z score\n * @example\n * zScore(78, 80, 5); // => -0.4\n */\nfunction zScore(x, mean, standardDeviation) {\n    return (x - mean) / standardDeviation;\n}\n\nvar SQRT_2PI = Math.sqrt(2 * Math.PI);\n\nfunction cumulativeDistribution(z) {\n    var sum = z;\n    var tmp = z;\n\n    // 15 iterations are enough for 4-digit precision\n    for (var i = 1; i < 15; i++) {\n        tmp *= (z * z) / (2 * i + 1);\n        sum += tmp;\n    }\n    return (\n        Math.round((0.5 + (sum / SQRT_2PI) * Math.exp((-z * z) / 2)) * 1e4) /\n        1e4\n    );\n}\n\n/**\n * A standard normal table, also called the unit normal table or Z table,\n * is a mathematical table for the values of Φ (phi), which are the values of\n * the [cumulative distribution function](https://en.wikipedia.org/wiki/Normal_distribution#Cumulative_distribution_function)\n * of the normal distribution. It is used to find the probability that a\n * statistic is observed below, above, or between values on the standard\n * normal distribution, and by extension, any normal distribution.\n */\nvar standardNormalTable = [];\n\nfor (var z = 0; z <= 3.09; z += 0.01) {\n    standardNormalTable.push(cumulativeDistribution(z));\n}\n\n/**\n * **[Cumulative Standard Normal Probability](http://en.wikipedia.org/wiki/Standard_normal_table)**\n *\n * Since probability tables cannot be\n * printed for every normal distribution, as there are an infinite variety\n * of normal distributions, it is common practice to convert a normal to a\n * standard normal and then use the standard normal table to find probabilities.\n *\n * You can use `.5 + .5 * errorFunction(x / Math.sqrt(2))` to calculate the probability\n * instead of looking it up in a table.\n *\n * @param {number} z\n * @returns {number} cumulative standard normal probability\n */\nfunction cumulativeStdNormalProbability(z) {\n    // Calculate the position of this value.\n    var absZ = Math.abs(z);\n    // Each row begins with a different\n    // significant digit: 0.5, 0.6, 0.7, and so on. Each value in the table\n    // corresponds to a range of 0.01 in the input values, so the value is\n    // multiplied by 100.\n    var index = Math.min(\n        Math.round(absZ * 100),\n        standardNormalTable.length - 1\n    );\n\n    // The index we calculate must be in the table as a positive value,\n    // but we still pay attention to whether the input is positive\n    // or negative, and flip the output value as a last step.\n    if (z >= 0) {\n        return standardNormalTable[index];\n    } else {\n        // due to floating-point arithmetic, values in the table with\n        // 4 significant figures can nevertheless end up as repeating\n        // fractions when they're computed here.\n        return Math.round((1 - standardNormalTable[index]) * 1e4) / 1e4;\n    }\n}\n\n/**\n * **[Logistic Cumulative Distribution Function](https://en.wikipedia.org/wiki/Logistic_distribution)**\n *\n * @param {number} x\n * @returns {number} cumulative standard logistic probability\n */\nfunction cumulativeStdLogisticProbability(x) {\n    return 1 / (Math.exp(-x) + 1);\n}\n\n/**\n * **[Gaussian error function](http://en.wikipedia.org/wiki/Error_function)**\n *\n * The `errorFunction(x/(sd * Math.sqrt(2)))` is the probability that a value in a\n * normal distribution with standard deviation sd is within x of the mean.\n *\n * This function returns a numerical approximation to the exact value.\n * It uses Horner's method to evaluate the polynomial of τ (tau).\n *\n * @param {number} x input\n * @return {number} error estimation\n * @example\n * errorFunction(1).toFixed(2); // => '0.84'\n */\nfunction errorFunction(x) {\n    var t = 1 / (1 + 0.5 * Math.abs(x));\n    var tau =\n        t *\n        Math.exp(\n            -x * x +\n                ((((((((0.17087277 * t - 0.82215223) * t + 1.48851587) * t -\n                    1.13520398) *\n                    t +\n                    0.27886807) *\n                    t -\n                    0.18628806) *\n                    t +\n                    0.09678418) *\n                    t +\n                    0.37409196) *\n                    t +\n                    1.00002368) *\n                    t -\n                1.26551223\n        );\n    if (x >= 0) {\n        return 1 - tau;\n    } else {\n        return tau - 1;\n    }\n}\n\n/**\n * The Inverse [Gaussian error function](http://en.wikipedia.org/wiki/Error_function)\n * returns a numerical approximation to the value that would have caused\n * `errorFunction()` to return x.\n *\n * @param {number} x value of error function\n * @returns {number} estimated inverted value\n */\nfunction inverseErrorFunction(x) {\n    var a = (8 * (Math.PI - 3)) / (3 * Math.PI * (4 - Math.PI));\n\n    var inv = Math.sqrt(\n        Math.sqrt(\n            Math.pow(2 / (Math.PI * a) + Math.log(1 - x * x) / 2, 2) -\n                Math.log(1 - x * x) / a\n        ) -\n            (2 / (Math.PI * a) + Math.log(1 - x * x) / 2)\n    );\n\n    if (x >= 0) {\n        return inv;\n    } else {\n        return -inv;\n    }\n}\n\n/**\n * The [Probit](http://en.wikipedia.org/wiki/Probit)\n * is the inverse of cumulativeStdNormalProbability(),\n * and is also known as the normal quantile function.\n *\n * It returns the number of standard deviations from the mean\n * where the p'th quantile of values can be found in a normal distribution.\n * So, for example, probit(0.5 + 0.6827/2) ≈ 1 because 68.27% of values are\n * normally found within 1 standard deviation above or below the mean.\n *\n * @param {number} p\n * @returns {number} probit\n */\nfunction probit(p) {\n    if (p === 0) {\n        p = epsilon;\n    } else if (p >= 1) {\n        p = 1 - epsilon;\n    }\n    return Math.sqrt(2) * inverseErrorFunction(2 * p - 1);\n}\n\n/**\n * The [Logit](https://en.wikipedia.org/wiki/Logit)\n * is the inverse of cumulativeStdLogisticProbability,\n * and is also known as the logistic quantile function.\n *\n * @param {number} p\n * @returns {number} logit\n */\nfunction logit(p) {\n    if (p <= 0 || p >= 1) {\n        throw new Error(\"p must be strictly between zero and one\");\n    }\n    return Math.log(p / (1 - p));\n}\n\n/**\n * Conducts a [permutation test](https://en.wikipedia.org/wiki/Resampling_(statistics)#Permutation_tests)\n * to determine if two data sets are *significantly* different from each other, using\n * the difference of means between the groups as the test statistic.\n * The function allows for the following hypotheses:\n * - two_tail = Null hypothesis: the two distributions are equal.\n * - greater = Null hypothesis: observations from sampleX tend to be smaller than those from sampleY.\n * - less = Null hypothesis: observations from sampleX tend to be greater than those from sampleY.\n * [Learn more about one-tail vs two-tail tests.](https://en.wikipedia.org/wiki/One-_and_two-tailed_tests)\n *\n * @param {Array<number>} sampleX first dataset (e.g. treatment data)\n * @param {Array<number>} sampleY second dataset (e.g. control data)\n * @param {string} alternative alternative hypothesis, either 'two_sided' (default), 'greater', or 'less'\n * @param {number} k number of values in permutation distribution.\n * @param {Function} [randomSource=Math.random] an optional entropy source\n * @returns {number} p-value The probability of observing the difference between groups (as or more extreme than what we did), assuming the null hypothesis.\n *\n * @example\n * var control = [2, 5, 3, 6, 7, 2, 5];\n * var treatment = [20, 5, 13, 12, 7, 2, 2];\n * permutationTest(control, treatment); // ~0.1324\n */\nfunction permutationTest(sampleX, sampleY, alternative, k, randomSource) {\n    // Set default arguments\n    if (k === undefined) {\n        k = 10000;\n    }\n    if (alternative === undefined) {\n        alternative = \"two_side\";\n    }\n    if (\n        alternative !== \"two_side\" &&\n        alternative !== \"greater\" &&\n        alternative !== \"less\"\n    ) {\n        throw new Error(\n            \"`alternative` must be either 'two_side', 'greater', or 'less'.\"\n        );\n    }\n\n    // get means for each sample\n    var meanX = mean(sampleX);\n    var meanY = mean(sampleY);\n\n    // calculate initial test statistic. This will be our point of comparison with\n    // the generated test statistics.\n    var testStatistic = meanX - meanY;\n\n    // create test-statistic distribution\n    var testStatDsn = new Array(k);\n\n    // combine datsets so we can easily shuffle later\n    var allData = sampleX.concat(sampleY);\n    var midIndex = Math.floor(allData.length / 2);\n\n    for (var i = 0; i < k; i++) {\n        // 1. shuffle data assignments\n        shuffleInPlace(allData, randomSource);\n        var permLeft = allData.slice(0, midIndex);\n        var permRight = allData.slice(midIndex, allData.length);\n\n        // 2.re-calculate test statistic\n        var permTestStatistic = mean(permLeft) - mean(permRight);\n\n        // 3. store test statistic to build test statistic distribution\n        testStatDsn[i] = permTestStatistic;\n    }\n\n    // Calculate p-value depending on alternative\n    // For this test, we calculate the percentage of 'extreme' test statistics (subject to our hypothesis)\n    // more info on permutation test p-value calculations: https://onlinecourses.science.psu.edu/stat464/node/35\n    var numExtremeTStats = 0;\n    if (alternative === \"two_side\") {\n        for (var i$1 = 0; i$1 <= k; i$1++) {\n            if (Math.abs(testStatDsn[i$1]) >= Math.abs(testStatistic)) {\n                numExtremeTStats += 1;\n            }\n        }\n    } else if (alternative === \"greater\") {\n        for (var i$2 = 0; i$2 <= k; i$2++) {\n            if (testStatDsn[i$2] >= testStatistic) {\n                numExtremeTStats += 1;\n            }\n        }\n    } else {\n        // alternative === 'less'\n        for (var i$3 = 0; i$3 <= k; i$3++) {\n            /* c8 ignore start */\n            if (testStatDsn[i$3] <= testStatistic) {\n                numExtremeTStats += 1;\n            }\n            /* c8 ignore end */\n        }\n    }\n\n    return numExtremeTStats / k;\n}\n\n/**\n * [Sign](https://en.wikipedia.org/wiki/Sign_function) is a function\n * that extracts the sign of a real number\n *\n * @param {number} x input value\n * @returns {number} sign value either 1, 0 or -1\n * @throws {TypeError} if the input argument x is not a number\n * @private\n *\n * @example\n * sign(2); // => 1\n */\nfunction sign(x) {\n    if (typeof x === \"number\") {\n        if (x < 0) {\n            return -1;\n        } else if (x === 0) {\n            return 0;\n        } else {\n            return 1;\n        }\n    } else {\n        throw new TypeError(\"not a number\");\n    }\n}\n\n/**\n * [Bisection method](https://en.wikipedia.org/wiki/Bisection_method) is a root-finding\n * method that repeatedly bisects an interval to find the root.\n *\n * This function returns a numerical approximation to the exact value.\n *\n * @param {Function} func input function\n * @param {number} start - start of interval\n * @param {number} end - end of interval\n * @param {number} maxIterations - the maximum number of iterations\n * @param {number} errorTolerance - the error tolerance\n * @returns {number} estimated root value\n * @throws {TypeError} Argument func must be a function\n *\n * @example\n * bisect(Math.cos,0,4,100,0.003); // => 1.572265625\n */\nfunction bisect(func, start, end, maxIterations, errorTolerance) {\n    if (typeof func !== \"function\")\n        { throw new TypeError(\"func must be a function\"); }\n\n    for (var i = 0; i < maxIterations; i++) {\n        var output = (start + end) / 2;\n\n        if (\n            func(output) === 0 ||\n            Math.abs((end - start) / 2) < errorTolerance\n        ) {\n            return output;\n        }\n\n        if (sign(func(output)) === sign(func(start))) {\n            start = output;\n        } else {\n            end = output;\n        }\n    }\n\n    throw new Error(\"maximum number of iterations exceeded\");\n}\n\n/**\n * Calculate Euclidean distance between two points.\n * @param {Array<number>} left First N-dimensional point.\n * @param {Array<number>} right Second N-dimensional point.\n * @returns {number} Distance.\n */\nfunction euclideanDistance(left, right) {\n    var sum = 0;\n    for (var i = 0; i < left.length; i++) {\n        var diff = left[i] - right[i];\n        sum += diff * diff;\n    }\n    return Math.sqrt(sum);\n}\n\n/**\n * @typedef {Object} kMeansReturn\n * @property {Array<number>} labels The labels.\n * @property {Array<Array<number>>} centroids The cluster centroids.\n */\n\n/**\n * Perform k-means clustering.\n *\n * @param {Array<Array<number>>} points N-dimensional coordinates of points to be clustered.\n * @param {number} numCluster How many clusters to create.\n * @param {Function} randomSource An optional entropy source that generates uniform values in [0, 1).\n * @return {kMeansReturn} Labels (same length as data) and centroids (same length as numCluster).\n * @throws {Error} If any centroids wind up friendless (i.e., without associated points).\n *\n * @example\n * kMeansCluster([[0.0, 0.5], [1.0, 0.5]], 2); // => {labels: [0, 1], centroids: [[0.0, 0.5], [1.0 0.5]]}\n */\nfunction kMeansCluster(points, numCluster, randomSource) {\n    if ( randomSource === void 0 ) randomSource = Math.random;\n\n    var oldCentroids = null;\n    var newCentroids = sample(points, numCluster, randomSource);\n    var labels = null;\n    var change = Number.MAX_VALUE;\n    while (change !== 0) {\n        labels = labelPoints(points, newCentroids);\n        oldCentroids = newCentroids;\n        newCentroids = calculateCentroids(points, labels, numCluster);\n        change = calculateChange(newCentroids, oldCentroids);\n    }\n    return {\n        labels: labels,\n        centroids: newCentroids\n    };\n}\n\n/**\n * Label each point according to which centroid it is closest to.\n *\n * @private\n * @param {Array<Array<number>>} points Array of XY coordinates.\n * @param {Array<Array<number>>} centroids Current centroids.\n * @return {Array<number>} Group labels.\n */\nfunction labelPoints(points, centroids) {\n    return points.map(function (p) {\n        var minDist = Number.MAX_VALUE;\n        var label = -1;\n        for (var i = 0; i < centroids.length; i++) {\n            var dist = euclideanDistance(p, centroids[i]);\n            if (dist < minDist) {\n                minDist = dist;\n                label = i;\n            }\n        }\n        return label;\n    });\n}\n\n/**\n * Calculate centroids for points given labels.\n *\n * @private\n * @param {Array<Array<number>>} points Array of XY coordinates.\n * @param {Array<number>} labels Which groups points belong to.\n * @param {number} numCluster Number of clusters being created.\n * @return {Array<Array<number>>} Centroid for each group.\n * @throws {Error} If any centroids wind up friendless (i.e., without associated points).\n */\nfunction calculateCentroids(points, labels, numCluster) {\n    // Initialize accumulators.\n    var dimension = points[0].length;\n    var centroids = makeMatrix(numCluster, dimension);\n    var counts = Array(numCluster).fill(0);\n\n    // Add points to centroids' accumulators and count points per centroid.\n    var numPoints = points.length;\n    for (var i = 0; i < numPoints; i++) {\n        var point = points[i];\n        var label = labels[i];\n        var current = centroids[label];\n        for (var j = 0; j < dimension; j++) {\n            current[j] += point[j];\n        }\n        counts[label] += 1;\n    }\n\n    // Rescale centroids, checking for any that have no points.\n    for (var i$1 = 0; i$1 < numCluster; i$1++) {\n        if (counts[i$1] === 0) {\n            throw new Error((\"Centroid \" + i$1 + \" has no friends\"));\n        }\n        var centroid = centroids[i$1];\n        for (var j$1 = 0; j$1 < dimension; j$1++) {\n            centroid[j$1] /= counts[i$1];\n        }\n    }\n\n    return centroids;\n}\n\n/**\n * Calculate the difference between old centroids and new centroids.\n *\n * @private\n * @param {Array<Array<number>>} left One list of centroids.\n * @param {Array<Array<number>>} right Another list of centroids.\n * @return {number} Distance between centroids.\n */\nfunction calculateChange(left, right) {\n    var total = 0;\n    for (var i = 0; i < left.length; i++) {\n        total += euclideanDistance(left[i], right[i]);\n    }\n    return total;\n}\n\n/**\n * Calculate the [silhouette values](https://en.wikipedia.org/wiki/Silhouette_(clustering))\n * for clustered data.\n *\n * @param {Array<Array<number>>} points N-dimensional coordinates of points.\n * @param {Array<number>} labels Labels of points. This must be the same length as `points`,\n * and values must lie in [0..G-1], where G is the number of groups.\n * @return {Array<number>} The silhouette value for each point.\n *\n * @example\n * silhouette([[0.25], [0.75]], [0, 0]); // => [1.0, 1.0]\n */\nfunction silhouette(points, labels) {\n    if (points.length !== labels.length) {\n        throw new Error(\"must have exactly as many labels as points\");\n    }\n    var groupings = createGroups(labels);\n    var distances = calculateAllDistances(points);\n    var result = [];\n    for (var i = 0; i < points.length; i++) {\n        var s = 0;\n        if (groupings[labels[i]].length > 1) {\n            var a = meanDistanceFromPointToGroup(\n                i,\n                groupings[labels[i]],\n                distances\n            );\n            var b = meanDistanceToNearestGroup(\n                i,\n                labels,\n                groupings,\n                distances\n            );\n            s = (b - a) / Math.max(a, b);\n        }\n        result.push(s);\n    }\n    return result;\n}\n\n/**\n * Create a lookup table mapping group IDs to point IDs.\n *\n * @private\n * @param {Array<number>} labels Labels of points. This must be the same length as `points`,\n * and values must lie in [0..G-1], where G is the number of groups.\n * @return {Array<Array<number>>} An array of length G, each of whose entries is an array\n * containing the indices of the points in that group.\n */\nfunction createGroups(labels) {\n    var numGroups = 1 + max(labels);\n    var result = Array(numGroups);\n    for (var i = 0; i < labels.length; i++) {\n        var label = labels[i];\n        if (result[label] === undefined) {\n            result[label] = [];\n        }\n        result[label].push(i);\n    }\n    return result;\n}\n\n/**\n * Create a lookup table of all inter-point distances.\n *\n * @private\n * @param {Array<Array<number>>} points N-dimensional coordinates of points.\n * @return {Array<Array<number>>} A symmetric square array of inter-point distances\n * (zero on the diagonal).\n */\nfunction calculateAllDistances(points) {\n    var numPoints = points.length;\n    var result = makeMatrix(numPoints, numPoints);\n    for (var i = 0; i < numPoints; i++) {\n        for (var j = 0; j < i; j++) {\n            result[i][j] = euclideanDistance(points[i], points[j]);\n            result[j][i] = result[i][j];\n        }\n    }\n    return result;\n}\n\n/**\n * Calculate the mean distance between this point and all the points in the\n * nearest group (as determined by which point in another group is closest).\n *\n * @private\n * @param {number} which The index of this point.\n * @param {Array<number>} labels Labels of points.\n * @param {Array<Array<number>>} groupings An array whose entries are arrays\n * containing the indices of the points in that group.\n * @param {Array<Array<number>>} distances A symmetric square array of inter-point\n * distances.\n * @return {number} The mean distance from this point to others in the nearest\n * group.\n */\nfunction meanDistanceToNearestGroup(which, labels, groupings, distances) {\n    var label = labels[which];\n    var result = Number.MAX_VALUE;\n    for (var i = 0; i < groupings.length; i++) {\n        if (i !== label) {\n            var d = meanDistanceFromPointToGroup(\n                which,\n                groupings[i],\n                distances\n            );\n            if (d < result) {\n                result = d;\n            }\n        }\n    }\n    return result;\n}\n\n/**\n * Calculate the mean distance between a point and all the points in a group\n * (possibly its own).\n *\n * @private\n * @param {number} which The index of this point.\n * @param {Array<number>} group The indices of all the points in the group in\n * question.\n * @param {Array<Array<number>>} distances A symmetric square array of inter-point\n * distances.\n * @return {number} The mean distance from this point to others in the\n * specified group.\n */\nfunction meanDistanceFromPointToGroup(which, group, distances) {\n    var total = 0;\n    for (var i = 0; i < group.length; i++) {\n        total += distances[which][group[i]];\n    }\n    return total / group.length;\n}\n\n/**\n * Calculate the [silhouette metric](https://en.wikipedia.org/wiki/Silhouette_(clustering))\n * for a set of N-dimensional points arranged in groups. The metric is the largest\n * individual silhouette value for the data.\n *\n * @param {Array<Array<number>>} points N-dimensional coordinates of points.\n * @param {Array<number>} labels Labels of points. This must be the same length as `points`,\n * and values must lie in [0..G-1], where G is the number of groups.\n * @return {number} The silhouette metric for the groupings.\n *\n * @example\n * silhouetteMetric([[0.25], [0.75]], [0, 0]); // => 1.0\n */\nfunction silhouetteMetric(points, labels) {\n    var values = silhouette(points, labels);\n    return max(values);\n}\n\n/**\n * Relative error.\n *\n * This is more difficult to calculate than it first appears [1,2].  The usual\n * formula for the relative error between an actual value A and an expected\n * value E is `|(A-E)/E|`, but:\n *\n * 1. If the expected value is 0, any other value has infinite relative error,\n *    which is counter-intuitive: if the expected voltage is 0, getting 1/10th\n *    of a volt doesn't feel like an infinitely large error.\n *\n * 2. This formula does not satisfy the mathematical definition of a metric [3].\n *    [4] solved this problem by defining the relative error as `|ln(|A/E|)|`,\n *    but that formula only works if all values are positive: for example, it\n *    reports the relative error of -10 and 10 as 0.\n *\n * Our implementation sticks with convention and returns:\n *\n * - 0 if the actual and expected values are both zero\n * - Infinity if the actual value is non-zero and the expected value is zero\n * - `|(A-E)/E|` in all other cases\n *\n * [1] https://math.stackexchange.com/questions/677852/how-to-calculate-relative-error-when-true-value-is-zero\n * [2] https://en.wikipedia.org/wiki/Relative_change_and_difference\n * [3] https://en.wikipedia.org/wiki/Metric_(mathematics)#Definition\n * [4] F.W.J. Olver: \"A New Approach to Error Arithmetic.\" SIAM Journal on\n *     Numerical Analysis, 15(2), 1978, 10.1137/0715024.\n *\n * @param {number} actual The actual value.\n * @param {number} expected The expected value.\n * @return {number} The relative error.\n */\nfunction relativeError(actual, expected) {\n    // These lines are actually covered by tests, but it seems\n    // like c8 has a bug that marks them as not covered.\n    /* c8 ignore start */\n    if (actual === 0 && expected === 0) {\n        return 0;\n    }\n    /* c8 ignore end */\n    return Math.abs((actual - expected) / expected);\n}\n\n/**\n * Approximate equality.\n *\n * @param {number} actual The value to be tested.\n * @param {number} expected The reference value.\n * @param {number} tolerance The acceptable relative difference.\n * @return {boolean} Whether numbers are within tolerance.\n */\nfunction approxEqual(actual, expected, tolerance) {\n    if ( tolerance === void 0 ) tolerance = epsilon;\n\n    return relativeError(actual, expected) <= tolerance;\n}\n\nexport { BayesianClassifier, PerceptronModel, addToMean, approxEqual, mean as average, meanSimple as averageSimple, BayesianClassifier as bayesian, bernoulliDistribution, binomialDistribution, bisect, chiSquaredDistributionTable, chiSquaredGoodnessOfFit, chunk, ckmeans, coefficientOfVariation, combinations, combinationsReplacement, combineMeans, combineVariances, cumulativeStdLogisticProbability, cumulativeStdNormalProbability, epsilon, equalIntervalBreaks, errorFunction as erf, errorFunction, extent, extentSorted, factorial, gamma, gammaln, geometricMean, harmonicMean, interquartileRange, inverseErrorFunction, interquartileRange as iqr, jenks, kMeansCluster, kernelDensityEstimation as kde, kernelDensityEstimation, linearRegression, linearRegressionLine, logAverage, logit, medianAbsoluteDeviation as mad, max, maxSorted, mean, meanSimple, median, medianAbsoluteDeviation, medianSorted, min, minSorted, mode, modeFast, modeSorted, numericSort, PerceptronModel as perceptron, permutationTest, permutationsHeap, poissonDistribution, probit, product, quantile, quantileRank, quantileRankSorted, quantileSorted, quickselect, rSquared, relativeError, rootMeanSquare as rms, rootMeanSquare, sample, sampleCorrelation, sampleCovariance, sampleKurtosis, sampleRankCorrelation, sampleSkewness, sampleStandardDeviation, sampleVariance, sampleWithReplacement, shuffle, shuffleInPlace, sign, silhouette, silhouetteMetric, standardDeviation, standardNormalTable, subtractFromMean, sum, sumNthPowerDeviations, sumSimple, tTest, tTestTwoSample, uniqueCountSorted, variance, wilcoxonRankSum, zScore };\n//# sourceMappingURL=simple-statistics.mjs.map\n","import { DateTime } from \"luxon\";\nimport { MAX_NUM_ENTRIES } from \"shared/constants\";\nimport { getDateRanges, getDefaultPayDates } from \"shared/hooks/use-dates\";\nimport { PaymentPeriod, PaymentTypes } from \"shared/models/payment-periods\";\nimport { Scenario } from \"shared/models/scenario\";\nimport { ProjectedIncome } from \"shared/models/store/current\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { findNearestIdxOnOrBefore } from \"shared/utility/find-nearest-on-or-before\";\nimport { findSameYear } from \"shared/utility/find-same-year\";\nimport { getActualDate } from \"shared/utility/get-actual-date\";\nimport { getEmptyMeritSequence, MeritSequence } from \"shared/utility/get-empty-merit-sequence\";\nimport { getFuturePay } from \"shared/utility/get-future-pay\";\nimport { getMeritSequence } from \"shared/utility/get-merit-sequence\";\nimport { getPayments } from \"shared/utility/get-payments\";\nimport { getValueByDateRange } from \"shared/utility/get-values-by-date-range\";\nimport { groupBySingle } from \"shared/utility/group-by-single\";\nimport { incomeByRange } from \"shared/utility/income-by-range\";\nimport { sumSimple } from \"simple-statistics\";\n\nexport const getScenarios = (year: number, projectedIncome: ProjectedIncome): Scenario[] => {\n  const timeSeries = projectedIncome.timeSeries;\n  const localDateTime = getLocalDateTime();\n\n  const defaultDates = getDefaultPayDates(year);\n  const dates = {\n    meritIncrease: defaultDates.meritIncrease,\n    meritBonus: getActualDate(year, projectedIncome.timeSeries.meritBonus) ?? defaultDates.meritBonus,\n    companyBonus: getActualDate(year, projectedIncome.timeSeries.companyBonus) ?? defaultDates.companyBonus,\n    retirement: getActualDate(year, projectedIncome.timeSeries.retirementBonus) ?? defaultDates.retirementBonus,\n  };\n\n  const dateRanges = getDateRanges(year);\n\n  const paid = {\n    meritBonus: findSameYear(year, timeSeries.meritBonus)?.value,\n    companyBonus: findSameYear(year, timeSeries.companyBonus)?.value,\n    retirementBonus: findSameYear(year, timeSeries.retirementBonus)?.value,\n  };\n\n  const meritSequence = getMeritSequence(year, projectedIncome);\n  const pay = timeSeries.paycheck.filter((x) => {\n    const date = DateTime.fromISO(x.date);\n    return date.year > year - 3 && date.year <= year;\n  });\n\n  const mostRecentPay = pay.at(-1) ?? timeSeries.paycheck.at(-1);\n  if (!mostRecentPay) {\n    return [];\n  }\n\n  const actualMeritBonusPcts = pay.map((x) => findSameYear(DateTime.fromISO(x.date).year, timeSeries.meritBonusPct)?.value ?? 0);\n  const equityLookup = groupBySingle(timeSeries.equityPct, (x) => DateTime.fromISO(x.date).year);\n  const equityIncreasePct = findSameYear(year, timeSeries.equityPct)?.value ?? 0;\n  const companyBonusFactor = findSameYear(year, timeSeries.companyBonusPct);\n  const companyBonusPcts = companyBonusFactor\n    ? [companyBonusFactor.value]\n    : timeSeries.companyBonusPct.slice(-1 * MAX_NUM_ENTRIES).map((x) => x.value);\n\n  const companyBonusPctWeights = Object.entries(Object.groupBy(companyBonusPcts, (x) => x)).map(([, values]) => {\n    return {\n      weight: values!.length,\n      value: values!.at(0)!,\n    };\n  });\n\n  const basePayAndMeritScenarios: MeritSequence[] = [];\n  if (meritSequence.length === 0) {\n    basePayAndMeritScenarios.push(getEmptyMeritSequence(year, projectedIncome, pay));\n  } else {\n    const meritScenarios = meritSequence.map(({ weight, values: merits }) => {\n      const nextPay = getFuturePay(\n        pay,\n        merits.map((x) => x.meritIncreasePct),\n        dates.meritIncrease,\n        year,\n        equityLookup\n      );\n\n      nextPay.forEach((x) => {\n        x.value = Math.round(x.value);\n      });\n\n      const projectedMerit = merits.map((x) => x.meritBonusPct);\n      const lastThreeMeritBonuses = actualMeritBonusPcts.concat(projectedMerit).slice(-3);\n      const lastThreeMeritBonusFactor = sumSimple(lastThreeMeritBonuses);\n\n      const lastMerit = merits.at(-1)!;\n      const payments = getPayments(\n        DateTime.fromObject({ day: 1, month: 1, year: year - 1 }),\n        DateTime.fromObject({ day: 31, month: 12, year: year }).endOf(\"day\"),\n        getValueByDateRange(nextPay)\n      );\n\n      return {\n        year,\n        weight,\n        pay: nextPay,\n        lastThreeMeritBonusFactor,\n        lastThreeMeritBonuses,\n        meritBonusPct: lastMerit.meritBonusPct,\n        meritIncreasePct: lastMerit.meritIncreasePct,\n        payments,\n        equityIncreasePct,\n        retirementBonusPct: 0.15,\n      };\n    });\n\n    basePayAndMeritScenarios.push(...meritScenarios);\n  }\n\n  const postBasePay = basePayAndMeritScenarios.map((x) => {\n    const aprToApr = (x.pay.at(-1)?.value ?? 0) * 26;\n    const basePay = Math.round(incomeByRange([PaymentTypes.regular], dateRanges.base, x.payments));\n    const meritBonus =\n      paid.meritBonus ?? Math.round(incomeByRange([PaymentTypes.regular], dateRanges.meritBonus, x.payments) * x.meritBonusPct);\n\n    const payBeforeMerit = findNearestIdxOnOrBefore(dates.meritBonus, x.payments, (x) => DateTime.fromISO(x.payedOn));\n\n    x.payments.splice(payBeforeMerit + 1, 0, {\n      value: meritBonus,\n      start: dateRanges.meritBonus.start.toISO()!,\n      end: dateRanges.meritBonus.end.toISO()!,\n      payedOn: dates.meritBonus.toISO()!,\n      cumulative: 0,\n      type: PaymentTypes.bonus,\n    });\n\n    return { ...x, aprToApr, basePay, meritBonus };\n  });\n\n  const withCompanyBonus = companyBonusPctWeights.flatMap((companyBonusFactor) => {\n    return postBasePay.map((x) => {\n      const companyBonusPct = x.lastThreeMeritBonusFactor * companyBonusFactor.value;\n      const companyBonus =\n        paid.companyBonus ?? Math.round(incomeByRange([PaymentTypes.regular], dateRanges.companyBonus, x.payments) * companyBonusPct);\n\n      const payBeforeCompanyBonus = findNearestIdxOnOrBefore(dates.companyBonus, x.payments, (x) => DateTime.fromISO(x.payedOn));\n\n      const payments = x.payments.toSpliced(payBeforeCompanyBonus + 1, 0, {\n        value: companyBonus,\n        start: dateRanges.companyBonus.start.toISO()!,\n        end: dateRanges.companyBonus.end.toISO()!,\n        payedOn: dates.companyBonus.toISO()!,\n        cumulative: 0,\n        type: PaymentTypes.bonus,\n      });\n\n      const cumulative: PaymentPeriod[] = payments.filter((x) => DateTime.fromISO(x.payedOn).year < year);\n      const baseLength = cumulative.length;\n      payments\n        .filter((x) => DateTime.fromISO(x.payedOn).year === year)\n        .forEach((x, i) => {\n          cumulative.push({ ...x, cumulative: i > 0 ? cumulative[i + baseLength - 1].cumulative + x.value : x.value });\n        });\n\n      return {\n        ...x,\n        weight: x.weight * companyBonusFactor.weight,\n        companyBonusFactor: companyBonusFactor.value,\n        companyBonusPct,\n        companyBonus,\n        payments: cumulative,\n      };\n    });\n  });\n\n  const totals = withCompanyBonus.map((x) => {\n    const retirementBonus =\n      paid.retirementBonus ??\n      Math.round(incomeByRange([PaymentTypes.regular, PaymentTypes.bonus], dateRanges.retirementBonus, x.payments) * 0.15);\n    const totalPay = Math.round(sumSimple([x.basePay, x.meritBonus, x.companyBonus, retirementBonus]));\n    const taxablePay = Math.round(sumSimple([x.basePay, x.meritBonus, x.companyBonus]));\n\n    const payBeforeRetirementBonus = findNearestIdxOnOrBefore(dates.retirement, x.payments, (x) => DateTime.fromISO(x.payedOn));\n    x.payments.splice(payBeforeRetirementBonus + 1, 0, {\n      value: retirementBonus,\n      start: dateRanges.retirementBonus.start.toISO()!,\n      end: dateRanges.retirementBonus.end.toISO()!,\n      payedOn: dates.retirement.toISO()!,\n      cumulative: 0,\n      type: PaymentTypes.nonTaxableBonus,\n    });\n\n    const regularPayments = x.payments.filter((x) => x.type === PaymentTypes.regular);\n    const currentRegularPaymentIdx = findNearestIdxOnOrBefore(localDateTime, regularPayments, (x) => DateTime.fromISO(x.payedOn));\n    const remainingRegularPayments = regularPayments.length - 1 - currentRegularPaymentIdx;\n    const currentPaymentIdx = findNearestIdxOnOrBefore(localDateTime, x.payments, (x) => DateTime.fromISO(x.payedOn));\n\n    return {\n      currentPaymentIdx,\n      remainingRegularPayments,\n      totalPay,\n      retirementBonus,\n      taxablePay,\n      ...x,\n    };\n  });\n\n  return totals.sort((a, b) => {\n    const weight = b.weight - a.weight;\n    return weight === 0 ? b.totalPay - a.totalPay : weight;\n  });\n};\n","import { ProjectedIncome } from \"shared/models/store/current\";\nimport { getScenarios } from \"./scenarios\";\n\nself.onmessage = (event: MessageEvent<{ year: number; projectedIncome: ProjectedIncome }>) => {\n  console.log(\"worker\", self.name, \"generating scenarios for \", event.data.year);\n  const startTime = performance.now();\n  const scenarios = getScenarios(event.data.year, event.data.projectedIncome);\n  const endTime = performance.now();\n  console.log(\"worker\", self.name, `generating ${scenarios.length} scenarios took ${Math.round(endTime - startTime)} milliseconds`);\n\n  self.postMessage({ year: event.data.year, scenarios });\n};\n"],"names":["singleton","s","z","English.formatRelativeTime","English.months","English.weekdays","English.meridiems","English.eras","offset","defaultZone","n","isDate","Formats.DATE_SHORT","Formats.DATE_MED","Formats.DATE_FULL","Formats.DATE_HUGE","Formats.TIME_SIMPLE","Formats.TIME_WITH_SECONDS","Formats.TIME_WITH_SHORT_OFFSET","Formats.TIME_WITH_LONG_OFFSET","Formats.TIME_24_SIMPLE","Formats.TIME_24_WITH_SECONDS","Formats.TIME_24_WITH_SHORT_OFFSET","Formats.TIME_24_WITH_LONG_OFFSET","Formats.DATETIME_SHORT","Formats.DATETIME_MED","Formats.DATETIME_FULL","Formats.DATETIME_HUGE","Formats.DATETIME_SHORT_WITH_SECONDS","Formats.DATETIME_MED_WITH_SECONDS","Formats.DATETIME_FULL_WITH_SECONDS","Formats.DATETIME_HUGE_WITH_SECONDS","formatOffset","English.meridiemForDateTime","English.monthForDateTime","English.weekdayForDateTime","English.eraForDateTime","match","English.monthsShort","English.weekdaysLong","English.weekdaysShort","INVALID","orderedUnits","clone","l","Formats.DATE_MED_WITH_WEEKDAY","Formats.DATETIME_MED_WITH_WEEKDAY","set","generatePatches","value","proxyDraft","util","objectUtil","isValid","errorUtil","errorMap","ctx","result","issues","elements","processed","r","_a","_b","ZodFirstPartyTypeKind","accountDataValidator","accountValidator","mortgageValidator","wealth","projectedIncome","projectedWealth","storeValidator","storeV0Validator","storeV1Validator","storeV2Validator","storeV3Validator","storeV4Validator","store","CreateStore","diff","x","companyBonusFactor"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,62,63,64,65,66,67,68,69,70,71,72,73,74,86]}