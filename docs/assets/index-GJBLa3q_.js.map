{"version":3,"file":"index-GJBLa3q_.js","sources":["../../src/shared/utility/sort-by-date.ts","../../src/shared/models/store/version-0/loan.ts","../../src/shared/models/store/version-0/account-data.ts","../../src/shared/models/store/version-0/account.ts","../../src/shared/models/store/version-0/mortgage.ts","../../src/shared/models/store/version-0/net-wealth.ts","../../src/shared/models/store/version-0/projected-income.ts","../../src/shared/models/store/version-2/projected-wealth.ts","../../src/shared/models/store/version-0/projected-wealth.ts","../../src/shared/models/store/version-1/store.ts","../../src/shared/models/store/version-2/store.ts","../../src/shared/models/store/version-3/account-data.ts","../../src/shared/models/store/version-3/mortgage.ts","../../src/shared/models/store/version-5/account.ts","../../src/shared/models/store/version-5/mortgage.ts","../../src/shared/models/store/version-5/net-wealth.ts","../../src/shared/models/store/version-6/projected-wealth.ts","../../src/shared/models/store/version-7/account-data.ts","../../src/shared/models/store/version-8/get-default.ts","../../src/shared/models/store/version-3/account.ts","../../src/shared/models/store/version-3/net-wealth.ts","../../src/shared/models/store/version-3/projected-income.ts","../../src/shared/models/store/version-7/projected-income.ts","../../src/shared/models/store/version-7/store.ts","../../src/shared/models/store/version-8/projected-income.ts","../../src/shared/models/store/version-8/store.ts","../../src/shared/constants.ts","../../src/shared/models/store/version-0/store.ts","../../src/shared/models/store/version-3/projected-wealth.ts","../../src/shared/models/store/version-3/store.ts","../../src/shared/models/store/version-4/projected-wealth.ts","../../src/shared/models/store/version-4/store.ts","../../src/shared/models/store/version-5/store.ts","../../src/shared/models/store/version-6/store.ts","../../src/shared/utility/group-by-single.ts","../../src/shared/store/migrations.ts","../../src/shared/store/store.ts","../../src/shared/store/add-account-entry.ts","../../src/shared/store/add-projected-income.ts","../../src/shared/store/hide-account.ts","../../src/shared/store/remove-account.ts","../../src/shared/store/remove-account-entry.ts","../../src/shared/store/remove-projected-income.ts","../../src/shared/store/reset-store.ts","../../src/shared/store/set-loan.ts","../../src/shared/store/update-account-date.ts","../../src/shared/store/update-account-name.ts","../../src/shared/store/update-account-value.ts","../../src/shared/store/update-projected-income.ts","../../src/capabilities/net-wealth/new-account.tsx","../../src/shared/components/ag-grid/ag-grid.tsx","../../src/shared/utility/current-date.ts","../../src/shared/utility/format-date.ts","../../src/shared/utility/format-cash.ts","../../src/shared/components/formatters/cash.tsx","../../src/capabilities/net-wealth/tab-types/account/column-config.tsx","../../src/capabilities/net-wealth/tab-types/account/hooks/useMissingYears.ts","../../src/shared/components/confirm-dialog.tsx","../../src/capabilities/net-wealth/tab-types/account/settings.tsx","../../src/capabilities/net-wealth/tab-types/account/account.tsx","../../src/shared/utility/find-nearest-on-or-before.ts","../../src/shared/utility/mortgage-calc.ts","../../src/shared/utility/use-graph-dates.ts","../../src/capabilities/net-wealth/tab-types/mortgage/add-entry.tsx","../../src/capabilities/net-wealth/tab-types/mortgage/column-config.tsx","../../src/capabilities/net-wealth/tab-types/mortgage/settings.tsx","../../src/capabilities/net-wealth/tab-types/mortgage/mortgage.tsx","../../src/capabilities/net-wealth/account-tabs.tsx","../../src/shared/hooks/use-earliest-account-entry.ts","../../src/shared/utility/get-graph-value.ts","../../src/capabilities/net-wealth/wealth-chart/use-graph-data.ts","../../src/capabilities/net-wealth/wealth-chart/wealth-chart.tsx","../../src/capabilities/net-wealth/net-wealth.tsx","../../src/shared/components/card.tsx","../../src/shared/components/formatters/cash-range.tsx","../../src/shared/utility/format-percent.ts","../../src/shared/utility/get-probablity-color.ts","../../src/shared/components/formatters/percent.tsx","../../src/shared/components/formatters/percent-range.tsx","../../src/shared/components/formatters/value.tsx","../../src/shared/components/formatters/cluster-value.tsx","../../src/shared/utility/to-human.ts","../../src/shared/components/formatters/countdown.tsx","../../src/shared/store/scenario-store.ts","../../src/shared/utility/ckmeans/make-matrix.ts","../../src/shared/utility/ckmeans/numeric-sort.ts","../../src/shared/utility/ckmeans/unique-count-sorted.ts","../../src/shared/utility/ckmeans/ckmeans.ts","../../src/shared/utility/ckmeans/collapse.ts","../../src/shared/utility/cluster-helpers.ts","../../src/shared/hooks/use-clusters.ts","../../src/shared/utility/find-same-year.ts","../../src/shared/utility/get-actual-date.ts","../../src/shared/utility/get-default-pay-dates.ts","../../src/shared/utility/get-eligible-income-date-ranges.ts","../../src/shared/hooks/use-dates.ts","../../src/shared/models/payment-periods.ts","../../src/shared/utility/chunk-by-equality.ts","../../src/capabilities/projected-income/spark-chart.tsx","../../src/shared/store/update-projected-income-date.ts","../../src/capabilities/projected-income/data-entry/column-config.tsx","../../src/capabilities/projected-income/data-entry/data-entry.tsx","../../src/capabilities/projected-income/income-chart.tsx","../../src/capabilities/projected-income/income-per-period.tsx","../../src/capabilities/projected-income/merit-entry/column-config.tsx","../../src/capabilities/projected-income/merit-entry/merit-entry.tsx","../../src/capabilities/projected-income/projected-income.tsx","../../src/shared/utility/is-future.ts","../../src/capabilities/projected-wealth/hooks/use-future-mortgage-equity.ts","../../src/capabilities/projected-wealth/hooks/use-future-retirement-contributions.ts","../../src/capabilities/projected-wealth/hooks/use-future-savings.ts","../../src/shared/utility/get-threshold-tax-remaining.ts","../../src/capabilities/projected-wealth/hooks/use-future-social-security.ts","../../src/capabilities/projected-wealth/hooks/use-future-totals.tsx","../../src/capabilities/projected-wealth/future-events.tsx","../../src/capabilities/projected-wealth/hooks/use-times-series-wealth.ts","../../src/capabilities/projected-wealth/wealth-chart.tsx","../../src/capabilities/projected-wealth/wealth-table/colum-config.tsx","../../src/capabilities/projected-wealth/wealth-table/wealth-table.tsx","../../src/capabilities/projected-wealth/projected-wealth.tsx","../../src/shared/store/set-projected-wealth.ts","../../src/app/config/config-entry.tsx","../../src/app/config/config.tsx","../../src/shared/store/set-performance-config.ts","../../src/app/config/performance-config.tsx","../../src/shared/utility/sort-by-number.ts","../../src/app/config/scenario-explorer.tsx","../../src/app/config/projected-income.tsx","../../src/app/invalid-data-dialog.tsx","../../src/shared/hooks/use-export.tsx","../../src/shared/hooks/use-import.tsx","../../src/shared/hooks/use-store-data-error.ts","../../src/app/config/system.tsx","../../src/app/config/config-modal.tsx","../../src/app/app.tsx","../../src/app/router.tsx","../../src/shared/utility/luxon-extensions.ts","../../src/shared/utility/get-merit-sequence.ts","../../src/shared/utility/get-scenario-size.ts","../../src/shared/web-worker/entry.ts","../../src/main.tsx"],"sourcesContent":["import { DateTime } from \"luxon\";\n\nexport const sortByDate =\n  <T>(select: (data: T) => DateTime, direction: \"asc\" | \"desc\") =>\n  (a: T, b: T) =>\n    direction === \"asc\" ? select(a).toMillis() - select(b).toMillis() : select(b).toMillis() - select(a).toMillis();\n","import { z } from \"zod\";\n\nexport const loanValidator = z.object({\n  principal: z.number(),\n  ratePct: z.number(),\n  paymentsPerYear: z.number(),\n  payment: z.number(),\n  firstPaymentDate: z.string(),\n  ownershipPct: z.number(),\n});\n\nexport type Loan = z.infer<typeof loanValidator>;\n","import { z } from \"zod\";\n\nexport const accountDataValidator = z.object({\n  date: z.string(),\n  value: z.number(),\n  id: z.string(),\n});\n\nexport type AccountData = z.infer<typeof accountDataValidator>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const accountValidator = z.object({\n  type: z.literal(\"account\"),\n  data: z.array(accountDataValidator),\n});\n\nexport type Account = z.infer<typeof accountValidator>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\nimport { loanValidator } from \"./loan\";\n\nexport const mortgageValidator = z.object({\n  type: z.literal(\"mortgage\"),\n  loan: loanValidator.optional(),\n  data: z.array(accountDataValidator),\n});\n\nexport type Mortgage = z.infer<typeof mortgageValidator>;\n","import { z } from \"zod\";\nimport { accountValidator } from \"./account\";\nimport { mortgageValidator } from \"./mortgage\";\n\nexport const wealth = z.record(z.union([accountValidator, mortgageValidator]));\n\nexport type Wealth = z.infer<typeof wealth>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const projectedIncome = z.object({\n  timeSeries: z.object({\n    paycheck: z.array(accountDataValidator),\n    meritIncreasePct: z.array(accountDataValidator),\n    equityPct: z.array(accountDataValidator),\n    meritBonusPct: z.array(accountDataValidator),\n    meritBonus: z.array(accountDataValidator),\n    companyBonusPct: z.array(accountDataValidator),\n    companyBonus: z.array(accountDataValidator),\n    retirementBonus: z.array(accountDataValidator),\n  }),\n});\n\nexport type ProjectedIncome = z.infer<typeof projectedIncome>;\nexport type TimeSeries = keyof ProjectedIncome[\"timeSeries\"];\n","import { z } from \"zod\";\n\nexport const projectedWealth = z.object({\n  socialSecurityLimit: z.number(),\n  socialSecurityTaxRate: z.number(),\n  medicareSupplementalTaxThreshold: z.number(),\n  medicareSupplementalTaxRate: z.number(),\n  savingsPerMonth: z.number(),\n  retirementContributionPaycheck: z.number(),\n  bonusWitholdingsRate: z.number(),\n});\n\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\nexport type ProjectedWealthKeys = keyof ProjectedWealth;\n","import { z } from \"zod\";\n\nexport const projectedWealth = z.object({\n  socialSecurityLimit: z.number(),\n  socialSecurityTaxRate: z.number(),\n  medicareSupplementalTaxThreshold: z.number(),\n  medicareSupplementalTaxRate: z.number(),\n  savingsPerMonth: z.number(),\n  retirementContributionPaycheck: z.number(),\n});\n\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\nexport type ProjectedWealthKeys = keyof ProjectedWealth;\n","import { z } from \"zod\";\nimport { wealth } from \"../version-0/net-wealth\";\nimport { projectedIncome } from \"../version-0/projected-income\";\nimport { projectedWealth } from \"../version-0/projected-wealth\";\n\nexport const storeValidator = z.object({\n  version: z.literal(1),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { z } from \"zod\";\nimport { projectedIncome, wealth } from \"../version-1\";\nimport { projectedWealth } from \"./projected-wealth\";\n\nexport const storeValidator = z.object({\n  version: z.literal(2),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { z } from \"zod\";\n\nexport const accountDataValidator = z.object({\n  date: z.string(),\n  value: z.number(),\n});\n\nexport type AccountData = z.infer<typeof accountDataValidator>;\n","import { z } from \"zod\";\nimport { loanValidator } from \"../version-2\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const mortgageValidator = z.object({\n  type: z.literal(\"mortgage\"),\n  loan: loanValidator.optional(),\n  data: z.array(accountDataValidator),\n});\n\nexport type Mortgage = z.infer<typeof mortgageValidator>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"../version-3/account-data\";\n\nexport const accountValidator = z.object({\n  type: z.literal(\"account\"),\n  data: z.array(accountDataValidator),\n  hidden: z.boolean().default(false),\n});\n\nexport type Account = z.infer<typeof accountValidator>;\n","import { z } from \"zod\";\nimport { loanValidator } from \"../version-2\";\nimport { accountDataValidator } from \"../version-3/account-data\";\n\nexport const mortgageValidator = z.object({\n  type: z.literal(\"mortgage\"),\n  loan: loanValidator.optional(),\n  data: z.array(accountDataValidator),\n  hidden: z.boolean().default(false),\n});\n\nexport type Mortgage = z.infer<typeof mortgageValidator>;\n","import { z } from \"zod\";\nimport { accountValidator } from \"./account\";\nimport { mortgageValidator } from \"./mortgage\";\n\nexport const wealth = z.record(z.union([accountValidator, mortgageValidator]));\n\nexport type Wealth = z.infer<typeof wealth>;\n","import { z } from \"zod\";\n\nexport const projectedWealth = z.object({\n  socialSecurityLimit: z.number(),\n  socialSecurityTaxRate: z.number(),\n  medicareSupplementalTaxThreshold: z.number(),\n  medicareSupplementalTaxRate: z.number(),\n  savingsPerPaycheck: z.number(),\n  retirementContributionPaycheck: z.number(),\n  bonusWithholdingsRate: z.number(),\n});\n\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\nexport type ProjectedWealthKeys = keyof ProjectedWealth;\n","import { z } from \"zod\";\n\nexport const ratings = {\n  outstanding: \"OUTSTANDING\",\n  exceedsExpectations: \"EXCEEDS_EXPECTATIONS\",\n  meetsExpectations: \"MEETS_EXPECTATIONS\",\n  doesNotMeetExpectations: \"DOES_NOT_MEET_EXPECTATIONS\",\n} as const;\n\nexport const ratingsLabels = {\n  [ratings.outstanding]: \"Outstanding\",\n  [ratings.exceedsExpectations]: \"Exceeds Expectations\",\n  [ratings.meetsExpectations]: \"Meets Expectations\",\n  [ratings.doesNotMeetExpectations]: \"Does Not Meet Expectations\",\n} as const;\n\nexport const ratingPoints = {\n  [ratings.exceedsExpectations]: 3,\n  [ratings.meetsExpectations]: 2,\n  [ratings.doesNotMeetExpectations]: 1,\n  [ratings.outstanding]: 4,\n} as const;\n\nexport type Rating = (typeof ratings)[keyof typeof ratings];\n\nexport const accountDataValidator = z.object({\n  date: z.string(),\n  value: z.number(),\n});\n\nexport type AccountData = z.infer<typeof accountDataValidator>;\n\nexport const meritData = z.object({\n  date: z.string(),\n  meritIncreasePct: z.number(),\n  meritBonusPct: z.number(),\n  equityPct: z.number(),\n  rating: z.nativeEnum(ratings).optional(),\n  enabled: z.boolean(),\n});\nexport type MeritData = z.infer<typeof meritData>;\n","import { Store } from \"./store\";\n\nexport const getDefaultStore = (): Store => ({\n  version: 8,\n  projectedIncome: {\n    timeSeries: {\n      paycheck: [],\n      meritPct: [],\n      companyBonusPct: [],\n      companyBonus: [],\n      retirementBonus: [],\n      meritBonus: [],\n    },\n    config: {\n      outstanding: {\n        bonusPct: 0,\n        meritIncreasePct: 0,\n      },\n      exceedsExpectations: {\n        bonusPct: 0,\n        meritIncreasePct: 0,\n      },\n      meetsExpectations: {\n        bonusPct: 0,\n        meritIncreasePct: 0,\n      },\n      didNotMeet: { bonusPct: 0, meritIncreasePct: 0 },\n    },\n  },\n  wealth: {},\n  projectedWealth: {\n    medicareSupplementalTaxThreshold: 200_000,\n    socialSecurityLimit: 168_600,\n    socialSecurityTaxRate: 0.062,\n    medicareSupplementalTaxRate: 0.009,\n    savingsPerPaycheck: 0,\n    retirementContributionPaycheck: 0,\n    bonusWithholdingsRate: 0,\n  },\n});\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const accountValidator = z.object({\n  type: z.literal(\"account\"),\n  data: z.array(accountDataValidator),\n});\n\nexport type Account = z.infer<typeof accountValidator>;\n","import { z } from \"zod\";\nimport { accountValidator } from \"./account\";\nimport { mortgageValidator } from \"./mortgage\";\n\nexport const wealth = z.record(z.union([accountValidator, mortgageValidator]));\n\nexport type Wealth = z.infer<typeof wealth>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const projectedIncome = z.object({\n  timeSeries: z.object({\n    paycheck: z.array(accountDataValidator),\n    meritIncreasePct: z.array(accountDataValidator),\n    equityPct: z.array(accountDataValidator),\n    meritBonusPct: z.array(accountDataValidator),\n    meritBonus: z.array(accountDataValidator),\n    companyBonusPct: z.array(accountDataValidator),\n    companyBonus: z.array(accountDataValidator),\n    retirementBonus: z.array(accountDataValidator),\n  }),\n});\n\nexport type ProjectedIncome = z.infer<typeof projectedIncome>;\nexport type TimeSeries = ProjectedIncome[\"timeSeries\"];\nexport type TimeSeriesKeys = keyof ProjectedIncome[\"timeSeries\"];\n","import { z } from \"zod\";\nimport { accountDataValidator, meritData } from \"./account-data\";\n\nexport const projectedIncome = z.object({\n  timeSeries: z.object({\n    paycheck: z.array(accountDataValidator),\n    meritPct: z.array(meritData),\n    companyBonusPct: z.array(accountDataValidator),\n    companyBonus: z.array(accountDataValidator),\n    retirementBonus: z.array(accountDataValidator),\n    meritBonus: z.array(accountDataValidator),\n  }),\n});\n\nexport type ProjectedIncome = z.infer<typeof projectedIncome>;\nexport type TimeSeries = ProjectedIncome[\"timeSeries\"];\nexport type TimeSeriesKeys = Exclude<keyof ProjectedIncome[\"timeSeries\"], \"meritPct\">;\nexport type TimeSeriesMeritKey = \"meritPct\";\n","import { z } from \"zod\";\nimport { wealth } from \"../version-5/net-wealth\";\nimport { projectedWealth } from \"../version-6/projected-wealth\";\nimport { projectedIncome } from \"./projected-income\";\n\nexport const storeValidator = z.object({\n  version: z.literal(7),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { z } from \"zod\";\nimport { accountDataValidator, meritData, Rating, ratings } from \"../version-7\";\n\nexport const projectedIncome = z.object({\n  timeSeries: z.object({\n    paycheck: z.array(accountDataValidator),\n    meritPct: z.array(meritData),\n    companyBonusPct: z.array(accountDataValidator),\n    companyBonus: z.array(accountDataValidator),\n    retirementBonus: z.array(accountDataValidator),\n    meritBonus: z.array(accountDataValidator),\n  }),\n  config: z.object({\n    didNotMeet: z.object({\n      meritIncreasePct: z.number().optional(),\n      bonusPct: z.number().optional(),\n    }),\n    meetsExpectations: z.object({\n      meritIncreasePct: z.number().optional(),\n      bonusPct: z.number().optional(),\n    }),\n    exceedsExpectations: z.object({\n      meritIncreasePct: z.number().optional(),\n      bonusPct: z.number().optional(),\n    }),\n    outstanding: z.object({\n      meritIncreasePct: z.number().optional(),\n      bonusPct: z.number().optional(),\n    }),\n  }),\n});\n\nexport type ProjectedIncome = z.infer<typeof projectedIncome>;\nexport type TimeSeries = ProjectedIncome[\"timeSeries\"];\nexport type TimeSeriesKeys = Exclude<keyof ProjectedIncome[\"timeSeries\"], \"meritPct\">;\nexport type TimeSeriesMeritKey = \"meritPct\";\nexport type PerformanceConfig = ProjectedIncome[\"config\"];\nexport type Ratings = keyof ProjectedIncome[\"config\"];\n\nexport type RatingConfig = { mermeritIncreasePct: number; bonusPct: number };\n\nexport const ratingToTimeSeries: Record<Rating, keyof PerformanceConfig> = {\n  [ratings.outstanding]: \"outstanding\",\n  [ratings.exceedsExpectations]: \"exceedsExpectations\",\n  [ratings.meetsExpectations]: \"meetsExpectations\",\n  [ratings.doesNotMeetExpectations]: \"didNotMeet\",\n};\n","import { z } from \"zod\";\nimport { wealth } from \"../version-5/net-wealth\";\nimport { projectedWealth } from \"../version-6/projected-wealth\";\nimport { projectedIncome } from \"./projected-income\";\n\nexport const storeValidator = z.object({\n  version: z.literal(8),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","export const MAX_NUM_ENTRIES = 10;\nexport const PAYMENTS_PER_YEAR = 26;\nexport const MONTHS_PER_YEAR = 12;\n","import { z } from \"zod\";\nimport { wealth } from \"./net-wealth\";\nimport { projectedIncome } from \"./projected-income\";\nimport { projectedWealth } from \"./projected-wealth\";\n\nexport const storeValidator = z.object({\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { z } from \"zod\";\n\nexport const projectedWealth = z.object({\n  socialSecurityLimit: z.number(),\n  socialSecurityTaxRate: z.number(),\n  medicareSupplementalTaxThreshold: z.number(),\n  medicareSupplementalTaxRate: z.number(),\n  savingsPerMonth: z.number(),\n  retirementContributionPaycheck: z.number(),\n  bonusWitholdingsRate: z.number(),\n});\n\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\nexport type ProjectedWealthKeys = keyof ProjectedWealth;\n","import { z } from \"zod\";\nimport { wealth } from \"./net-wealth\";\nimport { projectedIncome } from \"./projected-income\";\nimport { projectedWealth } from \"./projected-wealth\";\n\nexport const storeValidator = z.object({\n  version: z.literal(3),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { z } from \"zod\";\n\nexport const projectedWealth = z.object({\n  socialSecurityLimit: z.number(),\n  socialSecurityTaxRate: z.number(),\n  medicareSupplementalTaxThreshold: z.number(),\n  medicareSupplementalTaxRate: z.number(),\n  savingsPerMonth: z.number(),\n  retirementContributionPaycheck: z.number(),\n  bonusWithholdingsRate: z.number(),\n});\n\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\nexport type ProjectedWealthKeys = keyof ProjectedWealth;\n","import { z } from \"zod\";\nimport { wealth } from \"../version-3/net-wealth\";\nimport { projectedIncome } from \"../version-3/projected-income\";\nimport { projectedWealth } from \"./projected-wealth\";\n\nexport const storeValidator = z.object({\n  version: z.literal(4),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { z } from \"zod\";\nimport { projectedIncome } from \"../version-3/projected-income\";\nimport { projectedWealth } from \"../version-4/projected-wealth\";\nimport { wealth } from \"./net-wealth\";\n\nexport const storeValidator = z.object({\n  version: z.literal(5),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { z } from \"zod\";\nimport { projectedIncome } from \"../version-3/projected-income\";\nimport { wealth } from \"../version-5/net-wealth\";\nimport { projectedWealth } from \"./projected-wealth\";\n\nexport const storeValidator = z.object({\n  version: z.literal(6),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","export const groupBySingle = <T, Tkey extends string | number>(array: T[], selector: (data: T) => Tkey) => {\n  const result = {} as Partial<Record<Tkey, T>>;\n  for (let i = 0; i < array.length; i++) {\n    result[selector(array[i])] ??= array[i];\n  }\n  return result;\n};\n","import { DateTime } from \"luxon\";\nimport { MONTHS_PER_YEAR, PAYMENTS_PER_YEAR } from \"shared/constants\";\nimport { storeValidator } from \"shared/models/store/current\";\nimport { storeValidator as storeV0Validator } from \"shared/models/store/version-0\";\nimport { Store as StoreV1, storeValidator as storeV1Validator } from \"shared/models/store/version-1\";\nimport { Store as StoreV2, storeValidator as storeV2Validator } from \"shared/models/store/version-2\";\nimport { Store as StoreV3, storeValidator as storeV3Validator } from \"shared/models/store/version-3\";\nimport { Store as StoreV4, storeValidator as storeV4Validator } from \"shared/models/store/version-4\";\nimport { Store as StoreV5, storeValidator as storeV5Validator } from \"shared/models/store/version-5\";\nimport { Store as StoreV6, storeValidator as storeV6Validator } from \"shared/models/store/version-6\";\nimport { MeritData, Store as StoreV7, storeValidator as storeV7Validator } from \"shared/models/store/version-7\";\nimport { Store as StoreV8, getDefaultStore as getDefaultStoreV8 } from \"shared/models/store/version-8\";\nimport { groupBySingle } from \"shared/utility/group-by-single\";\n\nexport const migration = (data: unknown) => {\n  if (data === null || data === undefined) {\n    throw new Error(\"parsed data is null or undefined\");\n  } else if (typeof data !== \"object\") {\n    throw new Error(\"Parsed data is not an object\");\n  }\n\n  if (!(\"version\" in data)) {\n    storeV0Validator.parse(data);\n    (data as StoreV1).version = 1;\n  }\n\n  if (\"version\" in data) {\n    if (data.version === 1) {\n      storeV1Validator.parse(data);\n      (data as StoreV2).version = 2;\n      (data as StoreV2).projectedWealth.bonusWitholdingsRate = 0;\n    }\n    if (data.version === 2) {\n      storeV2Validator.parse(data);\n      (data as StoreV3).version = 3;\n    }\n    if (data.version === 3) {\n      storeV3Validator.parse(data);\n      (data as StoreV4).version = 4;\n      (data as StoreV4).projectedWealth.bonusWithholdingsRate = (data as StoreV3).projectedWealth.bonusWitholdingsRate;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      delete (data as any).projectedWealth.bonusWitholdingsRate;\n    }\n    if (data.version === 4) {\n      storeV4Validator.parse(data);\n      (data as StoreV5).version = 5;\n      const keys = Object.keys((data as StoreV5).wealth);\n      for (let i = 0; i < keys.length; i++) {\n        (data as StoreV5).wealth[keys[i]].hidden = false;\n      }\n    }\n    if (data.version === 5) {\n      storeV5Validator.parse(data);\n      const storeV5 = data as StoreV5;\n      const storeV6 = data as StoreV6;\n      storeV6.version = 6;\n      storeV6.projectedWealth.savingsPerPaycheck = storeV5.projectedWealth.savingsPerMonth * (MONTHS_PER_YEAR / PAYMENTS_PER_YEAR);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      delete (data as any).projectedWealth.savingsPerMonth;\n    }\n    if (data.version === 6) {\n      storeV6Validator.parse(data);\n      const storeV7 = data as StoreV7;\n      const storeV6 = data as StoreV6;\n      storeV7.version = 7;\n      storeV7.projectedIncome.timeSeries.meritPct = [];\n      const { equityPct, meritBonusPct, meritIncreasePct } = storeV6.projectedIncome.timeSeries;\n\n      const meritBonusPctByYear = groupBySingle(meritBonusPct, (x) => DateTime.fromISO(x.date).year);\n      const equityPctByYear = groupBySingle(equityPct, (x) => DateTime.fromISO(x.date).year);\n\n      storeV7.projectedIncome.timeSeries.meritPct = meritIncreasePct.map((x): MeritData => {\n        const year = DateTime.fromISO(x.date).year;\n        return {\n          date: x.date,\n          meritIncreasePct: x.value,\n          equityPct: equityPctByYear[year]?.value ?? 0,\n          meritBonusPct: meritBonusPctByYear[year]?.value ?? 0,\n          enabled: true,\n        };\n      });\n    }\n    if (data.version === 7) {\n      storeV7Validator.parse(data);\n      const storeV8 = data as StoreV8;\n      storeV8.version = 8;\n\n      const defaultStore = getDefaultStoreV8();\n      storeV8.projectedIncome.config = defaultStore.projectedIncome.config;\n    }\n  }\n\n  const next = storeValidator.parse(data);\n  console.log(next);\n  return next;\n};\n","import { Store as CreateStore } from \"@tanstack/store\";\nimport { ZodSchema } from \"zod\";\nimport { Store, getDefaultStore, storeValidator } from \"../models/store/current\";\nimport { migration } from \"./migrations\";\n\nconst jsonTryParse = (data?: string | null): { result: unknown; isSuccess: boolean } => {\n  if (!data) {\n    return { result: data, isSuccess: false };\n  }\n  try {\n    return { result: JSON.parse(data), isSuccess: true };\n  } catch {\n    return { result: data, isSuccess: false };\n  }\n};\n\nexport const createStore = <T extends object>(validator: ZodSchema<unknown>, defaultValue: T) => {\n  const key = \"store\";\n  const invalidData = \"store-invalid\";\n  const localData = localStorage.getItem(key);\n  const { result: parsedData, isSuccess } = jsonTryParse(localData);\n  const data = isSuccess ? parsedData : defaultValue;\n  const parse = validator.safeParse(data);\n\n  if (!parse.success) {\n    try {\n      migration(data);\n      localStorage.setItem(key, JSON.stringify(data));\n    } catch (err) {\n      console.log(\"error\", err);\n      console.log(\"invalid data\", data);\n      if (localData !== null) {\n        localStorage.setItem(invalidData, localData);\n      }\n      localStorage.setItem(key, JSON.stringify(defaultValue));\n    }\n  }\n\n  const store = new CreateStore<T>(data as T);\n  store.subscribe(() => {\n    const current = localStorage.getItem(key);\n    current && localStorage.setItem(`${key}-previous`, current);\n    localStorage.setItem(key, JSON.stringify(store.state));\n  });\n\n  return store;\n};\n\nexport const store = createStore<Store>(storeValidator, getDefaultStore());\n","import { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { Account } from \"shared/models/store/current\";\nimport { sortByDate } from \"../utility/sort-by-date\";\nimport { store } from \"./store\";\n\nexport const addAccountEntry = (accountName: string, date: DateTime<true>, amount: number) => {\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      (next.wealth[accountName] as Account).data.push({\n        date: date.startOf(\"day\").toString(),\n        value: amount,\n      });\n      next.wealth[accountName].data.sort(sortByDate((x) => DateTime.fromISO(x.date), \"asc\"));\n    });\n  });\n};\n","import { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { MeritData, TimeSeriesKeys } from \"shared/models/store/current\";\nimport { sortByDate } from \"shared/utility/sort-by-date\";\nimport { store } from \"./store\";\n\nexport const addProjectedIncome = (date: DateTime, timeSeries: TimeSeriesKeys, value: number) => {\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      next.projectedIncome.timeSeries[timeSeries] = next.projectedIncome.timeSeries[timeSeries]\n        .concat({\n          date: date.startOf(\"day\").toString(),\n          value,\n        })\n        .sort(sortByDate((x) => DateTime.fromISO(x.date), \"asc\"));\n    });\n  });\n};\n\nexport const addProjectedIncomeMeritPct = (meritDetails: MeritData) => {\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      next.projectedIncome.timeSeries.meritPct = next.projectedIncome.timeSeries.meritPct\n        .concat(meritDetails)\n        .sort(sortByDate((x) => DateTime.fromISO(x.date), \"asc\"));\n    });\n  });\n};\n","import { create } from \"mutative\";\nimport { store } from \"./store\";\n\nexport const hideAccount = (accountName: string) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      if (next.wealth[accountName]) {\n        next.wealth[accountName].hidden = true;\n      }\n    });\n  });\n","import { create } from \"mutative\";\nimport { store } from \"./store\";\n\nexport const removeAccount = (accountName: string) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      delete next.wealth[accountName];\n    });\n  });\n","import { create } from \"mutative\";\nimport { AccountData } from \"shared/models/store/current\";\nimport { store } from \"./store\";\n\nexport const removeAccountEntry = (accountName: string, data: AccountData) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      const idx = prev.wealth[accountName]?.data.findIndex((x) => x === data);\n      if (idx === undefined || idx < 0) {\n        throw new Error(\"failed to find data\");\n      }\n\n      next.wealth[accountName].data.splice(idx, 1);\n      return next;\n    });\n  });\n","import { create } from \"mutative\";\nimport { AccountData, MeritData, TimeSeriesKeys } from \"shared/models/store/current\";\nimport { store } from \".\";\n\nexport const removeProjectedIncome = (accountName: TimeSeriesKeys, data: AccountData) => {\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      const idx = prev.projectedIncome.timeSeries[accountName]?.findIndex((x) => x === data);\n      if (idx === undefined || idx < 0) {\n        throw new Error(\"failed to find data\");\n      }\n\n      next.projectedIncome.timeSeries[accountName].splice(idx, 1);\n    });\n  });\n};\n\nexport const removeProjectedIncomeMerit = (data: MeritData) => {\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      const idx = prev.projectedIncome.timeSeries.meritPct?.findIndex((x) => x === data);\n      if (idx === undefined || idx < 0) {\n        throw new Error(\"failed to find data\");\n      }\n\n      next.projectedIncome.timeSeries.meritPct.splice(idx, 1);\n    });\n  });\n};\n","import { getDefaultStore } from \"shared/models/store/current\";\nimport { store } from \"./store\";\n\nexport const resetStore = () => store.setState(() => getDefaultStore());\n","import { create } from \"mutative\";\nimport { Loan, Mortgage } from \"shared/models/store/current\";\nimport { store } from \"./store\";\n\nexport const setLoan = (accountName: string, loan: Loan) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      if (next.wealth[accountName].type === \"mortgage\") {\n        (next.wealth[accountName] as Mortgage).loan = loan;\n      }\n    });\n  });\n","import { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { AccountData } from \"shared/models/store/current\";\nimport { store } from \".\";\n\nexport const updateAccountDate = (accountName: string, data: AccountData, date: DateTime) => {\n  store.setState((prev) => {\n    const next = create(prev, (next) => {\n      const idx = prev.wealth[accountName]?.data.findIndex((x) => x === data);\n      if (idx < 0) {\n        throw new Error(\"failed to find data\");\n      }\n\n      next.wealth[accountName].data[idx].date = date.toISO()!;\n    });\n    return next;\n  });\n};\n","import { create } from \"mutative\";\nimport { store } from \"./store\";\n\nexport const updateAccountName = (currentAccountName: string, newAccountName: string) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      next.wealth[newAccountName] = next.wealth[currentAccountName];\n      delete next.wealth[currentAccountName];\n    });\n  });\n","import { create } from \"mutative\";\nimport { AccountData } from \"shared/models/store/current\";\nimport { store } from \".\";\n\nexport const updateAccountValue = (accountName: string, data: AccountData, value: number) => {\n  store.setState((prev) => {\n    const next = create(prev, (next) => {\n      const idx = prev.wealth[accountName]?.data.findIndex((x) => x === data);\n      if (idx < 0) {\n        throw new Error(\"failed to find data\");\n      }\n\n      next.wealth[accountName].data[idx].value = value;\n    });\n    return next;\n  });\n};\n","import { create } from \"mutative\";\nimport { AccountData, MeritData, TimeSeriesKeys } from \"shared/models/store/current\";\nimport { store } from \".\";\n\nexport const updateProjectedIncome = (timeSeries: TimeSeriesKeys, data: AccountData, value: number) => {\n  store.setState((prev) => {\n    const next = create(prev, (next) => {\n      const idx = prev.projectedIncome.timeSeries[timeSeries].findIndex((x) => x === data);\n      if (idx < 0) {\n        throw new Error(\"failed to find data\");\n      }\n      next.projectedIncome.timeSeries[timeSeries][idx].value = value;\n    });\n    return next;\n  });\n};\n\nexport const updateProjectedIncomeMerit = (current: MeritData, replacement: MeritData) => {\n  store.setState((prev) => {\n    const next = create(prev, (next) => {\n      const idx = prev.projectedIncome.timeSeries.meritPct.findIndex((x) => x === current);\n      if (idx < 0) {\n        throw new Error(\"failed to find data\");\n      }\n      next.projectedIncome.timeSeries.meritPct[idx] = replacement;\n    });\n    return next;\n  });\n};\n","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, MenuItem, Stack, TextField } from \"@mui/material\";\nimport { create } from \"mutative\";\nimport { ReactNode, forwardRef, useRef, useState } from \"react\";\nimport { store } from \"shared/store\";\n\ntype AssetType = \"account\" | \"mortgage\";\nexport const NewAccount = forwardRef<HTMLButtonElement, { children?: ReactNode }>(function NewAccount(props, ref) {\n  const [open, setOpen] = useState(false);\n  const nameRef = useRef<HTMLInputElement>(null);\n  const [error, setError] = useState(false);\n  const [accountType, setAccountType] = useState<AssetType>();\n\n  return (\n    <>\n      <Button\n        ref={ref}\n        variant=\"outlined\"\n        onClick={() => {\n          setOpen(true);\n          setError(false);\n          setAccountType(undefined);\n        }}\n        sx={{ marginTop: 3 }}\n      >\n        add account\n      </Button>\n\n      <Dialog open={open} onClose={() => setOpen(false)}>\n        <DialogTitle>Add New Account</DialogTitle>\n        <DialogContent>\n          <Stack spacing={2} margin={2}>\n            <TextField\n              select\n              color={error ? \"error\" : \"primary\"}\n              onChange={(value) => {\n                setError(false);\n                setAccountType(value.target.value as AssetType);\n              }}\n              label=\"Type\"\n            >\n              <MenuItem value=\"mortgage\">Mortgage</MenuItem>\n              <MenuItem value=\"account\">Generic Account</MenuItem>\n            </TextField>\n\n            <TextField\n              placeholder=\"Name\"\n              onChange={() => {\n                setError(false);\n              }}\n              error={error}\n              inputRef={nameRef}\n            />\n          </Stack>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            disabled={error}\n            onClick={() => {\n              store.setState((prev) => {\n                return create(prev, (next) => {\n                  if (!nameRef.current?.value || !accountType || prev.wealth[nameRef.current.value]) {\n                    setError(true);\n                    return;\n                  }\n\n                  next.wealth[nameRef.current.value] = {\n                    type: accountType,\n                    data: [],\n                    hidden: false,\n                  };\n\n                  setOpen(false);\n                });\n              });\n            }}\n          >\n            Add\n          </Button>\n        </DialogActions>\n      </Dialog>\n      {props?.children}\n    </>\n  );\n});\n","import { AgGridReact, AgGridReactProps } from \"ag-grid-react\";\n\nimport { themeQuartz } from \"ag-grid-community\";\n\n// to use myTheme in an application, pass it to the theme grid option\nconst myTheme = themeQuartz.withParams({\n  backgroundColor: \"#1f2836\",\n  browserColorScheme: \"dark\",\n  chromeBackgroundColor: {\n    ref: \"foregroundColor\",\n    mix: 0.07,\n    onto: \"backgroundColor\",\n  },\n  foregroundColor: \"#FFF\",\n  headerFontSize: 14,\n});\n\nexport const AgGrid = (props: AgGridReactProps & { id: string }) => {\n  const { id, ...rest } = props;\n  return (\n    <div id={id} style={{ height: \"100%\" }}>\n      <AgGridReact {...rest} theme={myTheme} suppressMovableColumns />\n    </div>\n  );\n};\n","import { DateTime } from \"luxon\";\n\n/**\n * Gets the current local date and time\n * Used as a centralized way to access the current date/time throughout the application\n *\n * @returns {DateTime} The current local date and time\n * @example\n * const now = getLocalDateTime();\n * console.log(now.toISO()); // e.g., \"2025-05-07T10:30:00.000-04:00\"\n */\nexport const getLocalDateTime = () => {\n  return DateTime.local();\n};\n\n/**\n * React hook that returns the current local date and time\n *\n * @returns {DateTime} The current local date and time as a Luxon DateTime object\n */\nexport const useLocalDateTime = () => {\n  const date = getLocalDateTime();\n  return date;\n};\n","export const shortDate = \"yyyy-MM-dd\";\nexport const monthDay = \"MMM dd\";\n","export const formatCashShort = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  notation: \"compact\",\n  maximumFractionDigits: 0,\n  minimumSignificantDigits: 3,\n  maximumSignificantDigits: 3,\n}).format;\n\nexport const formatCash = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  maximumFractionDigits: 0,\n}).format;\n","import { Tooltip } from \"@mui/material\";\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\n\ninterface CashProps {\n  value?: number;\n  fallback?: number;\n  disableTooltip?: boolean;\n  compact?: boolean;\n  tooltip?: string;\n  placement?:\n    | \"top\"\n    | \"right\"\n    | \"bottom\"\n    | \"left\"\n    | \"bottom-end\"\n    | \"bottom-start\"\n    | \"left-end\"\n    | \"left-start\"\n    | \"right-end\"\n    | \"right-start\"\n    | \"top-end\"\n    | \"top-start\"\n    | undefined;\n}\n\nconst format = (value: number | undefined, compact: boolean, fallback: number | undefined) => {\n  if (value === undefined) {\n    return fallback;\n  }\n  return compact ? formatCashShort(value) : formatCash(value);\n};\n\nexport const Cash = ({ value, fallback, disableTooltip, compact = true, tooltip, placement }: CashProps) => {\n  const formatted = format(value, compact, fallback);\n\n  return (\n    <Tooltip\n      placement={placement}\n      disableHoverListener={disableTooltip || !compact || !value}\n      title={[tooltip, formatCash(value!)].join(\" \")}\n    >\n      <span>{formatted}</span>\n    </Tooltip>\n  );\n};\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\nimport { Button } from \"@mui/material\";\nimport { ColDef } from \"ag-grid-community\";\nimport { CustomCellRendererProps } from \"ag-grid-react\";\nimport { DateTime } from \"luxon\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { AccountData } from \"shared/models/store/current\";\nimport { updateAccountDate, updateAccountValue } from \"shared/store\";\nimport { removeAccountEntry } from \"shared/store/remove-account-entry\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const createAccountColumnConfig = (accountName: string): ColDef<AccountData>[] => [\n  {\n    headerName: \"Date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\n    cellEditor: \"agDateCellEditor\",\n    editable: true,\n    valueSetter: (x) => {\n      const date = DateTime.fromJSDate(x.newValue);\n      if (date.isValid) {\n        updateAccountDate(accountName, x.data, date);\n      }\n      return date.isValid;\n    },\n  },\n  {\n    headerName: \"Value\",\n    valueGetter: (x) => x.data?.value,\n    valueSetter: (x) => {\n      updateAccountValue(accountName, x.data, +x.newValue);\n      return true;\n    },\n    cellRenderer: (x: CustomCellRendererProps<AccountData>) => <Cash value={x.value} placement=\"left\" />,\n    editable: true,\n    cellEditor: \"agNumberCellEditor\",\n    type: \"numericColumn\",\n  },\n  {\n    cellStyle: () => ({ display: \"inline-flex\", padding: \"0px\" }),\n    sortable: false,\n    headerName: \"\",\n    width: 80,\n    colId: \"actions\",\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\n      return (\n        <Button\n          onClick={() => {\n            props.data && removeAccountEntry(accountName, props.data);\n          }}\n          color=\"error\"\n          fullWidth\n        >\n          <DeleteForeverIcon />\n        </Button>\n      );\n    },\n  },\n];\n","import { DateTime } from \"luxon\";\nimport { Account, AccountData } from \"shared/models/store/current\";\n\nconst hasJanFistEntry = (x: AccountData, year: number) => {\n  const date = DateTime.fromISO(x.date);\n  const janFirst = DateTime.fromObject({\n    day: 1,\n    month: 1,\n    year: +year,\n  });\n\n  return date.diff(janFirst, [\"days\", \"hours\"]).days == 0;\n};\n\nexport const useMissingYears = (account: Account) => {\n  const accountItemsByYear = Object.groupBy(account.data, (x) => DateTime.fromISO(x.date).year);\n  if (account.data.length === 0) {\n    return [];\n  }\n\n  const years = Object.entries(accountItemsByYear)\n    .filter(([year, entries]) => !!entries?.find((entry) => hasJanFistEntry(entry, +year)))\n    .map(([year]) => +year)\n    .sort();\n\n  const lookup = new Set(years);\n  const missing = [];\n\n  for (let i = years[0]; i <= years[years.length - 1]; i++) {\n    !lookup.has(i) && missing.push(i);\n  }\n\n  return missing;\n};\n","import { Button, Dialog, DialogActions, DialogTitle } from \"@mui/material\";\nimport { ReactElement, useState } from \"react\";\n\ninterface ConfirmDialogProps {\n  onConfirm?: () => void;\n  title: string;\n  children: ReactElement;\n}\nexport const ConfirmDialog = (props: ConfirmDialogProps) => {\n  const { onConfirm, title, children } = props;\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <>\n      <div onClick={() => setIsOpen(true)}>{children}</div>\n      <Dialog open={isOpen} onClose={() => setIsOpen(false)}>\n        <DialogTitle sx={{ minWidth: 300, display: \"flex\", justifyContent: \"center\" }}>{title}</DialogTitle>\n        <DialogActions>\n          <Button sx={{ marginRight: \"auto\" }} onClick={() => setIsOpen(false)}>\n            Cancel\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"error\"\n            onClick={() => {\n              onConfirm?.();\n              setIsOpen(false);\n            }}\n          >\n            Confirm\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n","import Close from \"@mui/icons-material/Close\";\nimport SettingsIcon from \"@mui/icons-material/Settings\";\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Stack, TextField, Typography } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { ConfirmDialog } from \"shared/components/confirm-dialog\";\nimport { hideAccount, removeAccount, updateAccountName } from \"shared/store\";\n\ninterface AccountSettingsProps {\n  accountName: string;\n}\n\nexport const AccountSettings = (props: AccountSettingsProps) => {\n  const { accountName } = props;\n  const [nextAccountName, setNextAccountName] = useState<string>(accountName);\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    <>\n      <IconButton onClick={() => setIsOpen(true)}>\n        <SettingsIcon />\n      </IconButton>\n      <Dialog open={isOpen} onClose={() => setIsOpen(false)}>\n        <DialogTitle>\n          <Stack direction={\"row\"} width=\"100%\" alignItems={\"center\"} justify-content={\"space-between\"}>\n            <Typography variant=\"h6\">{accountName} Settings</Typography>\n            <IconButton onClick={() => setIsOpen(false)}>\n              <Close />\n            </IconButton>\n          </Stack>\n        </DialogTitle>\n        <DialogContent>\n          <Stack spacing={1} marginTop={1}>\n            <TextField\n              label=\"Account Name\"\n              value={nextAccountName}\n              onChange={(event) => setNextAccountName(event.target.value)}\n              placeholder=\"\"\n            />\n          </Stack>\n        </DialogContent>\n        <DialogActions>\n          <ConfirmDialog\n            onConfirm={() => {\n              removeAccount(accountName);\n              setIsOpen(false);\n            }}\n            title={`Confirm Deleting ${accountName} Account`}\n          >\n            <Button color=\"error\">Delete Account</Button>\n          </ConfirmDialog>\n          <ConfirmDialog\n            onConfirm={() => {\n              hideAccount(accountName);\n              setIsOpen(false);\n            }}\n            title={`Confirm Hiding ${accountName} Account`}\n          >\n            <Button sx={{ marginRight: 10 }} color=\"error\">\n              Hide Account\n            </Button>\n          </ConfirmDialog>\n          <Button\n            disabled={!nextAccountName}\n            onClick={() => {\n              setIsOpen(false);\n            }}\n          >\n            Cancel\n          </Button>\n          <Button\n            disabled={!nextAccountName}\n            onClick={() => {\n              accountName != nextAccountName && updateAccountName(accountName, nextAccountName);\n              setIsOpen(false);\n            }}\n          >\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n","import { Alert, Box, Button, InputAdornment, Paper, Stack, TextField, Typography } from \"@mui/material\";\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useState } from \"react\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { Account } from \"shared/models/store/current\";\nimport { addAccountEntry, store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { createAccountColumnConfig } from \"./column-config\";\nimport { useMissingYears } from \"./hooks/useMissingYears\";\nimport { AccountSettings } from \"./settings\";\n\nexport const AccountTab = (props: { accountName: string }) => {\n  const { accountName } = props;\n  const account = useStore(store, (state) => state.wealth[accountName]) as Account;\n  const [date, setDate] = useState(getLocalDateTime());\n  const [amount, setAmount] = useState<number | null>(null);\n  const missingYears = useMissingYears(account);\n  const hasSameDate = !!account?.data?.find((x) => date.hasSame(DateTime.fromISO(x.date), \"day\"));\n  const accountColumnConfig = createAccountColumnConfig(accountName);\n\n  const onAddEntry = () => {\n    if (amount != null) {\n      addAccountEntry(accountName, date, amount);\n      setAmount(null);\n    }\n  };\n\n  return (\n    <Stack height=\"100%\" spacing={2}>\n      <Stack direction={\"row\"}>\n        <Typography variant=\"h5\">{accountName}</Typography>\n        <Box sx={{ marginLeft: \"auto\" }}>\n          <AccountSettings key={accountName} accountName={accountName} />\n        </Box>\n      </Stack>\n      {missingYears.length > 0 && (\n        <Paper elevation={3}>\n          <Alert severity=\"warning\">Ensure an entry for Jan 1st for {missingYears.join(\", \")}</Alert>\n        </Paper>\n      )}\n\n      <DatePicker\n        format={shortDate}\n        sx={{ color: \"white\" }}\n        label=\"Date\"\n        defaultValue={date}\n        onChange={(value) => value && setDate(value)}\n        disableFuture\n      />\n      <TextField\n        label=\"amount\"\n        value={amount ?? \"\"}\n        type=\"number\"\n        onChange={(event) => (event.target.value === \"\" ? setAmount(null) : setAmount(+event.target.value))}\n        slotProps={{\n          input: {\n            startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n          },\n        }}\n        placeholder=\"0\"\n      />\n      <Button disabled={amount === null || !date || hasSameDate} onClick={onAddEntry}>\n        Add Entry\n      </Button>\n\n      <AgGrid\n        rowData={account.data}\n        columnDefs={accountColumnConfig}\n        id={account + \"-history\"}\n        autoSizeStrategy={{ type: \"fitGridWidth\" }}\n        onRowDataUpdated={(x) => x.api.sizeColumnsToFit()}\n        stopEditingWhenCellsLoseFocus\n      />\n    </Stack>\n  );\n};\n","import { DateTime } from \"luxon\";\n\n/**\n * Finds the nearest account data entry on or before a given date\n *\n * @template T\n * @param {DateTime} searchDate - The date to search for\n * @param {T[]} data - Array of data entries to search through\n * @param {(x: T) => string} [dateSelector] - Optional function to extract date from entry\n * @returns {T | undefined} The nearest entry on or before the search date, or undefined if none found\n */\nexport const findNearestOnOrBefore = <T>(searchDate: DateTime, data: T[], dateSelector: (x: T) => string): T | undefined => {\n  const idx = findNearestIdxOnOrBefore(searchDate, data, (x) => DateTime.fromISO(dateSelector(x)));\n  return data[idx];\n};\n\n/**\n * Finds the index of the item in an array that has the nearest date on or before a target date\n *\n * @template T - Type of array elements\n * @param {DateTime} target - Target date to find nearest match for\n * @param {T[]} items - Array of items to search through\n * @param {(x: T) => DateTime} selector - Function that extracts a DateTime from an item\n * @returns {number} Index of the nearest item on or before the target date, or -1 if no match\n * @example\n * const items = [{ date: DateTime.fromISO('2025-01-01') }, { date: DateTime.fromISO('2025-06-01') }];\n * findNearestIdxOnOrBefore(DateTime.fromISO('2025-03-15'), items, x => x.date); // returns 0\n */\nexport const findNearestIdxOnOrBefore = <T>(target: DateTime, items: T[], selector: (x: T) => DateTime) => {\n  target = target.startOf(\"day\");\n  return items.findLastIndex((x) => selector(x).startOf(\"day\") <= target);\n};\n","import { DateTime } from \"luxon\";\nimport { Loan } from \"shared/models/store/current\";\n\nexport const calcLoanBalance = (date: DateTime, loan: Loan) => {\n  const { firstPaymentDate, paymentsPerYear, principal: principal, ratePct: rate, payment: monthlyPayment } = loan;\n  const annualizedRate = rate / paymentsPerYear;\n  const periods = date.diff(DateTime.fromISO(firstPaymentDate), \"months\").months;\n  const totalRate = (1 + annualizedRate) ** periods;\n  const balance = principal * totalRate - (monthlyPayment / annualizedRate) * (totalRate - 1);\n\n  return balance;\n};\n\nexport const calcEquity = (ownershipPct: number, houseValue: number | undefined, loanBalance: number, principal: number) => {\n  return houseValue ? houseValue * ownershipPct - loanBalance : principal - loanBalance;\n};\n","import { DateTime } from \"luxon\";\nimport { Account, Mortgage } from \"shared/models/store/current\";\n\n/**\n * Gets a sorted array of unique dates from account data entries\n * Used for generating timeline data for graphs and charts\n *\n * @param {(Account | Mortgage)[]} accounts - Array of account or mortgage objects to extract dates from\n * @returns {DateTime<true>[]} Array of valid DateTime objects sorted chronologically\n */\nexport const useGraphDates = (accounts: (Account | Mortgage)[]) => {\n  return [\n    ...new Set(\n      accounts.flatMap((x) => {\n        return x.data.map((x) => DateTime.fromISO(x.date).startOf(\"day\").toISO());\n      })\n    ),\n  ]\n    .map((x) => DateTime.fromISO(x!))\n    .sort((a, b) => a.toMillis() - b.toMillis()) as DateTime<true>[];\n};\n","import { Button, InputAdornment, TextField } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useState } from \"react\";\nimport { addAccountEntry, store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\n\nexport const AddEntry = (props: { accountName: string }) => {\n  const { accountName } = props;\n  const [date, setDate] = useState<DateTime>(getLocalDateTime());\n  const [amount, setAmount] = useState<number | null>(null);\n  const account = useStore(store, (state) => state.wealth[accountName]);\n  const hasSameDate = !!account?.data?.find((x) => date?.hasSame(DateTime.fromISO(x.date), \"day\"));\n\n  const onAddEntry = () => {\n    if (date != undefined && amount != null) {\n      addAccountEntry(accountName, date, amount);\n      setAmount(null);\n    }\n  };\n\n  return (\n    <Stack spacing={2}>\n      <DatePicker\n        value={date}\n        onChange={(date: DateTime | null) => {\n          date && setDate(date);\n        }}\n        disableFuture\n      />\n      <TextField\n        label=\"amount\"\n        value={amount ?? \"\"}\n        type=\"number\"\n        onChange={(event) => (event.target.value === \"\" ? setAmount(null) : setAmount(+event.target.value))}\n        slotProps={{\n          input: {\n            startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n          },\n        }}\n        placeholder=\"0\"\n      />\n      <Button disabled={amount === null || !date || hasSameDate} onClick={onAddEntry}>\n        Add Home Value\n      </Button>\n    </Stack>\n  );\n};\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\nimport { Button } from \"@mui/material\";\nimport { ColDef } from \"ag-grid-community\";\nimport { CustomCellRendererProps } from \"ag-grid-react\";\nimport { DateTime } from \"luxon\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { AccountData } from \"shared/models/store/current\";\nimport { removeAccountEntry, updateAccountDate, updateAccountValue } from \"shared/store\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const createAccountColumnConfig = (accountName: string): ColDef<AccountData>[] => [\n  {\n    cellEditor: \"agDateCellEditor\",\n    editable: true,\n    headerName: \"Date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\n    valueSetter: (x) => {\n      const date = DateTime.fromJSDate(x.newValue);\n      if (date.isValid) {\n        updateAccountDate(accountName, x.data, date);\n      }\n      return date.isValid;\n    },\n  },\n  {\n    editable: true,\n    cellEditor: \"agNumberCellEditor\",\n    headerName: \"Home Value\",\n    cellRenderer: (x: CustomCellRendererProps<AccountData>) => <Cash value={x.value} placement=\"left\" />,\n    valueGetter: (x) => x.data?.value,\n    type: \"numericColumn\",\n    valueSetter: (x) => {\n      updateAccountValue(accountName, x.data, +x.newValue);\n      return true;\n    },\n  },\n  {\n    cellStyle: () => ({ display: \"inline-flex\", padding: \"0px\" }),\n    headerName: \"\",\n    width: 80,\n    sortable: false,\n    colId: \"actions\",\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\n      return (\n        <Button\n          onClick={() => {\n            props.data && removeAccountEntry(accountName, props.data);\n          }}\n          color=\"error\"\n          fullWidth\n        >\n          <DeleteForeverIcon />\n        </Button>\n      );\n    },\n  },\n];\n\ntype House = {\n  date: DateTime;\n  balance: number;\n  equity: number;\n};\n\nexport const mortgageColumnConfig: ColDef<House>[] = [\n  {\n    headerName: \"Date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data?.date,\n  },\n  {\n    headerName: \"Loan Balance\",\n    valueGetter: (x) => x.data?.balance.toFixed(2),\n    cellRenderer: (x: CustomCellRendererProps<House>) => <Cash value={x.value} placement=\"left\" />,\n    type: \"numericColumn\",\n  },\n  {\n    headerName: \"Equity\",\n    valueGetter: (x) => x.data?.equity.toFixed(2),\n    cellRenderer: (x: CustomCellRendererProps<House>) => <Cash value={x.value} placement=\"left\" />,\n    type: \"numericColumn\",\n  },\n];\n","import Close from \"@mui/icons-material/Close\";\nimport SettingsIcon from \"@mui/icons-material/Settings\";\nimport { Box, Button, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Stack, TextField, Typography } from \"@mui/material\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useRef, useState } from \"react\";\nimport { ConfirmDialog } from \"shared/components/confirm-dialog\";\nimport { Loan } from \"shared/models/store/version-1\";\nimport { hideAccount, removeAccount, setLoan, store, updateAccountName } from \"shared/store\";\nimport { ZodIssue, z } from \"zod\";\n\n//todo: use tantstack form\n\nconst convertPct = (value: number) => {\n  return value > 1 ? value / 100 : value;\n};\n\nconst validator: z.ZodType<Loan> = z.object({\n  principal: z.number().min(0),\n  ratePct: z.number().min(0),\n  paymentsPerYear: z.number().min(0),\n  payment: z.number().min(0),\n  firstPaymentDate: z.string().datetime({ offset: true }),\n  ownershipPct: z.number().min(0),\n});\n\ninterface AccountSettingsProps {\n  accountName: string;\n}\n\nexport const AccountSettings = (props: AccountSettingsProps) => {\n  const { accountName } = props;\n  const [nextAccountName, setNextAccountName] = useState<string>(accountName);\n  const loan = useStore(store, (x) => {\n    const account = x.wealth[accountName];\n    if (\"loan\" in account) {\n      return account.loan;\n    }\n  });\n\n  const ref = useRef<Partial<Loan>>(loan ?? {});\n  const [error, setError] = useState<Partial<Record<keyof Loan, ZodIssue>>>({});\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleClose = () => {\n    setError({});\n    ref.current = loan ?? {};\n    setIsOpen(false);\n  };\n\n  return (\n    <>\n      <IconButton onClick={() => setIsOpen(true)}>\n        <SettingsIcon />\n      </IconButton>\n      <Dialog open={isOpen} onClose={handleClose}>\n        <DialogTitle sx={{ width: \"100%\" }}>\n          <Box display={\"flex\"} width=\"100%\" alignItems={\"center\"} sx={{ justifyContent: \"space-between\" }}>\n            <Typography variant=\"h6\">{accountName} Settings</Typography>\n            <IconButton sx={{ marginLeft: \"auto\" }} onClick={handleClose}>\n              <Close />\n            </IconButton>\n          </Box>\n        </DialogTitle>\n        <DialogContent>\n          <Stack spacing={2} marginTop={1}>\n            <TextField\n              label=\"Account Name\"\n              value={nextAccountName}\n              onChange={(event) => setNextAccountName(event.target.value)}\n              placeholder=\"\"\n            />\n            <DatePicker\n              defaultValue={ref.current?.firstPaymentDate ? DateTime.fromISO(ref.current.firstPaymentDate) : null}\n              label=\"First Payment\"\n              slotProps={{\n                textField: {\n                  error: !!error.firstPaymentDate,\n                },\n              }}\n              onChange={(value: DateTime | null) => {\n                if (value) {\n                  ref.current.firstPaymentDate = value.startOf(\"day\").toISO()!;\n                }\n              }}\n            />\n            <TextField\n              error={!!error.principal}\n              defaultValue={loan?.principal}\n              onChange={(event) => {\n                ref.current.principal = +event.target.value;\n              }}\n              variant=\"outlined\"\n              label=\"Principal\"\n              type=\"number\"\n            />\n            <TextField\n              error={!!error.ratePct}\n              defaultValue={(loan?.ratePct ?? 0) * 100}\n              onChange={(event) => {\n                ref.current.ratePct = convertPct(+event.target.value);\n              }}\n              variant=\"outlined\"\n              label=\"Rate (%)\"\n              type=\"number\"\n            />\n            <TextField\n              error={!!error.paymentsPerYear}\n              defaultValue={loan?.paymentsPerYear}\n              onChange={(event) => {\n                ref.current.paymentsPerYear = +event.target.value;\n              }}\n              variant=\"outlined\"\n              label=\"Payments Per Year\"\n              type=\"number\"\n            />\n            <TextField\n              defaultValue={loan?.payment}\n              error={!!error.payment}\n              onChange={(event) => {\n                ref.current.payment = +event.target.value;\n              }}\n              variant=\"outlined\"\n              label=\"Payment\"\n              type=\"number\"\n            />\n            <TextField\n              defaultValue={loan?.ownershipPct}\n              error={!!error.ownershipPct}\n              onChange={(event) => {\n                ref.current.ownershipPct = convertPct(+event.target.value);\n              }}\n              variant=\"outlined\"\n              label=\"Ownership (%)\"\n              type=\"number\"\n            />\n          </Stack>\n        </DialogContent>\n        <DialogActions>\n          <ConfirmDialog\n            onConfirm={() => {\n              removeAccount(accountName);\n              setIsOpen(false);\n            }}\n            title={`Confirm Deleting ${accountName} Mortgage`}\n          >\n            <Button color=\"error\">Delete Account</Button>\n          </ConfirmDialog>\n          <ConfirmDialog\n            onConfirm={() => {\n              hideAccount(accountName);\n              setIsOpen(false);\n            }}\n            title={`Confirm Hiding ${accountName} Account`}\n          >\n            <Button sx={{ marginRight: 10 }} color=\"error\">\n              Hide Account\n            </Button>\n          </ConfirmDialog>\n          <Button disabled={!nextAccountName} onClick={handleClose}>\n            Cancel\n          </Button>\n          <Button\n            disabled={!nextAccountName}\n            onClick={() => {\n              const parsed = validator.safeParse(ref.current);\n              if (parsed.success) {\n                accountName != nextAccountName && updateAccountName(accountName, nextAccountName);\n                setLoan(accountName, parsed.data);\n                handleClose();\n              } else {\n                const issues = Object.groupBy(parsed.error.issues, (x) => x.path.join(\"\"));\n                setError(issues);\n              }\n            }}\n          >\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n","import { Typography } from \"@mui/material\";\nimport { Box, Stack } from \"@mui/system\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { Mortgage } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\nimport { findNearestOnOrBefore } from \"shared/utility/find-nearest-on-or-before\";\nimport { calcEquity, calcLoanBalance } from \"shared/utility/mortgage-calc\";\nimport { useGraphDates } from \"shared/utility/use-graph-dates\";\nimport { AddEntry } from \"./add-entry\";\nimport { createAccountColumnConfig, mortgageColumnConfig } from \"./column-config\";\nimport { AccountSettings } from \"./settings\";\n\nfunction createLoanValueGetter(account: Mortgage) {\n  return (date: DateTime) => {\n    const loanBalance = calcLoanBalance(date, account.loan!);\n    return {\n      date,\n      balance: loanBalance,\n      equity: calcEquity(\n        account.loan!.ownershipPct,\n        findNearestOnOrBefore(date, account.data, (x) => x.date)?.value,\n        loanBalance,\n        account.loan!.principal\n      ),\n    };\n  };\n}\n\nexport const MortgageTab = (props: { accountName: string }) => {\n  const { accountName } = props;\n  const account = useStore(store, (state) => state.wealth[accountName]) as Mortgage;\n  const allAccounts = useStore(store, (x) => x.wealth);\n  const accountColumnConfig = createAccountColumnConfig(accountName);\n  const accounts = Object.values(allAccounts);\n  const dates = useGraphDates(accounts);\n  const mortgageData = account.loan ? dates.map(createLoanValueGetter(account)) : [];\n\n  return (\n    <Stack height=\"100%\" spacing={2}>\n      <Stack direction={\"row\"}>\n        <Typography variant=\"h5\">{accountName}</Typography>\n        <Box sx={{ marginLeft: \"auto\" }}>\n          <AccountSettings key={accountName} accountName={accountName} />\n        </Box>\n      </Stack>\n      <AddEntry accountName={accountName} />\n      <AgGrid\n        rowData={account?.data ?? []}\n        columnDefs={accountColumnConfig}\n        id={account + \"-history\"}\n        autoSizeStrategy={{ type: \"fitGridWidth\" }}\n      />\n\n      <AgGrid\n        rowData={mortgageData}\n        columnDefs={mortgageColumnConfig}\n        id={account + \"-history\"}\n        autoSizeStrategy={{ type: \"fitGridWidth\" }}\n      />\n    </Stack>\n  );\n};\n","import { Box, Tab, Tabs } from \"@mui/material\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { useEffect, useState } from \"react\";\nimport { store } from \"shared/store\";\nimport { NewAccount } from \"./new-account\";\nimport { AccountTab } from \"./tab-types/account/account\";\nimport { MortgageTab } from \"./tab-types/mortgage\";\n\nexport const AccountTabs = () => {\n  const accounts = useStore(store, (x) => x.wealth);\n  const firstAccount = Object.keys(accounts)?.[0] ?? 0;\n  const [account, setAccount] = useState<string | 0>(firstAccount);\n\n  useEffect(() => {\n    if (!accounts[account]) {\n      setAccount(0);\n    }\n  }, [account, accounts]);\n\n  return (\n    <Box display=\"flex\" width=\"100%\" height=\"100%\" gap={2}>\n      <Box display={\"flex\"} flexDirection={\"column\"} flex={\"0 1 auto\"}>\n        <Tabs\n          orientation=\"vertical\"\n          value={account}\n          onChange={(_, value) => {\n            setAccount(value as string);\n          }}\n        >\n          {Object.entries(accounts)\n            .filter(([, data]) => !data.hidden)\n            .map(([account]) => {\n              return <Tab key={account} value={account} label={account} />;\n            })}\n          <Tab component={NewAccount} />\n        </Tabs>\n      </Box>\n      <Box flex={\"1 1 auto\"} overflow={\"auto\"}>\n        {typeof account === \"string\" && (\n          <>\n            {accounts[account]?.type === \"account\" && <AccountTab accountName={account} />}\n            {accounts[account]?.type === \"mortgage\" && <MortgageTab accountName={account} />}\n          </>\n        )}\n      </Box>\n    </Box>\n  );\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\n\nexport const useEarliestAccountEntry = () => {\n  const accounts = useStore(store, (x) => x.wealth);\n  return DateTime.fromMillis(\n    Object.values(accounts)\n      .map((x) => {\n        if (x.type === \"account\") {\n          return x.data[0]?.date ? DateTime.fromISO(x.data[0].date) : getLocalDateTime();\n        }\n        return getLocalDateTime();\n      })\n      .reduce((acc, curr) => Math.min(acc, curr?.toMillis() ?? Infinity), getLocalDateTime().toMillis())\n  );\n};\n","import { DateTime } from \"luxon\";\nimport { Account, Mortgage } from \"shared/models/store/current\";\nimport { findNearestOnOrBefore } from \"./find-nearest-on-or-before\";\nimport { calcEquity, calcLoanBalance } from \"./mortgage-calc\";\n\nconst getMortgageValue = (date: DateTime, mortgage: Mortgage) => {\n  if (!mortgage.loan) {\n    return 0;\n  }\n  const entry = findNearestOnOrBefore(date, mortgage.data, (x) => x.date);\n  if (!entry || (entry?.date && mortgage.data[0] === entry && DateTime.fromISO(entry.date).startOf(\"day\") > date)) {\n    return 0;\n  }\n  const { ownershipPct, principal } = mortgage.loan;\n  const balance = calcLoanBalance(date, mortgage.loan);\n  return calcEquity(ownershipPct, entry?.value, balance, principal);\n};\n\nconst getAccountValue = (date: DateTime, account: Account) => {\n  const entry = findNearestOnOrBefore(date, account.data, (x) => x.date);\n  if (!entry || (entry?.date && account.data[0] === entry && DateTime.fromISO(entry.date).startOf(\"day\") > date)) {\n    return 0;\n  }\n  return entry?.value;\n};\n\nexport const getGraphValue = (date: DateTime, account: Account | Mortgage) => {\n  switch (account.type) {\n    case \"account\":\n      return getAccountValue(date, account);\n    case \"mortgage\":\n      return getMortgageValue(date, account);\n  }\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { store } from \"shared/store\";\nimport { getGraphValue } from \"shared/utility/get-graph-value\";\nimport { useGraphDates } from \"shared/utility/use-graph-dates\";\n\nexport type GraphData = {\n  total: number;\n  date: Date;\n} & Record<string, number | null>;\n\nexport const useGraphData = (visibleIds: string[]) => {\n  const wealth = useStore(store, (x) => x.wealth);\n  const dates = useGraphDates(Object.values(wealth));\n  const accounts = Object.entries(wealth);\n\n  const graphData = dates.map((date) => {\n    return accounts\n      .filter((x) => !visibleIds.includes(x[0]))\n      .reduce(\n        (acc, [accountName, account]) => {\n          const value = getGraphValue(date, account);\n\n          if (value) {\n            acc[accountName] = value;\n            acc.total = acc.total + value;\n          } else {\n            acc[accountName] = null;\n          }\n\n          acc.date = date.toJSDate();\n          return acc;\n        },\n        { total: 0 } as GraphData\n      );\n  });\n\n  graphData.forEach((graphEntry, index, arr) => {\n    if (index < arr.length - 1) {\n      Object.keys(graphEntry).forEach((key) => {\n        if (graphEntry[key] === null && arr[index + 1][key] !== null) {\n          graphEntry[key] = 0;\n        }\n      });\n    }\n  });\n\n  const firstNonZero = graphData.findIndex((x) => (x[\"total\"] as number) > 0);\n  return graphData.slice(firstNonZero);\n};\n","import { Box } from \"@mui/system\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { AgAreaSeriesOptions, AgCartesianChartOptions, AgChartInstance, AgLineSeriesOptions, time } from \"ag-charts-community\";\nimport { AgCharts } from \"ag-charts-react\";\nimport { DateTime } from \"luxon\";\nimport { useRef, useState } from \"react\";\nimport { useEarliestAccountEntry } from \"shared/hooks/use-earliest-account-entry\";\nimport { store } from \"shared/store\";\nimport { useLocalDateTime } from \"shared/utility/current-date\";\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { useGraphData } from \"./use-graph-data\";\n\nexport const WealthChart = () => {\n  const wealth = useStore(store, (x) => x.wealth);\n  const [hidden, setHidden] = useState<string[]>([]);\n  const data = useGraphData(hidden);\n  const initialFromDate = useEarliestAccountEntry().startOf(\"year\");\n  const localTime = useLocalDateTime();\n  const intialToDate = localTime.endOf(\"year\");\n  const [fromDate, setFromDate] = useState<DateTime>(localTime.plus({ year: -1 }));\n  const [toDate, setToDate] = useState<DateTime>(intialToDate);\n  const ref = useRef<AgChartInstance>(null);\n\n  const filteredData = data.filter((x) => {\n    const year = x.date?.getFullYear();\n    return year && year >= fromDate.year && year <= toDate.year;\n  });\n\n  const series = [\n    ...Object.entries(wealth).map(([x, data]) => {\n      return {\n        stacked: true,\n        type: \"area\",\n        xKey: \"date\",\n        yKey: x,\n        yName: `${x}${data.hidden ? \" (hidden)\" : \"\"}`,\n        tooltip: {\n          renderer: ({ datum, yKey, xKey }) => ({\n            heading: DateTime.fromJSDate(datum[xKey]).toFormat(shortDate),\n            data: [{ label: yKey, value: formatCashShort(datum[yKey]) }],\n          }),\n        },\n      } as AgAreaSeriesOptions;\n    }),\n    {\n      type: \"line\",\n      xKey: \"date\",\n      yKey: \"total\",\n      yName: \"Total\",\n      tooltip: {\n        renderer: ({ datum, yKey, xKey }) => ({\n          heading: DateTime.fromJSDate(datum[xKey]).toFormat(shortDate),\n          data: [{ label: yKey, value: formatCashShort(datum[yKey]) }],\n        }),\n      },\n    } as AgLineSeriesOptions,\n  ];\n\n  const options: AgCartesianChartOptions = {\n    theme: \"ag-default-dark\",\n    title: {\n      text: `Total Wealth ${formatCash((data[data.length - 1]?.total ?? 0) as number)}`,\n    },\n\n    data: filteredData,\n    axes: [\n      {\n        type: \"time\",\n        position: \"bottom\",\n        label: {\n          format: \"%Y\",\n        },\n        nice: false,\n        interval: {\n          step: time.year.every(1, { snapTo: \"start\" }),\n        },\n      },\n      {\n        type: \"number\",\n        position: \"left\",\n      },\n    ],\n    series,\n    legend: {\n      listeners: {\n        legendItemClick: () => {\n          setTimeout(() => {\n            setHidden(\n              ref.current\n                ?.getState()\n                .legend?.filter((x) => !x.visible)\n                .map((x) => x.itemId as string) ?? []\n            );\n          }, 1);\n        },\n      },\n    },\n  };\n\n  return (\n    <Box position={\"relative\"} height=\"100%\" width=\"100%\">\n      <AgCharts ref={ref} options={options} css={{ height: \"100%\", width: \"100%\" }} />\n      <Box\n        position={\"absolute\"}\n        top={16}\n        right={16}\n        zIndex={100}\n        width={250}\n        padding={1.5}\n        borderRadius={4}\n        bgcolor={\"rgba(0,0,0,.5)\"}\n        display={\"flex\"}\n        gap={2}\n        sx={{\n          transition: \"opacity 150ms\",\n          \"&:hover\": {\n            opacity: \"100%\",\n          },\n          opacity: \"35%\",\n        }}\n      >\n        <DatePicker\n          sx={{ backgroundColor: \"#121212\" }}\n          views={[\"year\"]}\n          label=\"From\"\n          minDate={initialFromDate}\n          maxDate={intialToDate}\n          value={fromDate}\n          onChange={(value) => {\n            value && setFromDate(value);\n          }}\n        />\n        <DatePicker\n          label=\"To\"\n          sx={{ backgroundColor: \"#121212\" }}\n          views={[\"year\"]}\n          value={toDate}\n          minDate={initialFromDate}\n          maxDate={intialToDate}\n          onChange={(value) => {\n            value && setToDate(value);\n          }}\n        />\n      </Box>\n    </Box>\n  );\n};\n","import { Box } from \"@mui/material\";\nimport { AccountTabs } from \"./account-tabs\";\nimport { WealthChart } from \"./wealth-chart\";\n\nexport const NetWealth = () => {\n  return (\n    <Box display={\"flex\"} height=\"100%\" width={\"100%\"} overflow={\"hidden\"} gap={2}>\n      <Box flex=\"0 1 auto\">\n        <Box\n          width={650}\n          height={\"100%\"}\n          sx={{\n            padding: 2,\n            border: \"1px solid rgba(255,255,255,0.1)\",\n            borderRadius: 2,\n            minWidth: 480,\n            backgroundColor: \"#121212\",\n            boxShadow: \"2px 3px 9px 1px #12121252\",\n          }}\n        >\n          <AccountTabs />\n        </Box>\n      </Box>\n      <Box flex=\"1 1 auto\" overflow={\"hidden\"} width=\"100%\" height={\"100%\"}>\n        <WealthChart />\n      </Box>\n    </Box>\n  );\n};\n","import { Box, Divider, Stack, Typography } from \"@mui/material\";\nimport { ReactNode } from \"react\";\n\nexport const Card = (props: { title: ReactNode; children?: ReactNode }) => {\n  const { title, children } = props;\n\n  return (\n    <Box\n      sx={{\n        border: \"1px solid rgba(255,255,255,0.1)\",\n        borderRadius: 2,\n        minWidth: 0,\n        backgroundColor: \"#121212\",\n        boxShadow: \"2px 3px 9px 1px #12121252\",\n\n        minHeight: \"max-content\",\n      }}\n    >\n      <Typography sx={{ paddingBottom: 1, paddingLeft: 2, paddingTop: 1, display: \"flex\" }} variant=\"h5\">\n        {title}\n      </Typography>\n\n      {children && (\n        <>\n          <Divider />\n          <Stack padding={1} direction={\"row\"} spacing={0.5} width={\"100%\"} minHeight={80} justifyContent={\"space-between\"}>\n            {children}\n          </Stack>\n        </>\n      )}\n    </Box>\n  );\n};\n","import { Box } from \"@mui/system\";\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\nimport { Cash } from \"./cash\";\n\ninterface CashProps {\n  min?: number;\n  max?: number;\n  fallback?: number;\n  disableTooltip?: boolean;\n  compact?: boolean;\n  tooltip?: string;\n\n  placement?:\n    | \"top\"\n    | \"right\"\n    | \"bottom\"\n    | \"left\"\n    | \"bottom-end\"\n    | \"bottom-start\"\n    | \"left-end\"\n    | \"left-start\"\n    | \"right-end\"\n    | \"right-start\"\n    | \"top-end\"\n    | \"top-start\"\n    | undefined;\n}\nexport const CashRange = ({ min, max, fallback, disableTooltip, compact = true }: CashProps) => {\n  const minFormatted = compact ? formatCashShort(min ?? 0) : formatCash(min ?? 0);\n  const maxFormatted = compact ? formatCashShort(max ?? 0) : formatCash(max ?? 0);\n  const showRange = minFormatted !== maxFormatted;\n\n  return (\n    <Box>\n      {!showRange && (\n        <Cash\n          fallback={fallback}\n          value={max}\n          tooltip={min != max ? `${formatCash(min ?? 0)} - ` : undefined}\n          disableTooltip={disableTooltip}\n          compact={compact}\n        />\n      )}\n      {showRange && (\n        <>\n          <Cash value={min} fallback={fallback} disableTooltip={disableTooltip} compact={compact} />\n          <span> - </span>\n          <Cash value={max} fallback={fallback} disableTooltip={disableTooltip} compact={compact} />\n        </>\n      )}\n    </Box>\n  );\n};\n","export const formatPercent = new Intl.NumberFormat(\"en-us\", {\n  style: \"percent\",\n  maximumFractionDigits: 1,\n}).format;\n\nexport const formatPercentKatex = (value: number) =>\n  new Intl.NumberFormat(\"en-us\", {\n    style: \"percent\",\n    maximumFractionDigits: 1,\n  })\n    .format(value)\n    .replace(\"%\", \"\\\\%\");\n","/**\n * Returns a color string representing the probability level\n *\n * @param {number} [probability] - A probability value between 0 and 1\n * @returns {string} A CSS color based on the probability thresholds:\n *   - >= 0.5: 'green'\n *   - >= 0.25: 'orange'\n *   - < 0.25: 'rgb(244, 67, 54)'\n *   - undefined or zero: 'inherit'\n *\n * @example\n * getProbablityColor(0.6); // 'green'\n */\nexport const getProbablityColor = (probability?: number) => {\n  if (!probability) {\n    return \"inherit\";\n  }\n  if (probability >= 0.5) {\n    return \"green\";\n  }\n  if (probability >= 0.25) {\n    return \"orange\";\n  }\n  return \"rgb(244, 67, 54)\";\n};\n","import { Box } from \"@mui/system\";\nimport { ReactNode } from \"react\";\nimport { formatPercent } from \"shared/utility/format-percent\";\nimport { getProbablityColor } from \"shared/utility/get-probablity-color\";\n\ninterface PercentProps {\n  value?: number;\n  probability?: number;\n  fallback?: ReactNode;\n}\n\nexport const Percent = ({ value, probability, fallback }: PercentProps) => {\n  return <Box color={getProbablityColor(probability)}>{value != undefined ? formatPercent(value) : fallback}</Box>;\n};\n","import { Box } from \"@mui/system\";\nimport { Percent } from \"./percent\";\n\ninterface PercentProps {\n  min?: number;\n  max?: number;\n  fallback?: number;\n}\n\nexport const PercentRange = ({ min, max, fallback }: PercentProps) => {\n  return (\n    <Box>\n      {(max ?? 0) / (min ?? 1) <= 1.005 && <Percent fallback={fallback} value={max} />}\n      {(max ?? 0) / (min ?? 1) > 1.005 && (\n        <>\n          <Percent value={min} fallback={fallback} />\n          <span> - </span>\n          <Percent value={max} fallback={fallback} />\n        </>\n      )}\n    </Box>\n  );\n};\n","import { Box } from \"@mui/material\";\nimport { ReactNode } from \"react\";\n\ninterface CellProps {\n  children?: ReactNode;\n  secondaryValue?: ReactNode;\n  tertiaryValue?: ReactNode;\n  title: ReactNode;\n  className?: string;\n}\n\nexport const Value = (props: CellProps) => {\n  const { children, secondaryValue, tertiaryValue, title, className } = props;\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        minWidth: 145,\n        height: 64,\n        padding: \"0px 8px\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"flex-start\",\n        gap: 0.5,\n        flexShrink: 0,\n      }}\n      className={className}\n    >\n      <Box display={\"flex\"} alignItems={\"center\"} gap={0.5}>\n        <Box fontSize={18} fontWeight={700} lineHeight={\"20px\"}>\n          {children ? children : \"?\"}\n        </Box>\n        {!!(secondaryValue ?? tertiaryValue) && (\n          <Box alignSelf={\"flex-end\"} fontSize={12} fontWeight={500} lineHeight={\"16px\"} textTransform={\"uppercase\"} color={\"#888\"}>\n            {secondaryValue ?? tertiaryValue}\n          </Box>\n        )}\n      </Box>\n      <Box fontSize={12} fontWeight={500} lineHeight={\"16px\"} textTransform={\"uppercase\"}>\n        {title}\n      </Box>\n    </Box>\n  );\n};\n","import { Box } from \"@mui/material\";\nimport { DateTime } from \"luxon\";\nimport { CashRange } from \"shared/components/formatters/cash-range\";\nimport { Percent } from \"shared/components/formatters/percent\";\nimport { PercentRange } from \"shared/components/formatters/percent-range\";\nimport { Value } from \"shared/components/formatters/value\";\nimport { Cluster } from \"shared/hooks/use-clusters\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\n\ninterface ClusterValueProps extends Cluster {\n  compact?: boolean;\n  className?: string;\n}\n\nexport const ClusterValue = (props: ClusterValueProps) => {\n  const { min, max, probability, title, compact, className } = props;\n  return (\n    <Value\n      className={className}\n      title={\n        <Box display={\"flex\"} gap={1}>\n          <span>{title}</span>\n          {probability < 1 && probability >= 0 && <Percent probability={probability} value={probability} />}\n        </Box>\n      }\n    >\n      {min < 1 && min > 0 && <PercentRange min={min} max={max} />}\n      {min > 1 && <CashRange compact={compact} min={min} max={max} />}\n      {min === 0 && 0}\n    </Value>\n  );\n};\n\nexport const ClusterValues = (props: { clusters?: Cluster[]; eventDate?: DateTime; compact?: boolean }) => {\n  const { clusters, eventDate, compact = true } = props;\n  return clusters?.map((x, i, arr) => {\n    const title = arr.length === 1 && (eventDate?.diff(getLocalDateTime()).toMillis() ?? -1) > 0 ? \"Expected\" : x.title;\n    return <ClusterValue {...x} title={title} compact={compact} key={i} />;\n  });\n};\n","import { Duration, DurationUnit } from \"luxon\";\n\n/**\n * Converts a Luxon Duration object to a human-readable string format\n *\n * @param {Duration} dur - The Luxon Duration object to convert\n * @param {DurationUnit} smallestUnit - The smallest unit of time to include in the output (default: 'seconds')\n * @returns {string} A formatted human-readable string representation of the duration\n *\n * @example\n * // Returns \"2 years 3 months 5 days\"\n * toHuman(Duration.fromObject({ years: 2, months: 3, days: 5, hours: 0 }), \"days\")\n */\nexport function toHuman(dur: Duration, smallestUnit: DurationUnit = \"seconds\"): string {\n  const units = [\"years\", \"months\", \"days\", \"hours\", \"minutes\", \"seconds\", \"milliseconds\"] as DurationUnit[];\n  const smallestIdx = units.indexOf(smallestUnit);\n  const entries = Object.entries(\n    dur\n      .shiftTo(...units)\n      .normalize()\n      .toObject()\n  ).filter(([, amount], idx) => amount > 0 && idx <= smallestIdx);\n  const dur2 = Duration.fromObject(entries.length === 0 ? { [smallestUnit]: 0 } : Object.fromEntries(entries));\n  return dur2.toHuman().replaceAll(\",\", \"\");\n}\n","import { Box, Tooltip } from \"@mui/material\";\nimport { DateTime } from \"luxon\";\nimport { ReactNode } from \"react\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { toHuman } from \"shared/utility/to-human\";\n\ntype Variant = \"countdown\" | \"date\";\n\ninterface DurationProps {\n  dateTime?: DateTime;\n  children?: ReactNode;\n  variant?: Variant;\n  dateFormat?: string;\n}\n\nexport const CountDown = (props: DurationProps) => {\n  const { dateTime, children, variant = \"countdown\", dateFormat = shortDate } = props;\n\n  const countDownStr = useCountdownText(variant, dateTime, dateFormat);\n  const tooltipStr = useTooltipText(variant, dateTime, dateFormat);\n  const countDownColor = useCountDownColor(dateTime);\n\n  return dateTime && dateTime > getLocalDateTime() ? (\n    <Tooltip title={tooltipStr}>\n      <Box color={countDownColor}>{countDownStr}</Box>\n    </Tooltip>\n  ) : (\n    children\n  );\n};\n\nconst useTooltipText = (variant: Variant, dateTime: DateTime | undefined, dateFormat: string) => {\n  if (!dateTime) {\n    return \"??\";\n  }\n\n  if (variant === \"countdown\") {\n    return dateTime?.toFormat(dateFormat);\n  }\n  const diff = dateTime?.diff(getLocalDateTime(), [\"years\", \"months\", \"days\", \"hours\"]);\n\n  return toHuman(diff, \"days\");\n};\n\nconst useCountdownText = (variant: Variant, dateTime: DateTime | undefined, dateFormat: string) => {\n  if (!dateTime) {\n    return \"??\";\n  }\n\n  if (variant === \"countdown\") {\n    const diff = dateTime?.diff(getLocalDateTime(), [\"years\", \"months\", \"days\", \"hours\"]);\n\n    return toHuman(diff, \"days\");\n  }\n\n  return dateTime?.toFormat(dateFormat);\n};\n\nconst useCountDownColor = (dateTime?: DateTime) => {\n  if (!dateTime) {\n    return \"white\";\n  }\n\n  const days = dateTime.diff(getLocalDateTime(), \"days\").days;\n  if (days < 30) {\n    return \"green\";\n  } else if (days <= 60) {\n    return \"orange\";\n  }\n\n  return \"rgb(244, 67, 54)\";\n};\n","import { Store } from \"@tanstack/store\";\nimport { Scenario } from \"shared/models/scenario\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\n\ninterface ScenarioStore {\n  scenarios: Partial<Record<number, Scenario[]>>;\n  loading: boolean;\n  minYear: number;\n  maxYear: number;\n}\n\nconst year = getLocalDateTime().year;\nexport const scenarioStore = new Store<ScenarioStore>({\n  loading: true,\n  maxYear: year,\n  minYear: year,\n  scenarios: {},\n});\n","export function makeMatrix(columns: number, rows: number) {\n  const matrix = [];\n  for (let i = 0; i < columns; i++) {\n    const column = [];\n    for (let j = 0; j < rows; j++) {\n      column.push(0);\n    }\n    matrix.push(column);\n  }\n  return matrix;\n}\n","export function numericSort<T>(x: T[], selector: (data: T) => number) {\n  return x.toSorted(function (a, b) {\n    return selector(a) - selector(b);\n  });\n}\n","export function uniqueCountSorted<T>(x: T[], selector: (x: T) => number) {\n  let uniqueValueCount = 0,\n    lastSeenValue;\n  for (let i = 0; i < x.length; i++) {\n    const value = selector(x[i]);\n    if (i === 0 || value !== lastSeenValue) {\n      lastSeenValue = value;\n      uniqueValueCount++;\n    }\n  }\n  return uniqueValueCount;\n}\n","import { makeMatrix } from \"./make-matrix\";\nimport { numericSort } from \"./numeric-sort\";\nimport { uniqueCountSorted } from \"./unique-count-sorted\";\n\n/**\n * Generates incrementally computed values based on the sums and sums of\n * squares for the data array\n *\n * @private\n * @param {number} j\n * @param {number} i\n * @param {Array<number>} sums\n * @param {Array<number>} sumsOfSquares\n * @return {number}\n * @example\n * ssq(0, 1, [-1, 0, 2], [1, 1, 5]);\n */\nfunction ssq(j: number, i: number, sums: number[], sumsOfSquares: number[]) {\n  let sji; // s(j, i)\n  if (j > 0) {\n    const muji = (sums[i] - sums[j - 1]) / (i - j + 1); // mu(j, i)\n    sji = sumsOfSquares[i] - sumsOfSquares[j - 1] - (i - j + 1) * muji * muji;\n  } else {\n    sji = sumsOfSquares[i] - (sums[i] * sums[i]) / (i + 1);\n  }\n  if (sji < 0) {\n    return 0;\n  }\n  return sji;\n}\n\n/**\n * Function that recursively divides and conquers computations\n * for cluster j\n *\n * @private\n * @param {number} iMin Minimum index in cluster to be computed\n * @param {number} iMax Maximum index in cluster to be computed\n * @param {number} cluster Index of the cluster currently being computed\n * @param {Array<Array<number>>} matrix\n * @param {Array<Array<number>>} backtrackMatrix\n * @param {Array<number>} sums\n * @param {Array<number>} sumsOfSquares\n */\nfunction fillMatrixColumn(\n  iMin: number,\n  iMax: number,\n  cluster: number,\n  matrix: number[][],\n  backtrackMatrix: number[][],\n  sums: number[],\n  sumsOfSquares: number[]\n) {\n  if (iMin > iMax) {\n    return;\n  }\n\n  // Start at midpoint between iMin and iMax\n  const i = Math.floor((iMin + iMax) / 2);\n\n  matrix[cluster][i] = matrix[cluster - 1][i - 1];\n  backtrackMatrix[cluster][i] = i;\n\n  let jlow = cluster; // the lower end for j\n\n  if (iMin > cluster) {\n    jlow = Math.max(jlow, backtrackMatrix[cluster][iMin - 1] || 0);\n  }\n  jlow = Math.max(jlow, backtrackMatrix[cluster - 1][i] || 0);\n\n  let jhigh = i - 1; // the upper end for j\n  if (iMax < matrix[0].length - 1) {\n    jhigh = Math.min(jhigh, backtrackMatrix[cluster][iMax + 1] || 0);\n  }\n\n  let sji;\n  let sjlowi;\n  let ssqjlow;\n  let ssqj;\n  for (let j = jhigh; j >= jlow; --j) {\n    sji = ssq(j, i, sums, sumsOfSquares);\n\n    if (sji + matrix[cluster - 1][jlow - 1] >= matrix[cluster][i]) {\n      break;\n    }\n\n    // Examine the lower bound of the cluster border\n    sjlowi = ssq(jlow, i, sums, sumsOfSquares);\n\n    ssqjlow = sjlowi + matrix[cluster - 1][jlow - 1];\n\n    if (ssqjlow < matrix[cluster][i]) {\n      // Shrink the lower bound\n      matrix[cluster][i] = ssqjlow;\n      backtrackMatrix[cluster][i] = jlow;\n    }\n    jlow++;\n\n    ssqj = sji + matrix[cluster - 1][j - 1];\n    if (ssqj < matrix[cluster][i]) {\n      matrix[cluster][i] = ssqj;\n      backtrackMatrix[cluster][i] = j;\n    }\n  }\n\n  fillMatrixColumn(iMin, i - 1, cluster, matrix, backtrackMatrix, sums, sumsOfSquares);\n  fillMatrixColumn(i + 1, iMax, cluster, matrix, backtrackMatrix, sums, sumsOfSquares);\n}\n\n/**\n * Initializes the main matrices used in Ckmeans and kicks\n * off the divide and conquer cluster computation strategy\n *\n * @private\n * @param {Array<number>} data sorted array of values\n * @param {Array<Array<number>>} matrix\n * @param {Array<Array<number>>} backtrackMatrix\n */\nfunction fillMatrices<T>(data: T[], matrix: number[][], backtrackMatrix: number[][], selector: (x: T) => number) {\n  const nValues = matrix[0].length;\n\n  // Shift values by the median to improve numeric stability\n  const shift = selector(data[Math.floor(nValues / 2)]);\n\n  // Cumulative sum and cumulative sum of squares for all values in data array\n  const sums: number[] = [];\n  const sumsOfSquares: number[] = [];\n\n  // Initialize first column in matrix & backtrackMatrix\n  for (let i = 0, shiftedValue; i < nValues; ++i) {\n    shiftedValue = selector(data[i]) - shift;\n    if (i === 0) {\n      sums.push(shiftedValue);\n      sumsOfSquares.push(shiftedValue * shiftedValue);\n    } else {\n      sums.push(sums[i - 1] + shiftedValue);\n      sumsOfSquares.push(sumsOfSquares[i - 1] + shiftedValue * shiftedValue);\n    }\n\n    // Initialize for cluster = 0\n    matrix[0][i] = ssq(0, i, sums, sumsOfSquares);\n    backtrackMatrix[0][i] = 0;\n  }\n\n  // Initialize the rest of the columns\n  let iMin;\n  for (let cluster = 1; cluster < matrix.length; ++cluster) {\n    if (cluster < matrix.length - 1) {\n      iMin = cluster;\n    } else {\n      // No need to compute matrix[K-1][0] ... matrix[K-1][N-2]\n      iMin = nValues - 1;\n    }\n\n    fillMatrixColumn(iMin, nValues - 1, cluster, matrix, backtrackMatrix, sums, sumsOfSquares);\n  }\n}\n\n/**\n * Ckmeans clustering is an improvement on heuristic-based clustering\n * approaches like Jenks. The algorithm was developed in\n * [Haizhou Wang and Mingzhou Song](http://journal.r-project.org/archive/2011-2/RJournal_2011-2_Wang+Song.pdf)\n * as a [dynamic programming](https://en.wikipedia.org/wiki/Dynamic_programming) approach\n * to the problem of clustering numeric data into groups with the least\n * within-group sum-of-squared-deviations.\n *\n * Minimizing the difference within groups - what Wang & Song refer to as\n * `withinss`, or within sum-of-squares, means that groups are optimally\n * homogenous within and the data is split into representative groups.\n * This is very useful for visualization, where you may want to represent\n * a continuous variable in discrete color or style groups. This function\n * can provide groups that emphasize differences between data.\n *\n * Being a dynamic approach, this algorithm is based on two matrices that\n * store incrementally-computed values for squared deviations and backtracking\n * indexes.\n *\n * This implementation is based on Ckmeans 3.4.6, which introduced a new divide\n * and conquer approach that improved runtime from O(kn^2) to O(kn log(n)).\n *\n * Unlike the [original implementation](https://cran.r-project.org/web/packages/Ckmeans.1d.dp/index.html),\n * this implementation does not include any code to automatically determine\n * the optimal number of clusters: this information needs to be explicitly\n * provided.\n *\n * ### References\n * _Ckmeans.1d.dp: Optimal k-means Clustering in One Dimension by Dynamic\n * Programming_ Haizhou Wang and Mingzhou Song ISSN 2073-4859\n *\n * from The R Journal Vol. 3/2, December 2011\n * @param {Array<number>} data input data, as an array of number values\n * @param {number} nClusters number of desired classes. This cannot be\n * greater than the number of values in the data array.\n * @returns {Array<Array<number>>} clustered input\n * @throws {Error} if the number of requested clusters is higher than the size of the data\n * @example\n * ckmeans([-1, 2, -1, 2, 4, 5, 6, -1, 2, -1], 3);\n * // The input, clustered into groups of similar numbers.\n * //= [[-1, -1, -1, -1], [2, 2, 2], [4, 5, 6]]);\n */\nexport function ckmeans<T>(data: T[], nClusters: number, selector: (x: T) => number) {\n  if (nClusters === 0) {\n    return [];\n  }\n  if (nClusters > data.length) {\n    throw new Error(\"cannot generate more classes than there are data values\");\n  }\n\n  const sorted = numericSort(data, selector);\n  // we'll use this as the maximum number of clusters\n  const uniqueCount = uniqueCountSorted(sorted, selector);\n\n  // if all of the input values are identical, there's one cluster\n  // with all of the input in it.\n  if (uniqueCount === 1) {\n    return [sorted];\n  }\n\n  // named 'S' originally\n  const matrix = makeMatrix(nClusters, sorted.length);\n  // named 'J' originally\n  const backtrackMatrix = makeMatrix(nClusters, sorted.length);\n\n  // This is a dynamic programming way to solve the problem of minimizing\n  // within-cluster sum of squares. It's similar to linear regression\n  // in this way, and this calculation incrementally computes the\n  // sum of squares that are later read.\n  fillMatrices(sorted, matrix, backtrackMatrix, selector);\n\n  // The real work of Ckmeans clustering happens in the matrix generation:\n  // the generated matrices encode all possible clustering combinations, and\n  // once they're generated we can solve for the best clustering groups\n  // very quickly.\n  const clusters = [];\n  let clusterRight = backtrackMatrix[0].length - 1;\n\n  // Backtrack the clusters from the dynamic programming matrix. This\n  // starts at the bottom-right corner of the matrix (if the top-left is 0, 0),\n  // and moves the cluster target with the loop.\n  for (let cluster = backtrackMatrix.length - 1; cluster >= 0; cluster--) {\n    const clusterLeft = backtrackMatrix[cluster][clusterRight];\n\n    // fill the cluster from the sorted input by taking a slice of the\n    // array. the backtrack matrix makes this easy - it stores the\n    // indexes where the cluster should start and end.\n    clusters[cluster] = sorted.slice(clusterLeft, clusterRight + 1);\n\n    if (cluster > 0) {\n      clusterRight = clusterLeft - 1;\n    }\n  }\n\n  return clusters;\n}\n","const areSetsEqual = <T>(a: Set<T>, b: Set<T>) => [...a].every((value) => b.has(value)) && [...b].every((value) => a.has(value));\n\nexport const collapseClusters = <T>(data: T[][], selector: (data: T) => number) => {\n  const sets = data.map((x) => new Set(x.map((y) => selector(y))));\n  const result: T[][] = [];\n  for (let i = 0; i < sets.length; i++) {\n    const curr = data[i].slice();\n    for (let j = i + 1; j < sets.length; j++) {\n      if (areSetsEqual(sets[i], sets[j])) {\n        curr.push(...data[j]);\n        sets.splice(j, 1);\n        data.splice(j, 1);\n      }\n    }\n    result.push(curr);\n  }\n  return result;\n};\n","import { Cluster } from \"shared/hooks/use-clusters\";\n\nexport const scaleCluster = (cluster: Cluster | undefined, factor: number) => {\n  if (!cluster) {\n    return undefined;\n  }\n  return { ...cluster, min: cluster.min * factor, max: cluster.max * factor, median: cluster.median * factor };\n};\n\nexport const scaleClusters = (clusters: Cluster[] | undefined, factor: number): Cluster[] | undefined => {\n  return clusters?.filter((x) => x).map((x) => scaleCluster(x, factor)!);\n};\n\nexport const findMostMostLikely = (cluster: Cluster[]) => {\n  if (cluster.length === 0) {\n    return;\n  }\n  const mostLikely = cluster.reduce((acc, curr) => {\n    return curr.probability > acc.probability ? curr : acc;\n  });\n  return mostLikely;\n};\n\nexport const clusterTitle = (index: number, length: number) => {\n  if (length === 1) {\n    return \"Actual\";\n  } else if (length == 2) {\n    return [\"Low\", \"High\"][index];\n  } else {\n    return [\"Low\", \"Med\", \"High\"][index];\n  }\n};\n\nexport const getClusterCount = <T>(values: T[], selector: (x: T) => number) => {\n  const uniqeValues = new Set(values.map((x) => selector(x))).size;\n\n  if (uniqeValues < 3) {\n    return uniqeValues;\n  } else if (uniqeValues === 4) {\n    return 2;\n  }\n  return 3;\n};\n\nexport const SumClusters = (clusters: Cluster[][]) => {\n  if (clusters.length == 0) {\n    return [];\n  }\n\n  const numClusters = clusters.reduce((acc, curr) => Math.max(acc, curr.length), 0);\n  const expandedClusters = clusters\n    .filter((x) => x.length > 0)\n    .map((cluster) => {\n      if (cluster.length === 1) {\n        return new Array(numClusters).fill(cluster[0]) as Cluster[];\n      }\n      if (cluster.length === 2 && numClusters === 3) {\n        const min = cluster[0];\n        const max = cluster[1];\n        return [\n          min,\n          {\n            min: (min.min + max.min) / 2,\n            max: (min.max + max.max) / 2,\n            median: (min.median + max.median) / 2,\n            probability: (min.probability + max.probability) / 2,\n            title: \"Med\",\n          },\n          max,\n        ].map((x, _i, arr) => {\n          const probability = x.probability / arr.reduce((acc, curr) => acc + curr.probability, 0);\n          return { ...x, probability };\n        }) as Cluster[];\n      }\n      return cluster;\n    });\n\n  return expandedClusters\n    .reduce((acc, curr) => {\n      return curr.map((x, i) => ({\n        min: x.min + acc[i].min,\n        max: x.max + acc[i].max,\n        median: x.median + acc[i].median,\n        probability: x.probability + acc[i].probability,\n        title: x.title,\n      }));\n    })\n    .map((x, _i, arr) => {\n      const probability = x.probability / arr.reduce((acc, curr) => acc + curr.probability, 0);\n      return { ...x, probability };\n    })\n    .map((x, i, arr) => {\n      return { ...x, title: clusterTitle(i, arr.length) };\n    });\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { Scenario } from \"shared/models/scenario\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\nimport { ckmeans } from \"shared/utility/ckmeans\";\nimport { clusterTitle, getClusterCount } from \"shared/utility/cluster-helpers\";\nimport { max, median, min, sumSimple } from \"simple-statistics\";\n\nexport interface Cluster {\n  min: number;\n  max: number;\n  median: number;\n  probability: number;\n  title: string;\n}\n\n/**\n * Creates statistical clusters from an array of scenarios based on a selector function\n *\n * @template T - A type extending the Scenario interface\n * @param {T[] | undefined} values - Array of scenario objects to cluster\n * @param {(x: T) => number} selector - Function that extracts a numeric value from each scenario\n * @returns {Cluster[]} Array of clusters with statistical properties\n */\nconst clusters = <T extends Scenario>(values: T[] | undefined, selector: (x: T) => number): Cluster[] => {\n  if (!values || values.length === 0) {\n    return [];\n  }\n\n  const totalWeight = sumSimple(values.map((x) => x.weight));\n  const clusterCount = getClusterCount(values, selector);\n  const clusters = ckmeans(values, clusterCount, selector);\n\n  const result = clusters.map((x, i, arr) => {\n    return {\n      min: min(x.map((x) => selector(x))),\n      max: max(x.map((x) => selector(x))),\n      median: median(x.map((x) => selector(x))),\n      probability: sumSimple(x.map((x) => x.weight)) / totalWeight,\n      title: clusterTitle(i, arr.length),\n    };\n  });\n\n  return result;\n};\n\n/**\n * React hook that provides clustered statistical analyses for various financial metrics for a specific year\n *\n * @param {number} year - The year to retrieve and analyze scenarios for\n * @returns {Object} Object containing clusters for different financial metrics (totalPay, meritBonus, etc.)\n */\nexport const useClusters = (year: number) => {\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios[year]);\n\n  if (scenarios?.length === 0) {\n    return {\n      totalPay: [],\n      meritBonus: [],\n      retirementBonus: [],\n      companyBonus: [],\n      pay: [],\n      meritIncrease: [],\n      scenarios,\n      taxablePay: [],\n    };\n  }\n\n  return {\n    totalPay: clusters(scenarios, (x) => x.totalPay),\n    meritBonus: clusters(scenarios, (x) => x.meritBonus),\n    retirementBonus: clusters(scenarios, (x) => x.retirementBonus),\n    companyBonus: clusters(scenarios, (x) => x.companyBonus),\n    pay: clusters(scenarios, (x) => x.pay.at(-1)?.value ?? 0),\n    meritIncrease: clusters(scenarios, (x) => x.meritIncreasePct + x.equityIncreasePct),\n    taxablePay: clusters(scenarios, (x) => x.taxablePay),\n    scenarios,\n  };\n};\n\n/**\n * React hook that provides total pay clusters across all available years\n *\n * @returns {Array} An array of tuples containing year and corresponding total pay clusters\n */\nexport const useTotalPayClusters = () => {\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios);\n  const allScenarios = Object.entries(scenarios);\n  if (allScenarios.length === 0) {\n    return [];\n  }\n\n  return allScenarios.map(([year, scenarios]) => [year, clusters(scenarios, (x) => x.totalPay)]) as [string, Cluster[]][];\n};\n","import { DateTime } from \"luxon\";\n\n/**\n * Finds an account data entry from a specific year\n * Used to find historical data points that match a target year\n *\n * @template T - Type extending AccountData\n * @param {number} year - The year to search for\n * @param {T[] | undefined} data - Array of account data entries to search through\n * @returns {T | undefined} The matching entry for the year, or undefined if none found\n * @example\n * const data = [\n *   { date: '2024-01-01', value: 100 },\n *   { date: '2025-01-01', value: 200 }\n * ];\n * findSameYear(2025, data); // returns { date: '2025-01-01', value: 200 }\n */\nexport function findSameYear<T extends { date: string }>(year: number, data: T[]): T | undefined;\nexport function findSameYear<T extends { date: string }>(date: DateTime, data: T[]): T | undefined;\nexport function findSameYear<T extends { date: string }>(date: DateTime | number, data: T[]): T | undefined {\n  const year = typeof date === \"number\" ? date : date.year;\n  return data.find((x) => {\n    return DateTime.fromISO(x.date).year === year;\n  });\n}\n","import { DateTime } from \"luxon\";\nimport { AccountData } from \"shared/models/store/current\";\nimport { findSameYear } from \"./find-same-year\";\n\n/**\n * Gets the actual date for an account entry in a specific year\n * Used to find historical dates for events like bonuses or payments\n *\n * @param {number} year - The year to get the date for\n * @param {AccountData[] | undefined} data - Array of account data entries\n * @returns {DateTime | undefined} The actual date from the matching year's entry, or undefined if not found\n * @example\n * const bonusDates = [\n *   { date: '2024-06-15', value: 5000 },\n *   { date: '2025-06-15', value: 6000 }\n * ];\n * getActualDate(2025, bonusDates); // returns DateTime for 2025-06-15\n */\nexport const getActualDate = (year: number | undefined, data: AccountData[]) => {\n  if (!year) {\n    return undefined;\n  }\n\n  const entry = findSameYear(year, data);\n  return entry ? DateTime.fromISO(entry.date) : undefined;\n};\n","import { DateTime } from \"luxon\";\n\n/**\n * Gets the default payment dates for various types of compensation\n * Provides standard dates for merit increases, bonuses, and retirement payments\n *\n * @param {number} [year] - Optional year to set for the dates\n * @returns {Object} Object containing default dates for different payment types\n * @property {DateTime} meritIncrease - Default date for merit pay increases (April 1)\n * @property {DateTime} meritBonus - Default date for merit bonuses (April 15)\n * @property {DateTime} companyBonus - Default date for company-wide bonuses (June 15)\n * @property {DateTime} retirementBonus - Default date for retirement bonuses (July 15)\n */\nexport const getDefaultPayDates = (year?: number) => {\n  return {\n    meritIncrease: DateTime.fromObject({ month: 4, day: 1, year }),\n    meritBonus: DateTime.fromObject({ month: 4, day: 15, year }),\n    companyBonus: DateTime.fromObject({ month: 6, day: 15, year }),\n    retirementBonus: DateTime.fromObject({ month: 7, day: 15, year }),\n  };\n};\n","import { DateTime } from \"luxon\";\n\n/**\n * Gets the date ranges used for calculating eligible income for different bonus types\n * Defines ranges for the base salary period and various bonus calculation periods\n *\n * @param {number} year - The year to get date ranges for\n * @returns {Object} Object containing date ranges for different income types\n * @property {Object} base - Date range for base salary calculations\n * @property {DateTime} base.start - Start of the base salary period (Jan 1)\n * @property {DateTime} base.end - End of the base salary period (Dec 31)\n * @property {Object} meritBonus - Date range for merit bonus calculations\n * @property {DateTime} meritBonus.start - Start of merit bonus period (Jan 1)\n * @property {DateTime} meritBonus.end - End of merit bonus period (Dec 31)\n * @property {Object} companyBonus - Date range for company bonus calculations\n * @property {DateTime} companyBonus.start - Start of company bonus period (Jul 1 previous year)\n * @property {DateTime} companyBonus.end - End of company bonus period (Jun 30 current year)\n * @property {Object} retirementBonus - Date range for retirement bonus calculations\n * @property {DateTime} retirementBonus.start - Start of retirement bonus period (Jan 1)\n * @property {DateTime} retirementBonus.end - End of retirement bonus period (Dec 31)\n */\nexport const getEligibleIncomeDateRanges = (year: number) => ({\n  base: {\n    start: DateTime.fromObject({ month: 1, day: 1, year }),\n    end: DateTime.fromObject({ month: 12, day: 31, year }).endOf(\"day\"),\n  },\n  meritBonus: {\n    start: DateTime.fromObject({ month: 1, day: 1, year: year - 1 }),\n    end: DateTime.fromObject({ month: 12, day: 31, year: year - 1 }).endOf(\"day\"),\n  },\n  companyBonus: {\n    start: DateTime.fromObject({ day: 1, month: 4, year: year - 1 }),\n    end: DateTime.fromObject({ day: 31, month: 3, year }).endOf(\"day\"),\n  },\n  retirementBonus: {\n    start: DateTime.fromObject({ day: 1, month: 7, year: year - 1 }),\n    end: DateTime.fromObject({ day: 30, month: 6, year }).endOf(\"day\"),\n  },\n});\n","import { useStore } from \"@tanstack/react-store\";\nimport { store } from \"shared/store\";\nimport { getActualDate } from \"shared/utility/get-actual-date\";\nimport { getDefaultPayDates } from \"shared/utility/get-default-pay-dates\";\nimport { getEligibleIncomeDateRanges } from \"shared/utility/get-eligible-income-date-ranges\";\n\n/**\n * React hook that provides important financial dates for a specific year\n *\n * @param {number} [year] - The year to get dates for (optional)\n * @returns {Object} Object containing dates for merit increase, merit bonus, company bonus, and retirement bonus\n */\nexport const useDates = (year?: number) => {\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\n  const meritBonusDate = getActualDate(year, timeSeries.meritBonus);\n  const companyBonusDate = getActualDate(year, timeSeries.companyBonus);\n  const retirementBonusDate = getActualDate(year, timeSeries.retirementBonus);\n  const defaultDates = getDefaultPayDates(year);\n\n  return {\n    meritIncrease: defaultDates.meritIncrease,\n    meritBonus: meritBonusDate ?? defaultDates.meritBonus,\n    companyBonus: companyBonusDate ?? defaultDates.companyBonus,\n    retirementBonus: retirementBonusDate ?? defaultDates.retirementBonus,\n  };\n};\n\n/**\n * React hook that provides eligible income date ranges for a specific year\n *\n * @param {number} year - The year to get date ranges for\n * @returns {Object} Object containing eligible income date ranges for different types of income\n */\nexport const useDateRanges = (year: number) => {\n  return getEligibleIncomeDateRanges(year);\n};\n","export interface PaymentPeriod {\n  start: string;\n  end: string;\n  payedOn: string;\n  value: number;\n  cumulative: number;\n  type: PaymentType;\n}\n\nexport const PaymentTypes = {\n  regular: \"regular\",\n  bonus: \"taxable bonus\",\n  nonTaxableBonus: \"non-taxable bonus\",\n} as const;\n\nexport type PaymentType = (typeof PaymentTypes)[keyof typeof PaymentTypes];\n","/**\n * @description: chunk an array when the selected value changes\n * @param arr : an array of T.\n * @param select : select a property of T to chunk by.\n * @returns : T[][];\n */\nexport const ChunkByEquality = <T>(arr: T[], select: (data: T) => unknown) => {\n  return arr.reduceRight((acc, curr) => {\n    if (acc.length > 0 && select(acc[0]?.[0]) === select(curr)) {\n      acc[0].unshift(curr);\n    } else {\n      acc.unshift([curr]);\n    }\n\n    return acc;\n  }, [] as T[][]);\n};\n","import InsertChartIcon from \"@mui/icons-material/InsertChart\";\nimport { Tooltip } from \"@mui/material\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { AgCartesianChartOptions, AgColorType } from \"ag-charts-community\";\nimport { AgCharts } from \"ag-charts-react\";\nimport { DateTime } from \"luxon\";\nimport { TimeSeriesKeys } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\nimport { ckmeans, collapseClusters } from \"shared/utility/ckmeans\";\nimport { formatCash } from \"shared/utility/format-cash\";\nimport { formatPercent } from \"shared/utility/format-percent\";\nimport { getProbablityColor } from \"shared/utility/get-probablity-color\";\nimport { sortByDate } from \"shared/utility/sort-by-date\";\n\nexport const SparkChart = (props: { accountName: TimeSeriesKeys; variant: \"cash\" | \"percent\" | \"number\" }) => {\n  const { accountName, variant } = props;\n  const account = useStore(store, (x) => x.projectedIncome.timeSeries[accountName]);\n  const data = account.map((x) => ({ ...x, date: DateTime.fromISO(x.date).toJSDate() }));\n  const selector = (x: { date: Date; value: number }) => x.value;\n  const maxClusters = Math.min(data.length, 3);\n\n  const ckData = collapseClusters(ckmeans(data, maxClusters, selector), selector)\n    .map((x) => {\n      return x.map((y, i, subArr) => ({\n        ...y,\n        cluster: subArr.length / data.length,\n        color: getProbablityColor(subArr.length / data.length) as AgColorType,\n      }));\n    })\n    .flat()\n    .sort(sortByDate((x) => DateTime.fromJSDate(x.date), \"asc\"));\n\n  const options: AgCartesianChartOptions = {\n    data: ckData,\n    theme: \"ag-default-dark\",\n    series: [\n      {\n        type: \"line\",\n        yKey: \"value\",\n        xKey: \"date\",\n        stroke: \"white\",\n        marker: {\n          itemStyler: (params) => {\n            const fill = variant === \"percent\" ? \"#FFF\" : params.datum.color;\n            return {\n              fill,\n              size: 10,\n            };\n          },\n        },\n      },\n    ],\n    axes: [\n      {\n        type: \"number\",\n        position: \"left\",\n\n        nice: true,\n        interval: {\n          maxSpacing: 45,\n        },\n        label: {\n          formatter: (params) => {\n            return variant === \"percent\" ? formatPercent(params.value) : formatCash(params.value);\n          },\n        },\n      },\n      {\n        nice: false,\n        type: \"time\",\n        position: \"bottom\",\n        label: {\n          format: \"%Y\",\n        },\n      },\n    ],\n  };\n\n  const isDisabled = account.length === 0;\n\n  return (\n    <Tooltip\n      disableHoverListener={isDisabled}\n      disableFocusListener={isDisabled}\n      disableTouchListener={isDisabled}\n      slotProps={{\n        tooltip: {\n          sx: {\n            maxWidth: \"unset\",\n          },\n        },\n      }}\n      title={<AgCharts options={options} css={{ width: 750, height: 375 }} />}\n    >\n      <InsertChartIcon color={isDisabled ? \"disabled\" : undefined} />\n    </Tooltip>\n  );\n};\n","import { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { AccountData, TimeSeriesKeys } from \"shared/models/store/current\";\nimport { store } from \".\";\n\nexport const updateProjectedIncomeDate = (timeSeries: TimeSeriesKeys, data: AccountData, date: DateTime) => {\n  store.setState((prev) => {\n    const next = create(prev, (next) => {\n      const idx = prev.projectedIncome.timeSeries[timeSeries].findIndex((x) => x === data);\n      if (idx < 0) {\n        throw new Error(\"failed to find data\");\n      }\n\n      next.projectedIncome.timeSeries[timeSeries][idx].date = date.toISO()!;\n    });\n    return next;\n  });\n};\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\nimport UpdateIcon from \"@mui/icons-material/Update\";\nimport { Button, Tooltip } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { ColDef, ICellRendererParams } from \"ag-grid-community\";\nimport { CustomCellRendererProps } from \"ag-grid-react\";\nimport { DateTime } from \"luxon\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { Percent } from \"shared/components/formatters/percent\";\nimport { AccountData, TimeSeriesKeys } from \"shared/models/store/current\";\nimport { updateProjectedIncome } from \"shared/store\";\nimport { removeProjectedIncome } from \"shared/store/remove-projected-income\";\nimport { updateProjectedIncomeDate } from \"shared/store/update-projected-income-date\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const createAccountColumnConfig = (\n  accountName: TimeSeriesKeys,\n  variant: \"number\" | \"cash\" | \"percent\",\n  dateVariant: \"date\" | \"year\"\n): ColDef<AccountData>[] => [\n  {\n    headerName: dateVariant === \"date\" ? \"Date\" : \"Year\",\n    colId: \"date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(dateVariant === \"date\" ? shortDate : \"yyyy\"),\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\n    tooltipValueGetter: (x) => (dateVariant === \"year\" ? x.value?.toFormat(shortDate) : undefined),\n    cellRenderer: (x: ICellRendererParams<unknown, DateTime>) => {\n      return (\n        <Stack direction={\"row\"} alignItems={\"center\"}>\n          {x.valueFormatted}&nbsp;\n          {x.value && x.value > getLocalDateTime() && (\n            <Tooltip title=\"Future Event\">\n              <UpdateIcon htmlColor=\"orange\" />\n            </Tooltip>\n          )}\n        </Stack>\n      );\n    },\n    cellEditor: dateVariant === \"date\" ? \"agDateCellEditor\" : \"agNumberCellEditor\",\n    editable: true,\n    valueSetter: (x) => {\n      const date = dateVariant === \"date\" ? DateTime.fromJSDate(x.newValue) : DateTime.fromISO(x.data.date).set({ year: x.newValue });\n\n      if (date.isValid) {\n        updateProjectedIncomeDate(accountName, x.data, date);\n      }\n      return date.isValid;\n    },\n  },\n  {\n    headerName: \"Value\",\n    valueGetter: (x) => x.data?.value,\n    cellRenderer: (x: CustomCellRendererProps<AccountData>) =>\n      variant === \"cash\" ? <Cash compact={false} value={x.value} /> : <Percent value={x.value} />,\n    type: \"numericColumn\",\n    editable: true,\n    cellEditor: \"agNumberCellEditor\",\n    valueSetter: (x) => {\n      updateProjectedIncome(accountName, x.data, +x.newValue);\n      return true;\n    },\n  },\n  {\n    cellStyle: () => ({ display: \"inline-flex\", padding: \"0px\" }),\n    sortable: false,\n    headerName: \"\",\n    width: 80,\n    colId: \"actions\",\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\n      return (\n        <Button\n          onClick={() => {\n            props.data && removeProjectedIncome(accountName, props.data);\n          }}\n          color=\"error\"\n          fullWidth\n        >\n          <DeleteForeverIcon />\n        </Button>\n      );\n    },\n  },\n];\n","import { Box, Button, InputAdornment, Paper, Stack, TextField, Tooltip, Typography } from \"@mui/material\";\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useState } from \"react\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { MAX_NUM_ENTRIES } from \"shared/constants\";\nimport { TimeSeriesKeys } from \"shared/models/store/current\";\nimport { addProjectedIncome, store } from \"shared/store\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { SparkChart } from \"../spark-chart\";\nimport { createAccountColumnConfig } from \"./column-config\";\n\nconst disabledStyle = {\n  color: \"grey\",\n};\n\nconst DataEntry = (props: {\n  timeSeries: TimeSeriesKeys;\n  defaultDate: DateTime;\n  variant?: \"number\" | \"cash\" | \"percent\";\n  dateVariant?: \"date\" | \"year\";\n}) => {\n  const { timeSeries, defaultDate, variant = \"number\", dateVariant = \"date\" } = props;\n  const account = useStore(store, (state) => state.projectedIncome.timeSeries[timeSeries]);\n\n  const [date, setDate] = useState(defaultDate);\n  const [amount, setAmount] = useState<number | null>(null);\n\n  const hasSameDate = !!account?.find((x) => date.hasSame(DateTime.fromISO(x.date), \"day\"));\n\n  const onAddEntry = () => {\n    if (amount != null) {\n      addProjectedIncome(date, timeSeries, variant === \"percent\" ? amount / 100 : amount);\n      setAmount(null);\n    }\n  };\n\n  const accountColumnConfig = createAccountColumnConfig(timeSeries, variant, dateVariant);\n\n  return (\n    <Box display={\"flex\"} flexDirection={\"column\"} height=\"100%\">\n      <Stack spacing={2} flex=\"0 1 auto\">\n        <DatePicker\n          format={dateVariant === \"year\" ? \"yyyy\" : shortDate}\n          views={dateVariant === \"year\" ? [\"year\"] : undefined}\n          sx={{ color: \"white\" }}\n          label={dateVariant === \"date\" ? \"Date\" : \"Year\"}\n          value={date}\n          onChange={(value) => {\n            console.log(value);\n            value && setDate(value);\n          }}\n        />\n        <TextField\n          label=\"Amount\"\n          value={amount ?? \"\"}\n          placeholder=\"0\"\n          type=\"number\"\n          onChange={(event) => (event.target.value === \"\" ? setAmount(null) : setAmount(+event.target.value))}\n          slotProps={{\n            input: {\n              startAdornment: variant !== \"number\" && <InputAdornment position=\"start\">{variant === \"cash\" ? \"$\" : \"%\"}</InputAdornment>,\n            },\n          }}\n        />\n        <Button disabled={amount === null || !date || hasSameDate} onClick={onAddEntry}>\n          Add Entry\n        </Button>\n      </Stack>\n      <Box sx={{ paddingTop: 2, flex: \"1 1 auto\" }}>\n        <AgGrid\n          rowData={account ?? []}\n          columnDefs={accountColumnConfig}\n          id={account + \"-history\"}\n          autoSizeStrategy={{\n            type: \"fitGridWidth\",\n          }}\n          stopEditingWhenCellsLoseFocus\n          getRowStyle={(x) => {\n            return x.rowIndex >= MAX_NUM_ENTRIES ? disabledStyle : undefined;\n          }}\n        />\n      </Box>\n    </Box>\n  );\n};\n\ninterface LayoutProps {\n  title: string;\n  accountName: TimeSeriesKeys;\n  defaultDate: DateTime;\n  variant: \"percent\" | \"number\" | \"cash\";\n  dateVariant?: \"date\" | \"year\";\n}\n\nexport const DataEntryLayout = (props: LayoutProps) => {\n  const { title, accountName, defaultDate, variant, dateVariant = \"date\" } = props;\n  return (\n    <Paper sx={{ padding: 2, height: \"100%\", width: 450, flexShrink: 0 }}>\n      <Box display=\"flex\" flexDirection=\"column\" height=\"100%\">\n        <Box flex=\"0 1 auto\" marginBottom={4} display={\"flex\"} alignItems={\"center\"} justifyContent={\"space-between\"}>\n          <Typography variant=\"h5\">\n            {title}{\" \"}\n            {variant === \"cash\" && (\n              <Tooltip\n                title={\n                  <>\n                    <span>Cash values are used in lieu of Percent values.</span>\n                    <br />\n                    <span>Cash values are considered actual payment values.</span>\n                  </>\n                }\n              >\n                <span>($)</span>\n              </Tooltip>\n            )}\n            {variant === \"percent\" && (\n              <Tooltip title=\"Percentage values are used for predictions.\">\n                <span>(%)</span>\n              </Tooltip>\n            )}\n          </Typography>\n          <SparkChart accountName={accountName} variant={variant} />\n        </Box>\n        <Box flex=\"1 1 auto\">\n          <DataEntry variant={variant} timeSeries={accountName} defaultDate={defaultDate} dateVariant={dateVariant} />\n        </Box>\n      </Box>\n    </Paper>\n  );\n};\n","import InsertChartIcon from \"@mui/icons-material/InsertChart\";\nimport { Tooltip } from \"@mui/material\";\nimport { AgCartesianChartOptions, AgLineSeriesOptions } from \"ag-charts-community\";\nimport { AgCharts } from \"ag-charts-react\";\nimport { DateTime } from \"luxon\";\nimport { useTotalPayClusters } from \"shared/hooks/use-clusters\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { formatPercent } from \"shared/utility/format-percent\";\nimport { getProbablityColor } from \"shared/utility/get-probablity-color\";\n\nexport const IncomeChart = () => {\n  const clusters = useTotalPayClusters();\n  const history = clusters\n    .filter(([year]) => +year <= getLocalDateTime().year)\n    .map(([year, x]) => ({\n      totalPay: x[0]?.median ?? 0,\n      date: DateTime.fromObject({ year: +year, month: 1, day: 1 }).toJSDate(),\n    }));\n\n  const future = clusters\n    .filter(([year]) => +year >= getLocalDateTime().year)\n    .map(([year, x]) => {\n      const data = Object.fromEntries(\n        x?.flatMap((x) => {\n          const title = x.title.toLocaleLowerCase();\n          return [\n            [title, x.median],\n            [title + \"Probability\", x.probability],\n          ];\n        })\n      );\n      return {\n        ...data,\n        date: DateTime.fromObject({ year: +year, month: 1, day: 1 }).toJSDate(),\n      };\n    });\n\n  const isDisabled = future.length + history.length === 0;\n\n  const series = [\n    {\n      type: \"line\",\n      xKey: \"date\",\n      yKey: \"totalPay\",\n      data: history,\n      yName: \"Income\",\n\n      tooltip: {\n        renderer: ({ datum, yKey, xKey }) => ({\n          heading: DateTime.fromJSDate(datum[xKey]).toFormat(shortDate),\n          data: [{ label: yKey, value: formatCashShort(datum[yKey]) }],\n        }),\n      },\n    },\n    {\n      type: \"line\",\n      xKey: \"date\",\n      yKey: \"low\",\n      data: future,\n      yName: \"Low\",\n      stroke: \"grey\",\n      marker: {\n        itemStyler: (params) => {\n          const color = getProbablityColor(params.datum.lowProbability);\n          return {\n            fill: color,\n            stroke: color,\n          };\n        },\n      },\n      tooltip: {\n        renderer: ({ datum, yKey, xKey }) => ({\n          heading: DateTime.fromJSDate(datum[xKey]).year,\n          data: [{ label: yKey, value: `${formatCashShort(datum[yKey])} ${formatPercent(datum.lowProbability)}` }],\n        }),\n      },\n    },\n    {\n      marker: {\n        itemStyler: (params) => {\n          const color = getProbablityColor(params.datum.medProbability);\n          return {\n            fill: color,\n          };\n        },\n      },\n      type: \"line\",\n      stroke: \"grey\",\n      xKey: \"date\",\n      yKey: \"med\",\n      data: future,\n      yName: \"Medium\",\n      tooltip: {\n        renderer: ({ datum, yKey, xKey }) => ({\n          heading: DateTime.fromJSDate(datum[xKey]).year,\n          data: [{ label: yKey, value: `${formatCashShort(datum[yKey])} ${formatPercent(datum.medProbability)}` }],\n        }),\n      },\n    },\n    {\n      stroke: \"grey\",\n      marker: {\n        itemStyler: (params) => {\n          const color = getProbablityColor(params.datum.highProbability);\n          return {\n            fill: color,\n            stroke: color,\n          };\n        },\n      },\n      type: \"line\",\n      xKey: \"date\",\n      yKey: \"high\",\n      data: future,\n      yName: \"High\",\n      tooltip: {\n        renderer: ({ datum, yKey, xKey }) => ({\n          heading: DateTime.fromJSDate(datum[xKey]).year,\n          data: [{ label: yKey, value: `${formatCashShort(datum[yKey])} ${formatPercent(datum.highProbability)}` }],\n        }),\n      },\n    },\n  ] as AgLineSeriesOptions[];\n\n  const options: AgCartesianChartOptions = {\n    theme: \"ag-default-dark\",\n    title: {\n      text: `Income`,\n    },\n\n    axes: [\n      {\n        type: \"time\",\n        position: \"bottom\",\n        label: {\n          format: \"%Y\",\n        },\n        nice: false,\n      },\n      {\n        type: \"number\",\n        position: \"left\",\n        nice: true,\n        interval: {\n          maxSpacing: 45,\n        },\n        label: {\n          formatter: (params) => {\n            return formatCash(params.value);\n          },\n        },\n      },\n    ],\n    series,\n  };\n\n  return (\n    <Tooltip\n      disableHoverListener={isDisabled}\n      disableFocusListener={isDisabled}\n      disableTouchListener={isDisabled}\n      slotProps={{\n        tooltip: {\n          sx: {\n            maxWidth: \"unset\",\n          },\n        },\n      }}\n      title={<AgCharts options={options} css={{ height: 375, width: 750 }} />}\n    >\n      <InsertChartIcon color={isDisabled ? \"disabled\" : undefined} />\n    </Tooltip>\n  );\n};\n","import ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\nimport { Table, TableBody, TableCell, TableRow } from \"@mui/material\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { IncomePerPeriod } from \"shared/models/income-per-period\";\nimport { shortDate } from \"shared/utility/format-date\";\n\ninterface IncomePerPeriodTooltipProps {\n  incomePerPeriod: IncomePerPeriod[];\n}\n\nexport const IncomePerPeriodTooltip = (props: IncomePerPeriodTooltipProps) => {\n  const { incomePerPeriod } = props;\n  return (\n    <Table sx={{ width: \"max-content\" }}>\n      <TableBody>\n        {incomePerPeriod.map(({ start, end, value, perPayday, count }, index) => {\n          return (\n            <TableRow key={index}>\n              <TableCell>\n                <Cash value={value} compact={false} />\n              </TableCell>\n              <TableCell>{start.toFormat(shortDate)}</TableCell>\n              <TableCell>\n                <ArrowForwardIcon />\n              </TableCell>\n              <TableCell>{end.toFormat(shortDate)}</TableCell>\n              <TableCell>\n                <Cash value={perPayday} compact={false} /> x {count}\n              </TableCell>\n            </TableRow>\n          );\n        })}\n        <TableRow>\n          <TableCell colSpan={4}>Total:</TableCell>\n          <TableCell>\n            <Cash value={incomePerPeriod.reduce((acc, curr) => curr.value + acc, 0)} compact={false} />\n          </TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  );\n};\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\nimport { Button, Checkbox, Stack, Tooltip } from \"@mui/material\";\nimport { ColDef, ICellRendererParams } from \"ag-grid-community\";\nimport { DateTime } from \"luxon\";\nimport { Percent } from \"shared/components/formatters/percent\";\nimport { MeritData, Rating, ratings, ratingsLabels } from \"shared/models/store/current\";\nimport { removeProjectedIncomeMerit, updateProjectedIncomeMerit } from \"shared/store\";\n\nexport const createMeritColumnConfig = (): ColDef<MeritData>[] =>\n  [\n    {\n      colId: \"enabled\",\n      cellStyle: { display: \"inline-flex\", padding: \"0px\" },\n      sortable: false,\n      filter: false,\n      width: 50,\n      cellRenderer: (params: ICellRendererParams<MeritData>) => (\n        <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n          <Checkbox\n            checked={params.data?.enabled}\n            disableRipple\n            onClick={() => {\n              params.data && updateProjectedIncomeMerit(params.data, { ...params.data, enabled: !params.data.enabled });\n            }}\n          />\n        </Stack>\n      ),\n    },\n    {\n      headerName: \"Year\",\n      colId: \"date\",\n      sort: \"desc\",\n      width: 85,\n      valueFormatter: (params) => {\n        if (!params.data?.date) {\n          return \"\";\n        }\n        const date = DateTime.fromISO(params.data?.date);\n        return date.toFormat(\"yyyy\");\n      },\n      valueGetter: (params) => params.data?.date,\n      cellEditor: \"agNumberCellEditor\",\n      editable: true,\n      valueSetter: (params) => {\n        const date = DateTime.fromISO(params.data.date).set({ year: params.newValue });\n\n        if (date.isValid) {\n          updateProjectedIncomeMerit(params.data, {\n            ...params.data,\n            date: date.toISO()!,\n          });\n          return true;\n        }\n        return false;\n      },\n    },\n    {\n      width: 150,\n      headerName: \"Merit Increase\",\n      valueGetter: (params) => (params.data?.meritIncreasePct ?? 0) * 100,\n      cellRenderer: (params: ICellRendererParams) => <Percent value={params.value / 100} />,\n      type: \"numericColumn\",\n      editable: true,\n      cellEditor: \"agNumberCellEditor\",\n      valueSetter: (params) => {\n        updateProjectedIncomeMerit(params.data, {\n          ...params.data,\n          meritIncreasePct: params.newValue / 100,\n        });\n        return true;\n      },\n    },\n    {\n      width: 135,\n      headerName: \"Merit Bonus\",\n      valueGetter: (params) => (params.data?.meritBonusPct ?? 0) * 100,\n      cellRenderer: (params: ICellRendererParams) => <Percent value={params.value / 100} />,\n      type: \"numericColumn\",\n      editable: true,\n      cellEditor: \"agNumberCellEditor\",\n      valueSetter: (params) => {\n        updateProjectedIncomeMerit(params.data, {\n          ...params.data,\n          meritBonusPct: params.newValue / 100,\n        });\n        return true;\n      },\n    },\n\n    {\n      width: 100,\n      headerName: \"Equity\",\n      valueGetter: (params) => (params.data?.equityPct ?? 0) * 100,\n      cellRenderer: (params: ICellRendererParams) => <Percent value={params.value / 100} />,\n      type: \"numericColumn\",\n      editable: true,\n      cellEditor: \"agNumberCellEditor\",\n      valueSetter: (params) => {\n        updateProjectedIncomeMerit(params.data, {\n          ...params.data,\n          equityPct: params.newValue / 100,\n        });\n        return true;\n      },\n    },\n    {\n      width: 225,\n      headerName: \"Rating\",\n      valueGetter: (params) => (params.data?.rating ? ratingsLabels[params.data?.rating] : \"None\"),\n      cellEditor: \"agSelectCellEditor\",\n      cellEditorParams: {\n        values: [\"None\", ...Object.values(ratings).map((x) => ratingsLabels[x])],\n      },\n      editable: true,\n      valueSetter: (params) => {\n        const rating = Object.entries(ratingsLabels).find(([, label]) => {\n          return params.newValue === label;\n        })?.[0] as Rating;\n        if (rating) {\n          updateProjectedIncomeMerit(params.data, {\n            ...params.data,\n            rating,\n          });\n          return true;\n        }\n        return false;\n      },\n    },\n\n    {\n      colId: \"actions\",\n      flex: 1,\n      cellStyle: { display: \"inline-flex\", padding: \"0px\" },\n      sortable: false,\n      filter: false,\n      cellRenderer: (params: ICellRendererParams<MeritData>) => (\n        <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n          <Tooltip title=\"Delete\">\n            <Button\n              onClick={() => {\n                params.data && removeProjectedIncomeMerit(params.data);\n              }}\n              size=\"small\"\n              color=\"error\"\n            >\n              <DeleteForeverIcon />\n            </Button>\n          </Tooltip>\n        </Stack>\n      ),\n    },\n  ] satisfies ColDef<MeritData>[];\n","import { Box, Button, FormControl, Grid, InputAdornment, InputLabel, MenuItem, Paper, Select, TextField, Typography } from \"@mui/material\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { useForm } from \"@tanstack/react-form\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { MeritData, Rating, ratings, ratingsLabels } from \"shared/models/store/current\";\nimport { addProjectedIncomeMeritPct, store } from \"shared/store\";\nimport { findSameYear } from \"shared/utility/find-same-year\";\nimport { z } from \"zod\";\nimport { createMeritColumnConfig } from \"./column-config\";\n\nconst disabledStyle = {\n  color: \"grey\",\n};\n\nconst meritData = z.object({\n  date: z.string(),\n  meritIncreasePct: z.string().refine((x) => !Number.isNaN(Number(x))),\n  meritBonusPct: z.string().refine((x) => !Number.isNaN(Number(x))),\n  equityPct: z.string().refine((x) => !Number.isNaN(Number(x))),\n  rating: z.nativeEnum(ratings),\n  enabled: z.boolean(),\n});\ntype MeritFormData = z.infer<typeof meritData>;\n\nconst MeritEntry = () => {\n  const merit = useStore(store, (state) => state.projectedIncome.timeSeries.meritPct);\n  const defaultDate = merit\n    .map((x) => DateTime.fromISO(x.date))\n    .reduce((acc, curr) => (curr > acc ? curr : acc), DateTime.fromObject({ year: 0 }))\n    .plus({ year: 1 })\n    .toISO();\n\n  const form = useForm({\n    defaultValues: {\n      date: defaultDate,\n      meritIncreasePct: \"0\",\n      meritBonusPct: \"0\",\n      equityPct: \"0\",\n      enabled: true,\n    } as MeritFormData,\n    validators: {\n      onSubmit: ({ value }) => {\n        const year = DateTime.fromISO(value.date).year;\n        const errors: Record<string, string> = {};\n        if (findSameYear(year, merit)) {\n          errors.date = \"Duplicate year\";\n        }\n\n        const result = meritData.safeParse(value);\n        result.error?.errors.forEach((x) => {\n          errors[x.path.toString()] = x.message;\n        });\n\n        return { fields: errors };\n      },\n    },\n    onSubmit: async ({ value }) => {\n      const { date, meritIncreasePct, meritBonusPct, equityPct, rating, enabled } = value;\n      addProjectedIncomeMeritPct({\n        date,\n        meritIncreasePct: +meritIncreasePct / 100,\n        meritBonusPct: +meritBonusPct / 100,\n        equityPct: +equityPct / 100,\n        rating,\n        enabled,\n      } as MeritData);\n    },\n  });\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" height=\"100%\">\n      <form>\n        <Grid container spacing={2} flex=\"0 1 auto\">\n          <Grid size={6}>\n            <form.Field name=\"date\">\n              {(field) => {\n                return (\n                  <DatePicker\n                    sx={{\n                      width: \"100%\",\n                    }}\n                    format={\"yyyy\"}\n                    views={[\"year\"]}\n                    label={\"Year\"}\n                    value={DateTime.fromISO(field.state.value)}\n                    onChange={(value) => {\n                      value && field.handleChange(value.toISO()!);\n                    }}\n                    slotProps={{\n                      textField: {\n                        helperText: field.state.meta.errors.join(\", \"),\n                        error: field.state.meta.errors.length > 0,\n                      },\n                    }}\n                  />\n                );\n              }}\n            </form.Field>\n          </Grid>\n          <Grid size={6}>\n            <form.Field name=\"rating\">\n              {(field) => {\n                return (\n                  <FormControl fullWidth>\n                    <InputLabel id=\"rating-select-label\">Rating</InputLabel>\n                    <Select\n                      labelId=\"rating-select-label\"\n                      fullWidth\n                      value={field.state.value || \"\"}\n                      onChange={(e) => field.handleChange(e.target.value as Rating)}\n                      error={field.state.meta.errors.length > 0}\n                      label=\"Rating\"\n                    >\n                      <MenuItem value=\"\">\n                        <em>None</em>\n                      </MenuItem>\n                      {Object.values(ratings).map((value) => (\n                        <MenuItem key={value} value={value}>\n                          {ratingsLabels[value as keyof typeof ratingsLabels]}\n                        </MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                );\n              }}\n            </form.Field>\n          </Grid>\n          <Grid size={4}>\n            <form.Field name=\"meritIncreasePct\">\n              {(field) => (\n                <TextField\n                  label=\"Merit Increase\"\n                  value={field.state.value}\n                  placeholder=\"0\"\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  error={field.state.meta.errors.length > 0}\n                  helperText={field.state.meta.errors.join(\", \")}\n                  slotProps={{\n                    input: {\n                      startAdornment: <InputAdornment position=\"start\">%</InputAdornment>,\n                    },\n                  }}\n                />\n              )}\n            </form.Field>\n          </Grid>\n          <Grid size={4}>\n            <form.Field name=\"meritBonusPct\">\n              {(field) => (\n                <TextField\n                  label=\"Merit Bonus\"\n                  value={field.state.value}\n                  placeholder=\"0\"\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  error={field.state.meta.errors.length > 0}\n                  helperText={field.state.meta.errors.join(\", \")}\n                  slotProps={{\n                    input: {\n                      startAdornment: <InputAdornment position=\"start\">%</InputAdornment>,\n                    },\n                  }}\n                />\n              )}\n            </form.Field>\n          </Grid>\n          <Grid size={4}>\n            <form.Field name=\"equityPct\">\n              {(field) => (\n                <TextField\n                  label=\"Equity\"\n                  value={field.state.value}\n                  placeholder=\"0\"\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  error={field.state.meta.errors.length > 0}\n                  helperText={field.state.meta.errors.join(\", \")}\n                  slotProps={{\n                    input: {\n                      startAdornment: <InputAdornment position=\"start\">%</InputAdornment>,\n                    },\n                  }}\n                />\n              )}\n            </form.Field>\n          </Grid>\n\n          <form.Subscribe selector={(state) => [state.canSubmit, state.isSubmitting]}>\n            {([canSubmit, isSubmitting]) => (\n              <>\n                <Button\n                  fullWidth\n                  type=\"submit\"\n                  disabled={!canSubmit}\n                  onClick={(e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    form.handleSubmit();\n                  }}\n                >\n                  {isSubmitting ? \"...\" : \"Submit\"}\n                </Button>\n              </>\n            )}\n          </form.Subscribe>\n        </Grid>\n      </form>\n\n      <Box sx={{ paddingTop: 2, flex: \"1 1 auto\" }}>\n        <AgGrid\n          getRowStyle={(x) => (!x.data.enabled ? disabledStyle : undefined)}\n          rowData={merit}\n          columnDefs={createMeritColumnConfig()}\n          id=\"merit-history\"\n          stopEditingWhenCellsLoseFocus\n        />\n      </Box>\n    </Box>\n  );\n};\n\ninterface MeritLayoutProps {\n  title: string;\n  defaultDate: DateTime;\n}\n\nexport const MeritEntryLayout = (props: MeritLayoutProps) => {\n  const { title } = props;\n  return (\n    <Paper sx={{ padding: 2, height: \"100%\", width: 850, flexShrink: 0 }}>\n      <Box display=\"flex\" flexDirection=\"column\" height=\"100%\">\n        <Box flex=\"0 1 auto\" marginBottom={4} display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n          <Typography variant=\"h5\">{title} (%)</Typography>\n        </Box>\n        <Box flex=\"1 1 auto\">\n          <MeritEntry />\n        </Box>\n      </Box>\n    </Paper>\n  );\n};\n","import { CircularProgress, Tooltip } from \"@mui/material\";\nimport { Box, Stack } from \"@mui/system\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useState } from \"react\";\nimport { Card } from \"shared/components/card\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { ClusterValue, ClusterValues } from \"shared/components/formatters/cluster-value\";\nimport { CountDown } from \"shared/components/formatters/countdown\";\nimport { Value } from \"shared/components/formatters/value\";\nimport { useClusters } from \"shared/hooks/use-clusters\";\nimport { useDateRanges, useDates } from \"shared/hooks/use-dates\";\nimport { IncomePerPeriod } from \"shared/models/income-per-period\";\nimport { PaymentTypes } from \"shared/models/payment-periods\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\nimport { ChunkByEquality } from \"shared/utility/chunk-by-equality\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { monthDay } from \"shared/utility/format-date\";\nimport { DataEntryLayout } from \"./data-entry/data-entry\";\nimport { IncomeChart } from \"./income-chart\";\nimport { IncomePerPeriodTooltip } from \"./income-per-period\";\nimport { MeritEntryLayout } from \"./merit-entry\";\n\nconst usePayments = (year: number) => {\n  const dateRanges = useDateRanges(year);\n  const clusters = useClusters(year);\n\n  if (clusters.pay.length !== 1) {\n    return {};\n  }\n  const firstScenario = clusters.scenarios?.at(0);\n  const payPeriods =\n    firstScenario?.payments\n      .filter((x) => x.type === PaymentTypes.regular)\n      .filter((x) => {\n        const payedOn = DateTime.fromISO(x.payedOn);\n        return payedOn >= dateRanges.base.start && payedOn <= dateRanges.base.end;\n      }) ?? [];\n\n  const paychecks = ChunkByEquality(payPeriods, (x) => x.value).map((curr) => {\n    return {\n      start: DateTime.fromISO(curr[0].payedOn),\n      end: DateTime.fromISO(curr[curr.length - 1].payedOn),\n      value: curr.reduce((acc, curr) => acc + curr.value, 0),\n      perPayday: curr[0].value,\n      count: curr.length,\n      type: curr[0].type,\n    } as IncomePerPeriod;\n  });\n\n  return { aprToApr: firstScenario?.aprToApr, basePay: firstScenario?.basePay, paychecks };\n};\n\nexport const ProjectedIncome = () => {\n  const [selectedYear, setSelectedYear] = useState(getLocalDateTime().year);\n  const { aprToApr, basePay, paychecks } = usePayments(selectedYear);\n  const clusters = useClusters(selectedYear);\n\n  const dates = useDates(selectedYear);\n  const scenarios = useStore(scenarioStore);\n\n  return (\n    <Box display=\"flex\" flexDirection=\"row\" height=\"100%\" width={\"100%\"}>\n      <Box flex=\"0 1 auto\" maxWidth={500} height=\"100%\">\n        <Stack gap={2} direction={\"column\"} overflow={\"auto\"} height=\"100%\" paddingRight={1} minWidth={500}>\n          <Card\n            title={\n              <Box display=\"flex\" alignItems={\"center\"} gap={2} width={\"100%\"}>\n                <span>Income</span>\n                <CountDown dateTime={dates.companyBonus} variant=\"date\" dateFormat={monthDay} />\n                <IncomeChart />\n                <Box sx={{ display: \"flex\", marginLeft: \"auto\", alignItems: \"center\", flexWrap: \"wrap\" }}>\n                  {scenarios.loading && <CircularProgress style={{ width: 20, height: 20 }} />}\n                </Box>\n                <DatePicker\n                  sx={{ width: 90, marginRight: 2 }}\n                  label={\"year\"}\n                  views={[\"year\"]}\n                  minDate={getLocalDateTime().set({ year: scenarios.minYear })}\n                  maxDate={getLocalDateTime().set({ year: scenarios.maxYear })}\n                  defaultValue={getLocalDateTime()}\n                  slotProps={{\n                    textField: {\n                      variant: \"standard\",\n                      label: \"\",\n                    },\n                  }}\n                  onChange={(value) => {\n                    setSelectedYear(value?.year ?? getLocalDateTime().year);\n                  }}\n                />\n              </Box>\n            }\n          >\n            <ClusterValues clusters={clusters.totalPay} eventDate={dates.companyBonus} />\n          </Card>\n          <Card\n            title={\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\n                <span>Paycheck</span>\n                <CountDown dateTime={dates.meritIncrease} variant=\"date\" dateFormat={monthDay} />\n              </Box>\n            }\n          >\n            {!basePay && <ClusterValues clusters={clusters.pay} eventDate={dates.meritIncrease} compact={false} />}\n            {basePay && (\n              <>\n                <ClusterValue {...clusters.pay[0]} title={\"Paycheck\"} compact={false} />\n                <Tooltip\n                  placement=\"bottom\"\n                  slotProps={{\n                    tooltip: {\n                      sx: {\n                        maxWidth: \"none\",\n                      },\n                    },\n                  }}\n                  title={paychecks && <IncomePerPeriodTooltip incomePerPeriod={paychecks} />}\n                >\n                  <div>\n                    <Value title={\"Base Pay\"}>\n                      <Cash disableTooltip value={basePay} />\n                    </Value>\n                  </div>\n                </Tooltip>\n                <Value title={\"APR to APR\"}>\n                  <Cash value={aprToApr} />\n                </Value>\n              </>\n            )}\n          </Card>\n          <Card\n            title={\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\n                <span>Merit Increase</span>\n                <CountDown dateTime={dates.meritIncrease} variant=\"date\" dateFormat={monthDay} />\n              </Box>\n            }\n          >\n            <ClusterValues clusters={clusters.meritIncrease} eventDate={dates.meritIncrease} />\n          </Card>\n\n          <Card\n            title={\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\n                <span>Merit Bonus</span>\n                <CountDown dateTime={dates.meritBonus} variant=\"date\" dateFormat={monthDay} />\n              </Box>\n            }\n          >\n            <ClusterValues clusters={clusters.meritBonus} eventDate={dates.meritBonus} />\n          </Card>\n          <Card\n            title={\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\n                <span>Company Bonus</span>\n                <CountDown dateTime={dates.companyBonus} variant=\"date\" dateFormat={monthDay} />\n              </Box>\n            }\n          >\n            <ClusterValues clusters={clusters.companyBonus} eventDate={dates.companyBonus} />\n          </Card>\n          <Card\n            title={\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\n                <span>Retirement Bonus</span>\n                <CountDown dateTime={dates.retirementBonus} variant=\"date\" dateFormat={monthDay} />\n              </Box>\n            }\n          >\n            <ClusterValues clusters={clusters.retirementBonus} eventDate={dates.retirementBonus} />\n          </Card>\n        </Stack>\n      </Box>\n      <Box flex=\"1 1 auto\" overflow={\"auto\"} paddingBottom={2} paddingLeft={1}>\n        <Box display={\"flex\"} height={\"100%\"} width={\"100%\"} gap={2}>\n          <DataEntryLayout\n            dateVariant=\"year\"\n            accountName=\"paycheck\"\n            variant=\"cash\"\n            defaultDate={DateTime.fromObject({\n              day: 1,\n              month: 4,\n              year: selectedYear,\n            })}\n            title=\"Income Per Paycheck\"\n          />\n          {/*<Layout\n            title=\"Merit Increase\"\n            accountName=\"meritIncreasePct\"\n            variant=\"percent\"\n            defaultDate={dates.meritIncrease}\n            dateVariant=\"year\"\n          />\n          <Layout title=\"Equity Increase\" accountName=\"equityPct\" variant=\"percent\" defaultDate={dates.meritIncrease} dateVariant=\"year\" />\n          <Layout title=\"Merit Bonus\" accountName=\"meritBonusPct\" variant=\"percent\" defaultDate={dates.meritBonus} dateVariant=\"year\" />*/}\n          <MeritEntryLayout title={\"Merit Factors\"} defaultDate={dates.meritBonus} />\n          <DataEntryLayout title=\"Merit Bonus\" accountName=\"meritBonus\" variant=\"cash\" defaultDate={dates.meritBonus} />\n          <DataEntryLayout\n            title=\"Company Bonus Factor\"\n            accountName=\"companyBonusPct\"\n            defaultDate={dates.companyBonus}\n            variant=\"percent\"\n            dateVariant=\"year\"\n          />\n          <DataEntryLayout title=\"Company Bonus\" accountName=\"companyBonus\" defaultDate={dates.companyBonus} variant=\"cash\" />\n          <DataEntryLayout title=\"Retirement Bonus\" accountName=\"retirementBonus\" defaultDate={dates.retirementBonus} variant=\"cash\" />\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n","import { DateTime } from \"luxon\";\nimport { getLocalDateTime } from \"./current-date\";\n\n/**\n * Checks if a given date is in the future relative to the current local date\n *\n * @param {DateTime} date - The date to check\n * @returns {boolean} True if the date is in the future, false otherwise\n * @example\n * const futureDate = DateTime.now().plus({ days: 1 });\n * isFuture(futureDate); // returns true\n *\n * const pastDate = DateTime.now().minus({ days: 1 });\n * isFuture(pastDate); // returns false\n */\nexport const isFuture = (date: DateTime) => {\n  return getLocalDateTime() < date;\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { Mortgage } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\nimport { useLocalDateTime } from \"shared/utility/current-date\";\nimport { calcLoanBalance } from \"shared/utility/mortgage-calc\";\n\n/**\n * Hook that calculates the change in mortgage equity for the year\n * Considers all mortgage accounts and calculates expected principal payments\n *\n * @param {number} year - The year to calculate mortgage equity changes for\n * @returns {number} Total projected change in mortgage equity (principal payments)\n */\nexport const useFutureMortgageEquity = (year: number) => {\n  const accounts = useStore(store, (x) => x.wealth);\n  const mortgages = Object.values(accounts).filter((x) => x.type === \"mortgage\") as Mortgage[];\n  const localDate = useLocalDateTime();\n  const januaryFirstSelectedYear = DateTime.fromObject({ month: 1, day: 1, year });\n\n  if (year < localDate.year) {\n    return 0;\n  }\n\n  return mortgages\n    .map((x) => {\n      if (!x.loan) {\n        return 0;\n      }\n\n      const startDate = localDate < januaryFirstSelectedYear ? januaryFirstSelectedYear : localDate.endOf(\"month\");\n      const endDate = startDate.endOf(\"year\");\n\n      return calcLoanBalance(startDate, x.loan) - calcLoanBalance(endDate, x.loan);\n    })\n    .reduce((acc, curr) => acc + curr, 0);\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { PAYMENTS_PER_YEAR } from \"shared/constants\";\nimport { store } from \"shared/store\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\n\n/**\n * Hook that calculates future retirement contributions based on current contribution rate and remaining payments\n *\n * @param {number} year - The year to calculate retirement contributions for\n * @returns {Object} Object containing:\n * - remaining: Total remaining retirement contributions for the year\n * - perPaycheck: Retirement contribution amount per paycheck\n */\nexport const useFutureRetirementContributions = (year: number) => {\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios[year]);\n  const retirementContribution = useStore(store, (x) => x.projectedWealth.retirementContributionPaycheck);\n  const remainingRegularPayments = scenarios?.at(0)?.remainingRegularPayments ?? 0;\n\n  return {\n    remaining: Math.min(remainingRegularPayments, PAYMENTS_PER_YEAR) * retirementContribution,\n    perPaycheck: retirementContribution,\n  };\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { PAYMENTS_PER_YEAR } from \"shared/constants\";\nimport { store } from \"shared/store\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\n\n/**\n * Hook that calculates future savings based on current savings rate and remaining payments\n *\n * @param {number} year - The year to calculate future savings for\n * @returns {Object} Object containing:\n * - remaining: Total remaining savings for the year\n * - perPaycheck: Savings amount per paycheck\n */\nexport const useFutureSavings = (year: number) => {\n  const savingsPerPaycheck = useStore(store, (x) => x.projectedWealth.savingsPerPaycheck);\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios[year]);\n  const remainingRegularPayments = scenarios?.at(0)?.remainingRegularPayments ?? 0;\n\n  return {\n    remaining: savingsPerPaycheck * Math.min(remainingRegularPayments, PAYMENTS_PER_YEAR),\n    perPaycheck: savingsPerPaycheck,\n  };\n};\n","import { DateTime } from \"luxon\";\nimport { Scenario } from \"shared/models/scenario\";\nimport { isFuture } from \"./is-future\";\n\n/**\n * Calculates the remaining tax amount based on a threshold and tax rate\n * Used for calculating taxes like Social Security or Medicare that have income thresholds\n *\n * @param {number} taxRate - The tax rate to apply (as a decimal)\n * @param {number} threshold - The income threshold above which the tax applies\n * @param {Scenario} scenario - The scenario containing payment information\n * @returns {number} The remaining tax amount to be paid\n */\nexport const getThresholdTaxRemaining = (taxRate: number, threshold: number, scenario: Scenario) => {\n  const remaining = scenario.payments\n    .slice(scenario.currentPaymentIdx)\n    .filter((x) => x.cumulative >= threshold && isFuture(DateTime.fromISO(x.payedOn)))\n    .reduce((acc, curr) => {\n      return acc + Math.min(curr.value, curr.cumulative - threshold) * taxRate;\n    }, 0);\n  return remaining;\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { store } from \"shared/store\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\nimport { getThresholdTaxRemaining } from \"shared/utility/get-threshold-tax-remaining\";\n\ninterface ThresholdTaxData {\n  total: number;\n  firstOccurrence: DateTime;\n  remaining: number;\n  perPaycheck: number;\n}\n\nexport type ThresholdTax = Partial<Record<\"min\" | \"max\", ThresholdTaxData>>;\n\n/**\n * Hook that calculates tax data based on a given threshold and tax rate\n *\n * @param {number} year - The year to calculate taxes for\n * @param {number} threshold - The income threshold where the tax applies\n * @param {number} taxRate - The tax rate to apply\n * @returns {ThresholdTax} Object containing minimum and maximum tax scenarios\n */\nconst useThresholdTax = (year: number, threshold: number, taxRate: number): ThresholdTax => {\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios[year]);\n\n  const taxesOwedPerScenario = (scenarios ?? [])\n    .map((x) => {\n      const totalTaxable = x.payments.at(-1)?.cumulative ?? 0;\n      const taxableAmountOverThreshold = Math.max(0, totalTaxable - threshold);\n      const total = taxRate * taxableAmountOverThreshold;\n      const firstOccurrence = x.payments.find((x) => x.cumulative > threshold)?.payedOn;\n      const remaining = getThresholdTaxRemaining(taxRate, threshold, x);\n      const lastPaycheck = x.payments.at(-1)?.value ?? 0;\n      const perPaycheck = total && taxRate * lastPaycheck;\n\n      return {\n        total,\n        firstOccurrence: firstOccurrence ? DateTime.fromISO(firstOccurrence) : undefined,\n        remaining,\n        perPaycheck,\n      };\n    })\n    .filter((x) => x.firstOccurrence) as ThresholdTaxData[];\n\n  return taxesOwedPerScenario.reduce(\n    (acc, curr, i) => {\n      if (i == 0) {\n        return { min: curr, max: curr };\n      } else {\n        if (curr.total < acc.min!.total) {\n          acc.min = curr;\n        }\n        if (curr.total > acc.max!.total) {\n          acc.max = curr;\n        }\n      }\n      return acc;\n    },\n    {} as Partial<Record<\"min\" | \"max\", ThresholdTaxData>>\n  );\n};\n\n/**\n * Hook that calculates social security tax data\n *\n * @param {number} year - The year to calculate social security tax for\n * @returns {ThresholdTax} Object containing minimum and maximum social security tax scenarios\n */\nexport const useFutureSocialSecurity = (year: number): ThresholdTax => {\n  const config = useStore(store, (x) => x.projectedWealth);\n  return useThresholdTax(year, config.socialSecurityLimit, config.socialSecurityTaxRate);\n};\n\n/**\n * Hook that calculates Medicare supplemental tax data\n *\n * @param {number} year - The year to calculate Medicare tax for\n * @returns {ThresholdTax} Object containing minimum and maximum Medicare tax scenarios\n */\nexport const useFutureMedicareTax = (year: number): ThresholdTax => {\n  const config = useStore(store, (x) => x.projectedWealth);\n  const taxes = useThresholdTax(year, config.medicareSupplementalTaxThreshold, -1 * config.medicareSupplementalTaxRate);\n\n  return {\n    min: taxes.max,\n    max: taxes.min,\n  };\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { useDates } from \"shared/hooks/use-dates\";\nimport { store } from \"shared/store\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\nimport { clusterTitle, getClusterCount } from \"shared/utility/cluster-helpers\";\nimport { getThresholdTaxRemaining } from \"shared/utility/get-threshold-tax-remaining\";\nimport { isFuture } from \"shared/utility/is-future\";\nimport { ckmeans, median, sumSimple } from \"simple-statistics\";\nimport { useFutureMortgageEquity } from \"./use-future-mortgage-equity\";\nimport { useFutureRetirementContributions } from \"./use-future-retirement-contributions\";\nimport { useFutureSavings } from \"./use-future-savings\";\n\nexport const useFutureTotals = (year: number, options: { excludeHomeEquity: boolean } = { excludeHomeEquity: false }) => {\n  const { excludeHomeEquity } = options;\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios[year]);\n  const bonusTakeHomeFactor = useStore(store, (x) => 1 - x.projectedWealth.bonusWithholdingsRate);\n  const savings = useFutureSavings(year);\n  const homeEquity = useFutureMortgageEquity(year);\n  const retirement = useFutureRetirementContributions(year);\n  const config = useStore(store, (x) => x.projectedWealth);\n\n  const dates = useDates(year);\n\n  const rawClusters = (() => {\n    const totals = scenarios?.map((x) => {\n      const futureEvents = [\n        isFuture(dates.meritBonus) && x.meritBonus * bonusTakeHomeFactor,\n        isFuture(dates.companyBonus) && x.companyBonus * bonusTakeHomeFactor,\n        isFuture(dates.retirementBonus) && x.retirementBonus,\n        getThresholdTaxRemaining(config.socialSecurityTaxRate, config.socialSecurityLimit, x),\n        getThresholdTaxRemaining(-1 * config.medicareSupplementalTaxRate, config.medicareSupplementalTaxThreshold, x),\n        savings.remaining,\n        retirement.remaining,\n        excludeHomeEquity ? 0 : homeEquity,\n      ].filter((x) => x) as number[];\n      return sumSimple(futureEvents);\n    });\n\n    if (!totals || totals.length === 0) {\n      return [[savings.remaining + retirement.remaining]];\n    }\n\n    const clusters = ckmeans(\n      totals,\n      getClusterCount(totals, (x) => x)\n    );\n    return clusters;\n  })();\n\n  const numValues = rawClusters.flat().length;\n  return rawClusters.map((x, i, arr) => {\n    return {\n      min: Math.min(...x),\n      max: Math.max(...x),\n      median: median(x),\n      probability: x.length / numValues,\n      title: clusterTitle(i, arr.length),\n    };\n  });\n};\n","import { Box, Stack } from \"@mui/system\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { Card } from \"shared/components/card\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { ClusterValues } from \"shared/components/formatters/cluster-value\";\nimport { CountDown } from \"shared/components/formatters/countdown\";\nimport { Value } from \"shared/components/formatters/value\";\nimport { Cluster, useClusters } from \"shared/hooks/use-clusters\";\nimport { useDates } from \"shared/hooks/use-dates\";\nimport { store } from \"shared/store\";\nimport { scaleClusters } from \"shared/utility/cluster-helpers\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { monthDay } from \"shared/utility/format-date\";\nimport { isFuture } from \"shared/utility/is-future\";\nimport { useFutureMortgageEquity } from \"./hooks/use-future-mortgage-equity\";\nimport { useFutureRetirementContributions } from \"./hooks/use-future-retirement-contributions\";\nimport { useFutureSavings } from \"./hooks/use-future-savings\";\nimport { ThresholdTax, useFutureMedicareTax, useFutureSocialSecurity } from \"./hooks/use-future-social-security\";\nimport { useFutureTotals } from \"./hooks/use-future-totals\";\n\nexport const FutureEvents = (props: { year: number; onChange: (year: number) => void }) => {\n  const { year, onChange } = props;\n  const dates = useDates(year);\n\n  const savings = useFutureSavings(year);\n  const retirement = useFutureRetirementContributions(year);\n  const medicare = useFutureMedicareTax(year);\n  const socialSecurity = useFutureSocialSecurity(year);\n  const clusters = useClusters(year);\n  const bonusTakeHomeFactor = useStore(store, (x) => 1 - x.projectedWealth.bonusWithholdingsRate);\n  const total = useFutureTotals(year);\n  const equity = useFutureMortgageEquity(year);\n\n  return (\n    <>\n      <Stack spacing={2} width={550} paddingRight={1}>\n        <Card\n          title={\n            <>\n              <span>Remaining Projected Wealth</span>\n              <DatePicker\n                sx={{ width: 90, marginRight: 2, marginLeft: \"auto\" }}\n                label={\"year\"}\n                views={[\"year\"]}\n                minDate={getLocalDateTime()}\n                maxDate={getLocalDateTime().plus({ years: 1 })}\n                value={getLocalDateTime().set({ year })}\n                slotProps={{\n                  textField: {\n                    variant: \"standard\",\n                    label: \"\",\n                  },\n                }}\n                onChange={(data) => {\n                  data?.year && onChange(data?.year);\n                }}\n              />\n            </>\n          }\n        >\n          <ClusterValues clusters={total} eventDate={dates.companyBonus} />\n        </Card>\n        {isFuture(dates.meritBonus) && clusters.meritBonus.length > 0 && (\n          <ClusterCard title=\"Merit Bonus\" date={dates.meritBonus} cluster={scaleClusters(clusters.meritBonus, bonusTakeHomeFactor)} />\n        )}\n        {isFuture(dates.companyBonus) && clusters.companyBonus.length > 0 && (\n          <ClusterCard\n            title=\"Company Bonus\"\n            date={dates.companyBonus}\n            cluster={scaleClusters(clusters.companyBonus, bonusTakeHomeFactor)}\n          />\n        )}\n        {isFuture(dates.retirementBonus) && clusters.retirementBonus.length > 0 && (\n          <ClusterCard title=\"Retirement Bonus\" date={dates.retirementBonus} cluster={clusters.retirementBonus} />\n        )}\n        {!!socialSecurity.min && <ThresholdTaxCard thresholdTax={socialSecurity} title={\"Social Security Limit\"} />}\n        {!!medicare.min && <ThresholdTaxCard thresholdTax={medicare} title={\"Medicare Supplemental Tax\"} />}\n\n        {(!!savings.perPaycheck || !!retirement.perPaycheck || !!equity) && (\n          <Card title={\"Savings & Retirement\"}>\n            {!!savings.perPaycheck && (\n              <Value title={\"savings\"} secondaryValue={<Cash tooltip=\"Per Month\" value={savings.perPaycheck} />}>\n                <Cash tooltip=\"Total Remaining\" value={savings.remaining} />\n              </Value>\n            )}\n            {!!retirement.perPaycheck && (\n              <Value title={\"retirement\"} secondaryValue={<Cash tooltip=\"Per Paycheck\" value={retirement.perPaycheck} />}>\n                <Cash tooltip=\"Total Remaining\" value={retirement.remaining} />\n              </Value>\n            )}\n            {!!equity && (\n              <Value title={\"Home Equity\"}>\n                <Cash tooltip=\"Total Remaining\" value={equity} />\n              </Value>\n            )}\n          </Card>\n        )}\n      </Stack>\n    </>\n  );\n};\n\nconst ThresholdTaxCard = (props: { thresholdTax: ThresholdTax; title: string }) => {\n  const { thresholdTax, title } = props;\n  return (\n    <Card\n      title={\n        <Box display={\"flex\"} width={\"max-content\"} gap={1} marginRight={2}>\n          <span>{title}</span>\n\n          <CountDown dateFormat={monthDay} variant=\"date\" dateTime={thresholdTax.max?.firstOccurrence} />\n          {thresholdTax.min && thresholdTax.max && !thresholdTax.min.firstOccurrence.equals(thresholdTax.max.firstOccurrence) && (\n            <>\n              <span>or</span>\n              <CountDown dateFormat={monthDay} variant=\"date\" dateTime={thresholdTax.min.firstOccurrence} />\n            </>\n          )}\n        </Box>\n      }\n    >\n      {thresholdTax.max && thresholdTax.max.total === thresholdTax.min?.total && (\n        <Value title={\"Remaining\"}>\n          <Cash value={thresholdTax.max?.remaining} compact={false} />\n        </Value>\n      )}\n      {thresholdTax.max && thresholdTax.max.total !== thresholdTax.min?.total && (\n        <>\n          <Value title={thresholdTax.max.firstOccurrence > getLocalDateTime() ? \"Early\" : \"Low\"}>\n            <Cash value={thresholdTax.max?.remaining} compact={false} />\n          </Value>\n          <Value title={thresholdTax.max.firstOccurrence > getLocalDateTime() ? \"Late\" : \"High\"}>\n            <Cash value={thresholdTax.min?.total} compact={false} />\n          </Value>\n        </>\n      )}\n      <Value title={\"Per Paycheck\"}>\n        <Cash value={thresholdTax.max?.perPaycheck} compact={false} />\n      </Value>\n    </Card>\n  );\n};\n\nconst ClusterCard = (props: { date: DateTime; cluster?: Cluster[]; title: string }) => {\n  const { date, cluster, title } = props;\n  return (\n    <Card\n      title={\n        <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\n          <span>{title}</span>\n          <CountDown variant=\"date\" dateFormat={monthDay} dateTime={date} />\n        </Box>\n      }\n    >\n      <ClusterValues clusters={cluster} eventDate={date} />\n    </Card>\n  );\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useEarliestAccountEntry } from \"shared/hooks/use-earliest-account-entry\";\nimport { store } from \"shared/store\";\nimport { findMostMostLikely } from \"shared/utility/cluster-helpers\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { findNearestIdxOnOrBefore, findNearestOnOrBefore } from \"shared/utility/find-nearest-on-or-before\";\nimport { calcEquity, calcLoanBalance } from \"shared/utility/mortgage-calc\";\nimport { useFutureTotals } from \"./use-future-totals\";\n\n/**\n * Interface representing wealth data for a specific point in time\n *\n * @interface TimeSeriesWealth\n * @property {Date} graphDate - JavaScript Date object for charting libraries\n * @property {DateTime} date - Luxon DateTime for calculations\n * @property {number} wealth - Total wealth value at this point\n * @property {number} [yoyCash] - Year-over-year change in cash value\n * @property {number} [yoyPct] - Year-over-year percentage change\n */\nexport interface TimeSeriesWealth {\n  graphDate: Date;\n  date: DateTime;\n  wealth: number;\n  yoyCash?: number;\n  yoyPct?: number;\n}\n\n/**\n * Hook that provides wealth values for future time periods\n *\n * @returns {Object} Object containing wealth projections for current and next year,\n * calculated without considering home equity\n */\nconst useFuturesWealth = () => {\n  const year = getLocalDateTime().year;\n  const totals = useFutureTotals(year, { excludeHomeEquity: true });\n  const totalsPlusOne = useFutureTotals(year + 1, { excludeHomeEquity: true });\n\n  return {\n    [year + 1]: findMostMostLikely(totals)?.median ?? 0,\n    [year + 2]: (findMostMostLikely(totals)?.median ?? 0) + (findMostMostLikely(totalsPlusOne)?.median ?? 0),\n  };\n};\n\n/**\n * Hook that provides time series wealth data for a given year\n *\n * @param {number} year - The year for which to calculate the time series wealth\n * @returns {TimeSeriesWealth[]} Array of time series wealth data\n */\nexport const useTimeSeriesWealth = (year: number) => {\n  const localDateTime = getLocalDateTime().startOf(\"day\");\n  const earliest = useEarliestAccountEntry();\n  const accounts = useStore(store, (x) => x.wealth);\n  const futuresWealth = useFuturesWealth();\n\n  if (!earliest.isValid) {\n    return [] as TimeSeriesWealth[];\n  }\n\n  const dates = new Array(year + 2 - earliest.year)\n    .fill(earliest.year)\n    .map((x, i) => DateTime.fromObject({ day: 1, month: 1, year: x + i }).startOf(\"day\"));\n\n  const futureBenchmarkIdx = findNearestIdxOnOrBefore(localDateTime, dates, (x) => x);\n\n  if (!dates.some((x) => x.equals(localDateTime))) {\n    dates.splice(futureBenchmarkIdx + 1, 0, localDateTime);\n  }\n\n  return dates\n    .map((date) => {\n      const accountsWealth = Object.values(accounts).map((x) => {\n        if (x.type === \"mortgage\" && x.loan) {\n          const houseValue = findNearestOnOrBefore(date, x.data, (x) => x.date);\n          const balance = calcLoanBalance(date, x.loan);\n          return calcEquity(x.loan.ownershipPct, houseValue?.value, balance, x.loan.principal);\n        } else if (x.type === \"account\") {\n          const entry = findNearestOnOrBefore(date, x.data, (x) => x.date);\n          return entry?.value ?? 0;\n        }\n        return 0;\n      });\n\n      const accountWealth = accountsWealth.reduce((acc, curr) => acc + curr, 0);\n      const futureWealth = futuresWealth[date.year] ?? 0;\n\n      return {\n        date,\n        graphDate: date.toJSDate(),\n        wealth: accountWealth + futureWealth,\n      };\n    })\n    .map((x, idx, arr) => {\n      if (x.date <= localDateTime || x.date.year === localDateTime.year + 2) {\n        const benchmarkWealth = arr[idx - 1]?.wealth;\n        if (!benchmarkWealth) {\n          return x;\n        }\n        return {\n          ...x,\n          yoyCash: x.wealth - benchmarkWealth,\n          yoyPct: x.wealth / benchmarkWealth - 1,\n        };\n      }\n\n      const benchmarkWealth = arr[futureBenchmarkIdx]?.wealth;\n      if (!benchmarkWealth) {\n        return x;\n      }\n      return {\n        ...x,\n        yoyCash: x.wealth - benchmarkWealth,\n        yoyPct: x.wealth / benchmarkWealth - 1,\n      };\n    }) as TimeSeriesWealth[];\n};\n","import { AgCartesianChartOptions, AgLineSeriesOptions } from \"ag-charts-community\";\nimport { AgCharts } from \"ag-charts-react\";\nimport { DateTime } from \"luxon\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { formatCashShort } from \"shared/utility/format-cash\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { TimeSeriesWealth, useTimeSeriesWealth } from \"./hooks/use-times-series-wealth\";\n\ninterface MarkerParams<T> {\n  fill: string;\n  fillOpacity: number;\n  highlighted: boolean;\n  seriesId: string;\n  size: number;\n  stroke: string;\n  strokeOpacity: number;\n  strokeWidth: number;\n  xKey: string;\n  yKey: string;\n  datum: T;\n}\n\nexport const WealthChart = (props: { titleYear: number }) => {\n  const dataYear = getLocalDateTime().year + 1;\n  const { titleYear } = props;\n  const data = useTimeSeriesWealth(dataYear);\n  const offsetIdx = getLocalDateTime().year - titleYear + 1;\n\n  const series = [\n    {\n      type: \"line\",\n      xKey: \"graphDate\",\n      yKey: \"wealth\",\n      yName: \"Wealth\",\n      tooltip: {\n        renderer: ({ datum, yKey, xKey }) => ({\n          heading: DateTime.fromJSDate(datum[xKey]).year.toString(),\n          data: [{ label: yKey, value: formatCashShort(datum[yKey]) }],\n        }),\n      },\n      marker: {\n        itemStyler: (params: MarkerParams<TimeSeriesWealth>) => {\n          if (params.datum.date.year === getLocalDateTime().plus({ years: 1 }).year) {\n            return {\n              fill: \"orange\",\n            };\n          } else if (params.datum.date.year === getLocalDateTime().plus({ years: 2 }).year) {\n            return {\n              fill: \"rgb(244, 67, 54)\",\n            };\n          } else if (params.datum.date.hasSame(getLocalDateTime(), \"day\")) {\n            return {\n              fill: \"lightgrey\",\n            };\n          }\n        },\n      },\n    },\n    {\n      type: \"line\",\n      xKey: \"graphDate\",\n      yKey: \"yoyCash\",\n      yName: \"YoY ($)\",\n      stroke: \"grey\",\n\n      tooltip: {\n        renderer: ({ datum, yKey, xKey }) => ({\n          heading: DateTime.fromJSDate(datum[xKey]).year.toString(),\n          data: [{ label: yKey, value: formatCashShort(datum[yKey]) }],\n        }),\n      },\n      marker: {\n        fill: \"grey\",\n        itemStyler: (params: MarkerParams<TimeSeriesWealth>) => {\n          if (params.datum.date.year === getLocalDateTime().plus({ years: 1 }).year) {\n            return {\n              fill: \"orange\",\n            };\n          } else if (params.datum.date.year === getLocalDateTime().plus({ years: 2 }).year) {\n            return {\n              fill: \"rgb(244, 67, 54)\",\n            };\n          } else if (params.datum.date.hasSame(getLocalDateTime(), \"day\")) {\n            return {\n              fill: \"lightgrey\",\n            };\n          }\n        },\n      },\n    },\n  ] as AgLineSeriesOptions[];\n\n  const options: AgCartesianChartOptions = {\n    theme: \"ag-default-dark\",\n    title: {\n      text: `${data[data.length - 1 - offsetIdx].date.toFormat(shortDate)} Projected wealth ${formatCashShort(\n        (data[data.length - 1 - offsetIdx]?.wealth ?? 0) as number\n      )}`,\n    },\n    data,\n    axes: [\n      {\n        type: \"time\",\n        position: \"bottom\",\n        label: {\n          format: \"%Y\",\n        },\n      },\n      {\n        type: \"number\",\n        position: \"left\",\n        nice: false,\n      },\n    ],\n    series,\n  };\n\n  return <AgCharts options={options} css={{ height: \"100%\", width: \"100%\" }} />;\n};\n","import QueryStatsIcon from \"@mui/icons-material/QueryStats\";\nimport TodayIcon from \"@mui/icons-material/Today\";\nimport UpdateIcon from \"@mui/icons-material/Update\";\nimport { Tooltip } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { ColDef, ICellRendererParams } from \"ag-grid-community\";\nimport { DateTime } from \"luxon\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { Percent } from \"shared/components/formatters/percent\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { TimeSeriesWealth } from \"../hooks/use-times-series-wealth\";\n\nexport const columnConfig: ColDef<TimeSeriesWealth>[] = [\n  {\n    headerName: \"Date\",\n    colId: \"date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data?.date,\n    cellRenderer: (x: ICellRendererParams<unknown, DateTime>) => {\n      const localDateTime = getLocalDateTime().startOf(\"day\");\n      const systemYear = localDateTime.year;\n      return (\n        <Stack direction={\"row\"} alignItems={\"center\"}>\n          {x.valueFormatted}&nbsp;\n          {x.value && x.value.equals(localDateTime) && (\n            <Tooltip title=\"Today\">\n              <TodayIcon htmlColor=\"orange\" />\n            </Tooltip>\n          )}\n          {x.value &&\n            x.value.equals(\n              DateTime.fromObject({\n                day: 1,\n                month: 1,\n                year: systemYear,\n              })\n            ) && (\n              <Tooltip\n                title={`Benchmark for ${localDateTime.toFormat(shortDate)} & ${localDateTime.set({ day: 1, month: 1 }).plus({ years: 1 }).toFormat(shortDate)} `}\n              >\n                <QueryStatsIcon htmlColor=\"orange\" />\n              </Tooltip>\n            )}\n          {x.value &&\n            x.value.equals(\n              DateTime.fromObject({\n                day: 1,\n                month: 1,\n                year: systemYear + 1,\n              })\n            ) && (\n              <Tooltip title={`Benchmark for ${localDateTime.set({ day: 1, month: 1 }).plus({ years: 2 }).toFormat(shortDate)} `}>\n                <QueryStatsIcon htmlColor=\"rgb(244, 67, 54)\" />\n              </Tooltip>\n            )}\n          {x.value && x.value > localDateTime && (\n            <Tooltip title=\"Future Event\">\n              <UpdateIcon htmlColor={x.value.year - systemYear > 1 ? \"rgb(244, 67, 54)\" : \"orange\"} />\n            </Tooltip>\n          )}\n        </Stack>\n      );\n    },\n  },\n  {\n    type: \"numericColumn\",\n    headerName: \"Wealth\",\n    colId: \"wealth\",\n    valueGetter: (x) => x.data?.wealth,\n    cellRenderer: (x: ICellRendererParams<unknown, number>) => {\n      return x.value && <Cash value={x.value} placement=\"left\" />;\n    },\n  },\n  {\n    colId: \"yoy-cash\",\n    type: \"numericColumn\",\n    headerName: \"YoY ($)\",\n    valueGetter: (x) => x.data?.yoyCash,\n    cellRenderer: (x: ICellRendererParams<unknown, number>) => {\n      return x.value && <Cash value={x.value} placement=\"left\" />;\n    },\n  },\n  {\n    colId: \"yoy-percent\",\n    type: \"numericColumn\",\n    headerName: \"YoY (%)\",\n    valueGetter: (x) => x.data?.yoyPct,\n    cellRenderer: (x: ICellRendererParams<unknown, number>) => {\n      return x.value && <Percent value={x.value} />;\n    },\n    minWidth: 60,\n  },\n];\n","import { Box } from \"@mui/system\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { useTimeSeriesWealth } from \"../hooks/use-times-series-wealth\";\nimport { columnConfig } from \"./colum-config\";\n\nexport const WealthTable = () => {\n  const dataYear = getLocalDateTime().year + 1;\n  const data = useTimeSeriesWealth(dataYear);\n\n  return (\n    <Box height={\"100%\"} width={\"100%\"}>\n      <AgGrid\n        id=\"time-series-wealth\"\n        rowData={data}\n        columnDefs={columnConfig}\n        autoSizeStrategy={{ type: \"fitGridWidth\" }}\n        onRowDataUpdated={(e) => e.api.sizeColumnsToFit()}\n      />\n    </Box>\n  );\n};\n","import { Box, Stack } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { FutureEvents } from \"./future-events\";\nimport { WealthChart } from \"./wealth-chart\";\nimport { WealthTable } from \"./wealth-table\";\n\nexport const ProjectedWealth = () => {\n  const localTime = getLocalDateTime();\n  const [year, setYear] = useState(localTime.year);\n\n  return (\n    <Box display=\"flex\" flexDirection=\"row\" height=\"100%\" width={\"100%\"} gap={1}>\n      <Box flex=\"0 1 auto\" height={\"100%\"} overflow={\"auto\"}>\n        <FutureEvents onChange={setYear} year={year} />\n      </Box>\n      <Box flex=\"1 1 auto\" overflow={\"auto\"}>\n        <Stack spacing={2} height={\"100%\"} width={\"100%\"}>\n          <WealthChart titleYear={year} />\n          <WealthTable />\n        </Stack>\n      </Box>\n    </Box>\n  );\n};\n","import { create } from \"mutative\";\nimport { ProjectedWealthKeys } from \"shared/models/store/current\";\nimport { store } from \".\";\n\nexport const setProjectedWealth = (configName: ProjectedWealthKeys, value: number) => {\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      next.projectedWealth[configName] = value;\n    });\n  });\n};\n","import { InputAdornment, TextField } from \"@mui/material\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { useCallback, useState } from \"react\";\nimport { Store } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\n\ninterface ConfigEntryProps {\n  getStore: (store: Store) => number;\n  setStore: (value: number) => void;\n  label: string;\n  variant?: \"cash\" | \"percent\";\n}\n\nexport const ConfigEntry = (props: ConfigEntryProps) => {\n  const { label, variant = \"cash\", getStore, setStore } = props;\n  const [error, setError] = useState(false);\n  const isPercent = variant === \"percent\";\n\n  const onchange = useCallback(\n    (input: string) => {\n      let value = +input;\n      const isNan = Number.isNaN(value);\n      setError(isNan);\n      if (isNan) {\n        return;\n      }\n\n      if (isPercent) {\n        value /= 100;\n      }\n\n      setStore(value);\n    },\n    [isPercent, setStore]\n  );\n\n  const value = useStore(store, getStore);\n  const defaultValue = isPercent ? value * 100 : value;\n\n  return (\n    <TextField\n      error={error}\n      variant=\"outlined\"\n      slotProps={{\n        input: {\n          startAdornment: <InputAdornment position=\"start\">{isPercent ? \"%\" : \"$\"}</InputAdornment>,\n        },\n      }}\n      defaultValue={defaultValue.toFixed(isPercent ? 2 : 0)}\n      type=\"numeric\"\n      label={label}\n      onChange={(event) => {\n        onchange(event.target.value);\n      }}\n    />\n  );\n};\n","import { Card, CardContent, CardHeader } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { setProjectedWealth } from \"shared/store/set-projected-wealth\";\nimport { ConfigEntry } from \"./config-entry\";\n\nexport const Config = () => {\n  return (\n    <Card>\n      <CardHeader title=\"Configuration\" />\n      <CardContent>\n        <Stack spacing={2}>\n          <ConfigEntry\n            getStore={(x) => x.projectedWealth.savingsPerPaycheck}\n            setStore={(value) => {\n              setProjectedWealth(\"savingsPerPaycheck\", value);\n            }}\n            label=\"Savings Per Paycheck\"\n          />\n          <ConfigEntry\n            getStore={(x) => x.projectedWealth.retirementContributionPaycheck}\n            setStore={(value) => {\n              setProjectedWealth(\"retirementContributionPaycheck\", value);\n            }}\n            label=\"Retirement Contribution Per Paycheck\"\n          />\n          <ConfigEntry\n            getStore={(x) => x.projectedWealth.bonusWithholdingsRate}\n            setStore={(value) => {\n              setProjectedWealth(\"bonusWithholdingsRate\", value);\n            }}\n            label=\"Bonus Withholdings Rate\"\n            variant=\"percent\"\n          />\n          <Stack direction={\"row\"} spacing={2} width={\"100%\"} sx={{ \"& > *\": { flex: 1 } }}>\n            <ConfigEntry\n              getStore={(x) => x.projectedWealth.socialSecurityLimit}\n              setStore={(value) => {\n                setProjectedWealth(\"socialSecurityLimit\", value);\n              }}\n              label=\"Social Security Tax Limit\"\n            />\n            <ConfigEntry\n              getStore={(x) => x.projectedWealth.socialSecurityTaxRate}\n              setStore={(value) => {\n                setProjectedWealth(\"socialSecurityTaxRate\", value);\n              }}\n              label=\"Social Security Tax\"\n              variant=\"percent\"\n            />\n          </Stack>\n          <Stack direction={\"row\"} spacing={2} width={\"100%\"} sx={{ \"& > *\": { flex: 1 } }}>\n            <ConfigEntry\n              getStore={(x) => x.projectedWealth.medicareSupplementalTaxThreshold}\n              setStore={(value) => {\n                setProjectedWealth(\"medicareSupplementalTaxThreshold\", value);\n              }}\n              label=\"Medicare Supplemental Threshold\"\n            />\n            <ConfigEntry\n              getStore={(x) => x.projectedWealth.medicareSupplementalTaxRate}\n              setStore={(value) => {\n                setProjectedWealth(\"medicareSupplementalTaxRate\", value);\n              }}\n              label=\"Medicare Supplemental Tax\"\n              variant=\"percent\"\n            />\n          </Stack>\n        </Stack>\n      </CardContent>\n    </Card>\n  );\n};\n","import { create } from \"mutative\";\nimport { Ratings } from \"shared/models/store/current\";\nimport { store } from \".\";\n\ntype PerformanceConfigProperty = \"bonusPct\" | \"meritIncreasePct\";\n\nexport const setPerformanceConfig = (rating: Ratings, property: PerformanceConfigProperty, value: number) => {\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      next.projectedIncome.config[rating][property] = value;\n    });\n  });\n};\n","import { Card, CardContent, CardHeader, Typography } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { Ratings } from \"shared/models/store/current\";\nimport { setPerformanceConfig } from \"shared/store/set-performance-config\";\nimport { ConfigEntry } from \"./config-entry\";\n\ninterface PerfConfigProps {\n  rating: Ratings;\n}\n\nconst labels = {\n  didNotMeet: \"Did Not Meet Expectations\",\n  meetsExpectations: \"Meets Expectations\",\n  exceedsExpectations: \"Exceeds Expectations\",\n  outstanding: \"Outstanding\",\n};\n\nconst PerfConfig = ({ rating }: PerfConfigProps) => {\n  return (\n    <Stack spacing={1}>\n      <Typography variant=\"body2\">{labels[rating]}</Typography>\n      <Stack direction=\"row\" spacing={2} width=\"100%\" sx={{ \"& > *\": { flex: 1 } }}>\n        <ConfigEntry\n          getStore={(x) => x.projectedIncome.config[rating].meritIncreasePct ?? 0}\n          setStore={(value) => {\n            setPerformanceConfig(rating, \"meritIncreasePct\", value);\n          }}\n          label={`Merit Increase`}\n          variant=\"percent\"\n        />\n        <ConfigEntry\n          getStore={(x) => x.projectedIncome.config[rating].bonusPct ?? 0}\n          setStore={(value) => {\n            setPerformanceConfig(rating, \"bonusPct\", value);\n          }}\n          label={`Merit Bonus`}\n          variant=\"percent\"\n        />\n      </Stack>\n    </Stack>\n  );\n};\n\nexport const PerformanceConfig = () => {\n  return (\n    <Card>\n      <CardHeader title=\"Performance Based Increases\" />\n      <CardContent>\n        <Stack spacing={1}>\n          <PerfConfig rating={\"didNotMeet\"} />\n          <PerfConfig rating={\"meetsExpectations\"} />\n          <PerfConfig rating={\"exceedsExpectations\"} />\n          <PerfConfig rating={\"outstanding\"} />\n        </Stack>\n      </CardContent>\n    </Card>\n  );\n};\n","export function sortByNumbers<T>(...criteria: Array<[\"asc\" | \"desc\", (item: T) => number]>): (a: T, b: T) => number {\n  return (a, b) => {\n    for (const [direction, selector] of criteria) {\n      const factor = direction === \"asc\" ? 1 : -1;\n      const diff = (selector(a) - selector(b)) * factor;\n      if (diff !== 0) {\n        return diff;\n      }\n    }\n    return 0;\n  };\n}\n","import Close from \"@mui/icons-material/Close\";\nimport { Box, Button, Card, CardContent, CardHeader, IconButton, MenuItem, Modal, Paper, Select, Stack, Typography } from \"@mui/material\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { SimpleTreeView } from \"@mui/x-tree-view/SimpleTreeView\";\nimport { TreeItem } from \"@mui/x-tree-view/TreeItem\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo, useState } from \"react\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { Percent } from \"shared/components/formatters/percent\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { formatCash } from \"shared/utility/format-cash\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { formatPercent } from \"shared/utility/format-percent\";\nimport { sortByNumbers } from \"shared/utility/sort-by-number\";\n\nexport const ScenarioExplorer = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [year, setYear] = useState(getLocalDateTime().year);\n  const [scenarioIndex, setScenarioIndex] = useState(0);\n  const scenarioData = useStore(scenarioStore);\n  const scenarios = scenarioData.scenarios[year];\n  const scenario = scenarios?.[scenarioIndex];\n\n  const sortedScenarios = useMemo(() => {\n    return scenarios?.toSorted(sortByNumbers([\"desc\", (x) => x.weight], [\"desc\", (x) => x.totalPay]));\n  }, [scenarios]);\n\n  if (!sortedScenarios || !scenario) {\n    return null;\n  }\n\n  return (\n    <>\n      <Card>\n        <CardHeader title=\"Scenario Explorer\" />\n        <CardContent>\n          <Button onClick={() => setIsOpen(true)}>Open Scenario Explorer</Button>\n        </CardContent>\n      </Card>\n      <Modal open={isOpen}>\n        <Paper sx={{ position: \"absolute\", top: 24, bottom: 24, right: 24, left: 24, padding: 2, overflow: \"auto\" }}>\n          <IconButton onClick={() => setIsOpen(false)} sx={{ position: \"absolute\", top: 8, right: 8 }}>\n            <Close />\n          </IconButton>\n          <Stack spacing={2}>\n            <Stack direction={\"row\"} alignItems={\"center\"} spacing={2}>\n              <Typography variant=\"h5\">Scenario Explorer</Typography>\n              <DatePicker\n                sx={{ width: 90, marginRight: 2 }}\n                label={\"year\"}\n                views={[\"year\"]}\n                minDate={getLocalDateTime().set({ year: scenarioData?.minYear })}\n                maxDate={getLocalDateTime().set({ year: scenarioData?.maxYear })}\n                defaultValue={getLocalDateTime()}\n                slotProps={{\n                  textField: {\n                    variant: \"standard\",\n                    label: \"\",\n                  },\n                }}\n                onChange={(date) => {\n                  date && setYear(date.year);\n                }}\n              />\n              <Select variant=\"standard\" onChange={(event) => setScenarioIndex(+event.target.value)} defaultValue={\"0\"}>\n                {sortedScenarios.map((x, i) => (\n                  <MenuItem key={i} value={i}>\n                    {x.weight} {formatCash(x.totalPay)}\n                  </MenuItem>\n                ))}\n              </Select>\n            </Stack>\n\n            <Paper elevation={5} sx={{ padding: 2 }}>\n              <SimpleTreeView\n                defaultExpandedItems={[\"_TotalPay\", \"totalMerit\", \"pay\", \"meritBonus\", \"companyBonus\", \"lastThreeMeritBonusFactor\"]}\n              >\n                <TreeItem itemId=\"scenario\" label={<span>Scenario</span>}>\n                  <TreeItem itemId=\"weight\" label={<span>Weight: {scenario.weight}</span>} />\n                  <TreeItem itemId=\"year\" label={<span>Year: {scenario.year}</span>} />\n                </TreeItem>\n                <TreeItem\n                  itemId=\"_TotalPay\"\n                  label={\n                    <Stack direction={\"row\"} spacing={1}>\n                      <span>Total Pay: </span>\n                      <Cash value={scenario.totalPay} compact={false} />\n                    </Stack>\n                  }\n                >\n                  <TreeItem\n                    itemId=\"aprToApr\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Apr To Apr: </span>\n                        <Cash value={scenario.aprToApr} compact={false} />\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"basePay\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Base Pay: </span>\n                        <Cash value={scenario.basePay} compact={false} />\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"taxablePay\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Taxable Pay: </span>\n                        <Cash value={scenario.taxablePay} compact={false} />\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"totalPay\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Total Pay: </span>\n                        <Cash value={scenario.totalPay} compact={false} />\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"totalMerit\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Total Merit Increase: </span>\n                        <Percent value={scenario.meritIncreasePct + scenario.equityIncreasePct} />\n                      </Stack>\n                    }\n                  >\n                    <TreeItem\n                      itemId=\"meritIncreasePct\"\n                      label={\n                        <Stack direction={\"row\"} spacing={1}>\n                          <span>Merit Increase: </span>\n                          <Percent value={scenario.meritIncreasePct} />\n                        </Stack>\n                      }\n                    />\n                    <TreeItem\n                      itemId=\"equityIncreasePct\"\n                      label={\n                        <Stack direction={\"row\"} spacing={1}>\n                          <span>Equity Increase: </span>\n                          <Percent value={scenario.equityIncreasePct} />\n                        </Stack>\n                      }\n                    />\n                  </TreeItem>\n\n                  <TreeItem\n                    itemId=\"currentPaymentIdx\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Current Payment Index: </span>\n                        <span>{scenario.currentPaymentIdx}</span>\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"remainingPayments\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Remaining Regular Payments: </span>\n                        <span>{scenario.remainingRegularPayments}</span>\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"current_payment\"\n                    label={\n                      <Stack direction={\"row\"} spacing={2}>\n                        <Box>Current Payment: </Box>\n                        <Box>{DateTime.fromISO(scenario.payments[scenario.currentPaymentIdx].payedOn).toFormat(shortDate)}</Box>\n                        <Box width={70} textAlign={\"right\"}>\n                          {formatCash(scenario.payments[scenario.currentPaymentIdx].value)}\n                        </Box>\n                        <Box width={70} textAlign={\"right\"}>\n                          {formatCash(scenario.payments[scenario.currentPaymentIdx].cumulative)}\n                        </Box>\n                        <Box> {scenario.payments[scenario.currentPaymentIdx].type}</Box>\n                      </Stack>\n                    }\n                  ></TreeItem>\n                  <TreeItem itemId=\"payments\" label={\"Payments Considered\"}>\n                    {scenario.payments.toReversed().map((x, i, arr) => (\n                      <TreeItem\n                        key={i}\n                        itemId={`payments-${i}`}\n                        label={\n                          <Stack\n                            sx={{\n                              backgroundColor: scenario.currentPaymentIdx == arr.length - 1 - i ? \"rgba(0,255,0,.15)\" : undefined,\n                            }}\n                            direction={\"row\"}\n                            spacing={2}\n                          >\n                            <Box>{arr.length - 1 - i}</Box>\n                            <Box>{DateTime.fromISO(x.payedOn).toFormat(shortDate)}</Box>\n                            <Box width={70} textAlign={\"right\"}>\n                              {formatCash(x.value)}\n                            </Box>\n                            <Box width={70} textAlign={\"right\"}>\n                              {formatCash(x.cumulative)}\n                            </Box>\n                            <Box> {x.type}</Box>\n                          </Stack>\n                        }\n                      />\n                    ))}\n                  </TreeItem>\n                  <TreeItem itemId=\"pay\" label={\"Pay\"}>\n                    {scenario.pay.toReversed().map((x, i) => (\n                      <TreeItem key={i} itemId={`$pay-${i}`} label={`${DateTime.fromISO(x.date).year} ${x.value}`} />\n                    ))}\n                  </TreeItem>\n                </TreeItem>\n\n                <TreeItem\n                  itemId=\"meritBonus\"\n                  label={\n                    <Stack direction={\"row\"} spacing={1}>\n                      <span>Merit Bonus: </span>\n                      <Cash value={scenario.meritBonus} compact={false} />\n                    </Stack>\n                  }\n                >\n                  <TreeItem\n                    itemId=\"mertiBonusPct\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Merit Bonus Percent: </span>\n                        <Percent value={scenario.meritBonusPct} />\n                      </Stack>\n                    }\n                  />\n                </TreeItem>\n                <TreeItem\n                  itemId=\"companyBonus\"\n                  label={\n                    <Stack direction={\"row\"} spacing={1}>\n                      <span>Company Bonus:</span>\n                      <Cash value={scenario.companyBonus} compact={false} />\n                    </Stack>\n                  }\n                >\n                  <TreeItem\n                    itemId=\"companyBonusFactor.value\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Company Bonus Factor:</span>\n                        <Percent value={scenario.companyBonusFactor} />\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"companyBonusPct.value\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Company Bonus Percent:</span>\n                        <Percent value={scenario.companyBonusPct} />\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"lastThreeMeritBonusFactor\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Last Three Merit Bonus Percent:</span>\n                        <Percent value={scenario.lastThreeMeritBonusFactor} />\n                      </Stack>\n                    }\n                  >\n                    {scenario.lastThreeMeritBonuses.toReversed().map((x, i) => (\n                      <TreeItem key={`${i}${x}`} itemId={`lastThreeMeritBonuses${i}`} label={`${year - i} ${formatPercent(x)}`} />\n                    ))}\n                  </TreeItem>\n                </TreeItem>\n                <TreeItem\n                  itemId=\"retirementBonus\"\n                  label={\n                    <Stack direction={\"row\"} spacing={1}>\n                      <span>Retirement Bonus:</span>\n                      <Cash value={scenario.retirementBonus} compact={false} />\n                    </Stack>\n                  }\n                >\n                  <TreeItem\n                    itemId=\"retirementBonusPct\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Retirement Bonus Percent:</span>\n                        <Percent value={scenario.retirementBonusPct} />\n                      </Stack>\n                    }\n                  />\n                </TreeItem>\n              </SimpleTreeView>\n            </Paper>\n          </Stack>\n        </Paper>\n      </Modal>\n    </>\n  );\n};\n","import { Box } from \"@mui/material\";\nimport { PerformanceConfig } from \"./performance-config\";\nimport { ScenarioExplorer } from \"./scenario-explorer\";\n\nexport const ProjectedIncome = () => {\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" height=\"100%\" width={\"100%\"} gap={2}>\n      <ScenarioExplorer />\n\n      <PerformanceConfig />\n    </Box>\n  );\n};\n","import { Box, Table, TableBody, TableCell, TableHead, TableRow } from \"@mui/material\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport { ReactNode } from \"react\";\nimport { ZodError } from \"zod\";\n\ninterface InvalidDataDialogProps {\n  open?: boolean;\n  error?: ZodError;\n  children?: ReactNode;\n}\n\nexport default function InvalidDataDialog(props: InvalidDataDialogProps) {\n  const { open, error, children } = props;\n\n  return (\n    <>\n      <Dialog open={!!open}>\n        <DialogTitle id=\"alert-dialog-title\">{\"Error Loading Data\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            <Box maxHeight={500} overflow={\"auto\"}>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Error Message</TableCell>\n                    <TableCell>Path</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {error?.issues.map((x, idx) => {\n                    return (\n                      <TableRow key={idx}>\n                        <TableCell>{x.message}</TableCell>\n                        <TableCell>{x.path.join(\".\")}</TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            </Box>\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>{children}</DialogActions>\n      </Dialog>\n    </>\n  );\n}\n","import { useStore } from \"@tanstack/react-store\";\nimport { useCallback } from \"react\";\nimport { store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\n\n/**\n * Downloads the provided data as a JSON file with the given filename\n *\n * @template T - The type of data being downloaded\n * @param {string} filename - The name to give the downloaded file\n * @param {T} storeData - The data to be stringified and downloaded\n */\nexport const downloadJson = <T,>(filename: string, storeData: T) => {\n  const data = JSON.stringify(storeData, null, 2);\n  const link = document.createElement(\"a\");\n  link.download = filename;\n  const blob = new Blob([data], { type: \"application/json\" });\n  link.href = window.URL.createObjectURL(blob);\n  link.click();\n};\n\n/**\n * React hook that provides functionality to export the current store data\n *\n * @returns {() => void} A callback function that triggers the download of store data as JSON\n */\nexport const useExport = () => {\n  const storeData = useStore(store);\n  const onExport = useCallback(() => {\n    downloadJson(`wealth-tracker-${getLocalDateTime().toFormat(shortDate)}.json`, storeData);\n  }, [storeData]);\n\n  return onExport;\n};\n","import { useCallback } from \"react\";\nimport { storeValidator } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\nimport { migration } from \"shared/store/migrations\";\n\n/**\n * Opens a file selection dialog and returns a Promise that resolves with the selected file\n *\n * @param {string} contentType - The MIME type filter for the file selection dialog\n * @returns {Promise<File>} A promise that resolves with the selected file\n */\nfunction selectFile(contentType: string) {\n  return new Promise<File>((resolve) => {\n    const input = document.createElement(\"input\");\n    input.type = \"file\";\n    input.accept = contentType;\n    input.onchange = () => {\n      if (input.files?.length) {\n        resolve(input.files[0]);\n      }\n    };\n    input.click();\n  });\n}\n\n/**\n * React hook that provides functionality to import store data from a JSON file\n *\n * @returns {() => Promise<void>} A callback function that prompts for file selection and imports the data.\n * The Promise resolves when the import is successful or rejects with validation errors.\n */\nexport const useImport = () => {\n  return useCallback(() => {\n    return new Promise<void>((resolve, reject) => {\n      selectFile(\"application/json\").then((file) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = (readerEvent) => {\n          const content = readerEvent.target?.result?.toString();\n          if (content) {\n            const data = JSON.parse(window.atob(content.split(\",\")[1]));\n            const validation = storeValidator.safeParse(data);\n            if (validation.success) {\n              store.setState(() => data);\n              resolve();\n            } else {\n              try {\n                migration(data);\n                store.setState(() => data);\n                resolve();\n              } catch (err) {\n                console.log(\"error\", err);\n                console.log(\"invalid data\", data);\n                reject(err);\n              }\n            }\n          }\n        };\n      });\n    });\n  }, []);\n};\n","import { storeValidator } from \"shared/models/store/current\";\n\n/**\n * React hook that handles store data validation errors\n *\n * @returns {Object} Object containing:\n * - hadError: boolean indicating if there was a validation error\n * - invalidData: The invalid data that failed validation (if any)\n * - parseError: The validation error details (if any)\n * - resetError: Function to clear the error state\n */\nexport const useStoreDataError = () => {\n  const invalidData = localStorage.getItem(\"store-invalid\");\n\n  if (!invalidData) {\n    return { hadError: false };\n  }\n\n  const jsonInvalidData = JSON.parse(invalidData);\n  const validated = storeValidator.safeParse(jsonInvalidData);\n\n  return {\n    hadError: !!invalidData,\n    invalidData: jsonInvalidData,\n    parseError: invalidData && !validated.success ? validated.error : undefined,\n    resetError: () => {\n      localStorage.removeItem(\"store-invalid\");\n    },\n  };\n};\n","import DeleteForever from \"@mui/icons-material/DeleteForever\";\nimport { Button, Card, CardActions, CardContent, CardHeader, Stack, Typography } from \"@mui/material\";\nimport InvalidDataDialog from \"app/invalid-data-dialog\";\nimport { useState } from \"react\";\nimport { ConfirmDialog } from \"shared/components/confirm-dialog\";\nimport { downloadJson, useExport } from \"shared/hooks/use-export\";\nimport { useImport } from \"shared/hooks/use-import\";\nimport { useStoreDataError } from \"shared/hooks/use-store-data-error\";\nimport { resetStore } from \"shared/store\";\nimport { useLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const System = () => {\n  const onExport = useExport();\n  const onImport = useImport();\n  const { hadError, parseError, resetError, invalidData } = useStoreDataError();\n  const [error, setError] = useState(parseError);\n  const [isOpen, setIsOpen] = useState(hadError);\n  const localTime = useLocalDateTime();\n\n  return (\n    <>\n      <Stack spacing={2}>\n        <Card>\n          <CardHeader title={\"System\"} />\n          <CardContent>\n            <Typography variant=\"body2\">Built On {BUILD_DATE}</Typography>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader title={\"Data\"} />\n\n          <CardActions>\n            <Button\n              onClick={() =>\n                onImport().catch((err) => {\n                  setIsOpen(true);\n                  setError(err);\n                })\n              }\n            >\n              Import\n            </Button>\n            <Button onClick={onExport}>Export</Button>\n            <ConfirmDialog title=\"Reset Everything\" onConfirm={resetStore}>\n              <Button color=\"error\">\n                <DeleteForever />\n                Reset\n              </Button>\n            </ConfirmDialog>\n          </CardActions>\n        </Card>\n      </Stack>\n      <InvalidDataDialog open={isOpen} error={error}>\n        {hadError && (\n          <>\n            <Button\n              color=\"error\"\n              onClick={() => {\n                setIsOpen(false);\n                resetError?.();\n                resetStore();\n              }}\n            >\n              Reset\n            </Button>\n            <Button\n              onClick={() => {\n                downloadJson(`invalid-data-wealth-tracker-${localTime.toFormat(shortDate)}.json`, invalidData);\n              }}\n            >\n              Download Data\n            </Button>\n\n            <Button\n              onClick={() => {\n                setIsOpen(false);\n                resetError?.();\n              }}\n            >\n              Ignore\n            </Button>\n          </>\n        )}\n        {!hadError && (\n          <Button\n            onClick={() => {\n              setIsOpen(false);\n            }}\n          >\n            Cancel\n          </Button>\n        )}\n      </InvalidDataDialog>\n    </>\n  );\n};\n","import CloseIcon from \"@mui/icons-material/Close\";\nimport SettingsIcon from \"@mui/icons-material/Settings\";\nimport { Box, Button, Dialog, DialogContent, DialogTitle, IconButton, Tab, Tabs } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { Config } from \"./config\";\nimport { ProjectedIncome } from \"./projected-income\";\nimport { System } from \"./system\";\n\nexport const ConfigModal = () => {\n  const [tab, setTab] = useState(\"system\");\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <>\n      <Button onClick={() => setIsOpen(true)}>\n        <SettingsIcon />\n      </Button>\n      <Dialog maxWidth={false} open={isOpen} onClose={() => setIsOpen(false)}>\n        <DialogTitle sx={{ display: \"flex\" }}>\n          <Tabs value={tab} onChange={(_, value) => setTab(value)}>\n            <Tab value=\"projected-Income\" label=\"Projected Income\" />\n            <Tab value=\"projected-wealth\" label=\"Projected Wealth\" />\n            <Tab value=\"system\" label=\"System\" />\n          </Tabs>\n          <IconButton sx={{ height: \"min-content\", marginLeft: \"auto\" }} onClick={() => setIsOpen(false)}>\n            <CloseIcon />\n          </IconButton>\n        </DialogTitle>\n        <DialogContent>\n          <Box width={600} height={600}>\n            {tab === \"projected-Income\" && <ProjectedIncome />}\n            {tab === \"projected-wealth\" && <Config />}\n            {tab === \"system\" && <System />}\n          </Box>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n};\n","import { Box, Stack, Tab, Tabs } from \"@mui/material\";\nimport { Link, Outlet, useLocation, useNavigate } from \"@tanstack/react-router\";\nimport { ConfigModal } from \"./config/config-modal\";\n\nexport const App = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const currentPath = location.pathname.split(\"/\").slice(2)[0];\n\n  return (\n    <Box padding={2} paddingTop={0} display={\"flex\"} flexDirection={\"column\"} height=\"100%\" gap={2}>\n      <Box flex=\"0 1 auto\">\n        <Stack direction=\"row\">\n          <Tabs value={currentPath} onChange={(_, value) => navigate({ to: value })}>\n            <Tab value=\"net-wealth\" label=\"Total Wealth\" component={Link} to=\"/net-wealth\" />\n            <Tab value=\"projected-income\" label=\"Projected Income\" component={Link} to=\"/projected-income\" />\n            <Tab value=\"projected-wealth\" label=\"Projected Wealth\" component={Link} to=\"/projected-wealth\" />\n          </Tabs>\n          <Box marginLeft={\"auto\"} gap={2} display={\"flex\"}>\n            <ConfigModal />\n          </Box>\n        </Stack>\n      </Box>\n      <Box flex=\"1 1 auto\" height={\"100%\"} width={\"100%\"} overflow=\"hidden\">\n        <Outlet />\n      </Box>\n    </Box>\n  );\n};\n","import { createRootRoute, createRoute, createRouter, redirect } from \"@tanstack/react-router\";\nimport { NetWealth } from \"capabilities/net-wealth\";\nimport { ProjectedIncome } from \"capabilities/projected-income\";\nimport { ProjectedWealth } from \"capabilities/projected-wealth\";\nimport { App } from \"./app\";\n\nconst rootRoute = createRootRoute({\n  component: App,\n});\n\nconst indexRoute = createRoute({\n  getParentRoute: () => rootRoute,\n  path: \"/\",\n  beforeLoad: () => {\n    throw redirect({ to: \"/net-wealth\" });\n  },\n});\n\nconst netWealthRoute = createRoute({\n  getParentRoute: () => rootRoute,\n  path: \"/net-wealth\",\n  component: NetWealth,\n});\n\nconst projectedIncomeRoute = createRoute({\n  getParentRoute: () => rootRoute,\n  path: \"/projected-income\",\n  component: ProjectedIncome,\n});\n\nconst projectedWealthRoute = createRoute({\n  getParentRoute: () => rootRoute,\n  path: \"/projected-wealth\",\n  component: ProjectedWealth,\n});\n\nconst routeTree = rootRoute.addChildren([indexRoute, netWealthRoute, projectedIncomeRoute, projectedWealthRoute]);\n\nexport const router = createRouter({\n  routeTree,\n  defaultPreload: \"intent\",\n  basepath: \"/wealth-tracker\",\n});\n\ndeclare module \"@tanstack/react-router\" {\n  interface Register {\n    router: typeof router;\n  }\n}\n","import { DateTime } from \"luxon\";\n\ndeclare module \"luxon\" {\n  interface DateTime {\n    /**\n     * Type guard that ensures a DateTime is valid. Throws an error if the date is invalid.\n     *\n     * @throws {Error} If the date is invalid with the invalidReason as the message\n     * @returns {DateTime<true>} This date cast as a valid DateTime\n     * @example\n     * const validDate = DateTime.local().toValid();\n     * const invalidDate = DateTime.fromISO(\"invalid\");\n     * try {\n     *   invalidDate.toValid(); // Throws error: Invalid date: unparseable\n     * } catch (e) {\n     *   console.error(e);\n     * }\n     */\n    toValid(): DateTime<true>;\n  }\n}\n\nDateTime.prototype.toValid = function (this: DateTime): DateTime<true> {\n  if (!this.isValid) {\n    throw new Error(`Invalid date: ${this.invalidReason}`);\n  }\n  return this as DateTime<true>;\n};\n","import { DateTime } from \"luxon\";\nimport { MAX_NUM_ENTRIES } from \"shared/constants\";\nimport { ProjectedIncome, Rating, ratingToTimeSeries } from \"shared/models/store/current\";\nimport { findSameYear } from \"shared/utility/find-same-year\";\n\ntype UnweightedPairs = {\n  meritIncreasePct: number;\n  meritBonusPct: number;\n};\n\n/**\n *\n * @param year year to generate merit pairs for\n * @param {ProjectedIncome} projectedIncome pojected\n * @returns an array of possible merit pairs with their frequency weighted\n */\nconst getMeritPairs = (year: number, projectedIncome: ProjectedIncome) => {\n  const { config, timeSeries } = projectedIncome;\n  const actualMeritDetails = findSameYear(year, timeSeries.meritPct);\n\n  if (actualMeritDetails && actualMeritDetails.enabled) {\n    return [\n      {\n        meritIncreasePct: actualMeritDetails.meritIncreasePct,\n        meritBonusPct: actualMeritDetails.meritBonusPct,\n        rating: actualMeritDetails.rating,\n        weight: 1,\n      },\n    ];\n  }\n\n  const getConfiguredValue = (rating?: Rating) => {\n    const key = rating ? ratingToTimeSeries[rating] : undefined;\n    if (key && config[key]) {\n      return {\n        meritIncreasePct: (config[key].meritIncreasePct ?? 0) > 0 ? config[key].meritIncreasePct : undefined,\n        meritBonusPct: (config[key].bonusPct ?? 0) > 0 ? config[key].bonusPct : undefined,\n      };\n    }\n  };\n\n  const unweightedPairs = timeSeries.meritPct\n    .filter((x) => x.enabled)\n    .slice(-1 * MAX_NUM_ENTRIES)\n    .map((x) => {\n      const config = getConfiguredValue(x.rating);\n      return {\n        meritIncreasePct: config ? config.meritIncreasePct : x.meritIncreasePct,\n        meritBonusPct: config ? config.meritBonusPct : x.meritBonusPct,\n        rating: actualMeritDetails?.rating,\n      };\n    });\n\n  const groupsOfPairs = Object.values(\n    Object.groupBy(unweightedPairs, (x) => `${x.meritBonusPct} ${x.meritIncreasePct}`)\n  ) as UnweightedPairs[][];\n\n  return groupsOfPairs.map((x) => {\n    return {\n      ...x[0],\n      weight: x.length,\n    };\n  });\n};\n\n/**\n * Gets the merit sequence for a given year, including historical data and projections\n * Used to calculate likely merit increases and bonuses based on past performance\n *\n * @param {number} year - Target year to get merit sequence for\n * @param {TimeSeries} timeSeries - Time series data containing merit history\n * @returns {Array<{weight: number, values: MeritSequenceValues[]}>} Array of possible merit sequences with weights\n */\nexport const getMeritSequence = (year: number, projectedIncome: ProjectedIncome) => {\n  const { timeSeries } = projectedIncome;\n  const meritPairs = getMeritPairs(year, projectedIncome);\n\n  const pay = timeSeries.paycheck.filter((x) => DateTime.fromISO(x.date).year > year - 3);\n  const mostRecentPay = pay.at(-1) ?? timeSeries.paycheck.at(-1);\n\n  if (!mostRecentPay) {\n    return [];\n  }\n\n  const mostRecentPayYear = DateTime.fromISO(mostRecentPay.date).year;\n  const yearsToGenerate = Math.max(year - mostRecentPayYear, 1);\n\n  //generate all possible merit sequences that could happen from now to target year\n  let meritSequence = meritPairs.slice().map((x) => [x]);\n  for (let i = 0; i < yearsToGenerate - 1; i++) {\n    meritSequence = meritSequence.flatMap((x) => {\n      return meritPairs.map((merit) => {\n        return x.slice().concat(merit);\n      });\n    });\n  }\n\n  return meritSequence.map((values) => {\n    return {\n      weight: values.reduce((acc, curr) => acc * curr.weight, 1),\n      values: values,\n    };\n  });\n};\n","import { MAX_NUM_ENTRIES } from \"shared/constants\";\nimport { ProjectedIncome } from \"shared/models/store/current\";\nimport { findSameYear } from \"shared/utility/find-same-year\";\nimport { getMeritSequence } from \"./get-merit-sequence\";\n\n/**\n * Calculates the expected size of a scenario for a given year\n * Used to prevent generating scenarios that would be too large to process efficiently\n *\n * @param {number} year - The year to calculate scenario size for\n * @param {ProjectedIncome} projectedIncome - Time series data containing historical merit and bonus info\n * @returns {number} The expected size of scenarios for the year\n */\nexport const getScenarioSize = (year: number, projectedIncome: ProjectedIncome) => {\n  const meritSequence = getMeritSequence(year, projectedIncome);\n  const companyBonusFactor = findSameYear(year, projectedIncome.timeSeries.companyBonusPct);\n  const companyBonusPcts = companyBonusFactor\n    ? [companyBonusFactor.value]\n    : projectedIncome.timeSeries.companyBonusPct.slice(-1 * MAX_NUM_ENTRIES).map((x) => x.value);\n\n  const companyBonusPctWeights = Object.entries(Object.groupBy(companyBonusPcts, (x) => x)).map(([, values]) => {\n    return {\n      weight: values!.length,\n      value: values!.at(0)!,\n    };\n  });\n\n  return meritSequence.slice(-1 * MAX_NUM_ENTRIES).length * companyBonusPctWeights.length;\n};\n","import { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { Scenario } from \"shared/models/scenario\";\nimport { store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { getScenarioSize } from \"shared/utility/get-scenario-size\";\nimport { scenarioStore } from \"../store/scenario-store\";\n\nconst maxScenarioSize = 2499;\nconst currentYear = getLocalDateTime().year;\n\nconst maxYear = (() => {\n  for (let i = currentYear; i <= currentYear + 5; i++) {\n    const size = getScenarioSize(i, store.state.projectedIncome);\n    if (size > maxScenarioSize || size === 0) {\n      return Math.max(currentYear, i - 1);\n    }\n  }\n  return currentYear + 5;\n})();\n\nconst workers = [\n  new Worker(new URL(\"worker.js\", import.meta.url), { type: \"module\", name: \"1\" }),\n  new Worker(new URL(\"worker.js\", import.meta.url), { type: \"module\", name: \"2\" }),\n  new Worker(new URL(\"worker.js\", import.meta.url), { type: \"module\", name: \"3\" }),\n  new Worker(new URL(\"worker.js\", import.meta.url), { type: \"module\", name: \"4\" }),\n];\n\nworkers.forEach((x) => {\n  x.onmessage = (event: MessageEvent<{ year: number; scenarios: Scenario[] }>) => {\n    scenarioStore.setState((prev) => {\n      return create(prev, (x) => {\n        x.scenarios[event.data.year] = event.data.scenarios;\n\n        const range = Object.keys(x.scenarios)\n          .map((x) => +x)\n          .filter((x, i, arr) => {\n            return i === 0 ? true : x - arr[i - 1] === 1;\n          });\n        const min = range[0];\n        const max = range.at(-1);\n\n        x.loading = max !== maxYear;\n        x.maxYear = max!;\n        x.minYear = min;\n      });\n    });\n  };\n});\n\nconst loadAllScenarios = () => {\n  const projectedIncome = store.state.projectedIncome;\n  const first = projectedIncome.timeSeries.paycheck[1]?.date;\n  const date = first ? DateTime.fromISO(first) : getLocalDateTime();\n  const oldestYear = date.year;\n\n  workers[0].postMessage({ year: currentYear, projectedIncome });\n\n  let workerIdx = 1;\n  for (let i = oldestYear; i < currentYear; i++) {\n    const idx = workerIdx++ % workers.length;\n    workers[idx].postMessage({ year: i, projectedIncome });\n  }\n\n  for (let i = currentYear + 1; i <= maxYear; i++) {\n    const idx = workerIdx++ % workers.length;\n    workers[idx].postMessage({ year: i, projectedIncome });\n  }\n};\n\nloadAllScenarios();\n\nlet priorProjectedIncome = store.state.projectedIncome;\nstore.subscribe(() => {\n  if (priorProjectedIncome === store.state.projectedIncome) {\n    return;\n  }\n  priorProjectedIncome = store.state.projectedIncome;\n  loadAllScenarios();\n});\n","import { CssBaseline, ThemeProvider, createTheme } from \"@mui/material\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers\";\nimport { AdapterLuxon } from \"@mui/x-date-pickers/AdapterLuxon\";\nimport { RouterProvider } from \"@tanstack/react-router\";\nimport { router } from \"app/router\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport \"shared/utility/luxon-extensions\";\nimport \"shared/web-worker/entry\";\nimport \"./index.css\";\n\nimport { AllCommunityModule, ModuleRegistry } from \"ag-grid-community\";\nModuleRegistry.registerModules([AllCommunityModule]);\n\nconst darkTheme = createTheme({\n  palette: {\n    mode: \"dark\",\n  },\n});\n\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n  <React.StrictMode>\n    <ErrorBoundary\n      fallbackRender={(props) => {\n        return (\n          <>\n            <div style={{ backgroundColor: \"#FFF\" }}>{props.error.message}</div>\n            <div style={{ backgroundColor: \"#FFF\" }}>{props.error.stackTrace}</div>\n          </>\n        );\n      }}\n    >\n      <LocalizationProvider dateAdapter={AdapterLuxon}>\n        <ThemeProvider theme={darkTheme}>\n          <CssBaseline />\n          <RouterProvider router={router} />\n        </ThemeProvider>\n      </LocalizationProvider>\n    </ErrorBoundary>\n  </React.StrictMode>\n);\n"],"names":["sortByDate","select","direction","a","b","toMillis","loanValidator","z","object","principal","number","ratePct","paymentsPerYear","payment","firstPaymentDate","string","ownershipPct","accountDataValidator","date","value","id","accountValidator","type","literal","data","array","mortgageValidator","loan","optional","wealth","record","union","projectedIncome","timeSeries","paycheck","meritIncreasePct","equityPct","meritBonusPct","meritBonus","companyBonusPct","companyBonus","retirementBonus","projectedWealth","socialSecurityLimit","socialSecurityTaxRate","medicareSupplementalTaxThreshold","medicareSupplementalTaxRate","savingsPerMonth","retirementContributionPaycheck","bonusWitholdingsRate","storeValidator","version","hidden","boolean","default","savingsPerPaycheck","bonusWithholdingsRate","ratings","outstanding","exceedsExpectations","meetsExpectations","doesNotMeetExpectations","ratingsLabels","meritData","rating","nativeEnum","enabled","getDefaultStore","meritPct","config","bonusPct","didNotMeet","ratingToTimeSeries","MAX_NUM_ENTRIES","PAYMENTS_PER_YEAR","MONTHS_PER_YEAR","groupBySingle","selector","result","i","length","migration","Error","storeV0Validator","parse","storeV1Validator","storeV2Validator","storeV3Validator","storeV4Validator","keys","Object","storeV5Validator","storeV5","storeV6","storeV6Validator","storeV7","meritBonusPctByYear","x","DateTime","fromISO","year","equityPctByYear","map","storeV7Validator","storeV8","defaultStore","getDefaultStoreV8","next","console","log","jsonTryParse","isSuccess","JSON","createStore","validator","defaultValue","key","invalidData","localData","localStorage","getItem","parsedData","safeParse","success","setItem","stringify","err","store","CreateStore","subscribe","current","state","addAccountEntry","accountName","amount","setState","create","prev","push","startOf","toString","sort","addProjectedIncome","concat","addProjectedIncomeMeritPct","meritDetails","hideAccount","removeAccount","removeAccountEntry","idx","findIndex","undefined","splice","removeProjectedIncome","removeProjectedIncomeMerit","resetStore","setLoan","updateAccountDate","toISO","updateAccountName","currentAccountName","newAccountName","updateAccountValue","updateProjectedIncome","updateProjectedIncomeMerit","replacement","NewAccount","forwardRef","props","ref","$","_c","open","setOpen","useState","nameRef","useRef","error","setError","accountType","setAccountType","t0","t1","Symbol","for","marginTop","t2","t3","t4","t5","t6","target","t7","t8","t9","t10","t11","t12","t13","t14","t15","t16","children","t17","myTheme","themeQuartz","withParams","backgroundColor","browserColorScheme","chromeBackgroundColor","mix","onto","foregroundColor","headerFontSize","AgGrid","rest","height","getLocalDateTime","local","useLocalDateTime","shortDate","monthDay","formatCashShort","Intl","NumberFormat","style","currency","notation","maximumFractionDigits","minimumSignificantDigits","maximumSignificantDigits","format","formatCash","compact","fallback","Cash","disableTooltip","tooltip","placement","formatted","join","createAccountColumnConfig","headerName","valueFormatter","toFormat","valueGetter","cellEditor","editable","valueSetter","fromJSDate","newValue","isValid","cellRenderer","cellStyle","display","padding","sortable","width","colId","DeleteForeverIcon","hasJanFistEntry","janFirst","fromObject","day","month","diff","days","useMissingYears","account","accountItemsByYear","groupBy","years","entries","filter","find","entry","lookup","Set","missing","has","ConfirmDialog","onConfirm","title","isOpen","setIsOpen","minWidth","justifyContent","marginRight","AccountSettings","nextAccountName","setNextAccountName","Close","event","t18","t19","t20","t21","t22","AccountTab","useStore","setDate","setAmount","missingYears","hasSameDate","hasSame","accountColumnConfig","onAddEntry","marginLeft","color","input","startAdornment","_temp","x_0","api","sizeColumnsToFit","findNearestOnOrBefore","searchDate","dateSelector","findNearestIdxOnOrBefore","items","findLastIndex","calcLoanBalance","rate","monthlyPayment","annualizedRate","periods","months","totalRate","balance","calcEquity","houseValue","loanBalance","useGraphDates","accounts","flatMap","AddEntry","date_0","Stack","mortgageColumnConfig","toFixed","equity","convertPct","min","datetime","offset","handleClose","textField","parsed","issues","path","createLoanValueGetter","MortgageTab","allAccounts","values","dates","mortgageData","Box","AccountTabs","firstAccount","setAccount","useEffect","_","_temp2","_temp3","account_0","useEarliestAccountEntry","fromMillis","reduce","acc","curr","Math","Infinity","getMortgageValue","mortgage","getAccountValue","getGraphValue","useGraphData","visibleIds","graphData","includes","total","toJSDate","forEach","firstNonZero","slice","graphEntry","index","arr","x_1","WealthChart","setHidden","initialFromDate","localTime","endOf","intialToDate","plus","fromDate","setFromDate","toDate","setToDate","getFullYear","filteredData","xKey","yKey","yName","renderer","_temp4","series","text","position","label","nice","interval","step","time","every","snapTo","listeners","legendItemClick","setTimeout","getState","legend","_temp5","_temp6","theme","axes","options","transition","opacity","value_0","t23","t24","t25","datum","heading","data_0","stacked","datum_0","yKey_0","xKey_0","x_2","visible","x_3","itemId","NetWealth","border","borderRadius","boxShadow","Card","minHeight","paddingBottom","paddingLeft","paddingTop","CashRange","max","minFormatted","maxFormatted","showRange","formatPercent","getProbablityColor","probability","Percent","PercentRange","Value","secondaryValue","tertiaryValue","className","flexDirection","alignItems","gap","flexShrink","ClusterValue","ClusterValues","clusters","eventDate","toHuman","dur","smallestUnit","units","smallestIdx","indexOf","shiftTo","normalize","toObject","Duration","fromEntries","replaceAll","CountDown","dateTime","variant","dateFormat","countDownStr","useCountdownText","tooltipStr","useTooltipText","countDownColor","useCountDownColor","scenarioStore","Store","loading","maxYear","minYear","scenarios","makeMatrix","columns","rows","matrix","column","j","numericSort","toSorted","uniqueCountSorted","uniqueValueCount","lastSeenValue","ssq","sums","sumsOfSquares","sji","muji","fillMatrixColumn","iMin","iMax","cluster","backtrackMatrix","floor","jlow","jhigh","sjlowi","ssqjlow","ssqj","fillMatrices","nValues","shift","shiftedValue","ckmeans","nClusters","sorted","clusterRight","clusterLeft","areSetsEqual","collapseClusters","sets","y","scaleCluster","factor","median","scaleClusters","findMostMostLikely","clusterTitle","getClusterCount","uniqeValues","size","totalWeight","sumSimple","weight","clusterCount","useClusters","totalPay","pay","meritIncrease","taxablePay","_temp7","useTotalPayClusters","_temp8","allScenarios","bb0","_temp10","x_4","at","x_5","equityIncreasePct","x_6","_temp9","scenarios_0","findSameYear","getActualDate","getDefaultPayDates","getEligibleIncomeDateRanges","base","start","end","useDates","meritBonusDate","companyBonusDate","retirementBonusDate","defaultDates","useDateRanges","PaymentTypes","regular","ChunkByEquality","reduceRight","unshift","SparkChart","maxClusters","subArr","flat","ckData","stroke","marker","itemStyler","params","fill","maxSpacing","formatter","params_0","isDisabled","sx","maxWidth","updateProjectedIncomeDate","dateVariant","tooltipValueGetter","valueFormatted","set","disabledStyle","DataEntry","defaultDate","flex","DataEntryLayout","rowIndex","IncomeChart","history","future","_temp11","_temp12","_temp13","year_0","year_1","toLocaleLowerCase","year_2","lowProbability","medProbability","datum_1","yKey_1","xKey_1","params_1","color_1","highProbability","datum_2","yKey_2","xKey_2","params_2","IncomePerPeriodTooltip","incomePerPeriod","perPayday","count","createMeritColumnConfig","cellEditorParams","refine","Number","isNaN","MeritEntry","merit","onSubmit","errors","message","fields","defaultValues","validators","form","useForm","Field","canSubmit","isSubmitting","e_3","e","preventDefault","stopPropagation","handleSubmit","Subscribe","MeritEntryLayout","field","value_1","handleChange","helperText","meta","value_2","field_0","field_1","e_0","field_2","e_1","field_3","e_2","state_0","usePayments","dateRanges","firstScenario","payPeriods","payments","payedOn","paychecks","aprToApr","basePay","ProjectedIncome","selectedYear","setSelectedYear","flexWrap","t26","t27","t28","t29","t30","t31","t32","t33","t34","t35","t36","t37","t38","t39","t40","t41","t42","t43","t44","t45","t46","t47","t48","curr_0","isFuture","useFutureMortgageEquity","mortgages","localDate","januaryFirstSelectedYear","startDate","endDate","useFutureRetirementContributions","retirementContribution","remainingRegularPayments","remaining","perPaycheck","useFutureSavings","getThresholdTaxRemaining","taxRate","threshold","scenario","currentPaymentIdx","cumulative","useThresholdTax","totalTaxable","taxableAmountOverThreshold","firstOccurrence","lastPaycheck","useFutureSocialSecurity","useFutureMedicareTax","taxes","useFutureTotals","excludeHomeEquity","bonusTakeHomeFactor","savings","homeEquity","retirement","totals","futureEvents","rawClusters","numValues","FutureEvents","onChange","medicare","socialSecurity","ThresholdTaxCard","thresholdTax","equals","ClusterCard","useFuturesWealth","totalsPlusOne","useTimeSeriesWealth","localDateTime","earliest","futuresWealth","Array","futureBenchmarkIdx","some","accountWealth","futureWealth","graphDate","benchmarkWealth","yoyCash","yoyPct","benchmarkWealth_0","dataYear","titleYear","offsetIdx","columnConfig","systemYear","WealthTable","ProjectedWealth","setYear","setProjectedWealth","configName","ConfigEntry","getStore","setStore","isPercent","isNan","onchange","Config","_temp14","value_3","value_4","value_5","setPerformanceConfig","property","labels","PerfConfig","PerformanceConfig","sortByNumbers","criteria","ScenarioExplorer","scenarioIndex","setScenarioIndex","scenarioData","sortedScenarios","useMemo","top","bottom","right","left","overflow","toReversed","companyBonusFactor","lastThreeMeritBonusFactor","lastThreeMeritBonuses","retirementBonusPct","InvalidDataDialog","downloadJson","filename","storeData","link","document","createElement","download","blob","Blob","href","window","URL","createObjectURL","click","useExport","selectFile","contentType","Promise","accept","files","useImport","resolve","reject","then","reader","FileReader","readAsDataURL","file","onload","content","readerEvent","atob","split","useStoreDataError","hadError","jsonInvalidData","validated","parseError","resetError","removeItem","System","onExport","onImport","BUILD_DATE","catch","ConfigModal","tab","setTab","App","navigate","useNavigate","location","useLocation","pathname","currentPath","to","Link","rootRoute","createRootRoute","component","indexRoute","createRoute","getParentRoute","beforeLoad","redirect","netWealthRoute","projectedIncomeRoute","projectedWealthRoute","routeTree","addChildren","router","createRouter","defaultPreload","basepath","prototype","toValid","invalidReason","getMeritPairs","actualMeritDetails","getConfiguredValue","unweightedPairs","groupsOfPairs","getMeritSequence","meritPairs","mostRecentPay","mostRecentPayYear","yearsToGenerate","meritSequence","getScenarioSize","companyBonusPcts","companyBonusPctWeights","maxScenarioSize","currentYear","workers","Worker","name","onmessage","range","loadAllScenarios","first","oldestYear","postMessage","workerIdx","priorProjectedIncome","ModuleRegistry","registerModules","AllCommunityModule","darkTheme","createTheme","palette","mode","ReactDOM","createRoot","getElementById","render","stackTrace","AdapterLuxon"],"mappings":"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"}