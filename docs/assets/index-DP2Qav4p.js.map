{"version":3,"file":"index-DP2Qav4p.js","sources":["../../src/shared/utility/sort-by-date.ts","../../src/shared/models/store/version-0/loan.ts","../../src/shared/models/store/current/account-data.ts","../../src/shared/models/store/current/account.ts","../../src/shared/models/store/current/get-default.ts","../../src/shared/models/store/version-0/account-data.ts","../../src/shared/models/store/version-0/account.ts","../../src/shared/models/store/version-0/mortgage.ts","../../src/shared/models/store/version-0/net-wealth.ts","../../src/shared/models/store/version-0/projected-income.ts","../../src/shared/models/store/version-2/projected-wealth.ts","../../src/shared/models/store/version-0/projected-wealth.ts","../../src/shared/models/store/version-1/store.ts","../../src/shared/models/store/version-2/store.ts","../../src/shared/models/store/current/mortgage.ts","../../src/shared/models/store/current/net-wealth.ts","../../src/shared/models/store/current/projected-income.ts","../../src/shared/models/store/current/projected-wealth.ts","../../src/shared/models/store/current/store.ts","../../src/shared/models/store/version-0/store.ts","../../src/shared/store/migrations.ts","../../src/shared/store/store.ts","../../src/shared/store/add-account-entry.ts","../../src/shared/store/add-projected-income.ts","../../src/shared/store/remove-account.ts","../../src/shared/store/remove-account-entry.ts","../../src/shared/store/remove-projected-income.ts","../../src/shared/store/reset-store.ts","../../src/shared/store/set-loan.ts","../../src/shared/store/update-account-date.ts","../../src/shared/store/update-account-name.ts","../../src/shared/store/update-account-value.ts","../../src/shared/store/update-projected-income.ts","../../src/capabilities/net-wealth/new-account.tsx","../../src/shared/components/ag-grid/ag-grid.tsx","../../src/shared/utility/current-date.ts","../../src/shared/utility/format-date.ts","../../src/shared/utility/format-cash.ts","../../src/shared/components/formatters/cash.tsx","../../src/capabilities/net-wealth/tab-types/account/column-config.tsx","../../src/capabilities/net-wealth/tab-types/account/hooks/useMissingYears.ts","../../src/shared/components/confirm-dialog.tsx","../../src/capabilities/net-wealth/tab-types/account/settings.tsx","../../src/capabilities/net-wealth/tab-types/account/account.tsx","../../src/shared/utility/find-nearest-on-or-before.ts","../../src/shared/utility/get-graph-dates.ts","../../src/shared/utility/mortgage-calc.ts","../../src/capabilities/net-wealth/tab-types/mortgage/add-entry.tsx","../../src/capabilities/net-wealth/tab-types/mortgage/column-config.tsx","../../src/capabilities/net-wealth/tab-types/mortgage/settings.tsx","../../src/capabilities/net-wealth/tab-types/mortgage/mortgage.tsx","../../src/capabilities/net-wealth/account-tabs.tsx","../../src/shared/hooks/use-earliest-account-entry.ts","../../src/shared/utility/get-graph-value.ts","../../src/capabilities/net-wealth/wealth-chart/use-graph-data.ts","../../src/capabilities/net-wealth/wealth-chart/wealth-chart.tsx","../../src/capabilities/net-wealth/net-wealth.tsx","../../src/shared/components/card.tsx","../../src/shared/components/formatters/cash-range.tsx","../../src/shared/utility/format-percent.ts","../../src/shared/components/formatters/percent.tsx","../../src/shared/components/formatters/percent-range.tsx","../../src/shared/components/formatters/value.tsx","../../src/shared/components/formatters/cluster-value.tsx","../../src/shared/utility/to-human.ts","../../src/shared/components/formatters/countdown.tsx","../../src/shared/store/scenario-store.ts","../../src/shared/utility/ckmeans/make-matrix.ts","../../src/shared/utility/ckmeans/numeric-sort.ts","../../src/shared/utility/ckmeans/unique-count-sorted.ts","../../src/shared/utility/ckmeans/ckmeans.ts","../../src/shared/utility/cluster-helpers.ts","../../src/shared/hooks/use-clusters.ts","../../src/shared/utility/find-same-year.ts","../../src/shared/hooks/use-dates.ts","../../src/shared/models/payment-periods.ts","../../src/shared/store/update-projected-income-date.ts","../../src/capabilities/projected-income/data-entry/column-config.tsx","../../src/capabilities/projected-income/data-entry/data-entry.tsx","../../src/capabilities/projected-income/income-chart.tsx","../../src/capabilities/projected-income/income-per-period.tsx","../../src/capabilities/projected-income/use-has-merit-pairs.ts","../../src/capabilities/projected-income/projected-income.tsx","../../src/capabilities/projected-wealth/hooks/use-future-mortgage-equity.ts","../../src/capabilities/projected-wealth/hooks/use-future-retirement-contributions.ts","../../src/capabilities/projected-wealth/hooks/use-future-savings.ts","../../src/capabilities/projected-wealth/hooks/use-future-social-security.ts","../../src/capabilities/projected-wealth/hooks/use-future-totals.tsx","../../src/capabilities/projected-wealth/future-events.tsx","../../src/capabilities/projected-wealth/hooks/use-times-series-wealth.ts","../../src/capabilities/projected-wealth/wealth-chart.tsx","../../src/capabilities/projected-wealth/wealth-table/colum-config.tsx","../../src/capabilities/projected-wealth/wealth-table/wealth-table.tsx","../../src/capabilities/projected-wealth/projected-wealth.tsx","../../src/shared/store/set-projected-wealth.ts","../../src/app/config/config-entry.tsx","../../src/app/config/config.tsx","../../src/app/config/scenario-explorer.tsx","../../src/app/invalid-data-dialog.tsx","../../src/shared/hooks/use-export.tsx","../../src/shared/hooks/use-import.tsx","../../src/shared/hooks/use-store-data-error.ts","../../src/app/config/system.tsx","../../src/app/config/config-modal.tsx","../../src/app/app.tsx","../../src/shared/utility/a-payday.ts","../../src/shared/web-worker/merit-sequence.ts","../../src/shared/web-worker/entry.ts","../../src/main.tsx"],"sourcesContent":["import { DateTime } from \"luxon\";\n\nexport const sortByDate =\n  <T>(select: (data: T) => DateTime, direction: \"asc\" | \"desc\") =>\n  (a: T, b: T) =>\n    direction === \"asc\" ? select(a).toMillis() - select(b).toMillis() : select(b).toMillis() - select(a).toMillis();\n","import { z } from \"zod\";\n\nexport const loanValidator = z.object({\n  principal: z.number(),\n  ratePct: z.number(),\n  paymentsPerYear: z.number(),\n  payment: z.number(),\n  firstPaymentDate: z.string(),\n  ownershipPct: z.number(),\n});\n\nexport type Loan = z.infer<typeof loanValidator>;\n","import { z } from \"zod\";\r\n\r\nexport const accountDataValidator = z.object({\r\n  date: z.string(),\r\n  value: z.number(),\r\n});\r\n\r\nexport type AccountData = z.infer<typeof accountDataValidator>;\r\n","import { z } from \"zod\";\r\nimport { accountDataValidator } from \"./account-data\";\r\n\r\nexport const accountValidator = z.object({\r\n  type: z.literal(\"account\"),\r\n  data: z.array(accountDataValidator),\r\n});\r\n\r\nexport type Account = z.infer<typeof accountValidator>;\r\n","import { Store } from \"./store\";\r\n\r\nexport const getDefaultStore = (): Store => ({\r\n  version: 3,\r\n  projectedIncome: {\r\n    timeSeries: {\r\n      paycheck: [],\r\n      meritBonusPct: [],\r\n      companyBonusPct: [\r\n        {\r\n          date: \"2020-06-15T00:00:00.000-07:00\",\r\n          value: 0.182,\r\n        },\r\n        {\r\n          date: \"2021-06-15T00:00:00.000-07:00\",\r\n          value: 0.254,\r\n        },\r\n        {\r\n          date: \"2022-06-15T00:00:00.000-07:00\",\r\n          value: 0.272,\r\n        },\r\n        {\r\n          date: \"2023-06-15T00:00:00.000-07:00\",\r\n          value: 0.168,\r\n        },\r\n      ],\r\n      meritBonus: [],\r\n      companyBonus: [],\r\n      retirementBonus: [],\r\n      equityPct: [],\r\n      meritIncreasePct: [],\r\n    },\r\n  },\r\n  wealth: {},\r\n  projectedWealth: {\r\n    medicareSupplementalTaxThreshold: 200_000,\r\n    socialSecurityLimit: 168_600,\r\n    socialSecurityTaxRate: 0.062,\r\n    medicareSupplementalTaxRate: 0.009,\r\n    savingsPerMonth: 0,\r\n    retirementContributionPaycheck: 0,\r\n    bonusWitholdingsRate: 0,\r\n  },\r\n});\r\n","import { z } from \"zod\";\n\nexport const accountDataValidator = z.object({\n  date: z.string(),\n  value: z.number(),\n  id: z.string(),\n});\n\nexport type AccountData = z.infer<typeof accountDataValidator>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const accountValidator = z.object({\n  type: z.literal(\"account\"),\n  data: z.array(accountDataValidator),\n});\n\nexport type Account = z.infer<typeof accountValidator>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\nimport { loanValidator } from \"./loan\";\n\nexport const mortgageValidator = z.object({\n  type: z.literal(\"mortgage\"),\n  loan: loanValidator.optional(),\n  data: z.array(accountDataValidator),\n});\n\nexport type Mortgage = z.infer<typeof mortgageValidator>;\n","import { z } from \"zod\";\nimport { accountValidator } from \"./account\";\nimport { mortgageValidator } from \"./mortgage\";\n\nexport const wealth = z.record(z.union([accountValidator, mortgageValidator]));\n\nexport type Wealth = z.infer<typeof wealth>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const projectedIncome = z.object({\n  timeSeries: z.object({\n    paycheck: z.array(accountDataValidator),\n    meritIncreasePct: z.array(accountDataValidator),\n    equityPct: z.array(accountDataValidator),\n    meritBonusPct: z.array(accountDataValidator),\n    meritBonus: z.array(accountDataValidator),\n    companyBonusPct: z.array(accountDataValidator),\n    companyBonus: z.array(accountDataValidator),\n    retirementBonus: z.array(accountDataValidator),\n  }),\n});\n\nexport type ProjectedIncome = z.infer<typeof projectedIncome>;\nexport type TimeSeries = keyof ProjectedIncome[\"timeSeries\"];\n","import { z } from \"zod\";\r\n\r\nexport const projectedWealth = z.object({\r\n  socialSecurityLimit: z.number(),\r\n  socialSecurityTaxRate: z.number(),\r\n  medicareSupplementalTaxThreshold: z.number(),\r\n  medicareSupplementalTaxRate: z.number(),\r\n  savingsPerMonth: z.number(),\r\n  retirementContributionPaycheck: z.number(),\r\n  bonusWitholdingsRate: z.number(),\r\n});\r\n\r\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\r\nexport type ProjectedWealthKeys = keyof ProjectedWealth;\r\n","import { z } from \"zod\";\n\nexport const projectedWealth = z.object({\n  socialSecurityLimit: z.number(),\n  socialSecurityTaxRate: z.number(),\n  medicareSupplementalTaxThreshold: z.number(),\n  medicareSupplementalTaxRate: z.number(),\n  savingsPerMonth: z.number(),\n  retirementContributionPaycheck: z.number(),\n});\n\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\nexport type ProjectedWealthKeys = keyof ProjectedWealth;\n","import { z } from \"zod\";\nimport { wealth } from \"../version-0/net-wealth\";\nimport { projectedIncome } from \"../version-0/projected-income\";\nimport { projectedWealth } from \"../version-0/projected-wealth\";\n\nexport const storeValidator = z.object({\n  version: z.literal(1),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { z } from \"zod\";\r\nimport { projectedIncome, wealth } from \"../version-1\";\r\nimport { projectedWealth } from \"./projected-wealth\";\r\n\r\nexport const storeValidator = z.object({\r\n  version: z.literal(2),\r\n  wealth: wealth,\r\n  projectedIncome: projectedIncome,\r\n  projectedWealth: projectedWealth,\r\n});\r\n\r\nexport type Store = z.infer<typeof storeValidator>;\r\n","import { z } from \"zod\";\r\nimport { loanValidator } from \"../version-2\";\r\nimport { accountDataValidator } from \"./account-data\";\r\n\r\nexport const mortgageValidator = z.object({\r\n  type: z.literal(\"mortgage\"),\r\n  loan: loanValidator.optional(),\r\n  data: z.array(accountDataValidator),\r\n});\r\n\r\nexport type Mortgage = z.infer<typeof mortgageValidator>;\r\n","import { z } from \"zod\";\r\nimport { accountValidator } from \"./account\";\r\nimport { mortgageValidator } from \"./mortgage\";\r\n\r\nexport const wealth = z.record(z.union([accountValidator, mortgageValidator]));\r\n\r\nexport type Wealth = z.infer<typeof wealth>;\r\n","import { z } from \"zod\";\r\nimport { accountDataValidator } from \"./account-data\";\r\n\r\nexport const projectedIncome = z.object({\r\n  timeSeries: z.object({\r\n    paycheck: z.array(accountDataValidator),\r\n    meritIncreasePct: z.array(accountDataValidator),\r\n    equityPct: z.array(accountDataValidator),\r\n    meritBonusPct: z.array(accountDataValidator),\r\n    meritBonus: z.array(accountDataValidator),\r\n    companyBonusPct: z.array(accountDataValidator),\r\n    companyBonus: z.array(accountDataValidator),\r\n    retirementBonus: z.array(accountDataValidator),\r\n  }),\r\n});\r\n\r\nexport type ProjectedIncome = z.infer<typeof projectedIncome>;\r\nexport type TimeSeries = keyof ProjectedIncome[\"timeSeries\"];\r\n","import { z } from \"zod\";\r\n\r\nexport const projectedWealth = z.object({\r\n  socialSecurityLimit: z.number(),\r\n  socialSecurityTaxRate: z.number(),\r\n  medicareSupplementalTaxThreshold: z.number(),\r\n  medicareSupplementalTaxRate: z.number(),\r\n  savingsPerMonth: z.number(),\r\n  retirementContributionPaycheck: z.number(),\r\n  bonusWitholdingsRate: z.number(),\r\n});\r\n\r\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\r\nexport type ProjectedWealthKeys = keyof ProjectedWealth;\r\n","import { z } from \"zod\";\r\nimport { wealth } from \"./net-wealth\";\r\nimport { projectedIncome } from \"./projected-income\";\r\nimport { projectedWealth } from \"./projected-wealth\";\r\n\r\nexport const storeValidator = z.object({\r\n  version: z.literal(3),\r\n  wealth: wealth,\r\n  projectedIncome: projectedIncome,\r\n  projectedWealth: projectedWealth,\r\n});\r\n\r\nexport type Store = z.infer<typeof storeValidator>;\r\n","import { z } from \"zod\";\nimport { wealth } from \"./net-wealth\";\nimport { projectedIncome } from \"./projected-income\";\nimport { projectedWealth } from \"./projected-wealth\";\n\nexport const storeValidator = z.object({\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { Store, storeValidator } from \"shared/models/store/current\";\r\nimport { storeValidator as storeV0Validator } from \"shared/models/store/version-0\";\r\nimport { Store as StoreV1, storeValidator as storeV1Validator } from \"shared/models/store/version-1\";\r\nimport { Store as StoreV2, storeValidator as storeV2Validator } from \"shared/models/store/version-2\";\r\n\r\nexport const migration = (data: unknown) => {\r\n  if (data === null || data === undefined) {\r\n    throw new Error(\"parsed data is null or undefined\");\r\n  } else if (typeof data !== \"object\") {\r\n    throw new Error(\"Parsed data is not an object\");\r\n  }\r\n\r\n  if (!(\"version\" in data)) {\r\n    storeV0Validator.parse(data);\r\n    (data as StoreV1).version = 1;\r\n  }\r\n\r\n  if (\"version\" in data) {\r\n    if (data.version === 1) {\r\n      storeV1Validator.parse(data);\r\n      (data as StoreV2).version = 2;\r\n      (data as StoreV2).projectedWealth.bonusWitholdingsRate = 0;\r\n    }\r\n    if (data.version === 2) {\r\n      storeV2Validator.parse(data);\r\n      (data as Store).version = 3;\r\n    }\r\n  }\r\n\r\n  const next = storeValidator.parse(data);\r\n  console.log(next);\r\n  return next;\r\n};\r\n","import { Store as CreateStore } from \"@tanstack/store\";\nimport { ZodSchema } from \"zod\";\nimport { Store, getDefaultStore, storeValidator } from \"../models/store/current\";\nimport { migration } from \"./migrations\";\n\nconst createStore = <T extends object>(validator: ZodSchema, defaultValue: T) => {\n  const key = \"store\";\n  const invalidData = \"store-invalid\";\n  const localData = localStorage.getItem(key);\n  const data = localData ? JSON.parse(localData) : defaultValue;\n  const parse = validator.safeParse(data);\n\n  if (!parse.success) {\n    try {\n      migration(data);\n      localStorage.setItem(key, JSON.stringify(data));\n    } catch (err) {\n      console.log(\"error\", err);\n      console.log(\"invalid data\", data);\n      localStorage.setItem(invalidData, JSON.stringify(data));\n      localStorage.setItem(key, JSON.stringify(defaultValue));\n    }\n  }\n\n  const store = new CreateStore<T>(data);\n  store.subscribe(() => {\n    const current = localStorage.getItem(key);\n    current && localStorage.setItem(`${key}-previous`, current);\n    localStorage.setItem(key, JSON.stringify(store.state));\n  });\n\n  return store;\n};\n\nexport const store = createStore<Store>(storeValidator, getDefaultStore());\n","import { DateTime } from \"luxon\";\r\nimport { create } from \"mutative\";\r\nimport { Account } from \"shared/models/store/current\";\r\nimport { sortByDate } from \"../utility/sort-by-date\";\r\nimport { store } from \"./store\";\r\n\r\nexport const addAccountEntry = (accountName: string, date: DateTime<true>, amount: number) => {\r\n  store.setState((prev) => {\r\n    return create(prev, (next) => {\r\n      (next.wealth[accountName] as Account).data.push({\r\n        date: date.startOf(\"day\").toString(),\r\n        value: amount,\r\n      });\r\n      next.wealth[accountName].data.sort(sortByDate((x) => DateTime.fromISO(x.date), \"asc\"));\r\n    });\r\n  });\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { create } from \"mutative\";\r\nimport { TimeSeries } from \"shared/models/store/current\";\r\nimport { sortByDate } from \"shared/utility/sort-by-date\";\r\nimport { store } from \"./store\";\r\n\r\nexport const addProjectedIncome = (date: DateTime, timeSeries: TimeSeries, value: number) => {\r\n  store.setState((prev) => {\r\n    return create(prev, (next) => {\r\n      next.projectedIncome.timeSeries[timeSeries] = next.projectedIncome.timeSeries[timeSeries]\r\n        .concat({\r\n          date: date.startOf(\"day\").toString(),\r\n          value,\r\n        })\r\n        .sort(sortByDate((x) => DateTime.fromISO(x.date), \"asc\"));\r\n    });\r\n  });\r\n};\r\n","import { create } from \"mutative\";\nimport { store } from \"./store\";\n\nexport const removeAccount = (accountName: string) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      delete next.wealth[accountName];\n    });\n  });\n","import { create } from \"mutative\";\r\nimport { AccountData } from \"shared/models/store/current\";\r\nimport { store } from \"./store\";\r\n\r\nexport const removeAccountEntry = (accountName: string, data: AccountData) =>\r\n  store.setState((prev) => {\r\n    return create(prev, (next) => {\r\n      const idx = prev.wealth[accountName].data.findIndex((x) => x === data);\r\n      if (idx < 0) {\r\n        throw new Error(\"failed to find data\");\r\n      }\r\n\r\n      next.wealth[accountName].data.splice(idx, 1);\r\n      return next;\r\n    });\r\n  });\r\n","import { create } from \"mutative\";\r\nimport { AccountData, TimeSeries } from \"shared/models/store/current\";\r\nimport { store } from \".\";\r\n\r\nexport const removeProjectedIncome = (accountName: TimeSeries, data: AccountData) => {\r\n  store.setState((prev) => {\r\n    return create(prev, (next) => {\r\n      const idx = prev.projectedIncome.timeSeries[accountName].findIndex((x) => x === data);\r\n      if (idx < 0) {\r\n        throw new Error(\"failed to find data\");\r\n      }\r\n\r\n      next.projectedIncome.timeSeries[accountName].splice(idx, 1);\r\n    });\r\n  });\r\n};\r\n","import { getDefaultStore } from \"shared/models/store/current\";\nimport { store } from \"./store\";\n\nexport const resetStore = () => store.setState(() => getDefaultStore());\n","import { create } from \"mutative\";\nimport { Loan, Mortgage } from \"shared/models/store/current\";\nimport { store } from \"./store\";\n\nexport const setLoan = (accountName: string, loan: Loan) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      if (next.wealth[accountName].type === \"mortgage\") {\n        (next.wealth[accountName] as Mortgage).loan = loan;\n      }\n    });\n  });\n","import { DateTime } from \"luxon\";\r\nimport { create } from \"mutative\";\r\nimport { AccountData } from \"shared/models/store/current\";\r\nimport { store } from \".\";\r\n\r\nexport const updateAccountDate = (accountName: string, data: AccountData, date: DateTime) => {\r\n  store.setState((prev) => {\r\n    const next = create(prev, (next) => {\r\n      const idx = prev.wealth[accountName]?.data.findIndex((x) => x === data);\r\n      if (idx < 0) {\r\n        throw new Error(\"failed to find data\");\r\n      }\r\n\r\n      next.wealth[accountName].data[idx].date = date.toISO()!;\r\n    });\r\n    return next;\r\n  });\r\n};\r\n","import { create } from \"mutative\";\nimport { store } from \"./store\";\n\nexport const updateAccountName = (currentAccountName: string, newAccountName: string) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      next.wealth[newAccountName] = next.wealth[currentAccountName];\n      delete next.wealth[currentAccountName];\n    });\n  });\n","import { create } from \"mutative\";\r\nimport { AccountData } from \"shared/models/store/current\";\r\nimport { store } from \".\";\r\n\r\nexport const updateAccountValue = (accountName: string, data: AccountData, value: number) => {\r\n  store.setState((prev) => {\r\n    const next = create(prev, (next) => {\r\n      const idx = prev.wealth[accountName]?.data.findIndex((x) => x === data);\r\n      if (idx < 0) {\r\n        throw new Error(\"failed to find data\");\r\n      }\r\n\r\n      next.wealth[accountName].data[idx].value = value;\r\n    });\r\n    return next;\r\n  });\r\n};\r\n","import { create } from \"mutative\";\r\nimport { AccountData, TimeSeries } from \"shared/models/store/current\";\r\nimport { store } from \".\";\r\n\r\nexport const updateProjectedIncome = (timeSeries: TimeSeries, data: AccountData, value: number) => {\r\n  store.setState((prev) => {\r\n    const next = create(prev, (next) => {\r\n      const idx = prev.projectedIncome.timeSeries[timeSeries].findIndex((x) => x === data);\r\n      if (idx < 0) {\r\n        throw new Error(\"failed to find data\");\r\n      }\r\n      next.projectedIncome.timeSeries[timeSeries][idx].value = value;\r\n    });\r\n    return next;\r\n  });\r\n};\r\n","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, MenuItem, Stack, TextField } from \"@mui/material\";\nimport { create } from \"mutative\";\nimport { ReactNode, forwardRef, useRef, useState } from \"react\";\nimport { store } from \"shared/store\";\n\ntype AssetType = \"account\" | \"mortgage\";\nexport const NewAccount = forwardRef<HTMLButtonElement, { children?: ReactNode }>((props, ref) => {\n  const [open, setOpen] = useState(false);\n  const nameRef = useRef<HTMLInputElement>(null);\n  const [error, setError] = useState(false);\n  const [accountType, setAccountType] = useState<AssetType>();\n\n  return (\n    <>\n      <Button\n        ref={ref}\n        variant=\"outlined\"\n        onClick={() => {\n          setOpen(true);\n          setError(false);\n          setAccountType(undefined);\n        }}\n        sx={{ marginTop: 3 }}\n      >\n        add account\n      </Button>\n\n      <Dialog open={open} onClose={() => setOpen(false)}>\n        <DialogTitle>Add New Account</DialogTitle>\n        <DialogContent>\n          <Stack spacing={2} margin={2}>\n            <TextField\n              select\n              color={error ? \"error\" : \"primary\"}\n              onChange={(value) => {\n                setError(false);\n                setAccountType(value.target.value as AssetType);\n              }}\n              label=\"Type\"\n            >\n              <MenuItem value=\"mortgage\">Mortgage</MenuItem>\n              <MenuItem value=\"account\">Generic Account</MenuItem>\n            </TextField>\n\n            <TextField\n              placeholder=\"Name\"\n              onChange={() => {\n                setError(false);\n              }}\n              error={error}\n              inputRef={nameRef}\n            />\n          </Stack>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            disabled={error}\n            onClick={() => {\n              store.setState((prev) => {\n                return create(prev, (next) => {\n                  if (!nameRef.current?.value || !accountType || prev.wealth[nameRef.current.value]) {\n                    setError(true);\n                    return;\n                  }\n\n                  next.wealth[nameRef.current.value] = {\n                    type: accountType,\n                    data: [],\n                  };\n\n                  setOpen(false);\n                });\n              });\n            }}\n          >\n            Add\n          </Button>\n        </DialogActions>\n      </Dialog>\n      {props?.children}\n    </>\n  );\n});\n","import { AgGridReact, AgGridReactProps } from \"ag-grid-react\";\n\nexport const AgGrid = (props: AgGridReactProps & { id: string }) => {\n  const { id, ...rest } = props;\n  return (\n    <div id={id} className=\"ag-theme-quartz-dark\" style={{ height: \"100%\" }}>\n      <AgGridReact {...rest} suppressMovableColumns />\n    </div>\n  );\n};\n","import { DateTime } from \"luxon\";\n\nexport const getLocalDateTime = () => DateTime.local();\n","export const shortDate = \"yyyy-MM-dd\";\n\nexport const monthDay = \"MMM dd\";\n","export const formatCashShort = new Intl.NumberFormat(\"en-US\", {\r\n  style: \"currency\",\r\n  currency: \"USD\",\r\n  notation: \"compact\",\r\n  maximumFractionDigits: 0,\r\n}).format;\r\n\r\nexport const formatCash = new Intl.NumberFormat(\"en-US\", {\r\n  style: \"currency\",\r\n  currency: \"USD\",\r\n  maximumFractionDigits: 0,\r\n}).format;\r\n","import { Tooltip } from \"@mui/material\";\nimport { useMemo } from \"react\";\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\n\ninterface CashProps {\n  value?: number;\n  fallback?: number;\n  disableTooltip?: boolean;\n  compact?: boolean;\n  tooltip?: string;\n  placement?:\n    | \"top\"\n    | \"right\"\n    | \"bottom\"\n    | \"left\"\n    | \"bottom-end\"\n    | \"bottom-start\"\n    | \"left-end\"\n    | \"left-start\"\n    | \"right-end\"\n    | \"right-start\"\n    | \"top-end\"\n    | \"top-start\"\n    | undefined;\n}\nexport const Cash = ({ value, fallback, disableTooltip, compact = true, tooltip, placement }: CashProps) => {\n  const formatted = useMemo(() => {\n    if (value === undefined) {\n      return fallback;\n    }\n    return compact ? formatCashShort(value) : formatCash(value);\n  }, [compact, fallback, value]);\n\n  return (\n    <Tooltip\n      placement={placement}\n      disableHoverListener={disableTooltip || !compact || !value}\n      title={[tooltip, formatCash(value!)].join(\" \")}\n    >\n      <span>{formatted}</span>\n    </Tooltip>\n  );\n};\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\r\nimport { Button } from \"@mui/material\";\r\nimport { ColDef } from \"ag-grid-community\";\r\nimport { CustomCellRendererProps } from \"ag-grid-react\";\r\nimport { DateTime } from \"luxon\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { AccountData } from \"shared/models/store/current\";\r\nimport { updateAccountDate, updateAccountValue } from \"shared/store\";\r\nimport { removeAccountEntry } from \"shared/store/remove-account-entry\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\n\r\nexport const createAccountColumnConfig = (accountName: string): ColDef<AccountData>[] => [\r\n  {\r\n    headerName: \"Date\",\r\n    sort: \"desc\",\r\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\r\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\r\n    cellEditor: \"agDateCellEditor\",\r\n    editable: true,\r\n    valueSetter: (x) => {\r\n      const date = DateTime.fromJSDate(x.newValue);\r\n      if (date.isValid) {\r\n        updateAccountDate(accountName, x.data, date);\r\n      }\r\n      return date.isValid;\r\n    },\r\n  },\r\n  {\r\n    headerName: \"Value\",\r\n    valueGetter: (x) => x.data?.value,\r\n    valueSetter: (x) => {\r\n      updateAccountValue(accountName, x.data, +x.newValue);\r\n      return true;\r\n    },\r\n    cellRenderer: (x: CustomCellRendererProps<AccountData>) => <Cash value={x.value} placement=\"left\" />,\r\n    editable: true,\r\n    cellEditor: \"agNumberCellEditor\",\r\n    type: \"numericColumn\",\r\n  },\r\n  {\r\n    cellStyle: () => ({ display: \"inline-flex\", padding: \"0px\" }),\r\n    sortable: false,\r\n    headerName: \"\",\r\n    width: 80,\r\n    colId: \"actions\",\r\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\r\n      return (\r\n        <Button\r\n          onClick={() => {\r\n            props.data && removeAccountEntry(accountName, props.data);\r\n          }}\r\n          color=\"error\"\r\n          fullWidth\r\n        >\r\n          <DeleteForeverIcon />\r\n        </Button>\r\n      );\r\n    },\r\n  },\r\n];\r\n","import { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { Account } from \"shared/models/store/current\";\n\nexport const useMissingYears = (account: Account) => {\n  return useMemo(() => {\n    const years = Object.entries(Object.groupBy(account.data, (x) => DateTime.fromISO(x.date).year))\n      .map(\n        ([year, entries]) =>\n          [\n            +year,\n            !!entries?.find((x) => {\n              const date = DateTime.fromISO(x.date);\n              const janFirst = DateTime.fromObject({\n                day: 1,\n                month: 1,\n                year: +year,\n              });\n              return date.diff(janFirst, [\"days\", \"hours\"]).days == 0;\n            }),\n          ] as [number, boolean]\n      )\n      .sort(([a], [b]) => {\n        return a - b;\n      });\n\n    const lookup = Object.fromEntries(years);\n    const missing = [];\n    for (let i = years[0]?.[0] ?? 0; i <= years[years.length - 1]?.[0]; i++) {\n      if (!lookup[i]) {\n        missing.push(i);\n      }\n    }\n    return missing;\n  }, [account.data]);\n};\n","import { Button, Dialog, DialogActions, DialogTitle } from \"@mui/material\";\r\nimport React, { ReactElement, useMemo, useState } from \"react\";\r\n\r\ninterface ConfirmDialogProps {\r\n  onConfirm?: () => void;\r\n  title: string;\r\n  children: ReactElement;\r\n}\r\nexport const ConfirmDialog = (props: ConfirmDialogProps) => {\r\n  const { onConfirm, title, children } = props;\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const openButton = useMemo(() => {\r\n    return React.cloneElement(children, { onClick: () => setIsOpen(true) });\r\n  }, [children]);\r\n\r\n  return (\r\n    <>\r\n      {openButton}\r\n      <Dialog open={isOpen} onClose={() => setIsOpen(false)}>\r\n        <DialogTitle sx={{ minWidth: 300, display: \"flex\", justifyContent: \"center\" }}>{title}</DialogTitle>\r\n        <DialogActions>\r\n          <Button sx={{ marginRight: \"auto\" }} onClick={() => setIsOpen(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"error\"\r\n            onClick={() => {\r\n              onConfirm?.();\r\n              setIsOpen(false);\r\n            }}\r\n          >\r\n            Confirm\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n","import Close from \"@mui/icons-material/Close\";\r\nimport SettingsIcon from \"@mui/icons-material/Settings\";\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  IconButton,\r\n  Stack,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport { ConfirmDialog } from \"shared/components/confirm-dialog\";\r\nimport { removeAccount, updateAccountName } from \"shared/store\";\r\n\r\ninterface AccountSettingsProps {\r\n  accountName: string;\r\n}\r\n\r\nexport const AccountSettings = (props: AccountSettingsProps) => {\r\n  const { accountName } = props;\r\n  const [nextAccountName, setNextAccountName] = useState<string>(accountName);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  return (\r\n    <>\r\n      <IconButton onClick={() => setIsOpen(true)}>\r\n        <SettingsIcon />\r\n      </IconButton>\r\n      <Dialog open={isOpen} onClose={() => setIsOpen(false)}>\r\n        <DialogTitle>\r\n          <Stack direction={\"row\"} width=\"100%\" alignItems={\"center\"} justify-content={\"space-between\"}>\r\n            <Typography variant=\"h6\">{accountName} Settings</Typography>\r\n            <IconButton onClick={() => setIsOpen(false)}>\r\n              <Close />\r\n            </IconButton>\r\n          </Stack>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Stack spacing={1} marginTop={1}>\r\n            <TextField\r\n              label=\"Account Name\"\r\n              value={nextAccountName}\r\n              onChange={(event) => setNextAccountName(event.target.value)}\r\n              placeholder=\"\"\r\n            />\r\n          </Stack>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <ConfirmDialog onConfirm={() => removeAccount(accountName)} title={`Confirm Deleting ${accountName} Account`}>\r\n            <Button sx={{ marginRight: 10 }} color=\"error\">\r\n              Delete Account\r\n            </Button>\r\n          </ConfirmDialog>\r\n          <Button\r\n            disabled={!nextAccountName}\r\n            onClick={() => {\r\n              setIsOpen(false);\r\n            }}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            disabled={!nextAccountName}\r\n            onClick={() => {\r\n              accountName != nextAccountName && updateAccountName(accountName, nextAccountName);\r\n              setIsOpen(false);\r\n            }}\r\n          >\r\n            Save\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n","import { Alert, Box, Button, InputAdornment, Paper, Stack, TextField, Typography } from \"@mui/material\";\nimport Grid from \"@mui/system/Unstable_Grid\";\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo, useState } from \"react\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { Account } from \"shared/models/store/current\";\nimport { addAccountEntry, store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { createAccountColumnConfig } from \"./column-config\";\nimport { useMissingYears } from \"./hooks/useMissingYears\";\nimport { AccountSettings } from \"./settings\";\n\nexport const AccountTab = (props: { accountName: string }) => {\n  const { accountName } = props;\n  const account = useStore(store, (state) => state.wealth[accountName]) as Account;\n  const [date, setDate] = useState(getLocalDateTime());\n  const [amount, setAmount] = useState<number | null>(null);\n\n  const missingYears = useMissingYears(account);\n  const hasSameDate = useMemo(() => {\n    return !!account?.data?.find((x) => date.hasSame(DateTime.fromISO(x.date), \"day\"));\n  }, [account?.data, date]);\n\n  const onAddEntry = () => {\n    if (amount != null) {\n      addAccountEntry(accountName, date, amount);\n      setAmount(null);\n    }\n  };\n\n  const accountColumnConfig = useMemo(() => {\n    return createAccountColumnConfig(accountName);\n  }, [accountName]);\n\n  return (\n    <Stack height=\"100%\" spacing={2}>\n      <Stack direction={\"row\"}>\n        <Typography variant=\"h5\">{accountName}</Typography>\n        <Box sx={{ marginLeft: \"auto\" }}>\n          <AccountSettings key={accountName} accountName={accountName} />\n        </Box>\n      </Stack>\n      {missingYears.length > 0 && (\n        <Grid xs={12}>\n          <Paper elevation={3}>\n            <Alert severity=\"warning\">Ensure an entry for Jan 1st for {missingYears.join(\", \")}</Alert>\n          </Paper>\n        </Grid>\n      )}\n\n      <DatePicker\n        format={shortDate}\n        sx={{ color: \"white\" }}\n        label=\"Date\"\n        defaultValue={date}\n        onChange={(value) => value && setDate(value)}\n        disableFuture\n      />\n      <TextField\n        label=\"amount\"\n        value={amount ?? \"\"}\n        type=\"number\"\n        onChange={(event) => (event.target.value === \"\" ? setAmount(null) : setAmount(+event.target.value))}\n        InputProps={{\n          startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n        }}\n        placeholder=\"0\"\n      />\n      <Button disabled={amount === null || !date || hasSameDate} onClick={onAddEntry}>\n        Add Entry\n      </Button>\n\n      <AgGrid\n        reactiveCustomComponents\n        rowData={account.data}\n        columnDefs={accountColumnConfig}\n        id={account + \"-history\"}\n        autoSizeStrategy={{ type: \"fitGridWidth\" }}\n        onRowDataUpdated={(x) => x.api.sizeColumnsToFit()}\n        stopEditingWhenCellsLoseFocus\n      />\n    </Stack>\n  );\n};\n","import { DateTime } from \"luxon\";\nimport { AccountData } from \"shared/models/store/current\";\n\nexport const findNearestOnOrBefore = (date: DateTime, data: AccountData[]) => {\n  return data.find((x, idx, array) => {\n    if (idx == 0 && DateTime.fromISO(x.date).startOf(\"day\") >= date) {\n      return true;\n    }\n\n    if (\n      idx < array.length - 1 &&\n      DateTime.fromISO(x.date).startOf(\"day\") <= date &&\n      DateTime.fromISO(data[idx + 1].date).startOf(\"day\") > date\n    ) {\n      return true;\n    }\n\n    if (idx === array.length - 1) {\n      return true;\n    }\n  });\n};\n\nexport const findNearestIdxOnOrBefore = <T>(date: DateTime, data: T[], selector: (data: T) => DateTime) => {\n  return data.findIndex((x, idx, array) => {\n    if (idx == 0 && selector(x) >= date) {\n      return true;\n    }\n\n    if (idx < array.length - 1 && selector(x) <= date && selector(data[idx + 1]) > date) {\n      return true;\n    }\n\n    if (idx === array.length - 1) {\n      return true;\n    }\n  });\n};\n","import { DateTime } from \"luxon\";\nimport { Account, Mortgage } from \"shared/models/store/current\";\n\nexport const getGraphDates = (accounts: (Account | Mortgage)[]) => {\n  return [\n    ...new Set(\n      accounts.flatMap((x) => {\n        return x.data.map((x) => DateTime.fromISO(x.date).startOf(\"day\").toISO());\n      })\n    ),\n  ]\n    .map((x) => DateTime.fromISO(x!))\n    .sort((a, b) => a.toMillis() - b.toMillis()) as DateTime<true>[];\n};\n","import { DateTime } from \"luxon\";\nimport { Loan } from \"shared/models/store/current\";\n\nexport const calcLoanBalance = (date: DateTime, loan: Loan) => {\n  const { firstPaymentDate, paymentsPerYear, principal: principal, ratePct: rate, payment: monthlyPayment } = loan;\n  const annualizedRate = rate / paymentsPerYear;\n  const periods = date.diff(DateTime.fromISO(firstPaymentDate), \"months\").months;\n  const totalRate = (1 + annualizedRate) ** periods;\n  const balance = principal * totalRate - (monthlyPayment / annualizedRate) * (totalRate - 1);\n\n  return balance;\n};\n\nexport const calcEquity = (\n  ownershipPct: number,\n  houseValue: number | undefined,\n  loanBalance: number,\n  principal: number\n) => {\n  return houseValue ? houseValue * ownershipPct - loanBalance : principal - loanBalance;\n};\n","import { Button, InputAdornment, TextField } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo, useState } from \"react\";\nimport { addAccountEntry, store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\n\nexport const AddEntry = (props: { accountName: string }) => {\n  const { accountName } = props;\n  const [date, setDate] = useState<DateTime>();\n  const [amount, setAmount] = useState<number | null>(null);\n\n  const onAddEntry = () => {\n    if (date != undefined && amount != null) {\n      addAccountEntry(accountName, date, amount);\n      setAmount(null);\n    }\n  };\n\n  const account = useStore(store, (state) => state.wealth[accountName]);\n  const hasSameDate = useMemo(() => {\n    return !!account?.data?.find((x) => date?.hasSame(DateTime.fromISO(x.date), \"day\"));\n  }, [account?.data, date]);\n\n  return (\n    <Stack spacing={2}>\n      <DatePicker\n        defaultValue={getLocalDateTime()}\n        onChange={(date: DateTime | null) => {\n          date && setDate(date);\n        }}\n        disableFuture\n      />\n      <TextField\n        label=\"amount\"\n        value={amount ?? \"\"}\n        type=\"number\"\n        onChange={(event) => (event.target.value === \"\" ? setAmount(null) : setAmount(+event.target.value))}\n        InputProps={{\n          startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n        }}\n        placeholder=\"0\"\n      />\n      <Button disabled={amount === null || !date || hasSameDate} onClick={onAddEntry}>\n        Add Home Value\n      </Button>\n    </Stack>\n  );\n};\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\r\nimport { Button } from \"@mui/material\";\r\nimport { ColDef } from \"ag-grid-community\";\r\nimport { CustomCellRendererProps } from \"ag-grid-react\";\r\nimport { DateTime } from \"luxon\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { AccountData } from \"shared/models/store/current\";\r\nimport { removeAccountEntry } from \"shared/store\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\n\r\nexport const createAccountColumnConfig = (accountName: string): ColDef<AccountData>[] => [\r\n  {\r\n    headerName: \"Date\",\r\n    sort: \"desc\",\r\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\r\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\r\n  },\r\n  {\r\n    headerName: \"Home Value\",\r\n    cellRenderer: (x: CustomCellRendererProps<AccountData>) => <Cash value={x.value} placement=\"left\" />,\r\n    valueGetter: (x) => x.data?.value,\r\n    type: \"numericColumn\",\r\n  },\r\n  {\r\n    cellStyle: () => ({ display: \"inline-flex\", padding: \"0px\" }),\r\n    headerName: \"\",\r\n    width: 80,\r\n    sortable: false,\r\n    colId: \"actions\",\r\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\r\n      return (\r\n        <Button\r\n          onClick={() => {\r\n            props.data && removeAccountEntry(accountName, props.data);\r\n          }}\r\n          color=\"error\"\r\n          fullWidth\r\n        >\r\n          <DeleteForeverIcon />\r\n        </Button>\r\n      );\r\n    },\r\n  },\r\n];\r\n\r\ntype House = {\r\n  date: DateTime;\r\n  balance: number;\r\n  equity: number;\r\n};\r\n\r\nexport const mortgageColumnConfig: ColDef<House>[] = [\r\n  {\r\n    headerName: \"Date\",\r\n    sort: \"desc\",\r\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\r\n    valueGetter: (x) => x.data?.date,\r\n  },\r\n  {\r\n    headerName: \"Loan Balance\",\r\n    valueGetter: (x) => x.data?.balance.toFixed(2),\r\n    cellRenderer: (x: CustomCellRendererProps<House>) => <Cash value={x.value} placement=\"left\" />,\r\n    type: \"numericColumn\",\r\n  },\r\n  {\r\n    headerName: \"Equity\",\r\n    valueGetter: (x) => x.data?.equity.toFixed(2),\r\n    cellRenderer: (x: CustomCellRendererProps<House>) => <Cash value={x.value} placement=\"left\" />,\r\n    type: \"numericColumn\",\r\n  },\r\n];\r\n","import Close from \"@mui/icons-material/Close\";\r\nimport SettingsIcon from \"@mui/icons-material/Settings\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  IconButton,\r\n  Stack,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { DatePicker } from \"@mui/x-date-pickers\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useRef, useState } from \"react\";\r\nimport { ConfirmDialog } from \"shared/components/confirm-dialog\";\r\nimport { Loan } from \"shared/models/store/version-1\";\r\nimport { removeAccount, setLoan, store, updateAccountName } from \"shared/store\";\r\nimport { ZodIssue, z } from \"zod\";\r\n\r\nconst convertPct = (value: number) => {\r\n  return value > 1 ? value / 100 : value;\r\n};\r\n\r\nconst validator: z.ZodType<Loan> = z.object({\r\n  principal: z.number().min(0),\r\n  ratePct: z.number().min(0),\r\n  paymentsPerYear: z.number().min(0),\r\n  payment: z.number().min(0),\r\n  firstPaymentDate: z.string().datetime({ offset: true }),\r\n  ownershipPct: z.number().min(0),\r\n});\r\n\r\ninterface AccountSettingsProps {\r\n  accountName: string;\r\n}\r\n\r\nexport const AccountSettings = (props: AccountSettingsProps) => {\r\n  const { accountName } = props;\r\n  const [nextAccountName, setNextAccountName] = useState<string>(accountName);\r\n  const loan = useStore(store, (x) => {\r\n    const account = x.wealth[accountName];\r\n    if (\"loan\" in account) {\r\n      return account.loan;\r\n    }\r\n  });\r\n\r\n  const ref = useRef<Partial<Loan>>(loan ?? {});\r\n  const [error, setError] = useState<Partial<Record<keyof Loan, ZodIssue>>>({});\r\n\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const handleClose = () => {\r\n    setError({});\r\n    ref.current = loan ?? {};\r\n    setIsOpen(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton onClick={() => setIsOpen(true)}>\r\n        <SettingsIcon />\r\n      </IconButton>\r\n      <Dialog open={isOpen} onClose={handleClose}>\r\n        <DialogTitle sx={{ width: \"100%\" }}>\r\n          <Box display={\"flex\"} width=\"100%\" alignItems={\"center\"} sx={{ justifyContent: \"space-between\" }}>\r\n            <Typography variant=\"h6\">{accountName} Settings</Typography>\r\n            <IconButton sx={{ marginLeft: \"auto\" }} onClick={handleClose}>\r\n              <Close />\r\n            </IconButton>\r\n          </Box>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Stack spacing={2} marginTop={1}>\r\n            <TextField\r\n              label=\"Account Name\"\r\n              value={nextAccountName}\r\n              onChange={(event) => setNextAccountName(event.target.value)}\r\n              placeholder=\"\"\r\n            />\r\n            <DatePicker\r\n              defaultValue={ref.current?.firstPaymentDate ? DateTime.fromISO(ref.current.firstPaymentDate) : null}\r\n              label=\"First Payment\"\r\n              slotProps={{\r\n                textField: {\r\n                  error: !!error.firstPaymentDate,\r\n                },\r\n              }}\r\n              onChange={(value: DateTime | null) => {\r\n                if (value) {\r\n                  ref.current.firstPaymentDate = value.startOf(\"day\").toISO()!;\r\n                }\r\n              }}\r\n            />\r\n            <TextField\r\n              error={!!error.principal}\r\n              defaultValue={loan?.principal}\r\n              onChange={(event) => {\r\n                ref.current.principal = +event.target.value;\r\n              }}\r\n              variant=\"outlined\"\r\n              label=\"Principal\"\r\n              type=\"number\"\r\n            />\r\n            <TextField\r\n              error={!!error.ratePct}\r\n              defaultValue={loan?.ratePct}\r\n              onChange={(event) => {\r\n                ref.current.ratePct = convertPct(+event.target.value);\r\n              }}\r\n              variant=\"outlined\"\r\n              label=\"Rate\"\r\n              type=\"number\"\r\n            />\r\n            <TextField\r\n              error={!!error.paymentsPerYear}\r\n              defaultValue={loan?.paymentsPerYear}\r\n              onChange={(event) => {\r\n                ref.current.paymentsPerYear = +event.target.value;\r\n              }}\r\n              variant=\"outlined\"\r\n              label=\"Payments Per Year\"\r\n              type=\"number\"\r\n            />\r\n            <TextField\r\n              defaultValue={loan?.payment}\r\n              error={!!error.payment}\r\n              onChange={(event) => {\r\n                ref.current.payment = +event.target.value;\r\n              }}\r\n              variant=\"outlined\"\r\n              label=\"Payment\"\r\n              type=\"number\"\r\n            />\r\n            <TextField\r\n              defaultValue={loan?.ownershipPct}\r\n              error={!!error.ownershipPct}\r\n              onChange={(event) => {\r\n                ref.current.ownershipPct = convertPct(+event.target.value);\r\n              }}\r\n              variant=\"outlined\"\r\n              label=\"Ownership (%)\"\r\n              type=\"number\"\r\n            />\r\n          </Stack>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <ConfirmDialog\r\n            onConfirm={() => removeAccount(accountName)}\r\n            title={`Confirm Deleting ${accountName} Mortgage`}\r\n          >\r\n            <Button sx={{ marginRight: 10 }} color=\"error\">\r\n              Delete Account\r\n            </Button>\r\n          </ConfirmDialog>\r\n          <Button disabled={!nextAccountName} onClick={handleClose}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            disabled={!nextAccountName}\r\n            onClick={() => {\r\n              const parsed = validator.safeParse(ref.current);\r\n              if (parsed.success) {\r\n                accountName != nextAccountName && updateAccountName(accountName, nextAccountName);\r\n                setLoan(accountName, parsed.data);\r\n                handleClose();\r\n              } else {\r\n                const issues = Object.groupBy(parsed.error.issues, (x) => x.path.join(\"\"));\r\n                setError(issues);\r\n              }\r\n            }}\r\n          >\r\n            Save\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n","import { Typography } from \"@mui/material\";\r\nimport { Box, Stack } from \"@mui/system\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { useMemo } from \"react\";\r\nimport { AgGrid } from \"shared/components/ag-grid\";\r\nimport { Mortgage } from \"shared/models/store/current\";\r\nimport { store } from \"shared/store\";\r\nimport { findNearestOnOrBefore } from \"shared/utility/find-nearest-on-or-before\";\r\nimport { getGraphDates } from \"shared/utility/get-graph-dates\";\r\nimport { calcEquity, calcLoanBalance } from \"shared/utility/mortgage-calc\";\r\nimport { AddEntry } from \"./add-entry\";\r\nimport { createAccountColumnConfig, mortgageColumnConfig } from \"./column-config\";\r\nimport { AccountSettings } from \"./settings\";\r\n\r\nexport const MortgageTab = (props: { accountName: string }) => {\r\n  const { accountName } = props;\r\n\r\n  const account = useStore(store, (state) => state.wealth[accountName]) as Mortgage;\r\n\r\n  const allAccounts = useStore(store, (x) => x.wealth);\r\n\r\n  const accountColumnConfig = useMemo(() => {\r\n    return createAccountColumnConfig(accountName);\r\n  }, [accountName]);\r\n\r\n  const mortgageData = useMemo(() => {\r\n    if (!account?.loan) {\r\n      return [];\r\n    }\r\n\r\n    return getGraphDates(Object.values(allAccounts)).map((date) => {\r\n      const loanBalance = calcLoanBalance(date, account.loan!);\r\n      return {\r\n        date,\r\n        balance: loanBalance,\r\n        equity: calcEquity(\r\n          account.loan!.ownershipPct,\r\n          findNearestOnOrBefore(date, account.data)?.value,\r\n          loanBalance,\r\n          account.loan!.principal\r\n        ),\r\n      };\r\n    });\r\n  }, [account, allAccounts]);\r\n\r\n  return (\r\n    <Stack height=\"100%\" spacing={2}>\r\n      <Stack direction={\"row\"}>\r\n        <Typography variant=\"h5\">{accountName}</Typography>\r\n        <Box sx={{ marginLeft: \"auto\" }}>\r\n          <AccountSettings key={accountName} accountName={accountName} />\r\n        </Box>\r\n      </Stack>\r\n      <AddEntry accountName={accountName} />\r\n      <AgGrid\r\n        reactiveCustomComponents\r\n        rowData={account?.data ?? []}\r\n        columnDefs={accountColumnConfig}\r\n        id={account + \"-history\"}\r\n        autoSizeStrategy={{ type: \"fitGridWidth\" }}\r\n      />\r\n\r\n      <AgGrid\r\n        rowData={mortgageData}\r\n        columnDefs={mortgageColumnConfig}\r\n        id={account + \"-history\"}\r\n        autoSizeStrategy={{ type: \"fitGridWidth\" }}\r\n      />\r\n    </Stack>\r\n  );\r\n};\r\n","import { Box, Tab, Tabs } from \"@mui/material\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { useEffect, useState } from \"react\";\nimport { store } from \"shared/store\";\nimport { NewAccount } from \"./new-account\";\nimport { AccountTab } from \"./tab-types/account/account\";\nimport { MortgageTab } from \"./tab-types/mortgage\";\n\nexport const AccountTabs = () => {\n  const accounts = useStore(store, (x) => x.wealth);\n  const firstAccount = Object.keys(accounts)?.[0];\n  const [account, setAccount] = useState<string>(firstAccount);\n\n  useEffect(() => {\n    if (!accounts[account]) {\n      setAccount(Object.keys(accounts)?.[0] ?? \"\");\n    }\n  }, [account, accounts]);\n\n  return (\n    <Box display=\"flex\" width=\"100%\" height=\"100%\" gap={2}>\n      <Box display={\"flex\"} flexDirection={\"column\"} flex={\"0 1 auto\"}>\n        <Tabs\n          orientation=\"vertical\"\n          value={account}\n          onChange={(_, value) => {\n            setAccount(value as string);\n          }}\n        >\n          {Object.keys(accounts).map((account) => {\n            return <Tab key={account} value={account} label={account} />;\n          })}\n          <Tab component={NewAccount} />\n        </Tabs>\n      </Box>\n      <Box flex={\"1 1 auto\"} overflow={\"auto\"}>\n        {accounts[account]?.type === \"account\" && <AccountTab accountName={account} />}\n        {accounts[account]?.type === \"mortgage\" && <MortgageTab accountName={account} />}\n      </Box>\n    </Box>\n  );\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\n\nexport const useEarliestAccountEntry = () => {\n  const accounts = useStore(store, (x) => x.wealth);\n  return DateTime.fromMillis(\n    Object.values(accounts)\n      .map((x) => {\n        if (x.type === \"account\") {\n          return x.data[0]?.date ? DateTime.fromISO(x.data[0].date) : getLocalDateTime();\n        }\n        return getLocalDateTime();\n      })\n      .reduce((acc, curr) => Math.min(acc, curr?.toMillis() ?? Infinity), getLocalDateTime().toMillis())\n  );\n};\n","import { DateTime } from \"luxon\";\nimport { Account, Mortgage } from \"shared/models/store/current\";\nimport { findNearestOnOrBefore } from \"./find-nearest-on-or-before\";\nimport { calcEquity, calcLoanBalance } from \"./mortgage-calc\";\n\nconst getMortgageValue = (date: DateTime, mortgage: Mortgage) => {\n  if (!mortgage.loan) {\n    return 0;\n  }\n  const entry = findNearestOnOrBefore(date, mortgage.data);\n  if (entry?.date && mortgage.data[0] === entry && DateTime.fromISO(entry.date).startOf(\"day\") > date) {\n    return 0;\n  }\n  const { ownershipPct, principal } = mortgage.loan;\n  const balance = calcLoanBalance(date, mortgage.loan);\n  return calcEquity(ownershipPct, entry?.value, balance, principal);\n};\n\nconst getAccountValue = (date: DateTime, account: Account) => {\n  const entry = findNearestOnOrBefore(date, account.data);\n  if (entry?.date && account.data[0] === entry && DateTime.fromISO(entry.date).startOf(\"day\") > date) {\n    return 0;\n  }\n  return entry?.value;\n};\n\nexport const getGraphValue = (date: DateTime, account: Account | Mortgage) => {\n  switch (account.type) {\n    case \"account\":\n      return getAccountValue(date, account);\n    case \"mortgage\":\n      return getMortgageValue(date, account);\n  }\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { getGraphDates } from \"shared/utility/get-graph-dates\";\nimport { getGraphValue } from \"shared/utility/get-graph-value\";\n\nexport const useGraphData = () => {\n  const wealth = useStore(store, (x) => x.wealth);\n\n  return useMemo(() => {\n    const dates = getGraphDates(Object.values(wealth));\n    const accounts = Object.entries(wealth);\n    const graphData = dates.map((date) => {\n      return accounts.reduce(\n        (acc, [accountName, account]) => {\n          const value = getGraphValue(date, account);\n\n          if (value) {\n            acc[accountName] = value;\n            acc[\"total\"] = (acc[\"total\"] as number) + value;\n          } else {\n            acc[accountName] = null;\n          }\n\n          acc[\"date\"] = date.toJSDate();\n          return acc;\n        },\n        { total: 0 } as Record<string, number | Date | null>\n      );\n    });\n\n    graphData.forEach((x, idx, arr) => {\n      if (idx < arr.length - 1) {\n        Object.keys(x).forEach((key) => {\n          if (x[key] === null && arr[idx + 1][key] !== null) {\n            x[key] = 0;\n          }\n        });\n      }\n    });\n\n    const firstNonZero = graphData.findIndex((x) => (x[\"total\"] as number) > 0);\n    return graphData.slice(firstNonZero);\n  }, [wealth]);\n};\n","import { Box } from \"@mui/system\";\r\nimport { DatePicker } from \"@mui/x-date-pickers\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { AgAreaSeriesOptions, AgCartesianChartOptions, AgLineSeriesOptions, time } from \"ag-charts-community\";\r\nimport { AgChartsReact } from \"ag-charts-react\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo, useState } from \"react\";\r\nimport { useEarliestAccountEntry } from \"shared/hooks/use-earliest-account-entry\";\r\nimport { store } from \"shared/store\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { formatCashShort } from \"shared/utility/format-cash\";\r\nimport { useGraphData } from \"./use-graph-data\";\r\n\r\nexport const WealthChart = () => {\r\n  const wealth = useStore(store, (x) => x.wealth);\r\n  const data = useGraphData();\r\n  const initialFromDate = useEarliestAccountEntry().startOf(\"year\");\r\n  const intialToDate = getLocalDateTime().endOf(\"year\");\r\n  const [fromDate, setFromDate] = useState<DateTime>(initialFromDate);\r\n  const [toDate, setToDate] = useState<DateTime>(intialToDate);\r\n\r\n  const filteredData = useMemo(() => {\r\n    return data.filter((x) => {\r\n      const year = (x[\"date\"] as Date).getFullYear();\r\n      return year >= fromDate.year && year <= toDate.year;\r\n    });\r\n  }, [data, fromDate.year, toDate.year]);\r\n\r\n  const series = useMemo(() => {\r\n    return [\r\n      ...Object.keys(wealth).map((x) => {\r\n        return {\r\n          stacked: true,\r\n          type: \"area\",\r\n          xKey: \"date\",\r\n          yKey: x,\r\n          yName: x,\r\n          tooltip: {\r\n            renderer: ({ datum, yKey, xKey }) => ({\r\n              content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCashShort(datum[yKey])}`,\r\n            }),\r\n          },\r\n        } as AgAreaSeriesOptions;\r\n      }),\r\n      {\r\n        type: \"line\",\r\n        xKey: \"date\",\r\n        yKey: \"total\",\r\n        yName: \"Total\",\r\n        tooltip: {\r\n          renderer: ({ datum, yKey, xKey }) => ({\r\n            content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCashShort(datum[yKey])}`,\r\n          }),\r\n        },\r\n      } as AgLineSeriesOptions,\r\n    ];\r\n  }, [wealth]);\r\n\r\n  const options: AgCartesianChartOptions = useMemo(\r\n    () => ({\r\n      theme: \"ag-default-dark\",\r\n      title: {\r\n        text: `Total Wealth ${formatCashShort((data[data.length - 1]?.total ?? 0) as number)}`,\r\n      },\r\n      data: filteredData,\r\n      axes: [\r\n        {\r\n          type: \"time\",\r\n          position: \"bottom\",\r\n          label: {\r\n            format: \"%Y\",\r\n          },\r\n          nice: false,\r\n          tick: {\r\n            interval: time.year.every(1, { snapTo: \"start\" }),\r\n          },\r\n        },\r\n        {\r\n          type: \"number\",\r\n          position: \"left\",\r\n        },\r\n      ],\r\n      series,\r\n    }),\r\n    [data, filteredData, series]\r\n  );\r\n  return (\r\n    <Box position={\"relative\"} height=\"100%\" width=\"100%\">\r\n      <AgChartsReact options={options} />\r\n      <Box position={\"absolute\"} top={16} right={16} zIndex={100} width={250} display={\"flex\"} gap={2}>\r\n        <DatePicker\r\n          sx={{ backgroundColor: \"#121212\" }}\r\n          views={[\"year\"]}\r\n          label=\"From\"\r\n          minDate={initialFromDate}\r\n          maxDate={intialToDate}\r\n          value={fromDate}\r\n          onChange={(value) => {\r\n            value && setFromDate(value);\r\n          }}\r\n        />\r\n        <DatePicker\r\n          label=\"To\"\r\n          sx={{ backgroundColor: \"#121212\" }}\r\n          views={[\"year\"]}\r\n          value={toDate}\r\n          minDate={initialFromDate}\r\n          maxDate={intialToDate}\r\n          onChange={(value) => {\r\n            value && setToDate(value);\r\n          }}\r\n        />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","import { Box } from \"@mui/material\";\nimport { AccountTabs } from \"./account-tabs\";\nimport { WealthChart } from \"./wealth-chart\";\n\nexport const NetWealth = () => {\n  return (\n    <Box display={\"flex\"} height=\"100%\" width={\"100%\"} overflow={\"hidden\"} gap={2}>\n      <Box flex=\"0 1 auto\">\n        <Box\n          width={650}\n          height={\"100%\"}\n          sx={{\n            padding: 2,\n            border: \"1px solid rgba(255,255,255,0.1)\",\n            borderRadius: 2,\n            minWidth: 480,\n            backgroundColor: \"#121212\",\n            boxShadow: \"2px 3px 9px 1px #12121252\",\n          }}\n        >\n          <AccountTabs />\n        </Box>\n      </Box>\n      <Box flex=\"1 1 auto\" overflow={\"hidden\"} width=\"100%\" height={\"100%\"}>\n        <WealthChart />\n      </Box>\n    </Box>\n  );\n};\n","import { Box, Divider, Stack, Typography } from \"@mui/material\";\r\nimport { ReactNode } from \"react\";\r\n\r\nexport const Card = (props: { title: ReactNode; children?: ReactNode }) => {\r\n  const { title, children } = props;\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        border: \"1px solid rgba(255,255,255,0.1)\",\r\n        borderRadius: 2,\r\n        minWidth: 0,\r\n        backgroundColor: \"#121212\",\r\n        boxShadow: \"2px 3px 9px 1px #12121252\",\r\n\r\n        minHeight: \"max-content\",\r\n      }}\r\n    >\r\n      <Typography sx={{ paddingBottom: 1, paddingLeft: 2, paddingTop: 1, display: \"flex\" }} variant=\"h5\">\r\n        {title}\r\n      </Typography>\r\n\r\n      {children && (\r\n        <>\r\n          <Divider />\r\n          <Stack\r\n            padding={1}\r\n            direction={\"row\"}\r\n            spacing={0.5}\r\n            width={\"100%\"}\r\n            minHeight={80}\r\n            justifyContent={\"space-between\"}\r\n          >\r\n            {children}\r\n          </Stack>\r\n        </>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n","import { Box } from \"@mui/system\";\nimport { useMemo } from \"react\";\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\nimport { Cash } from \"./cash\";\n\ninterface CashProps {\n  min?: number;\n  max?: number;\n  fallback?: number;\n  disableTooltip?: boolean;\n  compact?: boolean;\n  tooltip?: string;\n\n  placement?:\n    | \"top\"\n    | \"right\"\n    | \"bottom\"\n    | \"left\"\n    | \"bottom-end\"\n    | \"bottom-start\"\n    | \"left-end\"\n    | \"left-start\"\n    | \"right-end\"\n    | \"right-start\"\n    | \"top-end\"\n    | \"top-start\"\n    | undefined;\n}\nexport const CashRange = ({ min, max, fallback, disableTooltip, compact = true }: CashProps) => {\n  const showRange = useMemo(() => {\n    const minFormatted = compact ? formatCashShort(min ?? 0) : formatCash(min ?? 0);\n    const maxFormatted = compact ? formatCashShort(max ?? 0) : formatCash(max ?? 0);\n    return minFormatted !== maxFormatted;\n  }, [compact, max, min]);\n\n  return (\n    <Box>\n      {!showRange && (\n        <Cash\n          fallback={fallback}\n          value={max}\n          tooltip={min != max ? `${formatCash(min ?? 0)} - ` : undefined}\n          disableTooltip={disableTooltip}\n          compact={compact}\n        />\n      )}\n      {showRange && (\n        <>\n          <Cash value={min} fallback={fallback} disableTooltip={disableTooltip} compact={compact} />\n          <span> - </span>\n          <Cash value={max} fallback={fallback} disableTooltip={disableTooltip} compact={compact} />\n        </>\n      )}\n    </Box>\n  );\n};\n","export const formatPercent = new Intl.NumberFormat(\"en-us\", {\r\n  style: \"percent\",\r\n  maximumFractionDigits: 1,\r\n}).format;\r\n\r\nexport const formatPercentKatex = (value: number) =>\r\n  new Intl.NumberFormat(\"en-us\", {\r\n    style: \"percent\",\r\n    maximumFractionDigits: 1,\r\n  })\r\n    .format(value)\r\n    .replace(\"%\", \"\\\\%\");\r\n","import { Box } from \"@mui/system\";\nimport { ReactNode } from \"react\";\nimport { formatPercent } from \"shared/utility/format-percent\";\n\ninterface PercentProps {\n  value?: number;\n  probability?: number;\n  fallback?: ReactNode;\n}\n\nconst getColor = (probability?: number) => {\n  if (!probability) {\n    return \"inherit\";\n  }\n  if (probability >= 0.5) {\n    return \"green\";\n  }\n  if (probability >= 0.25) {\n    return \"orange\";\n  }\n  return \"rgb(244, 67, 54)\";\n};\n\nexport const Percent = ({ value, probability, fallback }: PercentProps) => {\n  return <Box color={getColor(probability)}>{value != undefined ? formatPercent(value) : fallback}</Box>;\n};\n","import { Box } from \"@mui/system\";\nimport { Percent } from \"./percent\";\n\ninterface PercentProps {\n  min?: number;\n  max?: number;\n  fallback?: number;\n}\n\nexport const PercentRange = ({ min, max, fallback }: PercentProps) => {\n  return (\n    <Box>\n      {(max ?? 0) / (min ?? 1) <= 1.005 && <Percent fallback={fallback} value={max} />}\n      {(max ?? 0) / (min ?? 1) > 1.005 && (\n        <>\n          <Percent value={min} fallback={fallback} />\n          <span> - </span>\n          <Percent value={max} fallback={fallback} />\n        </>\n      )}\n    </Box>\n  );\n};\n","import { Box } from \"@mui/material\";\r\nimport { ReactNode } from \"react\";\r\n\r\ninterface CellProps {\r\n  children?: ReactNode;\r\n  secondaryValue?: ReactNode;\r\n  tertiaryValue?: ReactNode;\r\n  title: ReactNode;\r\n  className?: string;\r\n}\r\n\r\nexport const Value = (props: CellProps) => {\r\n  const { children, secondaryValue, tertiaryValue, title, className } = props;\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: \"flex\",\r\n        minWidth: 145,\r\n        height: 64,\r\n        padding: \"0px 8px\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"flex-start\",\r\n        gap: 0.5,\r\n        flexShrink: 0,\r\n      }}\r\n      className={className}\r\n    >\r\n      <Box display={\"flex\"} alignItems={\"center\"} gap={0.5}>\r\n        <Box fontSize={18} fontWeight={700} lineHeight={\"20px\"}>\r\n          {children ? children : \"?\"}\r\n        </Box>\r\n        {!!(secondaryValue ?? tertiaryValue) && (\r\n          <Box\r\n            alignSelf={\"flex-end\"}\r\n            fontSize={12}\r\n            fontWeight={500}\r\n            lineHeight={\"16px\"}\r\n            textTransform={\"uppercase\"}\r\n            color={\"#888\"}\r\n          >\r\n            {secondaryValue ?? tertiaryValue}\r\n          </Box>\r\n        )}\r\n      </Box>\r\n      <Box fontSize={12} fontWeight={500} lineHeight={\"16px\"} textTransform={\"uppercase\"}>\r\n        {title}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","import { Box } from \"@mui/material\";\r\nimport { DateTime } from \"luxon\";\r\nimport { CashRange } from \"shared/components/formatters/cash-range\";\r\nimport { Percent } from \"shared/components/formatters/percent\";\r\nimport { PercentRange } from \"shared/components/formatters/percent-range\";\r\nimport { Value } from \"shared/components/formatters/value\";\r\nimport { Cluster } from \"shared/hooks/use-clusters\";\r\n\r\ninterface ClusterValueProps extends Cluster {\r\n  compact?: boolean;\r\n  className?: string;\r\n}\r\n\r\nexport const ClusterValue = (props: ClusterValueProps) => {\r\n  const { min, max, probability, title, compact, className } = props;\r\n  return (\r\n    <Value\r\n      className={className}\r\n      title={\r\n        <Box display={\"flex\"} gap={1}>\r\n          <span>{title}</span>\r\n          {probability < 1 && probability >= 0 && <Percent probability={probability} value={probability} />}\r\n        </Box>\r\n      }\r\n    >\r\n      {min < 1 && min > 0 && <PercentRange min={min} max={max} />}\r\n      {min > 1 && <CashRange compact={compact} min={min} max={max} />}\r\n      {min === 0 && 0}\r\n    </Value>\r\n  );\r\n};\r\n\r\nexport const ClusterValues = (props: { clusters?: Cluster[]; eventDate?: DateTime; compact?: boolean }) => {\r\n  const { clusters, eventDate, compact = true } = props;\r\n  return clusters?.map((x, i, arr) => {\r\n    const title = arr.length === 1 && (eventDate?.diffNow().toMillis() ?? -1) > 0 ? \"Expected\" : x.title;\r\n    return <ClusterValue {...x} title={title} compact={compact} key={i} />;\r\n  });\r\n};\r\n","import { Duration, DurationUnit } from \"luxon\";\r\n\r\nexport function toHuman(dur: Duration, smallestUnit: DurationUnit = \"seconds\"): string {\r\n  const units = [\"years\", \"months\", \"days\", \"hours\", \"minutes\", \"seconds\", \"milliseconds\"] as DurationUnit[];\r\n  const smallestIdx = units.indexOf(smallestUnit);\r\n  const entries = Object.entries(\r\n    dur\r\n      .shiftTo(...units)\r\n      .normalize()\r\n      .toObject()\r\n  ).filter(([, amount], idx) => amount > 0 && idx <= smallestIdx);\r\n  const dur2 = Duration.fromObject(entries.length === 0 ? { [smallestUnit]: 0 } : Object.fromEntries(entries));\r\n  return dur2.toHuman().replaceAll(\",\", \"\");\r\n}\r\n","import { Box, Tooltip } from \"@mui/material\";\nimport { DateTime } from \"luxon\";\nimport { ReactNode, useMemo } from \"react\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { toHuman } from \"shared/utility/to-human\";\n\ninterface DurationProps {\n  dateTime?: DateTime;\n  children?: ReactNode;\n  variant?: \"countdown\" | \"date\";\n  dateFormat?: string;\n}\nexport const CountDown = (props: DurationProps) => {\n  const { dateTime, children, variant = \"countdown\", dateFormat = shortDate } = props;\n\n  const countDownStr = useMemo(() => {\n    if (!dateTime) {\n      return \"??\";\n    }\n    if (variant === \"countdown\") {\n      const diff = dateTime?.diff(getLocalDateTime(), [\"years\", \"months\", \"days\", \"hours\"]);\n\n      return toHuman(diff, \"days\");\n    }\n\n    return dateTime?.toFormat(dateFormat);\n  }, [dateFormat, dateTime, variant]);\n\n  const tooltipStr = useMemo(() => {\n    if (!dateTime) {\n      return \"??\";\n    }\n\n    if (variant === \"countdown\") {\n      return dateTime?.toFormat(dateFormat);\n    }\n    const diff = dateTime?.diff(getLocalDateTime(), [\"years\", \"months\", \"days\", \"hours\"]);\n\n    return toHuman(diff, \"days\");\n  }, [dateFormat, dateTime, variant]);\n\n  const countDownColor = useMemo(() => {\n    if (!dateTime) {\n      return \"white\";\n    }\n\n    const days = dateTime.diffNow(\"days\").days;\n    if (days < 30) {\n      return \"green\";\n    } else if (days <= 60) {\n      return \"orange\";\n    }\n\n    return \"rgb(244, 67, 54)\";\n  }, [dateTime]);\n\n  return dateTime && dateTime > getLocalDateTime() ? (\n    <Tooltip title={tooltipStr}>\n      <Box color={countDownColor}>{countDownStr}</Box>\n    </Tooltip>\n  ) : (\n    children\n  );\n};\n","import { Store } from \"@tanstack/store\";\nimport { Scenario } from \"shared/models/scenario\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\n\ninterface ScenarioStore {\n  scenarios: Partial<Record<number, Scenario[]>>;\n  loading: boolean;\n  minYear: number;\n  maxYear: number;\n}\n\nconst year = getLocalDateTime().year;\nexport const scenarioStore = new Store<ScenarioStore>({\n  loading: true,\n  maxYear: year,\n  minYear: year,\n  scenarios: {},\n});\n","export function makeMatrix(columns: number, rows: number) {\r\n  const matrix = [];\r\n  for (let i = 0; i < columns; i++) {\r\n    const column = [];\r\n    for (let j = 0; j < rows; j++) {\r\n      column.push(0);\r\n    }\r\n    matrix.push(column);\r\n  }\r\n  return matrix;\r\n}\r\n","export function numericSort<T>(x: T[], selector: (data: T) => number) {\r\n  return x.toSorted(function (a, b) {\r\n    return selector(a) - selector(b);\r\n  });\r\n}\r\n","export function uniqueCountSorted<T>(x: T[], selector: (x: T) => number) {\r\n  let uniqueValueCount = 0,\r\n    lastSeenValue;\r\n  for (let i = 0; i < x.length; i++) {\r\n    const value = selector(x[i]);\r\n    if (i === 0 || value !== lastSeenValue) {\r\n      lastSeenValue = value;\r\n      uniqueValueCount++;\r\n    }\r\n  }\r\n  return uniqueValueCount;\r\n}\r\n","import { makeMatrix } from \"./make-matrix\";\r\nimport { numericSort } from \"./numeric-sort\";\r\nimport { uniqueCountSorted } from \"./unique-count-sorted\";\r\n\r\n/**\r\n * Generates incrementally computed values based on the sums and sums of\r\n * squares for the data array\r\n *\r\n * @private\r\n * @param {number} j\r\n * @param {number} i\r\n * @param {Array<number>} sums\r\n * @param {Array<number>} sumsOfSquares\r\n * @return {number}\r\n * @example\r\n * ssq(0, 1, [-1, 0, 2], [1, 1, 5]);\r\n */\r\nfunction ssq(j: number, i: number, sums: number[], sumsOfSquares: number[]) {\r\n  let sji; // s(j, i)\r\n  if (j > 0) {\r\n    const muji = (sums[i] - sums[j - 1]) / (i - j + 1); // mu(j, i)\r\n    sji = sumsOfSquares[i] - sumsOfSquares[j - 1] - (i - j + 1) * muji * muji;\r\n  } else {\r\n    sji = sumsOfSquares[i] - (sums[i] * sums[i]) / (i + 1);\r\n  }\r\n  if (sji < 0) {\r\n    return 0;\r\n  }\r\n  return sji;\r\n}\r\n\r\n/**\r\n * Function that recursively divides and conquers computations\r\n * for cluster j\r\n *\r\n * @private\r\n * @param {number} iMin Minimum index in cluster to be computed\r\n * @param {number} iMax Maximum index in cluster to be computed\r\n * @param {number} cluster Index of the cluster currently being computed\r\n * @param {Array<Array<number>>} matrix\r\n * @param {Array<Array<number>>} backtrackMatrix\r\n * @param {Array<number>} sums\r\n * @param {Array<number>} sumsOfSquares\r\n */\r\nfunction fillMatrixColumn(\r\n  iMin: number,\r\n  iMax: number,\r\n  cluster: number,\r\n  matrix: number[][],\r\n  backtrackMatrix: number[][],\r\n  sums: number[],\r\n  sumsOfSquares: number[]\r\n) {\r\n  if (iMin > iMax) {\r\n    return;\r\n  }\r\n\r\n  // Start at midpoint between iMin and iMax\r\n  const i = Math.floor((iMin + iMax) / 2);\r\n\r\n  matrix[cluster][i] = matrix[cluster - 1][i - 1];\r\n  backtrackMatrix[cluster][i] = i;\r\n\r\n  let jlow = cluster; // the lower end for j\r\n\r\n  if (iMin > cluster) {\r\n    jlow = Math.max(jlow, backtrackMatrix[cluster][iMin - 1] || 0);\r\n  }\r\n  jlow = Math.max(jlow, backtrackMatrix[cluster - 1][i] || 0);\r\n\r\n  let jhigh = i - 1; // the upper end for j\r\n  if (iMax < matrix[0].length - 1) {\r\n    jhigh = Math.min(jhigh, backtrackMatrix[cluster][iMax + 1] || 0);\r\n  }\r\n\r\n  let sji;\r\n  let sjlowi;\r\n  let ssqjlow;\r\n  let ssqj;\r\n  for (let j = jhigh; j >= jlow; --j) {\r\n    sji = ssq(j, i, sums, sumsOfSquares);\r\n\r\n    if (sji + matrix[cluster - 1][jlow - 1] >= matrix[cluster][i]) {\r\n      break;\r\n    }\r\n\r\n    // Examine the lower bound of the cluster border\r\n    sjlowi = ssq(jlow, i, sums, sumsOfSquares);\r\n\r\n    ssqjlow = sjlowi + matrix[cluster - 1][jlow - 1];\r\n\r\n    if (ssqjlow < matrix[cluster][i]) {\r\n      // Shrink the lower bound\r\n      matrix[cluster][i] = ssqjlow;\r\n      backtrackMatrix[cluster][i] = jlow;\r\n    }\r\n    jlow++;\r\n\r\n    ssqj = sji + matrix[cluster - 1][j - 1];\r\n    if (ssqj < matrix[cluster][i]) {\r\n      matrix[cluster][i] = ssqj;\r\n      backtrackMatrix[cluster][i] = j;\r\n    }\r\n  }\r\n\r\n  fillMatrixColumn(iMin, i - 1, cluster, matrix, backtrackMatrix, sums, sumsOfSquares);\r\n  fillMatrixColumn(i + 1, iMax, cluster, matrix, backtrackMatrix, sums, sumsOfSquares);\r\n}\r\n\r\n/**\r\n * Initializes the main matrices used in Ckmeans and kicks\r\n * off the divide and conquer cluster computation strategy\r\n *\r\n * @private\r\n * @param {Array<number>} data sorted array of values\r\n * @param {Array<Array<number>>} matrix\r\n * @param {Array<Array<number>>} backtrackMatrix\r\n */\r\nfunction fillMatrices<T>(data: T[], matrix: number[][], backtrackMatrix: number[][], selector: (x: T) => number) {\r\n  const nValues = matrix[0].length;\r\n\r\n  // Shift values by the median to improve numeric stability\r\n  const shift = selector(data[Math.floor(nValues / 2)]);\r\n\r\n  // Cumulative sum and cumulative sum of squares for all values in data array\r\n  const sums: number[] = [];\r\n  const sumsOfSquares: number[] = [];\r\n\r\n  // Initialize first column in matrix & backtrackMatrix\r\n  for (let i = 0, shiftedValue; i < nValues; ++i) {\r\n    shiftedValue = selector(data[i]) - shift;\r\n    if (i === 0) {\r\n      sums.push(shiftedValue);\r\n      sumsOfSquares.push(shiftedValue * shiftedValue);\r\n    } else {\r\n      sums.push(sums[i - 1] + shiftedValue);\r\n      sumsOfSquares.push(sumsOfSquares[i - 1] + shiftedValue * shiftedValue);\r\n    }\r\n\r\n    // Initialize for cluster = 0\r\n    matrix[0][i] = ssq(0, i, sums, sumsOfSquares);\r\n    backtrackMatrix[0][i] = 0;\r\n  }\r\n\r\n  // Initialize the rest of the columns\r\n  let iMin;\r\n  for (let cluster = 1; cluster < matrix.length; ++cluster) {\r\n    if (cluster < matrix.length - 1) {\r\n      iMin = cluster;\r\n    } else {\r\n      // No need to compute matrix[K-1][0] ... matrix[K-1][N-2]\r\n      iMin = nValues - 1;\r\n    }\r\n\r\n    fillMatrixColumn(iMin, nValues - 1, cluster, matrix, backtrackMatrix, sums, sumsOfSquares);\r\n  }\r\n}\r\n\r\n/**\r\n * Ckmeans clustering is an improvement on heuristic-based clustering\r\n * approaches like Jenks. The algorithm was developed in\r\n * [Haizhou Wang and Mingzhou Song](http://journal.r-project.org/archive/2011-2/RJournal_2011-2_Wang+Song.pdf)\r\n * as a [dynamic programming](https://en.wikipedia.org/wiki/Dynamic_programming) approach\r\n * to the problem of clustering numeric data into groups with the least\r\n * within-group sum-of-squared-deviations.\r\n *\r\n * Minimizing the difference within groups - what Wang & Song refer to as\r\n * `withinss`, or within sum-of-squares, means that groups are optimally\r\n * homogenous within and the data is split into representative groups.\r\n * This is very useful for visualization, where you may want to represent\r\n * a continuous variable in discrete color or style groups. This function\r\n * can provide groups that emphasize differences between data.\r\n *\r\n * Being a dynamic approach, this algorithm is based on two matrices that\r\n * store incrementally-computed values for squared deviations and backtracking\r\n * indexes.\r\n *\r\n * This implementation is based on Ckmeans 3.4.6, which introduced a new divide\r\n * and conquer approach that improved runtime from O(kn^2) to O(kn log(n)).\r\n *\r\n * Unlike the [original implementation](https://cran.r-project.org/web/packages/Ckmeans.1d.dp/index.html),\r\n * this implementation does not include any code to automatically determine\r\n * the optimal number of clusters: this information needs to be explicitly\r\n * provided.\r\n *\r\n * ### References\r\n * _Ckmeans.1d.dp: Optimal k-means Clustering in One Dimension by Dynamic\r\n * Programming_ Haizhou Wang and Mingzhou Song ISSN 2073-4859\r\n *\r\n * from The R Journal Vol. 3/2, December 2011\r\n * @param {Array<number>} data input data, as an array of number values\r\n * @param {number} nClusters number of desired classes. This cannot be\r\n * greater than the number of values in the data array.\r\n * @returns {Array<Array<number>>} clustered input\r\n * @throws {Error} if the number of requested clusters is higher than the size of the data\r\n * @example\r\n * ckmeans([-1, 2, -1, 2, 4, 5, 6, -1, 2, -1], 3);\r\n * // The input, clustered into groups of similar numbers.\r\n * //= [[-1, -1, -1, -1], [2, 2, 2], [4, 5, 6]]);\r\n */\r\nexport function ckmeans<T>(data: T[], nClusters: number, selector: (x: T) => number) {\r\n  if (nClusters > data.length) {\r\n    throw new Error(\"cannot generate more classes than there are data values\");\r\n  }\r\n\r\n  const sorted = numericSort(data, selector);\r\n  // we'll use this as the maximum number of clusters\r\n  const uniqueCount = uniqueCountSorted(sorted, selector);\r\n\r\n  // if all of the input values are identical, there's one cluster\r\n  // with all of the input in it.\r\n  if (uniqueCount === 1) {\r\n    return [sorted];\r\n  }\r\n\r\n  // named 'S' originally\r\n  const matrix = makeMatrix(nClusters, sorted.length);\r\n  // named 'J' originally\r\n  const backtrackMatrix = makeMatrix(nClusters, sorted.length);\r\n\r\n  // This is a dynamic programming way to solve the problem of minimizing\r\n  // within-cluster sum of squares. It's similar to linear regression\r\n  // in this way, and this calculation incrementally computes the\r\n  // sum of squares that are later read.\r\n  fillMatrices(sorted, matrix, backtrackMatrix, selector);\r\n\r\n  // The real work of Ckmeans clustering happens in the matrix generation:\r\n  // the generated matrices encode all possible clustering combinations, and\r\n  // once they're generated we can solve for the best clustering groups\r\n  // very quickly.\r\n  const clusters = [];\r\n  let clusterRight = backtrackMatrix[0].length - 1;\r\n\r\n  // Backtrack the clusters from the dynamic programming matrix. This\r\n  // starts at the bottom-right corner of the matrix (if the top-left is 0, 0),\r\n  // and moves the cluster target with the loop.\r\n  for (let cluster = backtrackMatrix.length - 1; cluster >= 0; cluster--) {\r\n    const clusterLeft = backtrackMatrix[cluster][clusterRight];\r\n\r\n    // fill the cluster from the sorted input by taking a slice of the\r\n    // array. the backtrack matrix makes this easy - it stores the\r\n    // indexes where the cluster should start and end.\r\n    clusters[cluster] = sorted.slice(clusterLeft, clusterRight + 1);\r\n\r\n    if (cluster > 0) {\r\n      clusterRight = clusterLeft - 1;\r\n    }\r\n  }\r\n\r\n  return clusters;\r\n}\r\n","import { Cluster } from \"shared/hooks/use-clusters\";\n\nexport const scaleCluster = (cluster: Cluster | undefined, factor: number) => {\n  if (!cluster) {\n    return undefined;\n  }\n  return { ...cluster, min: cluster.min * factor, max: cluster.max * factor, median: cluster.median * factor };\n};\n\nexport const scaleClusters = (clusters: Cluster[] | undefined, factor: number): Cluster[] | undefined => {\n  return clusters?.filter((x) => x).map((x) => scaleCluster(x, factor)!);\n};\n\nexport const findMostMostLikely = (cluster: Cluster[]) => {\n  if (cluster.length === 0) {\n    return;\n  }\n  const mostLikely = cluster.reduce((acc, curr) => {\n    return curr.probability > acc.probability ? curr : acc;\n  });\n  return mostLikely;\n};\n\nexport const clusterTitle = (index: number, length: number) => {\n  if (length === 1) {\n    return \"Actual\";\n  } else if (length == 2) {\n    return [\"Low\", \"High\"][index];\n  } else {\n    return [\"Low\", \"Med\", \"High\"][index];\n  }\n};\n\nexport const getClusterCount = <T>(values: T[], selector: (x: T) => number) => {\n  const uniqeValues = new Set(values.map((x) => selector(x))).size;\n\n  if (uniqeValues < 3) {\n    return uniqeValues;\n  } else if (uniqeValues === 4) {\n    return 2;\n  }\n  return 3;\n};\n\nexport const SumClusters = (clusters: Cluster[][]) => {\n  if (clusters.length == 0) {\n    return [];\n  }\n\n  const numClusters = clusters.reduce((acc, curr) => Math.max(acc, curr.length), 0);\n  const expandedClusters = clusters\n    .filter((x) => x.length > 0)\n    .map((cluster) => {\n      if (cluster.length === 1) {\n        return new Array(numClusters).fill(cluster[0]) as Cluster[];\n      }\n      if (cluster.length === 2 && numClusters === 3) {\n        const min = cluster[0];\n        const max = cluster[1];\n        return [\n          min,\n          {\n            min: (min.min + max.min) / 2,\n            max: (min.max + max.max) / 2,\n            median: (min.median + max.median) / 2,\n            probability: (min.probability + max.probability) / 2,\n            title: \"Med\",\n          },\n          max,\n        ].map((x, _i, arr) => {\n          const probability = x.probability / arr.reduce((acc, curr) => acc + curr.probability, 0);\n          return { ...x, probability };\n        }) as Cluster[];\n      }\n      return cluster;\n    });\n\n  return expandedClusters\n    .reduce((acc, curr) => {\n      return curr.map((x, i) => ({\n        min: x.min + acc[i].min,\n        max: x.max + acc[i].max,\n        median: x.median + acc[i].median,\n        probability: x.probability + acc[i].probability,\n        title: x.title,\n      }));\n    })\n    .map((x, _i, arr) => {\n      const probability = x.probability / arr.reduce((acc, curr) => acc + curr.probability, 0);\n      return { ...x, probability };\n    })\n    .map((x, i, arr) => {\n      return { ...x, title: clusterTitle(i, arr.length) };\n    });\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { useMemo } from \"react\";\nimport { Scenario } from \"shared/models/scenario\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\nimport { ckmeans } from \"shared/utility/ckmeans\";\nimport { clusterTitle, getClusterCount } from \"shared/utility/cluster-helpers\";\nimport { max, median, min, sumSimple } from \"simple-statistics\";\n\nexport interface Cluster {\n  min: number;\n  max: number;\n  median: number;\n  probability: number;\n  title: string;\n}\n\nconst clusters = <T extends Scenario>(values: T[] | undefined, selector: (x: T) => number): Cluster[] => {\n  if (!values || values.length === 0) {\n    return [];\n  }\n\n  const totalWeight = sumSimple(values.map((x) => x.weight));\n  const clusterCount = getClusterCount(values, selector);\n  const clusters = ckmeans(values, clusterCount, selector);\n\n  const result = clusters.map((x, i, arr) => {\n    return {\n      min: min(x.map((x) => selector(x))),\n      max: max(x.map((x) => selector(x))),\n      median: median(x.map((x) => selector(x))),\n      probability: sumSimple(x.map((x) => x.weight)) / totalWeight,\n      title: clusterTitle(i, arr.length),\n    };\n  });\n\n  return result;\n};\n\nexport const useClusters = (year: number) => {\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios[year]);\n\n  return useMemo(() => {\n    if (scenarios?.length === 0) {\n      return {\n        totalPay: [],\n        meritBonus: [],\n        retirementBonus: [],\n        companyBonus: [],\n        pay: [],\n        meritIncrease: [],\n        scenarios,\n        taxablePay: [],\n      };\n    }\n    return {\n      totalPay: clusters(scenarios, (x) => x.totalPay),\n      meritBonus: clusters(scenarios, (x) => x.meritBonus),\n      retirementBonus: clusters(scenarios, (x) => x.retirementBonus),\n      companyBonus: clusters(scenarios, (x) => x.companyBonus),\n      pay: clusters(scenarios, (x) => x.pay.at(-1)?.value ?? 0),\n      meritIncrease: clusters(scenarios, (x) => x.meritIncreasePct + x.equityIncreasePct),\n      taxablePay: clusters(scenarios, (x) => x.taxablePay),\n      scenarios,\n    };\n  }, [scenarios]);\n};\n\nexport const useTotalPayClusters = () => {\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios);\n  return useMemo(() => {\n    const allScenarios = Object.entries(scenarios);\n    if (allScenarios.length === 0) {\n      return [];\n    }\n\n    return allScenarios.map(([year, scenarios]) => {\n      return [year, clusters(scenarios, (x) => x.totalPay)];\n    }) as [string, Cluster[]][];\n  }, [scenarios]);\n};\n","import { DateTime } from \"luxon\";\nimport { AccountData } from \"shared/models/store/current\";\n\nexport function findSameYear(year: number, data: AccountData[]): AccountData | undefined;\nexport function findSameYear(date: DateTime, data: AccountData[]): AccountData | undefined;\nexport function findSameYear(date: DateTime | number, data: AccountData[]): AccountData | undefined {\n  const year = typeof date === \"number\" ? date : date.year;\n  return data.find((x) => {\n    return DateTime.fromISO(x.date).year === year;\n  });\n}\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { AccountData } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\nimport { findSameYear } from \"shared/utility/find-same-year\";\n\nconst useRealDate = (year: number | undefined, data: AccountData[]) => {\n  return useMemo(() => {\n    if (!year) {\n      return undefined;\n    }\n    const meritBonus = findSameYear(year, data);\n    if (!meritBonus) {\n      return undefined;\n    }\n\n    return DateTime.fromISO(meritBonus.date);\n  }, [data, year]);\n};\n\nexport const useDates = (year?: number) => {\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\n  const meritBonusDate = useRealDate(year, timeSeries.meritBonus);\n  const companyBonusDate = useRealDate(year, timeSeries.companyBonus);\n\n  return useMemo(() => {\n    return {\n      meritIncrease: DateTime.fromObject({ month: 4, day: 1, year }),\n      meritBonus: meritBonusDate ?? DateTime.fromObject({ month: 4, day: 15, year }),\n      companyBonus: companyBonusDate ?? DateTime.fromObject({ month: 6, day: 15, year }),\n      retirementBonus: DateTime.fromObject({ month: 7, day: 15, year }),\n    };\n  }, [companyBonusDate, meritBonusDate, year]);\n};\n\nexport const useDateRanges = (year: number) => {\n  return useMemo(\n    () => ({\n      base: {\n        start: DateTime.fromObject({ month: 1, day: 1, year }),\n        end: DateTime.fromObject({ month: 12, day: 31, year }).endOf(\"day\"),\n      },\n      meritBonus: {\n        start: DateTime.fromObject({ month: 1, day: 1, year: year - 1 }),\n        end: DateTime.fromObject({ month: 12, day: 31, year: year - 1 }).endOf(\"day\"),\n      },\n      companyBonus: {\n        start: DateTime.fromObject({ day: 1, month: 4, year: year - 1 }),\n        end: DateTime.fromObject({ day: 31, month: 3, year }).endOf(\"day\"),\n      },\n      retirementBonus: {\n        start: DateTime.fromObject({ day: 1, month: 7, year: year - 1 }),\n        end: DateTime.fromObject({ day: 30, month: 6, year }).endOf(\"day\"),\n      },\n    }),\n    [year]\n  );\n};\n","export interface PaymentPeriod {\r\n  start: string;\r\n  end: string;\r\n  payedOn: string;\r\n  value: number;\r\n  cumulative: number;\r\n  type: PaymentType;\r\n}\r\n\r\nexport const PaymentTypes = {\r\n  regular: \"regular\",\r\n  bonus: \"taxable bonus\",\r\n  nonTaxableBonus: \"non-taxable bonus\",\r\n} as const;\r\n\r\nexport type PaymentType = (typeof PaymentTypes)[keyof typeof PaymentTypes];\r\n","import { DateTime } from \"luxon\";\r\nimport { create } from \"mutative\";\r\nimport { AccountData, TimeSeries } from \"shared/models/store/current\";\r\nimport { store } from \".\";\r\n\r\nexport const updateProjectedIncomeDate = (timeSeries: TimeSeries, data: AccountData, date: DateTime) => {\r\n  store.setState((prev) => {\r\n    const next = create(prev, (next) => {\r\n      const idx = prev.projectedIncome.timeSeries[timeSeries].findIndex((x) => x === data);\r\n      if (idx < 0) {\r\n        throw new Error(\"failed to find data\");\r\n      }\r\n\r\n      next.projectedIncome.timeSeries[timeSeries][idx].date = date.toISO()!;\r\n    });\r\n    return next;\r\n  });\r\n};\r\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\r\nimport UpdateIcon from \"@mui/icons-material/Update\";\r\nimport { Button, Tooltip } from \"@mui/material\";\r\nimport { Stack } from \"@mui/system\";\r\nimport { ColDef, ICellRendererParams } from \"ag-grid-community\";\r\nimport { CustomCellRendererProps } from \"ag-grid-react\";\r\nimport { DateTime } from \"luxon\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { Percent } from \"shared/components/formatters/percent\";\r\nimport { AccountData, TimeSeries } from \"shared/models/store/current\";\r\nimport { updateProjectedIncome } from \"shared/store\";\r\nimport { removeProjectedIncome } from \"shared/store/remove-projected-income\";\r\nimport { updateProjectedIncomeDate } from \"shared/store/update-projected-income-date\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\n\r\nexport const createAccountColumnConfig = (\r\n  accountName: TimeSeries,\r\n  variant: \"number\" | \"cash\" | \"percent\",\r\n  dateVariant: \"date\" | \"year\"\r\n): ColDef<AccountData>[] => [\r\n  {\r\n    headerName: \"Date\",\r\n    sort: \"desc\",\r\n    valueFormatter: (x) => x.value?.toFormat(dateVariant === \"date\" ? shortDate : \"yyyy\"),\r\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\r\n    tooltipValueGetter: (x) => (dateVariant === \"year\" ? x.value?.toFormat(shortDate) : undefined),\r\n    cellRenderer: (x: ICellRendererParams<unknown, DateTime>) => {\r\n      return (\r\n        <Stack direction={\"row\"} alignItems={\"center\"}>\r\n          {x.valueFormatted}&nbsp;\r\n          {x.value && x.value > DateTime.local() && (\r\n            <Tooltip title=\"Future Event\">\r\n              <UpdateIcon htmlColor=\"orange\" />\r\n            </Tooltip>\r\n          )}\r\n        </Stack>\r\n      );\r\n    },\r\n    cellEditor: \"agDateCellEditor\",\r\n    editable: true,\r\n    valueSetter: (x) => {\r\n      const date = DateTime.fromJSDate(x.newValue);\r\n      if (date.isValid) {\r\n        updateProjectedIncomeDate(accountName, x.data, DateTime.fromJSDate(x.newValue));\r\n      }\r\n      return date.isValid;\r\n    },\r\n  },\r\n  {\r\n    headerName: \"Value\",\r\n    valueGetter: (x) => x.data?.value,\r\n    cellRenderer: (x: CustomCellRendererProps<AccountData>) =>\r\n      variant === \"cash\" ? <Cash compact={false} value={x.value} /> : <Percent value={x.value} />,\r\n    type: \"numericColumn\",\r\n    editable: true,\r\n    cellEditor: \"agNumberCellEditor\",\r\n    valueSetter: (x) => {\r\n      updateProjectedIncome(accountName, x.data, +x.newValue);\r\n      return true;\r\n    },\r\n  },\r\n  {\r\n    cellStyle: () => ({ display: \"inline-flex\", padding: \"0px\" }),\r\n    sortable: false,\r\n    headerName: \"\",\r\n    width: 80,\r\n    colId: \"actions\",\r\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\r\n      return (\r\n        <Button\r\n          onClick={() => {\r\n            props.data && removeProjectedIncome(accountName, props.data);\r\n          }}\r\n          color=\"error\"\r\n          fullWidth\r\n        >\r\n          <DeleteForeverIcon />\r\n        </Button>\r\n      );\r\n    },\r\n  },\r\n];\r\n","import { Box, Button, InputAdornment, Paper, Stack, TextField, Tooltip, Typography } from \"@mui/material\";\r\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo, useState } from \"react\";\r\nimport { AgGrid } from \"shared/components/ag-grid\";\r\nimport { TimeSeries } from \"shared/models/store/current\";\r\nimport { addProjectedIncome, store } from \"shared/store\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\nimport { createAccountColumnConfig } from \"./column-config\";\r\n\r\nconst DataEntry = (props: {\r\n  timeSeries: TimeSeries;\r\n  defaultDate: DateTime;\r\n  variant?: \"number\" | \"cash\" | \"percent\";\r\n  dateVariant?: \"date\" | \"year\";\r\n}) => {\r\n  const { timeSeries, defaultDate, variant = \"number\", dateVariant = \"date\" } = props;\r\n  const account = useStore(store, (state) => state.projectedIncome.timeSeries[timeSeries]);\r\n\r\n  const [date, setDate] = useState(defaultDate);\r\n  const [amount, setAmount] = useState<number | null>(null);\r\n\r\n  const hasSameDate = useMemo(() => {\r\n    return !!account?.find((x) => date.hasSame(DateTime.fromISO(x.date), \"day\"));\r\n  }, [account, date]);\r\n\r\n  const onAddEntry = () => {\r\n    if (amount != null) {\r\n      addProjectedIncome(date, timeSeries, variant === \"percent\" ? amount / 100 : amount);\r\n      setAmount(null);\r\n    }\r\n  };\r\n\r\n  const accountColumnConfig = useMemo(() => {\r\n    return createAccountColumnConfig(timeSeries, variant, dateVariant);\r\n  }, [timeSeries, variant, dateVariant]);\r\n\r\n  return (\r\n    <Box display={\"flex\"} flexDirection={\"column\"} height=\"100%\">\r\n      <Stack spacing={2} flex=\"0 1 auto\">\r\n        <DatePicker\r\n          format={dateVariant === \"year\" ? \"yyyy\" : shortDate}\r\n          views={dateVariant === \"year\" ? [\"year\"] : undefined}\r\n          sx={{ color: \"white\" }}\r\n          label=\"Date\"\r\n          value={date}\r\n          onChange={(value) => {\r\n            console.log(value);\r\n            value && setDate(value);\r\n          }}\r\n        />\r\n        <TextField\r\n          label=\"amount\"\r\n          value={amount ?? \"\"}\r\n          placeholder=\"0\"\r\n          type=\"number\"\r\n          onChange={(event) => (event.target.value === \"\" ? setAmount(null) : setAmount(+event.target.value))}\r\n          InputProps={{\r\n            startAdornment: variant !== \"number\" && (\r\n              <InputAdornment position=\"start\">{variant === \"cash\" ? \"$\" : \"%\"}</InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n        <Button disabled={amount === null || !date || hasSameDate} onClick={onAddEntry}>\r\n          Add Entry\r\n        </Button>\r\n      </Stack>\r\n      <Box sx={{ paddingTop: 2, flex: \"1 1 auto\" }}>\r\n        <AgGrid\r\n          reactiveCustomComponents\r\n          rowData={account ?? []}\r\n          columnDefs={accountColumnConfig}\r\n          id={account + \"-history\"}\r\n          autoSizeStrategy={{\r\n            type: \"fitGridWidth\",\r\n          }}\r\n          stopEditingWhenCellsLoseFocus\r\n        />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\ninterface LayoutProps {\r\n  title: string;\r\n  accountName: TimeSeries;\r\n  defaultDate: DateTime;\r\n  variant: \"percent\" | \"number\" | \"cash\";\r\n  dateVariant?: \"date\" | \"year\";\r\n}\r\n\r\nexport const Layout = (props: LayoutProps) => {\r\n  const { title, accountName, defaultDate, variant, dateVariant = \"date\" } = props;\r\n  return (\r\n    <Paper sx={{ padding: 2, height: \"100%\", width: 450, flexShrink: 0 }}>\r\n      <Box display=\"flex\" flexDirection=\"column\" height=\"100%\">\r\n        <Box flex=\"0 1 auto\" marginBottom={2}>\r\n          <Typography sx={{ marginBottom: 2 }} variant=\"h5\">\r\n            {title}{\" \"}\r\n            {variant === \"cash\" && (\r\n              <Tooltip\r\n                title={\r\n                  <>\r\n                    <span>Cash values are used in lieu of Percent values.</span>\r\n                    <br />\r\n                    <span>Cash values are considered actual payment values.</span>\r\n                  </>\r\n                }\r\n              >\r\n                <span>($)</span>\r\n              </Tooltip>\r\n            )}\r\n            {variant === \"percent\" && (\r\n              <Tooltip title=\"Percentage values are used for predictions.\">\r\n                <span>(%)</span>\r\n              </Tooltip>\r\n            )}\r\n          </Typography>\r\n        </Box>\r\n        <Box flex=\"1 1 auto\">\r\n          <DataEntry variant={variant} timeSeries={accountName} defaultDate={defaultDate} dateVariant={dateVariant} />\r\n        </Box>\r\n      </Box>\r\n    </Paper>\r\n  );\r\n};\r\n","import { AgCartesianChartOptions, AgLineSeriesOptions } from \"ag-charts-community\";\r\nimport { AgChartsReact } from \"ag-charts-react\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { useTotalPayClusters } from \"shared/hooks/use-clusters\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { formatCash } from \"shared/utility/format-cash\";\r\nimport { formatPercent } from \"shared/utility/format-percent\";\r\n\r\nconst getColor = (probability?: number) => {\r\n  if (!probability) {\r\n    return \"inherit\";\r\n  }\r\n  if (probability >= 0.5) {\r\n    return \"green\";\r\n  }\r\n  if (probability >= 0.25) {\r\n    return \"orange\";\r\n  }\r\n  return \"rgb(244, 67, 54)\";\r\n};\r\n\r\nexport const IncomeChart = () => {\r\n  const clusters = useTotalPayClusters();\r\n  const history = useMemo(() => {\r\n    return clusters\r\n      .filter(([year]) => +year <= getLocalDateTime().year)\r\n      .map(([year, x]) => ({\r\n        totalPay: x[0]?.median ?? 0,\r\n        date: DateTime.fromObject({ year: +year, month: 1, day: 1 }).toJSDate(),\r\n      }));\r\n  }, [clusters]);\r\n\r\n  const future = useMemo(() => {\r\n    return clusters\r\n      .filter(([year]) => +year >= getLocalDateTime().year)\r\n      .map(([year, x]) => {\r\n        const data = Object.fromEntries(\r\n          x?.flatMap((x) => {\r\n            const title = x.title.toLocaleLowerCase();\r\n            return [\r\n              [title, x.median],\r\n              [title + \"Probability\", x.probability],\r\n            ];\r\n          })\r\n        );\r\n        return {\r\n          ...data,\r\n          date: DateTime.fromObject({ year: +year, month: 1, day: 1 }).toJSDate(),\r\n        };\r\n      });\r\n  }, [clusters]);\r\n\r\n  const series = useMemo(() => {\r\n    return [\r\n      {\r\n        type: \"line\",\r\n        xKey: \"date\",\r\n        yKey: \"totalPay\",\r\n        data: history,\r\n        yName: \"Income\",\r\n\r\n        tooltip: {\r\n          renderer: ({ datum, yKey, xKey }) => ({\r\n            content: `${DateTime.fromJSDate(datum[xKey]).year} ${formatCash(datum[yKey])}`,\r\n          }),\r\n        },\r\n      },\r\n      {\r\n        type: \"line\",\r\n        xKey: \"date\",\r\n        yKey: \"low\",\r\n        data: future,\r\n        yName: \"Low\",\r\n        stroke: \"grey\",\r\n        marker: {\r\n          formatter: (params) => {\r\n            const color = getColor(params.datum.lowProbability);\r\n            return {\r\n              fill: color,\r\n              stroke: color,\r\n            };\r\n          },\r\n        },\r\n        tooltip: {\r\n          renderer: ({ datum, yKey, xKey }) => ({\r\n            content: `${DateTime.fromJSDate(datum[xKey]).year} ${formatCash(datum[yKey])} ${formatPercent(datum.lowProbability)}`,\r\n          }),\r\n        },\r\n      },\r\n      {\r\n        marker: {\r\n          formatter: (params) => {\r\n            const color = getColor(params.datum.medProbability);\r\n            return {\r\n              fill: color,\r\n            };\r\n          },\r\n        },\r\n        type: \"line\",\r\n        stroke: \"grey\",\r\n        xKey: \"date\",\r\n        yKey: \"med\",\r\n        data: future,\r\n        yName: \"Medium\",\r\n        tooltip: {\r\n          renderer: ({ datum, yKey, xKey }) => ({\r\n            content: `${DateTime.fromJSDate(datum[xKey]).year} ${formatCash(datum[yKey])} ${formatPercent(datum.medProbability)}`,\r\n          }),\r\n        },\r\n      },\r\n      {\r\n        stroke: \"grey\",\r\n        marker: {\r\n          formatter: (params) => {\r\n            const color = getColor(params.datum.highProbability);\r\n            return {\r\n              fill: color,\r\n              stroke: color,\r\n            };\r\n          },\r\n        },\r\n        type: \"line\",\r\n        xKey: \"date\",\r\n        yKey: \"high\",\r\n        data: future,\r\n        yName: \"High\",\r\n        tooltip: {\r\n          renderer: ({ datum, yKey, xKey }) => ({\r\n            content: `${DateTime.fromJSDate(datum[xKey]).year} ${formatCash(datum[yKey])} ${formatPercent(datum.highProbability)}`,\r\n          }),\r\n        },\r\n      },\r\n    ] as AgLineSeriesOptions[];\r\n  }, [future, history]);\r\n\r\n  const options: AgCartesianChartOptions = useMemo(\r\n    () => ({\r\n      theme: \"ag-default-dark\",\r\n      title: {\r\n        text: `Income`,\r\n      },\r\n\r\n      axes: [\r\n        {\r\n          type: \"time\",\r\n          position: \"bottom\",\r\n          label: {\r\n            format: \"%Y\",\r\n          },\r\n          nice: false,\r\n        },\r\n        {\r\n          type: \"number\",\r\n          position: \"left\",\r\n          nice: false,\r\n          tick: {\r\n            maxSpacing: 40,\r\n          },\r\n        },\r\n      ],\r\n      series,\r\n    }),\r\n    [series]\r\n  );\r\n  return <AgChartsReact options={options} />;\r\n};\r\n","import ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\nimport { Table, TableBody, TableCell, TableRow } from \"@mui/material\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { IncomePerPeriod } from \"shared/models/IncomePerPeriod\";\nimport { shortDate } from \"shared/utility/format-date\";\n\ninterface IncomePerPeriodTooltipProps {\n  incomePerPeriod: IncomePerPeriod[];\n}\n\nexport const IncomePerPeriodTooltip = (props: IncomePerPeriodTooltipProps) => {\n  const { incomePerPeriod } = props;\n  return (\n    <Table sx={{ width: \"max-content\" }}>\n      <TableBody>\n        {incomePerPeriod.map(({ start, end, value, perPayday, count }, index) => {\n          return (\n            <TableRow key={index}>\n              <TableCell>\n                <Cash value={value} compact={false} />\n              </TableCell>\n              <TableCell>{start.toFormat(shortDate)}</TableCell>\n              <TableCell>\n                <ArrowForwardIcon />\n              </TableCell>\n              <TableCell>{end.toFormat(shortDate)}</TableCell>\n              <TableCell>\n                <Cash value={perPayday} compact={false} /> x {count}\n              </TableCell>\n            </TableRow>\n          );\n        })}\n        <TableRow>\n          <TableCell colSpan={4}>Total:</TableCell>\n          <TableCell>\n            <Cash value={incomePerPeriod.reduce((acc, curr) => curr.value + acc, 0)} compact={false} />\n          </TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  );\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { findSameYear } from \"shared/utility/find-same-year\";\n\nexport const useHasMeritPairs = () => {\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\n  return useMemo(() => {\n    return (\n      timeSeries.meritIncreasePct.every((x) => {\n        return !!findSameYear(DateTime.fromISO(x.date).year, timeSeries.meritBonusPct);\n      }) &&\n      timeSeries.meritBonusPct.every((x) => {\n        return !!findSameYear(DateTime.fromISO(x.date).year, timeSeries.meritIncreasePct);\n      })\n    );\n  }, [timeSeries.meritBonusPct, timeSeries.meritIncreasePct]);\n};\n","import { Alert, CircularProgress, Tooltip } from \"@mui/material\";\r\nimport { Box, Stack } from \"@mui/system\";\r\nimport { DatePicker } from \"@mui/x-date-pickers\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo, useState } from \"react\";\r\nimport { Card } from \"shared/components/card\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { ClusterValue, ClusterValues } from \"shared/components/formatters/cluster-value\";\r\nimport { CountDown } from \"shared/components/formatters/countdown\";\r\nimport { Value } from \"shared/components/formatters/value\";\r\nimport { useClusters } from \"shared/hooks/use-clusters\";\r\nimport { useDateRanges, useDates } from \"shared/hooks/use-dates\";\r\nimport { IncomePerPeriod } from \"shared/models/IncomePerPeriod\";\r\nimport { PaymentTypes } from \"shared/models/payment-periods\";\r\nimport { scenarioStore } from \"shared/store/scenario-store\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { monthDay } from \"shared/utility/format-date\";\r\nimport { Layout } from \"./data-entry/data-entry\";\r\nimport { IncomeChart } from \"./income-chart\";\r\nimport { IncomePerPeriodTooltip } from \"./income-per-period\";\r\nimport { useHasMeritPairs } from \"./use-has-merit-pairs\";\r\n\r\nexport const ProjectedIncome = () => {\r\n  const [selectedYear, setSelectedYear] = useState(getLocalDateTime().year);\r\n\r\n  const hasMissingPairs = useHasMeritPairs();\r\n  const clusters = useClusters(selectedYear);\r\n  const dates = useDates(selectedYear);\r\n  const dateRanges = useDateRanges(selectedYear);\r\n\r\n  const basePay = useMemo(() => {\r\n    if (clusters.pay.length !== 1) {\r\n      return;\r\n    }\r\n    return clusters.scenarios?.[0].basePay;\r\n  }, [clusters.pay.length, clusters.scenarios]);\r\n\r\n  const aprToApr = useMemo(() => {\r\n    if (clusters.pay.length !== 1) {\r\n      return;\r\n    }\r\n    return clusters.scenarios?.[0].aprToApr;\r\n  }, [clusters.pay.length, clusters.scenarios]);\r\n\r\n  const paychecks = useMemo(() => {\r\n    if (clusters.pay.length !== 1) {\r\n      return;\r\n    }\r\n\r\n    const payPeriods =\r\n      clusters.scenarios?.[0].payments.filter((x) => {\r\n        const payedOn = DateTime.fromISO(x.payedOn);\r\n        return payedOn >= dateRanges.base.start && payedOn <= dateRanges.base.end;\r\n      }) ?? [];\r\n\r\n    return payPeriods\r\n      .filter((x) => x.type !== PaymentTypes.bonus)\r\n      .reduceRight(\r\n        (acc, curr) => {\r\n          if (acc[0]?.[0]?.value === curr.value) {\r\n            acc[0].unshift(curr);\r\n          } else {\r\n            acc.unshift([curr]);\r\n          }\r\n\r\n          return acc;\r\n        },\r\n        [] as (typeof payPeriods)[]\r\n      )\r\n      .reduce((acc, curr) => {\r\n        acc.push({\r\n          start: DateTime.fromISO(curr[0].payedOn),\r\n          end: DateTime.fromISO(curr[curr.length - 1].payedOn),\r\n          value: curr.reduce((acc, curr) => acc + curr.value, 0),\r\n          perPayday: curr[0].value,\r\n          count: curr.length,\r\n          type: curr[0].type,\r\n        });\r\n\r\n        return acc;\r\n      }, [] as IncomePerPeriod[]);\r\n  }, [clusters.pay.length, clusters.scenarios, dateRanges.base.end, dateRanges.base.start]);\r\n\r\n  const scenarios = useStore(scenarioStore);\r\n\r\n  return (\r\n    <Box display=\"flex\" flexDirection=\"row\" height=\"100%\" width={\"100%\"}>\r\n      <Box flex=\"0 1 auto\" maxWidth={500} height=\"100%\">\r\n        <Stack gap={2} direction={\"column\"} overflow={\"auto\"} height=\"100%\" paddingRight={1} minWidth={500}>\r\n          {!hasMissingPairs && (\r\n            <Alert severity=\"error\">Every Merit Increase must have a paired Merit Bonus percent</Alert>\r\n          )}\r\n          <Card\r\n            title={\r\n              <Box display=\"flex\" alignItems={\"center\"} gap={2} width={\"100%\"}>\r\n                <span>Income</span>\r\n                <CountDown dateTime={dates.companyBonus} variant=\"date\" dateFormat={monthDay} />\r\n                <Box sx={{ display: \"flex\", marginLeft: \"auto\", alignItems: \"center\", flexWrap: \"wrap\" }}>\r\n                  {scenarios.loading && <CircularProgress style={{ width: 20, height: 20 }} />}\r\n                </Box>\r\n                <DatePicker\r\n                  sx={{ width: 90, marginRight: 2 }}\r\n                  label={\"year\"}\r\n                  views={[\"year\"]}\r\n                  minDate={getLocalDateTime().set({ year: scenarios.minYear })}\r\n                  maxDate={getLocalDateTime().set({ year: scenarios.maxYear })}\r\n                  defaultValue={getLocalDateTime()}\r\n                  slotProps={{\r\n                    textField: {\r\n                      variant: \"standard\",\r\n                      label: \"\",\r\n                    },\r\n                  }}\r\n                  onYearChange={(year) => {\r\n                    setSelectedYear(year.year);\r\n                  }}\r\n                />\r\n              </Box>\r\n            }\r\n          >\r\n            <ClusterValues clusters={clusters.totalPay} eventDate={dates.companyBonus} />\r\n          </Card>\r\n          <Card\r\n            title={\r\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\r\n                <span>Paycheck</span>\r\n                <CountDown dateTime={dates.meritIncrease} variant=\"date\" dateFormat={monthDay} />\r\n              </Box>\r\n            }\r\n          >\r\n            {!basePay && <ClusterValues clusters={clusters.pay} eventDate={dates.meritIncrease} compact={false} />}\r\n            {basePay && (\r\n              <>\r\n                <ClusterValue {...clusters.pay[0]} title={\"Paycheck\"} compact={false} />\r\n                <Tooltip\r\n                  placement=\"bottom\"\r\n                  componentsProps={{\r\n                    tooltip: {\r\n                      sx: {\r\n                        maxWidth: \"none\",\r\n                      },\r\n                    },\r\n                  }}\r\n                  title={paychecks && <IncomePerPeriodTooltip incomePerPeriod={paychecks} />}\r\n                >\r\n                  <div>\r\n                    <Value title={\"Base Pay\"}>\r\n                      <Cash disableTooltip value={basePay} />\r\n                    </Value>\r\n                  </div>\r\n                </Tooltip>\r\n                <Value title={\"APR to APR\"}>\r\n                  <Cash value={aprToApr} />\r\n                </Value>\r\n              </>\r\n            )}\r\n          </Card>\r\n          <Card\r\n            title={\r\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\r\n                <span>Merit Increase</span>\r\n                <CountDown dateTime={dates.meritIncrease} variant=\"date\" dateFormat={monthDay} />\r\n              </Box>\r\n            }\r\n          >\r\n            <ClusterValues clusters={clusters.meritIncrease} eventDate={dates.meritIncrease} />\r\n          </Card>\r\n\r\n          <Card\r\n            title={\r\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\r\n                <span>Merit Bonus</span>\r\n                <CountDown dateTime={dates.meritBonus} variant=\"date\" dateFormat={monthDay} />\r\n              </Box>\r\n            }\r\n          >\r\n            <ClusterValues clusters={clusters.meritBonus} eventDate={dates.meritBonus} />\r\n          </Card>\r\n          <Card\r\n            title={\r\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\r\n                <span>Company Bonus</span>\r\n                <CountDown dateTime={dates.companyBonus} variant=\"date\" dateFormat={monthDay} />\r\n              </Box>\r\n            }\r\n          >\r\n            <ClusterValues clusters={clusters.companyBonus} eventDate={dates.companyBonus} />\r\n          </Card>\r\n          <Card\r\n            title={\r\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\r\n                <span>Retirement Bonus</span>\r\n                <CountDown dateTime={dates.retirementBonus} variant=\"date\" dateFormat={monthDay} />\r\n              </Box>\r\n            }\r\n          >\r\n            <ClusterValues clusters={clusters.retirementBonus} eventDate={dates.retirementBonus} />\r\n          </Card>\r\n          {!scenarios.loading && (\r\n            <div css={{ width: \"100%\", height: 285 }}>\r\n              <IncomeChart />\r\n            </div>\r\n          )}\r\n        </Stack>\r\n      </Box>\r\n      <Box flex=\"1 1 auto\" overflow={\"auto\"} paddingBottom={2} paddingLeft={1}>\r\n        <Box display={\"flex\"} height={\"100%\"} width={\"100%\"} gap={2}>\r\n          <Layout\r\n            accountName=\"paycheck\"\r\n            variant=\"cash\"\r\n            defaultDate={DateTime.fromObject({\r\n              day: 1,\r\n              month: 4,\r\n              year: selectedYear,\r\n            })}\r\n            title=\"Income Per Paycheck\"\r\n          />\r\n          <Layout\r\n            title=\"Merit Increase\"\r\n            accountName=\"meritIncreasePct\"\r\n            variant=\"percent\"\r\n            defaultDate={dates.meritIncrease}\r\n            dateVariant=\"year\"\r\n          />\r\n          <Layout\r\n            title=\"Equity Increase\"\r\n            accountName=\"equityPct\"\r\n            variant=\"percent\"\r\n            defaultDate={dates.meritIncrease}\r\n            dateVariant=\"year\"\r\n          />\r\n          <Layout\r\n            title=\"Merit Bonus\"\r\n            accountName=\"meritBonusPct\"\r\n            variant=\"percent\"\r\n            defaultDate={dates.meritBonus}\r\n            dateVariant=\"year\"\r\n          />\r\n          <Layout title=\"Merit Bonus\" accountName=\"meritBonus\" variant=\"cash\" defaultDate={dates.meritBonus} />\r\n          <Layout\r\n            title=\"Company Bonus Factor\"\r\n            accountName=\"companyBonusPct\"\r\n            defaultDate={dates.companyBonus}\r\n            variant=\"percent\"\r\n            dateVariant=\"year\"\r\n          />\r\n          <Layout title=\"Company Bonus\" accountName=\"companyBonus\" defaultDate={dates.companyBonus} variant=\"cash\" />\r\n          <Layout\r\n            title=\"Retirement Bonus\"\r\n            accountName=\"retirementBonus\"\r\n            defaultDate={dates.retirementBonus}\r\n            variant=\"cash\"\r\n          />\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { Mortgage } from \"shared/models/store/current\";\r\nimport { store } from \"shared/store\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { calcLoanBalance } from \"shared/utility/mortgage-calc\";\r\n\r\nexport const useFutureMortgageEquity = (year: number) => {\r\n  const accounts = useStore(store, (x) => x.wealth);\r\n\r\n  return useMemo(() => {\r\n    const mortgages = Object.values(accounts).filter((x) => x.type === \"mortgage\") as Mortgage[];\r\n    return mortgages\r\n      .map((x) => {\r\n        if (!x.loan) {\r\n          return 0;\r\n        }\r\n\r\n        const startDate =\r\n          getLocalDateTime() < DateTime.fromObject({ month: 1, day: 1, year })\r\n            ? DateTime.fromObject({ month: 1, day: 1, year })\r\n            : getLocalDateTime().endOf(\"month\");\r\n\r\n        return calcLoanBalance(startDate, x.loan) - calcLoanBalance(startDate.endOf(\"year\"), x.loan);\r\n      })\r\n      .reduce((acc, curr) => acc + curr, 0);\r\n  }, [accounts, year]);\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\n\nexport const useFutureRetirementContributions = (year: number) => {\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios[year]);\n  const retirementContribution = useStore(store, (x) => x.projectedWealth.retirementContributionPaycheck);\n\n  return useMemo(() => {\n    return {\n      remaining: Math.min(scenarios?.at(0)?.remainingRegularPayments ?? 0, 26) * retirementContribution,\n      perPaycheck: retirementContribution,\n    };\n  }, [retirementContribution, scenarios]);\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { useMemo } from \"react\";\nimport { useDateRanges } from \"shared/hooks/use-dates\";\nimport { store } from \"shared/store\";\n\nexport const useFutureSavings = (year: number) => {\n  const config = useStore(store, (x) => x.projectedWealth);\n  const dateRanges = useDateRanges(year);\n  return useMemo(() => {\n    return {\n      remaining: config.savingsPerMonth * Math.min(Math.max(0, dateRanges.base.end.diffNow(\"months\").months), 12),\n      perMonth: config.savingsPerMonth,\n    };\n  }, [config.savingsPerMonth, dateRanges.base]);\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\n\ninterface ThresholdTaxData {\n  total: number;\n  firstOccurrence: DateTime;\n  remaining: number;\n  perPaycheck: number;\n}\n\nexport const useFutureSocialSecurity = (year: number): TresholdTax => {\n  const config = useStore(store, (x) => x.projectedWealth);\n  return useThresholdTax(year, config.socialSecurityLimit, config.socialSecurityTaxRate);\n};\n\nexport const useFutureMedicareTax = (year: number): TresholdTax => {\n  const config = useStore(store, (x) => x.projectedWealth);\n  const taxes = useThresholdTax(year, config.medicareSupplementalTaxThreshold, -1 * config.medicareSupplementalTaxRate);\n  return useMemo(() => {\n    return {\n      min: taxes.max,\n      max: taxes.min,\n    };\n  }, [taxes]);\n};\n\nexport type TresholdTax = Partial<Record<\"min\" | \"max\", ThresholdTaxData>>;\n\nconst useThresholdTax = (year: number, threshold: number, taxRate: number): TresholdTax => {\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios[year]);\n\n  const data = useMemo(\n    () =>\n      (\n        (scenarios ?? [])\n          .map((x) => {\n            const total = taxRate * Math.max(0, (x.payments.at(-1)?.cumulative ?? 0) - threshold);\n            const firstOccurrence = x.payments.find((x) => x.cumulative > threshold)?.payedOn;\n            const remaining = x.payments\n              .slice(x.currentPaymentIdx)\n              .filter((x) => x.cumulative >= threshold)\n              .reduce((acc, curr) => {\n                return acc + Math.min(curr.value, curr.cumulative - threshold) * taxRate;\n              }, 0);\n            const perPaycheck = total && taxRate * (x.payments.at(-1)?.value ?? 0);\n\n            return {\n              total,\n              firstOccurrence: firstOccurrence ? DateTime.fromISO(firstOccurrence) : undefined,\n              remaining,\n              perPaycheck,\n            };\n          })\n          .filter((x) => x.firstOccurrence) as ThresholdTaxData[]\n      ).reduce(\n        (acc, curr, i) => {\n          if (i == 0) {\n            return { min: curr, max: curr };\n          } else {\n            if (curr.total < acc.min!.total) {\n              acc.min = curr;\n            }\n            if (curr.total > acc.max!.total) {\n              acc.max = curr;\n            }\n          }\n          return acc;\n        },\n        {} as Partial<Record<\"min\" | \"max\", ThresholdTaxData>>\n      ),\n    [threshold, taxRate, scenarios]\n  );\n\n  return data;\n};\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { useDates } from \"shared/hooks/use-dates\";\r\nimport { Scenario } from \"shared/models/scenario\";\r\nimport { store } from \"shared/store\";\r\nimport { scenarioStore } from \"shared/store/scenario-store\";\r\nimport { clusterTitle, getClusterCount } from \"shared/utility/cluster-helpers\";\r\nimport { ckmeans, median, sumSimple } from \"simple-statistics\";\r\nimport { useFutureMortgageEquity } from \"./use-future-mortgage-equity\";\r\nimport { useFutureRetirementContributions } from \"./use-future-retirement-contributions\";\r\nimport { useFutureSavings } from \"./use-future-savings\";\r\n\r\nconst isFuture = (date: DateTime) => date.diffNow(\"milliseconds\").milliseconds > 0;\r\nconst thresholdTaxRemaining = (taxRate: number, threshold: number, scenario: Scenario) => {\r\n  const remaining = scenario.payments\r\n    .slice(scenario.currentPaymentIdx)\r\n    .filter((x) => x.cumulative >= threshold)\r\n    .reduce((acc, curr) => {\r\n      return acc + Math.min(curr.value, curr.cumulative - threshold) * taxRate;\r\n    }, 0);\r\n  return remaining;\r\n};\r\n\r\nexport const useFutureTotals = (\r\n  year: number,\r\n  options: { excludeHomeEquity: boolean } = { excludeHomeEquity: false }\r\n) => {\r\n  const { excludeHomeEquity } = options;\r\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios[year]);\r\n  const bonusTakehomeFactor = useStore(store, (x) => 1 - x.projectedWealth.bonusWitholdingsRate);\r\n  const savings = useFutureSavings(year);\r\n  const homeEquity = useFutureMortgageEquity(year);\r\n  const retirement = useFutureRetirementContributions(year);\r\n  const config = useStore(store, (x) => x.projectedWealth);\r\n\r\n  const dates = useDates(year);\r\n  const rawClusters = useMemo(() => {\r\n    const totals = scenarios\r\n      ?.map((x) => {\r\n        const futureBonuses = [\r\n          isFuture(dates.meritBonus) && x.meritBonus * bonusTakehomeFactor,\r\n          isFuture(dates.companyBonus) && x.companyBonus * bonusTakehomeFactor,\r\n          isFuture(dates.retirementBonus) && x.retirementBonus,\r\n          thresholdTaxRemaining(config.socialSecurityTaxRate, config.socialSecurityLimit, x),\r\n          thresholdTaxRemaining(-1 * config.medicareSupplementalTaxRate, config.medicareSupplementalTaxThreshold, x),\r\n        ].filter((x) => x) as number[];\r\n        return sumSimple(futureBonuses);\r\n      })\r\n      .map((y) => y + savings.remaining + retirement.remaining + (excludeHomeEquity ? 0 : homeEquity));\r\n\r\n    if (!totals || totals.length === 0) {\r\n      return [[savings.remaining + retirement.remaining]];\r\n    }\r\n    const clusters = ckmeans(\r\n      totals,\r\n      getClusterCount(totals, (x) => x)\r\n    );\r\n    return clusters;\r\n  }, [\r\n    bonusTakehomeFactor,\r\n    config.medicareSupplementalTaxRate,\r\n    config.medicareSupplementalTaxThreshold,\r\n    config.socialSecurityLimit,\r\n    config.socialSecurityTaxRate,\r\n    dates.companyBonus,\r\n    dates.meritBonus,\r\n    dates.retirementBonus,\r\n    excludeHomeEquity,\r\n    homeEquity,\r\n    retirement.remaining,\r\n    savings.remaining,\r\n    scenarios,\r\n  ]);\r\n\r\n  return useMemo(() => {\r\n    const numValues = rawClusters.flat().length;\r\n    return rawClusters.map((x, i, arr) => {\r\n      return {\r\n        min: Math.min(...x),\r\n        max: Math.max(...x),\r\n        median: median(x),\r\n        probability: x.length / numValues,\r\n        title: clusterTitle(i, arr.length),\r\n      };\r\n    });\r\n  }, [rawClusters]);\r\n};\r\n","import { Box, Stack } from \"@mui/system\";\r\nimport { DatePicker } from \"@mui/x-date-pickers\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { Card } from \"shared/components/card\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { ClusterValues } from \"shared/components/formatters/cluster-value\";\r\nimport { CountDown } from \"shared/components/formatters/countdown\";\r\nimport { Value } from \"shared/components/formatters/value\";\r\nimport { Cluster, useClusters } from \"shared/hooks/use-clusters\";\r\nimport { useDates } from \"shared/hooks/use-dates\";\r\nimport { store } from \"shared/store\";\r\nimport { scaleClusters } from \"shared/utility/cluster-helpers\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { monthDay } from \"shared/utility/format-date\";\r\nimport { useFutureMortgageEquity } from \"./hooks/use-future-mortgage-equity\";\r\nimport { useFutureRetirementContributions } from \"./hooks/use-future-retirement-contributions\";\r\nimport { useFutureSavings } from \"./hooks/use-future-savings\";\r\nimport { TresholdTax, useFutureMedicareTax, useFutureSocialSecurity } from \"./hooks/use-future-social-security\";\r\nimport { useFutureTotals } from \"./hooks/use-future-totals\";\r\n\r\nconst isFuture = (date: DateTime) => date.diffNow(\"milliseconds\").milliseconds > 0;\r\n\r\nexport const FutureEvents = (props: { year: number; onChange: (year: number) => void }) => {\r\n  const { year, onChange } = props;\r\n  const dates = useDates(year);\r\n\r\n  const savings = useFutureSavings(year);\r\n  const retirement = useFutureRetirementContributions(year);\r\n  const medicare = useFutureMedicareTax(year);\r\n  const socialSecurity = useFutureSocialSecurity(year);\r\n  const clusters = useClusters(year);\r\n  const bonusTakehomeFactor = useStore(store, (x) => 1 - x.projectedWealth.bonusWitholdingsRate);\r\n  const total = useFutureTotals(year);\r\n  const equity = useFutureMortgageEquity(year);\r\n\r\n  return (\r\n    <>\r\n      <Stack spacing={2} width={550} paddingRight={1}>\r\n        <Card\r\n          title={\r\n            <>\r\n              <span>Remaining Projected Wealth</span>\r\n              <DatePicker\r\n                sx={{ width: 90, marginRight: 2, marginLeft: \"auto\" }}\r\n                label={\"year\"}\r\n                views={[\"year\"]}\r\n                minDate={getLocalDateTime()}\r\n                maxDate={getLocalDateTime().plus({ years: 1 })}\r\n                value={getLocalDateTime().set({ year })}\r\n                slotProps={{\r\n                  textField: {\r\n                    variant: \"standard\",\r\n                    label: \"\",\r\n                  },\r\n                }}\r\n                onYearChange={(year) => {\r\n                  onChange(year.year);\r\n                }}\r\n              />\r\n            </>\r\n          }\r\n        >\r\n          <ClusterValues clusters={total} eventDate={dates.companyBonus} />\r\n        </Card>\r\n        {isFuture(dates.meritBonus) && (\r\n          <ClusterCard\r\n            title=\"Merit Bonus\"\r\n            date={dates.meritBonus}\r\n            cluster={scaleClusters(clusters.meritBonus, bonusTakehomeFactor)}\r\n          />\r\n        )}\r\n        {isFuture(dates.companyBonus) && (\r\n          <ClusterCard\r\n            title=\"Company Bonus\"\r\n            date={dates.companyBonus}\r\n            cluster={scaleClusters(clusters.companyBonus, bonusTakehomeFactor)}\r\n          />\r\n        )}\r\n        {isFuture(dates.retirementBonus) && (\r\n          <ClusterCard title=\"Retirement Bonus\" date={dates.retirementBonus} cluster={clusters.retirementBonus} />\r\n        )}\r\n        {!!socialSecurity.min && <ThresholdTaxCard thresholdTax={socialSecurity} title={\"Social Security Limit\"} />}\r\n        {!!medicare.min && <ThresholdTaxCard thresholdTax={medicare} title={\"Medicare Supplmental Tax\"} />}\r\n\r\n        <Card title={\"Savings & Retirement\"}>\r\n          {!!savings.perMonth && (\r\n            <Value title={\"savings\"} secondaryValue={<Cash tooltip=\"Per Month\" value={savings.perMonth} />}>\r\n              <Cash tooltip=\"Total Remaining\" value={savings.remaining} />\r\n            </Value>\r\n          )}\r\n          {!!retirement.perPaycheck && (\r\n            <Value title={\"retirement\"} secondaryValue={<Cash tooltip=\"Per Paycheck\" value={retirement.perPaycheck} />}>\r\n              <Cash tooltip=\"Total Remaining\" value={retirement.remaining} />\r\n            </Value>\r\n          )}\r\n          {!!equity && (\r\n            <Value title={\"Home Equity\"}>\r\n              <Cash tooltip=\"Total Remaining\" value={equity} />\r\n            </Value>\r\n          )}\r\n        </Card>\r\n      </Stack>\r\n    </>\r\n  );\r\n};\r\n\r\nconst ThresholdTaxCard = (props: { thresholdTax: TresholdTax; title: string }) => {\r\n  const { thresholdTax, title } = props;\r\n  return (\r\n    <Card\r\n      title={\r\n        <Box display={\"flex\"} width={\"max-content\"} gap={1} marginRight={2}>\r\n          <span>{title}</span>\r\n\r\n          <CountDown dateFormat={monthDay} variant=\"date\" dateTime={thresholdTax.max?.firstOccurrence} />\r\n          {thresholdTax.min &&\r\n            thresholdTax.max &&\r\n            !thresholdTax.min.firstOccurrence.equals(thresholdTax.max.firstOccurrence) && (\r\n              <>\r\n                <span>or</span>\r\n                <CountDown dateFormat={monthDay} variant=\"date\" dateTime={thresholdTax.min.firstOccurrence} />\r\n              </>\r\n            )}\r\n        </Box>\r\n      }\r\n    >\r\n      {thresholdTax.max && thresholdTax.max.total === thresholdTax.min?.total && (\r\n        <Value title={\"Remaining\"}>\r\n          <Cash value={thresholdTax.max?.remaining} compact={false} />\r\n        </Value>\r\n      )}\r\n      {thresholdTax.max && thresholdTax.max.total !== thresholdTax.min?.total && (\r\n        <>\r\n          <Value title={thresholdTax.max.firstOccurrence > getLocalDateTime() ? \"Early\" : \"Low\"}>\r\n            <Cash value={thresholdTax.max?.remaining} compact={false} />\r\n          </Value>\r\n          <Value title={thresholdTax.max.firstOccurrence > getLocalDateTime() ? \"Late\" : \"High\"}>\r\n            <Cash value={thresholdTax.min?.total} compact={false} />\r\n          </Value>\r\n        </>\r\n      )}\r\n      <Value title={\"Per Paycheck\"}>\r\n        <Cash value={thresholdTax.max?.perPaycheck} compact={false} />\r\n      </Value>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst ClusterCard = (props: { date: DateTime; cluster?: Cluster[]; title: string }) => {\r\n  const { date, cluster, title } = props;\r\n  return (\r\n    <Card\r\n      title={\r\n        <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\r\n          <span>{title}</span>\r\n          <CountDown variant=\"date\" dateFormat={monthDay} dateTime={date} />\r\n        </Box>\r\n      }\r\n    >\r\n      <ClusterValues clusters={cluster} eventDate={date} />\r\n    </Card>\r\n  );\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { findMostMostLikely } from \"shared/utility/cluster-helpers\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { findNearestIdxOnOrBefore, findNearestOnOrBefore } from \"shared/utility/find-nearest-on-or-before\";\nimport { calcEquity, calcLoanBalance } from \"shared/utility/mortgage-calc\";\nimport { useEarliestAccountEntry } from \"../../../shared/hooks/use-earliest-account-entry\";\nimport { useFutureTotals } from \"./use-future-totals\";\n\nexport interface TimeSeriesWealth {\n  graphDate: Date;\n  date: DateTime;\n  wealth: number;\n  yoyCash?: number;\n  yoyPct?: number;\n}\n\nconst useFuturesWealth = () => {\n  const year = getLocalDateTime().year;\n  const totals = useFutureTotals(year, { excludeHomeEquity: true });\n  const totalsPlusOne = useFutureTotals(year + 1, { excludeHomeEquity: true });\n\n  return {\n    [year + 1]: findMostMostLikely(totals)?.median ?? 0,\n    [year + 2]: (findMostMostLikely(totals)?.median ?? 0) + (findMostMostLikely(totalsPlusOne)?.median ?? 0),\n  };\n};\n\nexport const useTimeSeriesWealth = (year: number) => {\n  const localDateTime = getLocalDateTime().startOf(\"day\");\n  const earliest = useEarliestAccountEntry();\n  const accounts = useStore(store, (x) => x.wealth);\n  const futuresWealth = useFuturesWealth();\n\n  const data = useMemo(() => {\n    if (!earliest.isValid) {\n      return [];\n    }\n\n    const dates = new Array(year + 2 - earliest.year)\n      .fill(earliest.year)\n      .map((x, i) => DateTime.fromObject({ day: 1, month: 1, year: x + i }).startOf(\"day\"));\n\n    const idx = findNearestIdxOnOrBefore(localDateTime, dates, (x) => x);\n    if (!dates.some((x) => x.equals(localDateTime))) {\n      dates.splice(idx + 1, 0, localDateTime);\n    }\n\n    const futureBenchmarkIdx = idx;\n\n    return dates\n      .map((date) => {\n        const accountsWealth = Object.values(accounts).map((x) => {\n          if (x.type === \"mortgage\" && x.loan) {\n            const houseValue = findNearestOnOrBefore(date, x.data);\n            const balance = calcLoanBalance(date, x.loan);\n            return calcEquity(x.loan.ownershipPct, houseValue?.value, balance, x.loan.principal);\n          } else if (x.type === \"account\") {\n            const entry = findNearestOnOrBefore(date, x.data);\n            return entry?.value ?? 0;\n          }\n          return 0;\n        });\n\n        const accountWealth = accountsWealth.reduce((acc, curr) => acc + curr, 0);\n        const futureWealth = futuresWealth[date.year] ?? 0;\n\n        return {\n          date,\n          graphDate: date.toJSDate(),\n          wealth: accountWealth + futureWealth,\n        };\n      })\n      .map((x, idx, arr) => {\n        if (x.date <= localDateTime || x.date.year === localDateTime.year + 2) {\n          const benchmarkWealth = arr[idx - 1]?.wealth;\n          if (!benchmarkWealth) {\n            return x;\n          }\n          return {\n            ...x,\n            yoyCash: x.wealth - benchmarkWealth,\n            yoyPct: x.wealth / benchmarkWealth - 1,\n          };\n        }\n\n        const benchmarkWealth = arr[futureBenchmarkIdx]?.wealth;\n        if (!benchmarkWealth) {\n          return x;\n        }\n        return {\n          ...x,\n          yoyCash: x.wealth - benchmarkWealth,\n          yoyPct: x.wealth / benchmarkWealth - 1,\n        };\n      });\n  }, [earliest.isValid, earliest.year, year, localDateTime, accounts, futuresWealth]);\n  return data as TimeSeriesWealth[];\n};\n","import { AgCartesianChartOptions, AgLineSeriesOptions } from \"ag-charts-community\";\r\nimport { AgChartsReact } from \"ag-charts-react\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\nimport { useTimeSeriesWealth } from \"./hooks/use-times-series-wealth\";\r\n\r\nexport const WealthChart = (props: { titleYear: number }) => {\r\n  const dataYear = getLocalDateTime().year + 1;\r\n  const { titleYear } = props;\r\n  const data = useTimeSeriesWealth(dataYear);\r\n  const offsetIdx = getLocalDateTime().year - titleYear + 1;\r\n\r\n  const series = useMemo(() => {\r\n    return [\r\n      {\r\n        type: \"line\",\r\n        xKey: \"graphDate\",\r\n        yKey: \"wealth\",\r\n        yName: \"Wealth\",\r\n        tooltip: {\r\n          renderer: ({ datum, yKey, xKey }) => ({\r\n            content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCash(datum[yKey])}`,\r\n          }),\r\n        },\r\n      },\r\n      {\r\n        type: \"line\",\r\n        xKey: \"graphDate\",\r\n        yKey: \"yoyCash\",\r\n        yName: \"YoY ($)\",\r\n        tooltip: {\r\n          renderer: ({ datum, yKey, xKey }) => ({\r\n            content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCash(datum[yKey])}`,\r\n          }),\r\n        },\r\n      },\r\n    ] as AgLineSeriesOptions[];\r\n  }, []);\r\n\r\n  const options: AgCartesianChartOptions = useMemo(\r\n    () => ({\r\n      theme: \"ag-default-dark\",\r\n      title: {\r\n        text: `${data[data.length - 1 - offsetIdx].date.toFormat(shortDate)} Projected wealth ${formatCashShort(\r\n          (data[data.length - 1 - offsetIdx]?.wealth ?? 0) as number\r\n        )}`,\r\n      },\r\n      data,\r\n      axes: [\r\n        {\r\n          type: \"time\",\r\n          position: \"bottom\",\r\n          label: {\r\n            format: \"%Y\",\r\n          },\r\n        },\r\n        {\r\n          type: \"number\",\r\n          position: \"left\",\r\n          nice: false,\r\n        },\r\n      ],\r\n      series,\r\n    }),\r\n    [data, series, offsetIdx]\r\n  );\r\n  return <AgChartsReact options={options} />;\r\n};\r\n","import QueryStatsIcon from \"@mui/icons-material/QueryStats\";\nimport TodayIcon from \"@mui/icons-material/Today\";\nimport UpdateIcon from \"@mui/icons-material/Update\";\nimport { Tooltip } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { ColDef, ICellRendererParams } from \"ag-grid-community\";\nimport { DateTime } from \"luxon\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { Percent } from \"shared/components/formatters/percent\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { TimeSeriesWealth } from \"../hooks/use-times-series-wealth\";\n\nexport const columnConfig: ColDef<TimeSeriesWealth>[] = [\n  {\n    headerName: \"Date\",\n    colId: \"date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data?.date,\n    cellRenderer: (x: ICellRendererParams<unknown, DateTime>) => {\n      const localDateTime = getLocalDateTime().startOf(\"day\");\n      const systemYear = localDateTime.year;\n      return (\n        <Stack direction={\"row\"} alignItems={\"center\"}>\n          {x.valueFormatted}&nbsp;\n          {x.value && x.value.equals(localDateTime) && (\n            <Tooltip title=\"Today\">\n              <TodayIcon htmlColor=\"orange\" />\n            </Tooltip>\n          )}\n          {x.value &&\n            x.value.equals(\n              DateTime.fromObject({\n                day: 1,\n                month: 1,\n                year: systemYear,\n              })\n            ) && (\n              <Tooltip\n                title={`Benchmark for ${localDateTime.toFormat(shortDate)} & ${localDateTime.set({ day: 1, month: 1 }).plus({ years: 1 }).toFormat(shortDate)} `}\n              >\n                <QueryStatsIcon htmlColor=\"orange\" />\n              </Tooltip>\n            )}\n          {x.value &&\n            x.value.equals(\n              DateTime.fromObject({\n                day: 1,\n                month: 1,\n                year: systemYear + 1,\n              })\n            ) && (\n              <Tooltip\n                title={`Benchmark for ${localDateTime.set({ day: 1, month: 1 }).plus({ years: 2 }).toFormat(shortDate)} `}\n              >\n                <QueryStatsIcon htmlColor=\"rgb(244, 67, 54)\" />\n              </Tooltip>\n            )}\n          {x.value && x.value > localDateTime && (\n            <Tooltip title=\"Future Event\">\n              <UpdateIcon htmlColor={x.value.year - systemYear > 1 ? \"rgb(244, 67, 54)\" : \"orange\"} />\n            </Tooltip>\n          )}\n        </Stack>\n      );\n    },\n  },\n  {\n    type: \"numericColumn\",\n    headerName: \"Wealth\",\n    colId: \"wealth\",\n    valueGetter: (x) => x.data?.wealth,\n    cellRenderer: (x: ICellRendererParams<unknown, number>) => {\n      return x.value && <Cash value={x.value} placement=\"left\" />;\n    },\n  },\n  {\n    colId: \"yoy-cash\",\n    type: \"numericColumn\",\n    headerName: \"YoY ($)\",\n    valueGetter: (x) => x.data?.yoyCash,\n    cellRenderer: (x: ICellRendererParams<unknown, number>) => {\n      return x.value && <Cash value={x.value} placement=\"left\" />;\n    },\n  },\n  {\n    colId: \"yoy-percent\",\n    type: \"numericColumn\",\n    headerName: \"YoY (%)\",\n    valueGetter: (x) => x.data?.yoyPct,\n    cellRenderer: (x: ICellRendererParams<unknown, number>) => {\n      return x.value && <Percent value={x.value} />;\n    },\n    minWidth: 60,\n  },\n];\n","import { Box } from \"@mui/system\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { useTimeSeriesWealth } from \"../hooks/use-times-series-wealth\";\nimport { columnConfig } from \"./colum-config\";\n\nexport const WealthTable = () => {\n  const dataYear = getLocalDateTime().year + 1;\n  const data = useTimeSeriesWealth(dataYear);\n\n  return (\n    <Box height={\"100%\"} width={\"100%\"}>\n      <AgGrid\n        id=\"time-series-wealth\"\n        rowData={data}\n        columnDefs={columnConfig}\n        autoSizeStrategy={{ type: \"fitGridWidth\" }}\n        onRowDataUpdated={(e) => e.api.sizeColumnsToFit()}\n      />\n    </Box>\n  );\n};\n","import { Box, Stack } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { FutureEvents } from \"./future-events\";\nimport { WealthChart } from \"./wealth-chart\";\nimport { WealthTable } from \"./wealth-table\";\n\nexport const ProjectedWealth = () => {\n  const localTime = getLocalDateTime();\n  const [year, setYear] = useState(localTime.year);\n\n  return (\n    <Box display=\"flex\" flexDirection=\"row\" height=\"100%\" width={\"100%\"} gap={1}>\n      <Box flex=\"0 1 auto\" height={\"100%\"} overflow={\"auto\"}>\n        <FutureEvents onChange={setYear} year={year} />\n      </Box>\n      <Box flex=\"1 1 auto\" overflow={\"auto\"}>\n        <Stack spacing={2} height={\"100%\"} width={\"100%\"}>\n          <WealthChart titleYear={year} />\n          <WealthTable />\n        </Stack>\n      </Box>\n    </Box>\n  );\n};\n","import { create } from \"mutative\";\nimport { ProjectedWealthKeys } from \"shared/models/store/current\";\nimport { store } from \".\";\n\nexport const setProjectedWealth = (configName: ProjectedWealthKeys, value: number) => {\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      next.projectedWealth[configName] = value;\n    });\n  });\n};\n","import { InputAdornment, TextField } from \"@mui/material\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { useCallback, useState } from \"react\";\nimport { ProjectedWealthKeys } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\nimport { setProjectedWealth } from \"shared/store/set-projected-wealth\";\n\ninterface ConfigEntryProps {\n  configName: ProjectedWealthKeys;\n  label: string;\n  variant?: \"cash\" | \"percent\";\n}\n\nexport const ConfigEntry = (props: ConfigEntryProps) => {\n  const { configName, label, variant = \"cash\" } = props;\n  const [error, setError] = useState(false);\n  const isPercent = variant === \"percent\";\n\n  const onchange = useCallback(\n    (input: string) => {\n      let value = +input;\n      const isNan = Number.isNaN(value);\n      setError(isNan);\n      if (isNan) {\n        return;\n      }\n\n      if (isPercent) {\n        value /= 100;\n      }\n\n      setProjectedWealth(configName, value);\n    },\n    [configName, isPercent]\n  );\n\n  const value = useStore(store, (x) => x.projectedWealth[configName]);\n  const defaultValue = isPercent ? value * 100 : value;\n\n  return (\n    <TextField\n      error={error}\n      variant=\"outlined\"\n      InputProps={{\n        startAdornment: <InputAdornment position=\"start\">{isPercent ? \"%\" : \"$\"}</InputAdornment>,\n      }}\n      defaultValue={defaultValue.toFixed(isPercent ? 2 : 0)}\n      type=\"numeric\"\n      label={label}\n      onChange={(event) => {\n        onchange(event.target.value);\n      }}\n    />\n  );\n};\n","import { Card, CardContent, CardHeader } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { ConfigEntry } from \"./config-entry\";\n\nexport const Config = () => {\n  return (\n    <Card>\n      <CardHeader title=\"Configuration\" />\n      <CardContent>\n        <Stack spacing={2}>\n          <ConfigEntry configName=\"savingsPerMonth\" label=\"Monthly Saving Rate\" />\n          <ConfigEntry configName=\"retirementContributionPaycheck\" label=\"Retirement Contribution Per Paycheck\" />\n          <ConfigEntry configName=\"bonusWitholdingsRate\" label=\"Bonus Witholdings Rate\" variant=\"percent\" />\n          <Stack direction={\"row\"} spacing={2} width={\"100%\"} sx={{ \"& > *\": { flex: 1 } }}>\n            <ConfigEntry configName=\"socialSecurityLimit\" label=\"Social Security Tax Limit\" />\n            <ConfigEntry configName=\"socialSecurityTaxRate\" label=\"Social Security Tax\" variant=\"percent\" />\n          </Stack>\n          <Stack direction={\"row\"} spacing={2} width={\"100%\"} sx={{ \"& > *\": { flex: 1 } }}>\n            <ConfigEntry configName=\"medicareSupplementalTaxThreshold\" label=\"Medicare Supplemental Threshold\" />\n            <ConfigEntry configName=\"medicareSupplementalTaxRate\" label=\"Medicare Supplemental Tax\" variant=\"percent\" />\n          </Stack>\n        </Stack>\n      </CardContent>\n    </Card>\n  );\n};\n","import Close from \"@mui/icons-material/Close\";\r\nimport { Box, Button, IconButton, MenuItem, Modal, Paper, Select, Stack, Typography } from \"@mui/material\";\r\nimport { DatePicker } from \"@mui/x-date-pickers\";\r\nimport { SimpleTreeView } from \"@mui/x-tree-view/SimpleTreeView\";\r\nimport { TreeItem2 } from \"@mui/x-tree-view/TreeItem2\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useState } from \"react\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { Percent } from \"shared/components/formatters/percent\";\r\nimport { scenarioStore } from \"shared/store/scenario-store\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { formatCash } from \"shared/utility/format-cash\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\nimport { formatPercent } from \"shared/utility/format-percent\";\r\n\r\nexport const ScenarioExplorer = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [year, setYear] = useState(getLocalDateTime().year);\r\n  const [scenarioIndex, setScenarioIndex] = useState(0);\r\n  const scenarioData = useStore(scenarioStore);\r\n  const scenarios = scenarioData.scenarios[year];\r\n  const scenario = scenarios?.[scenarioIndex];\r\n  if (!scenario) {\r\n    return null;\r\n  }\r\n  return (\r\n    <>\r\n      <Button onClick={() => setIsOpen(true)}>Scenario Explorer</Button>\r\n      <Modal open={isOpen}>\r\n        <Paper sx={{ position: \"absolute\", top: 24, bottom: 24, right: 24, left: 24, padding: 2, overflow: \"auto\" }}>\r\n          <IconButton onClick={() => setIsOpen(false)} sx={{ position: \"absolute\", top: 8, right: 8 }}>\r\n            <Close />\r\n          </IconButton>\r\n          <Stack spacing={2}>\r\n            <Stack direction={\"row\"} alignItems={\"center\"} spacing={2}>\r\n              <Typography variant=\"h5\">Scenario Explorer</Typography>\r\n              <DatePicker\r\n                sx={{ width: 90, marginRight: 2 }}\r\n                label={\"year\"}\r\n                views={[\"year\"]}\r\n                minDate={getLocalDateTime().set({ year: scenarioData?.minYear })}\r\n                maxDate={getLocalDateTime().set({ year: scenarioData?.maxYear })}\r\n                defaultValue={getLocalDateTime()}\r\n                slotProps={{\r\n                  textField: {\r\n                    variant: \"standard\",\r\n                    label: \"\",\r\n                  },\r\n                }}\r\n                onYearChange={(year) => {\r\n                  setYear(year.year);\r\n                }}\r\n              />\r\n              <Select variant=\"standard\" onChange={(event) => setScenarioIndex(+event.target.value)} defaultValue={\"0\"}>\r\n                {scenarios?.map((x, i) => (\r\n                  <MenuItem key={i} value={i}>\r\n                    {x.weight} {formatCash(x.totalPay)}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </Stack>\r\n\r\n            <Paper elevation={5} sx={{ padding: 2 }}>\r\n              <SimpleTreeView\r\n                defaultExpandedItems={[\r\n                  \"_TotalPay\",\r\n                  \"totalMerit\",\r\n                  \"pay\",\r\n                  \"meritBonus\",\r\n                  \"companyBonus\",\r\n                  \"lastThreeMeritBonusFactor\",\r\n                ]}\r\n              >\r\n                <TreeItem2 itemId=\"scenario\" label={<span>Scenario</span>}>\r\n                  <TreeItem2 itemId=\"weight\" label={<span>Weight: {scenario.weight}</span>} />\r\n                  <TreeItem2 itemId=\"year\" label={<span>Year: {scenario.year}</span>} />\r\n                </TreeItem2>\r\n                <TreeItem2\r\n                  itemId=\"_TotalPay\"\r\n                  label={\r\n                    <Stack direction={\"row\"} spacing={1}>\r\n                      <span>Total Pay: </span>\r\n                      <Cash value={scenario.totalPay} compact={false} />\r\n                    </Stack>\r\n                  }\r\n                >\r\n                  <TreeItem2\r\n                    itemId=\"aprToApr\"\r\n                    label={\r\n                      <Stack direction={\"row\"} spacing={1}>\r\n                        <span>Apr To Apr: </span>\r\n                        <Cash value={scenario.aprToApr} compact={false} />\r\n                      </Stack>\r\n                    }\r\n                  />\r\n                  <TreeItem2\r\n                    itemId=\"basePay\"\r\n                    label={\r\n                      <Stack direction={\"row\"} spacing={1}>\r\n                        <span>Base Pay: </span>\r\n                        <Cash value={scenario.basePay} compact={false} />\r\n                      </Stack>\r\n                    }\r\n                  />\r\n                  <TreeItem2\r\n                    itemId=\"taxablePay\"\r\n                    label={\r\n                      <Stack direction={\"row\"} spacing={1}>\r\n                        <span>Taxable Pay: </span>\r\n                        <Cash value={scenario.taxablePay} compact={false} />\r\n                      </Stack>\r\n                    }\r\n                  />\r\n                  <TreeItem2\r\n                    itemId=\"totalPay\"\r\n                    label={\r\n                      <Stack direction={\"row\"} spacing={1}>\r\n                        <span>Total Pay: </span>\r\n                        <Cash value={scenario.totalPay} compact={false} />\r\n                      </Stack>\r\n                    }\r\n                  />\r\n                  <TreeItem2\r\n                    itemId=\"totalMerit\"\r\n                    label={\r\n                      <Stack direction={\"row\"} spacing={1}>\r\n                        <span>Total Merit Increase: </span>\r\n                        <Percent value={scenario.meritIncreasePct + scenario.equityIncreasePct} />\r\n                      </Stack>\r\n                    }\r\n                  >\r\n                    <TreeItem2\r\n                      itemId=\"meritIncreasePct\"\r\n                      label={\r\n                        <Stack direction={\"row\"} spacing={1}>\r\n                          <span>Merit Increase: </span>\r\n                          <Percent value={scenario.meritIncreasePct} />\r\n                        </Stack>\r\n                      }\r\n                    />\r\n                    <TreeItem2\r\n                      itemId=\"equityIncreasePct\"\r\n                      label={\r\n                        <Stack direction={\"row\"} spacing={1}>\r\n                          <span>Merit Increase: </span>\r\n                          <Percent value={scenario.equityIncreasePct} />\r\n                        </Stack>\r\n                      }\r\n                    />\r\n                  </TreeItem2>\r\n\r\n                  <TreeItem2\r\n                    itemId=\"currentPaymentIdx\"\r\n                    label={\r\n                      <Stack direction={\"row\"} spacing={1}>\r\n                        <span>Current Payment Index: </span>\r\n                        <span>{scenario.currentPaymentIdx}</span>\r\n                      </Stack>\r\n                    }\r\n                  />\r\n                  <TreeItem2\r\n                    itemId=\"remainingPayments\"\r\n                    label={\r\n                      <Stack direction={\"row\"} spacing={1}>\r\n                        <span>Remaining Regular Payments: </span>\r\n                        <span>{scenario.remainingRegularPayments}</span>\r\n                      </Stack>\r\n                    }\r\n                  />\r\n                  <TreeItem2\r\n                    itemId=\"current_payment\"\r\n                    label={\r\n                      <Stack direction={\"row\"} spacing={2}>\r\n                        <Box>Current Payment: </Box>\r\n                        <Box>\r\n                          {DateTime.fromISO(scenario.payments[scenario.currentPaymentIdx].payedOn).toFormat(shortDate)}\r\n                        </Box>\r\n                        <Box width={70} textAlign={\"right\"}>\r\n                          {formatCash(scenario.payments[scenario.currentPaymentIdx].value)}\r\n                        </Box>\r\n                        <Box width={70} textAlign={\"right\"}>\r\n                          {formatCash(scenario.payments[scenario.currentPaymentIdx].cumulative)}\r\n                        </Box>\r\n                        <Box> {scenario.payments[scenario.currentPaymentIdx].type}</Box>\r\n                      </Stack>\r\n                    }\r\n                  ></TreeItem2>\r\n                  <TreeItem2 itemId=\"payments\" label={\"Payments Considered\"}>\r\n                    {scenario.payments.toReversed().map((x, i, arr) => (\r\n                      <TreeItem2\r\n                        key={i}\r\n                        itemId={`payments-${i}`}\r\n                        label={\r\n                          <Stack\r\n                            sx={{\r\n                              backgroundColor:\r\n                                scenario.currentPaymentIdx == arr.length - 1 - i ? \"rgba(0,255,0,.15)\" : undefined,\r\n                            }}\r\n                            direction={\"row\"}\r\n                            spacing={2}\r\n                          >\r\n                            <Box>{arr.length - 1 - i}</Box>\r\n                            <Box>{DateTime.fromISO(x.payedOn).toFormat(shortDate)}</Box>\r\n                            <Box width={70} textAlign={\"right\"}>\r\n                              {formatCash(x.value)}\r\n                            </Box>\r\n                            <Box width={70} textAlign={\"right\"}>\r\n                              {formatCash(x.cumulative)}\r\n                            </Box>\r\n                            <Box> {x.type}</Box>\r\n                          </Stack>\r\n                        }\r\n                      />\r\n                    ))}\r\n                  </TreeItem2>\r\n                  <TreeItem2 itemId=\"pay\" label={\"Pay\"}>\r\n                    {scenario.pay.toReversed().map((x, i) => (\r\n                      <TreeItem2 key={i} itemId={`$pay-${i}`} label={`${DateTime.fromISO(x.date).year} ${x.value}`} />\r\n                    ))}\r\n                  </TreeItem2>\r\n                </TreeItem2>\r\n\r\n                <TreeItem2\r\n                  itemId=\"meritBonus\"\r\n                  label={\r\n                    <Stack direction={\"row\"} spacing={1}>\r\n                      <span>Merit Bonus: </span>\r\n                      <Cash value={scenario.meritBonus} compact={false} />\r\n                    </Stack>\r\n                  }\r\n                >\r\n                  <TreeItem2\r\n                    itemId=\"mertiBonusPct\"\r\n                    label={\r\n                      <Stack direction={\"row\"} spacing={1}>\r\n                        <span>Merit Bonus Percent: </span>\r\n                        <Percent value={scenario.meritBonusPct} />\r\n                      </Stack>\r\n                    }\r\n                  />\r\n                </TreeItem2>\r\n                <TreeItem2\r\n                  itemId=\"companyBonus\"\r\n                  label={\r\n                    <Stack direction={\"row\"} spacing={1}>\r\n                      <span>Company Bonus:</span>\r\n                      <Cash value={scenario.companyBonus} compact={false} />\r\n                    </Stack>\r\n                  }\r\n                >\r\n                  <TreeItem2\r\n                    itemId=\"companyBonusFactor.value\"\r\n                    label={\r\n                      <Stack direction={\"row\"} spacing={1}>\r\n                        <span>Company Bonus Factor:</span>\r\n                        <Percent value={scenario.companyBonusFactor} />\r\n                      </Stack>\r\n                    }\r\n                  />\r\n                  <TreeItem2\r\n                    itemId=\"companyBonusPct.value\"\r\n                    label={\r\n                      <Stack direction={\"row\"} spacing={1}>\r\n                        <span>Company Bonus Percent:</span>\r\n                        <Percent value={scenario.companyBonusPct} />\r\n                      </Stack>\r\n                    }\r\n                  />\r\n                  <TreeItem2\r\n                    itemId=\"lastThreeMeritBonusFactor\"\r\n                    label={\r\n                      <Stack direction={\"row\"} spacing={1}>\r\n                        <span>Last Three Merit Bonus Percent:</span>\r\n                        <Percent value={scenario.lastThreeMeritBonusFactor} />\r\n                      </Stack>\r\n                    }\r\n                  >\r\n                    {scenario.lastThreeMeritBonuses.toReversed().map((x, i) => (\r\n                      <TreeItem2\r\n                        key={`${i}${x}`}\r\n                        itemId={`lastThreeMeritBonuses${i}`}\r\n                        label={`${year - i} ${formatPercent(x)}`}\r\n                      />\r\n                    ))}\r\n                  </TreeItem2>\r\n                </TreeItem2>\r\n                <TreeItem2\r\n                  itemId=\"retirementBonus\"\r\n                  label={\r\n                    <Stack direction={\"row\"} spacing={1}>\r\n                      <span>Retirement Bonus:</span>\r\n                      <Cash value={scenario.retirementBonus} compact={false} />\r\n                    </Stack>\r\n                  }\r\n                >\r\n                  <TreeItem2\r\n                    itemId=\"retirementBonusPct\"\r\n                    label={\r\n                      <Stack direction={\"row\"} spacing={1}>\r\n                        <span>Retirement Bonus Percent:</span>\r\n                        <Percent value={scenario.retirementBonusPct} />\r\n                      </Stack>\r\n                    }\r\n                  />\r\n                </TreeItem2>\r\n              </SimpleTreeView>\r\n            </Paper>\r\n          </Stack>\r\n        </Paper>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n","import { Box, Table, TableBody, TableCell, TableHead, TableRow } from \"@mui/material\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport { ReactNode } from \"react\";\nimport { ZodError } from \"zod\";\n\ninterface InvalidDataDialogProps {\n  open?: boolean;\n  error?: ZodError;\n  children?: ReactNode;\n}\n\nexport default function InvalidDataDialog(props: InvalidDataDialogProps) {\n  const { open, error, children } = props;\n\n  return (\n    <>\n      <Dialog open={!!open}>\n        <DialogTitle id=\"alert-dialog-title\">{\"Error Loading Data\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            <Box maxHeight={500} overflow={\"auto\"}>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Error Message</TableCell>\n                    <TableCell>Path</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {error?.issues.map((x, idx) => {\n                    return (\n                      <TableRow key={idx}>\n                        <TableCell>{x.message}</TableCell>\n                        <TableCell>{x.path.join(\".\")}</TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            </Box>\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>{children}</DialogActions>\n      </Dialog>\n    </>\n  );\n}\n","import { useStore } from \"@tanstack/react-store\";\nimport { useCallback } from \"react\";\nimport { store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const downloadJson = <T,>(filename: string, storeData: T) => {\n  const data = JSON.stringify(storeData, null, 2);\n  const link = document.createElement(\"a\");\n  link.download = filename;\n  const blob = new Blob([data], { type: \"application/json\" });\n  link.href = window.URL.createObjectURL(blob);\n  link.click();\n};\n\nexport const useExport = () => {\n  const storeData = useStore(store);\n  const onExport = useCallback(() => {\n    downloadJson(`wealth-tracker-${getLocalDateTime().toFormat(shortDate)}.json`, storeData);\n  }, [storeData]);\n\n  return onExport;\n};\n","import { useCallback } from \"react\";\nimport { storeValidator } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\nimport { migration } from \"shared/store/migrations\";\n\nfunction selectFile(contentType: string) {\n  return new Promise<File>((resolve) => {\n    const input = document.createElement(\"input\");\n    input.type = \"file\";\n    input.multiple = false;\n    input.accept = contentType;\n\n    input.onchange = () => {\n      const files = Array.from(input.files ?? []);\n      resolve(files[0]);\n    };\n\n    input.click();\n  });\n}\n\nexport const useImport = () => {\n  return useCallback(() => {\n    return new Promise<void>((resolve, reject) => {\n      selectFile(\"application/json\").then((file) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = (readerEvent) => {\n          const content = readerEvent.target?.result?.toString();\n          if (content) {\n            const data = JSON.parse(window.atob(content.split(\",\")[1]));\n            const validation = storeValidator.safeParse(data);\n            if (validation.success) {\n              store.setState(() => data);\n              resolve();\n            } else {\n              try {\n                migration(data);\n                store.setState(() => data);\n                resolve();\n              } catch (err) {\n                console.log(\"error\", err);\n                console.log(\"invalid data\", data);\n                reject(err);\n              }\n            }\n          }\n        };\n      });\n    });\n  }, []);\n};\n","import { useMemo } from \"react\";\nimport { storeValidator } from \"shared/models/store/current\";\n\nexport const useStoreDataError = () => {\n  const invalidData = localStorage.getItem(\"store-invalid\");\n  return useMemo(() => {\n    if (!invalidData) {\n      return { hadError: false };\n    }\n    const jsonInvalidData = JSON.parse(invalidData);\n    const validated = storeValidator.safeParse(jsonInvalidData);\n    return {\n      hadError: !!invalidData,\n      invalidData: jsonInvalidData,\n      parseError: invalidData && !validated.success ? validated.error : undefined,\n      resetError: () => {\n        localStorage.removeItem(\"store-invalid\");\n      },\n    };\n  }, [invalidData]);\n};\n","import DeleteForever from \"@mui/icons-material/DeleteForever\";\r\nimport { Button, Card, CardActions, CardHeader, Stack } from \"@mui/material\";\r\nimport InvalidDataDialog from \"app/invalid-data-dialog\";\r\nimport { useState } from \"react\";\r\nimport { ConfirmDialog } from \"shared/components/confirm-dialog\";\r\nimport { downloadJson, useExport } from \"shared/hooks/use-export\";\r\nimport { useImport } from \"shared/hooks/use-import\";\r\nimport { useStoreDataError } from \"shared/hooks/use-store-data-error\";\r\nimport { resetStore } from \"shared/store\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\n\r\nexport const System = () => {\r\n  const onExport = useExport();\r\n  const onImport = useImport();\r\n  const { hadError, parseError, resetError, invalidData } = useStoreDataError();\r\n  const [error, setError] = useState(parseError);\r\n  const [isOpen, setIsOpen] = useState(hadError);\r\n\r\n  return (\r\n    <>\r\n      <Stack spacing={2}>\r\n        <Card>\r\n          <CardHeader title=\"Data\" />\r\n          <CardActions>\r\n            <Button\r\n              onClick={() =>\r\n                onImport().catch((err) => {\r\n                  setIsOpen(true);\r\n                  setError(err);\r\n                })\r\n              }\r\n            >\r\n              Import\r\n            </Button>\r\n            <Button onClick={onExport}>Export</Button>\r\n            <ConfirmDialog title=\"Reset Everything\" onConfirm={resetStore}>\r\n              <Button color=\"error\">\r\n                <DeleteForever />\r\n                Reset\r\n              </Button>\r\n            </ConfirmDialog>\r\n          </CardActions>\r\n        </Card>\r\n      </Stack>\r\n      <InvalidDataDialog open={isOpen} error={error}>\r\n        {hadError && (\r\n          <>\r\n            <Button\r\n              color=\"error\"\r\n              onClick={() => {\r\n                setIsOpen(false);\r\n                resetError?.();\r\n                resetStore();\r\n              }}\r\n            >\r\n              Reset\r\n            </Button>\r\n            <Button\r\n              onClick={() => {\r\n                downloadJson(`invalid-data-wealth-tracker-${getLocalDateTime().toFormat(shortDate)}.json`, invalidData);\r\n              }}\r\n            >\r\n              Download Data\r\n            </Button>\r\n\r\n            <Button\r\n              onClick={() => {\r\n                setIsOpen(false);\r\n                resetError?.();\r\n              }}\r\n            >\r\n              Ignore\r\n            </Button>\r\n          </>\r\n        )}\r\n        {!hadError && (\r\n          <Button\r\n            onClick={() => {\r\n              setIsOpen(false);\r\n            }}\r\n          >\r\n            Cancel\r\n          </Button>\r\n        )}\r\n      </InvalidDataDialog>\r\n    </>\r\n  );\r\n};\r\n","import CloseIcon from \"@mui/icons-material/Close\";\r\nimport SettingsIcon from \"@mui/icons-material/Settings\";\r\nimport { Box, Button, Dialog, DialogContent, DialogTitle, IconButton, Tab, Tabs } from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport { Config } from \"./config\";\r\nimport { ScenarioExplorer } from \"./scenario-explorer\";\r\nimport { System } from \"./system\";\r\n\r\nexport const ConfigModal = () => {\r\n  const [tab, setTab] = useState(\"system\");\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={() => setIsOpen(true)}>\r\n        <SettingsIcon />\r\n      </Button>\r\n      <Dialog maxWidth={false} open={isOpen} onClose={() => setIsOpen(false)}>\r\n        <DialogTitle sx={{ display: \"flex\" }}>\r\n          <Tabs value={tab} onChange={(_, value) => setTab(value)}>\r\n            <Tab value=\"projected-Income\" label=\"Projected Income\" />\r\n            <Tab value=\"projected-wealth\" label=\"Projected Wealth\" />\r\n            <Tab value=\"system\" label=\"System\" />\r\n          </Tabs>\r\n          <IconButton sx={{ height: \"min-content\", marginLeft: \"auto\" }} onClick={() => setIsOpen(false)}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Box width={600} height={450}>\r\n            {tab === \"projected-Income\" && <ScenarioExplorer />}\r\n            {tab === \"projected-wealth\" && <Config />}\r\n            {tab === \"system\" && <System />}\r\n          </Box>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n","import { Box, Stack, Tab, Tabs } from \"@mui/material\";\nimport { NetWealth } from \"capabilities/net-wealth\";\nimport { ProjectedIncome } from \"capabilities/projected-income\";\nimport { ProjectedWealth } from \"capabilities/projected-wealth\";\nimport { useState } from \"react\";\nimport { ConfigModal } from \"./config/config-modal\";\n\nexport const App = () => {\n  const [tab, setTab] = useState<string>(\"wealth\");\n\n  return (\n    <Box padding={2} paddingTop={0} display={\"flex\"} flexDirection={\"column\"} height=\"100%\" gap={2}>\n      <Box flex=\"0 1 auto\">\n        <Stack direction=\"row\">\n          <Tabs value={tab} onChange={(_, value) => setTab(value)}>\n            <Tab value=\"wealth\" label=\"Total Wealth\" />\n            <Tab value=\"projected-income\" label=\"Projected Income\" />\n            <Tab value=\"projected-wealth\" label=\"Projected Wealth\" />\n          </Tabs>\n          <Box marginLeft={\"auto\"} gap={2} display={\"flex\"}>\n            <ConfigModal />\n          </Box>\n        </Stack>\n      </Box>\n      <Box flex=\"1 1 auto\" height={\"100%\"} width={\"100%\"} overflow=\"hidden\">\n        {tab === \"wealth\" && <NetWealth />}\n        {tab === \"projected-income\" && <ProjectedIncome />}\n        {tab === \"projected-wealth\" && <ProjectedWealth />}\n      </Box>\n    </Box>\n  );\n};\n","import { DateTime } from \"luxon\";\n\nexport const aPayday = DateTime.fromObject({ month: 12, day: 1, year: 2023 });\n","import { DateTime } from \"luxon\";\r\nimport { AccountData, ProjectedIncome } from \"shared/models/store/current\";\r\nimport { findSameYear } from \"shared/utility/find-same-year\";\r\nimport { getPayments } from \"shared/utility/get-payments\";\r\nimport { valueByDateRange } from \"shared/utility/get-values-by-date-range\";\r\n\r\nexport const getScenarioSize = (year: number, projectedIncome: ProjectedIncome) => {\r\n  return getMeritSequence(year, projectedIncome).length * projectedIncome.timeSeries.companyBonus.length;\r\n};\r\n\r\nconst getMeritPairs = (year: number, projectedIncome: ProjectedIncome) => {\r\n  const timeSeries = projectedIncome.timeSeries;\r\n  const meritBonusPct = findSameYear(year, timeSeries.meritBonusPct);\r\n  const meritIncreasePct = findSameYear(year, timeSeries.meritIncreasePct);\r\n\r\n  const allMeritPairs = timeSeries.meritIncreasePct.map((x) => {\r\n    const meritBonusPctPair = findSameYear(DateTime.fromISO(x.date).year, timeSeries.meritBonusPct);\r\n    return {\r\n      meritIncreasePct: x.value,\r\n      meritBonusPct: meritBonusPctPair?.value ?? 0,\r\n    };\r\n  });\r\n\r\n  return allMeritPairs\r\n    .filter((x) => (meritBonusPct ? x.meritBonusPct === meritBonusPct.value : true))\r\n    .filter((x) => (meritIncreasePct ? x.meritIncreasePct === meritIncreasePct?.value : true));\r\n};\r\n\r\nexport const getMeritSequence = (year: number, projectedIncome: ProjectedIncome) => {\r\n  const timeSeries = projectedIncome.timeSeries;\r\n  const meritPairs = getMeritPairs(year, projectedIncome);\r\n\r\n  const pay = timeSeries.paycheck.filter((x) => DateTime.fromISO(x.date).year > year - 3);\r\n  const mostRecentPay = pay.at(-1) ?? timeSeries.paycheck.at(-1);\r\n\r\n  if (!mostRecentPay) {\r\n    return [];\r\n  }\r\n\r\n  const yearsToGenerate = Math.max(year - DateTime.fromISO(mostRecentPay.date).year, 1);\r\n\r\n  let meritSequence = meritPairs.slice().map((x) => [x]);\r\n  for (let i = 0; i < yearsToGenerate - 1; i++) {\r\n    meritSequence = meritSequence.flatMap((x) => {\r\n      return meritPairs.map((merit) => {\r\n        return x.slice().concat(merit);\r\n      });\r\n    });\r\n  }\r\n\r\n  const groups = Object.entries(Object.groupBy(meritSequence, (x) => JSON.stringify(x))).map(([, values]) => {\r\n    return {\r\n      weight: values!.length,\r\n      values: values!.at(0)!,\r\n    };\r\n  });\r\n\r\n  return groups;\r\n};\r\n\r\nexport const getEmptyMeritSequence = (year: number, projectedIncome: ProjectedIncome, pay: AccountData[]) => {\r\n  const timeSeries = projectedIncome.timeSeries;\r\n  const equityIncreasePct = findSameYear(year, timeSeries.equityPct)?.value ?? 0;\r\n  const meritIncreasePct = findSameYear(year, timeSeries.meritIncreasePct)?.value ?? 0;\r\n  const meritBonusPct = findSameYear(year, timeSeries.meritBonusPct)?.value ?? 0;\r\n  const meritBonuses = pay.map(\r\n    (x) => findSameYear(DateTime.fromISO(x.date).year, timeSeries.meritBonusPct)?.value ?? 0\r\n  );\r\n\r\n  const lastThreeMeritBonuses = meritBonuses.slice(-3);\r\n  const lastThreeMeritBonusFactor = meritBonuses.slice(-3).reduce((acc, curr) => acc + curr, 0);\r\n  const payments = getPayments(\r\n    DateTime.fromObject({ day: 1, month: 1, year: year - 1 }),\r\n    DateTime.fromObject({ day: 31, month: 12, year: year }).endOf(\"day\"),\r\n    valueByDateRange(pay)\r\n  );\r\n\r\n  return [\r\n    {\r\n      year,\r\n      pay: pay.slice(),\r\n      lastThreeMeritBonusFactor,\r\n      lastThreeMeritBonuses,\r\n      meritBonusPct,\r\n      meritIncreasePct,\r\n      payments,\r\n      equityIncreasePct,\r\n      retirementBonusPct: 0.15,\r\n      weight: 1,\r\n    },\r\n  ];\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { create } from \"mutative\";\r\nimport { Scenario } from \"shared/models/scenario\";\r\nimport { store } from \"shared/store\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { scenarioStore } from \"../store/scenario-store\";\r\nimport { getScenarioSize } from \"./merit-sequence\";\r\n\r\nconst currentYear = getLocalDateTime().year;\r\nconst maxYear = (() => {\r\n  const projectedIncome = store.state.projectedIncome;\r\n  for (let i = currentYear; i <= currentYear + 10; i++) {\r\n    if (getScenarioSize(i, projectedIncome) > 2499) {\r\n      return Math.max(currentYear, i - 1);\r\n    }\r\n  }\r\n  return currentYear + 10;\r\n})();\r\n\r\nconst workers = [\r\n  new Worker(new URL(\"worker.js\", import.meta.url), { type: \"module\", name: \"1\" }),\r\n  new Worker(new URL(\"worker.js\", import.meta.url), { type: \"module\", name: \"2\" }),\r\n  new Worker(new URL(\"worker.js\", import.meta.url), { type: \"module\", name: \"3\" }),\r\n  new Worker(new URL(\"worker.js\", import.meta.url), { type: \"module\", name: \"4\" }),\r\n];\r\n\r\nworkers.map(\r\n  (x) =>\r\n    (x.onmessage = (event: MessageEvent<{ year: number; scenarios: Scenario[] }>) => {\r\n      const isLoading = event.data.year !== maxYear;\r\n      scenarioStore.setState((prev) => {\r\n        return create(prev, (x) => {\r\n          x.scenarios[event.data.year] = event.data.scenarios;\r\n          x.loading = isLoading;\r\n          x.maxYear = Math.max(event.data.year, x.maxYear);\r\n          x.minYear = Math.min(event.data.year, x.minYear);\r\n        });\r\n      });\r\n    })\r\n);\r\n\r\nconst loadAllScenarios = () => {\r\n  const projectedIncome = store.state.projectedIncome;\r\n  const first = projectedIncome.timeSeries.paycheck[1]?.date;\r\n  const date = first ? DateTime.fromISO(first) : getLocalDateTime();\r\n  const oldestYear = date.year;\r\n\r\n  workers[0].postMessage({ year: currentYear, projectedIncome });\r\n\r\n  let workerIdx = 1;\r\n  for (let i = oldestYear; i < currentYear; i++) {\r\n    const idx = workerIdx++ % workers.length;\r\n    workers[idx].postMessage({ year: i, projectedIncome });\r\n  }\r\n\r\n  for (let i = currentYear + 1; i <= maxYear; i++) {\r\n    const idx = workerIdx++ % workers.length;\r\n    workers[idx].postMessage({ year: i, projectedIncome });\r\n  }\r\n};\r\nloadAllScenarios();\r\n\r\nlet priorProjectedIncome = store.state.projectedIncome;\r\nstore.subscribe(() => {\r\n  if (priorProjectedIncome === store.state.projectedIncome) {\r\n    return;\r\n  }\r\n  scenarioStore.setState(() => ({ loading: false, scenarios: {}, maxYear: currentYear, minYear: currentYear }));\r\n  priorProjectedIncome = store.state.projectedIncome;\r\n  loadAllScenarios();\r\n});\r\n","import { CssBaseline, ThemeProvider, createTheme } from \"@mui/material\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers\";\nimport { AdapterLuxon } from \"@mui/x-date-pickers/AdapterLuxon\";\nimport \"ag-grid-community/styles/ag-grid.css\";\nimport \"ag-grid-community/styles/ag-theme-quartz.css\";\nimport { App } from \"app/app.tsx\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport \"shared/web-worker/entry\";\n\nconst darkTheme = createTheme({\n  palette: {\n    mode: \"dark\",\n  },\n});\n\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n  <React.StrictMode>\n    <ErrorBoundary\n      fallbackRender={(props) => {\n        return (\n          <>\n            <div style={{ backgroundColor: \"#FFF\" }}>{props.error.message}</div>\n            <div style={{ backgroundColor: \"#FFF\" }}>{props.error.stackTrace}</div>\n          </>\n        );\n      }}\n    >\n      <LocalizationProvider dateAdapter={AdapterLuxon}>\n        <ThemeProvider theme={darkTheme}>\n          <CssBaseline />\n          <App />\n        </ThemeProvider>\n      </LocalizationProvider>\n    </ErrorBoundary>\n  </React.StrictMode>\n);\n"],"names":["sortByDate","select","direction","a","b","toMillis","loanValidator","z","object","principal","number","ratePct","paymentsPerYear","payment","firstPaymentDate","string","ownershipPct","accountDataValidator","date","value","accountValidator","type","literal","data","array","getDefaultStore","version","projectedIncome","timeSeries","paycheck","meritBonusPct","companyBonusPct","meritBonus","companyBonus","retirementBonus","equityPct","meritIncreasePct","wealth","projectedWealth","medicareSupplementalTaxThreshold","socialSecurityLimit","socialSecurityTaxRate","medicareSupplementalTaxRate","savingsPerMonth","retirementContributionPaycheck","bonusWitholdingsRate","id","mortgageValidator","loan","optional","record","union","storeValidator","migration","Error","storeV0Validator","parse","storeV1Validator","storeV2Validator","next","console","log","createStore","validator","defaultValue","key","invalidData","localData","localStorage","getItem","JSON","safeParse","success","setItem","stringify","err","store","CreateStore","subscribe","current","state","addAccountEntry","accountName","amount","setState","create","prev","push","startOf","toString","sort","DateTime","fromISO","x","addProjectedIncome","concat","removeAccount","removeAccountEntry","idx","findIndex","splice","removeProjectedIncome","resetStore","setLoan","updateAccountDate","toISO","updateAccountName","currentAccountName","newAccountName","updateAccountValue","updateProjectedIncome","NewAccount","forwardRef","props","ref","open","setOpen","useState","nameRef","useRef","error","setError","accountType","setAccountType","undefined","marginTop","target","children","AgGrid","rest","height","getLocalDateTime","local","shortDate","monthDay","formatCashShort","Intl","NumberFormat","style","currency","notation","maximumFractionDigits","format","formatCash","Cash","fallback","disableTooltip","compact","tooltip","placement","formatted","useMemo","join","createAccountColumnConfig","headerName","valueFormatter","toFormat","valueGetter","cellEditor","editable","valueSetter","fromJSDate","newValue","isValid","cellRenderer","cellStyle","display","padding","sortable","width","colId","DeleteForeverIcon","useMissingYears","account","years","Object","entries","groupBy","year","map","find","janFirst","fromObject","day","month","diff","days","lookup","fromEntries","missing","i","length","ConfirmDialog","onConfirm","title","isOpen","setIsOpen","openButton","React","cloneElement","onClick","minWidth","justifyContent","marginRight","AccountSettings","nextAccountName","setNextAccountName","SettingsIcon","Close","event","AccountTab","useStore","setDate","setAmount","missingYears","hasSameDate","hasSame","onAddEntry","accountColumnConfig","marginLeft","color","startAdornment","api","sizeColumnsToFit","findNearestOnOrBefore","findNearestIdxOnOrBefore","selector","getGraphDates","accounts","Set","flatMap","calcLoanBalance","rate","monthlyPayment","annualizedRate","periods","months","totalRate","balance","calcEquity","houseValue","loanBalance","AddEntry","Stack","mortgageColumnConfig","toFixed","equity","convertPct","min","datetime","offset","handleClose","textField","parsed","issues","path","MortgageTab","allAccounts","mortgageData","values","Box","AccountTabs","firstAccount","keys","setAccount","useEffect","_","useEarliestAccountEntry","fromMillis","reduce","acc","curr","Math","Infinity","getMortgageValue","mortgage","entry","getAccountValue","getGraphValue","useGraphData","dates","graphData","toJSDate","total","forEach","arr","firstNonZero","slice","WealthChart","initialFromDate","intialToDate","endOf","fromDate","setFromDate","toDate","setToDate","filteredData","filter","getFullYear","series","stacked","xKey","yKey","yName","renderer","datum","content","toISODate","options","theme","text","axes","position","label","nice","tick","interval","time","every","snapTo","backgroundColor","NetWealth","border","borderRadius","boxShadow","Card","minHeight","paddingBottom","paddingLeft","paddingTop","CashRange","max","showRange","minFormatted","maxFormatted","formatPercent","getColor","probability","Percent","PercentRange","Value","secondaryValue","tertiaryValue","className","flexDirection","alignItems","gap","flexShrink","ClusterValue","ClusterValues","clusters","eventDate","diffNow","toHuman","dur","smallestUnit","units","smallestIdx","indexOf","shiftTo","normalize","toObject","Duration","replaceAll","CountDown","dateTime","variant","dateFormat","countDownStr","tooltipStr","countDownColor","scenarioStore","Store","loading","maxYear","minYear","scenarios","makeMatrix","columns","rows","matrix","column","j","numericSort","toSorted","uniqueCountSorted","uniqueValueCount","lastSeenValue","ssq","sums","sumsOfSquares","sji","muji","fillMatrixColumn","iMin","iMax","cluster","backtrackMatrix","floor","jlow","jhigh","sjlowi","ssqjlow","ssqj","fillMatrices","nValues","shift","shiftedValue","ckmeans","nClusters","sorted","clusterRight","clusterLeft","scaleCluster","factor","median","scaleClusters","findMostMostLikely","clusterTitle","index","getClusterCount","uniqeValues","size","totalWeight","sumSimple","weight","clusterCount","result","useClusters","totalPay","pay","meritIncrease","taxablePay","at","equityIncreasePct","useTotalPayClusters","allScenarios","findSameYear","useRealDate","useDates","meritBonusDate","companyBonusDate","useDateRanges","base","start","end","PaymentTypes","regular","bonus","nonTaxableBonus","updateProjectedIncomeDate","dateVariant","tooltipValueGetter","valueFormatted","UpdateIcon","DataEntry","defaultDate","flex","Layout","marginBottom","IncomeChart","history","future","toLocaleLowerCase","stroke","marker","formatter","params","lowProbability","fill","medProbability","highProbability","maxSpacing","IncomePerPeriodTooltip","incomePerPeriod","perPayday","count","ArrowForwardIcon","useHasMeritPairs","_ref","name","styles","ProjectedIncome","selectedYear","setSelectedYear","hasMissingPairs","dateRanges","basePay","aprToApr","paychecks","payments","payedOn","reduceRight","unshift","flexWrap","set","sx","maxWidth","useFutureMortgageEquity","startDate","useFutureRetirementContributions","retirementContribution","remaining","remainingRegularPayments","perPaycheck","useFutureSavings","config","perMonth","useFutureSocialSecurity","useThresholdTax","useFutureMedicareTax","taxes","threshold","taxRate","cumulative","firstOccurrence","currentPaymentIdx","isFuture","milliseconds","thresholdTaxRemaining","scenario","useFutureTotals","excludeHomeEquity","bonusTakehomeFactor","savings","homeEquity","retirement","rawClusters","totals","futureBonuses","y","numValues","flat","FutureEvents","onChange","medicare","socialSecurity","plus","ThresholdTaxCard","thresholdTax","equals","ClusterCard","useFuturesWealth","totalsPlusOne","useTimeSeriesWealth","localDateTime","earliest","futuresWealth","Array","some","futureBenchmarkIdx","accountWealth","futureWealth","graphDate","benchmarkWealth","yoyCash","yoyPct","dataYear","titleYear","offsetIdx","columnConfig","systemYear","TodayIcon","QueryStatsIcon","WealthTable","e","ProjectedWealth","localTime","setYear","setProjectedWealth","configName","ConfigEntry","isPercent","onchange","useCallback","input","isNan","Number","isNaN","Config","ScenarioExplorer","scenarioIndex","setScenarioIndex","scenarioData","top","bottom","right","left","overflow","toReversed","companyBonusFactor","lastThreeMeritBonusFactor","lastThreeMeritBonuses","retirementBonusPct","InvalidDataDialog","message","downloadJson","filename","storeData","link","document","createElement","download","blob","Blob","href","window","URL","createObjectURL","click","useExport","onExport","selectFile","contentType","Promise","multiple","accept","files","from","useImport","resolve","reject","then","reader","FileReader","readAsDataURL","file","onload","readerEvent","atob","split","useStoreDataError","hadError","jsonInvalidData","validated","parseError","resetError","removeItem","System","onImport","catch","DeleteForever","ConfigModal","tab","setTab","CloseIcon","App","getScenarioSize","getMeritSequence","getMeritPairs","meritBonusPctPair","meritPairs","mostRecentPay","yearsToGenerate","meritSequence","merit","groups","currentYear","workers","Worker","onmessage","isLoading","loadAllScenarios","first","oldestYear","postMessage","workerIdx","priorProjectedIncome","darkTheme","createTheme","palette","mode","ReactDOM","createRoot","getElementById","render","stackTrace","AdapterLuxon"],"mappings":"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"}