{"version":3,"file":"index-DqDRyOjO.js","sources":["../../src/shared/utility/sort-by-date.ts","../../src/shared/models/account-data.ts","../../src/shared/models/account.ts","../../src/shared/models/loan.ts","../../src/shared/models/mortgage.ts","../../src/shared/models/net-wealth.ts","../../src/shared/models/projected-income.ts","../../src/shared/models/projected-wealth.ts","../../src/shared/models/store.ts","../../src/shared/store/store.ts","../../src/shared/store/add-account-entry.ts","../../src/shared/store/add-projected-income.ts","../../src/shared/store/remove-account.ts","../../src/shared/store/remove-account-entry.ts","../../src/shared/store/remove-projected-income.ts","../../src/shared/store/reset-store.ts","../../src/shared/store/set-loan.ts","../../src/shared/store/update-account-date.ts","../../src/shared/store/update-account-name.ts","../../src/shared/store/update-account-value.ts","../../src/shared/store/update-projected-income.ts","../../src/capabilities/net-wealth/components/new-account/new-account.tsx","../../src/shared/components/ag-grid/ag-grid.tsx","../../src/shared/utility/current-date.ts","../../src/shared/utility/format-date.ts","../../src/capabilities/net-wealth/components/tab-types/components/delete-account.tsx","../../src/capabilities/net-wealth/components/tab-types/components/update-account.tsx","../../src/shared/utility/format-cash.ts","../../src/shared/components/formatters/cash.tsx","../../src/capabilities/net-wealth/components/tab-types/account/column-config.tsx","../../src/capabilities/net-wealth/components/tab-types/account/hooks/useMissingYears.ts","../../src/capabilities/net-wealth/components/tab-types/account/account.tsx","../../src/shared/utility/find-nearest-on-or-before.ts","../../src/shared/utility/get-graph-dates.ts","../../src/shared/utility/mortgage-calc.ts","../../src/capabilities/net-wealth/components/tab-types/mortgage/add-entry.tsx","../../src/shared/utility/group-by.ts","../../src/capabilities/net-wealth/components/tab-types/mortgage/add-loan.tsx","../../src/capabilities/net-wealth/components/tab-types/mortgage/column-config.tsx","../../src/capabilities/net-wealth/components/tab-types/mortgage/mortgage.tsx","../../src/capabilities/net-wealth/components/account-tabs/account-tabs.tsx","../../src/shared/utility/get-graph-value.ts","../../src/capabilities/net-wealth/components/wealth-chart/use-graph-data.ts","../../src/capabilities/net-wealth/components/wealth-chart/wealth-chart.tsx","../../src/capabilities/net-wealth/net-wealth.tsx","../../src/shared/components/formatters/duration.tsx","../../src/shared/hooks/use-dates.ts","../../src/shared/utility/format-percent.ts","../../src/shared/components/formatters/percent.tsx","../../src/shared/store/update-projected-income-date.ts","../../src/capabilities/projected-income/components/data-entry/column-config.tsx","../../src/capabilities/projected-income/components/data-entry/data-entry.tsx","../../src/shared/components/formatters/cash-range.tsx","../../src/shared/components/formatters/percent-range.tsx","../../src/capabilities/projected-income/components/value.tsx","../../src/capabilities/projected-income/components/outcome.tsx","../../src/shared/utility/find-same-year.ts","../../src/shared/hooks/use-most-frequent-value.ts","../../src/shared/hooks/use-projected-pay.ts","../../src/shared/utility/a-payday.ts","../../src/shared/utility/date-ranges-overlap.ts","../../src/shared/utility/get-pay-periods.ts","../../src/shared/utility/get-payments.ts","../../src/capabilities/projected-income/hooks/use-merit-pairs.ts","../../src/capabilities/projected-income/hooks/use-merit-sequence.ts","../../src/shared/utility/income-by-range.ts","../../src/capabilities/projected-income/hooks/use-scenarios.ts","../../src/capabilities/projected-income/hooks/use-gradient.ts","../../src/capabilities/projected-income/components/income-per-period.tsx","../../src/capabilities/projected-income/projected-income.tsx","../../src/shared/store/set-projected-wealth.ts","../../src/capabilities/projected-wealth/components/config/config-entry.tsx","../../src/capabilities/projected-wealth/components/config/config.tsx","../../src/shared/utility/min-max-avg.ts","../../src/shared/hooks/use-base-income.ts","../../src/shared/hooks/use-company-bonus.ts","../../src/shared/hooks/use-merit-bonus.ts","../../src/shared/hooks/use-retirement-bonus.ts","../../src/capabilities/projected-wealth/hooks/use-future-bonuses.ts","../../src/capabilities/projected-wealth/hooks/use-payments.ts","../../src/capabilities/projected-wealth/hooks/use-future-medicare-tax.ts","../../src/capabilities/projected-wealth/hooks/use-future-retirement-contributions.ts","../../src/capabilities/projected-wealth/hooks/use-future-savings.ts","../../src/capabilities/projected-wealth/hooks/use-future-social-security.ts","../../src/shared/components/formatters/before-after.tsx","../../src/capabilities/projected-wealth/components/future-events/future-events.tsx","../../src/capabilities/projected-wealth/hooks/use-earliest-account-entry.ts","../../src/capabilities/projected-wealth/hooks/use-times-series-wealth.ts","../../src/capabilities/projected-wealth/components/wealth-chart.tsx","../../src/capabilities/projected-wealth/components/wealth-table/colum-config.tsx","../../src/capabilities/projected-wealth/components/wealth-table/wealth-table.tsx","../../src/capabilities/projected-wealth/projected-wealth.tsx","../../src/shared/components/safety-button/count-down.tsx","../../src/shared/components/safety-button/safety-button.tsx","../../src/shared/hooks/use-export.tsx","../../src/shared/hooks/use-import.tsx","../../src/shared/hooks/use-store-data-error.ts","../../src/app/invalid-data-dialog.tsx","../../src/app/app.tsx","../../src/main.tsx"],"sourcesContent":["import { DateTime } from \"luxon\";\r\n\r\nexport const sortByDate =\r\n  <T>(select: (data: T) => DateTime, direction: \"asc\" | \"desc\") =>\r\n  (a: T, b: T) =>\r\n    direction === \"asc\" ? select(a).toMillis() - select(b).toMillis() : select(b).toMillis() - select(a).toMillis();\r\n","import { z } from \"zod\";\r\n\r\nexport const accountDataValidator = z.object({\r\n  date: z.string(),\r\n  value: z.number(),\r\n  id: z.string(),\r\n});\r\n\r\nexport type AccountData = z.infer<typeof accountDataValidator>;\r\n","import { z } from \"zod\";\r\nimport { accountDataValidator } from \"./account-data\";\r\n\r\nexport const accountValidator = z.object({\r\n  type: z.literal(\"account\"),\r\n  data: z.array(accountDataValidator),\r\n});\r\n\r\nexport type Account = z.infer<typeof accountValidator>;\r\n","import { z } from \"zod\";\r\n\r\nexport const loanValidator = z.object({\r\n  principal: z.number(),\r\n  ratePct: z.number(),\r\n  paymentsPerYear: z.number(),\r\n  payment: z.number(),\r\n  firstPaymentDate: z.string(),\r\n  ownershipPct: z.number(),\r\n});\r\n\r\nexport type Loan = z.infer<typeof loanValidator>;\r\n","import { z } from \"zod\";\r\nimport { accountDataValidator } from \"./account-data\";\r\nimport { loanValidator } from \"./loan\";\r\n\r\nexport const mortgageValidator = z.object({\r\n  type: z.literal(\"mortgage\"),\r\n  loan: loanValidator.optional(),\r\n  data: z.array(accountDataValidator),\r\n});\r\n\r\nexport type Mortgage = z.infer<typeof mortgageValidator>;\r\n","import { z } from \"zod\";\r\nimport { accountValidator } from \"./account\";\r\nimport { mortgageValidator } from \"./mortgage\";\r\n\r\nexport const wealth = z.record(z.union([accountValidator, mortgageValidator]));\r\n\r\nexport type Wealth = z.infer<typeof wealth>;\r\n","import { z } from \"zod\";\r\nimport { accountDataValidator } from \"./account-data\";\r\n\r\nexport const projectedIncome = z.object({\r\n  timeSeries: z.object({\r\n    paycheck: z.array(accountDataValidator),\r\n    meritIncreasePct: z.array(accountDataValidator),\r\n    equityPct: z.array(accountDataValidator),\r\n    meritBonusPct: z.array(accountDataValidator),\r\n    meritBonus: z.array(accountDataValidator),\r\n    companyBonusPct: z.array(accountDataValidator),\r\n    companyBonus: z.array(accountDataValidator),\r\n    retirementBonus: z.array(accountDataValidator),\r\n  }),\r\n});\r\n\r\nexport type ProjectedIncome = z.infer<typeof projectedIncome>;\r\nexport type TimeSeries = keyof ProjectedIncome[\"timeSeries\"];\r\n","import { z } from \"zod\";\r\n\r\nexport const projectedWealth = z.object({\r\n  socialSecurityLimit: z.number(),\r\n  socialSecurityTaxRate: z.number(),\r\n  medicareSupplementalTaxThreshold: z.number(),\r\n  medicareSupplementalTaxRate: z.number(),\r\n  savingsPerMonth: z.number(),\r\n  retirementContributionPaycheck: z.number(),\r\n});\r\n\r\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\r\nexport type ProjectedWealthConfig = keyof ProjectedWealth;\r\n","import { z } from \"zod\";\r\nimport { wealth } from \"./net-wealth\";\r\nimport { projectedIncome } from \"./projected-income\";\r\nimport { projectedWealth } from \"./projected-wealth\";\r\n\r\nexport const getDefaultStore = (): Store => ({\r\n  projectedIncome: {\r\n    timeSeries: {\r\n      paycheck: [],\r\n      meritBonusPct: [],\r\n      companyBonusPct: [\r\n        {\r\n          date: \"2020-06-15T00:00:00.000-07:00\",\r\n          value: 0.182,\r\n          id: \"a52883a7-008b-4b5d-83f7-48bb72a90f27\",\r\n        },\r\n        {\r\n          date: \"2021-06-15T00:00:00.000-07:00\",\r\n          value: 0.254,\r\n          id: \"ec5a9913-d2ea-45cf-bbe4-4a28bc3a02eb\",\r\n        },\r\n        {\r\n          date: \"2022-06-15T00:00:00.000-07:00\",\r\n          value: 0.272,\r\n          id: \"45f44fc7-544a-4652-87fa-49d70eaa412d\",\r\n        },\r\n        {\r\n          date: \"2023-06-15T00:00:00.000-07:00\",\r\n          value: 0.168,\r\n          id: \"97af5146-6a4d-466d-8b9e-96552fc70639\",\r\n        },\r\n      ],\r\n      meritBonus: [],\r\n      companyBonus: [],\r\n      retirementBonus: [],\r\n      equityPct: [],\r\n      meritIncreasePct: [],\r\n    },\r\n  },\r\n  wealth: {},\r\n  projectedWealth: {\r\n    medicareSupplementalTaxThreshold: 200_000,\r\n    socialSecurityLimit: 168_600,\r\n    socialSecurityTaxRate: 0.062,\r\n    medicareSupplementalTaxRate: 0.009,\r\n    savingsPerMonth: 0,\r\n    retirementContributionPaycheck: 0,\r\n  },\r\n});\r\n\r\nexport const storeValidator = z.object({\r\n  wealth: wealth,\r\n  projectedIncome: projectedIncome,\r\n  projectedWealth: projectedWealth,\r\n});\r\n\r\nexport type Store = z.infer<typeof storeValidator>;\r\n","import { Store as CreateStore } from \"@tanstack/store\";\r\nimport { ZodSchema } from \"zod\";\r\nimport { Store, getDefaultStore, storeValidator } from \"../models/store\";\r\n\r\nconst createStore = <T extends object>(validator: ZodSchema, defaultValue: T) => {\r\n  const key = \"store\";\r\n  const invalidData = \"store-invalid\";\r\n  const localData = localStorage.getItem(key);\r\n  const data = localData ? JSON.parse(localData) : defaultValue;\r\n  const parse = validator.safeParse(data);\r\n\r\n  //todo create migration process\r\n  if (!parse.success) {\r\n    console.log(\"zod error\", parse.error);\r\n    console.log(\"original\", data);\r\n    localStorage.setItem(invalidData, JSON.stringify(data));\r\n    localStorage.setItem(key, JSON.stringify(defaultValue));\r\n  }\r\n\r\n  const store = new CreateStore<T>(data);\r\n  store.subscribe(() => {\r\n    const current = localStorage.getItem(key);\r\n    current && localStorage.setItem(`${key}-previous`, current);\r\n    localStorage.setItem(key, JSON.stringify(store.state));\r\n  });\r\n\r\n  return store;\r\n};\r\n\r\nexport const store = createStore<Store>(storeValidator, getDefaultStore());\r\n","import { DateTime } from \"luxon\";\r\nimport { create } from \"mutative\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { Account } from \"../models/account\";\r\nimport { sortByDate } from \"../utility/sort-by-date\";\r\nimport { store } from \"./store\";\r\n\r\nexport const AddAccountEntry = (accountName: string, date: DateTime<true>, amount: number) => {\r\n  store.setState((prev) => {\r\n    return create(prev, (next) => {\r\n      (next.wealth[accountName] as Account).data.push({\r\n        date: date.startOf(\"day\").toString(),\r\n        value: amount,\r\n        id: uuid(),\r\n      });\r\n      next.wealth[accountName].data.sort(sortByDate((x) => DateTime.fromISO(x.date), \"asc\"));\r\n    });\r\n  });\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { create } from \"mutative\";\r\nimport { TimeSeries } from \"shared/models/projected-income\";\r\nimport { sortByDate } from \"shared/utility/sort-by-date\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { store } from \"./store\";\r\n\r\nexport const addProjectedIncome = (date: DateTime, timeSeries: TimeSeries, value: number) => {\r\n  store.setState((prev) => {\r\n    return create(prev, (next) => {\r\n      next.projectedIncome.timeSeries[timeSeries] = next.projectedIncome.timeSeries[timeSeries]\r\n        .concat({\r\n          date: date.startOf(\"day\").toString(),\r\n          value,\r\n          id: uuid(),\r\n        })\r\n        .sort(sortByDate((x) => DateTime.fromISO(x.date), \"asc\"));\r\n    });\r\n  });\r\n};\r\n","import { create } from \"mutative\";\r\nimport { store } from \"./store\";\r\n\r\nexport const removeAccount = (accountName: string) =>\r\n  store.setState((prev) => {\r\n    return create(prev, (next) => {\r\n      delete next.wealth[accountName];\r\n    });\r\n  });\r\n","import { create } from \"mutative\";\r\nimport { store } from \"./store\";\r\n\r\nexport const removeAccountEntry = (accountName: string, id: string) =>\r\n  store.setState((prev) => {\r\n    return create(prev, (next) => {\r\n      const idxToRemove = next.wealth[accountName].data.findIndex((x) => x.id === id);\r\n      next.wealth[accountName].data.splice(idxToRemove, 1);\r\n      return next;\r\n    });\r\n  });\r\n","import { create } from \"mutative\";\r\nimport { TimeSeries } from \"shared/models/projected-income\";\r\nimport { store } from \".\";\r\n\r\nexport const removeProjectedIncome = (accountName: TimeSeries, id: string) => {\r\n  store.setState((prev) => {\r\n    return create(prev, (next) => {\r\n      const idxToRemove = next.projectedIncome.timeSeries[accountName].findIndex((x) => x.id === id);\r\n      next.projectedIncome.timeSeries[accountName].splice(idxToRemove, 1);\r\n    });\r\n  });\r\n};\r\n","import { getDefaultStore } from \"shared/models/store\";\r\nimport { store } from \"./store\";\r\n\r\nexport const resetStore = () => store.setState(() => getDefaultStore());\r\n","import { create } from \"mutative\";\r\nimport { Loan } from \"shared/models/loan\";\r\nimport { Mortgage } from \"shared/models/mortgage\";\r\nimport { store } from \"./store\";\r\n\r\nexport const setLoan = (accountName: string, loan: Loan) =>\r\n  store.setState((prev) => {\r\n    return create(prev, (next) => {\r\n      if (next.wealth[accountName].type === \"mortgage\") {\r\n        (next.wealth[accountName] as Mortgage).loan = loan;\r\n      }\r\n    });\r\n  });\r\n","import { DateTime } from \"luxon\";\r\nimport { create } from \"mutative\";\r\nimport { store } from \".\";\r\n\r\nexport const updateAccountDate = (accountName: string, id: string, date: DateTime) => {\r\n  store.setState((prev) => {\r\n    const next = create(prev, (next) => {\r\n      const account = next.wealth[accountName];\r\n      const idx = account?.data.findIndex((x) => x.id === id);\r\n      if (idx >= 0) {\r\n        account.data[idx].date = date.toISO()!;\r\n      }\r\n    });\r\n    return next;\r\n  });\r\n};\r\n","import { create } from \"mutative\";\r\nimport { store } from \"./store\";\r\n\r\nexport const updateAccountName = (currentAccountName: string, newAccountName: string) =>\r\n  store.setState((prev) => {\r\n    return create(prev, (next) => {\r\n      next.wealth[newAccountName] = next.wealth[currentAccountName];\r\n      delete next.wealth[currentAccountName];\r\n    });\r\n  });\r\n","import { create } from \"mutative\";\r\nimport { store } from \".\";\r\n\r\nexport const updateAccountValue = (accountName: string, id: string, value: number) => {\r\n  store.setState((prev) => {\r\n    const next = create(prev, (next) => {\r\n      const account = next.wealth[accountName];\r\n      const idx = account?.data.findIndex((x) => x.id === id);\r\n      if (idx >= 0) {\r\n        account.data[idx].value = value;\r\n      }\r\n    });\r\n    return next;\r\n  });\r\n};\r\n","import { create } from \"mutative\";\r\nimport { TimeSeries } from \"shared/models/projected-income\";\r\nimport { store } from \".\";\r\n\r\nexport const updateProjectedIncome = (timeSeries: TimeSeries, id: string, value: number) => {\r\n  store.setState((prev) => {\r\n    const next = create(prev, (next) => {\r\n      const account = next.projectedIncome.timeSeries[timeSeries];\r\n      const idx = account.findIndex((x) => x.id === id);\r\n      account[idx].value = value;\r\n    });\r\n    return next;\r\n  });\r\n};\r\n","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, MenuItem, Stack, TextField } from \"@mui/material\";\r\nimport { create } from \"mutative\";\r\nimport { ReactNode, forwardRef, useRef, useState } from \"react\";\r\nimport { AssetType } from \"shared/models/asset-types\";\r\nimport { store } from \"shared/store\";\r\n\r\nexport const NewAccount = forwardRef<HTMLButtonElement, { children?: ReactNode }>((props, ref) => {\r\n  const [open, setOpen] = useState(false);\r\n  const nameRef = useRef<HTMLInputElement>(null);\r\n  const [error, setError] = useState(false);\r\n  const [accountType, setAccountType] = useState<AssetType>();\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        ref={ref}\r\n        variant=\"outlined\"\r\n        onClick={() => {\r\n          setOpen(true);\r\n          setError(false);\r\n          setAccountType(undefined);\r\n        }}\r\n        sx={{ marginLeft: \"auto\" }}\r\n      >\r\n        add account\r\n      </Button>\r\n\r\n      <Dialog open={open} onClose={() => setOpen(false)}>\r\n        <DialogTitle>Add New Account</DialogTitle>\r\n        <DialogContent>\r\n          <Stack spacing={2} margin={2}>\r\n            <TextField\r\n              select\r\n              color={error ? \"error\" : \"primary\"}\r\n              onChange={(value) => {\r\n                setError(false);\r\n                setAccountType(value.target.value as AssetType);\r\n              }}\r\n              label=\"Type\"\r\n            >\r\n              <MenuItem value=\"mortgage\">Mortgage</MenuItem>\r\n              <MenuItem value=\"account\">Generic Account</MenuItem>\r\n            </TextField>\r\n\r\n            <TextField\r\n              placeholder=\"Name\"\r\n              onChange={() => {\r\n                setError(false);\r\n              }}\r\n              error={error}\r\n              inputRef={nameRef}\r\n            />\r\n          </Stack>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            disabled={error}\r\n            onClick={() => {\r\n              store.setState((prev) => {\r\n                return create(prev, (next) => {\r\n                  if (!nameRef.current?.value || !accountType || prev.wealth[nameRef.current.value]) {\r\n                    setError(true);\r\n                    return;\r\n                  }\r\n\r\n                  next.wealth[nameRef.current.value] = {\r\n                    type: accountType,\r\n                    data: [],\r\n                  };\r\n\r\n                  setOpen(false);\r\n                });\r\n              });\r\n            }}\r\n          >\r\n            Add\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      {props?.children}\r\n    </>\r\n  );\r\n});\r\n","import { AgGridReact, AgGridReactProps } from \"ag-grid-react\";\r\n\r\nexport const AgGrid = (props: AgGridReactProps & { id: string }) => {\r\n  const { id, ...rest } = props;\r\n  return (\r\n    <div id={id} className=\"ag-theme-quartz-dark\" style={{ height: \"100%\" }}>\r\n      <AgGridReact {...rest} suppressMovableColumns />\r\n    </div>\r\n  );\r\n};\r\n","import { DateTime } from \"luxon\";\r\n\r\nexport const getLocalDateTime = () => DateTime.local();\r\n","export const shortDate = \"yyyy-MM-dd\";\r\n\r\nexport const monthDay = \"MMM dd\";\r\n","import { Button, Paper } from \"@mui/material\";\r\nimport { removeAccount } from \"shared/store\";\r\n\r\nexport const DeleteAccount = (props: { accountName: string }) => {\r\n  const { accountName } = props;\r\n\r\n  return (\r\n    <Paper elevation={3} sx={{ padding: 2, width: \"100%\" }}>\r\n      <Button\r\n        onClick={() => {\r\n          removeAccount(accountName);\r\n        }}\r\n        color=\"error\"\r\n      >\r\n        Delete Account\r\n      </Button>\r\n    </Paper>\r\n  );\r\n};\r\n","import { Button, Paper, Stack, TextField } from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport { updateAccountName } from \"shared/store/update-account-name\";\r\n\r\nexport const RenameAccount = (props: { accountName: string }) => {\r\n  const { accountName } = props;\r\n  const [nextAccountName, setNextAccountName] = useState<string>(accountName);\r\n\r\n  return (\r\n    <Paper elevation={3} sx={{ padding: 2 }}>\r\n      <Stack spacing={1}>\r\n        <TextField\r\n          label=\"Account Name\"\r\n          value={nextAccountName}\r\n          onChange={(event) => setNextAccountName(event.target.value)}\r\n          placeholder=\"\"\r\n        />\r\n        <Button\r\n          disabled={!nextAccountName}\r\n          onClick={() => {\r\n            updateAccountName(accountName, nextAccountName);\r\n          }}\r\n        >\r\n          Update Name\r\n        </Button>\r\n      </Stack>\r\n    </Paper>\r\n  );\r\n};\r\n","export const formatCashShort = new Intl.NumberFormat(\"en-US\", {\r\n  style: \"currency\",\r\n  currency: \"USD\",\r\n  notation: \"compact\",\r\n  maximumFractionDigits: 0,\r\n}).format;\r\n\r\nexport const formatCash = new Intl.NumberFormat(\"en-US\", {\r\n  style: \"currency\",\r\n  currency: \"USD\",\r\n  maximumFractionDigits: 0,\r\n}).format;\r\n","import { Tooltip } from \"@mui/material\";\r\nimport { useMemo } from \"react\";\r\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\r\n\r\ninterface CashProps {\r\n  value?: number;\r\n  fallback?: number;\r\n  disableTooltip?: boolean;\r\n  compact?: boolean;\r\n  tooltip?: string;\r\n  placement?:\r\n    | \"top\"\r\n    | \"right\"\r\n    | \"bottom\"\r\n    | \"left\"\r\n    | \"bottom-end\"\r\n    | \"bottom-start\"\r\n    | \"left-end\"\r\n    | \"left-start\"\r\n    | \"right-end\"\r\n    | \"right-start\"\r\n    | \"top-end\"\r\n    | \"top-start\"\r\n    | undefined;\r\n}\r\nexport const Cash = ({ value, fallback, disableTooltip, compact = true, tooltip, placement }: CashProps) => {\r\n  const formatted = useMemo(() => {\r\n    if (value === undefined) {\r\n      return fallback;\r\n    }\r\n    return compact ? formatCashShort(value) : formatCash(value);\r\n  }, [compact, fallback, value]);\r\n\r\n  return (\r\n    <Tooltip\r\n      placement={placement}\r\n      disableHoverListener={disableTooltip || !compact || !value}\r\n      title={[tooltip, formatCash(value!)].join(\" \")}\r\n    >\r\n      <span>{formatted}</span>\r\n    </Tooltip>\r\n  );\r\n};\r\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\r\nimport { Button } from \"@mui/material\";\r\nimport { ColDef } from \"ag-grid-community\";\r\nimport { CustomCellRendererProps } from \"ag-grid-react\";\r\nimport { DateTime } from \"luxon\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { AccountData } from \"shared/models/account-data\";\r\nimport { updateAccountDate, updateAccountValue } from \"shared/store\";\r\nimport { removeAccountEntry } from \"shared/store/remove-account-entry\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\n\r\nexport const createAccountColumnConfig = (accountName: string): ColDef<AccountData>[] => [\r\n  {\r\n    headerName: \"Date\",\r\n    sort: \"desc\",\r\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\r\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\r\n    cellEditor: \"agDateCellEditor\",\r\n    editable: true,\r\n    valueSetter: (x) => {\r\n      const date = DateTime.fromJSDate(x.newValue);\r\n      if (date.isValid) {\r\n        updateAccountDate(accountName, x.data.id, date);\r\n      }\r\n      return date.isValid;\r\n    },\r\n  },\r\n  {\r\n    headerName: \"Value\",\r\n    valueGetter: (x) => x.data?.value,\r\n    valueSetter: (x) => {\r\n      updateAccountValue(accountName, x.data.id, +x.newValue);\r\n      return true;\r\n    },\r\n    cellRenderer: (x: CustomCellRendererProps<AccountData>) => <Cash value={x.value} placement=\"left\" />,\r\n    editable: true,\r\n    cellEditor: \"agNumberCellEditor\",\r\n    type: \"numericColumn\",\r\n  },\r\n  {\r\n    cellStyle: () => ({ display: \"inline-flex\", padding: \"0px\" }),\r\n    sortable: false,\r\n    headerName: \"\",\r\n    width: 80,\r\n    colId: \"actions\",\r\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\r\n      return (\r\n        <Button\r\n          onClick={() => {\r\n            props.data && removeAccountEntry(accountName, props.data.id);\r\n          }}\r\n          color=\"error\"\r\n          fullWidth\r\n        >\r\n          <DeleteForeverIcon />\r\n        </Button>\r\n      );\r\n    },\r\n  },\r\n];\r\n","import { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { Account } from \"shared/models/account\";\r\n\r\nexport const useMissingYears = (account: Account) => {\r\n  return useMemo(() => {\r\n    const years = Object.entries(Object.groupBy(account.data, (x) => DateTime.fromISO(x.date).year))\r\n      .map(\r\n        ([year, entries]) =>\r\n          [\r\n            +year,\r\n            !!entries?.find((x) => {\r\n              const date = DateTime.fromISO(x.date);\r\n              const janFirst = DateTime.fromObject({\r\n                day: 1,\r\n                month: 1,\r\n                year: +year,\r\n              });\r\n              return date.diff(janFirst, [\"days\", \"hours\"]).days == 0;\r\n            }),\r\n          ] as [number, boolean],\r\n      )\r\n      .sort(([a], [b]) => {\r\n        return a - b;\r\n      });\r\n\r\n    const lookup = Object.fromEntries(years);\r\n    const missing = [];\r\n    for (let i = years[0]?.[0] ?? 0; i <= years[years.length - 1]?.[0]; i++) {\r\n      if (!lookup[i]) {\r\n        missing.push(i);\r\n      }\r\n    }\r\n    return missing;\r\n  }, [account.data]);\r\n};\r\n","import { Alert, Button, InputAdornment, Paper, Stack, TextField } from \"@mui/material\";\r\nimport Grid from \"@mui/system/Unstable_Grid\";\r\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo, useRef, useState } from \"react\";\r\nimport { AgGrid } from \"shared/components/ag-grid\";\r\nimport { Account } from \"shared/models/account\";\r\nimport { AddAccountEntry, store } from \"shared/store\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\nimport { DeleteAccount } from \"../components/delete-account\";\r\nimport { RenameAccount } from \"../components/update-account\";\r\nimport { createAccountColumnConfig } from \"./column-config\";\r\nimport { useMissingYears } from \"./hooks/useMissingYears\";\r\n\r\nexport const AccountTab = (props: { accountName: string }) => {\r\n  const { accountName } = props;\r\n  const account = useStore(store, (state) => state.wealth[accountName]) as Account;\r\n  const [date, setDate] = useState(getLocalDateTime());\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const missingYears = useMissingYears(account);\r\n  const hasSameDate = useMemo(() => {\r\n    return !!account?.data?.find((x) => date.hasSame(DateTime.fromISO(x.date), \"day\"));\r\n  }, [account?.data, date]);\r\n\r\n  const onAddEntry = () => {\r\n    inputRef.current && AddAccountEntry(accountName, date, +inputRef.current?.value);\r\n  };\r\n\r\n  const accountColumnConfig = useMemo(() => {\r\n    return createAccountColumnConfig(accountName);\r\n  }, [accountName]);\r\n\r\n  return (\r\n    <Grid container height=\"100%\" width={\"100%\"} padding={1} spacing={2}>\r\n      <Grid lg={3} xl={3}>\r\n        <AgGrid\r\n          key={accountName}\r\n          reactiveCustomComponents\r\n          rowData={account?.data ?? []}\r\n          columnDefs={accountColumnConfig}\r\n          id={account + \"-history\"}\r\n          autoSizeStrategy={{ type: \"fitGridWidth\" }}\r\n          stopEditingWhenCellsLoseFocus\r\n        />\r\n      </Grid>\r\n      <Grid xl={9} lg={8}>\r\n        <div>\r\n          <Grid container spacing={2}>\r\n            {missingYears.length > 0 && (\r\n              <Grid xs={12}>\r\n                <Paper elevation={3}>\r\n                  <Alert severity=\"warning\">Ensure an entry for Jan 1st for each year {missingYears.join(\", \")}</Alert>\r\n                </Paper>\r\n              </Grid>\r\n            )}\r\n            <Grid xl={2} lg={3}>\r\n              <Paper elevation={3} sx={{ padding: 2 }}>\r\n                <Stack spacing={1}>\r\n                  <DatePicker\r\n                    format={shortDate}\r\n                    sx={{ color: \"white\" }}\r\n                    label=\"Date\"\r\n                    defaultValue={date}\r\n                    onChange={(value) => value && setDate(value)}\r\n                  />\r\n                  <TextField\r\n                    label=\"amount\"\r\n                    type=\"number\"\r\n                    defaultValue={0}\r\n                    inputRef={inputRef}\r\n                    InputProps={{\r\n                      startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\r\n                    }}\r\n                    placeholder=\"0\"\r\n                  />\r\n                  <Button disabled={!date || hasSameDate} onClick={onAddEntry}>\r\n                    Add Entry\r\n                  </Button>\r\n                </Stack>\r\n              </Paper>\r\n            </Grid>\r\n            <Grid xl={8} lg={0}></Grid>\r\n            <Grid xl={2} lg={4}>\r\n              <Stack spacing={2}>\r\n                <DeleteAccount accountName={accountName} />\r\n                <RenameAccount key={accountName} accountName={accountName} />\r\n              </Stack>\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { AccountData } from \"shared/models/account-data\";\r\n\r\nexport const findNearestOnOrBefore = (date: DateTime, data: AccountData[]) => {\r\n  return data.find((x, idx, array) => {\r\n    if (idx == 0 && DateTime.fromISO(x.date).startOf(\"day\") >= date) {\r\n      return true;\r\n    }\r\n\r\n    if (\r\n      idx < array.length - 1 &&\r\n      DateTime.fromISO(x.date).startOf(\"day\") <= date &&\r\n      DateTime.fromISO(data[idx + 1].date).startOf(\"day\") > date\r\n    ) {\r\n      return true;\r\n    }\r\n\r\n    if (idx === array.length - 1) {\r\n      return true;\r\n    }\r\n  });\r\n};\r\n\r\nexport const findNearestIdxOnOrBefore = <T>(date: DateTime, data: T[], selector: (data: T) => DateTime) => {\r\n  return data.findIndex((x, idx, array) => {\r\n    if (idx == 0 && selector(x) >= date) {\r\n      return true;\r\n    }\r\n\r\n    if (idx < array.length - 1 && selector(x) <= date && selector(data[idx + 1]) > date) {\r\n      return true;\r\n    }\r\n\r\n    if (idx === array.length - 1) {\r\n      return true;\r\n    }\r\n  });\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { Account } from \"shared/models/account\";\r\nimport { Mortgage } from \"shared/models/mortgage\";\r\n\r\nexport const getGraphDates = (accounts: (Account | Mortgage)[]) => {\r\n  return [\r\n    ...new Set(\r\n      accounts.flatMap((x) => {\r\n        return x.data.map((x) => DateTime.fromISO(x.date).startOf(\"day\").toISO());\r\n      }),\r\n    ),\r\n  ]\r\n    .map((x) => DateTime.fromISO(x!))\r\n    .sort((a, b) => a.toMillis() - b.toMillis()) as DateTime<true>[];\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { Loan } from \"shared/models/loan\";\r\n\r\nexport const calcLoanBalance = (date: DateTime, loan: Loan) => {\r\n  const { firstPaymentDate, paymentsPerYear, principal: principal, ratePct: rate, payment: monthlyPayment } = loan;\r\n  const annualizedRate = rate / paymentsPerYear;\r\n  const periods = date.diff(DateTime.fromISO(firstPaymentDate), \"months\").months;\r\n  const totalRate = (1 + annualizedRate) ** periods;\r\n  const balance = principal * totalRate - (monthlyPayment / annualizedRate) * (totalRate - 1);\r\n\r\n  return balance;\r\n};\r\n\r\nexport const calcEquity = (\r\n  ownershipPct: number,\r\n  houseValue: number | undefined,\r\n  loanBalance: number,\r\n  principal: number\r\n) => {\r\n  return houseValue ? houseValue * ownershipPct - loanBalance : principal - loanBalance;\r\n};\r\n","import { Button, Paper, TextField } from \"@mui/material\";\r\nimport { Stack } from \"@mui/system\";\r\nimport { DatePicker } from \"@mui/x-date-pickers\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useRef } from \"react\";\r\nimport { AddAccountEntry } from \"shared/store\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\n\r\nexport const AddEntry = (props: { accountName: string }) => {\r\n  const { accountName } = props;\r\n  const ref = useRef<{ date?: DateTime; value?: number }>({\r\n    date: getLocalDateTime(),\r\n    value: 0,\r\n  });\r\n  const onAddEntry = () => {\r\n    const { date, value } = ref.current;\r\n    if (!date || !value) {\r\n      return;\r\n    }\r\n    AddAccountEntry(accountName, date, value);\r\n  };\r\n  return (\r\n    <Paper elevation={3} sx={{ padding: 2 }}>\r\n      <Stack spacing={1}>\r\n        <DatePicker\r\n          defaultValue={getLocalDateTime()}\r\n          onChange={(date: DateTime | null) => {\r\n            if (date) {\r\n              ref.current.date = date;\r\n            }\r\n          }}\r\n        />\r\n        <TextField\r\n          label=\"Home value\"\r\n          type=\"numeric\"\r\n          onChange={(event) => {\r\n            ref.current.value = +event.target.value;\r\n          }}\r\n        />\r\n        <Button onClick={onAddEntry}>Add Home Value</Button>\r\n      </Stack>\r\n    </Paper>\r\n  );\r\n};\r\n","export function groupBy<T, T2 extends string | number | symbol>(array: T[], selector: (x: T) => T2): Record<T2, T[]> {\r\n  return array.reduce((acc: Record<T2, T[]>, curr: T) => {\r\n    const key = selector(curr);\r\n    acc[key] ??= [];\r\n    acc[key].push(curr);\r\n    return acc;\r\n  }, {} as Record<T2, T[]>);\r\n}\r\n\r\nexport function groupBySingle<T, T2 extends string | number | symbol>(\r\n  array: T[],\r\n  selector: (x: T) => T2\r\n): Record<T2, T> {\r\n  return array.reduce((acc: Record<T2, T>, curr: T) => {\r\n    const key = selector(curr);\r\n    acc[key] ??= curr;\r\n\r\n    return acc;\r\n  }, {} as Record<T2, T>);\r\n}\r\n","import { Button, Paper, Stack, TextField } from \"@mui/material\";\r\nimport { DatePicker } from \"@mui/x-date-pickers\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useRef, useState } from \"react\";\r\nimport { Loan } from \"shared/models/loan\";\r\nimport { store } from \"shared/store\";\r\nimport { setLoan } from \"shared/store/set-loan\";\r\nimport { groupBy } from \"shared/utility/group-by\";\r\nimport { ZodIssue, z } from \"zod\";\r\n\r\nconst convertPct = (value: number) => {\r\n  return value > 1 ? value / 100 : value;\r\n};\r\n\r\nconst validator: z.ZodType<Loan> = z.object({\r\n  principal: z.number().min(0),\r\n  ratePct: z.number().min(0),\r\n  paymentsPerYear: z.number().min(0),\r\n  payment: z.number().min(0),\r\n  firstPaymentDate: z.string().datetime({ offset: true }),\r\n  ownershipPct: z.number().min(0),\r\n});\r\n\r\nexport const AddLoan = (props: { accountName: string }) => {\r\n  const { accountName } = props;\r\n\r\n  const loan = useStore(store, (x) => {\r\n    const account = x.wealth[accountName];\r\n    if (\"loan\" in account) {\r\n      return account.loan;\r\n    }\r\n  });\r\n\r\n  const ref = useRef<Partial<Loan>>(loan ?? {});\r\n  const [error, setError] = useState<Partial<Record<keyof Loan, ZodIssue>>>({});\r\n\r\n  return (\r\n    <Paper elevation={3} sx={{ padding: 2 }}>\r\n      <Stack spacing={1}>\r\n        <DatePicker\r\n          defaultValue={ref.current?.firstPaymentDate ? DateTime.fromISO(ref.current.firstPaymentDate) : null}\r\n          label=\"First Payment\"\r\n          slotProps={{\r\n            textField: {\r\n              error: !!error.firstPaymentDate,\r\n            },\r\n          }}\r\n          onChange={(value: DateTime | null) => {\r\n            if (value) {\r\n              ref.current.firstPaymentDate = value.startOf(\"day\").toISO()!;\r\n            }\r\n          }}\r\n        />\r\n        <TextField\r\n          error={!!error.principal}\r\n          defaultValue={loan?.principal}\r\n          onChange={(event) => {\r\n            ref.current.principal = +event.target.value;\r\n          }}\r\n          variant=\"outlined\"\r\n          label=\"Principal\"\r\n          type=\"number\"\r\n        />\r\n        <TextField\r\n          error={!!error.ratePct}\r\n          defaultValue={loan?.ratePct}\r\n          onChange={(event) => {\r\n            ref.current.ratePct = convertPct(+event.target.value);\r\n          }}\r\n          variant=\"outlined\"\r\n          label=\"Rate\"\r\n          type=\"number\"\r\n        />\r\n        <TextField\r\n          error={!!error.paymentsPerYear}\r\n          defaultValue={loan?.paymentsPerYear}\r\n          onChange={(event) => {\r\n            ref.current.paymentsPerYear = +event.target.value;\r\n          }}\r\n          variant=\"outlined\"\r\n          label=\"Payments Per Year\"\r\n          type=\"number\"\r\n        />\r\n        <TextField\r\n          defaultValue={loan?.payment}\r\n          error={!!error.payment}\r\n          onChange={(event) => {\r\n            ref.current.payment = +event.target.value;\r\n          }}\r\n          variant=\"outlined\"\r\n          label=\"Payment\"\r\n          type=\"number\"\r\n        />\r\n        <TextField\r\n          defaultValue={loan?.ownershipPct}\r\n          error={!!error.ownershipPct}\r\n          onChange={(event) => {\r\n            ref.current.ownershipPct = convertPct(+event.target.value);\r\n          }}\r\n          variant=\"outlined\"\r\n          label=\"Ownership (%)\"\r\n          type=\"number\"\r\n        />\r\n        <Button\r\n          onClick={() => {\r\n            const parsed = validator.safeParse(ref.current);\r\n            if (parsed.success) {\r\n              setError({});\r\n              setLoan(accountName, parsed.data);\r\n            } else {\r\n              const issues = groupBy(parsed.error.issues, (x) => x.path.join(\"\"));\r\n              setError(issues);\r\n            }\r\n          }}\r\n        >\r\n          Set Loan\r\n        </Button>\r\n      </Stack>\r\n    </Paper>\r\n  );\r\n};\r\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\r\nimport { Button } from \"@mui/material\";\r\nimport { ColDef } from \"ag-grid-community\";\r\nimport { CustomCellRendererProps } from \"ag-grid-react\";\r\nimport { DateTime } from \"luxon\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { AccountData } from \"shared/models/account-data\";\r\nimport { removeAccountEntry } from \"shared/store\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\n\r\nexport const createAccountColumnConfig = (accountName: string): ColDef<AccountData>[] => [\r\n  {\r\n    headerName: \"Date\",\r\n    sort: \"desc\",\r\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\r\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\r\n  },\r\n  {\r\n    headerName: \"Home Value\",\r\n    cellRenderer: (x: CustomCellRendererProps<AccountData>) => <Cash value={x.value} placement=\"left\" />,\r\n    valueGetter: (x) => x.data?.value,\r\n    type: \"numericColumn\",\r\n  },\r\n  {\r\n    cellStyle: () => ({ display: \"inline-flex\", padding: \"0px\" }),\r\n    headerName: \"\",\r\n    width: 80,\r\n    sortable: false,\r\n    colId: \"actions\",\r\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\r\n      return (\r\n        <Button\r\n          onClick={() => {\r\n            props.data && removeAccountEntry(accountName, props.data?.id);\r\n          }}\r\n          color=\"error\"\r\n          fullWidth\r\n        >\r\n          <DeleteForeverIcon />\r\n        </Button>\r\n      );\r\n    },\r\n  },\r\n];\r\n\r\ntype House = {\r\n  date: DateTime;\r\n  balance: number;\r\n  equity: number;\r\n};\r\n\r\nexport const mortgageColumnConfig: ColDef<House>[] = [\r\n  {\r\n    headerName: \"Date\",\r\n    sort: \"desc\",\r\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\r\n    valueGetter: (x) => x.data?.date,\r\n  },\r\n  {\r\n    headerName: \"Loan Balance\",\r\n    valueGetter: (x) => x.data?.balance.toFixed(2),\r\n    cellRenderer: (x: CustomCellRendererProps<House>) => <Cash value={x.value} placement=\"left\" />,\r\n    type: \"numericColumn\",\r\n  },\r\n  {\r\n    headerName: \"Equity\",\r\n    valueGetter: (x) => x.data?.equity.toFixed(2),\r\n    cellRenderer: (x: CustomCellRendererProps<House>) => <Cash value={x.value} placement=\"left\" />,\r\n    type: \"numericColumn\",\r\n  },\r\n];\r\n","import { Stack } from \"@mui/system\";\r\nimport Grid from \"@mui/system/Unstable_Grid\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { useMemo } from \"react\";\r\nimport { AgGrid } from \"shared/components/ag-grid\";\r\nimport { Mortgage } from \"shared/models/mortgage\";\r\nimport { store } from \"shared/store\";\r\n\r\nimport { findNearestOnOrBefore } from \"shared/utility/find-nearest-on-or-before\";\r\nimport { getGraphDates } from \"shared/utility/get-graph-dates\";\r\nimport { calcEquity, calcLoanBalance } from \"shared/utility/mortgage-calc\";\r\nimport { DeleteAccount } from \"../components/delete-account\";\r\nimport { RenameAccount } from \"../components/update-account\";\r\nimport { AddEntry } from \"./add-entry\";\r\nimport { AddLoan } from \"./add-loan\";\r\nimport { createAccountColumnConfig, mortgageColumnConfig } from \"./column-config\";\r\n\r\nexport const MortgageTab = (props: { accountName: string }) => {\r\n  const { accountName } = props;\r\n\r\n  const account = useStore(store, (state) => state.wealth[accountName]) as Mortgage;\r\n\r\n  const allAccounts = useStore(store, (x) => x.wealth);\r\n\r\n  const accountColumnConfig = useMemo(() => {\r\n    return createAccountColumnConfig(accountName);\r\n  }, [accountName]);\r\n\r\n  const mortgageData = useMemo(() => {\r\n    if (!account?.loan) {\r\n      return [];\r\n    }\r\n\r\n    return getGraphDates(Object.values(allAccounts)).map((date) => {\r\n      const loanBalance = calcLoanBalance(date, account.loan!);\r\n      return {\r\n        date,\r\n        balance: loanBalance,\r\n        equity: calcEquity(\r\n          account.loan!.ownershipPct,\r\n          findNearestOnOrBefore(date, account.data)?.value,\r\n          loanBalance,\r\n          account.loan!.principal\r\n        ),\r\n      };\r\n    });\r\n  }, [account, allAccounts]);\r\n\r\n  return (\r\n    <Grid container height=\"100%\" width={\"100%\"} padding={1} spacing={2}>\r\n      <Grid lg={3}>\r\n        <AgGrid\r\n          reactiveCustomComponents\r\n          rowData={account?.data ?? []}\r\n          columnDefs={accountColumnConfig}\r\n          id={account + \"-history\"}\r\n          autoSizeStrategy={{ type: \"fitGridWidth\" }}\r\n        />\r\n      </Grid>\r\n      <Grid lg={3}>\r\n        <AgGrid\r\n          rowData={mortgageData}\r\n          columnDefs={mortgageColumnConfig}\r\n          id={account + \"-history\"}\r\n          autoSizeStrategy={{ type: \"fitGridWidth\" }}\r\n        />\r\n      </Grid>\r\n      <Grid lg={6}>\r\n        <div>\r\n          <Grid container spacing={2}>\r\n            <Grid xl={3}>\r\n              <AddLoan accountName={accountName} />\r\n            </Grid>\r\n            <Grid xl={3}>\r\n              <AddEntry accountName={accountName} />\r\n            </Grid>\r\n            <Grid xl={0}></Grid>\r\n            <Grid xl={3}>\r\n              <Stack spacing={2}>\r\n                <DeleteAccount accountName={accountName} />\r\n                <RenameAccount key={accountName} accountName={accountName} />\r\n              </Stack>\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import { Box, Tab, Tabs } from \"@mui/material\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { NewAccount } from \"../new-account\";\r\nimport { AccountTab } from \"../tab-types/account/account\";\r\nimport { MortgageTab } from \"../tab-types/mortgage\";\r\n\r\nexport const AccountTabs = () => {\r\n  const accounts = useStore(store, (x) => x.wealth);\r\n  const firstAccount = Object.keys(accounts)?.[0];\r\n  const [account, setAccount] = useState<string>(firstAccount);\r\n\r\n  useEffect(() => {\r\n    if (!accounts[account]) {\r\n      setAccount(Object.keys(accounts)?.[0] ?? \"\");\r\n    }\r\n  }, [account, accounts]);\r\n\r\n  return (\r\n    <Box display=\"flex\" flexDirection={\"column\"} width=\"100%\" height=\"100%\">\r\n      <Box display={\"flex\"} flex={\"0 1 auto\"}>\r\n        {Object.keys(accounts).length > 0 && (\r\n          <Tabs\r\n            value={account}\r\n            onChange={(_, value) => {\r\n              setAccount(value as string);\r\n            }}\r\n          >\r\n            {Object.keys(accounts).map((account) => {\r\n              return <Tab key={account} value={account} label={account} />;\r\n            })}\r\n          </Tabs>\r\n        )}\r\n        <Tab component={NewAccount} />\r\n      </Box>\r\n      <Box flex={\"1 1 auto\"}>\r\n        {accounts[account]?.type === \"account\" && <AccountTab accountName={account} />}\r\n        {accounts[account]?.type === \"mortgage\" && <MortgageTab accountName={account} />}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { Account } from \"shared/models/account\";\r\nimport { Mortgage } from \"shared/models/mortgage\";\r\nimport { findNearestOnOrBefore } from \"./find-nearest-on-or-before\";\r\nimport { calcEquity, calcLoanBalance } from \"./mortgage-calc\";\r\n\r\nconst getMortgageValue = (date: DateTime, mortgage: Mortgage) => {\r\n  if (!mortgage.loan) {\r\n    return 0;\r\n  }\r\n  const entry = findNearestOnOrBefore(date, mortgage.data);\r\n  if (entry?.date && mortgage.data[0] === entry && DateTime.fromISO(entry.date).startOf(\"day\") > date) {\r\n    return 0;\r\n  }\r\n  const { ownershipPct, principal } = mortgage.loan;\r\n  const balance = calcLoanBalance(date, mortgage.loan);\r\n  return calcEquity(ownershipPct, entry?.value, balance, principal);\r\n};\r\n\r\nconst getAccountValue = (date: DateTime, account: Account) => {\r\n  const entry = findNearestOnOrBefore(date, account.data);\r\n  if (entry?.date && account.data[0] === entry && DateTime.fromISO(entry.date).startOf(\"day\") > date) {\r\n    return 0;\r\n  }\r\n  return entry?.value;\r\n};\r\n\r\nexport const getGraphValue = (date: DateTime, account: Account | Mortgage) => {\r\n  switch (account.type) {\r\n    case \"account\":\r\n      return getAccountValue(date, account);\r\n    case \"mortgage\":\r\n      return getMortgageValue(date, account);\r\n  }\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { useMemo } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { getGraphDates } from \"shared/utility/get-graph-dates\";\r\nimport { getGraphValue } from \"shared/utility/get-graph-value\";\r\n\r\nexport const useGraphData = () => {\r\n  const wealth = useStore(store, (x) => x.wealth);\r\n\r\n  return useMemo(() => {\r\n    const dates = getGraphDates(Object.values(wealth));\r\n    const accounts = Object.entries(wealth);\r\n    const graphData = dates.map((date) => {\r\n      return accounts.reduce(\r\n        (acc, [accountName, account]) => {\r\n          const value = getGraphValue(date, account);\r\n\r\n          if (value) {\r\n            acc[accountName] = value;\r\n            acc[\"total\"] = (acc[\"total\"] as number) + value;\r\n          } else {\r\n            acc[accountName] = null;\r\n          }\r\n\r\n          acc[\"date\"] = date.toJSDate();\r\n          return acc;\r\n        },\r\n        { total: 0 } as Record<string, number | Date | null>,\r\n      );\r\n    });\r\n\r\n    graphData.forEach((x, idx, arr) => {\r\n      if (idx < arr.length - 1) {\r\n        Object.keys(x).forEach((key) => {\r\n          if (x[key] === null && arr[idx + 1][key] !== null) {\r\n            x[key] = 0;\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    const firstNonZero = graphData.findIndex((x) => (x[\"total\"] as number) > 0);\r\n    return graphData.slice(firstNonZero);\r\n  }, [wealth]);\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { AgAreaSeriesOptions, AgCartesianChartOptions, AgLineSeriesOptions } from \"ag-charts-community\";\r\nimport { AgChartsReact } from \"ag-charts-react\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { formatCashShort } from \"shared/utility/format-cash\";\r\nimport { useGraphData } from \"./use-graph-data\";\r\n\r\nexport const WealthChart = () => {\r\n  const wealth = useStore(store, (x) => x.wealth);\r\n  const data = useGraphData();\r\n\r\n  const series = useMemo(() => {\r\n    return [\r\n      ...Object.keys(wealth).map((x) => {\r\n        return {\r\n          stacked: true,\r\n          type: \"area\",\r\n          xKey: \"date\",\r\n          yKey: x,\r\n          yName: x,\r\n          tooltip: {\r\n            renderer: ({ datum, yKey, xKey }) => ({\r\n              content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCashShort(datum[yKey])}`,\r\n            }),\r\n          },\r\n        } as AgAreaSeriesOptions;\r\n      }),\r\n      {\r\n        type: \"line\",\r\n        xKey: \"date\",\r\n        yKey: \"total\",\r\n        yName: \"Total\",\r\n        tooltip: {\r\n          renderer: ({ datum, yKey, xKey }) => ({\r\n            content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCashShort(datum[yKey])}`,\r\n          }),\r\n        },\r\n      } as AgLineSeriesOptions,\r\n    ];\r\n  }, [wealth]);\r\n\r\n  const options: AgCartesianChartOptions = useMemo(\r\n    () => ({\r\n      theme: \"ag-default-dark\",\r\n      title: {\r\n        text: `Total Wealth ${formatCashShort((data[data.length - 1]?.total ?? 0) as number)}`,\r\n      },\r\n      data,\r\n      axes: [\r\n        {\r\n          type: \"time\",\r\n          position: \"bottom\",\r\n          label: {\r\n            format: \"%Y\",\r\n          },\r\n        },\r\n        {\r\n          type: \"number\",\r\n          position: \"left\",\r\n        },\r\n      ],\r\n      series,\r\n    }),\r\n    [data, series],\r\n  );\r\n  return <AgChartsReact options={options} />;\r\n};\r\n","import Grid from \"@mui/system/Unstable_Grid\";\r\nimport { AccountTabs } from \"./components/account-tabs\";\r\nimport { WealthChart } from \"./components/wealth-chart\";\r\n\r\nexport const NetWealth = () => {\r\n  return (\r\n    <Grid container height={\"100%\"} width=\"100%\" spacing={1}>\r\n      <Grid xs={12} height=\"50%\">\r\n        <WealthChart />\r\n      </Grid>\r\n      <Grid xs={12} height=\"50%\">\r\n        <AccountTabs />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import { Box, Tooltip } from \"@mui/material\";\r\nimport { DateTime } from \"luxon\";\r\nimport { ReactNode, useMemo } from \"react\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\n\r\ninterface DurationProps {\r\n  dateTime?: DateTime;\r\n  children?: ReactNode;\r\n  variant?: \"countdown\" | \"date\";\r\n  dateFormat?: string;\r\n}\r\nexport const Duration = (props: DurationProps) => {\r\n  const { dateTime, children, variant = \"countdown\", dateFormat = shortDate } = props;\r\n\r\n  const countDownStr = useMemo(() => {\r\n    if (!dateTime) {\r\n      return \"??\";\r\n    }\r\n    if (variant === \"countdown\") {\r\n      const diff = dateTime?.diffNow([\"years\", \"months\", \"days\", \"hours\"]);\r\n      const format = `${diff.years > 0 ? \"y 'years' \" : \"\"}${diff.months > 0 ? \"M 'months' \" : \"\"}${\r\n        diff.days > 0 && diff.months == 0 ? \"d 'days'\" : \"\"\r\n      }`;\r\n\r\n      return diff?.toFormat(format);\r\n    }\r\n\r\n    return dateTime?.toFormat(dateFormat);\r\n  }, [dateFormat, dateTime, variant]);\r\n\r\n  const tooltipStr = useMemo(() => {\r\n    if (variant === \"countdown\") {\r\n      return dateTime?.toFormat(dateFormat);\r\n    }\r\n\r\n    return dateTime?.diffNow([\"months\", \"days\", \"hours\"]).toFormat(\"d 'days'\");\r\n  }, [dateFormat, dateTime, variant]);\r\n\r\n  const countDownColor = useMemo(() => {\r\n    if (!dateTime) {\r\n      return \"white\";\r\n    }\r\n\r\n    const days = dateTime.diffNow(\"days\").days;\r\n    if (days < 30) {\r\n      return \"green\";\r\n    } else if (days < 60) {\r\n      return \"yellow\";\r\n    }\r\n\r\n    return \"red\";\r\n  }, [dateTime]);\r\n\r\n  return dateTime && dateTime > getLocalDateTime() ? (\r\n    <Tooltip title={tooltipStr}>\r\n      <Box color={countDownColor}>{countDownStr}</Box>\r\n    </Tooltip>\r\n  ) : (\r\n    children\r\n  );\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\n\r\nexport const useDates = (year?: number) =>\r\n  useMemo(() => {\r\n    return {\r\n      meritIncrease: DateTime.fromObject({ month: 4, day: 1, year }),\r\n      meritBonus: DateTime.fromObject({ month: 4, day: 15, year }),\r\n      companyBonus: DateTime.fromObject({ month: 6, day: 15, year }),\r\n      retirementBonus: DateTime.fromObject({ month: 7, day: 15, year }),\r\n    };\r\n  }, [year]);\r\n\r\nexport const useDateRanges = (year: number) => {\r\n  return useMemo(\r\n    () => ({\r\n      base: {\r\n        start: DateTime.fromObject({ month: 1, day: 1, year }),\r\n        end: DateTime.fromObject({ month: 12, day: 31, year }).endOf(\"day\"),\r\n      },\r\n      meritBonus: {\r\n        start: DateTime.fromObject({ month: 1, day: 1, year: year - 1 }),\r\n        end: DateTime.fromObject({ month: 12, day: 31, year: year - 1 }).endOf(\"day\"),\r\n      },\r\n      companyBonus: {\r\n        start: DateTime.fromObject({ day: 1, month: 4, year: year - 1 }),\r\n        end: DateTime.fromObject({ day: 31, month: 3, year }).endOf(\"day\"),\r\n      },\r\n      retirementBonus: {\r\n        start: DateTime.fromObject({ day: 1, month: 7, year: year - 1 }),\r\n        end: DateTime.fromObject({ day: 30, month: 6, year }).endOf(\"day\"),\r\n      },\r\n    }),\r\n    [year]\r\n  );\r\n};\r\n","export const formatPercent = new Intl.NumberFormat(\"en-us\", {\r\n  style: \"percent\",\r\n  maximumFractionDigits: 1,\r\n}).format;\r\n","import { Box } from \"@mui/system\";\r\nimport { ReactNode } from \"react\";\r\nimport { formatPercent } from \"shared/utility/format-percent\";\r\n\r\ninterface PercentProps {\r\n  value?: number;\r\n  probability?: number;\r\n  fallback?: ReactNode;\r\n}\r\n\r\nconst getColor = (probability?: number) => {\r\n  if (!probability) {\r\n    return \"inherit\";\r\n  }\r\n  if (probability >= 0.5) {\r\n    return \"green\";\r\n  }\r\n  if (probability >= 0.25) {\r\n    return \"yellow\";\r\n  }\r\n  return \"red\";\r\n};\r\n\r\nexport const Percent = ({ value, probability, fallback }: PercentProps) => {\r\n  return <Box color={getColor(probability)}>{value ? formatPercent(value) : fallback}</Box>;\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { create } from \"mutative\";\r\nimport { TimeSeries } from \"shared/models/projected-income\";\r\nimport { store } from \".\";\r\n\r\nexport const updateProjectedIncomeDate = (timeSeries: TimeSeries, id: string, date: DateTime) => {\r\n  store.setState((prev) => {\r\n    const next = create(prev, (next) => {\r\n      const account = next.projectedIncome.timeSeries[timeSeries];\r\n      const idx = account.findIndex((x) => x.id === id);\r\n      account[idx].date = date.toISO()!;\r\n    });\r\n    return next;\r\n  });\r\n};\r\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\r\nimport UpdateIcon from \"@mui/icons-material/Update\";\r\nimport { Button, Tooltip } from \"@mui/material\";\r\nimport { Stack } from \"@mui/system\";\r\nimport { ColDef, ICellRendererParams } from \"ag-grid-community\";\r\nimport { CustomCellRendererProps } from \"ag-grid-react\";\r\nimport { DateTime } from \"luxon\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { Percent } from \"shared/components/formatters/percent\";\r\nimport { AccountData } from \"shared/models/account-data\";\r\nimport { TimeSeries } from \"shared/models/projected-income\";\r\nimport { updateProjectedIncome } from \"shared/store\";\r\nimport { removeProjectedIncome } from \"shared/store/remove-projected-income\";\r\nimport { updateProjectedIncomeDate } from \"shared/store/update-projected-income-date\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\n\r\nexport const createAccountColumnConfig = (\r\n  accountName: TimeSeries,\r\n  variant: \"number\" | \"cash\" | \"percent\"\r\n): ColDef<AccountData>[] => [\r\n  {\r\n    headerName: \"Date\",\r\n    sort: \"desc\",\r\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\r\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\r\n    cellRenderer: (x: ICellRendererParams<unknown, DateTime>) => {\r\n      return (\r\n        <Stack direction={\"row\"} alignItems={\"center\"}>\r\n          {x.valueFormatted}&nbsp;\r\n          {x.value && x.value > DateTime.local() && (\r\n            <Tooltip title=\"Future Event\">\r\n              <UpdateIcon htmlColor=\"yellow\" />\r\n            </Tooltip>\r\n          )}\r\n        </Stack>\r\n      );\r\n    },\r\n    cellEditor: \"agDateCellEditor\",\r\n    editable: true,\r\n    valueSetter: (x) => {\r\n      const date = DateTime.fromJSDate(x.newValue);\r\n      if (date.isValid) {\r\n        updateProjectedIncomeDate(accountName, x.data.id, DateTime.fromJSDate(x.newValue));\r\n      }\r\n      return date.isValid;\r\n    },\r\n  },\r\n  {\r\n    headerName: \"Value\",\r\n    valueGetter: (x) => x.data?.value,\r\n    cellRenderer: (x: CustomCellRendererProps<AccountData>) =>\r\n      variant === \"cash\" ? <Cash compact={false} value={x.value} /> : <Percent value={x.value} />,\r\n    type: \"numericColumn\",\r\n    editable: true,\r\n    cellEditor: \"agNumberCellEditor\",\r\n    valueSetter: (x) => {\r\n      updateProjectedIncome(accountName, x.data.id, +x.newValue);\r\n      return true;\r\n    },\r\n  },\r\n  {\r\n    cellStyle: () => ({ display: \"inline-flex\", padding: \"0px\" }),\r\n    sortable: false,\r\n    headerName: \"\",\r\n    width: 80,\r\n    colId: \"actions\",\r\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\r\n      return (\r\n        <Button\r\n          onClick={() => {\r\n            props.data && removeProjectedIncome(accountName, props.data?.id);\r\n          }}\r\n          color=\"error\"\r\n          fullWidth\r\n        >\r\n          <DeleteForeverIcon />\r\n        </Button>\r\n      );\r\n    },\r\n  },\r\n];\r\n","import { Box, Button, InputAdornment, Paper, Stack, TextField, Tooltip, Typography } from \"@mui/material\";\r\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo, useState } from \"react\";\r\nimport { AgGrid } from \"shared/components/ag-grid\";\r\nimport { TimeSeries } from \"shared/models/projected-income\";\r\nimport { addProjectedIncome, store } from \"shared/store\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\nimport { createAccountColumnConfig } from \"./column-config\";\r\n\r\nexport const DataEntry = (props: {\r\n  timeSeries: TimeSeries;\r\n  defaultDate: DateTime;\r\n  variant?: \"number\" | \"cash\" | \"percent\";\r\n}) => {\r\n  const { timeSeries, defaultDate, variant = \"number\" } = props;\r\n  const account = useStore(store, (state) => state.projectedIncome.timeSeries[timeSeries]);\r\n\r\n  const [date, setDate] = useState(defaultDate);\r\n  const [amount, setAmount] = useState<number | null>(null);\r\n\r\n  const hasSameDate = useMemo(() => {\r\n    return !!account?.find((x) => date.hasSame(DateTime.fromISO(x.date), \"day\"));\r\n  }, [account, date]);\r\n\r\n  const onAddEntry = () => {\r\n    if (amount != null) {\r\n      addProjectedIncome(date, timeSeries, variant === \"percent\" ? amount / 100 : amount);\r\n      setAmount(null);\r\n    }\r\n  };\r\n\r\n  const accountColumnConfig = useMemo(() => {\r\n    return createAccountColumnConfig(timeSeries, variant);\r\n  }, [timeSeries, variant]);\r\n\r\n  return (\r\n    <Box display={\"flex\"} flexDirection={\"column\"} height=\"100%\">\r\n      <Stack spacing={2} flex=\"0 1 auto\">\r\n        <DatePicker\r\n          format={shortDate}\r\n          sx={{ color: \"white\" }}\r\n          label=\"Date\"\r\n          value={date}\r\n          onChange={(value) => {\r\n            console.log(value);\r\n            value && setDate(value);\r\n          }}\r\n        />\r\n        <TextField\r\n          label=\"amount\"\r\n          value={amount ?? \"\"}\r\n          type=\"number\"\r\n          onChange={(event) => (event.target.value === \"\" ? setAmount(null) : setAmount(+event.target.value))}\r\n          InputProps={{\r\n            startAdornment: variant !== \"number\" && (\r\n              <InputAdornment position=\"start\">{variant === \"cash\" ? \"$\" : \"%\"}</InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n        <Button disabled={amount === null || !date || hasSameDate} onClick={onAddEntry}>\r\n          Add Entry\r\n        </Button>\r\n      </Stack>\r\n      <Box sx={{ paddingTop: 2, flex: \"1 1 auto\" }}>\r\n        <AgGrid\r\n          reactiveCustomComponents\r\n          rowData={account ?? []}\r\n          columnDefs={accountColumnConfig}\r\n          id={account + \"-history\"}\r\n          autoSizeStrategy={{\r\n            type: \"fitGridWidth\",\r\n          }}\r\n          stopEditingWhenCellsLoseFocus\r\n        />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport interface LayoutProps {\r\n  title: string;\r\n  accountName: TimeSeries;\r\n  defaultDate: DateTime;\r\n  variant: \"percent\" | \"number\" | \"cash\";\r\n}\r\n\r\nexport const Layout = (props: LayoutProps) => {\r\n  const { title, accountName, defaultDate, variant } = props;\r\n  return (\r\n    <Paper sx={{ padding: 2, height: \"100%\", width: 450, flexShrink: 0 }}>\r\n      <Box display=\"flex\" flexDirection=\"column\" height=\"100%\">\r\n        <Box flex=\"0 1 auto\" marginBottom={2}>\r\n          <Typography sx={{ marginBottom: 2 }} variant=\"h5\">\r\n            {title}{\" \"}\r\n            {variant === \"cash\" && (\r\n              <Tooltip\r\n                title={\r\n                  <>\r\n                    <span>Cash values are used in lieu of Percent values.</span>\r\n                    <br />\r\n                    <span>Cash values are considered actual payment values.</span>\r\n                  </>\r\n                }\r\n              >\r\n                <span>($)</span>\r\n              </Tooltip>\r\n            )}\r\n            {variant === \"percent\" && (\r\n              <Tooltip title=\"Percentage values are used for predictions.\">\r\n                <span>(%)</span>\r\n              </Tooltip>\r\n            )}\r\n          </Typography>\r\n        </Box>\r\n        <Box flex=\"1 1 auto\">\r\n          <DataEntry variant={variant} timeSeries={accountName} defaultDate={defaultDate} />\r\n        </Box>\r\n      </Box>\r\n    </Paper>\r\n  );\r\n};\r\n","import { Box } from \"@mui/system\";\r\nimport { useMemo } from \"react\";\r\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\r\nimport { Cash } from \"./cash\";\r\n\r\ninterface CashProps {\r\n  min?: number;\r\n  max?: number;\r\n  fallback?: number;\r\n  disableTooltip?: boolean;\r\n  compact?: boolean;\r\n  tooltip?: string;\r\n\r\n  placement?:\r\n    | \"top\"\r\n    | \"right\"\r\n    | \"bottom\"\r\n    | \"left\"\r\n    | \"bottom-end\"\r\n    | \"bottom-start\"\r\n    | \"left-end\"\r\n    | \"left-start\"\r\n    | \"right-end\"\r\n    | \"right-start\"\r\n    | \"top-end\"\r\n    | \"top-start\"\r\n    | undefined;\r\n}\r\nexport const CashRange = ({ min, max, fallback, disableTooltip, compact = true }: CashProps) => {\r\n  const showRange = useMemo(() => {\r\n    const minFormatted = compact ? formatCashShort(min ?? 0) : formatCash(min ?? 0);\r\n    const maxFormatted = compact ? formatCashShort(max ?? 0) : formatCash(max ?? 0);\r\n    return minFormatted !== maxFormatted;\r\n  }, [compact, max, min]);\r\n\r\n  return (\r\n    <Box>\r\n      {!showRange && (\r\n        <Cash\r\n          fallback={fallback}\r\n          value={max}\r\n          tooltip={min != max ? `${formatCash(min ?? 0)} - ` : undefined}\r\n          disableTooltip={disableTooltip}\r\n          compact={compact}\r\n        />\r\n      )}\r\n      {showRange && (\r\n        <>\r\n          <Cash value={min} fallback={fallback} disableTooltip={disableTooltip} compact={compact} />\r\n          <span> - </span>\r\n          <Cash value={max} fallback={fallback} disableTooltip={disableTooltip} compact={compact} />\r\n        </>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n","import { Box } from \"@mui/system\";\r\nimport { Percent } from \"./percent\";\r\n\r\ninterface PercentProps {\r\n  min?: number;\r\n  max?: number;\r\n  fallback?: number;\r\n}\r\n\r\nexport const PercentRange = ({ min, max, fallback }: PercentProps) => {\r\n  return (\r\n    <Box>\r\n      {(max ?? 0) / (min ?? 1) <= 1.005 && <Percent fallback={fallback} value={max} />}\r\n      {(max ?? 0) / (min ?? 1) > 1.005 && (\r\n        <>\r\n          <Percent value={min} fallback={fallback} />\r\n          <span> - </span>\r\n          <Percent value={max} fallback={fallback} />\r\n        </>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n","import { Box } from \"@mui/material\";\r\nimport { ReactNode } from \"react\";\r\n\r\ninterface CellProps {\r\n  children?: ReactNode;\r\n  secondaryValue?: ReactNode;\r\n  tertiaryValue?: ReactNode;\r\n  title: ReactNode;\r\n  className?: string;\r\n}\r\n\r\nexport const Value = (props: CellProps) => {\r\n  const { children, secondaryValue, tertiaryValue, title, className } = props;\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: \"flex\",\r\n        minWidth: 106,\r\n        height: 64,\r\n        padding: \"0px 8px\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"flex-start\",\r\n        gap: 0.5,\r\n        flexShrink: 0,\r\n      }}\r\n      className={className}\r\n    >\r\n      <Box display={\"flex\"} alignItems={\"center\"} gap={0.5}>\r\n        <Box fontSize={18} fontWeight={700} lineHeight={\"20px\"}>\r\n          {children ? children : \"?\"}\r\n        </Box>\r\n        {!!(secondaryValue ?? tertiaryValue) && (\r\n          <Box\r\n            alignSelf={\"flex-end\"}\r\n            fontSize={12}\r\n            fontWeight={500}\r\n            lineHeight={\"16px\"}\r\n            textTransform={\"uppercase\"}\r\n            color={\"#888\"}\r\n          >\r\n            {secondaryValue ?? tertiaryValue}\r\n          </Box>\r\n        )}\r\n      </Box>\r\n      <Box fontSize={12} fontWeight={500} lineHeight={\"16px\"} textTransform={\"uppercase\"}>\r\n        {title}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","import { Box, Divider, Stack, Typography } from \"@mui/material\";\r\nimport { ReactNode } from \"react\";\r\nimport { CashRange } from \"shared/components/formatters/cash-range\";\r\nimport { Percent } from \"shared/components/formatters/percent\";\r\nimport { PercentRange } from \"shared/components/formatters/percent-range\";\r\nimport { Cluster } from \"../hooks/use-gradient\";\r\nimport { Value } from \"./value\";\r\n\r\nexport const Outcome = (props: { title: ReactNode; cluster?: Cluster[]; compact?: boolean; children?: ReactNode }) => {\r\n  const { title, cluster, compact = true, children } = props;\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        border: \"1px solid rgba(255,255,255,0.1)\",\r\n        borderRadius: 2,\r\n      }}\r\n    >\r\n      <Typography sx={{ paddingBottom: 1, paddingLeft: 2, paddingTop: 1, display: \"flex\" }} variant=\"h5\">\r\n        {title}\r\n      </Typography>\r\n      <Divider />\r\n\r\n      <Stack padding={1} direction={\"row\"} spacing={0.5} width={\"max-content\"}>\r\n        {cluster &&\r\n          cluster.map((x, i) => {\r\n            return (\r\n              <Value\r\n                key={i}\r\n                title={\r\n                  <Box display={\"flex\"} gap={1}>\r\n                    <span>{x.title}</span>\r\n                    {x.probability < 1 && <Percent probability={x.probability} value={x.probability} />}\r\n                  </Box>\r\n                }\r\n              >\r\n                {x.min < 1 && x.min > 0 && <PercentRange min={x.min} max={x.max} />}\r\n                {x.min > 1 && <CashRange compact={compact} min={x.min} max={x.max} />}\r\n                {x.min === 0 && 0}\r\n              </Value>\r\n            );\r\n          })}\r\n        {children}\r\n      </Stack>\r\n    </Box>\r\n  );\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { AccountData } from \"shared/models/account-data\";\r\n\r\nexport function findSameYear(year: number, data: AccountData[]): AccountData | undefined;\r\nexport function findSameYear(date: DateTime, data: AccountData[]): AccountData | undefined;\r\nexport function findSameYear(date: DateTime | number, data: AccountData[]): AccountData | undefined {\r\n  const year = typeof date === \"number\" ? date : date.year;\r\n  return data.find((x) => {\r\n    return DateTime.fromISO(x.date).year === year;\r\n  });\r\n}\r\n","import { useMemo } from \"react\";\r\nimport { AccountData } from \"shared/models/account-data\";\r\n\r\nexport const useMostFrequentValue = (data: AccountData[]): number | undefined => {\r\n  return useMemo(() => {\r\n    return Object.entries(\r\n      Object.groupBy(\r\n        data.map((x) => x.value),\r\n        (x) => x\r\n      )\r\n    )\r\n      .map(([key, values]) => [+key, values?.length ?? 0])\r\n      .sort(([, a], [, b]) => {\r\n        return b - a;\r\n      })[0]?.[0];\r\n  }, [data]);\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { AccountData } from \"shared/models/account-data\";\r\nimport { store } from \"shared/store\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { findSameYear } from \"shared/utility/find-same-year\";\r\nimport { useMostFrequentValue } from \"./use-most-frequent-value\";\r\n\r\nexport interface TimeSpanValue {\r\n  start: DateTime;\r\n  end: DateTime;\r\n  value: number;\r\n}\r\n\r\nexport const valueByDateRange = (account: AccountData[]): TimeSpanValue[] => {\r\n  return account.map((x, index, array) => {\r\n    const next = array[index + 1];\r\n    return {\r\n      start: DateTime.fromISO(x.date),\r\n      end: (next?.date ? DateTime.fromISO(next?.date).startOf(\"day\") : DateTime.fromISO(x.date).plus({ years: 1 }))\r\n        .minus({ days: 1 })\r\n        .endOf(\"day\"),\r\n      value: x.value,\r\n    };\r\n  });\r\n};\r\n\r\nconst systemYear = getLocalDateTime().year;\r\nconst defaultValue = {\r\n  start: DateTime.fromObject({\r\n    month: 1,\r\n    day: 1,\r\n    year: systemYear,\r\n  }),\r\n  end: DateTime.fromObject({\r\n    month: 12,\r\n    day: 31,\r\n    year: systemYear,\r\n  }).endOf(\"day\"),\r\n  value: 0,\r\n};\r\n\r\nexport interface ProjectedPay {\r\n  start: DateTime<true> | DateTime<false>;\r\n  end: DateTime<true> | DateTime<false>;\r\n  value: number;\r\n}\r\n\r\nexport const useProjectedPay = (): ProjectedPay[] => {\r\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\r\n  const baseIncome = timeSeries.paycheck;\r\n  const meritPct = useMostFrequentValue(timeSeries.meritIncreasePct);\r\n\r\n  return useMemo(() => {\r\n    const payPerPeriod = valueByDateRange(baseIncome);\r\n    const mostRecentPay = payPerPeriod[payPerPeriod.length - 1] ?? defaultValue;\r\n\r\n    for (let i = 0; i < 2; i++) {\r\n      const { start, end, value } = payPerPeriod[0] ?? mostRecentPay;\r\n      const startDate = start.plus({ years: -1 }).startOf(\"day\");\r\n      const equity = findSameYear(start, timeSeries.equityPct)?.value ?? 0;\r\n      const merit = findSameYear(start, timeSeries.meritIncreasePct)?.value ?? meritPct ?? 0;\r\n      const multiplier = 1 / (1 + merit + equity);\r\n\r\n      payPerPeriod.unshift({\r\n        start: startDate,\r\n        end: end.plus({ years: -1 }).endOf(\"day\"),\r\n        value: Math.round(value * multiplier),\r\n      });\r\n    }\r\n\r\n    const startIdx = payPerPeriod.length;\r\n    for (let i = 0; i < 11; i++) {\r\n      const { start, end, value } = payPerPeriod[startIdx + i - 1] ?? mostRecentPay;\r\n      const startDate = start.plus({ years: 1 });\r\n      const equity = findSameYear(startDate, timeSeries.equityPct)?.value ?? 0;\r\n      const merit = findSameYear(startDate, timeSeries.meritIncreasePct)?.value ?? meritPct ?? 0;\r\n      const multiplier = 1 + merit + equity;\r\n\r\n      payPerPeriod.push({\r\n        start: startDate,\r\n        end: end.plus({ years: 1 }).endOf(\"day\"),\r\n        value: Math.round(value * multiplier),\r\n      });\r\n    }\r\n\r\n    return payPerPeriod;\r\n  }, [baseIncome, meritPct, timeSeries.equityPct, timeSeries.meritIncreasePct]);\r\n};\r\n","import { DateTime } from \"luxon\";\r\n\r\nexport const aPayday = DateTime.fromObject({ month: 12, day: 1, year: 2023 });\r\n","import { DateTime } from \"luxon\";\r\n\r\nexport function DateRangesOverlap(a: { start: DateTime; end: DateTime }, b: { start: DateTime; end: DateTime }) {\r\n  return a.start <= b.end && b.start <= a.end;\r\n}\r\n","import { DateTime } from \"luxon\";\r\n\r\nexport interface PayPeriod {\r\n  start: DateTime;\r\n  end: DateTime;\r\n  payedOn: DateTime;\r\n}\r\n\r\nexport const getPayPeriods = (anyPayday: DateTime, start: DateTime, end: DateTime): PayPeriod[] => {\r\n  const diff = anyPayday.diff(start, [\"weeks\", \"days\"]);\r\n  const startPayDay = start.plus({\r\n    days: diff.days,\r\n    weeks: +(diff.weeks % 2 !== 0),\r\n  });\r\n\r\n  const numPayDays = end.diff(start, [\"weeks\", \"days\"]).weeks / 2;\r\n  const periods = [];\r\n  for (let i = 0; i <= numPayDays; i++) {\r\n    periods.push({\r\n      start: startPayDay.plus({ weeks: i * 2 - 3, day: 3 }),\r\n      end: startPayDay.plus({ weeks: i * 2 - 1 }).endOf(\"day\"),\r\n      payedOn: startPayDay.plus({ weeks: i * 2 }),\r\n    });\r\n  }\r\n\r\n  return periods.filter((x) => x.payedOn > start && x.payedOn < end);\r\n};\r\n","import { differenceInBusinessDays } from \"date-fns/differenceInBusinessDays\";\r\nimport { DateTime } from \"luxon\";\r\nimport { ProjectedPay } from \"shared/hooks/use-projected-pay\";\r\nimport { aPayday } from \"./a-payday\";\r\nimport { DateRangesOverlap } from \"./date-ranges-overlap\";\r\nimport { PayPeriod, getPayPeriods } from \"./get-pay-periods\";\r\n\r\nexport interface PaymentPeriod extends PayPeriod {\r\n  value: number;\r\n}\r\n\r\nexport function getPayments(startDate: DateTime, endDate: DateTime, pay: ProjectedPay[]): PaymentPeriod[] {\r\n  const payPeriods = getPayPeriods(aPayday, startDate, endDate);\r\n  return payPeriods.map((payPeriod) => {\r\n    const dateRanges = pay.filter((x) => DateRangesOverlap(x, payPeriod));\r\n    const payDuringPeriod = dateRanges.map((x) => {\r\n      const start = DateTime.max(x.start, payPeriod.start);\r\n      const end = DateTime.min(x.end, payPeriod.end);\r\n      const businessDays = differenceInBusinessDays(end.plus({ milliseconds: 1 }).toJSDate(), start.toJSDate());\r\n      const value = (x.value / 10) * Math.max(1, businessDays);\r\n      return {\r\n        start,\r\n        end,\r\n        value,\r\n      };\r\n    });\r\n    const sum = payDuringPeriod.reduce((acc, curr) => acc + curr.value, 0);\r\n\r\n    return {\r\n      ...payPeriod,\r\n      value: sum,\r\n    };\r\n  });\r\n}\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { findSameYear } from \"shared/utility/find-same-year\";\r\n\r\nexport const useMeritPairs = (year: number) => {\r\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\r\n  const meritBonusPct = findSameYear(year, timeSeries.meritBonusPct);\r\n  const meritIncreasePct = findSameYear(year, timeSeries.meritIncreasePct);\r\n\r\n  return useMemo(() => {\r\n    const allMeritPairs = timeSeries.meritIncreasePct.map((x) => {\r\n      const meritBonusPctPair = findSameYear(DateTime.fromISO(x.date).year, timeSeries.meritBonusPct);\r\n      return {\r\n        meritIncreasePct: x.value,\r\n        meritBonusPct: meritBonusPctPair?.value ?? 0,\r\n      };\r\n    });\r\n\r\n    return allMeritPairs\r\n      .filter((x) => (meritBonusPct ? x.meritBonusPct === meritBonusPct.value : true))\r\n      .filter((x) => (meritIncreasePct ? x.meritIncreasePct === meritIncreasePct?.value : true));\r\n  }, [meritBonusPct, meritIncreasePct, timeSeries.meritBonusPct, timeSeries.meritIncreasePct]);\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { useMeritPairs } from \"./use-merit-pairs\";\r\n\r\nexport const useMeritSequence = (year: number) => {\r\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\r\n  const meritPairs = useMeritPairs(year);\r\n\r\n  return useMemo(() => {\r\n    const pay = timeSeries.paycheck.filter((x) => DateTime.fromISO(x.date).year > year - 3);\r\n    const mostRecentPay = pay.at(-1) ?? timeSeries.paycheck.at(-1);\r\n\r\n    if (!mostRecentPay) {\r\n      return [];\r\n    }\r\n\r\n    const yearsToGenerate = year - DateTime.fromISO(mostRecentPay.date).year;\r\n    if (yearsToGenerate === 0) {\r\n      return [];\r\n    }\r\n\r\n    let meritSequence = meritPairs.slice().map((x) => [x]);\r\n    for (let i = 0; i < yearsToGenerate - 1; i++) {\r\n      meritSequence = meritSequence.flatMap((x) => {\r\n        return meritPairs.map((merit) => {\r\n          return x.slice().concat(merit);\r\n        });\r\n      });\r\n    }\r\n    return meritSequence;\r\n  }, [meritPairs, timeSeries.paycheck, year]);\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { PaymentPeriod } from \"./get-payments\";\r\n\r\nexport const incomeByRange = (range: { start: DateTime; end: DateTime }, pay: PaymentPeriod[]) => {\r\n  return pay\r\n    .filter((x) => x.payedOn >= range.start && x.payedOn <= range.end)\r\n    .reduce((acc, curr) => acc + curr.value, 0);\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { useDates, useDateRanges } from \"shared/hooks/use-dates\";\r\nimport { valueByDateRange } from \"shared/hooks/use-projected-pay\";\r\nimport { store } from \"shared/store\";\r\nimport { findSameYear } from \"shared/utility/find-same-year\";\r\nimport { PaymentPeriod, getPayments } from \"shared/utility/get-payments\";\r\nimport { useMeritSequence } from \"./use-merit-sequence\";\r\nimport { AccountData } from \"shared/models/account-data\";\r\nimport { incomeByRange } from \"shared/utility/income-by-range\";\r\n\r\nexport interface Scenario {\r\n  totalPay: number;\r\n  basePay: number;\r\n  meritBonus: number;\r\n  companyBonus: number;\r\n  retirementBonus: number;\r\n  companyBonusFactor: number;\r\n  companyBonusPct: number;\r\n  pay: AccountData[];\r\n  lastThreeMeritBonus: number;\r\n  meritBonusPct: number;\r\n  meritIncreasePct: number;\r\n  payments: PaymentPeriod[];\r\n  equityIncreasePct: number;\r\n  retirementBonusPct: number;\r\n  aprToApr: number;\r\n}\r\n\r\nexport const useScenarios = (year: number): Scenario[] => {\r\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\r\n  const meritSequence = useMeritSequence(year);\r\n  const dates = useDates(year);\r\n  const dateRanges = useDateRanges(year);\r\n\r\n  const pay = useMemo(() => {\r\n    return timeSeries.paycheck.filter((x) => DateTime.fromISO(x.date).year > year - 3);\r\n  }, [timeSeries.paycheck, year]);\r\n\r\n  const emptyMeritSequence = useMemo(() => {\r\n    const equityIncreasePct = findSameYear(year, timeSeries.equityPct)?.value ?? 0;\r\n    const meritIncreasePct = findSameYear(year, timeSeries.meritIncreasePct)?.value ?? 0;\r\n    const meritBonusPct = findSameYear(year, timeSeries.meritBonusPct)?.value ?? 0;\r\n    const meritBonuses = pay.map(\r\n      (x) => findSameYear(DateTime.fromISO(x.date).year, timeSeries.meritBonusPct)?.value ?? 0\r\n    );\r\n\r\n    const lastThreeMeritBonus = meritBonuses.slice(-3).reduce((acc, curr) => acc + curr, 0);\r\n    const payments = getPayments(\r\n      DateTime.fromObject({ day: 1, month: 1, year: year - 1 }),\r\n      DateTime.fromObject({ day: 31, month: 12, year: year }).endOf(\"day\"),\r\n      valueByDateRange(pay)\r\n    );\r\n\r\n    return [\r\n      {\r\n        pay: pay.slice(),\r\n        lastThreeMeritBonus,\r\n        meritBonusPct,\r\n        meritIncreasePct,\r\n        payments,\r\n        equityIncreasePct,\r\n        retirementBonusPct: 0.15,\r\n      },\r\n    ];\r\n  }, [pay, timeSeries.equityPct, timeSeries.meritBonusPct, timeSeries.meritIncreasePct, year]);\r\n\r\n  return useMemo(() => {\r\n    const mostRecentPay = pay.at(-1) ?? timeSeries.paycheck.at(-1);\r\n    if (!mostRecentPay) {\r\n      return [];\r\n    }\r\n\r\n    const equityIncreasePct = findSameYear(year, timeSeries.equityPct)?.value ?? 0;\r\n    const companyBonusFactor = findSameYear(year, timeSeries.companyBonusPct);\r\n    const uniqueCompanyBonusPcts = companyBonusFactor\r\n      ? [companyBonusFactor.value]\r\n      : timeSeries.companyBonusPct.map((x) => x.value);\r\n\r\n    const basePayAndMeritScenarios =\r\n      meritSequence.length === 0\r\n        ? emptyMeritSequence\r\n        : meritSequence.map((merits) => {\r\n            const next = pay.slice();\r\n            const initial = next.length;\r\n\r\n            for (let i = initial; i < merits.length + initial; i++) {\r\n              const prior = next[i - 1] ?? mostRecentPay;\r\n              const date = DateTime.fromISO(prior.date ?? mostRecentPay.date)\r\n                .plus({ years: 1 })\r\n                .set({ month: dates.meritIncrease.month, day: dates.meritIncrease.day });\r\n              const equity = findSameYear(date.year, timeSeries.equityPct)?.value ?? 0;\r\n              next.push({\r\n                date: date.toISO()!,\r\n                value: prior.value * (1 + merits[i - initial].meritIncreasePct + equity),\r\n                id: \"\",\r\n              });\r\n            }\r\n\r\n            const actualMeritBonusPcts = pay.map(\r\n              (x) => findSameYear(DateTime.fromISO(x.date).year, timeSeries.meritBonusPct)?.value ?? 0\r\n            );\r\n            const fakeMerit = merits.map((x) => x.meritBonusPct);\r\n            const lastThreeMeritBonus = actualMeritBonusPcts\r\n              .concat(fakeMerit)\r\n              .slice(-3)\r\n              .reduce((acc, curr) => acc + curr, 0);\r\n\r\n            const lastMerit = merits.at(-1)!;\r\n            const payments = getPayments(\r\n              DateTime.fromObject({ day: 1, month: 1, year: year - 1 }),\r\n              DateTime.fromObject({ day: 31, month: 12, year: year }).endOf(\"day\"),\r\n              valueByDateRange(next)\r\n            );\r\n\r\n            return {\r\n              pay: next,\r\n              lastThreeMeritBonus,\r\n              meritBonusPct: lastMerit.meritBonusPct,\r\n              meritIncreasePct: lastMerit.meritIncreasePct,\r\n              payments,\r\n              equityIncreasePct,\r\n              retirementBonusPct: 0.15,\r\n            };\r\n          });\r\n\r\n    const withCompanyBonus = uniqueCompanyBonusPcts.flatMap((x) => {\r\n      return basePayAndMeritScenarios.map((y) => {\r\n        return { ...y, companyBonusFactor: x, companyBonusPct: y.lastThreeMeritBonus * x };\r\n      });\r\n    });\r\n\r\n    const totals = withCompanyBonus.map((x) => {\r\n      const aprToApr = (x.pay.at(-1)?.value ?? 0) * 26;\r\n      const basePay = Math.round(incomeByRange(dateRanges.base, x.payments));\r\n      const meritBonus = Math.round(incomeByRange(dateRanges.meritBonus, x.payments) * x.meritBonusPct);\r\n      const companyBonus = Math.round(incomeByRange(dateRanges.companyBonus, x.payments) * x.companyBonusPct);\r\n      const retirementBonus = Math.round(\r\n        (meritBonus + companyBonus + incomeByRange(dateRanges.retirementBonus, x.payments)) * 0.15\r\n      );\r\n      const totalPay = Math.round(\r\n        [basePay, meritBonus, companyBonus, retirementBonus].reduce((acc, curr) => acc + curr, 0)\r\n      );\r\n\r\n      return { totalPay, basePay, meritBonus, companyBonus, retirementBonus, aprToApr, ...x };\r\n    });\r\n    return totals;\r\n  }, [\r\n    dateRanges.base,\r\n    dateRanges.companyBonus,\r\n    dateRanges.meritBonus,\r\n    dateRanges.retirementBonus,\r\n    dates.meritIncrease.day,\r\n    dates.meritIncrease.month,\r\n    emptyMeritSequence,\r\n    meritSequence,\r\n    pay,\r\n    timeSeries.companyBonusPct,\r\n    timeSeries.equityPct,\r\n    timeSeries.meritBonusPct,\r\n    timeSeries.paycheck,\r\n    year,\r\n  ]);\r\n};\r\n","import { useMemo } from \"react\";\r\nimport { ckmeans } from \"simple-statistics\";\r\nimport { useScenarios } from \"./use-scenarios\";\r\n\r\nconst clusterTitle = (index: number, length: number) => {\r\n  if (length === 1) {\r\n    return \"Actual\";\r\n  } else if (length == 2) {\r\n    return [\"Low\", \"High\"][index];\r\n  } else {\r\n    return [\"Low\", \"Med\", \"High\"][index];\r\n  }\r\n};\r\n\r\nexport interface Cluster {\r\n  min: number;\r\n  max: number;\r\n  probability: number;\r\n  title: string;\r\n}\r\n\r\nconst clusters = (values: number[]): Cluster[] => {\r\n  return ckmeans(values, Math.min(3, values.length)).map((x, i, arr) => {\r\n    return {\r\n      min: Math.min(...x),\r\n      max: Math.max(...x),\r\n      probability: x.length / values.length,\r\n      title: clusterTitle(i, arr.length),\r\n    };\r\n  });\r\n};\r\n\r\nexport const useClusters = (year: number) => {\r\n  const scenarios = useScenarios(year);\r\n\r\n  return useMemo(() => {\r\n    return {\r\n      totalPay: clusters(scenarios.map((x) => x.totalPay)),\r\n      meritBonus: clusters(scenarios.map((x) => x.meritBonus)),\r\n      retirementBonus: clusters(scenarios.map((x) => x.retirementBonus)),\r\n      companyBonus: clusters(scenarios.map((x) => x.companyBonus)),\r\n      pay: clusters(scenarios.map((x) => x.pay.at(-1)?.value ?? 0)),\r\n      meritIncrease: clusters(scenarios.map((x) => x.meritIncreasePct + x.equityIncreasePct)),\r\n      scenarios,\r\n    };\r\n  }, [scenarios]);\r\n};\r\n","import ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\r\nimport { Table, TableBody, TableCell, TableRow } from \"@mui/material\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\nimport { IncomePerPeriod } from \"../../../shared/hooks/use-base-income\";\r\n\r\ninterface IncomePerPeriodTooltipProps {\r\n  incomePerPeriod: IncomePerPeriod[];\r\n}\r\n\r\nexport const IncomePerPeriodTooltip = (props: IncomePerPeriodTooltipProps) => {\r\n  const { incomePerPeriod } = props;\r\n  return (\r\n    <Table sx={{ width: \"max-content\" }}>\r\n      <TableBody>\r\n        {incomePerPeriod.map(({ start, end, value, perPayday, count }, index) => {\r\n          return (\r\n            <TableRow key={index}>\r\n              <TableCell>\r\n                <Cash value={value} compact={false} />\r\n              </TableCell>\r\n              <TableCell>{start.toFormat(shortDate)}</TableCell>\r\n              <TableCell>\r\n                <ArrowForwardIcon />\r\n              </TableCell>\r\n              <TableCell>{end.toFormat(shortDate)}</TableCell>\r\n              <TableCell>\r\n                <Cash value={perPayday} compact={false} /> x {count}\r\n              </TableCell>\r\n            </TableRow>\r\n          );\r\n        })}\r\n        <TableRow>\r\n          <TableCell colSpan={4}>Total:</TableCell>\r\n          <TableCell>\r\n            <Cash value={incomePerPeriod.reduce((acc, curr) => curr.value + acc, 0)} compact={false} />\r\n          </TableCell>\r\n        </TableRow>\r\n      </TableBody>\r\n    </Table>\r\n  );\r\n};\r\n","import { Box, Stack } from \"@mui/system\";\r\nimport { DatePicker } from \"@mui/x-date-pickers\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo, useState } from \"react\";\r\nimport { Duration } from \"shared/components/formatters/duration\";\r\nimport { useDateRanges, useDates } from \"shared/hooks/use-dates\";\r\nimport { store } from \"shared/store\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { Layout } from \"./components/data-entry/data-entry\";\r\nimport { Outcome } from \"./components/outcome\";\r\nimport { useClusters } from \"./hooks/use-gradient\";\r\nimport { Tooltip } from \"@mui/material\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { Value } from \"./components/value\";\r\nimport { IncomePerPeriod } from \"shared/hooks/use-base-income\";\r\nimport { IncomePerPeriodTooltip } from \"./components/income-per-period\";\r\n\r\nexport const ProjectedIncome = () => {\r\n  const [selectedYear, setSelectedYear] = useState(getLocalDateTime().year);\r\n  const oldestYear = useStore(store, (x) => {\r\n    const first = x.projectedIncome.timeSeries.paycheck[1]?.date;\r\n    const date = first ? DateTime.fromISO(first) : getLocalDateTime();\r\n    return date.year;\r\n  });\r\n\r\n  const clusters = useClusters(selectedYear);\r\n  const dates = useDates(selectedYear);\r\n  const dateRanges = useDateRanges(selectedYear);\r\n\r\n  const basePay = useMemo(() => {\r\n    if (clusters.pay.length !== 1) {\r\n      return;\r\n    }\r\n    return clusters.scenarios[0].basePay;\r\n  }, [clusters.pay.length, clusters.scenarios]);\r\n\r\n  const aprToApr = useMemo(() => {\r\n    if (clusters.pay.length !== 1) {\r\n      return;\r\n    }\r\n    return clusters.scenarios[0].aprToApr;\r\n  }, [clusters.pay.length, clusters.scenarios]);\r\n\r\n  const paychecks = useMemo(() => {\r\n    if (clusters.pay.length !== 1) {\r\n      return;\r\n    }\r\n\r\n    const payPeriods = clusters.scenarios[0].payments.filter(\r\n      (x) => x.payedOn >= dateRanges.base.start && x.payedOn <= dateRanges.base.end\r\n    );\r\n\r\n    return payPeriods\r\n      .reduceRight((acc, curr) => {\r\n        if (acc[0]?.[0]?.value === curr.value) {\r\n          acc[0].unshift(curr);\r\n        } else {\r\n          acc.unshift([curr]);\r\n        }\r\n\r\n        return acc;\r\n      }, [] as (typeof payPeriods)[])\r\n      .reduce((acc, curr) => {\r\n        acc.push({\r\n          start: curr[0].payedOn,\r\n          end: curr[curr.length - 1].payedOn,\r\n          value: curr.reduce((acc, curr) => acc + curr.value, 0),\r\n          perPayday: curr[0].value,\r\n          count: curr.length,\r\n        });\r\n        return acc;\r\n      }, [] as IncomePerPeriod[]);\r\n  }, [clusters.pay.length, clusters.scenarios, dateRanges.base.end, dateRanges.base.start]);\r\n\r\n  return (\r\n    <Box display=\"flex\" flexDirection=\"row\" height=\"100%\" width={\"100%\"} gap={2}>\r\n      <Box flex=\"0 1 auto\">\r\n        <Stack gap={2} direction={\"column\"} overflow={\"auto\"}>\r\n          <Outcome\r\n            cluster={clusters.totalPay}\r\n            title={\r\n              <Box display=\"flex\" alignItems={\"center\"} gap={2} width={\"100%\"}>\r\n                <span>Income</span>\r\n                <Duration dateTime={dates.companyBonus} />\r\n                <DatePicker\r\n                  sx={{ width: 90, marginLeft: \"auto\", marginRight: 2 }}\r\n                  label={\"year\"}\r\n                  views={[\"year\"]}\r\n                  minDate={getLocalDateTime().set({ year: oldestYear })}\r\n                  maxDate={getLocalDateTime().plus({ years: 2 })}\r\n                  defaultValue={getLocalDateTime()}\r\n                  slotProps={{\r\n                    textField: {\r\n                      variant: \"standard\",\r\n                      label: \"\",\r\n                    },\r\n                  }}\r\n                  onYearChange={(year) => {\r\n                    setSelectedYear(year.year);\r\n                  }}\r\n                />\r\n              </Box>\r\n            }\r\n          />\r\n          <Outcome\r\n            title={\r\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\r\n                <span>Paycheck</span>\r\n                <Duration dateTime={dates.meritIncrease} />\r\n              </Box>\r\n            }\r\n            compact={false}\r\n            cluster={clusters.pay}\r\n          >\r\n            {basePay && (\r\n              <Tooltip\r\n                componentsProps={{\r\n                  tooltip: {\r\n                    sx: {\r\n                      maxWidth: \"none\",\r\n                    },\r\n                  },\r\n                }}\r\n                title={paychecks && <IncomePerPeriodTooltip incomePerPeriod={paychecks} />}\r\n              >\r\n                <div>\r\n                  <Value title={\"Base Pay\"}>\r\n                    <Cash disableTooltip value={basePay} />\r\n                  </Value>\r\n                </div>\r\n              </Tooltip>\r\n            )}\r\n            {aprToApr && (\r\n              <Value title={\"APR to APR\"}>\r\n                <Cash value={aprToApr} />\r\n              </Value>\r\n            )}\r\n          </Outcome>\r\n          <Outcome\r\n            title={\r\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\r\n                <span>Merit Increase</span>\r\n                <Duration dateTime={dates.meritIncrease} />\r\n              </Box>\r\n            }\r\n            compact={false}\r\n            cluster={clusters.meritIncrease}\r\n          />\r\n\r\n          <Outcome\r\n            title={\r\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\r\n                <span>Merit Bonus</span>\r\n                <Duration dateTime={dates.meritBonus} />\r\n              </Box>\r\n            }\r\n            cluster={clusters.meritBonus}\r\n          />\r\n          <Outcome\r\n            title={\r\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\r\n                <span>Company Bonus</span>\r\n                <Duration dateTime={dates.companyBonus} />\r\n              </Box>\r\n            }\r\n            cluster={clusters.companyBonus}\r\n          />\r\n          <Outcome\r\n            title={\r\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\r\n                <span>Retirement Bonus</span>\r\n                <Duration dateTime={dates.retirementBonus} />\r\n              </Box>\r\n            }\r\n            cluster={clusters.retirementBonus}\r\n          />\r\n        </Stack>\r\n      </Box>\r\n      <Box flex=\"1 1 auto\" overflow={\"auto\"}>\r\n        <Box display={\"flex\"} height={\"100%\"} width={\"100%\"}>\r\n          <Layout\r\n            accountName=\"paycheck\"\r\n            variant=\"cash\"\r\n            defaultDate={DateTime.fromObject({\r\n              day: 1,\r\n              month: 4,\r\n              year: selectedYear,\r\n            })}\r\n            title=\"Income Per Paycheck\"\r\n          />\r\n          <Layout\r\n            title=\"Merit Increase\"\r\n            accountName=\"meritIncreasePct\"\r\n            variant=\"percent\"\r\n            defaultDate={dates.meritIncrease}\r\n          />\r\n          <Layout title=\"Equity Increase\" accountName=\"equityPct\" variant=\"percent\" defaultDate={dates.meritIncrease} />\r\n          <Layout title=\"Merit Bonus\" accountName=\"meritBonusPct\" variant=\"percent\" defaultDate={dates.meritBonus} />\r\n          <Layout title=\"Merit Bonus\" accountName=\"meritBonus\" variant=\"cash\" defaultDate={dates.meritBonus} />\r\n          <Layout\r\n            title=\"Company Bonus Factor\"\r\n            accountName=\"companyBonusPct\"\r\n            defaultDate={dates.companyBonus}\r\n            variant=\"percent\"\r\n          />\r\n          <Layout title=\"Company Bonus\" accountName=\"companyBonus\" defaultDate={dates.companyBonus} variant=\"cash\" />\r\n          <Layout\r\n            title=\"Retirement Bonus\"\r\n            accountName=\"retirementBonus\"\r\n            defaultDate={dates.retirementBonus}\r\n            variant=\"cash\"\r\n          />\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","import { create } from \"mutative\";\r\nimport { ProjectedWealthConfig } from \"shared/models/projected-wealth\";\r\nimport { store } from \".\";\r\n\r\nexport const setProjectedWealth = (configName: ProjectedWealthConfig, value: number) => {\r\n  store.setState((prev) => {\r\n    return create(prev, (next) => {\r\n      next.projectedWealth[configName] = value;\r\n    });\r\n  });\r\n};\r\n","import { InputAdornment, TextField } from \"@mui/material\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { useCallback, useState } from \"react\";\r\nimport { ProjectedWealth } from \"shared/models/projected-wealth\";\r\nimport { store } from \"shared/store\";\r\nimport { setProjectedWealth } from \"shared/store/set-projected-wealth\";\r\n\r\ninterface ConfigEntryProps {\r\n  configName: keyof ProjectedWealth;\r\n  label: string;\r\n  variant?: \"cash\" | \"percent\";\r\n}\r\n\r\nexport const ConfigEntry = (props: ConfigEntryProps) => {\r\n  const { configName, label, variant = \"cash\" } = props;\r\n  const [error, setError] = useState(false);\r\n  const isPercent = variant === \"percent\";\r\n\r\n  const onchange = useCallback(\r\n    (input: string) => {\r\n      let value = +input;\r\n      const isNan = Number.isNaN(value);\r\n      setError(isNan);\r\n      if (isNan) {\r\n        return;\r\n      }\r\n\r\n      if (isPercent) {\r\n        value /= 100;\r\n      }\r\n\r\n      setProjectedWealth(configName, value);\r\n    },\r\n    [configName, isPercent]\r\n  );\r\n\r\n  const value = useStore(store, (x) => x.projectedWealth[configName]);\r\n  const defaultValue = isPercent ? value * 100 : value;\r\n\r\n  return (\r\n    <TextField\r\n      error={error}\r\n      variant=\"outlined\"\r\n      InputProps={{\r\n        startAdornment: <InputAdornment position=\"start\">{isPercent ? \"%\" : \"$\"}</InputAdornment>,\r\n      }}\r\n      defaultValue={defaultValue.toFixed(isPercent ? 2 : 0)}\r\n      type=\"numeric\"\r\n      label={label}\r\n      onChange={(event) => {\r\n        onchange(event.target.value);\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import { Typography } from \"@mui/material\";\r\nimport { Stack } from \"@mui/system\";\r\nimport { ConfigEntry } from \"./config-entry\";\r\n\r\nexport const Config = () => {\r\n  return (\r\n    <Stack spacing={2}>\r\n      <Typography variant=\"h5\">Configuration</Typography>\r\n      <ConfigEntry configName=\"savingsPerMonth\" label=\"Monthly Saving Rate\" />\r\n      <ConfigEntry configName=\"retirementContributionPaycheck\" label=\"Retirement Contribution Per Paycheck\" />\r\n      <Stack direction={\"row\"} spacing={2} width={\"100%\"} sx={{ \"& > *\": { flex: 1 } }}>\r\n        <ConfigEntry configName=\"socialSecurityLimit\" label=\"Social Security Tax Limit\" />\r\n        <ConfigEntry configName=\"socialSecurityTaxRate\" label=\"Social Security Tax\" variant=\"percent\" />\r\n      </Stack>\r\n      <Stack direction={\"row\"} spacing={2} width={\"100%\"} sx={{ \"& > *\": { flex: 1 } }}>\r\n        <ConfigEntry configName=\"medicareSupplementalTaxThreshold\" label=\"Medicare Supplemental Threshold\" />\r\n        <ConfigEntry configName=\"medicareSupplementalTaxRate\" label=\"Medicare Supplemental Tax\" variant=\"percent\" />\r\n      </Stack>\r\n    </Stack>\r\n  );\r\n};\r\n","export interface Outcome {\r\n  min: number;\r\n  max: number;\r\n  avg: number;\r\n  actual?: number;\r\n}\r\n\r\nexport interface BonusOutcomes {\r\n  percent: Outcome;\r\n  cash: Outcome;\r\n}\r\n\r\nexport const minMaxAvg = (values: number[]): Outcome => {\r\n  if (values.length === 0) {\r\n    return { min: 0, max: 0, avg: 0 };\r\n  }\r\n  return values.reduce(\r\n    (acc, curr, index, arr) => {\r\n      const { min, max, avg } = acc;\r\n      return {\r\n        min: Math.min(curr, min),\r\n        max: Math.max(curr, max),\r\n        avg: index === arr.length - 1 ? (avg + curr) / arr.length : avg + curr,\r\n      };\r\n    },\r\n    { min: Infinity, max: 0, avg: 0 },\r\n  );\r\n};\r\n\r\nexport const outcomeFromSingle = (value: number): Outcome => {\r\n  return { min: value, max: value, avg: value, actual: value };\r\n};\r\n\r\nexport const actualizedOutcome = (outcome: Outcome): Outcome =>\r\n  outcome.actual ? outcomeFromSingle(outcome.actual) : outcome;\r\n\r\nexport const scaleOutcome = (outcome: Outcome, value: number): Outcome => {\r\n  return {\r\n    min: outcome.min * value,\r\n    max: outcome.max * value,\r\n    avg: outcome.avg * value,\r\n    actual: outcome.actual ? outcome.actual * value : undefined,\r\n  };\r\n};\r\nexport const AddConstantOutcome = (outcome: Outcome, value: number): Outcome => {\r\n  return {\r\n    min: outcome.min + value,\r\n    max: outcome.max + value,\r\n    avg: outcome.avg + value,\r\n    actual: outcome.actual ? outcome.actual + value : undefined,\r\n  };\r\n};\r\n\r\nexport const MultiplyOutcome = (outcomeA: Outcome, outcomeB: Outcome): Outcome => {\r\n  return {\r\n    min: outcomeA.min * outcomeB.min,\r\n    max: outcomeA.max * outcomeB.max,\r\n    avg: outcomeA.avg * outcomeB.avg,\r\n    actual: outcomeA.actual != undefined && outcomeB.actual != undefined ? outcomeA.actual * outcomeB.avg : undefined,\r\n  };\r\n};\r\n\r\nexport const AddOutcome = (...outcomes: Outcome[]): Outcome => {\r\n  const everyActualDefined = outcomes.every((x) => x.actual != undefined);\r\n  return outcomes.reduce(\r\n    (acc, curr) => {\r\n      return {\r\n        min: acc.min + curr.min,\r\n        avg: acc.avg + curr.avg,\r\n        max: acc.max + curr.max,\r\n        actual: everyActualDefined ? (acc.actual ?? 0) + (curr.actual ?? 0) : undefined,\r\n      };\r\n    },\r\n    { min: 0, max: 0, avg: 0, actual: undefined },\r\n  );\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { PayPeriod } from \"shared/utility/get-pay-periods\";\r\nimport { useProjectedPay } from \"./use-projected-pay\";\r\nimport { getPayments } from \"shared/utility/get-payments\";\r\n\r\nexport type IncomePerPeriod = {\r\n  perPayday: number;\r\n  count: number;\r\n  start: DateTime;\r\n  end: DateTime;\r\n  value: number;\r\n};\r\n\r\nexport interface BaseIncome {\r\n  totalIncome: number;\r\n  payPeriods: (PayPeriod & { value: number })[];\r\n  incomePerPeriod: IncomePerPeriod[];\r\n}\r\n\r\nexport const useBaseIncome = (startDate: DateTime, endDate: DateTime): BaseIncome => {\r\n  const pay = useProjectedPay();\r\n\r\n  return useMemo(() => {\r\n    const payPeriods = getPayments(startDate, endDate, pay);\r\n    const totalIncome = payPeriods.reduce((acc, curr) => acc + curr.value, 0);\r\n    const incomePerPeriod = payPeriods\r\n      .reduceRight((acc, curr) => {\r\n        if (acc[0]?.[0]?.value === curr.value) {\r\n          acc[0].unshift(curr);\r\n        } else {\r\n          acc.unshift([curr]);\r\n        }\r\n\r\n        return acc;\r\n      }, [] as (typeof payPeriods)[])\r\n      .reduce((acc, curr) => {\r\n        acc.push({\r\n          start: curr[0].payedOn,\r\n          end: curr[curr.length - 1].payedOn,\r\n          value: curr.reduce((acc, curr) => acc + curr.value, 0),\r\n          perPayday: curr[0].value,\r\n          count: curr.length,\r\n        });\r\n        return acc;\r\n      }, [] as IncomePerPeriod[]);\r\n\r\n    return { totalIncome, payPeriods, incomePerPeriod };\r\n  }, [startDate, endDate, pay]);\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { useDateRanges } from \"shared/hooks/use-dates\";\r\nimport { store } from \"shared/store\";\r\nimport { findSameYear } from \"shared/utility/find-same-year\";\r\nimport { BonusOutcomes, actualizedOutcome, minMaxAvg, scaleOutcome } from \"shared/utility/min-max-avg\";\r\nimport { useBaseIncome } from \"./use-base-income\";\r\n\r\nexport const useCompanyBonus = (year: number): BonusOutcomes => {\r\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\r\n  const dateRanges = useDateRanges(year);\r\n  const { totalIncome } = useBaseIncome(dateRanges.companyBonus.start, dateRanges.companyBonus.end);\r\n\r\n  return useMemo(() => {\r\n    const mostRecentBonus = findSameYear(year, timeSeries.companyBonus);\r\n    const mostRecentPercent = findSameYear(year, timeSeries.companyBonusPct);\r\n\r\n    const meritFactor = timeSeries.meritBonusPct\r\n      .filter((x) => DateTime.fromISO(x.date).year <= year)\r\n      .slice(-3)\r\n      .reduce((acc, curr) => acc + curr.value, 0);\r\n\r\n    const outcomes = minMaxAvg(timeSeries.companyBonusPct.map((x) => x.value));\r\n    const cash = scaleOutcome(outcomes, meritFactor * totalIncome);\r\n    const projectedActual = mostRecentPercent?.value ? mostRecentPercent?.value * meritFactor * totalIncome : undefined;\r\n\r\n    return {\r\n      percent: actualizedOutcome({\r\n        ...outcomes,\r\n        actual: mostRecentPercent?.value,\r\n      }),\r\n      cash: actualizedOutcome({\r\n        ...cash,\r\n        actual: mostRecentBonus?.value ?? projectedActual,\r\n      }),\r\n    };\r\n  }, [totalIncome, timeSeries.companyBonus, timeSeries.companyBonusPct, timeSeries.meritBonusPct, year]);\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { useDateRanges } from \"shared/hooks/use-dates\";\r\nimport { store } from \"shared/store\";\r\nimport { findSameYear } from \"shared/utility/find-same-year\";\r\nimport { BonusOutcomes, actualizedOutcome, minMaxAvg, scaleOutcome } from \"shared/utility/min-max-avg\";\r\nimport { useBaseIncome } from \"./use-base-income\";\r\nimport { useMostFrequentValue } from \"./use-most-frequent-value\";\r\n\r\nexport const useMeritBonus = (year: number): BonusOutcomes => {\r\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\r\n  const ranges = useDateRanges(year);\r\n  const { totalIncome } = useBaseIncome(ranges.meritBonus.start, ranges.meritBonus.end);\r\n\r\n  const bonusAmount = useMemo(() => {\r\n    return findSameYear(year, timeSeries.meritBonus)?.value;\r\n  }, [timeSeries.meritBonus, year]);\r\n\r\n  const bonusPercent = useMemo(() => {\r\n    return findSameYear(year, timeSeries.meritBonusPct)?.value;\r\n  }, [timeSeries.meritBonusPct, year]);\r\n\r\n  const frequentMeritBonusPercent = useMostFrequentValue(timeSeries.meritBonusPct);\r\n\r\n  return useMemo(() => {\r\n    const meritOutcome = minMaxAvg(\r\n      timeSeries.meritBonusPct.filter((x) => DateTime.fromISO(x.date).year <= year).map((x) => x.value)\r\n    );\r\n    meritOutcome.avg = frequentMeritBonusPercent ?? 0;\r\n\r\n    return {\r\n      percent: actualizedOutcome({ ...meritOutcome, actual: bonusPercent }),\r\n      cash: actualizedOutcome({\r\n        ...scaleOutcome(meritOutcome, totalIncome),\r\n        actual: bonusAmount ?? (bonusPercent ? totalIncome * bonusPercent : undefined),\r\n      }),\r\n    };\r\n  }, [bonusAmount, bonusPercent, frequentMeritBonusPercent, timeSeries.meritBonusPct, totalIncome, year]);\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { useMemo } from \"react\";\r\nimport { useDateRanges } from \"shared/hooks/use-dates\";\r\nimport { store } from \"shared/store\";\r\nimport { findSameYear } from \"shared/utility/find-same-year\";\r\nimport {\r\n  AddOutcome,\r\n  BonusOutcomes,\r\n  actualizedOutcome,\r\n  outcomeFromSingle,\r\n  scaleOutcome,\r\n} from \"shared/utility/min-max-avg\";\r\nimport { useBaseIncome } from \"./use-base-income\";\r\nimport { useCompanyBonus } from \"./use-company-bonus\";\r\nimport { useMeritBonus } from \"./use-merit-bonus\";\r\n\r\nconst bonusPercent = 0.15;\r\nexport const useRetirementBonus = (year: number): BonusOutcomes => {\r\n  const actual = useStore(store, (x) => findSameYear(year, x.projectedIncome.timeSeries.retirementBonus)?.value);\r\n\r\n  const dateRanges = useDateRanges(year);\r\n  const { totalIncome } = useBaseIncome(dateRanges.retirementBonus.start, dateRanges.retirementBonus.end);\r\n\r\n  const meritBonus = useMeritBonus(year);\r\n  const juneBonus = useCompanyBonus(year);\r\n\r\n  return useMemo(() => {\r\n    const eligibleIncome = outcomeFromSingle(totalIncome);\r\n    const outcome = scaleOutcome(\r\n      AddOutcome(eligibleIncome, actualizedOutcome(meritBonus.cash), actualizedOutcome(juneBonus.cash)),\r\n      bonusPercent\r\n    );\r\n    return {\r\n      cash: actualizedOutcome({ ...outcome, actual: actual ?? outcome.actual }),\r\n      percent: {\r\n        min: 0.15,\r\n        max: 0.15,\r\n        avg: 0.15,\r\n        actual: 0.15,\r\n      },\r\n    };\r\n  }, [actual, juneBonus.cash, meritBonus.cash, totalIncome]);\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { useCompanyBonus } from \"shared/hooks/use-company-bonus\";\r\nimport { useDates } from \"shared/hooks/use-dates\";\r\nimport { useMeritBonus } from \"shared/hooks/use-merit-bonus\";\r\nimport { useRetirementBonus } from \"shared/hooks/use-retirement-bonus\";\r\n\r\nexport const useFutureBonuses = () => {\r\n  const local = DateTime.local();\r\n  const year = local.year;\r\n  const dates = useDates(year);\r\n  const meritBonus = useMeritBonus(year);\r\n  const companyBonus = useCompanyBonus(year);\r\n  const retirementBonus = useRetirementBonus(year);\r\n\r\n  const bonuses = useMemo(() => {\r\n    return (\r\n      [\r\n        [dates.meritBonus, meritBonus.cash.actual ?? meritBonus.cash.avg],\r\n        [dates.companyBonus, companyBonus.cash.actual ?? companyBonus.cash.avg],\r\n        [dates.retirementBonus, retirementBonus.cash.actual ?? retirementBonus.cash.avg],\r\n      ] as [DateTime, number][]\r\n    )\r\n      .map(([payedOn, amount]) => (local < payedOn ? amount : 0))\r\n      .reduce((acc, curr) => acc + curr, 0);\r\n  }, [\r\n    dates.meritBonus,\r\n    dates.companyBonus,\r\n    dates.retirementBonus,\r\n    meritBonus.cash.actual,\r\n    meritBonus.cash.avg,\r\n    companyBonus.cash.actual,\r\n    companyBonus.cash.avg,\r\n    retirementBonus.cash.actual,\r\n    retirementBonus.cash.avg,\r\n    local,\r\n  ]);\r\n\r\n  return bonuses;\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { useBaseIncome } from \"shared/hooks/use-base-income\";\r\nimport { useCompanyBonus } from \"shared/hooks/use-company-bonus\";\r\nimport { useDateRanges, useDates } from \"shared/hooks/use-dates\";\r\nimport { useMeritBonus } from \"shared/hooks/use-merit-bonus\";\r\nimport { findNearestIdxOnOrBefore } from \"shared/utility/find-nearest-on-or-before\";\r\n\r\nexport const usePayments = () => {\r\n  const year = DateTime.local().year;\r\n  const dateRanges = useDateRanges(year);\r\n  const dates = useDates(year);\r\n  const { payPeriods } = useBaseIncome(dateRanges.base.start, dateRanges.base.end);\r\n\r\n  const merit = useMeritBonus(year);\r\n  const companyBonus = useCompanyBonus(year);\r\n\r\n  return useMemo(() => {\r\n    const cumulativePay = payPeriods.map((x) => {\r\n      return { ...x, cumulative: 0 };\r\n    });\r\n\r\n    const payBeforeMerit = findNearestIdxOnOrBefore(dates.meritBonus, cumulativePay, (x) => x.payedOn);\r\n\r\n    cumulativePay.splice(payBeforeMerit + 1, 0, {\r\n      cumulative: 0,\r\n      value: merit.cash.actual ?? merit.cash.avg,\r\n      start: dates.meritBonus,\r\n      end: dates.meritBonus,\r\n      payedOn: dates.meritBonus,\r\n    });\r\n\r\n    const payBeforeCompanyBonus = findNearestIdxOnOrBefore(dates.companyBonus, cumulativePay, (x) => x.payedOn);\r\n\r\n    cumulativePay.splice(payBeforeCompanyBonus + 1, 0, {\r\n      cumulative: 0,\r\n      value: companyBonus.cash.actual ?? companyBonus.cash.avg,\r\n      start: dates.companyBonus,\r\n      end: dates.companyBonus,\r\n      payedOn: dates.companyBonus,\r\n    });\r\n\r\n    cumulativePay.forEach((x, i, arr) => {\r\n      x.cumulative = i > 0 ? arr[i - 1].cumulative + x.value : x.value;\r\n    });\r\n\r\n    const previousPay = findNearestIdxOnOrBefore(DateTime.local(), payPeriods, (x) => x.payedOn);\r\n\r\n    const remainingPayments = payPeriods.length - previousPay;\r\n\r\n    return {\r\n      payments: cumulativePay,\r\n      nextPaymentIdx: previousPay + 1,\r\n      numRemaining: remainingPayments,\r\n      totalBasePayments: payPeriods.length,\r\n      totalPayments: cumulativePay.length,\r\n    };\r\n  }, [\r\n    companyBonus.cash.actual,\r\n    companyBonus.cash.avg,\r\n    dates.companyBonus,\r\n    dates.meritBonus,\r\n    merit.cash.actual,\r\n    merit.cash.avg,\r\n    payPeriods,\r\n  ]);\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { useMemo } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { usePayments } from \"./use-payments\";\r\n\r\nexport const useFutureMedicareTax = () => {\r\n  const { payments, nextPaymentIdx } = usePayments();\r\n  const config = useStore(store, (x) => x.projectedWealth);\r\n\r\n  return useMemo(() => {\r\n    const total =\r\n      config.medicareSupplementalTaxRate *\r\n      Math.min(0, config.medicareSupplementalTaxThreshold - (payments.at(-1)?.cumulative ?? 0));\r\n\r\n    const firstOccurrence = payments.find((x) => x.cumulative >= config.medicareSupplementalTaxThreshold)?.payedOn;\r\n\r\n    const remaining = payments\r\n      .slice(nextPaymentIdx)\r\n      .filter((x) => x.cumulative >= config.medicareSupplementalTaxThreshold)\r\n      .reduce((acc, curr) => {\r\n        return (\r\n          acc -\r\n          Math.min(curr.value, curr.cumulative - config.medicareSupplementalTaxThreshold) *\r\n            config.medicareSupplementalTaxRate\r\n        );\r\n      }, 0);\r\n\r\n    const perPaycheck = total && (payments.at(-1)?.value ?? 0) * config.medicareSupplementalTaxRate;\r\n\r\n    return {\r\n      total,\r\n      remaining,\r\n      perPaycheck,\r\n      firstOccurrence,\r\n    };\r\n  }, [config.medicareSupplementalTaxRate, config.medicareSupplementalTaxThreshold, nextPaymentIdx, payments]);\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { useMemo } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { usePayments } from \"./use-payments\";\r\n\r\nexport const useFutureRetirementContributions = () => {\r\n  const { numRemaining } = usePayments();\r\n  const retirementContribution = useStore(store, (x) => x.projectedWealth.retirementContributionPaycheck);\r\n\r\n  return useMemo(() => {\r\n    return {\r\n      remaining: numRemaining * retirementContribution,\r\n      perPaycheck: retirementContribution,\r\n    };\r\n  }, [numRemaining, retirementContribution]);\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\n\r\nexport const useFutureSavings = () => {\r\n  const config = useStore(store, (x) => x.projectedWealth);\r\n  return useMemo(() => {\r\n    const systemYear = getLocalDateTime().year;\r\n    return {\r\n      remaining:\r\n        config.savingsPerMonth *\r\n        DateTime.fromObject({\r\n          day: 31,\r\n          month: 12,\r\n          year: systemYear,\r\n        })\r\n          .endOf(\"day\")\r\n          .diffNow(\"months\").months,\r\n      perMonth: config.savingsPerMonth,\r\n    };\r\n  }, [config.savingsPerMonth]);\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { useMemo } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { usePayments } from \"./use-payments\";\r\n\r\nexport const useFutureSocialSecurity = () => {\r\n  const { payments, nextPaymentIdx } = usePayments();\r\n  const config = useStore(store, (x) => x.projectedWealth);\r\n\r\n  return useMemo(() => {\r\n    const total =\r\n      config.socialSecurityTaxRate * Math.max(0, (payments.at(-1)?.cumulative ?? 0) - config.socialSecurityLimit);\r\n    const firstOccurrence = payments.find((x) => x.cumulative >= config.socialSecurityLimit)?.payedOn;\r\n\r\n    const remaining = payments\r\n      .slice(nextPaymentIdx)\r\n      .filter((x) => x.cumulative >= config.socialSecurityLimit)\r\n      .reduce((acc, curr) => {\r\n        return acc + Math.min(curr.value, curr.cumulative - config.socialSecurityLimit) * config.socialSecurityTaxRate;\r\n      }, 0);\r\n\r\n    const perPaycheck = total && config.socialSecurityTaxRate * (payments.at(-1)?.value ?? 0);\r\n\r\n    return {\r\n      total,\r\n      remaining,\r\n      perPaycheck,\r\n      firstOccurrence,\r\n    };\r\n  }, [config.socialSecurityLimit, config.socialSecurityTaxRate, nextPaymentIdx, payments]);\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { ReactNode } from \"react\";\r\n\r\ninterface BeforeAfterProps {\r\n  dateTime?: DateTime;\r\n  before?: ReactNode;\r\n  after?: ReactNode;\r\n}\r\n\r\nexport const BeforeAfter = (props: BeforeAfterProps) => {\r\n  const { dateTime, before, after } = props;\r\n\r\n  if (!dateTime) {\r\n    return null;\r\n  }\r\n\r\n  return DateTime.local() < dateTime ? before : after;\r\n};\r\n","import { Typography } from \"@mui/material\";\r\nimport { Stack } from \"@mui/system\";\r\nimport { Value } from \"capabilities/projected-income/components/value\";\r\nimport { useFutureBonuses } from \"capabilities/projected-wealth/hooks/use-future-bonuses\";\r\nimport { useFutureMedicareTax } from \"capabilities/projected-wealth/hooks/use-future-medicare-tax\";\r\nimport { useFutureRetirementContributions } from \"capabilities/projected-wealth/hooks/use-future-retirement-contributions\";\r\nimport { useFutureSavings } from \"capabilities/projected-wealth/hooks/use-future-savings\";\r\nimport { useFutureSocialSecurity } from \"capabilities/projected-wealth/hooks/use-future-social-security\";\r\nimport { DateTime } from \"luxon\";\r\nimport { BeforeAfter } from \"shared/components/formatters/before-after\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { Duration } from \"shared/components/formatters/duration\";\r\nimport { useCompanyBonus } from \"shared/hooks/use-company-bonus\";\r\nimport { useDates } from \"shared/hooks/use-dates\";\r\nimport { useMeritBonus } from \"shared/hooks/use-merit-bonus\";\r\nimport { useRetirementBonus } from \"shared/hooks/use-retirement-bonus\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { monthDay } from \"shared/utility/format-date\";\r\n\r\nconst isFuture = (date: DateTime) => date.diffNow(\"milliseconds\").milliseconds > 0;\r\n\r\nexport const FutureEvents = () => {\r\n  const dates = useDates();\r\n  const systemYear = getLocalDateTime().year;\r\n  const savings = useFutureSavings();\r\n  const retirement = useFutureRetirementContributions();\r\n  const medicare = useFutureMedicareTax();\r\n  const socialSecurity = useFutureSocialSecurity();\r\n  const meritBonus = useMeritBonus(systemYear);\r\n  const companyBonus = useCompanyBonus(systemYear);\r\n  const retirementBonus = useRetirementBonus(systemYear);\r\n  const totalFutureBonuses = useFutureBonuses();\r\n\r\n  const total =\r\n    totalFutureBonuses + savings.remaining + retirement.remaining + socialSecurity.remaining + medicare.remaining;\r\n\r\n  return (\r\n    <>\r\n      <Typography variant=\"h5\">\r\n        {systemYear} Remaining Projected Wealth <Cash value={total} />\r\n      </Typography>\r\n      <Stack direction={\"row\"} sx={{ \"&& > *\": { minWidth: 210 } }}>\r\n        {isFuture(dates.meritBonus) && (\r\n          <Value title={\"merit bonus\"} secondaryValue={<Cash value={meritBonus.cash.actual ?? meritBonus.cash.avg} />}>\r\n            <Duration dateFormat={monthDay} variant=\"date\" dateTime={dates.meritBonus} />\r\n          </Value>\r\n        )}\r\n        {isFuture(dates.companyBonus) && (\r\n          <Value\r\n            title={\"company bonus\"}\r\n            secondaryValue={<Cash value={companyBonus.cash.actual ?? companyBonus.cash.avg} />}\r\n          >\r\n            <Duration variant=\"date\" dateFormat={monthDay} dateTime={dates.companyBonus} />\r\n          </Value>\r\n        )}\r\n        {isFuture(dates.retirementBonus) && (\r\n          <Value\r\n            title={\"retirement bonus\"}\r\n            secondaryValue={<Cash value={retirementBonus.cash.actual ?? retirementBonus.cash.avg} />}\r\n          >\r\n            <Duration dateFormat={monthDay} variant=\"date\" dateTime={dates.retirementBonus} />\r\n          </Value>\r\n        )}\r\n      </Stack>\r\n      <Stack direction={\"row\"} sx={{ \"&& > *\": { minWidth: 210 } }}>\r\n        {!!socialSecurity.total && (\r\n          <Value\r\n            title={\"social security cap\"}\r\n            secondaryValue={\r\n              <BeforeAfter\r\n                dateTime={socialSecurity.firstOccurrence}\r\n                before={<Cash tooltip=\"Remaining\" value={socialSecurity.remaining} />}\r\n                after={<Cash tooltip=\"Per Paycheck\" value={socialSecurity.perPaycheck} />}\r\n              />\r\n            }\r\n          >\r\n            <Duration dateFormat={monthDay} variant=\"date\" dateTime={socialSecurity.firstOccurrence}>\r\n              <Cash tooltip=\"Remaining\" value={socialSecurity.remaining} />\r\n            </Duration>\r\n          </Value>\r\n        )}\r\n        {!!medicare.total && (\r\n          <Value\r\n            title={\"medicare supplemental tax\"}\r\n            secondaryValue={\r\n              <BeforeAfter\r\n                dateTime={medicare.firstOccurrence}\r\n                before={<Cash tooltip=\"Total\" value={medicare.remaining} />}\r\n                after={<Cash tooltip=\"Per Paycheck\" value={medicare.perPaycheck} />}\r\n              />\r\n            }\r\n          >\r\n            <Duration dateFormat={monthDay} variant=\"date\" dateTime={medicare.firstOccurrence}>\r\n              <Cash tooltip=\"Remaining\" value={medicare.remaining} />\r\n            </Duration>\r\n          </Value>\r\n        )}\r\n      </Stack>\r\n      <Stack direction={\"row\"} sx={{ \"&& > *\": { minWidth: 210 } }}>\r\n        {!!savings.perMonth && (\r\n          <Value title={\"Expected savings\"} secondaryValue={<Cash tooltip=\"Per Month\" value={savings.perMonth} />}>\r\n            <Cash tooltip=\"Total Remaining\" value={savings.remaining} />\r\n          </Value>\r\n        )}\r\n        {!!retirement.perPaycheck && (\r\n          <Value\r\n            title={\"retirement contribution\"}\r\n            secondaryValue={<Cash tooltip=\"Per Paycheck\" value={retirement.perPaycheck} />}\r\n          >\r\n            <Cash tooltip=\"Total Remaining\" value={retirement.remaining} />\r\n          </Value>\r\n        )}\r\n      </Stack>\r\n    </>\r\n  );\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { store } from \"shared/store\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\n\r\nexport const useEarliestAccountEntry = () => {\r\n  const accounts = useStore(store, (x) => x.wealth);\r\n  return DateTime.fromMillis(\r\n    Object.values(accounts)\r\n      .map((x) => {\r\n        if (x.type === \"account\") {\r\n          return x.data[0]?.date ? DateTime.fromISO(x.data[0].date) : getLocalDateTime();\r\n        }\r\n        return getLocalDateTime();\r\n      })\r\n      .reduce((acc, curr) => Math.min(acc, curr?.toMillis() ?? Infinity), getLocalDateTime().toMillis()),\r\n  );\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { findNearestOnOrBefore } from \"shared/utility/find-nearest-on-or-before\";\r\nimport { calcEquity, calcLoanBalance } from \"shared/utility/mortgage-calc\";\r\nimport { useEarliestAccountEntry } from \"./use-earliest-account-entry\";\r\nimport { useFutureBonuses } from \"./use-future-bonuses\";\r\nimport { useFutureMedicareTax } from \"./use-future-medicare-tax\";\r\nimport { useFutureRetirementContributions } from \"./use-future-retirement-contributions\";\r\nimport { useFutureSavings } from \"./use-future-savings\";\r\nimport { useFutureSocialSecurity } from \"./use-future-social-security\";\r\n\r\nexport interface TimeSeriesWealth {\r\n  graphDate: Date;\r\n  date: DateTime;\r\n  wealth: number;\r\n  yoyCash?: number;\r\n  yoyPct?: number;\r\n}\r\n\r\nexport const useTimeSeriesWealth = () => {\r\n  const localDateTime = getLocalDateTime();\r\n  const earliest = useEarliestAccountEntry();\r\n  const accounts = useStore(store, (x) => x.wealth);\r\n  const bonuses = useFutureBonuses();\r\n  const savings = useFutureSavings();\r\n  const ssiTaxValue = useFutureSocialSecurity();\r\n  const medicareTaxValue = useFutureMedicareTax();\r\n  const retirementContribution = useFutureRetirementContributions();\r\n\r\n  const data = useMemo(() => {\r\n    if (!earliest.isValid) {\r\n      return [];\r\n    }\r\n\r\n    const futureWealth =\r\n      bonuses +\r\n      savings.remaining +\r\n      retirementContribution.remaining +\r\n      ssiTaxValue.remaining +\r\n      medicareTaxValue.remaining;\r\n\r\n    const dates = new Array(localDateTime.year + 2 - earliest.year)\r\n      .fill(earliest.year)\r\n      .map((x, i) => DateTime.fromObject({ day: 1, month: 1, year: x + i }).startOf(\"day\"));\r\n\r\n    if (!localDateTime.equals(dates[dates.length - 2])) {\r\n      dates.splice(-1, 0, localDateTime);\r\n    }\r\n\r\n    return dates\r\n      .map((date, idx, arr) => {\r\n        const isLast = idx === arr.length - 1;\r\n        const accountWealth = Object.values(accounts)\r\n          .map((x) => {\r\n            if (x.type === \"mortgage\" && x.loan) {\r\n              const houseValue = findNearestOnOrBefore(date, x.data);\r\n              const balance = calcLoanBalance(date, x.loan);\r\n              return calcEquity(x.loan.ownershipPct, houseValue?.value, balance, x.loan.principal);\r\n            } else if (x.type === \"account\") {\r\n              const entry = findNearestOnOrBefore(date, x.data);\r\n              return entry?.value ?? 0;\r\n            }\r\n            return 0;\r\n          })\r\n          .reduce((acc, curr) => acc + curr, 0);\r\n\r\n        return {\r\n          date,\r\n          graphDate: date.toJSDate(),\r\n          wealth: accountWealth + (isLast ? futureWealth : 0),\r\n        };\r\n      })\r\n      .map((x, idx, arr) => {\r\n        if (idx !== arr.length - 1) {\r\n          const benchmarkWealth = arr[idx - 1]?.wealth;\r\n          if (!benchmarkWealth) {\r\n            return x;\r\n          }\r\n          return {\r\n            ...x,\r\n            yoyCash: x.wealth - benchmarkWealth,\r\n            yoyPct: x.wealth / benchmarkWealth - 1,\r\n          };\r\n        }\r\n\r\n        const benchmarkWealth = arr[idx - 2]?.wealth;\r\n        if (!benchmarkWealth) {\r\n          return x;\r\n        }\r\n        return {\r\n          ...x,\r\n          yoyCash: x.wealth - benchmarkWealth,\r\n          yoyPct: x.wealth / benchmarkWealth - 1,\r\n        };\r\n      });\r\n  }, [\r\n    earliest.isValid,\r\n    earliest.year,\r\n    bonuses,\r\n    savings.remaining,\r\n    retirementContribution.remaining,\r\n    ssiTaxValue.remaining,\r\n    medicareTaxValue.remaining,\r\n    localDateTime,\r\n    accounts,\r\n  ]);\r\n  return data as TimeSeriesWealth[];\r\n};\r\n","import { AgCartesianChartOptions, AgLineSeriesOptions } from \"ag-charts-community\";\r\nimport { AgChartsReact } from \"ag-charts-react\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\nimport { useTimeSeriesWealth } from \"../hooks/use-times-series-wealth\";\r\n\r\nexport const WealthChart = () => {\r\n  const data = useTimeSeriesWealth();\r\n\r\n  const series = useMemo(() => {\r\n    return [\r\n      {\r\n        type: \"line\",\r\n        xKey: \"graphDate\",\r\n        yKey: \"wealth\",\r\n        yName: \"Wealth\",\r\n        tooltip: {\r\n          renderer: ({ datum, yKey, xKey }) => ({\r\n            content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCash(datum[yKey])}`,\r\n          }),\r\n        },\r\n      },\r\n      {\r\n        type: \"line\",\r\n        xKey: \"graphDate\",\r\n        yKey: \"yoyCash\",\r\n        yName: \"YoY ($)\",\r\n        tooltip: {\r\n          renderer: ({ datum, yKey, xKey }) => ({\r\n            content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCash(datum[yKey])}`,\r\n          }),\r\n        },\r\n      },\r\n    ] as AgLineSeriesOptions[];\r\n  }, []);\r\n\r\n  const options: AgCartesianChartOptions = useMemo(\r\n    () => ({\r\n      theme: \"ag-default-dark\",\r\n      title: {\r\n        text: `${data[data.length - 1].date.toFormat(shortDate)} Projected wealth ${formatCashShort(\r\n          (data[data.length - 1]?.wealth ?? 0) as number,\r\n        )}`,\r\n      },\r\n      data,\r\n      axes: [\r\n        {\r\n          type: \"time\",\r\n          position: \"bottom\",\r\n          label: {\r\n            format: \"%Y\",\r\n          },\r\n        },\r\n        {\r\n          type: \"number\",\r\n          position: \"left\",\r\n          nice: false,\r\n        },\r\n      ],\r\n      series,\r\n    }),\r\n    [data, series],\r\n  );\r\n  return <AgChartsReact options={options} />;\r\n};\r\n","import QueryStatsIcon from \"@mui/icons-material/QueryStats\";\r\nimport UpdateIcon from \"@mui/icons-material/Update\";\r\nimport { Tooltip } from \"@mui/material\";\r\nimport { Stack } from \"@mui/system\";\r\nimport { ColDef, ICellRendererParams } from \"ag-grid-community\";\r\nimport { DateTime } from \"luxon\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\nimport { TimeSeriesWealth } from \"../../hooks/use-times-series-wealth\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { Percent } from \"shared/components/formatters/percent\";\r\n\r\nexport const columnConfig: ColDef<TimeSeriesWealth>[] = [\r\n  {\r\n    headerName: \"Date\",\r\n    sort: \"desc\",\r\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\r\n    valueGetter: (x) => x.data?.date,\r\n    cellRenderer: (x: ICellRendererParams<unknown, DateTime>) => {\r\n      const systemYear = getLocalDateTime().year;\r\n      return (\r\n        <Stack direction={\"row\"} alignItems={\"center\"}>\r\n          {x.valueFormatted}&nbsp;\r\n          {x.value && x.value > getLocalDateTime() && (\r\n            <Tooltip title=\"Future Event\">\r\n              <UpdateIcon htmlColor=\"yellow\" />\r\n            </Tooltip>\r\n          )}\r\n          {x.value &&\r\n            x.value.equals(\r\n              DateTime.fromObject({\r\n                day: 1,\r\n                month: 1,\r\n                year: systemYear,\r\n              })\r\n            ) && (\r\n              <Tooltip title=\"Benchmark for current and future entries\">\r\n                <QueryStatsIcon htmlColor=\"yellow\" />\r\n              </Tooltip>\r\n            )}\r\n        </Stack>\r\n      );\r\n    },\r\n  },\r\n  {\r\n    type: \"numericColumn\",\r\n    headerName: \"Wealth\",\r\n    valueGetter: (x) => x.data?.wealth,\r\n    cellRenderer: (x: ICellRendererParams<unknown, number>) => {\r\n      return x.value && <Cash value={x.value} placement=\"left\" />;\r\n    },\r\n  },\r\n  {\r\n    type: \"numericColumn\",\r\n    headerName: \"YoY ($)\",\r\n    valueGetter: (x) => x.data?.yoyCash,\r\n    cellRenderer: (x: ICellRendererParams<unknown, number>) => {\r\n      return x.value && <Cash value={x.value} placement=\"left\" />;\r\n    },\r\n  },\r\n  {\r\n    type: \"numericColumn\",\r\n    headerName: \"YoY (%)\",\r\n    valueGetter: (x) => x.data?.yoyPct,\r\n    cellRenderer: (x: ICellRendererParams<unknown, number>) => {\r\n      return x.value && <Percent value={x.value} />;\r\n    },\r\n  },\r\n];\r\n","import { useTimeSeriesWealth } from \"capabilities/projected-wealth/hooks/use-times-series-wealth\";\r\nimport { AgGrid } from \"shared/components/ag-grid\";\r\nimport { columnConfig } from \"./colum-config\";\r\n\r\nexport const WealthTable = () => {\r\n  const data = useTimeSeriesWealth();\r\n\r\n  return (\r\n    <AgGrid\r\n      id=\"time-series-wealth\"\r\n      rowData={data}\r\n      columnDefs={columnConfig}\r\n      autoSizeStrategy={{ type: \"fitGridWidth\" }}\r\n    />\r\n  );\r\n};\r\n","import { Grid, Paper } from \"@mui/material\";\r\nimport { Config } from \"./components/config\";\r\nimport { FutureEvents } from \"./components/future-events\";\r\nimport { WealthChart } from \"./components/wealth-chart\";\r\nimport { WealthTable } from \"./components/wealth-table\";\r\n\r\nexport const ProjectedWealth = () => {\r\n  return (\r\n    <Grid container height={\"100%\"} spacing={2}>\r\n      <Grid item xs={6} height={\"50%\"}>\r\n        <WealthChart />\r\n      </Grid>\r\n      <Grid item xs={6} height={\"50%\"}>\r\n        <Paper sx={{ padding: 2, height: \"100%\" }}>\r\n          <Config />\r\n        </Paper>\r\n      </Grid>\r\n      <Grid item xs={6} height={\"50%\"}>\r\n        <WealthTable />\r\n      </Grid>\r\n      <Grid item xs={6} height={\"50%\"}>\r\n        <Paper sx={{ padding: 2, height: \"100%\" }}>\r\n          <FutureEvents />\r\n        </Paper>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import { LinearProgress } from \"@mui/material\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nexport const CountDown = (props: { timeMs: number }) => {\r\n  const { timeMs } = props;\r\n  const [time, setTime] = useState(timeMs);\r\n\r\n  useEffect(() => {\r\n    const intervalMs = 100;\r\n    const interval = setInterval(() => {\r\n      setTime((prev) => {\r\n        const remaining = prev - intervalMs;\r\n        if (remaining < 0) {\r\n          clearInterval(interval);\r\n          return 0;\r\n        }\r\n        return remaining;\r\n      });\r\n    }, 100);\r\n    return () => clearInterval(interval);\r\n  }, [props.timeMs]);\r\n\r\n  return <LinearProgress value={(time / timeMs) * 100} variant=\"determinate\" color=\"inherit\" />;\r\n};\r\n","import { Box, Button, ButtonProps, Stack } from \"@mui/material\";\r\nimport { ReactNode, useEffect, useState } from \"react\";\r\nimport { CountDown } from \"./count-down\";\r\n\r\ntype SafetyState = \"inactive\" | \"activating\" | \"active\" | \"confirmed\";\r\n\r\ninterface SafetyButtonProps {\r\n  inactiveLabel: string;\r\n  activatingLabel: string;\r\n  activeLabel: string;\r\n  confirmedLabel: string;\r\n  icon?: ReactNode;\r\n  onConfirm: () => void;\r\n}\r\n\r\nexport const SafetyButton = (props: Omit<ButtonProps, \"children\"> & SafetyButtonProps) => {\r\n  const { inactiveLabel, activatingLabel, activeLabel, confirmedLabel, onConfirm, icon, disabled, ...rest } = props;\r\n  const [safetyState, setSafetyState] = useState<SafetyState>(\"inactive\");\r\n\r\n  useEffect(() => {\r\n    if (safetyState === \"active\") {\r\n      setTimeout(() => {\r\n        setSafetyState((prev) => {\r\n          return prev === \"active\" ? \"inactive\" : prev;\r\n        });\r\n      }, 3200);\r\n    } else if (safetyState === \"activating\") {\r\n      setTimeout(() => {\r\n        setSafetyState(\"active\");\r\n      }, 1000);\r\n    } else if (safetyState === \"confirmed\") {\r\n      setTimeout(() => {\r\n        setSafetyState(\"inactive\");\r\n      }, 3200);\r\n    }\r\n  }, [safetyState]);\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        minWidth: 130,\r\n      }}\r\n    >\r\n      <Button\r\n        {...rest}\r\n        sx={{ height: \"100%\", width: \"100%\" }}\r\n        disabled={disabled || safetyState === \"activating\" || safetyState === \"confirmed\"}\r\n        size=\"small\"\r\n        onClick={() => {\r\n          safetyState === \"inactive\" && setSafetyState(\"activating\");\r\n          if (safetyState === \"active\") {\r\n            onConfirm?.();\r\n            setSafetyState(\"confirmed\");\r\n          }\r\n        }}\r\n      >\r\n        <Stack>\r\n          <Stack direction={\"row\"}>\r\n            {icon}\r\n            {safetyState === \"inactive\" && inactiveLabel}\r\n            {safetyState === \"activating\" && activatingLabel}\r\n            {safetyState === \"active\" && activeLabel}\r\n            {safetyState === \"confirmed\" && confirmedLabel}\r\n          </Stack>\r\n          {safetyState === \"active\" && <CountDown timeMs={2800} />}\r\n          {safetyState === \"activating\" && <CountDown timeMs={500} />}\r\n        </Stack>\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { useCallback } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\n\r\nexport const downloadJson = <T,>(filename: string, storeData: T) => {\r\n  const data = JSON.stringify(storeData, null, 2);\r\n  const link = document.createElement(\"a\");\r\n  link.download = filename;\r\n  const blob = new Blob([data], { type: \"application/json\" });\r\n  link.href = window.URL.createObjectURL(blob);\r\n  link.click();\r\n};\r\n\r\nexport const useExport = () => {\r\n  const storeData = useStore(store);\r\n  const onExport = useCallback(() => {\r\n    downloadJson(`wealth-tracker-${getLocalDateTime().toFormat(shortDate)}.json`, storeData);\r\n  }, [storeData]);\r\n\r\n  return onExport;\r\n};\r\n","import { useCallback } from \"react\";\r\nimport { storeValidator } from \"shared/models/store\";\r\nimport { store } from \"shared/store\";\r\n\r\nfunction selectFile(contentType: string) {\r\n  return new Promise<File>((resolve) => {\r\n    const input = document.createElement(\"input\");\r\n    input.type = \"file\";\r\n    input.multiple = false;\r\n    input.accept = contentType;\r\n\r\n    input.onchange = () => {\r\n      const files = Array.from(input.files ?? []);\r\n      resolve(files[0]);\r\n    };\r\n\r\n    input.click();\r\n  });\r\n}\r\n\r\nexport const useImport = () => {\r\n  return useCallback(() => {\r\n    return new Promise<void>((resolve, reject) => {\r\n      selectFile(\"application/json\").then((file) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = (readerEvent) => {\r\n          const content = readerEvent.target?.result?.toString();\r\n          if (content) {\r\n            const data = JSON.parse(window.atob(content.split(\",\")[1]));\r\n            const validation = storeValidator.safeParse(data);\r\n            validation.success && store.setState(() => data);\r\n            validation.success ? resolve() : reject(validation.error);\r\n          }\r\n        };\r\n      });\r\n    });\r\n  }, []);\r\n};\r\n","import { useMemo } from \"react\";\r\nimport { storeValidator } from \"shared/models/store\";\r\n\r\nexport const useStoreDataError = () => {\r\n  const invalidData = localStorage.getItem(\"store-invalid\");\r\n  return useMemo(() => {\r\n    if (!invalidData) {\r\n      return { hadError: false };\r\n    }\r\n    const jsonInvalidData = JSON.parse(invalidData);\r\n    const validated = storeValidator.safeParse(jsonInvalidData);\r\n    return {\r\n      hadError: !!invalidData,\r\n      invalidData: jsonInvalidData,\r\n      parseError: invalidData && !validated.success ? validated.error : undefined,\r\n      resetError: () => {\r\n        localStorage.removeItem(\"store-invalid\");\r\n      },\r\n    };\r\n  }, [invalidData]);\r\n};\r\n","import { Box, Table, TableBody, TableCell, TableHead, TableRow } from \"@mui/material\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport DialogContentText from \"@mui/material/DialogContentText\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\nimport { ReactNode } from \"react\";\r\nimport { ZodError } from \"zod\";\r\n\r\ninterface InvalidDataDialogProps {\r\n  open?: boolean;\r\n  error?: ZodError;\r\n  children?: ReactNode;\r\n}\r\n\r\nexport default function InvalidDataDialog(props: InvalidDataDialogProps) {\r\n  const { open, error, children } = props;\r\n\r\n  return (\r\n    <>\r\n      <Dialog open={!!open}>\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Error Loading Data\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            <Box maxHeight={500} overflow={\"auto\"}>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Error Message</TableCell>\r\n                    <TableCell>Path</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {error?.issues.map((x, idx) => {\r\n                    return (\r\n                      <TableRow key={idx}>\r\n                        <TableCell>{x.message}</TableCell>\r\n                        <TableCell>{x.path.join(\".\")}</TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                </TableBody>\r\n              </Table>\r\n            </Box>\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>{children}</DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n}\r\n","import DeleteForever from \"@mui/icons-material/DeleteForever\";\r\nimport { Box, Button, Stack, Tab, Tabs } from \"@mui/material\";\r\nimport { NetWealth } from \"capabilities/net-wealth\";\r\nimport { ProjectedIncome } from \"capabilities/projected-income\";\r\nimport { ProjectedWealth } from \"capabilities/projected-wealth\";\r\nimport { useState } from \"react\";\r\nimport { SafetyButton } from \"shared/components/safety-button\";\r\nimport { downloadJson, useExport } from \"shared/hooks/use-export\";\r\nimport { useImport } from \"shared/hooks/use-import\";\r\nimport { useStoreDataError } from \"shared/hooks/use-store-data-error\";\r\nimport { resetStore } from \"shared/store\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\nimport InvalidDataDialog from \"./invalid-data-dialog\";\r\n\r\nexport const App = () => {\r\n  const [tab, setTab] = useState<string>(\"projected-income\");\r\n  const onExport = useExport();\r\n  const onImport = useImport();\r\n  const { hadError, parseError, resetError, invalidData } = useStoreDataError();\r\n  const [error, setError] = useState(parseError);\r\n  const [isOpen, setIsOpen] = useState(hadError);\r\n\r\n  return (\r\n    <>\r\n      <InvalidDataDialog open={isOpen} error={error}>\r\n        {hadError && (\r\n          <>\r\n            <Button\r\n              color=\"error\"\r\n              onClick={() => {\r\n                setIsOpen(false);\r\n                resetError?.();\r\n                resetStore();\r\n              }}\r\n            >\r\n              Reset\r\n            </Button>\r\n            <Button\r\n              onClick={() => {\r\n                downloadJson(`invalid-data-wealth-tracker-${getLocalDateTime().toFormat(shortDate)}.json`, invalidData);\r\n              }}\r\n            >\r\n              Download Data\r\n            </Button>\r\n\r\n            <Button\r\n              onClick={() => {\r\n                setIsOpen(false);\r\n                resetError?.();\r\n              }}\r\n            >\r\n              Ignore\r\n            </Button>\r\n          </>\r\n        )}\r\n        {!hadError && (\r\n          <Button\r\n            onClick={() => {\r\n              setIsOpen(false);\r\n            }}\r\n          >\r\n            Cancel\r\n          </Button>\r\n        )}\r\n      </InvalidDataDialog>\r\n      <Stack direction=\"row\">\r\n        <Tabs value={tab} onChange={(_, value) => setTab(value)}>\r\n          <Tab value=\"wealth\" label=\"Total Wealth\" />\r\n          <Tab value=\"projected-income\" label=\"Projected Income\" />\r\n          <Tab value=\"projected-wealth\" label=\"Projected Wealth\" />\r\n        </Tabs>\r\n        <Box marginLeft={\"auto\"} gap={2} display={\"flex\"}>\r\n          <Button\r\n            onClick={() =>\r\n              onImport().catch((err) => {\r\n                setIsOpen(true);\r\n                setError(err);\r\n              })\r\n            }\r\n          >\r\n            Import\r\n          </Button>\r\n          <Button onClick={onExport}>Export</Button>\r\n          <SafetyButton\r\n            onConfirm={resetStore}\r\n            inactiveLabel=\"Reset\"\r\n            activatingLabel=\"Activating\"\r\n            activeLabel=\"Confirm\"\r\n            confirmedLabel=\"confirmed\"\r\n            color=\"error\"\r\n            icon={<DeleteForever />}\r\n          />\r\n        </Box>\r\n      </Stack>\r\n      <Box padding={2} height={\"95%\"} width={\"100%\"}>\r\n        {tab === \"wealth\" && <NetWealth />}\r\n        {tab === \"projected-income\" && <ProjectedIncome />}\r\n        {tab === \"projected-wealth\" && <ProjectedWealth />}\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n","import { CssBaseline, ThemeProvider, createTheme } from \"@mui/material\";\r\nimport { LocalizationProvider } from \"@mui/x-date-pickers\";\r\nimport { AdapterLuxon } from \"@mui/x-date-pickers/AdapterLuxon\";\r\nimport \"ag-grid-community/styles/ag-grid.css\";\r\nimport \"ag-grid-community/styles/ag-theme-quartz.css\";\r\nimport { App } from \"app/app.tsx\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport { ErrorBoundary } from \"react-error-boundary\";\r\nimport \"./index.css\";\r\n\r\nconst darkTheme = createTheme({\r\n  palette: {\r\n    mode: \"dark\",\r\n  },\r\n});\r\n\r\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\r\n  <React.StrictMode>\r\n    <ErrorBoundary\r\n      fallbackRender={(props) => {\r\n        return (\r\n          <>\r\n            <div style={{ backgroundColor: \"#FFF\" }}>{props.error.message}</div>\r\n            <div style={{ backgroundColor: \"#FFF\" }}>{props.error.stackTrace}</div>\r\n          </>\r\n        );\r\n      }}\r\n    >\r\n      <LocalizationProvider dateAdapter={AdapterLuxon}>\r\n        <ThemeProvider theme={darkTheme}>\r\n          <CssBaseline />\r\n          <App />\r\n        </ThemeProvider>\r\n      </LocalizationProvider>\r\n    </ErrorBoundary>\r\n  </React.StrictMode>,\r\n);\r\n"],"names":["sortByDate","select","direction","a","b","toMillis","accountDataValidator","z","object","date","string","value","number","id","accountValidator","type","literal","data","array","loanValidator","principal","ratePct","paymentsPerYear","payment","firstPaymentDate","ownershipPct","mortgageValidator","loan","optional","wealth","record","union","projectedIncome","timeSeries","paycheck","meritIncreasePct","equityPct","meritBonusPct","meritBonus","companyBonusPct","companyBonus","retirementBonus","projectedWealth","socialSecurityLimit","socialSecurityTaxRate","medicareSupplementalTaxThreshold","medicareSupplementalTaxRate","savingsPerMonth","retirementContributionPaycheck","getDefaultStore","storeValidator","createStore","validator","defaultValue","key","invalidData","localData","localStorage","getItem","JSON","parse","safeParse","success","log","error","setItem","stringify","store","CreateStore","subscribe","current","state","AddAccountEntry","accountName","amount","setState","create","prev","next","push","startOf","toString","uuid","sort","DateTime","fromISO","x","addProjectedIncome","concat","removeAccount","removeAccountEntry","idxToRemove","findIndex","splice","removeProjectedIncome","resetStore","setLoan","updateAccountDate","account","idx","toISO","updateAccountName","currentAccountName","newAccountName","updateAccountValue","updateProjectedIncome","NewAccount","forwardRef","props","ref","open","setOpen","useState","nameRef","useRef","setError","accountType","setAccountType","undefined","marginLeft","target","children","AgGrid","rest","height","getLocalDateTime","local","shortDate","monthDay","DeleteAccount","padding","width","RenameAccount","nextAccountName","setNextAccountName","event","formatCashShort","Intl","NumberFormat","style","currency","notation","maximumFractionDigits","format","formatCash","Cash","fallback","disableTooltip","compact","tooltip","placement","formatted","useMemo","join","createAccountColumnConfig","headerName","valueFormatter","toFormat","valueGetter","cellEditor","editable","valueSetter","fromJSDate","newValue","isValid","cellRenderer","cellStyle","display","sortable","colId","DeleteForeverIcon","useMissingYears","years","Object","entries","groupBy","year","map","find","janFirst","fromObject","day","month","diff","days","lookup","fromEntries","missing","i","length","AccountTab","useStore","setDate","inputRef","missingYears","hasSameDate","hasSame","onAddEntry","accountColumnConfig","color","startAdornment","findNearestOnOrBefore","findNearestIdxOnOrBefore","selector","getGraphDates","accounts","Set","flatMap","calcLoanBalance","rate","monthlyPayment","annualizedRate","periods","months","totalRate","balance","calcEquity","houseValue","loanBalance","AddEntry","Stack","reduce","acc","curr","convertPct","min","datetime","offset","AddLoan","textField","parsed","issues","path","mortgageColumnConfig","toFixed","equity","MortgageTab","allAccounts","mortgageData","values","AccountTabs","firstAccount","keys","setAccount","useEffect","_","getMortgageValue","mortgage","entry","getAccountValue","getGraphValue","useGraphData","dates","graphData","toJSDate","total","forEach","arr","firstNonZero","slice","WealthChart","series","stacked","xKey","yKey","yName","renderer","datum","content","toISODate","options","theme","title","text","axes","position","label","NetWealth","Duration","dateTime","variant","dateFormat","countDownStr","diffNow","tooltipStr","countDownColor","useDates","meritIncrease","useDateRanges","base","start","end","endOf","formatPercent","getColor","probability","Percent","Box","updateProjectedIncomeDate","valueFormatted","UpdateIcon","DataEntry","defaultDate","setAmount","console","paddingTop","flex","Layout","flexShrink","marginBottom","CashRange","max","showRange","minFormatted","maxFormatted","PercentRange","Value","secondaryValue","tertiaryValue","className","minWidth","flexDirection","justifyContent","alignItems","gap","Outcome","cluster","border","borderRadius","paddingBottom","paddingLeft","findSameYear","useMostFrequentValue","valueByDateRange","index","plus","minus","systemYear","useProjectedPay","baseIncome","meritPct","payPerPeriod","mostRecentPay","startDate","multiplier","unshift","Math","round","startIdx","aPayday","DateRangesOverlap","getPayPeriods","anyPayday","startPayDay","weeks","numPayDays","payedOn","filter","getPayments","endDate","pay","payPeriods","sum","payPeriod","businessDays","differenceInBusinessDays","milliseconds","useMeritPairs","meritBonusPctPair","useMeritSequence","meritPairs","at","yearsToGenerate","meritSequence","merit","incomeByRange","range","useScenarios","dateRanges","emptyMeritSequence","equityIncreasePct","lastThreeMeritBonus","payments","retirementBonusPct","companyBonusFactor","uniqueCompanyBonusPcts","basePayAndMeritScenarios","initial","merits","prior","set","actualMeritBonusPcts","fakeMerit","lastMerit","totals","y","aprToApr","basePay","totalPay","clusterTitle","clusters","ckmeans","useClusters","scenarios","IncomePerPeriodTooltip","incomePerPeriod","perPayday","count","ArrowForwardIcon","ProjectedIncome","selectedYear","setSelectedYear","oldestYear","first","paychecks","reduceRight","marginRight","sx","maxWidth","setProjectedWealth","configName","ConfigEntry","isPercent","onchange","useCallback","input","isNan","Number","isNaN","Config","minMaxAvg","avg","Infinity","outcomeFromSingle","actual","actualizedOutcome","outcome","scaleOutcome","AddOutcome","outcomes","everyActualDefined","every","useBaseIncome","totalIncome","useCompanyBonus","mostRecentBonus","mostRecentPercent","meritFactor","cash","projectedActual","percent","useMeritBonus","ranges","bonusAmount","bonusPercent","frequentMeritBonusPercent","meritOutcome","useRetirementBonus","juneBonus","eligibleIncome","useFutureBonuses","bonuses","usePayments","cumulativePay","cumulative","payBeforeMerit","payBeforeCompanyBonus","previousPay","remainingPayments","nextPaymentIdx","numRemaining","totalBasePayments","totalPayments","useFutureMedicareTax","config","firstOccurrence","remaining","perPaycheck","useFutureRetirementContributions","retirementContribution","useFutureSavings","perMonth","useFutureSocialSecurity","BeforeAfter","before","after","isFuture","FutureEvents","savings","retirement","medicare","socialSecurity","useEarliestAccountEntry","fromMillis","useTimeSeriesWealth","localDateTime","earliest","ssiTaxValue","medicareTaxValue","futureWealth","Array","fill","equals","isLast","accountWealth","graphDate","benchmarkWealth","yoyCash","yoyPct","nice","columnConfig","QueryStatsIcon","WealthTable","ProjectedWealth","Grid","CountDown","timeMs","time","setTime","interval","setInterval","intervalMs","clearInterval","SafetyButton","inactiveLabel","activatingLabel","activeLabel","confirmedLabel","onConfirm","icon","disabled","safetyState","setSafetyState","setTimeout","downloadJson","filename","storeData","link","document","createElement","download","blob","Blob","href","window","URL","createObjectURL","click","useExport","onExport","selectFile","contentType","Promise","multiple","accept","files","from","useImport","resolve","reject","then","reader","FileReader","readAsDataURL","file","onload","readerEvent","result","atob","split","validation","useStoreDataError","hadError","jsonInvalidData","validated","parseError","resetError","removeItem","InvalidDataDialog","message","App","tab","setTab","onImport","isOpen","setIsOpen","catch","err","DeleteForever","darkTheme","createTheme","palette","mode","ReactDOM","createRoot","getElementById","render","backgroundColor","stackTrace","AdapterLuxon"],"mappings":"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"}