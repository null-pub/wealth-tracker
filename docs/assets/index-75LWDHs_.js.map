{"version":3,"file":"index-75LWDHs_.js","sources":["../../src/shared/utility/sort-by-date.ts","../../src/shared/models/store/version-0/account-data.ts","../../src/shared/models/store/version-0/account.ts","../../src/shared/models/store/version-0/loan.ts","../../src/shared/models/store/version-0/mortgage.ts","../../src/shared/models/store/version-0/net-wealth.ts","../../src/shared/models/store/version-0/projected-income.ts","../../src/shared/models/store/current/projected-wealth.ts","../../src/shared/models/store/version-0/projected-wealth.ts","../../src/shared/models/store/version-1/store.ts","../../src/shared/models/store/current/store.ts","../../src/shared/models/store/current/get-default.ts","../../src/shared/models/store/version-0/store.ts","../../src/shared/store/migrations.ts","../../src/shared/store/store.ts","../../src/shared/store/add-account-entry.ts","../../src/shared/store/add-projected-income.ts","../../src/shared/store/remove-account.ts","../../src/shared/store/remove-account-entry.ts","../../src/shared/store/remove-projected-income.ts","../../src/shared/store/reset-store.ts","../../src/shared/store/set-loan.ts","../../src/shared/store/update-account-date.ts","../../src/shared/store/update-account-name.ts","../../src/shared/store/update-account-value.ts","../../src/shared/store/update-projected-income.ts","../../src/capabilities/net-wealth/components/new-account/new-account.tsx","../../src/shared/components/ag-grid/ag-grid.tsx","../../src/shared/utility/current-date.ts","../../src/shared/utility/format-date.ts","../../src/capabilities/net-wealth/components/tab-types/components/delete-account.tsx","../../src/capabilities/net-wealth/components/tab-types/components/update-account.tsx","../../src/shared/utility/format-cash.ts","../../src/shared/components/formatters/cash.tsx","../../src/capabilities/net-wealth/components/tab-types/account/column-config.tsx","../../src/capabilities/net-wealth/components/tab-types/account/hooks/useMissingYears.ts","../../src/capabilities/net-wealth/components/tab-types/account/account.tsx","../../src/shared/utility/find-nearest-on-or-before.ts","../../src/shared/utility/get-graph-dates.ts","../../src/shared/utility/mortgage-calc.ts","../../src/capabilities/net-wealth/components/tab-types/mortgage/add-entry.tsx","../../src/shared/utility/group-by.ts","../../src/capabilities/net-wealth/components/tab-types/mortgage/add-loan.tsx","../../src/capabilities/net-wealth/components/tab-types/mortgage/column-config.tsx","../../src/capabilities/net-wealth/components/tab-types/mortgage/mortgage.tsx","../../src/capabilities/net-wealth/components/account-tabs/account-tabs.tsx","../../src/shared/utility/get-graph-value.ts","../../src/capabilities/net-wealth/components/wealth-chart/use-graph-data.ts","../../src/capabilities/net-wealth/components/wealth-chart/wealth-chart.tsx","../../src/capabilities/net-wealth/net-wealth.tsx","../../src/shared/components/formatters/duration.tsx","../../src/shared/utility/find-same-year.ts","../../src/shared/hooks/use-dates.ts","../../src/shared/utility/format-percent.ts","../../src/shared/components/formatters/percent.tsx","../../src/shared/store/update-projected-income-date.ts","../../src/capabilities/projected-income/components/data-entry/column-config.tsx","../../src/capabilities/projected-income/components/data-entry/data-entry.tsx","../../src/shared/store/scenario-store.ts","../../src/capabilities/projected-income/hooks/use-gradient.ts","../../src/capabilities/projected-income/components/value.tsx","../../src/capabilities/projected-income/components/income-per-period.tsx","../../src/capabilities/projected-income/hooks/use-has-merit-pairs.ts","../../src/shared/components/card.tsx","../../src/shared/components/formatters/cash-range.tsx","../../src/shared/components/formatters/percent-range.tsx","../../src/shared/components/formatters/cluster-value.tsx","../../src/capabilities/projected-income/projected-income.tsx","../../src/capabilities/projected-wealth/hooks/use-most-frequent-value.ts","../../src/shared/utility/get-values-by-date-range.ts","../../src/capabilities/projected-wealth/hooks/use-projected-pay.ts","../../src/shared/utility/a-payday.ts","../../src/shared/utility/date-ranges-overlap.ts","../../src/shared/utility/get-pay-periods.ts","../../src/shared/utility/get-payments.ts","../../src/capabilities/projected-wealth/hooks/use-base-income.ts","../../src/shared/utility/min-max-avg.ts","../../src/capabilities/projected-wealth/hooks/use-company-bonus.ts","../../src/capabilities/projected-wealth/hooks/use-merit-bonus.ts","../../src/capabilities/projected-wealth/hooks/use-payments.ts","../../src/capabilities/projected-wealth/hooks/use-future-medicare-tax.ts","../../src/capabilities/projected-wealth/hooks/use-future-retirement-contributions.ts","../../src/capabilities/projected-wealth/hooks/use-future-savings.ts","../../src/capabilities/projected-wealth/hooks/use-future-social-security.ts","../../src/shared/components/formatters/before-after.tsx","../../src/shared/utility/cluster-helpers.ts","../../src/capabilities/projected-wealth/components/future-events/future-events.tsx","../../src/capabilities/projected-wealth/hooks/use-earliest-account-entry.ts","../../src/capabilities/projected-wealth/hooks/use-retirement-bonus.ts","../../src/capabilities/projected-wealth/hooks/use-future-bonuses.ts","../../src/capabilities/projected-wealth/hooks/use-times-series-wealth.ts","../../src/capabilities/projected-wealth/components/wealth-chart.tsx","../../src/capabilities/projected-wealth/components/wealth-table/colum-config.tsx","../../src/capabilities/projected-wealth/components/wealth-table/wealth-table.tsx","../../src/capabilities/projected-wealth/projected-wealth.tsx","../../src/shared/components/safety-button/count-down.tsx","../../src/shared/components/safety-button/safety-button.tsx","../../src/shared/hooks/use-export.tsx","../../src/shared/hooks/use-import.tsx","../../src/shared/hooks/use-store-data-error.ts","../../src/app/invalid-data-dialog.tsx","../../src/shared/store/set-projected-wealth.ts","../../src/app/config/config-entry.tsx","../../src/app/config/config.tsx","../../src/app/app.tsx","../../src/shared/web-worker/merit-sequence.ts","../../src/shared/web-worker/entry.ts","../../src/main.tsx"],"sourcesContent":["import { DateTime } from \"luxon\";\r\n\r\nexport const sortByDate =\r\n  <T>(select: (data: T) => DateTime, direction: \"asc\" | \"desc\") =>\r\n  (a: T, b: T) =>\r\n    direction === \"asc\" ? select(a).toMillis() - select(b).toMillis() : select(b).toMillis() - select(a).toMillis();\r\n","import { z } from \"zod\";\r\n\r\nexport const accountDataValidator = z.object({\r\n  date: z.string(),\r\n  value: z.number(),\r\n  id: z.string(),\r\n});\r\n\r\nexport type AccountData = z.infer<typeof accountDataValidator>;\r\n","import { z } from \"zod\";\r\nimport { accountDataValidator } from \"./account-data\";\r\n\r\nexport const accountValidator = z.object({\r\n  type: z.literal(\"account\"),\r\n  data: z.array(accountDataValidator),\r\n});\r\n\r\nexport type Account = z.infer<typeof accountValidator>;\r\n","import { z } from \"zod\";\r\n\r\nexport const loanValidator = z.object({\r\n  principal: z.number(),\r\n  ratePct: z.number(),\r\n  paymentsPerYear: z.number(),\r\n  payment: z.number(),\r\n  firstPaymentDate: z.string(),\r\n  ownershipPct: z.number(),\r\n});\r\n\r\nexport type Loan = z.infer<typeof loanValidator>;\r\n","import { z } from \"zod\";\r\nimport { accountDataValidator } from \"./account-data\";\r\nimport { loanValidator } from \"./loan\";\r\n\r\nexport const mortgageValidator = z.object({\r\n  type: z.literal(\"mortgage\"),\r\n  loan: loanValidator.optional(),\r\n  data: z.array(accountDataValidator),\r\n});\r\n\r\nexport type Mortgage = z.infer<typeof mortgageValidator>;\r\n","import { z } from \"zod\";\r\nimport { accountValidator } from \"./account\";\r\nimport { mortgageValidator } from \"./mortgage\";\r\n\r\nexport const wealth = z.record(z.union([accountValidator, mortgageValidator]));\r\n\r\nexport type Wealth = z.infer<typeof wealth>;\r\n","import { z } from \"zod\";\r\nimport { accountDataValidator } from \"./account-data\";\r\n\r\nexport const projectedIncome = z.object({\r\n  timeSeries: z.object({\r\n    paycheck: z.array(accountDataValidator),\r\n    meritIncreasePct: z.array(accountDataValidator),\r\n    equityPct: z.array(accountDataValidator),\r\n    meritBonusPct: z.array(accountDataValidator),\r\n    meritBonus: z.array(accountDataValidator),\r\n    companyBonusPct: z.array(accountDataValidator),\r\n    companyBonus: z.array(accountDataValidator),\r\n    retirementBonus: z.array(accountDataValidator),\r\n  }),\r\n});\r\n\r\nexport type ProjectedIncome = z.infer<typeof projectedIncome>;\r\nexport type TimeSeries = keyof ProjectedIncome[\"timeSeries\"];\r\n","import { z } from \"zod\";\r\n\r\nexport const projectedWealth = z.object({\r\n  socialSecurityLimit: z.number(),\r\n  socialSecurityTaxRate: z.number(),\r\n  medicareSupplementalTaxThreshold: z.number(),\r\n  medicareSupplementalTaxRate: z.number(),\r\n  savingsPerMonth: z.number(),\r\n  retirementContributionPaycheck: z.number(),\r\n  bonusWitholdingsRate: z.number(),\r\n});\r\n\r\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\r\nexport type ProjectedWealthKeys = keyof ProjectedWealth;\r\n","import { z } from \"zod\";\r\n\r\nexport const projectedWealth = z.object({\r\n  socialSecurityLimit: z.number(),\r\n  socialSecurityTaxRate: z.number(),\r\n  medicareSupplementalTaxThreshold: z.number(),\r\n  medicareSupplementalTaxRate: z.number(),\r\n  savingsPerMonth: z.number(),\r\n  retirementContributionPaycheck: z.number(),\r\n});\r\n\r\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\r\nexport type ProjectedWealthKeys = keyof ProjectedWealth;\r\n","import { z } from \"zod\";\r\nimport { wealth } from \"../version-0/net-wealth\";\r\nimport { projectedIncome } from \"../version-0/projected-income\";\r\nimport { projectedWealth } from \"../version-0/projected-wealth\";\r\n\r\nexport const storeValidator = z.object({\r\n  version: z.literal(1),\r\n  wealth: wealth,\r\n  projectedIncome: projectedIncome,\r\n  projectedWealth: projectedWealth,\r\n});\r\n\r\nexport type Store = z.infer<typeof storeValidator>;\r\n","import { z } from \"zod\";\r\nimport { projectedIncome, wealth } from \"../version-1\";\r\nimport { projectedWealth } from \"./projected-wealth\";\r\n\r\nexport const storeValidator = z.object({\r\n  version: z.literal(2),\r\n  wealth: wealth,\r\n  projectedIncome: projectedIncome,\r\n  projectedWealth: projectedWealth,\r\n});\r\n\r\nexport type Store = z.infer<typeof storeValidator>;\r\n","import { Store } from \"./store\";\r\n\r\nexport const getDefaultStore = (): Store => ({\r\n  version: 2,\r\n  projectedIncome: {\r\n    timeSeries: {\r\n      paycheck: [],\r\n      meritBonusPct: [],\r\n      companyBonusPct: [\r\n        {\r\n          date: \"2020-06-15T00:00:00.000-07:00\",\r\n          value: 0.182,\r\n          id: \"a52883a7-008b-4b5d-83f7-48bb72a90f27\",\r\n        },\r\n        {\r\n          date: \"2021-06-15T00:00:00.000-07:00\",\r\n          value: 0.254,\r\n          id: \"ec5a9913-d2ea-45cf-bbe4-4a28bc3a02eb\",\r\n        },\r\n        {\r\n          date: \"2022-06-15T00:00:00.000-07:00\",\r\n          value: 0.272,\r\n          id: \"45f44fc7-544a-4652-87fa-49d70eaa412d\",\r\n        },\r\n        {\r\n          date: \"2023-06-15T00:00:00.000-07:00\",\r\n          value: 0.168,\r\n          id: \"97af5146-6a4d-466d-8b9e-96552fc70639\",\r\n        },\r\n      ],\r\n      meritBonus: [],\r\n      companyBonus: [],\r\n      retirementBonus: [],\r\n      equityPct: [],\r\n      meritIncreasePct: [],\r\n    },\r\n  },\r\n  wealth: {},\r\n  projectedWealth: {\r\n    medicareSupplementalTaxThreshold: 200_000,\r\n    socialSecurityLimit: 168_600,\r\n    socialSecurityTaxRate: 0.062,\r\n    medicareSupplementalTaxRate: 0.009,\r\n    savingsPerMonth: 0,\r\n    retirementContributionPaycheck: 0,\r\n    bonusWitholdingsRate: 0,\r\n  },\r\n});\r\n","import { projectedIncome } from \"./projected-income\";\r\nimport { projectedWealth } from \"./projected-wealth\";\r\nimport { z } from \"zod\";\r\nimport { wealth } from \"./net-wealth\";\r\n\r\nexport const storeValidator = z.object({\r\n  wealth: wealth,\r\n  projectedIncome: projectedIncome,\r\n  projectedWealth: projectedWealth,\r\n});\r\n\r\nexport type Store = z.infer<typeof storeValidator>;\r\n","import { Store, storeValidator } from \"shared/models/store/current\";\r\nimport { storeValidator as storeV0Validator } from \"shared/models/store/version-0\";\r\nimport { Store as StoreV1, storeValidator as storeV1Validator } from \"shared/models/store/version-1\";\r\n\r\nexport const migration = (data: unknown) => {\r\n  if (data === null || data === undefined) {\r\n    throw new Error(\"parsed data is null or undefined\");\r\n  } else if (typeof data !== \"object\") {\r\n    throw new Error(\"Parsed data is not an object\");\r\n  }\r\n\r\n  if (!(\"version\" in data)) {\r\n    storeV0Validator.parse(data);\r\n    (data as StoreV1).version = 1;\r\n  }\r\n\r\n  if (\"version\" in data) {\r\n    if (data.version === 1) {\r\n      storeV1Validator.parse(data);\r\n      (data as Store).version = 2;\r\n      (data as Store).projectedWealth.bonusWitholdingsRate = 0;\r\n    }\r\n  }\r\n\r\n  return storeValidator.parse(data);\r\n};\r\n","import { Store as CreateStore } from \"@tanstack/store\";\r\nimport { ZodSchema } from \"zod\";\r\nimport { Store, getDefaultStore, storeValidator } from \"../models/store/current\";\r\nimport { migration } from \"./migrations\";\r\n\r\nconst createStore = <T extends object>(validator: ZodSchema, defaultValue: T) => {\r\n  const key = \"store\";\r\n  const invalidData = \"store-invalid\";\r\n  const localData = localStorage.getItem(key);\r\n  const data = localData ? JSON.parse(localData) : defaultValue;\r\n  const parse = validator.safeParse(data);\r\n\r\n  if (!parse.success) {\r\n    try {\r\n      migration(data);\r\n      localStorage.setItem(key, JSON.stringify(data));\r\n    } catch (err) {\r\n      console.log(\"error\", err);\r\n      console.log(\"invalid data\", data);\r\n      localStorage.setItem(invalidData, JSON.stringify(data));\r\n      localStorage.setItem(key, JSON.stringify(defaultValue));\r\n    }\r\n  }\r\n\r\n  const store = new CreateStore<T>(data);\r\n  store.subscribe(() => {\r\n    const current = localStorage.getItem(key);\r\n    current && localStorage.setItem(`${key}-previous`, current);\r\n    localStorage.setItem(key, JSON.stringify(store.state));\r\n  });\r\n\r\n  return store;\r\n};\r\n\r\nexport const store = createStore<Store>(storeValidator, getDefaultStore());\r\n","import { DateTime } from \"luxon\";\r\nimport { create } from \"mutative\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { Account } from \"shared/models/store/current\";\r\nimport { sortByDate } from \"../utility/sort-by-date\";\r\nimport { store } from \"./store\";\r\n\r\nexport const AddAccountEntry = (accountName: string, date: DateTime<true>, amount: number) => {\r\n  store.setState((prev) => {\r\n    return create(prev, (next) => {\r\n      (next.wealth[accountName] as Account).data.push({\r\n        date: date.startOf(\"day\").toString(),\r\n        value: amount,\r\n        id: uuid(),\r\n      });\r\n      next.wealth[accountName].data.sort(sortByDate((x) => DateTime.fromISO(x.date), \"asc\"));\r\n    });\r\n  });\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { create } from \"mutative\";\r\nimport { TimeSeries } from \"shared/models/store/current\";\r\nimport { sortByDate } from \"shared/utility/sort-by-date\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { store } from \"./store\";\r\n\r\nexport const addProjectedIncome = (date: DateTime, timeSeries: TimeSeries, value: number) => {\r\n  store.setState((prev) => {\r\n    return create(prev, (next) => {\r\n      next.projectedIncome.timeSeries[timeSeries] = next.projectedIncome.timeSeries[timeSeries]\r\n        .concat({\r\n          date: date.startOf(\"day\").toString(),\r\n          value,\r\n          id: uuid(),\r\n        })\r\n        .sort(sortByDate((x) => DateTime.fromISO(x.date), \"asc\"));\r\n    });\r\n  });\r\n};\r\n","import { create } from \"mutative\";\r\nimport { store } from \"./store\";\r\n\r\nexport const removeAccount = (accountName: string) =>\r\n  store.setState((prev) => {\r\n    return create(prev, (next) => {\r\n      delete next.wealth[accountName];\r\n    });\r\n  });\r\n","import { create } from \"mutative\";\r\nimport { store } from \"./store\";\r\n\r\nexport const removeAccountEntry = (accountName: string, id: string) =>\r\n  store.setState((prev) => {\r\n    return create(prev, (next) => {\r\n      const idxToRemove = next.wealth[accountName].data.findIndex((x) => x.id === id);\r\n      next.wealth[accountName].data.splice(idxToRemove, 1);\r\n      return next;\r\n    });\r\n  });\r\n","import { create } from \"mutative\";\r\nimport { TimeSeries } from \"shared/models/store/current\";\r\nimport { store } from \".\";\r\n\r\nexport const removeProjectedIncome = (accountName: TimeSeries, id: string) => {\r\n  store.setState((prev) => {\r\n    return create(prev, (next) => {\r\n      const idxToRemove = next.projectedIncome.timeSeries[accountName].findIndex((x) => x.id === id);\r\n      next.projectedIncome.timeSeries[accountName].splice(idxToRemove, 1);\r\n    });\r\n  });\r\n};\r\n","import { getDefaultStore } from \"shared/models/store/current\";\r\nimport { store } from \"./store\";\r\n\r\nexport const resetStore = () => store.setState(() => getDefaultStore());\r\n","import { create } from \"mutative\";\r\nimport { Loan } from \"shared/models/store/current\";\r\nimport { Mortgage } from \"shared/models/store/current\";\r\nimport { store } from \"./store\";\r\n\r\nexport const setLoan = (accountName: string, loan: Loan) =>\r\n  store.setState((prev) => {\r\n    return create(prev, (next) => {\r\n      if (next.wealth[accountName].type === \"mortgage\") {\r\n        (next.wealth[accountName] as Mortgage).loan = loan;\r\n      }\r\n    });\r\n  });\r\n","import { DateTime } from \"luxon\";\r\nimport { create } from \"mutative\";\r\nimport { store } from \".\";\r\n\r\nexport const updateAccountDate = (accountName: string, id: string, date: DateTime) => {\r\n  store.setState((prev) => {\r\n    const next = create(prev, (next) => {\r\n      const account = next.wealth[accountName];\r\n      const idx = account?.data.findIndex((x) => x.id === id);\r\n      if (idx >= 0) {\r\n        account.data[idx].date = date.toISO()!;\r\n      }\r\n    });\r\n    return next;\r\n  });\r\n};\r\n","import { create } from \"mutative\";\r\nimport { store } from \"./store\";\r\n\r\nexport const updateAccountName = (currentAccountName: string, newAccountName: string) =>\r\n  store.setState((prev) => {\r\n    return create(prev, (next) => {\r\n      next.wealth[newAccountName] = next.wealth[currentAccountName];\r\n      delete next.wealth[currentAccountName];\r\n    });\r\n  });\r\n","import { create } from \"mutative\";\r\nimport { store } from \".\";\r\n\r\nexport const updateAccountValue = (accountName: string, id: string, value: number) => {\r\n  store.setState((prev) => {\r\n    const next = create(prev, (next) => {\r\n      const account = next.wealth[accountName];\r\n      const idx = account?.data.findIndex((x) => x.id === id);\r\n      if (idx >= 0) {\r\n        account.data[idx].value = value;\r\n      }\r\n    });\r\n    return next;\r\n  });\r\n};\r\n","import { create } from \"mutative\";\r\nimport { TimeSeries } from \"shared/models/store/current\";\r\nimport { store } from \".\";\r\n\r\nexport const updateProjectedIncome = (timeSeries: TimeSeries, id: string, value: number) => {\r\n  store.setState((prev) => {\r\n    const next = create(prev, (next) => {\r\n      const account = next.projectedIncome.timeSeries[timeSeries];\r\n      const idx = account.findIndex((x) => x.id === id);\r\n      account[idx].value = value;\r\n    });\r\n    return next;\r\n  });\r\n};\r\n","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, MenuItem, Stack, TextField } from \"@mui/material\";\r\nimport { create } from \"mutative\";\r\nimport { ReactNode, forwardRef, useRef, useState } from \"react\";\r\nimport { store } from \"shared/store\";\r\n\r\ntype AssetType = \"account\" | \"mortgage\";\r\nexport const NewAccount = forwardRef<HTMLButtonElement, { children?: ReactNode }>((props, ref) => {\r\n  const [open, setOpen] = useState(false);\r\n  const nameRef = useRef<HTMLInputElement>(null);\r\n  const [error, setError] = useState(false);\r\n  const [accountType, setAccountType] = useState<AssetType>();\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        ref={ref}\r\n        variant=\"outlined\"\r\n        onClick={() => {\r\n          setOpen(true);\r\n          setError(false);\r\n          setAccountType(undefined);\r\n        }}\r\n        sx={{ marginLeft: \"auto\" }}\r\n      >\r\n        add account\r\n      </Button>\r\n\r\n      <Dialog open={open} onClose={() => setOpen(false)}>\r\n        <DialogTitle>Add New Account</DialogTitle>\r\n        <DialogContent>\r\n          <Stack spacing={2} margin={2}>\r\n            <TextField\r\n              select\r\n              color={error ? \"error\" : \"primary\"}\r\n              onChange={(value) => {\r\n                setError(false);\r\n                setAccountType(value.target.value as AssetType);\r\n              }}\r\n              label=\"Type\"\r\n            >\r\n              <MenuItem value=\"mortgage\">Mortgage</MenuItem>\r\n              <MenuItem value=\"account\">Generic Account</MenuItem>\r\n            </TextField>\r\n\r\n            <TextField\r\n              placeholder=\"Name\"\r\n              onChange={() => {\r\n                setError(false);\r\n              }}\r\n              error={error}\r\n              inputRef={nameRef}\r\n            />\r\n          </Stack>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            disabled={error}\r\n            onClick={() => {\r\n              store.setState((prev) => {\r\n                return create(prev, (next) => {\r\n                  if (!nameRef.current?.value || !accountType || prev.wealth[nameRef.current.value]) {\r\n                    setError(true);\r\n                    return;\r\n                  }\r\n\r\n                  next.wealth[nameRef.current.value] = {\r\n                    type: accountType,\r\n                    data: [],\r\n                  };\r\n\r\n                  setOpen(false);\r\n                });\r\n              });\r\n            }}\r\n          >\r\n            Add\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      {props?.children}\r\n    </>\r\n  );\r\n});\r\n","import { AgGridReact, AgGridReactProps } from \"ag-grid-react\";\r\n\r\nexport const AgGrid = (props: AgGridReactProps & { id: string }) => {\r\n  const { id, ...rest } = props;\r\n  return (\r\n    <div id={id} className=\"ag-theme-quartz-dark\" style={{ height: \"100%\" }}>\r\n      <AgGridReact {...rest} suppressMovableColumns />\r\n    </div>\r\n  );\r\n};\r\n","import { DateTime } from \"luxon\";\r\n\r\nexport const getLocalDateTime = () => DateTime.local();\r\n","export const shortDate = \"yyyy-MM-dd\";\r\n\r\nexport const monthDay = \"MMM dd\";\r\n","import { Button, Paper } from \"@mui/material\";\r\nimport { removeAccount } from \"shared/store\";\r\n\r\nexport const DeleteAccount = (props: { accountName: string }) => {\r\n  const { accountName } = props;\r\n\r\n  return (\r\n    <Paper elevation={3} sx={{ padding: 2, width: \"100%\" }}>\r\n      <Button\r\n        onClick={() => {\r\n          removeAccount(accountName);\r\n        }}\r\n        color=\"error\"\r\n      >\r\n        Delete Account\r\n      </Button>\r\n    </Paper>\r\n  );\r\n};\r\n","import { Button, Paper, Stack, TextField } from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport { updateAccountName } from \"shared/store/update-account-name\";\r\n\r\nexport const RenameAccount = (props: { accountName: string }) => {\r\n  const { accountName } = props;\r\n  const [nextAccountName, setNextAccountName] = useState<string>(accountName);\r\n\r\n  return (\r\n    <Paper elevation={3} sx={{ padding: 2 }}>\r\n      <Stack spacing={1}>\r\n        <TextField\r\n          label=\"Account Name\"\r\n          value={nextAccountName}\r\n          onChange={(event) => setNextAccountName(event.target.value)}\r\n          placeholder=\"\"\r\n        />\r\n        <Button\r\n          disabled={!nextAccountName}\r\n          onClick={() => {\r\n            updateAccountName(accountName, nextAccountName);\r\n          }}\r\n        >\r\n          Update Name\r\n        </Button>\r\n      </Stack>\r\n    </Paper>\r\n  );\r\n};\r\n","export const formatCashShort = new Intl.NumberFormat(\"en-US\", {\r\n  style: \"currency\",\r\n  currency: \"USD\",\r\n  notation: \"compact\",\r\n  maximumFractionDigits: 0,\r\n}).format;\r\n\r\nexport const formatCash = new Intl.NumberFormat(\"en-US\", {\r\n  style: \"currency\",\r\n  currency: \"USD\",\r\n  maximumFractionDigits: 0,\r\n}).format;\r\n","import { Tooltip } from \"@mui/material\";\r\nimport { useMemo } from \"react\";\r\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\r\n\r\ninterface CashProps {\r\n  value?: number;\r\n  fallback?: number;\r\n  disableTooltip?: boolean;\r\n  compact?: boolean;\r\n  tooltip?: string;\r\n  placement?:\r\n    | \"top\"\r\n    | \"right\"\r\n    | \"bottom\"\r\n    | \"left\"\r\n    | \"bottom-end\"\r\n    | \"bottom-start\"\r\n    | \"left-end\"\r\n    | \"left-start\"\r\n    | \"right-end\"\r\n    | \"right-start\"\r\n    | \"top-end\"\r\n    | \"top-start\"\r\n    | undefined;\r\n}\r\nexport const Cash = ({ value, fallback, disableTooltip, compact = true, tooltip, placement }: CashProps) => {\r\n  const formatted = useMemo(() => {\r\n    if (value === undefined) {\r\n      return fallback;\r\n    }\r\n    return compact ? formatCashShort(value) : formatCash(value);\r\n  }, [compact, fallback, value]);\r\n\r\n  return (\r\n    <Tooltip\r\n      placement={placement}\r\n      disableHoverListener={disableTooltip || !compact || !value}\r\n      title={[tooltip, formatCash(value!)].join(\" \")}\r\n    >\r\n      <span>{formatted}</span>\r\n    </Tooltip>\r\n  );\r\n};\r\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\r\nimport { Button } from \"@mui/material\";\r\nimport { ColDef } from \"ag-grid-community\";\r\nimport { CustomCellRendererProps } from \"ag-grid-react\";\r\nimport { DateTime } from \"luxon\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { AccountData } from \"shared/models/account-data\";\r\nimport { updateAccountDate, updateAccountValue } from \"shared/store\";\r\nimport { removeAccountEntry } from \"shared/store/remove-account-entry\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\n\r\nexport const createAccountColumnConfig = (accountName: string): ColDef<AccountData>[] => [\r\n  {\r\n    headerName: \"Date\",\r\n    sort: \"desc\",\r\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\r\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\r\n    cellEditor: \"agDateCellEditor\",\r\n    editable: true,\r\n    valueSetter: (x) => {\r\n      const date = DateTime.fromJSDate(x.newValue);\r\n      if (date.isValid) {\r\n        updateAccountDate(accountName, x.data.id, date);\r\n      }\r\n      return date.isValid;\r\n    },\r\n  },\r\n  {\r\n    headerName: \"Value\",\r\n    valueGetter: (x) => x.data?.value,\r\n    valueSetter: (x) => {\r\n      updateAccountValue(accountName, x.data.id, +x.newValue);\r\n      return true;\r\n    },\r\n    cellRenderer: (x: CustomCellRendererProps<AccountData>) => <Cash value={x.value} placement=\"left\" />,\r\n    editable: true,\r\n    cellEditor: \"agNumberCellEditor\",\r\n    type: \"numericColumn\",\r\n  },\r\n  {\r\n    cellStyle: () => ({ display: \"inline-flex\", padding: \"0px\" }),\r\n    sortable: false,\r\n    headerName: \"\",\r\n    width: 80,\r\n    colId: \"actions\",\r\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\r\n      return (\r\n        <Button\r\n          onClick={() => {\r\n            props.data && removeAccountEntry(accountName, props.data.id);\r\n          }}\r\n          color=\"error\"\r\n          fullWidth\r\n        >\r\n          <DeleteForeverIcon />\r\n        </Button>\r\n      );\r\n    },\r\n  },\r\n];\r\n","import { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { Account } from \"shared/models/store/current\";\r\n\r\nexport const useMissingYears = (account: Account) => {\r\n  return useMemo(() => {\r\n    const years = Object.entries(Object.groupBy(account.data, (x) => DateTime.fromISO(x.date).year))\r\n      .map(\r\n        ([year, entries]) =>\r\n          [\r\n            +year,\r\n            !!entries?.find((x) => {\r\n              const date = DateTime.fromISO(x.date);\r\n              const janFirst = DateTime.fromObject({\r\n                day: 1,\r\n                month: 1,\r\n                year: +year,\r\n              });\r\n              return date.diff(janFirst, [\"days\", \"hours\"]).days == 0;\r\n            }),\r\n          ] as [number, boolean]\r\n      )\r\n      .sort(([a], [b]) => {\r\n        return a - b;\r\n      });\r\n\r\n    const lookup = Object.fromEntries(years);\r\n    const missing = [];\r\n    for (let i = years[0]?.[0] ?? 0; i <= years[years.length - 1]?.[0]; i++) {\r\n      if (!lookup[i]) {\r\n        missing.push(i);\r\n      }\r\n    }\r\n    return missing;\r\n  }, [account.data]);\r\n};\r\n","import { Alert, Button, InputAdornment, Paper, Stack, TextField } from \"@mui/material\";\r\nimport Grid from \"@mui/system/Unstable_Grid\";\r\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo, useRef, useState } from \"react\";\r\nimport { AgGrid } from \"shared/components/ag-grid\";\r\nimport { Account } from \"shared/models/store/current\";\r\nimport { AddAccountEntry, store } from \"shared/store\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\nimport { DeleteAccount } from \"../components/delete-account\";\r\nimport { RenameAccount } from \"../components/update-account\";\r\nimport { createAccountColumnConfig } from \"./column-config\";\r\nimport { useMissingYears } from \"./hooks/useMissingYears\";\r\n\r\nexport const AccountTab = (props: { accountName: string }) => {\r\n  const { accountName } = props;\r\n  const account = useStore(store, (state) => state.wealth[accountName]) as Account;\r\n  const [date, setDate] = useState(getLocalDateTime());\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const missingYears = useMissingYears(account);\r\n  const hasSameDate = useMemo(() => {\r\n    return !!account?.data?.find((x) => date.hasSame(DateTime.fromISO(x.date), \"day\"));\r\n  }, [account?.data, date]);\r\n\r\n  const onAddEntry = () => {\r\n    inputRef.current && AddAccountEntry(accountName, date, +inputRef.current?.value);\r\n  };\r\n\r\n  const accountColumnConfig = useMemo(() => {\r\n    return createAccountColumnConfig(accountName);\r\n  }, [accountName]);\r\n\r\n  return (\r\n    <Grid container height=\"100%\" width={\"100%\"} padding={1} spacing={2}>\r\n      <Grid lg={3} xl={3}>\r\n        <AgGrid\r\n          key={accountName}\r\n          reactiveCustomComponents\r\n          rowData={account?.data ?? []}\r\n          columnDefs={accountColumnConfig}\r\n          id={account + \"-history\"}\r\n          autoSizeStrategy={{ type: \"fitGridWidth\" }}\r\n          stopEditingWhenCellsLoseFocus\r\n        />\r\n      </Grid>\r\n      <Grid xl={9} lg={8}>\r\n        <div>\r\n          <Grid container spacing={2}>\r\n            {missingYears.length > 0 && (\r\n              <Grid xs={12}>\r\n                <Paper elevation={3}>\r\n                  <Alert severity=\"warning\">Ensure an entry for Jan 1st for each year {missingYears.join(\", \")}</Alert>\r\n                </Paper>\r\n              </Grid>\r\n            )}\r\n            <Grid xl={2} lg={3}>\r\n              <Paper elevation={3} sx={{ padding: 2 }}>\r\n                <Stack spacing={1}>\r\n                  <DatePicker\r\n                    format={shortDate}\r\n                    sx={{ color: \"white\" }}\r\n                    label=\"Date\"\r\n                    defaultValue={date}\r\n                    onChange={(value) => value && setDate(value)}\r\n                  />\r\n                  <TextField\r\n                    label=\"amount\"\r\n                    type=\"number\"\r\n                    defaultValue={0}\r\n                    inputRef={inputRef}\r\n                    InputProps={{\r\n                      startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\r\n                    }}\r\n                    placeholder=\"0\"\r\n                  />\r\n                  <Button disabled={!date || hasSameDate} onClick={onAddEntry}>\r\n                    Add Entry\r\n                  </Button>\r\n                </Stack>\r\n              </Paper>\r\n            </Grid>\r\n            <Grid xl={8} lg={0}></Grid>\r\n            <Grid xl={2} lg={4}>\r\n              <Stack spacing={2}>\r\n                <DeleteAccount accountName={accountName} />\r\n                <RenameAccount key={accountName} accountName={accountName} />\r\n              </Stack>\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { AccountData } from \"shared/models/account-data\";\r\n\r\nexport const findNearestOnOrBefore = (date: DateTime, data: AccountData[]) => {\r\n  return data.find((x, idx, array) => {\r\n    if (idx == 0 && DateTime.fromISO(x.date).startOf(\"day\") >= date) {\r\n      return true;\r\n    }\r\n\r\n    if (\r\n      idx < array.length - 1 &&\r\n      DateTime.fromISO(x.date).startOf(\"day\") <= date &&\r\n      DateTime.fromISO(data[idx + 1].date).startOf(\"day\") > date\r\n    ) {\r\n      return true;\r\n    }\r\n\r\n    if (idx === array.length - 1) {\r\n      return true;\r\n    }\r\n  });\r\n};\r\n\r\nexport const findNearestIdxOnOrBefore = <T>(date: DateTime, data: T[], selector: (data: T) => DateTime) => {\r\n  return data.findIndex((x, idx, array) => {\r\n    if (idx == 0 && selector(x) >= date) {\r\n      return true;\r\n    }\r\n\r\n    if (idx < array.length - 1 && selector(x) <= date && selector(data[idx + 1]) > date) {\r\n      return true;\r\n    }\r\n\r\n    if (idx === array.length - 1) {\r\n      return true;\r\n    }\r\n  });\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { Account, Mortgage } from \"shared/models/store/current\";\r\n\r\nexport const getGraphDates = (accounts: (Account | Mortgage)[]) => {\r\n  return [\r\n    ...new Set(\r\n      accounts.flatMap((x) => {\r\n        return x.data.map((x) => DateTime.fromISO(x.date).startOf(\"day\").toISO());\r\n      })\r\n    ),\r\n  ]\r\n    .map((x) => DateTime.fromISO(x!))\r\n    .sort((a, b) => a.toMillis() - b.toMillis()) as DateTime<true>[];\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { Loan } from \"shared/models/store/current\";\r\n\r\nexport const calcLoanBalance = (date: DateTime, loan: Loan) => {\r\n  const { firstPaymentDate, paymentsPerYear, principal: principal, ratePct: rate, payment: monthlyPayment } = loan;\r\n  const annualizedRate = rate / paymentsPerYear;\r\n  const periods = date.diff(DateTime.fromISO(firstPaymentDate), \"months\").months;\r\n  const totalRate = (1 + annualizedRate) ** periods;\r\n  const balance = principal * totalRate - (monthlyPayment / annualizedRate) * (totalRate - 1);\r\n\r\n  return balance;\r\n};\r\n\r\nexport const calcEquity = (\r\n  ownershipPct: number,\r\n  houseValue: number | undefined,\r\n  loanBalance: number,\r\n  principal: number\r\n) => {\r\n  return houseValue ? houseValue * ownershipPct - loanBalance : principal - loanBalance;\r\n};\r\n","import { Button, Paper, TextField } from \"@mui/material\";\r\nimport { Stack } from \"@mui/system\";\r\nimport { DatePicker } from \"@mui/x-date-pickers\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useRef } from \"react\";\r\nimport { AddAccountEntry } from \"shared/store\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\n\r\nexport const AddEntry = (props: { accountName: string }) => {\r\n  const { accountName } = props;\r\n  const ref = useRef<{ date?: DateTime; value?: number }>({\r\n    date: getLocalDateTime(),\r\n    value: 0,\r\n  });\r\n  const onAddEntry = () => {\r\n    const { date, value } = ref.current;\r\n    if (!date || !value) {\r\n      return;\r\n    }\r\n    AddAccountEntry(accountName, date, value);\r\n  };\r\n  return (\r\n    <Paper elevation={3} sx={{ padding: 2 }}>\r\n      <Stack spacing={1}>\r\n        <DatePicker\r\n          defaultValue={getLocalDateTime()}\r\n          onChange={(date: DateTime | null) => {\r\n            if (date) {\r\n              ref.current.date = date;\r\n            }\r\n          }}\r\n        />\r\n        <TextField\r\n          label=\"Home value\"\r\n          type=\"numeric\"\r\n          onChange={(event) => {\r\n            ref.current.value = +event.target.value;\r\n          }}\r\n        />\r\n        <Button onClick={onAddEntry}>Add Home Value</Button>\r\n      </Stack>\r\n    </Paper>\r\n  );\r\n};\r\n","export function groupBy<T, T2 extends string | number | symbol>(array: T[], selector: (x: T) => T2): Record<T2, T[]> {\r\n  return array.reduce((acc: Record<T2, T[]>, curr: T) => {\r\n    const key = selector(curr);\r\n    acc[key] ??= [];\r\n    acc[key].push(curr);\r\n    return acc;\r\n  }, {} as Record<T2, T[]>);\r\n}\r\n\r\nexport function groupBySingle<T, T2 extends string | number | symbol>(\r\n  array: T[],\r\n  selector: (x: T) => T2\r\n): Record<T2, T> {\r\n  return array.reduce((acc: Record<T2, T>, curr: T) => {\r\n    const key = selector(curr);\r\n    acc[key] ??= curr;\r\n\r\n    return acc;\r\n  }, {} as Record<T2, T>);\r\n}\r\n","import { Button, Paper, Stack, TextField } from \"@mui/material\";\r\nimport { DatePicker } from \"@mui/x-date-pickers\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useRef, useState } from \"react\";\r\nimport { Loan } from \"shared/models/store/current\";\r\nimport { store } from \"shared/store\";\r\nimport { setLoan } from \"shared/store/set-loan\";\r\nimport { groupBy } from \"shared/utility/group-by\";\r\nimport { ZodIssue, z } from \"zod\";\r\n\r\nconst convertPct = (value: number) => {\r\n  return value > 1 ? value / 100 : value;\r\n};\r\n\r\nconst validator: z.ZodType<Loan> = z.object({\r\n  principal: z.number().min(0),\r\n  ratePct: z.number().min(0),\r\n  paymentsPerYear: z.number().min(0),\r\n  payment: z.number().min(0),\r\n  firstPaymentDate: z.string().datetime({ offset: true }),\r\n  ownershipPct: z.number().min(0),\r\n});\r\n\r\nexport const AddLoan = (props: { accountName: string }) => {\r\n  const { accountName } = props;\r\n\r\n  const loan = useStore(store, (x) => {\r\n    const account = x.wealth[accountName];\r\n    if (\"loan\" in account) {\r\n      return account.loan;\r\n    }\r\n  });\r\n\r\n  const ref = useRef<Partial<Loan>>(loan ?? {});\r\n  const [error, setError] = useState<Partial<Record<keyof Loan, ZodIssue>>>({});\r\n\r\n  return (\r\n    <Paper elevation={3} sx={{ padding: 2 }}>\r\n      <Stack spacing={1}>\r\n        <DatePicker\r\n          defaultValue={ref.current?.firstPaymentDate ? DateTime.fromISO(ref.current.firstPaymentDate) : null}\r\n          label=\"First Payment\"\r\n          slotProps={{\r\n            textField: {\r\n              error: !!error.firstPaymentDate,\r\n            },\r\n          }}\r\n          onChange={(value: DateTime | null) => {\r\n            if (value) {\r\n              ref.current.firstPaymentDate = value.startOf(\"day\").toISO()!;\r\n            }\r\n          }}\r\n        />\r\n        <TextField\r\n          error={!!error.principal}\r\n          defaultValue={loan?.principal}\r\n          onChange={(event) => {\r\n            ref.current.principal = +event.target.value;\r\n          }}\r\n          variant=\"outlined\"\r\n          label=\"Principal\"\r\n          type=\"number\"\r\n        />\r\n        <TextField\r\n          error={!!error.ratePct}\r\n          defaultValue={loan?.ratePct}\r\n          onChange={(event) => {\r\n            ref.current.ratePct = convertPct(+event.target.value);\r\n          }}\r\n          variant=\"outlined\"\r\n          label=\"Rate\"\r\n          type=\"number\"\r\n        />\r\n        <TextField\r\n          error={!!error.paymentsPerYear}\r\n          defaultValue={loan?.paymentsPerYear}\r\n          onChange={(event) => {\r\n            ref.current.paymentsPerYear = +event.target.value;\r\n          }}\r\n          variant=\"outlined\"\r\n          label=\"Payments Per Year\"\r\n          type=\"number\"\r\n        />\r\n        <TextField\r\n          defaultValue={loan?.payment}\r\n          error={!!error.payment}\r\n          onChange={(event) => {\r\n            ref.current.payment = +event.target.value;\r\n          }}\r\n          variant=\"outlined\"\r\n          label=\"Payment\"\r\n          type=\"number\"\r\n        />\r\n        <TextField\r\n          defaultValue={loan?.ownershipPct}\r\n          error={!!error.ownershipPct}\r\n          onChange={(event) => {\r\n            ref.current.ownershipPct = convertPct(+event.target.value);\r\n          }}\r\n          variant=\"outlined\"\r\n          label=\"Ownership (%)\"\r\n          type=\"number\"\r\n        />\r\n        <Button\r\n          onClick={() => {\r\n            const parsed = validator.safeParse(ref.current);\r\n            if (parsed.success) {\r\n              setError({});\r\n              setLoan(accountName, parsed.data);\r\n            } else {\r\n              const issues = groupBy(parsed.error.issues, (x) => x.path.join(\"\"));\r\n              setError(issues);\r\n            }\r\n          }}\r\n        >\r\n          Set Loan\r\n        </Button>\r\n      </Stack>\r\n    </Paper>\r\n  );\r\n};\r\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\r\nimport { Button } from \"@mui/material\";\r\nimport { ColDef } from \"ag-grid-community\";\r\nimport { CustomCellRendererProps } from \"ag-grid-react\";\r\nimport { DateTime } from \"luxon\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { AccountData } from \"shared/models/account-data\";\r\nimport { removeAccountEntry } from \"shared/store\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\n\r\nexport const createAccountColumnConfig = (accountName: string): ColDef<AccountData>[] => [\r\n  {\r\n    headerName: \"Date\",\r\n    sort: \"desc\",\r\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\r\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\r\n  },\r\n  {\r\n    headerName: \"Home Value\",\r\n    cellRenderer: (x: CustomCellRendererProps<AccountData>) => <Cash value={x.value} placement=\"left\" />,\r\n    valueGetter: (x) => x.data?.value,\r\n    type: \"numericColumn\",\r\n  },\r\n  {\r\n    cellStyle: () => ({ display: \"inline-flex\", padding: \"0px\" }),\r\n    headerName: \"\",\r\n    width: 80,\r\n    sortable: false,\r\n    colId: \"actions\",\r\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\r\n      return (\r\n        <Button\r\n          onClick={() => {\r\n            props.data && removeAccountEntry(accountName, props.data?.id);\r\n          }}\r\n          color=\"error\"\r\n          fullWidth\r\n        >\r\n          <DeleteForeverIcon />\r\n        </Button>\r\n      );\r\n    },\r\n  },\r\n];\r\n\r\ntype House = {\r\n  date: DateTime;\r\n  balance: number;\r\n  equity: number;\r\n};\r\n\r\nexport const mortgageColumnConfig: ColDef<House>[] = [\r\n  {\r\n    headerName: \"Date\",\r\n    sort: \"desc\",\r\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\r\n    valueGetter: (x) => x.data?.date,\r\n  },\r\n  {\r\n    headerName: \"Loan Balance\",\r\n    valueGetter: (x) => x.data?.balance.toFixed(2),\r\n    cellRenderer: (x: CustomCellRendererProps<House>) => <Cash value={x.value} placement=\"left\" />,\r\n    type: \"numericColumn\",\r\n  },\r\n  {\r\n    headerName: \"Equity\",\r\n    valueGetter: (x) => x.data?.equity.toFixed(2),\r\n    cellRenderer: (x: CustomCellRendererProps<House>) => <Cash value={x.value} placement=\"left\" />,\r\n    type: \"numericColumn\",\r\n  },\r\n];\r\n","import { Stack } from \"@mui/system\";\r\nimport Grid from \"@mui/system/Unstable_Grid\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { useMemo } from \"react\";\r\nimport { AgGrid } from \"shared/components/ag-grid\";\r\nimport { Mortgage } from \"shared/models/store/current\";\r\nimport { store } from \"shared/store\";\r\n\r\nimport { findNearestOnOrBefore } from \"shared/utility/find-nearest-on-or-before\";\r\nimport { getGraphDates } from \"shared/utility/get-graph-dates\";\r\nimport { calcEquity, calcLoanBalance } from \"shared/utility/mortgage-calc\";\r\nimport { DeleteAccount } from \"../components/delete-account\";\r\nimport { RenameAccount } from \"../components/update-account\";\r\nimport { AddEntry } from \"./add-entry\";\r\nimport { AddLoan } from \"./add-loan\";\r\nimport { createAccountColumnConfig, mortgageColumnConfig } from \"./column-config\";\r\n\r\nexport const MortgageTab = (props: { accountName: string }) => {\r\n  const { accountName } = props;\r\n\r\n  const account = useStore(store, (state) => state.wealth[accountName]) as Mortgage;\r\n\r\n  const allAccounts = useStore(store, (x) => x.wealth);\r\n\r\n  const accountColumnConfig = useMemo(() => {\r\n    return createAccountColumnConfig(accountName);\r\n  }, [accountName]);\r\n\r\n  const mortgageData = useMemo(() => {\r\n    if (!account?.loan) {\r\n      return [];\r\n    }\r\n\r\n    return getGraphDates(Object.values(allAccounts)).map((date) => {\r\n      const loanBalance = calcLoanBalance(date, account.loan!);\r\n      return {\r\n        date,\r\n        balance: loanBalance,\r\n        equity: calcEquity(\r\n          account.loan!.ownershipPct,\r\n          findNearestOnOrBefore(date, account.data)?.value,\r\n          loanBalance,\r\n          account.loan!.principal\r\n        ),\r\n      };\r\n    });\r\n  }, [account, allAccounts]);\r\n\r\n  return (\r\n    <Grid container height=\"100%\" width={\"100%\"} padding={1} spacing={2}>\r\n      <Grid lg={3}>\r\n        <AgGrid\r\n          reactiveCustomComponents\r\n          rowData={account?.data ?? []}\r\n          columnDefs={accountColumnConfig}\r\n          id={account + \"-history\"}\r\n          autoSizeStrategy={{ type: \"fitGridWidth\" }}\r\n        />\r\n      </Grid>\r\n      <Grid lg={3}>\r\n        <AgGrid\r\n          rowData={mortgageData}\r\n          columnDefs={mortgageColumnConfig}\r\n          id={account + \"-history\"}\r\n          autoSizeStrategy={{ type: \"fitGridWidth\" }}\r\n        />\r\n      </Grid>\r\n      <Grid lg={6}>\r\n        <div>\r\n          <Grid container spacing={2}>\r\n            <Grid xl={3}>\r\n              <AddLoan accountName={accountName} />\r\n            </Grid>\r\n            <Grid xl={3}>\r\n              <AddEntry accountName={accountName} />\r\n            </Grid>\r\n            <Grid xl={0}></Grid>\r\n            <Grid xl={3}>\r\n              <Stack spacing={2}>\r\n                <DeleteAccount accountName={accountName} />\r\n                <RenameAccount key={accountName} accountName={accountName} />\r\n              </Stack>\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import { Box, Tab, Tabs } from \"@mui/material\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { NewAccount } from \"../new-account\";\r\nimport { AccountTab } from \"../tab-types/account/account\";\r\nimport { MortgageTab } from \"../tab-types/mortgage\";\r\n\r\nexport const AccountTabs = () => {\r\n  const accounts = useStore(store, (x) => x.wealth);\r\n  const firstAccount = Object.keys(accounts)?.[0];\r\n  const [account, setAccount] = useState<string>(firstAccount);\r\n\r\n  useEffect(() => {\r\n    if (!accounts[account]) {\r\n      setAccount(Object.keys(accounts)?.[0] ?? \"\");\r\n    }\r\n  }, [account, accounts]);\r\n\r\n  return (\r\n    <Box display=\"flex\" flexDirection={\"column\"} width=\"100%\" height=\"100%\">\r\n      <Box display={\"flex\"} flex={\"0 1 auto\"}>\r\n        {Object.keys(accounts).length > 0 && (\r\n          <Tabs\r\n            value={account}\r\n            onChange={(_, value) => {\r\n              setAccount(value as string);\r\n            }}\r\n          >\r\n            {Object.keys(accounts).map((account) => {\r\n              return <Tab key={account} value={account} label={account} />;\r\n            })}\r\n          </Tabs>\r\n        )}\r\n        <Tab component={NewAccount} />\r\n      </Box>\r\n      <Box flex={\"1 1 auto\"}>\r\n        {accounts[account]?.type === \"account\" && <AccountTab accountName={account} />}\r\n        {accounts[account]?.type === \"mortgage\" && <MortgageTab accountName={account} />}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { Account, Mortgage } from \"shared/models/store/current\";\r\nimport { findNearestOnOrBefore } from \"./find-nearest-on-or-before\";\r\nimport { calcEquity, calcLoanBalance } from \"./mortgage-calc\";\r\n\r\nconst getMortgageValue = (date: DateTime, mortgage: Mortgage) => {\r\n  if (!mortgage.loan) {\r\n    return 0;\r\n  }\r\n  const entry = findNearestOnOrBefore(date, mortgage.data);\r\n  if (entry?.date && mortgage.data[0] === entry && DateTime.fromISO(entry.date).startOf(\"day\") > date) {\r\n    return 0;\r\n  }\r\n  const { ownershipPct, principal } = mortgage.loan;\r\n  const balance = calcLoanBalance(date, mortgage.loan);\r\n  return calcEquity(ownershipPct, entry?.value, balance, principal);\r\n};\r\n\r\nconst getAccountValue = (date: DateTime, account: Account) => {\r\n  const entry = findNearestOnOrBefore(date, account.data);\r\n  if (entry?.date && account.data[0] === entry && DateTime.fromISO(entry.date).startOf(\"day\") > date) {\r\n    return 0;\r\n  }\r\n  return entry?.value;\r\n};\r\n\r\nexport const getGraphValue = (date: DateTime, account: Account | Mortgage) => {\r\n  switch (account.type) {\r\n    case \"account\":\r\n      return getAccountValue(date, account);\r\n    case \"mortgage\":\r\n      return getMortgageValue(date, account);\r\n  }\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { useMemo } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { getGraphDates } from \"shared/utility/get-graph-dates\";\r\nimport { getGraphValue } from \"shared/utility/get-graph-value\";\r\n\r\nexport const useGraphData = () => {\r\n  const wealth = useStore(store, (x) => x.wealth);\r\n\r\n  return useMemo(() => {\r\n    const dates = getGraphDates(Object.values(wealth));\r\n    const accounts = Object.entries(wealth);\r\n    const graphData = dates.map((date) => {\r\n      return accounts.reduce(\r\n        (acc, [accountName, account]) => {\r\n          const value = getGraphValue(date, account);\r\n\r\n          if (value) {\r\n            acc[accountName] = value;\r\n            acc[\"total\"] = (acc[\"total\"] as number) + value;\r\n          } else {\r\n            acc[accountName] = null;\r\n          }\r\n\r\n          acc[\"date\"] = date.toJSDate();\r\n          return acc;\r\n        },\r\n        { total: 0 } as Record<string, number | Date | null>,\r\n      );\r\n    });\r\n\r\n    graphData.forEach((x, idx, arr) => {\r\n      if (idx < arr.length - 1) {\r\n        Object.keys(x).forEach((key) => {\r\n          if (x[key] === null && arr[idx + 1][key] !== null) {\r\n            x[key] = 0;\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    const firstNonZero = graphData.findIndex((x) => (x[\"total\"] as number) > 0);\r\n    return graphData.slice(firstNonZero);\r\n  }, [wealth]);\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { AgAreaSeriesOptions, AgCartesianChartOptions, AgLineSeriesOptions } from \"ag-charts-community\";\r\nimport { AgChartsReact } from \"ag-charts-react\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { formatCashShort } from \"shared/utility/format-cash\";\r\nimport { useGraphData } from \"./use-graph-data\";\r\n\r\nexport const WealthChart = () => {\r\n  const wealth = useStore(store, (x) => x.wealth);\r\n  const data = useGraphData();\r\n\r\n  const series = useMemo(() => {\r\n    return [\r\n      ...Object.keys(wealth).map((x) => {\r\n        return {\r\n          stacked: true,\r\n          type: \"area\",\r\n          xKey: \"date\",\r\n          yKey: x,\r\n          yName: x,\r\n          tooltip: {\r\n            renderer: ({ datum, yKey, xKey }) => ({\r\n              content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCashShort(datum[yKey])}`,\r\n            }),\r\n          },\r\n        } as AgAreaSeriesOptions;\r\n      }),\r\n      {\r\n        type: \"line\",\r\n        xKey: \"date\",\r\n        yKey: \"total\",\r\n        yName: \"Total\",\r\n        tooltip: {\r\n          renderer: ({ datum, yKey, xKey }) => ({\r\n            content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCashShort(datum[yKey])}`,\r\n          }),\r\n        },\r\n      } as AgLineSeriesOptions,\r\n    ];\r\n  }, [wealth]);\r\n\r\n  const options: AgCartesianChartOptions = useMemo(\r\n    () => ({\r\n      theme: \"ag-default-dark\",\r\n      title: {\r\n        text: `Total Wealth ${formatCashShort((data[data.length - 1]?.total ?? 0) as number)}`,\r\n      },\r\n      data,\r\n      axes: [\r\n        {\r\n          type: \"time\",\r\n          position: \"bottom\",\r\n          label: {\r\n            format: \"%Y\",\r\n          },\r\n        },\r\n        {\r\n          type: \"number\",\r\n          position: \"left\",\r\n        },\r\n      ],\r\n      series,\r\n    }),\r\n    [data, series],\r\n  );\r\n  return <AgChartsReact options={options} />;\r\n};\r\n","import Grid from \"@mui/system/Unstable_Grid\";\r\nimport { AccountTabs } from \"./components/account-tabs\";\r\nimport { WealthChart } from \"./components/wealth-chart\";\r\n\r\nexport const NetWealth = () => {\r\n  return (\r\n    <Grid container height={\"100%\"} width=\"100%\" spacing={1}>\r\n      <Grid xs={12} height=\"50%\">\r\n        <WealthChart />\r\n      </Grid>\r\n      <Grid xs={12} height=\"50%\">\r\n        <AccountTabs />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import { Box, Tooltip } from \"@mui/material\";\r\nimport { DateTime } from \"luxon\";\r\nimport { ReactNode, useMemo } from \"react\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\n\r\ninterface DurationProps {\r\n  dateTime?: DateTime;\r\n  children?: ReactNode;\r\n  variant?: \"countdown\" | \"date\";\r\n  dateFormat?: string;\r\n}\r\nexport const Duration = (props: DurationProps) => {\r\n  const { dateTime, children, variant = \"countdown\", dateFormat = shortDate } = props;\r\n\r\n  const countDownStr = useMemo(() => {\r\n    if (!dateTime) {\r\n      return \"??\";\r\n    }\r\n    if (variant === \"countdown\") {\r\n      const diff = dateTime?.diff(getLocalDateTime(), [\"years\", \"months\", \"days\", \"hours\"]);\r\n      const format = `${diff.years > 0 ? \"y 'year' \" : \"\"}${diff.months > 0 ? \"M 'months' \" : \"\"}${\r\n        diff.days > 0 && diff.months == 0 ? \"d 'days'\" : \"\"\r\n      }${diff.hours > 0 && diff.days == 0 ? \"h 'hours'\" : \"\"}`;\r\n\r\n      return diff?.toFormat(format);\r\n    }\r\n\r\n    return dateTime?.toFormat(dateFormat);\r\n  }, [dateFormat, dateTime, variant]);\r\n\r\n  const tooltipStr = useMemo(() => {\r\n    if (variant === \"countdown\") {\r\n      return dateTime?.toFormat(dateFormat);\r\n    }\r\n\r\n    return dateTime?.diffNow([\"months\", \"days\", \"hours\"]).toFormat(\"d 'days'\");\r\n  }, [dateFormat, dateTime, variant]);\r\n\r\n  const countDownColor = useMemo(() => {\r\n    if (!dateTime) {\r\n      return \"white\";\r\n    }\r\n\r\n    const days = dateTime.diffNow(\"days\").days;\r\n    if (days < 30) {\r\n      return \"green\";\r\n    } else if (days < 60) {\r\n      return \"yellow\";\r\n    }\r\n\r\n    return \"red\";\r\n  }, [dateTime]);\r\n\r\n  return dateTime && dateTime > getLocalDateTime() ? (\r\n    <Tooltip title={tooltipStr}>\r\n      <Box color={countDownColor}>{countDownStr}</Box>\r\n    </Tooltip>\r\n  ) : (\r\n    children\r\n  );\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { AccountData } from \"shared/models/account-data\";\r\n\r\nexport function findSameYear(year: number, data: AccountData[]): AccountData | undefined;\r\nexport function findSameYear(date: DateTime, data: AccountData[]): AccountData | undefined;\r\nexport function findSameYear(date: DateTime | number, data: AccountData[]): AccountData | undefined {\r\n  const year = typeof date === \"number\" ? date : date.year;\r\n  return data.find((x) => {\r\n    return DateTime.fromISO(x.date).year === year;\r\n  });\r\n}\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { AccountData } from \"shared/models/account-data\";\r\nimport { store } from \"shared/store\";\r\nimport { findSameYear } from \"shared/utility/find-same-year\";\r\n\r\nconst useRealDate = (year: number | undefined, data: AccountData[]) => {\r\n  return useMemo(() => {\r\n    if (!year) {\r\n      return undefined;\r\n    }\r\n    const meritBonus = findSameYear(year, data);\r\n    if (!meritBonus) {\r\n      return undefined;\r\n    }\r\n\r\n    return DateTime.fromISO(meritBonus.date);\r\n  }, [data, year]);\r\n};\r\n\r\nexport const useDates = (year?: number) => {\r\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\r\n  const meritBonusDate = useRealDate(year, timeSeries.meritBonus);\r\n  const companyBonusDate = useRealDate(year, timeSeries.companyBonus);\r\n\r\n  return useMemo(() => {\r\n    return {\r\n      meritIncrease: DateTime.fromObject({ month: 4, day: 1, year }),\r\n      meritBonus: meritBonusDate ?? DateTime.fromObject({ month: 4, day: 15, year }),\r\n      companyBonus: companyBonusDate ?? DateTime.fromObject({ month: 6, day: 15, year }),\r\n      retirementBonus: DateTime.fromObject({ month: 7, day: 15, year }),\r\n    };\r\n  }, [companyBonusDate, meritBonusDate, year]);\r\n};\r\n\r\nexport const useDateRanges = (year: number) => {\r\n  return useMemo(\r\n    () => ({\r\n      base: {\r\n        start: DateTime.fromObject({ month: 1, day: 1, year }),\r\n        end: DateTime.fromObject({ month: 12, day: 31, year }).endOf(\"day\"),\r\n      },\r\n      meritBonus: {\r\n        start: DateTime.fromObject({ month: 1, day: 1, year: year - 1 }),\r\n        end: DateTime.fromObject({ month: 12, day: 31, year: year - 1 }).endOf(\"day\"),\r\n      },\r\n      companyBonus: {\r\n        start: DateTime.fromObject({ day: 1, month: 4, year: year - 1 }),\r\n        end: DateTime.fromObject({ day: 31, month: 3, year }).endOf(\"day\"),\r\n      },\r\n      retirementBonus: {\r\n        start: DateTime.fromObject({ day: 1, month: 7, year: year - 1 }),\r\n        end: DateTime.fromObject({ day: 30, month: 6, year }).endOf(\"day\"),\r\n      },\r\n    }),\r\n    [year]\r\n  );\r\n};\r\n","export const formatPercent = new Intl.NumberFormat(\"en-us\", {\r\n  style: \"percent\",\r\n  maximumFractionDigits: 1,\r\n}).format;\r\n","import { Box } from \"@mui/system\";\r\nimport { ReactNode } from \"react\";\r\nimport { formatPercent } from \"shared/utility/format-percent\";\r\n\r\ninterface PercentProps {\r\n  value?: number;\r\n  probability?: number;\r\n  fallback?: ReactNode;\r\n}\r\n\r\nconst getColor = (probability?: number) => {\r\n  if (!probability) {\r\n    return \"inherit\";\r\n  }\r\n  if (probability >= 0.5) {\r\n    return \"green\";\r\n  }\r\n  if (probability >= 0.25) {\r\n    return \"yellow\";\r\n  }\r\n  return \"red\";\r\n};\r\n\r\nexport const Percent = ({ value, probability, fallback }: PercentProps) => {\r\n  return <Box color={getColor(probability)}>{value ? formatPercent(value) : fallback}</Box>;\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { create } from \"mutative\";\r\nimport { TimeSeries } from \"shared/models/store/current\";\r\nimport { store } from \".\";\r\n\r\nexport const updateProjectedIncomeDate = (timeSeries: TimeSeries, id: string, date: DateTime) => {\r\n  store.setState((prev) => {\r\n    const next = create(prev, (next) => {\r\n      const account = next.projectedIncome.timeSeries[timeSeries];\r\n      const idx = account.findIndex((x) => x.id === id);\r\n      account[idx].date = date.toISO()!;\r\n    });\r\n    return next;\r\n  });\r\n};\r\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\r\nimport UpdateIcon from \"@mui/icons-material/Update\";\r\nimport { Button, Tooltip } from \"@mui/material\";\r\nimport { Stack } from \"@mui/system\";\r\nimport { ColDef, ICellRendererParams } from \"ag-grid-community\";\r\nimport { CustomCellRendererProps } from \"ag-grid-react\";\r\nimport { DateTime } from \"luxon\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { Percent } from \"shared/components/formatters/percent\";\r\nimport { AccountData } from \"shared/models/account-data\";\r\nimport { TimeSeries } from \"shared/models/store/current\";\r\nimport { updateProjectedIncome } from \"shared/store\";\r\nimport { removeProjectedIncome } from \"shared/store/remove-projected-income\";\r\nimport { updateProjectedIncomeDate } from \"shared/store/update-projected-income-date\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\n\r\nexport const createAccountColumnConfig = (\r\n  accountName: TimeSeries,\r\n  variant: \"number\" | \"cash\" | \"percent\"\r\n): ColDef<AccountData>[] => [\r\n  {\r\n    headerName: \"Date\",\r\n    sort: \"desc\",\r\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\r\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\r\n    cellRenderer: (x: ICellRendererParams<unknown, DateTime>) => {\r\n      return (\r\n        <Stack direction={\"row\"} alignItems={\"center\"}>\r\n          {x.valueFormatted}&nbsp;\r\n          {x.value && x.value > DateTime.local() && (\r\n            <Tooltip title=\"Future Event\">\r\n              <UpdateIcon htmlColor=\"yellow\" />\r\n            </Tooltip>\r\n          )}\r\n        </Stack>\r\n      );\r\n    },\r\n    cellEditor: \"agDateCellEditor\",\r\n    editable: true,\r\n    valueSetter: (x) => {\r\n      const date = DateTime.fromJSDate(x.newValue);\r\n      if (date.isValid) {\r\n        updateProjectedIncomeDate(accountName, x.data.id, DateTime.fromJSDate(x.newValue));\r\n      }\r\n      return date.isValid;\r\n    },\r\n  },\r\n  {\r\n    headerName: \"Value\",\r\n    valueGetter: (x) => x.data?.value,\r\n    cellRenderer: (x: CustomCellRendererProps<AccountData>) =>\r\n      variant === \"cash\" ? <Cash compact={false} value={x.value} /> : <Percent value={x.value} />,\r\n    type: \"numericColumn\",\r\n    editable: true,\r\n    cellEditor: \"agNumberCellEditor\",\r\n    valueSetter: (x) => {\r\n      updateProjectedIncome(accountName, x.data.id, +x.newValue);\r\n      return true;\r\n    },\r\n  },\r\n  {\r\n    cellStyle: () => ({ display: \"inline-flex\", padding: \"0px\" }),\r\n    sortable: false,\r\n    headerName: \"\",\r\n    width: 80,\r\n    colId: \"actions\",\r\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\r\n      return (\r\n        <Button\r\n          onClick={() => {\r\n            props.data && removeProjectedIncome(accountName, props.data?.id);\r\n          }}\r\n          color=\"error\"\r\n          fullWidth\r\n        >\r\n          <DeleteForeverIcon />\r\n        </Button>\r\n      );\r\n    },\r\n  },\r\n];\r\n","import { Box, Button, InputAdornment, Paper, Stack, TextField, Tooltip, Typography } from \"@mui/material\";\r\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo, useState } from \"react\";\r\nimport { AgGrid } from \"shared/components/ag-grid\";\r\nimport { TimeSeries } from \"shared/models/store/current\";\r\nimport { addProjectedIncome, store } from \"shared/store\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\nimport { createAccountColumnConfig } from \"./column-config\";\r\n\r\nexport const DataEntry = (props: {\r\n  timeSeries: TimeSeries;\r\n  defaultDate: DateTime;\r\n  variant?: \"number\" | \"cash\" | \"percent\";\r\n}) => {\r\n  const { timeSeries, defaultDate, variant = \"number\" } = props;\r\n  const account = useStore(store, (state) => state.projectedIncome.timeSeries[timeSeries]);\r\n\r\n  const [date, setDate] = useState(defaultDate);\r\n  const [amount, setAmount] = useState<number | null>(null);\r\n\r\n  const hasSameDate = useMemo(() => {\r\n    return !!account?.find((x) => date.hasSame(DateTime.fromISO(x.date), \"day\"));\r\n  }, [account, date]);\r\n\r\n  const onAddEntry = () => {\r\n    if (amount != null) {\r\n      addProjectedIncome(date, timeSeries, variant === \"percent\" ? amount / 100 : amount);\r\n      setAmount(null);\r\n    }\r\n  };\r\n\r\n  const accountColumnConfig = useMemo(() => {\r\n    return createAccountColumnConfig(timeSeries, variant);\r\n  }, [timeSeries, variant]);\r\n\r\n  return (\r\n    <Box display={\"flex\"} flexDirection={\"column\"} height=\"100%\">\r\n      <Stack spacing={2} flex=\"0 1 auto\">\r\n        <DatePicker\r\n          format={shortDate}\r\n          sx={{ color: \"white\" }}\r\n          label=\"Date\"\r\n          value={date}\r\n          onChange={(value) => {\r\n            console.log(value);\r\n            value && setDate(value);\r\n          }}\r\n        />\r\n        <TextField\r\n          label=\"amount\"\r\n          value={amount ?? \"\"}\r\n          type=\"number\"\r\n          onChange={(event) => (event.target.value === \"\" ? setAmount(null) : setAmount(+event.target.value))}\r\n          InputProps={{\r\n            startAdornment: variant !== \"number\" && (\r\n              <InputAdornment position=\"start\">{variant === \"cash\" ? \"$\" : \"%\"}</InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n        <Button disabled={amount === null || !date || hasSameDate} onClick={onAddEntry}>\r\n          Add Entry\r\n        </Button>\r\n      </Stack>\r\n      <Box sx={{ paddingTop: 2, flex: \"1 1 auto\" }}>\r\n        <AgGrid\r\n          reactiveCustomComponents\r\n          rowData={account ?? []}\r\n          columnDefs={accountColumnConfig}\r\n          id={account + \"-history\"}\r\n          autoSizeStrategy={{\r\n            type: \"fitGridWidth\",\r\n          }}\r\n          stopEditingWhenCellsLoseFocus\r\n        />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport interface LayoutProps {\r\n  title: string;\r\n  accountName: TimeSeries;\r\n  defaultDate: DateTime;\r\n  variant: \"percent\" | \"number\" | \"cash\";\r\n}\r\n\r\nexport const Layout = (props: LayoutProps) => {\r\n  const { title, accountName, defaultDate, variant } = props;\r\n  return (\r\n    <Paper sx={{ padding: 2, height: \"100%\", width: 450, flexShrink: 0 }}>\r\n      <Box display=\"flex\" flexDirection=\"column\" height=\"100%\">\r\n        <Box flex=\"0 1 auto\" marginBottom={2}>\r\n          <Typography sx={{ marginBottom: 2 }} variant=\"h5\">\r\n            {title}{\" \"}\r\n            {variant === \"cash\" && (\r\n              <Tooltip\r\n                title={\r\n                  <>\r\n                    <span>Cash values are used in lieu of Percent values.</span>\r\n                    <br />\r\n                    <span>Cash values are considered actual payment values.</span>\r\n                  </>\r\n                }\r\n              >\r\n                <span>($)</span>\r\n              </Tooltip>\r\n            )}\r\n            {variant === \"percent\" && (\r\n              <Tooltip title=\"Percentage values are used for predictions.\">\r\n                <span>(%)</span>\r\n              </Tooltip>\r\n            )}\r\n          </Typography>\r\n        </Box>\r\n        <Box flex=\"1 1 auto\">\r\n          <DataEntry variant={variant} timeSeries={accountName} defaultDate={defaultDate} />\r\n        </Box>\r\n      </Box>\r\n    </Paper>\r\n  );\r\n};\r\n","import { Store } from \"@tanstack/store\";\r\nimport { Scenario } from \"shared/models/scenario\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\n\r\nexport interface ScenarioStore {\r\n  scenarios: Partial<Record<number, Scenario[]>>;\r\n  loading: boolean;\r\n  minYear: number;\r\n  maxYear: number;\r\n}\r\n\r\nconst year = getLocalDateTime().year;\r\nexport const scenarioStore = new Store<ScenarioStore>({\r\n  loading: true,\r\n  maxYear: year,\r\n  minYear: year,\r\n  scenarios: {},\r\n});\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { useMemo } from \"react\";\r\nimport { scenarioStore } from \"shared/store/scenario-store\";\r\nimport { ckmeans } from \"simple-statistics\";\r\n\r\nconst clusterTitle = (index: number, length: number) => {\r\n  if (length === 1) {\r\n    return \"Actual\";\r\n  } else if (length == 2) {\r\n    return [\"Low\", \"High\"][index];\r\n  } else {\r\n    return [\"Low\", \"Med\", \"High\"][index];\r\n  }\r\n};\r\n\r\nexport interface Cluster {\r\n  min: number;\r\n  max: number;\r\n  probability: number;\r\n  title: string;\r\n}\r\n\r\nconst clusters = (values?: number[]): Cluster[] => {\r\n  if (!values) {\r\n    return [];\r\n  }\r\n  return ckmeans(values, Math.min(3, values.length)).map((x, i, arr) => {\r\n    return {\r\n      min: Math.min(...x),\r\n      max: Math.max(...x),\r\n      probability: x.length / values.length,\r\n      title: clusterTitle(i, arr.length),\r\n    };\r\n  });\r\n};\r\n\r\nexport const useClusters = (year: number) => {\r\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios[year]);\r\n\r\n  return useMemo(() => {\r\n    if (scenarios?.length === 0) {\r\n      return {\r\n        totalPay: [],\r\n        meritBonus: [],\r\n        retirementBonus: [],\r\n        companyBonus: [],\r\n        pay: [],\r\n        meritIncrease: [],\r\n        scenarios,\r\n        taxablePay: [],\r\n      };\r\n    }\r\n    return {\r\n      totalPay: clusters(scenarios?.map((x) => x.totalPay)),\r\n      meritBonus: clusters(scenarios?.map((x) => x.meritBonus)),\r\n      retirementBonus: clusters(scenarios?.map((x) => x.retirementBonus)),\r\n      companyBonus: clusters(scenarios?.map((x) => x.companyBonus)),\r\n      pay: clusters(scenarios?.map((x) => x.pay.at(-1)?.value ?? 0)),\r\n      meritIncrease: clusters(scenarios?.map((x) => x.meritIncreasePct + x.equityIncreasePct)),\r\n      taxablePay: clusters(scenarios?.map((x) => x.taxablePay)),\r\n      scenarios,\r\n    };\r\n  }, [scenarios]);\r\n};\r\n","import { Box } from \"@mui/material\";\r\nimport { ReactNode } from \"react\";\r\n\r\ninterface CellProps {\r\n  children?: ReactNode;\r\n  secondaryValue?: ReactNode;\r\n  tertiaryValue?: ReactNode;\r\n  title: ReactNode;\r\n  className?: string;\r\n}\r\n\r\nexport const Value = (props: CellProps) => {\r\n  const { children, secondaryValue, tertiaryValue, title, className } = props;\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: \"flex\",\r\n        minWidth: 106,\r\n        height: 64,\r\n        padding: \"0px 8px\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"flex-start\",\r\n        gap: 0.5,\r\n        flexShrink: 0,\r\n      }}\r\n      className={className}\r\n    >\r\n      <Box display={\"flex\"} alignItems={\"center\"} gap={0.5}>\r\n        <Box fontSize={18} fontWeight={700} lineHeight={\"20px\"}>\r\n          {children ? children : \"?\"}\r\n        </Box>\r\n        {!!(secondaryValue ?? tertiaryValue) && (\r\n          <Box\r\n            alignSelf={\"flex-end\"}\r\n            fontSize={12}\r\n            fontWeight={500}\r\n            lineHeight={\"16px\"}\r\n            textTransform={\"uppercase\"}\r\n            color={\"#888\"}\r\n          >\r\n            {secondaryValue ?? tertiaryValue}\r\n          </Box>\r\n        )}\r\n      </Box>\r\n      <Box fontSize={12} fontWeight={500} lineHeight={\"16px\"} textTransform={\"uppercase\"}>\r\n        {title}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","import ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\r\nimport { Table, TableBody, TableCell, TableRow } from \"@mui/material\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { IncomePerPeriod } from \"shared/models/IncomePerPeriod\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\n\r\ninterface IncomePerPeriodTooltipProps {\r\n  incomePerPeriod: IncomePerPeriod[];\r\n}\r\n\r\nexport const IncomePerPeriodTooltip = (props: IncomePerPeriodTooltipProps) => {\r\n  const { incomePerPeriod } = props;\r\n  return (\r\n    <Table sx={{ width: \"max-content\" }}>\r\n      <TableBody>\r\n        {incomePerPeriod.map(({ start, end, value, perPayday, count }, index) => {\r\n          return (\r\n            <TableRow key={index}>\r\n              <TableCell>\r\n                <Cash value={value} compact={false} />\r\n              </TableCell>\r\n              <TableCell>{start.toFormat(shortDate)}</TableCell>\r\n              <TableCell>\r\n                <ArrowForwardIcon />\r\n              </TableCell>\r\n              <TableCell>{end.toFormat(shortDate)}</TableCell>\r\n              <TableCell>\r\n                <Cash value={perPayday} compact={false} /> x {count}\r\n              </TableCell>\r\n            </TableRow>\r\n          );\r\n        })}\r\n        <TableRow>\r\n          <TableCell colSpan={4}>Total:</TableCell>\r\n          <TableCell>\r\n            <Cash value={incomePerPeriod.reduce((acc, curr) => curr.value + acc, 0)} compact={false} />\r\n          </TableCell>\r\n        </TableRow>\r\n      </TableBody>\r\n    </Table>\r\n  );\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { findSameYear } from \"shared/utility/find-same-year\";\r\n\r\nexport const useHasMeritPairs = () => {\r\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\r\n  return useMemo(() => {\r\n    return (\r\n      timeSeries.meritIncreasePct.every((x) => {\r\n        return !!findSameYear(DateTime.fromISO(x.date).year, timeSeries.meritBonusPct);\r\n      }) &&\r\n      timeSeries.meritBonusPct.every((x) => {\r\n        return !!findSameYear(DateTime.fromISO(x.date).year, timeSeries.meritIncreasePct);\r\n      })\r\n    );\r\n  }, [timeSeries.meritBonusPct, timeSeries.meritIncreasePct]);\r\n};\r\n","import { Box, Divider, Stack, Typography } from \"@mui/material\";\r\nimport { ReactNode } from \"react\";\r\n\r\nexport const Card = (props: { title: ReactNode; children?: ReactNode }) => {\r\n  const { title, children } = props;\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        border: \"1px solid rgba(255,255,255,0.1)\",\r\n        borderRadius: 2,\r\n        minWidth: 480,\r\n      }}\r\n    >\r\n      <Typography sx={{ paddingBottom: 1, paddingLeft: 2, paddingTop: 1, display: \"flex\" }} variant=\"h5\">\r\n        {title}\r\n      </Typography>\r\n\r\n      {children && (\r\n        <>\r\n          <Divider />\r\n          <Stack padding={1} direction={\"row\"} spacing={0.5} width={\"max-content\"} minHeight={80}>\r\n            {children}\r\n          </Stack>\r\n        </>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n","import { Box } from \"@mui/system\";\r\nimport { useMemo } from \"react\";\r\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\r\nimport { Cash } from \"./cash\";\r\n\r\ninterface CashProps {\r\n  min?: number;\r\n  max?: number;\r\n  fallback?: number;\r\n  disableTooltip?: boolean;\r\n  compact?: boolean;\r\n  tooltip?: string;\r\n\r\n  placement?:\r\n    | \"top\"\r\n    | \"right\"\r\n    | \"bottom\"\r\n    | \"left\"\r\n    | \"bottom-end\"\r\n    | \"bottom-start\"\r\n    | \"left-end\"\r\n    | \"left-start\"\r\n    | \"right-end\"\r\n    | \"right-start\"\r\n    | \"top-end\"\r\n    | \"top-start\"\r\n    | undefined;\r\n}\r\nexport const CashRange = ({ min, max, fallback, disableTooltip, compact = true }: CashProps) => {\r\n  const showRange = useMemo(() => {\r\n    const minFormatted = compact ? formatCashShort(min ?? 0) : formatCash(min ?? 0);\r\n    const maxFormatted = compact ? formatCashShort(max ?? 0) : formatCash(max ?? 0);\r\n    return minFormatted !== maxFormatted;\r\n  }, [compact, max, min]);\r\n\r\n  return (\r\n    <Box>\r\n      {!showRange && (\r\n        <Cash\r\n          fallback={fallback}\r\n          value={max}\r\n          tooltip={min != max ? `${formatCash(min ?? 0)} - ` : undefined}\r\n          disableTooltip={disableTooltip}\r\n          compact={compact}\r\n        />\r\n      )}\r\n      {showRange && (\r\n        <>\r\n          <Cash value={min} fallback={fallback} disableTooltip={disableTooltip} compact={compact} />\r\n          <span> - </span>\r\n          <Cash value={max} fallback={fallback} disableTooltip={disableTooltip} compact={compact} />\r\n        </>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n","import { Box } from \"@mui/system\";\r\nimport { Percent } from \"./percent\";\r\n\r\ninterface PercentProps {\r\n  min?: number;\r\n  max?: number;\r\n  fallback?: number;\r\n}\r\n\r\nexport const PercentRange = ({ min, max, fallback }: PercentProps) => {\r\n  return (\r\n    <Box>\r\n      {(max ?? 0) / (min ?? 1) <= 1.005 && <Percent fallback={fallback} value={max} />}\r\n      {(max ?? 0) / (min ?? 1) > 1.005 && (\r\n        <>\r\n          <Percent value={min} fallback={fallback} />\r\n          <span> - </span>\r\n          <Percent value={max} fallback={fallback} />\r\n        </>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n","import { Box } from \"@mui/material\";\r\nimport { Value } from \"capabilities/projected-income/components/value\";\r\nimport { Cluster } from \"capabilities/projected-income/hooks/use-gradient\";\r\nimport { DateTime } from \"luxon\";\r\nimport { CashRange } from \"shared/components/formatters/cash-range\";\r\nimport { Percent } from \"shared/components/formatters/percent\";\r\nimport { PercentRange } from \"shared/components/formatters/percent-range\";\r\n\r\ninterface ClusterValueProps extends Cluster {\r\n  compact?: boolean;\r\n}\r\n\r\nexport const ClusterValue = (props: ClusterValueProps) => {\r\n  const { min, max, probability, title, compact } = props;\r\n  return (\r\n    <Value\r\n      title={\r\n        <Box display={\"flex\"} gap={1}>\r\n          <span>{title}</span>\r\n          {probability < 1 && <Percent probability={probability} value={probability} />}\r\n        </Box>\r\n      }\r\n    >\r\n      {min < 1 && min > 0 && <PercentRange min={min} max={max} />}\r\n      {min > 1 && <CashRange compact={compact} min={min} max={max} />}\r\n      {min === 0 && 0}\r\n    </Value>\r\n  );\r\n};\r\n\r\nexport const ClusterValues = (props: { clusters: Cluster[]; eventDate?: DateTime; compact?: boolean }) => {\r\n  const { clusters, eventDate, compact = true } = props;\r\n  return clusters.map((x, i, arr) => {\r\n    const title = arr.length === 1 && (eventDate?.diffNow().toMillis() ?? -1) > 0 ? \"Expected\" : x.title;\r\n    return <ClusterValue {...x} title={title} compact={compact} key={i} />;\r\n  });\r\n};\r\n","import { Box, Stack } from \"@mui/system\";\r\nimport { DatePicker } from \"@mui/x-date-pickers\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo, useState } from \"react\";\r\nimport { Duration } from \"shared/components/formatters/duration\";\r\nimport { useDateRanges, useDates } from \"shared/hooks/use-dates\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { Layout } from \"./components/data-entry/data-entry\";\r\nimport { useClusters } from \"./hooks/use-gradient\";\r\nimport { Alert, CircularProgress, Tooltip } from \"@mui/material\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { Value } from \"./components/value\";\r\nimport { IncomePerPeriodTooltip } from \"./components/income-per-period\";\r\nimport { useHasMeritPairs } from \"./hooks/use-has-merit-pairs\";\r\nimport { IncomePerPeriod } from \"shared/models/IncomePerPeriod\";\r\nimport { Card } from \"shared/components/card\";\r\nimport { ClusterValues } from \"shared/components/formatters/cluster-value\";\r\nimport { scenarioStore } from \"shared/store/scenario-store\";\r\n\r\nexport const ProjectedIncome = () => {\r\n  const [selectedYear, setSelectedYear] = useState(getLocalDateTime().year);\r\n\r\n  const hasMissingPairs = useHasMeritPairs();\r\n  const clusters = useClusters(selectedYear);\r\n  const dates = useDates(selectedYear);\r\n  const dateRanges = useDateRanges(selectedYear);\r\n\r\n  const basePay = useMemo(() => {\r\n    if (clusters.pay.length !== 1) {\r\n      return;\r\n    }\r\n    return clusters.scenarios?.[0].basePay;\r\n  }, [clusters.pay.length, clusters.scenarios]);\r\n\r\n  const aprToApr = useMemo(() => {\r\n    if (clusters.pay.length !== 1) {\r\n      return;\r\n    }\r\n    return clusters.scenarios?.[0].aprToApr;\r\n  }, [clusters.pay.length, clusters.scenarios]);\r\n\r\n  const paychecks = useMemo(() => {\r\n    if (clusters.pay.length !== 1) {\r\n      return;\r\n    }\r\n\r\n    const payPeriods =\r\n      clusters.scenarios?.[0].payments.filter(\r\n        (x) => x.payedOn >= dateRanges.base.start && x.payedOn <= dateRanges.base.end\r\n      ) ?? [];\r\n\r\n    return payPeriods\r\n      .reduceRight((acc, curr) => {\r\n        if (acc[0]?.[0]?.value === curr.value) {\r\n          acc[0].unshift(curr);\r\n        } else {\r\n          acc.unshift([curr]);\r\n        }\r\n\r\n        return acc;\r\n      }, [] as (typeof payPeriods)[])\r\n      .reduce((acc, curr) => {\r\n        acc.push({\r\n          start: curr[0].payedOn,\r\n          end: curr[curr.length - 1].payedOn,\r\n          value: curr.reduce((acc, curr) => acc + curr.value, 0),\r\n          perPayday: curr[0].value,\r\n          count: curr.length,\r\n        });\r\n        return acc;\r\n      }, [] as IncomePerPeriod[]);\r\n  }, [clusters.pay.length, clusters.scenarios, dateRanges.base.end, dateRanges.base.start]);\r\n\r\n  const scenarios = useStore(scenarioStore);\r\n\r\n  return (\r\n    <Box display=\"flex\" flexDirection=\"row\" height=\"100%\" width={\"100%\"}>\r\n      <Box flex=\"0 1 auto\">\r\n        <Stack gap={2} direction={\"column\"} overflow={\"auto\"} height=\"100%\" paddingRight={1}>\r\n          <Card\r\n            title={\r\n              <Box display=\"flex\" alignItems={\"center\"} gap={2} width={\"100%\"}>\r\n                <span>Income</span>\r\n                <Duration dateTime={dates.companyBonus} />\r\n                <Box sx={{ display: \"flex\", marginLeft: \"auto\", alignItems: \"center\", flexWrap: \"wrap\" }}>\r\n                  {scenarios.loading && <CircularProgress style={{ width: 20, height: 20 }} />}\r\n                </Box>\r\n                <DatePicker\r\n                  sx={{ width: 90, marginRight: 2 }}\r\n                  label={\"year\"}\r\n                  views={[\"year\"]}\r\n                  minDate={getLocalDateTime().set({ year: scenarios.minYear })}\r\n                  maxDate={getLocalDateTime().set({ year: scenarios.maxYear })}\r\n                  defaultValue={getLocalDateTime()}\r\n                  slotProps={{\r\n                    textField: {\r\n                      variant: \"standard\",\r\n                      label: \"\",\r\n                    },\r\n                  }}\r\n                  onYearChange={(year) => {\r\n                    setSelectedYear(year.year);\r\n                  }}\r\n                />\r\n              </Box>\r\n            }\r\n          >\r\n            <ClusterValues clusters={clusters.totalPay} eventDate={dates.companyBonus} />\r\n          </Card>\r\n          <Card\r\n            title={\r\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\r\n                <span>Paycheck</span>\r\n                <Duration dateTime={dates.meritIncrease} />\r\n              </Box>\r\n            }\r\n          >\r\n            <ClusterValues clusters={clusters.pay} eventDate={dates.meritIncrease} compact={false} />\r\n            {basePay && (\r\n              <Tooltip\r\n                componentsProps={{\r\n                  tooltip: {\r\n                    sx: {\r\n                      maxWidth: \"none\",\r\n                    },\r\n                  },\r\n                }}\r\n                title={paychecks && <IncomePerPeriodTooltip incomePerPeriod={paychecks} />}\r\n              >\r\n                <div>\r\n                  <Value title={\"Base Pay\"}>\r\n                    <Cash disableTooltip value={basePay} />\r\n                  </Value>\r\n                </div>\r\n              </Tooltip>\r\n            )}\r\n            {aprToApr && (\r\n              <Value title={\"APR to APR\"}>\r\n                <Cash value={aprToApr} />\r\n              </Value>\r\n            )}\r\n          </Card>\r\n          <Card\r\n            title={\r\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\r\n                <span>Merit Increase</span>\r\n                <Duration dateTime={dates.meritIncrease} />\r\n              </Box>\r\n            }\r\n          >\r\n            <ClusterValues clusters={clusters.meritIncrease} eventDate={dates.meritIncrease} />\r\n          </Card>\r\n\r\n          <Card\r\n            title={\r\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\r\n                <span>Merit Bonus</span>\r\n                <Duration dateTime={dates.meritBonus} />\r\n              </Box>\r\n            }\r\n          >\r\n            <ClusterValues clusters={clusters.meritBonus} eventDate={dates.meritBonus} />\r\n          </Card>\r\n          <Card\r\n            title={\r\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\r\n                <span>Company Bonus</span>\r\n                <Duration dateTime={dates.companyBonus} />\r\n              </Box>\r\n            }\r\n          >\r\n            <ClusterValues clusters={clusters.companyBonus} eventDate={dates.companyBonus} />\r\n          </Card>\r\n          <Card\r\n            title={\r\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\r\n                <span>Retirement Bonus</span>\r\n                <Duration dateTime={dates.retirementBonus} />\r\n              </Box>\r\n            }\r\n          >\r\n            <ClusterValues clusters={clusters.retirementBonus} eventDate={dates.retirementBonus} />\r\n          </Card>\r\n          {!hasMissingPairs && (\r\n            <Alert severity=\"error\">Every Merit Increase must have a paired Merit Bonus percent</Alert>\r\n          )}\r\n        </Stack>\r\n      </Box>\r\n      <Box flex=\"1 1 auto\" overflow={\"auto\"} paddingBottom={2} paddingLeft={1}>\r\n        <Box display={\"flex\"} height={\"100%\"} width={\"100%\"} gap={2}>\r\n          <Layout\r\n            accountName=\"paycheck\"\r\n            variant=\"cash\"\r\n            defaultDate={DateTime.fromObject({\r\n              day: 1,\r\n              month: 4,\r\n              year: selectedYear,\r\n            })}\r\n            title=\"Income Per Paycheck\"\r\n          />\r\n          <Layout\r\n            title=\"Merit Increase\"\r\n            accountName=\"meritIncreasePct\"\r\n            variant=\"percent\"\r\n            defaultDate={dates.meritIncrease}\r\n          />\r\n          <Layout title=\"Equity Increase\" accountName=\"equityPct\" variant=\"percent\" defaultDate={dates.meritIncrease} />\r\n          <Layout title=\"Merit Bonus\" accountName=\"meritBonusPct\" variant=\"percent\" defaultDate={dates.meritBonus} />\r\n          <Layout title=\"Merit Bonus\" accountName=\"meritBonus\" variant=\"cash\" defaultDate={dates.meritBonus} />\r\n          <Layout\r\n            title=\"Company Bonus Factor\"\r\n            accountName=\"companyBonusPct\"\r\n            defaultDate={dates.companyBonus}\r\n            variant=\"percent\"\r\n          />\r\n          <Layout title=\"Company Bonus\" accountName=\"companyBonus\" defaultDate={dates.companyBonus} variant=\"cash\" />\r\n          <Layout\r\n            title=\"Retirement Bonus\"\r\n            accountName=\"retirementBonus\"\r\n            defaultDate={dates.retirementBonus}\r\n            variant=\"cash\"\r\n          />\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","import { useMemo } from \"react\";\r\nimport { AccountData } from \"shared/models/account-data\";\r\n\r\nexport const useMostFrequentValue = (data: AccountData[]): number | undefined => {\r\n  return useMemo(() => {\r\n    return Object.entries(\r\n      Object.groupBy(\r\n        data.map((x) => x.value),\r\n        (x) => x\r\n      )\r\n    )\r\n      .map(([key, values]) => [+key, values?.length ?? 0])\r\n      .sort(([, a], [, b]) => {\r\n        return b - a;\r\n      })[0]?.[0];\r\n  }, [data]);\r\n};\r\n","import { TimeSpanValue } from \"capabilities/projected-wealth/hooks/use-projected-pay\";\r\nimport { DateTime } from \"luxon\";\r\nimport { AccountData } from \"shared/models/account-data\";\r\n\r\nexport const valueByDateRange = (account: AccountData[]): TimeSpanValue[] => {\r\n  return account.map((x, index, array) => {\r\n    const next = array[index + 1];\r\n    return {\r\n      start: DateTime.fromISO(x.date),\r\n      end: (next?.date ? DateTime.fromISO(next?.date).startOf(\"day\") : DateTime.fromISO(x.date).plus({ years: 1 }))\r\n        .minus({ days: 1 })\r\n        .endOf(\"day\"),\r\n      value: x.value,\r\n    };\r\n  });\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { findSameYear } from \"shared/utility/find-same-year\";\r\nimport { useMostFrequentValue } from \"./use-most-frequent-value\";\r\nimport { valueByDateRange } from \"shared/utility/get-values-by-date-range\";\r\n\r\nexport interface TimeSpanValue {\r\n  start: DateTime;\r\n  end: DateTime;\r\n  value: number;\r\n}\r\n\r\nconst systemYear = getLocalDateTime().year;\r\nconst defaultValue = {\r\n  start: DateTime.fromObject({\r\n    month: 1,\r\n    day: 1,\r\n    year: systemYear,\r\n  }),\r\n  end: DateTime.fromObject({\r\n    month: 12,\r\n    day: 31,\r\n    year: systemYear,\r\n  }).endOf(\"day\"),\r\n  value: 0,\r\n};\r\n\r\nexport interface ProjectedPay {\r\n  start: DateTime<true> | DateTime<false>;\r\n  end: DateTime<true> | DateTime<false>;\r\n  value: number;\r\n}\r\n\r\nexport const useProjectedPay = (): ProjectedPay[] => {\r\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\r\n  const baseIncome = timeSeries.paycheck;\r\n  const meritPct = useMostFrequentValue(timeSeries.meritIncreasePct);\r\n\r\n  return useMemo(() => {\r\n    const payPerPeriod = valueByDateRange(baseIncome);\r\n    const mostRecentPay = payPerPeriod[payPerPeriod.length - 1] ?? defaultValue;\r\n\r\n    for (let i = 0; i < 2; i++) {\r\n      const { start, end, value } = payPerPeriod[0] ?? mostRecentPay;\r\n      const startDate = start.plus({ years: -1 }).startOf(\"day\");\r\n      const equity = findSameYear(start, timeSeries.equityPct)?.value ?? 0;\r\n      const merit = findSameYear(start, timeSeries.meritIncreasePct)?.value ?? meritPct ?? 0;\r\n      const multiplier = 1 / (1 + merit + equity);\r\n\r\n      payPerPeriod.unshift({\r\n        start: startDate,\r\n        end: end.plus({ years: -1 }).endOf(\"day\"),\r\n        value: Math.round(value * multiplier),\r\n      });\r\n    }\r\n\r\n    const startIdx = payPerPeriod.length;\r\n    for (let i = 0; i < 11; i++) {\r\n      const { start, end, value } = payPerPeriod[startIdx + i - 1] ?? mostRecentPay;\r\n      const startDate = start.plus({ years: 1 });\r\n      const equity = findSameYear(startDate, timeSeries.equityPct)?.value ?? 0;\r\n      const merit = findSameYear(startDate, timeSeries.meritIncreasePct)?.value ?? meritPct ?? 0;\r\n      const multiplier = 1 + merit + equity;\r\n\r\n      payPerPeriod.push({\r\n        start: startDate,\r\n        end: end.plus({ years: 1 }).endOf(\"day\"),\r\n        value: Math.round(value * multiplier),\r\n      });\r\n    }\r\n\r\n    return payPerPeriod;\r\n  }, [baseIncome, meritPct, timeSeries.equityPct, timeSeries.meritIncreasePct]);\r\n};\r\n","import { DateTime } from \"luxon\";\r\n\r\nexport const aPayday = DateTime.fromObject({ month: 12, day: 1, year: 2023 });\r\n","import { DateTime } from \"luxon\";\r\n\r\nexport function DateRangesOverlap(a: { start: DateTime; end: DateTime }, b: { start: DateTime; end: DateTime }) {\r\n  return a.start <= b.end && b.start <= a.end;\r\n}\r\n","import { DateTime } from \"luxon\";\r\n\r\nexport interface PayPeriod {\r\n  start: DateTime;\r\n  end: DateTime;\r\n  payedOn: DateTime;\r\n}\r\n\r\nexport const getPayPeriods = (anyPayday: DateTime, start: DateTime, end: DateTime): PayPeriod[] => {\r\n  const diff = anyPayday.diff(start, [\"weeks\", \"days\"]);\r\n  const startPayDay = start.plus({\r\n    days: diff.days,\r\n    weeks: +(diff.weeks % 2 !== 0),\r\n  });\r\n\r\n  const numPayDays = end.diff(start, [\"weeks\", \"days\"]).weeks / 2;\r\n  const periods = [];\r\n  for (let i = 0; i <= numPayDays; i++) {\r\n    periods.push({\r\n      start: startPayDay.plus({ weeks: i * 2 - 3, day: 3 }),\r\n      end: startPayDay.plus({ weeks: i * 2 - 1 }).endOf(\"day\"),\r\n      payedOn: startPayDay.plus({ weeks: i * 2 }),\r\n    });\r\n  }\r\n\r\n  return periods.filter((x) => x.payedOn > start && x.payedOn < end);\r\n};\r\n","import { differenceInBusinessDays } from \"date-fns/differenceInBusinessDays\";\r\nimport { DateTime } from \"luxon\";\r\nimport { ProjectedPay } from \"capabilities/projected-wealth/hooks/use-projected-pay\";\r\nimport { aPayday } from \"./a-payday\";\r\nimport { DateRangesOverlap } from \"./date-ranges-overlap\";\r\nimport { PayPeriod, getPayPeriods } from \"./get-pay-periods\";\r\n\r\nexport interface PaymentPeriod extends PayPeriod {\r\n  value: number;\r\n}\r\n\r\nexport function getPayments(startDate: DateTime, endDate: DateTime, pay: ProjectedPay[]): PaymentPeriod[] {\r\n  const payPeriods = getPayPeriods(aPayday, startDate, endDate);\r\n  return payPeriods.map((payPeriod) => {\r\n    const dateRanges = pay.filter((x) => DateRangesOverlap(x, payPeriod));\r\n    const payDuringPeriod = dateRanges.map((x) => {\r\n      const start = DateTime.max(x.start, payPeriod.start);\r\n      const end = DateTime.min(x.end, payPeriod.end);\r\n      const businessDays = differenceInBusinessDays(end.plus({ milliseconds: 1 }).toJSDate(), start.toJSDate());\r\n      const value = (x.value / 10) * Math.max(1, businessDays);\r\n      return {\r\n        start,\r\n        end,\r\n        value,\r\n      };\r\n    });\r\n    const sum = payDuringPeriod.reduce((acc, curr) => acc + curr.value, 0);\r\n\r\n    return {\r\n      ...payPeriod,\r\n      value: sum,\r\n    };\r\n  });\r\n}\r\n","import { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { PayPeriod } from \"shared/utility/get-pay-periods\";\r\nimport { useProjectedPay } from \"./use-projected-pay\";\r\nimport { getPayments } from \"shared/utility/get-payments\";\r\nimport { IncomePerPeriod } from \"shared/models/IncomePerPeriod\";\r\n\r\nexport interface BaseIncome {\r\n  totalIncome: number;\r\n  payPeriods: (PayPeriod & { value: number })[];\r\n  incomePerPeriod: IncomePerPeriod[];\r\n}\r\n\r\nexport const useBaseIncome = (startDate: DateTime, endDate: DateTime): BaseIncome => {\r\n  const pay = useProjectedPay();\r\n\r\n  return useMemo(() => {\r\n    const payPeriods = getPayments(startDate, endDate, pay);\r\n    const totalIncome = payPeriods.reduce((acc, curr) => acc + curr.value, 0);\r\n    const incomePerPeriod = payPeriods\r\n      .reduceRight((acc, curr) => {\r\n        if (acc[0]?.[0]?.value === curr.value) {\r\n          acc[0].unshift(curr);\r\n        } else {\r\n          acc.unshift([curr]);\r\n        }\r\n\r\n        return acc;\r\n      }, [] as (typeof payPeriods)[])\r\n      .reduce((acc, curr) => {\r\n        acc.push({\r\n          start: curr[0].payedOn,\r\n          end: curr[curr.length - 1].payedOn,\r\n          value: curr.reduce((acc, curr) => acc + curr.value, 0),\r\n          perPayday: curr[0].value,\r\n          count: curr.length,\r\n        });\r\n        return acc;\r\n      }, [] as IncomePerPeriod[]);\r\n\r\n    return { totalIncome, payPeriods, incomePerPeriod };\r\n  }, [startDate, endDate, pay]);\r\n};\r\n","export interface Outcome {\r\n  min: number;\r\n  max: number;\r\n  avg: number;\r\n  actual?: number;\r\n}\r\n\r\nexport interface BonusOutcomes {\r\n  percent: Outcome;\r\n  cash: Outcome;\r\n}\r\n\r\nexport const minMaxAvg = (values: number[]): Outcome => {\r\n  if (values.length === 0) {\r\n    return { min: 0, max: 0, avg: 0 };\r\n  }\r\n  return values.reduce(\r\n    (acc, curr, index, arr) => {\r\n      const { min, max, avg } = acc;\r\n      return {\r\n        min: Math.min(curr, min),\r\n        max: Math.max(curr, max),\r\n        avg: index === arr.length - 1 ? (avg + curr) / arr.length : avg + curr,\r\n      };\r\n    },\r\n    { min: Infinity, max: 0, avg: 0 },\r\n  );\r\n};\r\n\r\nexport const outcomeFromSingle = (value: number): Outcome => {\r\n  return { min: value, max: value, avg: value, actual: value };\r\n};\r\n\r\nexport const actualizedOutcome = (outcome: Outcome): Outcome =>\r\n  outcome.actual ? outcomeFromSingle(outcome.actual) : outcome;\r\n\r\nexport const scaleOutcome = (outcome: Outcome, value: number): Outcome => {\r\n  return {\r\n    min: outcome.min * value,\r\n    max: outcome.max * value,\r\n    avg: outcome.avg * value,\r\n    actual: outcome.actual ? outcome.actual * value : undefined,\r\n  };\r\n};\r\nexport const AddConstantOutcome = (outcome: Outcome, value: number): Outcome => {\r\n  return {\r\n    min: outcome.min + value,\r\n    max: outcome.max + value,\r\n    avg: outcome.avg + value,\r\n    actual: outcome.actual ? outcome.actual + value : undefined,\r\n  };\r\n};\r\n\r\nexport const MultiplyOutcome = (outcomeA: Outcome, outcomeB: Outcome): Outcome => {\r\n  return {\r\n    min: outcomeA.min * outcomeB.min,\r\n    max: outcomeA.max * outcomeB.max,\r\n    avg: outcomeA.avg * outcomeB.avg,\r\n    actual: outcomeA.actual != undefined && outcomeB.actual != undefined ? outcomeA.actual * outcomeB.avg : undefined,\r\n  };\r\n};\r\n\r\nexport const AddOutcome = (...outcomes: Outcome[]): Outcome => {\r\n  const everyActualDefined = outcomes.every((x) => x.actual != undefined);\r\n  return outcomes.reduce(\r\n    (acc, curr) => {\r\n      return {\r\n        min: acc.min + curr.min,\r\n        avg: acc.avg + curr.avg,\r\n        max: acc.max + curr.max,\r\n        actual: everyActualDefined ? (acc.actual ?? 0) + (curr.actual ?? 0) : undefined,\r\n      };\r\n    },\r\n    { min: 0, max: 0, avg: 0, actual: undefined },\r\n  );\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { useDateRanges } from \"shared/hooks/use-dates\";\r\nimport { store } from \"shared/store\";\r\nimport { findSameYear } from \"shared/utility/find-same-year\";\r\nimport { BonusOutcomes, actualizedOutcome, minMaxAvg, scaleOutcome } from \"shared/utility/min-max-avg\";\r\nimport { useBaseIncome } from \"./use-base-income\";\r\n\r\nexport const useCompanyBonus = (year: number): BonusOutcomes => {\r\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\r\n  const dateRanges = useDateRanges(year);\r\n  const { totalIncome } = useBaseIncome(dateRanges.companyBonus.start, dateRanges.companyBonus.end);\r\n\r\n  return useMemo(() => {\r\n    const mostRecentBonus = findSameYear(year, timeSeries.companyBonus);\r\n    const mostRecentPercent = findSameYear(year, timeSeries.companyBonusPct);\r\n\r\n    const meritFactor = timeSeries.meritBonusPct\r\n      .filter((x) => DateTime.fromISO(x.date).year <= year)\r\n      .slice(-3)\r\n      .reduce((acc, curr) => acc + curr.value, 0);\r\n\r\n    const outcomes = minMaxAvg(timeSeries.companyBonusPct.map((x) => x.value));\r\n    const cash = scaleOutcome(outcomes, meritFactor * totalIncome);\r\n    const projectedActual = mostRecentPercent?.value ? mostRecentPercent?.value * meritFactor * totalIncome : undefined;\r\n\r\n    return {\r\n      percent: actualizedOutcome({\r\n        ...outcomes,\r\n        actual: mostRecentPercent?.value,\r\n      }),\r\n      cash: actualizedOutcome({\r\n        ...cash,\r\n        actual: mostRecentBonus?.value ?? projectedActual,\r\n      }),\r\n    };\r\n  }, [totalIncome, timeSeries.companyBonus, timeSeries.companyBonusPct, timeSeries.meritBonusPct, year]);\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { useDateRanges } from \"shared/hooks/use-dates\";\r\nimport { store } from \"shared/store\";\r\nimport { findSameYear } from \"shared/utility/find-same-year\";\r\nimport { BonusOutcomes, actualizedOutcome, minMaxAvg, scaleOutcome } from \"shared/utility/min-max-avg\";\r\nimport { useBaseIncome } from \"./use-base-income\";\r\nimport { useMostFrequentValue } from \"./use-most-frequent-value\";\r\n\r\nexport const useMeritBonus = (year: number): BonusOutcomes => {\r\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\r\n  const ranges = useDateRanges(year);\r\n  const { totalIncome } = useBaseIncome(ranges.meritBonus.start, ranges.meritBonus.end);\r\n\r\n  const bonusAmount = useMemo(() => {\r\n    return findSameYear(year, timeSeries.meritBonus)?.value;\r\n  }, [timeSeries.meritBonus, year]);\r\n\r\n  const bonusPercent = useMemo(() => {\r\n    return findSameYear(year, timeSeries.meritBonusPct)?.value;\r\n  }, [timeSeries.meritBonusPct, year]);\r\n\r\n  const frequentMeritBonusPercent = useMostFrequentValue(timeSeries.meritBonusPct);\r\n\r\n  return useMemo(() => {\r\n    const meritOutcome = minMaxAvg(\r\n      timeSeries.meritBonusPct.filter((x) => DateTime.fromISO(x.date).year <= year).map((x) => x.value)\r\n    );\r\n    meritOutcome.avg = frequentMeritBonusPercent ?? 0;\r\n\r\n    return {\r\n      percent: actualizedOutcome({ ...meritOutcome, actual: bonusPercent }),\r\n      cash: actualizedOutcome({\r\n        ...scaleOutcome(meritOutcome, totalIncome),\r\n        actual: bonusAmount ?? (bonusPercent ? totalIncome * bonusPercent : undefined),\r\n      }),\r\n    };\r\n  }, [bonusAmount, bonusPercent, frequentMeritBonusPercent, timeSeries.meritBonusPct, totalIncome, year]);\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { useBaseIncome } from \"capabilities/projected-wealth/hooks/use-base-income\";\r\nimport { useCompanyBonus } from \"capabilities/projected-wealth/hooks/use-company-bonus\";\r\nimport { useDateRanges, useDates } from \"shared/hooks/use-dates\";\r\nimport { useMeritBonus } from \"capabilities/projected-wealth/hooks/use-merit-bonus\";\r\nimport { findNearestIdxOnOrBefore } from \"shared/utility/find-nearest-on-or-before\";\r\n\r\nexport const usePayments = () => {\r\n  const year = DateTime.local().year;\r\n  const dateRanges = useDateRanges(year);\r\n  const dates = useDates(year);\r\n  const { payPeriods } = useBaseIncome(dateRanges.base.start, dateRanges.base.end);\r\n\r\n  const merit = useMeritBonus(year);\r\n  const companyBonus = useCompanyBonus(year);\r\n\r\n  return useMemo(() => {\r\n    const cumulativePay = payPeriods.map((x) => {\r\n      return { ...x, cumulative: 0 };\r\n    });\r\n\r\n    const payBeforeMerit = findNearestIdxOnOrBefore(dates.meritBonus, cumulativePay, (x) => x.payedOn);\r\n\r\n    cumulativePay.splice(payBeforeMerit + 1, 0, {\r\n      cumulative: 0,\r\n      value: merit.cash.actual ?? merit.cash.avg,\r\n      start: dates.meritBonus,\r\n      end: dates.meritBonus,\r\n      payedOn: dates.meritBonus,\r\n    });\r\n\r\n    const payBeforeCompanyBonus = findNearestIdxOnOrBefore(dates.companyBonus, cumulativePay, (x) => x.payedOn);\r\n\r\n    cumulativePay.splice(payBeforeCompanyBonus + 1, 0, {\r\n      cumulative: 0,\r\n      value: companyBonus.cash.actual ?? companyBonus.cash.avg,\r\n      start: dates.companyBonus,\r\n      end: dates.companyBonus,\r\n      payedOn: dates.companyBonus,\r\n    });\r\n\r\n    cumulativePay.forEach((x, i, arr) => {\r\n      x.cumulative = i > 0 ? arr[i - 1].cumulative + x.value : x.value;\r\n    });\r\n\r\n    const previousPay = findNearestIdxOnOrBefore(DateTime.local(), payPeriods, (x) => x.payedOn);\r\n\r\n    const remainingPayments = payPeriods.length - previousPay;\r\n\r\n    return {\r\n      payments: cumulativePay,\r\n      nextPaymentIdx: previousPay + 1,\r\n      numRemaining: remainingPayments,\r\n      totalBasePayments: payPeriods.length,\r\n      totalPayments: cumulativePay.length,\r\n    };\r\n  }, [\r\n    companyBonus.cash.actual,\r\n    companyBonus.cash.avg,\r\n    dates.companyBonus,\r\n    dates.meritBonus,\r\n    merit.cash.actual,\r\n    merit.cash.avg,\r\n    payPeriods,\r\n  ]);\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { useMemo } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { usePayments } from \"./use-payments\";\r\n\r\nexport const useFutureMedicareTax = () => {\r\n  const { payments, nextPaymentIdx } = usePayments();\r\n  const config = useStore(store, (x) => x.projectedWealth);\r\n\r\n  return useMemo(() => {\r\n    const total =\r\n      config.medicareSupplementalTaxRate *\r\n      Math.min(0, config.medicareSupplementalTaxThreshold - (payments.at(-1)?.cumulative ?? 0));\r\n\r\n    const firstOccurrence = payments.find((x) => x.cumulative >= config.medicareSupplementalTaxThreshold)?.payedOn;\r\n\r\n    const remaining = payments\r\n      .slice(nextPaymentIdx)\r\n      .filter((x) => x.cumulative >= config.medicareSupplementalTaxThreshold)\r\n      .reduce((acc, curr) => {\r\n        return (\r\n          acc -\r\n          Math.min(curr.value, curr.cumulative - config.medicareSupplementalTaxThreshold) *\r\n            config.medicareSupplementalTaxRate\r\n        );\r\n      }, 0);\r\n\r\n    const perPaycheck = total && (payments.at(-1)?.value ?? 0) * config.medicareSupplementalTaxRate;\r\n\r\n    return {\r\n      total,\r\n      remaining,\r\n      perPaycheck,\r\n      firstOccurrence,\r\n    };\r\n  }, [config.medicareSupplementalTaxRate, config.medicareSupplementalTaxThreshold, nextPaymentIdx, payments]);\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { useMemo } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { usePayments } from \"./use-payments\";\r\n\r\nexport const useFutureRetirementContributions = () => {\r\n  const { numRemaining } = usePayments();\r\n  const retirementContribution = useStore(store, (x) => x.projectedWealth.retirementContributionPaycheck);\r\n\r\n  return useMemo(() => {\r\n    return {\r\n      remaining: numRemaining * retirementContribution,\r\n      perPaycheck: retirementContribution,\r\n    };\r\n  }, [numRemaining, retirementContribution]);\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\n\r\nexport const useFutureSavings = () => {\r\n  const config = useStore(store, (x) => x.projectedWealth);\r\n  return useMemo(() => {\r\n    const systemYear = getLocalDateTime().year;\r\n    return {\r\n      remaining:\r\n        config.savingsPerMonth *\r\n        DateTime.fromObject({\r\n          day: 31,\r\n          month: 12,\r\n          year: systemYear,\r\n        })\r\n          .endOf(\"day\")\r\n          .diffNow(\"months\").months,\r\n      perMonth: config.savingsPerMonth,\r\n    };\r\n  }, [config.savingsPerMonth]);\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { useMemo } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { usePayments } from \"./use-payments\";\r\n\r\nexport const useFutureSocialSecurity = () => {\r\n  const { payments, nextPaymentIdx } = usePayments();\r\n  const config = useStore(store, (x) => x.projectedWealth);\r\n\r\n  return useMemo(() => {\r\n    const total =\r\n      config.socialSecurityTaxRate * Math.max(0, (payments.at(-1)?.cumulative ?? 0) - config.socialSecurityLimit);\r\n    const firstOccurrence = payments.find((x) => x.cumulative >= config.socialSecurityLimit)?.payedOn;\r\n\r\n    const remaining = payments\r\n      .slice(nextPaymentIdx)\r\n      .filter((x) => x.cumulative >= config.socialSecurityLimit)\r\n      .reduce((acc, curr) => {\r\n        return acc + Math.min(curr.value, curr.cumulative - config.socialSecurityLimit) * config.socialSecurityTaxRate;\r\n      }, 0);\r\n\r\n    const perPaycheck = total && config.socialSecurityTaxRate * (payments.at(-1)?.value ?? 0);\r\n\r\n    return {\r\n      total,\r\n      remaining,\r\n      perPaycheck,\r\n      firstOccurrence,\r\n    };\r\n  }, [config.socialSecurityLimit, config.socialSecurityTaxRate, nextPaymentIdx, payments]);\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { ReactNode } from \"react\";\r\n\r\ninterface BeforeAfterProps {\r\n  dateTime?: DateTime;\r\n  before?: ReactNode;\r\n  after?: ReactNode;\r\n}\r\n\r\nexport const BeforeAfter = (props: BeforeAfterProps) => {\r\n  const { dateTime, before, after } = props;\r\n\r\n  if (!dateTime) {\r\n    return null;\r\n  }\r\n\r\n  return DateTime.local() < dateTime ? before : after;\r\n};\r\n","import { Cluster } from \"capabilities/projected-income/hooks/use-gradient\";\r\n\r\nexport const scaleCluster = (cluster: Cluster, factor: number) => {\r\n  return { ...cluster, min: cluster.min * factor, max: cluster.max * factor };\r\n};\r\n\r\nexport const scaleClusters = (clusters: Cluster[], factor: number) => {\r\n  return clusters.map((x) => scaleCluster(x, factor));\r\n};\r\n\r\nexport const ExpectedValue = (Clusers: Cluster[][]) => {\r\n  if (Clusers.length == 0) {\r\n    return [];\r\n  }\r\n\r\n  return [\r\n    Clusers.reduce(\r\n      (acc, curr) => {\r\n        if (curr.length === 0) {\r\n          return acc;\r\n        }\r\n        const mostLikely = curr.reduce((acc, curr) => {\r\n          return acc.probability > curr.probability ? acc : curr;\r\n        });\r\n\r\n        acc.max += mostLikely.max;\r\n        acc.min += mostLikely.min;\r\n        return acc;\r\n      },\r\n      { min: 0, max: 0, title: \"Actual\", probability: 0 }\r\n    ),\r\n  ];\r\n};\r\n","import { Box, Stack } from \"@mui/system\";\r\nimport { Value } from \"capabilities/projected-income/components/value\";\r\nimport { useFutureMedicareTax } from \"capabilities/projected-wealth/hooks/use-future-medicare-tax\";\r\nimport { useFutureRetirementContributions } from \"capabilities/projected-wealth/hooks/use-future-retirement-contributions\";\r\nimport { useFutureSavings } from \"capabilities/projected-wealth/hooks/use-future-savings\";\r\nimport { useFutureSocialSecurity } from \"capabilities/projected-wealth/hooks/use-future-social-security\";\r\nimport { DateTime } from \"luxon\";\r\nimport { BeforeAfter } from \"shared/components/formatters/before-after\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { Duration } from \"shared/components/formatters/duration\";\r\nimport { useDates } from \"shared/hooks/use-dates\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { monthDay } from \"shared/utility/format-date\";\r\nimport { ClusterValues } from \"shared/components/formatters/cluster-value\";\r\nimport { Cluster, useClusters } from \"capabilities/projected-income/hooks/use-gradient\";\r\nimport { Card } from \"shared/components/card\";\r\nimport { scaleClusters, ExpectedValue } from \"shared/utility/cluster-helpers\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { store } from \"shared/store\";\r\nimport { useMemo } from \"react\";\r\n\r\nconst isFuture = (date: DateTime) => date.diffNow(\"milliseconds\").milliseconds > 0;\r\n\r\nexport const FutureEvents = () => {\r\n  const year = getLocalDateTime().year;\r\n  const dates = useDates(year);\r\n\r\n  const savings = useFutureSavings();\r\n  const retirement = useFutureRetirementContributions();\r\n  const medicare = useFutureMedicareTax();\r\n  const socialSecurity = useFutureSocialSecurity();\r\n  const clusters = useClusters(year);\r\n  const bonusTakehomeFactor = useStore(store, (x) => 1 - x.projectedWealth.bonusWitholdingsRate);\r\n\r\n  const total = useMemo(() => {\r\n    const remaining = [\r\n      isFuture(dates.meritBonus) && scaleClusters(clusters.meritBonus, bonusTakehomeFactor),\r\n      isFuture(dates.companyBonus) && scaleClusters(clusters.companyBonus, bonusTakehomeFactor),\r\n      isFuture(dates.retirementBonus) && clusters.retirementBonus,\r\n      [{ min: savings.remaining, max: savings.remaining, probability: 1 }],\r\n      [{ min: retirement.remaining, max: retirement.remaining, probability: 1 }],\r\n      [{ min: socialSecurity.remaining, max: socialSecurity.remaining, probability: 1 }],\r\n      [{ min: medicare.remaining, max: medicare.remaining, probability: 1 }],\r\n    ].filter((x) => x !== false) as Cluster[][];\r\n\r\n    return ExpectedValue(remaining);\r\n  }, [\r\n    bonusTakehomeFactor,\r\n    clusters.companyBonus,\r\n    clusters.meritBonus,\r\n    clusters.retirementBonus,\r\n    dates.companyBonus,\r\n    dates.meritBonus,\r\n    dates.retirementBonus,\r\n    medicare.remaining,\r\n    retirement.remaining,\r\n    savings.remaining,\r\n    socialSecurity.remaining,\r\n  ]);\r\n\r\n  return (\r\n    <>\r\n      <Stack spacing={2}>\r\n        <Card title={`${year} Remaining Projected Wealth`}>\r\n          <ClusterValues clusters={total} eventDate={dates.companyBonus} />\r\n        </Card>\r\n        {isFuture(dates.meritBonus) && (\r\n          <Card\r\n            title={\r\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\r\n                <span>Merit Bonus</span>\r\n                <Duration dateTime={dates.meritBonus} />\r\n              </Box>\r\n            }\r\n          >\r\n            <ClusterValues\r\n              clusters={scaleClusters(clusters.meritBonus, bonusTakehomeFactor)}\r\n              eventDate={dates.meritBonus}\r\n            />\r\n          </Card>\r\n        )}\r\n        {isFuture(dates.companyBonus) && (\r\n          <Card\r\n            title={\r\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\r\n                <span>Company Bonus</span>\r\n                <Duration dateTime={dates.companyBonus} />\r\n              </Box>\r\n            }\r\n          >\r\n            <ClusterValues\r\n              clusters={scaleClusters(clusters.companyBonus, bonusTakehomeFactor)}\r\n              eventDate={dates.companyBonus}\r\n            />\r\n          </Card>\r\n        )}\r\n        {isFuture(dates.retirementBonus) && (\r\n          <Card\r\n            title={\r\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\r\n                <span>Retirement Bonus</span>\r\n                <Duration dateTime={dates.retirementBonus} />\r\n              </Box>\r\n            }\r\n          >\r\n            <ClusterValues clusters={clusters.retirementBonus} eventDate={dates.retirementBonus} />\r\n          </Card>\r\n        )}\r\n        <Card title=\"Taxes\">\r\n          {!!socialSecurity.total && (\r\n            <Value\r\n              title={\"social security cap\"}\r\n              secondaryValue={\r\n                <BeforeAfter\r\n                  dateTime={socialSecurity.firstOccurrence}\r\n                  before={<Cash tooltip=\"Remaining\" value={socialSecurity.remaining} />}\r\n                  after={<Cash tooltip=\"Per Paycheck\" value={socialSecurity.perPaycheck} />}\r\n                />\r\n              }\r\n            >\r\n              <Duration dateFormat={monthDay} variant=\"date\" dateTime={socialSecurity.firstOccurrence}>\r\n                <Cash tooltip=\"Remaining\" value={socialSecurity.remaining} />\r\n              </Duration>\r\n            </Value>\r\n          )}\r\n          {!!medicare.total && (\r\n            <Value\r\n              title={\"medicare supplemental tax\"}\r\n              secondaryValue={\r\n                <BeforeAfter\r\n                  dateTime={medicare.firstOccurrence}\r\n                  before={<Cash tooltip=\"Total\" value={medicare.remaining} />}\r\n                  after={<Cash tooltip=\"Per Paycheck\" value={medicare.perPaycheck} />}\r\n                />\r\n              }\r\n            >\r\n              <Duration dateFormat={monthDay} variant=\"date\" dateTime={medicare.firstOccurrence}>\r\n                <Cash tooltip=\"Remaining\" value={medicare.remaining} />\r\n              </Duration>\r\n            </Value>\r\n          )}\r\n        </Card>\r\n        <Card title={\"Savings & Retirement\"}>\r\n          {!!savings.perMonth && (\r\n            <Value title={\"Expected savings\"} secondaryValue={<Cash tooltip=\"Per Month\" value={savings.perMonth} />}>\r\n              <Cash tooltip=\"Total Remaining\" value={savings.remaining} />\r\n            </Value>\r\n          )}\r\n          {!!retirement.perPaycheck && (\r\n            <Value\r\n              title={\"retirement contribution\"}\r\n              secondaryValue={<Cash tooltip=\"Per Paycheck\" value={retirement.perPaycheck} />}\r\n            >\r\n              <Cash tooltip=\"Total Remaining\" value={retirement.remaining} />\r\n            </Value>\r\n          )}\r\n        </Card>\r\n      </Stack>\r\n    </>\r\n  );\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { store } from \"shared/store\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\n\r\nexport const useEarliestAccountEntry = () => {\r\n  const accounts = useStore(store, (x) => x.wealth);\r\n  return DateTime.fromMillis(\r\n    Object.values(accounts)\r\n      .map((x) => {\r\n        if (x.type === \"account\") {\r\n          return x.data[0]?.date ? DateTime.fromISO(x.data[0].date) : getLocalDateTime();\r\n        }\r\n        return getLocalDateTime();\r\n      })\r\n      .reduce((acc, curr) => Math.min(acc, curr?.toMillis() ?? Infinity), getLocalDateTime().toMillis()),\r\n  );\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { useMemo } from \"react\";\r\nimport { useDateRanges } from \"shared/hooks/use-dates\";\r\nimport { store } from \"shared/store\";\r\nimport { findSameYear } from \"shared/utility/find-same-year\";\r\nimport {\r\n  AddOutcome,\r\n  BonusOutcomes,\r\n  actualizedOutcome,\r\n  outcomeFromSingle,\r\n  scaleOutcome,\r\n} from \"shared/utility/min-max-avg\";\r\nimport { useBaseIncome } from \"./use-base-income\";\r\nimport { useCompanyBonus } from \"./use-company-bonus\";\r\nimport { useMeritBonus } from \"./use-merit-bonus\";\r\n\r\nconst bonusPercent = 0.15;\r\nexport const useRetirementBonus = (year: number): BonusOutcomes => {\r\n  const actual = useStore(store, (x) => findSameYear(year, x.projectedIncome.timeSeries.retirementBonus)?.value);\r\n\r\n  const dateRanges = useDateRanges(year);\r\n  const { totalIncome } = useBaseIncome(dateRanges.retirementBonus.start, dateRanges.retirementBonus.end);\r\n\r\n  const meritBonus = useMeritBonus(year);\r\n  const juneBonus = useCompanyBonus(year);\r\n\r\n  return useMemo(() => {\r\n    const eligibleIncome = outcomeFromSingle(totalIncome);\r\n    const outcome = scaleOutcome(\r\n      AddOutcome(eligibleIncome, actualizedOutcome(meritBonus.cash), actualizedOutcome(juneBonus.cash)),\r\n      bonusPercent\r\n    );\r\n    return {\r\n      cash: actualizedOutcome({ ...outcome, actual: actual ?? outcome.actual }),\r\n      percent: {\r\n        min: 0.15,\r\n        max: 0.15,\r\n        avg: 0.15,\r\n        actual: 0.15,\r\n      },\r\n    };\r\n  }, [actual, juneBonus.cash, meritBonus.cash, totalIncome]);\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { useCompanyBonus } from \"capabilities/projected-wealth/hooks/use-company-bonus\";\r\nimport { useDates } from \"shared/hooks/use-dates\";\r\nimport { useMeritBonus } from \"capabilities/projected-wealth/hooks/use-merit-bonus\";\r\nimport { useRetirementBonus } from \"capabilities/projected-wealth/hooks/use-retirement-bonus\";\r\n\r\nexport const useFutureBonuses = () => {\r\n  const local = DateTime.local();\r\n  const year = local.year;\r\n  const dates = useDates(year);\r\n  const meritBonus = useMeritBonus(year);\r\n  const companyBonus = useCompanyBonus(year);\r\n  const retirementBonus = useRetirementBonus(year);\r\n\r\n  const bonuses = useMemo(() => {\r\n    return (\r\n      [\r\n        [dates.meritBonus, meritBonus.cash.actual ?? meritBonus.cash.avg],\r\n        [dates.companyBonus, companyBonus.cash.actual ?? companyBonus.cash.avg],\r\n        [dates.retirementBonus, retirementBonus.cash.actual ?? retirementBonus.cash.avg],\r\n      ] as [DateTime, number][]\r\n    )\r\n      .map(([payedOn, amount]) => (local < payedOn ? amount : 0))\r\n      .reduce((acc, curr) => acc + curr, 0);\r\n  }, [\r\n    dates.meritBonus,\r\n    dates.companyBonus,\r\n    dates.retirementBonus,\r\n    meritBonus.cash.actual,\r\n    meritBonus.cash.avg,\r\n    companyBonus.cash.actual,\r\n    companyBonus.cash.avg,\r\n    retirementBonus.cash.actual,\r\n    retirementBonus.cash.avg,\r\n    local,\r\n  ]);\r\n\r\n  return bonuses;\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { findNearestOnOrBefore } from \"shared/utility/find-nearest-on-or-before\";\r\nimport { calcEquity, calcLoanBalance } from \"shared/utility/mortgage-calc\";\r\nimport { useEarliestAccountEntry } from \"./use-earliest-account-entry\";\r\nimport { useFutureBonuses } from \"./use-future-bonuses\";\r\nimport { useFutureMedicareTax } from \"./use-future-medicare-tax\";\r\nimport { useFutureRetirementContributions } from \"./use-future-retirement-contributions\";\r\nimport { useFutureSavings } from \"./use-future-savings\";\r\nimport { useFutureSocialSecurity } from \"./use-future-social-security\";\r\n\r\nexport interface TimeSeriesWealth {\r\n  graphDate: Date;\r\n  date: DateTime;\r\n  wealth: number;\r\n  yoyCash?: number;\r\n  yoyPct?: number;\r\n}\r\n\r\nexport const useTimeSeriesWealth = () => {\r\n  const localDateTime = getLocalDateTime();\r\n  const earliest = useEarliestAccountEntry();\r\n  const accounts = useStore(store, (x) => x.wealth);\r\n  const bonuses = useFutureBonuses();\r\n  const savings = useFutureSavings();\r\n  const ssiTaxValue = useFutureSocialSecurity();\r\n  const medicareTaxValue = useFutureMedicareTax();\r\n  const retirementContribution = useFutureRetirementContributions();\r\n\r\n  const data = useMemo(() => {\r\n    if (!earliest.isValid) {\r\n      return [];\r\n    }\r\n\r\n    const futureWealth =\r\n      bonuses +\r\n      savings.remaining +\r\n      retirementContribution.remaining +\r\n      ssiTaxValue.remaining +\r\n      medicareTaxValue.remaining;\r\n\r\n    const dates = new Array(localDateTime.year + 2 - earliest.year)\r\n      .fill(earliest.year)\r\n      .map((x, i) => DateTime.fromObject({ day: 1, month: 1, year: x + i }).startOf(\"day\"));\r\n\r\n    if (!localDateTime.equals(dates[dates.length - 2])) {\r\n      dates.splice(-1, 0, localDateTime);\r\n    }\r\n\r\n    return dates\r\n      .map((date, idx, arr) => {\r\n        const isLast = idx === arr.length - 1;\r\n        const accountWealth = Object.values(accounts)\r\n          .map((x) => {\r\n            if (x.type === \"mortgage\" && x.loan) {\r\n              const houseValue = findNearestOnOrBefore(date, x.data);\r\n              const balance = calcLoanBalance(date, x.loan);\r\n              return calcEquity(x.loan.ownershipPct, houseValue?.value, balance, x.loan.principal);\r\n            } else if (x.type === \"account\") {\r\n              const entry = findNearestOnOrBefore(date, x.data);\r\n              return entry?.value ?? 0;\r\n            }\r\n            return 0;\r\n          })\r\n          .reduce((acc, curr) => acc + curr, 0);\r\n\r\n        return {\r\n          date,\r\n          graphDate: date.toJSDate(),\r\n          wealth: accountWealth + (isLast ? futureWealth : 0),\r\n        };\r\n      })\r\n      .map((x, idx, arr) => {\r\n        if (idx !== arr.length - 1) {\r\n          const benchmarkWealth = arr[idx - 1]?.wealth;\r\n          if (!benchmarkWealth) {\r\n            return x;\r\n          }\r\n          return {\r\n            ...x,\r\n            yoyCash: x.wealth - benchmarkWealth,\r\n            yoyPct: x.wealth / benchmarkWealth - 1,\r\n          };\r\n        }\r\n\r\n        const benchmarkWealth = arr[idx - 2]?.wealth;\r\n        if (!benchmarkWealth) {\r\n          return x;\r\n        }\r\n        return {\r\n          ...x,\r\n          yoyCash: x.wealth - benchmarkWealth,\r\n          yoyPct: x.wealth / benchmarkWealth - 1,\r\n        };\r\n      });\r\n  }, [\r\n    earliest.isValid,\r\n    earliest.year,\r\n    bonuses,\r\n    savings.remaining,\r\n    retirementContribution.remaining,\r\n    ssiTaxValue.remaining,\r\n    medicareTaxValue.remaining,\r\n    localDateTime,\r\n    accounts,\r\n  ]);\r\n  return data as TimeSeriesWealth[];\r\n};\r\n","import { AgCartesianChartOptions, AgLineSeriesOptions } from \"ag-charts-community\";\r\nimport { AgChartsReact } from \"ag-charts-react\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\nimport { useTimeSeriesWealth } from \"../hooks/use-times-series-wealth\";\r\n\r\nexport const WealthChart = () => {\r\n  const data = useTimeSeriesWealth();\r\n\r\n  const series = useMemo(() => {\r\n    return [\r\n      {\r\n        type: \"line\",\r\n        xKey: \"graphDate\",\r\n        yKey: \"wealth\",\r\n        yName: \"Wealth\",\r\n        tooltip: {\r\n          renderer: ({ datum, yKey, xKey }) => ({\r\n            content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCash(datum[yKey])}`,\r\n          }),\r\n        },\r\n      },\r\n      {\r\n        type: \"line\",\r\n        xKey: \"graphDate\",\r\n        yKey: \"yoyCash\",\r\n        yName: \"YoY ($)\",\r\n        tooltip: {\r\n          renderer: ({ datum, yKey, xKey }) => ({\r\n            content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCash(datum[yKey])}`,\r\n          }),\r\n        },\r\n      },\r\n    ] as AgLineSeriesOptions[];\r\n  }, []);\r\n\r\n  const options: AgCartesianChartOptions = useMemo(\r\n    () => ({\r\n      theme: \"ag-default-dark\",\r\n      title: {\r\n        text: `${data[data.length - 1].date.toFormat(shortDate)} Projected wealth ${formatCashShort(\r\n          (data[data.length - 1]?.wealth ?? 0) as number,\r\n        )}`,\r\n      },\r\n      data,\r\n      axes: [\r\n        {\r\n          type: \"time\",\r\n          position: \"bottom\",\r\n          label: {\r\n            format: \"%Y\",\r\n          },\r\n        },\r\n        {\r\n          type: \"number\",\r\n          position: \"left\",\r\n          nice: false,\r\n        },\r\n      ],\r\n      series,\r\n    }),\r\n    [data, series],\r\n  );\r\n  return <AgChartsReact options={options} />;\r\n};\r\n","import QueryStatsIcon from \"@mui/icons-material/QueryStats\";\r\nimport UpdateIcon from \"@mui/icons-material/Update\";\r\nimport { Tooltip } from \"@mui/material\";\r\nimport { Stack } from \"@mui/system\";\r\nimport { ColDef, ICellRendererParams } from \"ag-grid-community\";\r\nimport { DateTime } from \"luxon\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\nimport { TimeSeriesWealth } from \"../../hooks/use-times-series-wealth\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { Percent } from \"shared/components/formatters/percent\";\r\n\r\nexport const columnConfig: ColDef<TimeSeriesWealth>[] = [\r\n  {\r\n    headerName: \"Date\",\r\n    sort: \"desc\",\r\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\r\n    valueGetter: (x) => x.data?.date,\r\n    cellRenderer: (x: ICellRendererParams<unknown, DateTime>) => {\r\n      const systemYear = getLocalDateTime().year;\r\n      return (\r\n        <Stack direction={\"row\"} alignItems={\"center\"}>\r\n          {x.valueFormatted}&nbsp;\r\n          {x.value && x.value > getLocalDateTime() && (\r\n            <Tooltip title=\"Future Event\">\r\n              <UpdateIcon htmlColor=\"yellow\" />\r\n            </Tooltip>\r\n          )}\r\n          {x.value &&\r\n            x.value.equals(\r\n              DateTime.fromObject({\r\n                day: 1,\r\n                month: 1,\r\n                year: systemYear,\r\n              })\r\n            ) && (\r\n              <Tooltip title=\"Benchmark for current and future entries\">\r\n                <QueryStatsIcon htmlColor=\"yellow\" />\r\n              </Tooltip>\r\n            )}\r\n        </Stack>\r\n      );\r\n    },\r\n  },\r\n  {\r\n    type: \"numericColumn\",\r\n    headerName: \"Wealth\",\r\n    valueGetter: (x) => x.data?.wealth,\r\n    cellRenderer: (x: ICellRendererParams<unknown, number>) => {\r\n      return x.value && <Cash value={x.value} placement=\"left\" />;\r\n    },\r\n  },\r\n  {\r\n    type: \"numericColumn\",\r\n    headerName: \"YoY ($)\",\r\n    valueGetter: (x) => x.data?.yoyCash,\r\n    cellRenderer: (x: ICellRendererParams<unknown, number>) => {\r\n      return x.value && <Cash value={x.value} placement=\"left\" />;\r\n    },\r\n  },\r\n  {\r\n    type: \"numericColumn\",\r\n    headerName: \"YoY (%)\",\r\n    valueGetter: (x) => x.data?.yoyPct,\r\n    cellRenderer: (x: ICellRendererParams<unknown, number>) => {\r\n      return x.value && <Percent value={x.value} />;\r\n    },\r\n  },\r\n];\r\n","import { useTimeSeriesWealth } from \"capabilities/projected-wealth/hooks/use-times-series-wealth\";\r\nimport { AgGrid } from \"shared/components/ag-grid\";\r\nimport { columnConfig } from \"./colum-config\";\r\n\r\nexport const WealthTable = () => {\r\n  const data = useTimeSeriesWealth();\r\n\r\n  return (\r\n    <AgGrid\r\n      id=\"time-series-wealth\"\r\n      rowData={data}\r\n      columnDefs={columnConfig}\r\n      autoSizeStrategy={{ type: \"fitGridWidth\" }}\r\n    />\r\n  );\r\n};\r\n","import { Grid, Paper, Stack } from \"@mui/material\";\r\nimport { FutureEvents } from \"./components/future-events\";\r\nimport { WealthChart } from \"./components/wealth-chart\";\r\nimport { WealthTable } from \"./components/wealth-table\";\r\n\r\nexport const ProjectedWealth = () => {\r\n  return (\r\n    <Grid container height={\"100%\"} spacing={2}>\r\n      <Grid item xs={3} height={\"100%\"}>\r\n        <Paper sx={{ padding: 2, height: \"100%\" }}>\r\n          <FutureEvents />\r\n        </Paper>\r\n      </Grid>\r\n      <Grid item xs={9} height={\"100%\"}>\r\n        <Stack spacing={2} height={\"100%\"}>\r\n          <WealthChart />\r\n          <WealthTable />\r\n        </Stack>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import { LinearProgress } from \"@mui/material\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nexport const CountDown = (props: { timeMs: number }) => {\r\n  const { timeMs } = props;\r\n  const [time, setTime] = useState(timeMs);\r\n\r\n  useEffect(() => {\r\n    const intervalMs = 100;\r\n    const interval = setInterval(() => {\r\n      setTime((prev) => {\r\n        const remaining = prev - intervalMs;\r\n        if (remaining < 0) {\r\n          clearInterval(interval);\r\n          return 0;\r\n        }\r\n        return remaining;\r\n      });\r\n    }, 100);\r\n    return () => clearInterval(interval);\r\n  }, [props.timeMs]);\r\n\r\n  return <LinearProgress value={(time / timeMs) * 100} variant=\"determinate\" color=\"inherit\" />;\r\n};\r\n","import { Box, Button, ButtonProps, Stack } from \"@mui/material\";\r\nimport { ReactNode, useEffect, useState } from \"react\";\r\nimport { CountDown } from \"./count-down\";\r\n\r\ntype SafetyState = \"inactive\" | \"activating\" | \"active\" | \"confirmed\";\r\n\r\ninterface SafetyButtonProps {\r\n  inactiveLabel: string;\r\n  activatingLabel: string;\r\n  activeLabel: string;\r\n  confirmedLabel: string;\r\n  icon?: ReactNode;\r\n  onConfirm: () => void;\r\n}\r\n\r\nexport const SafetyButton = (props: Omit<ButtonProps, \"children\"> & SafetyButtonProps) => {\r\n  const { inactiveLabel, activatingLabel, activeLabel, confirmedLabel, onConfirm, icon, disabled, ...rest } = props;\r\n  const [safetyState, setSafetyState] = useState<SafetyState>(\"inactive\");\r\n\r\n  useEffect(() => {\r\n    if (safetyState === \"active\") {\r\n      setTimeout(() => {\r\n        setSafetyState((prev) => {\r\n          return prev === \"active\" ? \"inactive\" : prev;\r\n        });\r\n      }, 3200);\r\n    } else if (safetyState === \"activating\") {\r\n      setTimeout(() => {\r\n        setSafetyState(\"active\");\r\n      }, 1000);\r\n    } else if (safetyState === \"confirmed\") {\r\n      setTimeout(() => {\r\n        setSafetyState(\"inactive\");\r\n      }, 3200);\r\n    }\r\n  }, [safetyState]);\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        minWidth: 130,\r\n      }}\r\n    >\r\n      <Button\r\n        {...rest}\r\n        sx={{ height: \"100%\", width: \"100%\" }}\r\n        disabled={disabled || safetyState === \"activating\" || safetyState === \"confirmed\"}\r\n        size=\"small\"\r\n        onClick={() => {\r\n          safetyState === \"inactive\" && setSafetyState(\"activating\");\r\n          if (safetyState === \"active\") {\r\n            onConfirm?.();\r\n            setSafetyState(\"confirmed\");\r\n          }\r\n        }}\r\n      >\r\n        <Stack>\r\n          <Stack direction={\"row\"}>\r\n            {icon}\r\n            {safetyState === \"inactive\" && inactiveLabel}\r\n            {safetyState === \"activating\" && activatingLabel}\r\n            {safetyState === \"active\" && activeLabel}\r\n            {safetyState === \"confirmed\" && confirmedLabel}\r\n          </Stack>\r\n          {safetyState === \"active\" && <CountDown timeMs={2800} />}\r\n          {safetyState === \"activating\" && <CountDown timeMs={500} />}\r\n        </Stack>\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { useCallback } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\n\r\nexport const downloadJson = <T,>(filename: string, storeData: T) => {\r\n  const data = JSON.stringify(storeData, null, 2);\r\n  const link = document.createElement(\"a\");\r\n  link.download = filename;\r\n  const blob = new Blob([data], { type: \"application/json\" });\r\n  link.href = window.URL.createObjectURL(blob);\r\n  link.click();\r\n};\r\n\r\nexport const useExport = () => {\r\n  const storeData = useStore(store);\r\n  const onExport = useCallback(() => {\r\n    downloadJson(`wealth-tracker-${getLocalDateTime().toFormat(shortDate)}.json`, storeData);\r\n  }, [storeData]);\r\n\r\n  return onExport;\r\n};\r\n","import { useCallback } from \"react\";\r\nimport { storeValidator } from \"shared/models/store/current\";\r\nimport { store } from \"shared/store\";\r\nimport { migration } from \"shared/store/migrations\";\r\n\r\nfunction selectFile(contentType: string) {\r\n  return new Promise<File>((resolve) => {\r\n    const input = document.createElement(\"input\");\r\n    input.type = \"file\";\r\n    input.multiple = false;\r\n    input.accept = contentType;\r\n\r\n    input.onchange = () => {\r\n      const files = Array.from(input.files ?? []);\r\n      resolve(files[0]);\r\n    };\r\n\r\n    input.click();\r\n  });\r\n}\r\n\r\nexport const useImport = () => {\r\n  return useCallback(() => {\r\n    return new Promise<void>((resolve, reject) => {\r\n      selectFile(\"application/json\").then((file) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = (readerEvent) => {\r\n          const content = readerEvent.target?.result?.toString();\r\n          if (content) {\r\n            const data = JSON.parse(window.atob(content.split(\",\")[1]));\r\n            const validation = storeValidator.safeParse(data);\r\n            if (validation.success) {\r\n              store.setState(() => data);\r\n              resolve();\r\n            } else {\r\n              try {\r\n                migration(data);\r\n                store.setState(() => data);\r\n                resolve();\r\n              } catch (err) {\r\n                console.log(\"error\", err);\r\n                console.log(\"invalid data\", data);\r\n                reject(err);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      });\r\n    });\r\n  }, []);\r\n};\r\n","import { useMemo } from \"react\";\r\nimport { storeValidator } from \"shared/models/store/current\";\r\n\r\nexport const useStoreDataError = () => {\r\n  const invalidData = localStorage.getItem(\"store-invalid\");\r\n  return useMemo(() => {\r\n    if (!invalidData) {\r\n      return { hadError: false };\r\n    }\r\n    const jsonInvalidData = JSON.parse(invalidData);\r\n    const validated = storeValidator.safeParse(jsonInvalidData);\r\n    return {\r\n      hadError: !!invalidData,\r\n      invalidData: jsonInvalidData,\r\n      parseError: invalidData && !validated.success ? validated.error : undefined,\r\n      resetError: () => {\r\n        localStorage.removeItem(\"store-invalid\");\r\n      },\r\n    };\r\n  }, [invalidData]);\r\n};\r\n","import { Box, Table, TableBody, TableCell, TableHead, TableRow } from \"@mui/material\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport DialogContentText from \"@mui/material/DialogContentText\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\nimport { ReactNode } from \"react\";\r\nimport { ZodError } from \"zod\";\r\n\r\ninterface InvalidDataDialogProps {\r\n  open?: boolean;\r\n  error?: ZodError;\r\n  children?: ReactNode;\r\n}\r\n\r\nexport default function InvalidDataDialog(props: InvalidDataDialogProps) {\r\n  const { open, error, children } = props;\r\n\r\n  return (\r\n    <>\r\n      <Dialog open={!!open}>\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Error Loading Data\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            <Box maxHeight={500} overflow={\"auto\"}>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Error Message</TableCell>\r\n                    <TableCell>Path</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {error?.issues.map((x, idx) => {\r\n                    return (\r\n                      <TableRow key={idx}>\r\n                        <TableCell>{x.message}</TableCell>\r\n                        <TableCell>{x.path.join(\".\")}</TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                </TableBody>\r\n              </Table>\r\n            </Box>\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>{children}</DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n}\r\n","import { create } from \"mutative\";\r\nimport { ProjectedWealthKeys } from \"shared/models/store/current\";\r\nimport { store } from \".\";\r\n\r\nexport const setProjectedWealth = (configName: ProjectedWealthKeys, value: number) => {\r\n  store.setState((prev) => {\r\n    return create(prev, (next) => {\r\n      next.projectedWealth[configName] = value;\r\n    });\r\n  });\r\n};\r\n","import { InputAdornment, TextField } from \"@mui/material\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { useCallback, useState } from \"react\";\r\nimport { ProjectedWealthKeys } from \"shared/models/store/current\";\r\nimport { store } from \"shared/store\";\r\nimport { setProjectedWealth } from \"shared/store/set-projected-wealth\";\r\n\r\ninterface ConfigEntryProps {\r\n  configName: ProjectedWealthKeys;\r\n  label: string;\r\n  variant?: \"cash\" | \"percent\";\r\n}\r\n\r\nexport const ConfigEntry = (props: ConfigEntryProps) => {\r\n  const { configName, label, variant = \"cash\" } = props;\r\n  const [error, setError] = useState(false);\r\n  const isPercent = variant === \"percent\";\r\n\r\n  const onchange = useCallback(\r\n    (input: string) => {\r\n      let value = +input;\r\n      const isNan = Number.isNaN(value);\r\n      setError(isNan);\r\n      if (isNan) {\r\n        return;\r\n      }\r\n\r\n      if (isPercent) {\r\n        value /= 100;\r\n      }\r\n\r\n      setProjectedWealth(configName, value);\r\n    },\r\n    [configName, isPercent]\r\n  );\r\n\r\n  const value = useStore(store, (x) => x.projectedWealth[configName]);\r\n  const defaultValue = isPercent ? value * 100 : value;\r\n\r\n  return (\r\n    <TextField\r\n      error={error}\r\n      variant=\"outlined\"\r\n      InputProps={{\r\n        startAdornment: <InputAdornment position=\"start\">{isPercent ? \"%\" : \"$\"}</InputAdornment>,\r\n      }}\r\n      defaultValue={defaultValue.toFixed(isPercent ? 2 : 0)}\r\n      type=\"numeric\"\r\n      label={label}\r\n      onChange={(event) => {\r\n        onchange(event.target.value);\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import { Stack } from \"@mui/system\";\r\nimport { ConfigEntry } from \"./config-entry\";\r\n\r\nexport const Config = () => {\r\n  return (\r\n    <Stack spacing={2}>\r\n      <ConfigEntry configName=\"savingsPerMonth\" label=\"Monthly Saving Rate\" />\r\n      <ConfigEntry configName=\"retirementContributionPaycheck\" label=\"Retirement Contribution Per Paycheck\" />\r\n      <ConfigEntry configName=\"bonusWitholdingsRate\" label=\"Bonus Witholdings Rate\" variant=\"percent\" />\r\n      <Stack direction={\"row\"} spacing={2} width={\"100%\"} sx={{ \"& > *\": { flex: 1 } }}>\r\n        <ConfigEntry configName=\"socialSecurityLimit\" label=\"Social Security Tax Limit\" />\r\n        <ConfigEntry configName=\"socialSecurityTaxRate\" label=\"Social Security Tax\" variant=\"percent\" />\r\n      </Stack>\r\n      <Stack direction={\"row\"} spacing={2} width={\"100%\"} sx={{ \"& > *\": { flex: 1 } }}>\r\n        <ConfigEntry configName=\"medicareSupplementalTaxThreshold\" label=\"Medicare Supplemental Threshold\" />\r\n        <ConfigEntry configName=\"medicareSupplementalTaxRate\" label=\"Medicare Supplemental Tax\" variant=\"percent\" />\r\n      </Stack>\r\n    </Stack>\r\n  );\r\n};\r\n","import DeleteForever from \"@mui/icons-material/DeleteForever\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport { Box, Button, IconButton, Modal, Paper, Stack, Tab, Tabs, Typography } from \"@mui/material\";\r\nimport { NetWealth } from \"capabilities/net-wealth\";\r\nimport { ProjectedIncome } from \"capabilities/projected-income\";\r\nimport { ProjectedWealth } from \"capabilities/projected-wealth\";\r\nimport { useState } from \"react\";\r\nimport { SafetyButton } from \"shared/components/safety-button\";\r\nimport { downloadJson, useExport } from \"shared/hooks/use-export\";\r\nimport { useImport } from \"shared/hooks/use-import\";\r\nimport { useStoreDataError } from \"shared/hooks/use-store-data-error\";\r\nimport { resetStore } from \"shared/store\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\nimport InvalidDataDialog from \"./invalid-data-dialog\";\r\nimport SettingsIcon from \"@mui/icons-material/Settings\";\r\nimport { Config } from \"./config\";\r\n\r\nexport const App = () => {\r\n  const [tab, setTab] = useState<string>(\"projected-income\");\r\n  const onExport = useExport();\r\n  const onImport = useImport();\r\n  const { hadError, parseError, resetError, invalidData } = useStoreDataError();\r\n  const [error, setError] = useState(parseError);\r\n  const [isOpen, setIsOpen] = useState(hadError);\r\n\r\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Modal open={isSettingsOpen} onClose={() => setIsSettingsOpen(false)}>\r\n        <Paper\r\n          sx={{\r\n            padding: 2,\r\n            width: 600,\r\n            top: \"50%\",\r\n            left: \"50%\",\r\n            transform: \"translate(-50%, -50%)\",\r\n            position: \"absolute\",\r\n          }}\r\n        >\r\n          <Stack spacing={2}>\r\n            <Box display={\"flex\"}>\r\n              <Typography variant=\"h5\">Configuration</Typography>\r\n              <IconButton sx={{ marginLeft: \"auto\" }} onClick={() => setIsSettingsOpen(false)}>\r\n                <CloseIcon />\r\n              </IconButton>\r\n            </Box>\r\n            <Config />\r\n          </Stack>\r\n        </Paper>\r\n      </Modal>\r\n      <InvalidDataDialog open={isOpen} error={error}>\r\n        {hadError && (\r\n          <>\r\n            <Button\r\n              color=\"error\"\r\n              onClick={() => {\r\n                setIsOpen(false);\r\n                resetError?.();\r\n                resetStore();\r\n              }}\r\n            >\r\n              Reset\r\n            </Button>\r\n            <Button\r\n              onClick={() => {\r\n                downloadJson(`invalid-data-wealth-tracker-${getLocalDateTime().toFormat(shortDate)}.json`, invalidData);\r\n              }}\r\n            >\r\n              Download Data\r\n            </Button>\r\n\r\n            <Button\r\n              onClick={() => {\r\n                setIsOpen(false);\r\n                resetError?.();\r\n              }}\r\n            >\r\n              Ignore\r\n            </Button>\r\n          </>\r\n        )}\r\n        {!hadError && (\r\n          <Button\r\n            onClick={() => {\r\n              setIsOpen(false);\r\n            }}\r\n          >\r\n            Cancel\r\n          </Button>\r\n        )}\r\n      </InvalidDataDialog>\r\n      <Stack direction=\"row\">\r\n        <Tabs value={tab} onChange={(_, value) => setTab(value)}>\r\n          <Tab value=\"wealth\" label=\"Total Wealth\" />\r\n          <Tab value=\"projected-income\" label=\"Projected Income\" />\r\n          <Tab value=\"projected-wealth\" label=\"Projected Wealth\" />\r\n        </Tabs>\r\n        <Box marginLeft={\"auto\"} gap={2} display={\"flex\"}>\r\n          <Button onClick={() => setIsSettingsOpen(true)}>\r\n            <SettingsIcon />\r\n          </Button>\r\n          <Button\r\n            onClick={() =>\r\n              onImport().catch((err) => {\r\n                setIsOpen(true);\r\n                setError(err);\r\n              })\r\n            }\r\n          >\r\n            Import\r\n          </Button>\r\n          <Button onClick={onExport}>Export</Button>\r\n          <SafetyButton\r\n            onConfirm={resetStore}\r\n            inactiveLabel=\"Reset\"\r\n            activatingLabel=\"Activating\"\r\n            activeLabel=\"Confirm\"\r\n            confirmedLabel=\"confirmed\"\r\n            color=\"error\"\r\n            icon={<DeleteForever />}\r\n          />\r\n        </Box>\r\n      </Stack>\r\n      <Box padding={2} height={\"95%\"} width={\"100%\"}>\r\n        {tab === \"wealth\" && <NetWealth />}\r\n        {tab === \"projected-income\" && <ProjectedIncome />}\r\n        {tab === \"projected-wealth\" && <ProjectedWealth />}\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { AccountData, ProjectedIncome } from \"shared/models/store/current\";\r\nimport { findSameYear } from \"shared/utility/find-same-year\";\r\nimport { getPayments } from \"shared/utility/get-payments\";\r\nimport { valueByDateRange } from \"shared/utility/get-values-by-date-range\";\r\n\r\nexport const getScenarioSize = (year: number, projectedIncome: ProjectedIncome) => {\r\n  const timeSeries = projectedIncome.timeSeries;\r\n  const pay = timeSeries.paycheck.filter((x) => DateTime.fromISO(x.date).year > year - 3);\r\n  const mostRecentPay = pay.at(-1) ?? timeSeries.paycheck.at(-1);\r\n  if (!mostRecentPay) {\r\n    return 0;\r\n  }\r\n\r\n  const yearsToGenerate = Math.max(year - DateTime.fromISO(mostRecentPay.date).year, 1);\r\n  return Math.pow(timeSeries.meritIncreasePct.length, yearsToGenerate) * timeSeries.companyBonus.length;\r\n};\r\n\r\nexport const getMeritPairs = (year: number, projectedIncome: ProjectedIncome) => {\r\n  const timeSeries = projectedIncome.timeSeries;\r\n  const meritBonusPct = findSameYear(year, timeSeries.meritBonusPct);\r\n  const meritIncreasePct = findSameYear(year, timeSeries.meritIncreasePct);\r\n\r\n  const allMeritPairs = timeSeries.meritIncreasePct.map((x) => {\r\n    const meritBonusPctPair = findSameYear(DateTime.fromISO(x.date).year, timeSeries.meritBonusPct);\r\n    return {\r\n      meritIncreasePct: x.value,\r\n      meritBonusPct: meritBonusPctPair?.value ?? 0,\r\n    };\r\n  });\r\n\r\n  return allMeritPairs\r\n    .filter((x) => (meritBonusPct ? x.meritBonusPct === meritBonusPct.value : true))\r\n    .filter((x) => (meritIncreasePct ? x.meritIncreasePct === meritIncreasePct?.value : true));\r\n};\r\n\r\nexport const getMeritSequence = (year: number, projectedIncome: ProjectedIncome) => {\r\n  const timeSeries = projectedIncome.timeSeries;\r\n  const meritPairs = getMeritPairs(year, projectedIncome);\r\n\r\n  const pay = timeSeries.paycheck.filter((x) => DateTime.fromISO(x.date).year > year - 3);\r\n  const mostRecentPay = pay.at(-1) ?? timeSeries.paycheck.at(-1);\r\n\r\n  if (!mostRecentPay) {\r\n    return [];\r\n  }\r\n\r\n  const yearsToGenerate = Math.max(year - DateTime.fromISO(mostRecentPay.date).year, 1);\r\n\r\n  let meritSequence = meritPairs.slice().map((x) => [x]);\r\n  for (let i = 0; i < yearsToGenerate - 1; i++) {\r\n    meritSequence = meritSequence.flatMap((x) => {\r\n      return meritPairs.map((merit) => {\r\n        return x.slice().concat(merit);\r\n      });\r\n    });\r\n  }\r\n  return meritSequence;\r\n};\r\n\r\nexport const getEmptyMeritSequence = (year: number, projectedIncome: ProjectedIncome, pay: AccountData[]) => {\r\n  const timeSeries = projectedIncome.timeSeries;\r\n  const equityIncreasePct = findSameYear(year, timeSeries.equityPct)?.value ?? 0;\r\n  const meritIncreasePct = findSameYear(year, timeSeries.meritIncreasePct)?.value ?? 0;\r\n  const meritBonusPct = findSameYear(year, timeSeries.meritBonusPct)?.value ?? 0;\r\n  const meritBonuses = pay.map(\r\n    (x) => findSameYear(DateTime.fromISO(x.date).year, timeSeries.meritBonusPct)?.value ?? 0\r\n  );\r\n\r\n  const lastThreeMeritBonuses = meritBonuses.slice(-3);\r\n  const lastThreeMeritBonusFactor = meritBonuses.slice(-3).reduce((acc, curr) => acc + curr, 0);\r\n  const payments = getPayments(\r\n    DateTime.fromObject({ day: 1, month: 1, year: year - 1 }),\r\n    DateTime.fromObject({ day: 31, month: 12, year: year }).endOf(\"day\"),\r\n    valueByDateRange(pay)\r\n  );\r\n\r\n  return [\r\n    {\r\n      pay: pay.slice(),\r\n      lastThreeMeritBonusFactor,\r\n      lastThreeMeritBonuses,\r\n      meritBonusPct,\r\n      meritIncreasePct,\r\n      payments,\r\n      equityIncreasePct,\r\n      retirementBonusPct: 0.15,\r\n    },\r\n  ];\r\n};\r\n","import { store } from \"shared/store\";\r\nimport { scenarioStore } from \"../store/scenario-store\";\r\nimport { create } from \"mutative\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { DateTime } from \"luxon\";\r\nimport { getScenarioSize } from \"./merit-sequence\";\r\n\r\nconst currentYear = getLocalDateTime().year;\r\nconst maxYear = (() => {\r\n  const projectedIncome = store.state.projectedIncome;\r\n  for (let i = currentYear; i <= currentYear + 10; i++) {\r\n    if (getScenarioSize(i, projectedIncome) > 2499) {\r\n      return Math.max(currentYear, i - 1);\r\n    }\r\n  }\r\n  return currentYear + 10;\r\n})();\r\n\r\nconst worker = new Worker(new URL(\"worker.js\", import.meta.url), { type: \"module\" });\r\nworker.onmessage = (event) => {\r\n  const isLoading = event.data.year !== maxYear;\r\n  scenarioStore.setState((prev) => {\r\n    return create(prev, (x) => {\r\n      x.scenarios[event.data.year] = event.data.scenarios;\r\n      x.loading = isLoading;\r\n      x.maxYear = Math.max(event.data.year, x.maxYear);\r\n      x.minYear = Math.min(event.data.year, x.minYear);\r\n    });\r\n  });\r\n};\r\n\r\nconst loadAllScenarios = () => {\r\n  const projectedIncome = store.state.projectedIncome;\r\n  const first = projectedIncome.timeSeries.paycheck[1]?.date;\r\n  const date = first ? DateTime.fromISO(first) : getLocalDateTime();\r\n  const oldestYear = date.year;\r\n\r\n  for (let i = oldestYear; i < currentYear; i++) {\r\n    worker.postMessage({ year: i, projectedIncome });\r\n  }\r\n  for (let i = currentYear; i <= maxYear; i++) {\r\n    worker.postMessage({ year: i, projectedIncome });\r\n  }\r\n};\r\nloadAllScenarios();\r\n\r\nlet priorProjectedIncome = store.state.projectedIncome;\r\nstore.subscribe(() => {\r\n  if (priorProjectedIncome === store.state.projectedIncome) {\r\n    return;\r\n  }\r\n  scenarioStore.setState(() => ({ loading: false, scenarios: {}, maxYear: currentYear, minYear: currentYear }));\r\n  priorProjectedIncome = store.state.projectedIncome;\r\n  loadAllScenarios();\r\n});\r\n","import { CssBaseline, ThemeProvider, createTheme } from \"@mui/material\";\r\nimport { LocalizationProvider } from \"@mui/x-date-pickers\";\r\nimport { AdapterLuxon } from \"@mui/x-date-pickers/AdapterLuxon\";\r\nimport \"ag-grid-community/styles/ag-grid.css\";\r\nimport \"ag-grid-community/styles/ag-theme-quartz.css\";\r\nimport { App } from \"app/app.tsx\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport { ErrorBoundary } from \"react-error-boundary\";\r\nimport \"./index.css\";\r\nimport \"shared/web-worker/entry\";\r\n\r\nconst darkTheme = createTheme({\r\n  palette: {\r\n    mode: \"dark\",\r\n  },\r\n});\r\n\r\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\r\n  <React.StrictMode>\r\n    <ErrorBoundary\r\n      fallbackRender={(props) => {\r\n        return (\r\n          <>\r\n            <div style={{ backgroundColor: \"#FFF\" }}>{props.error.message}</div>\r\n            <div style={{ backgroundColor: \"#FFF\" }}>{props.error.stackTrace}</div>\r\n          </>\r\n        );\r\n      }}\r\n    >\r\n      <LocalizationProvider dateAdapter={AdapterLuxon}>\r\n        <ThemeProvider theme={darkTheme}>\r\n          <CssBaseline />\r\n          <App />\r\n        </ThemeProvider>\r\n      </LocalizationProvider>\r\n    </ErrorBoundary>\r\n  </React.StrictMode>\r\n);\r\n"],"names":["sortByDate","select","direction","a","b","toMillis","accountDataValidator","z","object","date","string","value","number","id","accountValidator","type","literal","data","array","loanValidator","principal","ratePct","paymentsPerYear","payment","firstPaymentDate","ownershipPct","mortgageValidator","loan","optional","wealth","record","union","projectedIncome","timeSeries","paycheck","meritIncreasePct","equityPct","meritBonusPct","meritBonus","companyBonusPct","companyBonus","retirementBonus","projectedWealth","socialSecurityLimit","socialSecurityTaxRate","medicareSupplementalTaxThreshold","medicareSupplementalTaxRate","savingsPerMonth","retirementContributionPaycheck","bonusWitholdingsRate","storeValidator","version","getDefaultStore","migration","Error","storeV0Validator","parse","storeV1Validator","createStore","validator","defaultValue","key","invalidData","localData","localStorage","getItem","JSON","safeParse","success","setItem","stringify","err","log","store","CreateStore","subscribe","current","state","AddAccountEntry","accountName","amount","setState","create","prev","next","push","startOf","toString","uuid","sort","DateTime","fromISO","x","addProjectedIncome","concat","removeAccount","removeAccountEntry","idxToRemove","findIndex","splice","removeProjectedIncome","resetStore","setLoan","updateAccountDate","account","idx","toISO","updateAccountName","currentAccountName","newAccountName","updateAccountValue","updateProjectedIncome","NewAccount","forwardRef","props","ref","open","setOpen","useState","nameRef","useRef","error","setError","accountType","setAccountType","undefined","marginLeft","target","children","AgGrid","rest","height","getLocalDateTime","local","shortDate","monthDay","DeleteAccount","padding","width","RenameAccount","nextAccountName","setNextAccountName","event","formatCashShort","Intl","NumberFormat","style","currency","notation","maximumFractionDigits","format","formatCash","Cash","fallback","disableTooltip","compact","tooltip","placement","formatted","useMemo","join","createAccountColumnConfig","headerName","valueFormatter","toFormat","valueGetter","cellEditor","editable","valueSetter","fromJSDate","newValue","isValid","cellRenderer","cellStyle","display","sortable","colId","DeleteForeverIcon","useMissingYears","years","Object","entries","groupBy","year","map","find","janFirst","fromObject","day","month","diff","days","lookup","fromEntries","missing","i","length","AccountTab","useStore","setDate","inputRef","missingYears","hasSameDate","hasSame","onAddEntry","accountColumnConfig","color","startAdornment","findNearestOnOrBefore","findNearestIdxOnOrBefore","selector","getGraphDates","accounts","Set","flatMap","calcLoanBalance","rate","monthlyPayment","annualizedRate","periods","months","totalRate","balance","calcEquity","houseValue","loanBalance","AddEntry","Stack","reduce","acc","curr","convertPct","min","datetime","offset","AddLoan","textField","parsed","issues","path","mortgageColumnConfig","toFixed","equity","MortgageTab","allAccounts","mortgageData","values","AccountTabs","firstAccount","keys","setAccount","useEffect","_","getMortgageValue","mortgage","entry","getAccountValue","getGraphValue","useGraphData","dates","graphData","toJSDate","total","forEach","arr","firstNonZero","slice","WealthChart","series","stacked","xKey","yKey","yName","renderer","datum","content","toISODate","options","theme","title","text","axes","position","label","NetWealth","Duration","dateTime","variant","dateFormat","countDownStr","hours","tooltipStr","diffNow","countDownColor","findSameYear","useRealDate","useDates","meritBonusDate","companyBonusDate","meritIncrease","useDateRanges","base","start","end","endOf","formatPercent","getColor","probability","Percent","Box","updateProjectedIncomeDate","valueFormatted","UpdateIcon","DataEntry","defaultDate","setAmount","console","paddingTop","flex","Layout","flexShrink","marginBottom","scenarioStore","Store","loading","maxYear","minYear","scenarios","clusterTitle","index","clusters","ckmeans","Math","max","useClusters","totalPay","pay","taxablePay","at","equityIncreasePct","Value","secondaryValue","tertiaryValue","className","minWidth","flexDirection","justifyContent","alignItems","gap","IncomePerPeriodTooltip","incomePerPeriod","perPayday","count","ArrowForwardIcon","useHasMeritPairs","every","Card","border","borderRadius","paddingBottom","paddingLeft","CashRange","showRange","minFormatted","maxFormatted","PercentRange","ClusterValue","ClusterValues","eventDate","ProjectedIncome","selectedYear","setSelectedYear","hasMissingPairs","dateRanges","basePay","aprToApr","paychecks","payments","filter","payedOn","reduceRight","unshift","flexWrap","marginRight","set","sx","maxWidth","useMostFrequentValue","valueByDateRange","plus","minus","systemYear","useProjectedPay","baseIncome","meritPct","payPerPeriod","mostRecentPay","startDate","multiplier","round","startIdx","aPayday","DateRangesOverlap","getPayPeriods","anyPayday","startPayDay","weeks","numPayDays","getPayments","endDate","payPeriods","sum","payPeriod","businessDays","differenceInBusinessDays","milliseconds","useBaseIncome","totalIncome","minMaxAvg","avg","Infinity","outcomeFromSingle","actual","actualizedOutcome","outcome","scaleOutcome","AddOutcome","outcomes","everyActualDefined","useCompanyBonus","mostRecentBonus","mostRecentPercent","meritFactor","cash","projectedActual","percent","useMeritBonus","ranges","bonusAmount","bonusPercent","frequentMeritBonusPercent","meritOutcome","usePayments","merit","cumulativePay","cumulative","payBeforeMerit","payBeforeCompanyBonus","previousPay","remainingPayments","nextPaymentIdx","numRemaining","totalBasePayments","totalPayments","useFutureMedicareTax","config","firstOccurrence","remaining","perPaycheck","useFutureRetirementContributions","retirementContribution","useFutureSavings","perMonth","useFutureSocialSecurity","BeforeAfter","before","after","scaleCluster","cluster","factor","scaleClusters","ExpectedValue","Clusers","mostLikely","isFuture","FutureEvents","savings","retirement","medicare","socialSecurity","bonusTakehomeFactor","useEarliestAccountEntry","fromMillis","useRetirementBonus","juneBonus","eligibleIncome","useFutureBonuses","bonuses","useTimeSeriesWealth","localDateTime","earliest","ssiTaxValue","medicareTaxValue","futureWealth","Array","fill","equals","isLast","accountWealth","graphDate","benchmarkWealth","yoyCash","yoyPct","nice","columnConfig","QueryStatsIcon","WealthTable","ProjectedWealth","Grid","CountDown","timeMs","time","setTime","interval","setInterval","intervalMs","clearInterval","SafetyButton","inactiveLabel","activatingLabel","activeLabel","confirmedLabel","onConfirm","icon","disabled","safetyState","setSafetyState","setTimeout","downloadJson","filename","storeData","link","document","createElement","download","blob","Blob","href","window","URL","createObjectURL","click","useExport","onExport","useCallback","selectFile","contentType","Promise","input","multiple","accept","onchange","files","from","useImport","resolve","reject","then","reader","FileReader","readAsDataURL","file","onload","readerEvent","result","atob","split","useStoreDataError","hadError","jsonInvalidData","validated","parseError","resetError","removeItem","InvalidDataDialog","message","setProjectedWealth","configName","ConfigEntry","isPercent","isNan","Number","isNaN","Config","App","tab","setTab","onImport","isOpen","setIsOpen","isSettingsOpen","setIsSettingsOpen","top","left","transform","CloseIcon","SettingsIcon","catch","DeleteForever","getScenarioSize","yearsToGenerate","pow","currentYear","worker","Worker","onmessage","isLoading","loadAllScenarios","first","oldestYear","postMessage","priorProjectedIncome","darkTheme","createTheme","palette","mode","ReactDOM","createRoot","getElementById","render","backgroundColor","stackTrace","AdapterLuxon"],"mappings":"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"}