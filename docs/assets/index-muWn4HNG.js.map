{"version":3,"file":"index-muWn4HNG.js","sources":["../../src/shared/utility/sort-by-date.ts","../../src/shared/models/account-data.ts","../../src/shared/models/account.ts","../../src/shared/models/loan.ts","../../src/shared/models/mortgage.ts","../../src/shared/models/net-wealth.ts","../../src/shared/models/projected-income.ts","../../src/shared/models/projected-wealth.ts","../../src/shared/models/store.ts","../../src/shared/store/store.ts","../../src/shared/store/add-account-entry.ts","../../src/shared/store/add-projected-income.ts","../../src/shared/store/remove-account.ts","../../src/shared/store/remove-account-entry.ts","../../src/shared/store/remove-projected-income.ts","../../src/shared/store/reset-store.ts","../../src/shared/store/set-loan.ts","../../src/shared/store/update-account-date.ts","../../src/shared/store/update-account-name.ts","../../src/shared/store/update-account-value.ts","../../src/shared/store/update-projected-income.ts","../../src/capabilities/net-wealth/components/new-account/new-account.tsx","../../src/shared/components/ag-grid/ag-grid.tsx","../../src/shared/utility/current-date.ts","../../src/shared/utility/format-date.ts","../../src/capabilities/net-wealth/components/tab-types/components/delete-account.tsx","../../src/capabilities/net-wealth/components/tab-types/components/update-account.tsx","../../src/shared/utility/format-cash.ts","../../src/shared/components/formatters/cash.tsx","../../src/capabilities/net-wealth/components/tab-types/account/column-config.tsx","../../src/capabilities/net-wealth/components/tab-types/account/hooks/useMissingYears.ts","../../src/capabilities/net-wealth/components/tab-types/account/account.tsx","../../src/shared/utility/find-nearest-on-or-before.ts","../../src/shared/utility/get-graph-dates.ts","../../src/shared/utility/mortgage-calc.ts","../../src/capabilities/net-wealth/components/tab-types/mortgage/add-entry.tsx","../../src/shared/utility/group-by.ts","../../src/capabilities/net-wealth/components/tab-types/mortgage/add-loan.tsx","../../src/capabilities/net-wealth/components/tab-types/mortgage/column-config.tsx","../../src/capabilities/net-wealth/components/tab-types/mortgage/mortgage.tsx","../../src/capabilities/net-wealth/components/account-tabs/account-tabs.tsx","../../src/shared/utility/get-graph-value.ts","../../src/capabilities/net-wealth/components/wealth-chart/use-graph-data.ts","../../src/capabilities/net-wealth/components/wealth-chart/wealth-chart.tsx","../../src/capabilities/net-wealth/net-wealth.tsx","../../src/shared/hooks/use-dates.ts","../../src/shared/utility/find-same-year.ts","../../src/shared/utility/min-max-avg.ts","../../src/shared/utility/a-payday.ts","../../src/shared/utility/date-ranges-overlap.ts","../../src/shared/utility/get-pay-periods.ts","../../src/shared/hooks/use-most-frequent-value.ts","../../src/shared/hooks/use-projected-pay.ts","../../src/shared/hooks/use-base-income.ts","../../src/shared/hooks/use-company-bonus.ts","../../src/shared/hooks/use-merit-bonus.ts","../../src/shared/hooks/use-retirement-bonus.ts","../../src/shared/hooks/use-total-income.ts","../../src/shared/components/formatters/duration.tsx","../../src/shared/utility/format-percent.ts","../../src/shared/components/formatters/percent.tsx","../../src/capabilities/projected-income/components/value.tsx","../../src/capabilities/projected-income/components/bonus-outcome.tsx","../../src/shared/store/update-projected-income-date.ts","../../src/capabilities/projected-income/components/data-entry/column-config.tsx","../../src/capabilities/projected-income/components/data-entry/data-entry.tsx","../../src/shared/components/formatters/until.tsx","../../src/capabilities/projected-income/hooks/use-pay-check.ts","../../src/capabilities/projected-income/components/income-per-period.tsx","../../src/capabilities/projected-income/components/merit-increase.tsx","../../src/capabilities/projected-income/components/outcome.tsx","../../src/capabilities/projected-income/projected-income.tsx","../../src/shared/store/set-projected-wealth.ts","../../src/capabilities/projected-wealth/components/config/config-entry.tsx","../../src/capabilities/projected-wealth/components/config/config.tsx","../../src/capabilities/projected-wealth/hooks/use-future-bonuses.ts","../../src/capabilities/projected-wealth/hooks/use-payments.ts","../../src/capabilities/projected-wealth/hooks/use-future-medicare-tax.ts","../../src/capabilities/projected-wealth/hooks/use-future-retirement-contributions.ts","../../src/capabilities/projected-wealth/hooks/use-future-savings.ts","../../src/capabilities/projected-wealth/hooks/use-future-social-security.ts","../../src/shared/components/formatters/before-after.tsx","../../src/capabilities/projected-wealth/components/future-events/future-events.tsx","../../src/capabilities/projected-wealth/hooks/use-earliest-account-entry.ts","../../src/capabilities/projected-wealth/hooks/use-times-series-wealth.ts","../../src/capabilities/projected-wealth/components/wealth-chart.tsx","../../src/capabilities/projected-wealth/components/wealth-table/colum-config.tsx","../../src/capabilities/projected-wealth/components/wealth-table/wealth-table.tsx","../../src/capabilities/projected-wealth/projected-wealth.tsx","../../src/shared/components/safety-button/count-down.tsx","../../src/shared/components/safety-button/safety-button.tsx","../../src/shared/hooks/use-export.tsx","../../src/shared/hooks/use-import.tsx","../../src/shared/hooks/use-store-data-error.ts","../../src/app/invalid-data-dialog.tsx","../../src/app/app.tsx","../../src/main.tsx"],"sourcesContent":["import { DateTime } from \"luxon\";\r\n\r\nexport const sortByDate =\r\n  <T>(select: (data: T) => DateTime, direction: \"asc\" | \"desc\") =>\r\n  (a: T, b: T) =>\r\n    direction === \"asc\" ? select(a).toMillis() - select(b).toMillis() : select(b).toMillis() - select(a).toMillis();\r\n","import { z } from \"zod\";\r\n\r\nexport const accountDataValidator = z.object({\r\n  date: z.string(),\r\n  value: z.number(),\r\n  id: z.string(),\r\n});\r\n\r\nexport type AccountData = z.infer<typeof accountDataValidator>;\r\n","import { z } from \"zod\";\r\nimport { accountDataValidator } from \"./account-data\";\r\n\r\nexport const accountValidator = z.object({\r\n  type: z.literal(\"account\"),\r\n  data: z.array(accountDataValidator),\r\n});\r\n\r\nexport type Account = z.infer<typeof accountValidator>;\r\n","import { z } from \"zod\";\r\n\r\nexport const loanValidator = z.object({\r\n  principal: z.number(),\r\n  ratePct: z.number(),\r\n  paymentsPerYear: z.number(),\r\n  payment: z.number(),\r\n  firstPaymentDate: z.string(),\r\n  ownershipPct: z.number(),\r\n});\r\n\r\nexport type Loan = z.infer<typeof loanValidator>;\r\n","import { z } from \"zod\";\r\nimport { accountDataValidator } from \"./account-data\";\r\nimport { loanValidator } from \"./loan\";\r\n\r\nexport const mortgageValidator = z.object({\r\n  type: z.literal(\"mortgage\"),\r\n  loan: loanValidator.optional(),\r\n  data: z.array(accountDataValidator),\r\n});\r\n\r\nexport type Mortgage = z.infer<typeof mortgageValidator>;\r\n","import { z } from \"zod\";\r\nimport { accountValidator } from \"./account\";\r\nimport { mortgageValidator } from \"./mortgage\";\r\n\r\nexport const wealth = z.record(z.union([accountValidator, mortgageValidator]));\r\n\r\nexport type Wealth = z.infer<typeof wealth>;\r\n","import { z } from \"zod\";\r\nimport { accountDataValidator } from \"./account-data\";\r\n\r\nexport const projectedIncome = z.object({\r\n  timeSeries: z.object({\r\n    paycheck: z.array(accountDataValidator),\r\n    meritIncreasePct: z.array(accountDataValidator),\r\n    equityPct: z.array(accountDataValidator),\r\n    meritBonusPct: z.array(accountDataValidator),\r\n    meritBonus: z.array(accountDataValidator),\r\n    companyBonusPct: z.array(accountDataValidator),\r\n    companyBonus: z.array(accountDataValidator),\r\n    retirementBonus: z.array(accountDataValidator),\r\n  }),\r\n});\r\n\r\nexport type ProjectedIncome = z.infer<typeof projectedIncome>;\r\nexport type TimeSeries = keyof ProjectedIncome[\"timeSeries\"];\r\n","import { z } from \"zod\";\r\n\r\nexport const projectedWealth = z.object({\r\n  socialSecurityLimit: z.number(),\r\n  socialSecurityTaxRate: z.number(),\r\n  medicareSupplementalTaxThreshold: z.number(),\r\n  medicareSupplementalTaxRate: z.number(),\r\n  savingsPerMonth: z.number(),\r\n  retirementContributionPaycheck: z.number(),\r\n});\r\n\r\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\r\nexport type ProjectedWealthConfig = keyof ProjectedWealth;\r\n","import { z } from \"zod\";\r\nimport { wealth } from \"./net-wealth\";\r\nimport { projectedIncome } from \"./projected-income\";\r\nimport { projectedWealth } from \"./projected-wealth\";\r\n\r\nexport const getDefaultStore = (): Store => ({\r\n  projectedIncome: {\r\n    timeSeries: {\r\n      paycheck: [],\r\n      meritBonusPct: [],\r\n      companyBonusPct: [\r\n        {\r\n          date: \"2020-06-15T00:00:00.000-07:00\",\r\n          value: 0.182,\r\n          id: \"a52883a7-008b-4b5d-83f7-48bb72a90f27\",\r\n        },\r\n        {\r\n          date: \"2021-06-15T00:00:00.000-07:00\",\r\n          value: 0.254,\r\n          id: \"ec5a9913-d2ea-45cf-bbe4-4a28bc3a02eb\",\r\n        },\r\n        {\r\n          date: \"2022-06-15T00:00:00.000-07:00\",\r\n          value: 0.272,\r\n          id: \"45f44fc7-544a-4652-87fa-49d70eaa412d\",\r\n        },\r\n        {\r\n          date: \"2023-06-15T00:00:00.000-07:00\",\r\n          value: 0.168,\r\n          id: \"97af5146-6a4d-466d-8b9e-96552fc70639\",\r\n        },\r\n      ],\r\n      meritBonus: [],\r\n      companyBonus: [],\r\n      retirementBonus: [],\r\n      equityPct: [],\r\n      meritIncreasePct: [],\r\n    },\r\n  },\r\n  wealth: {},\r\n  projectedWealth: {\r\n    medicareSupplementalTaxThreshold: 200_000,\r\n    socialSecurityLimit: 168_600,\r\n    socialSecurityTaxRate: 0.062,\r\n    medicareSupplementalTaxRate: 0.009,\r\n    savingsPerMonth: 0,\r\n    retirementContributionPaycheck: 0,\r\n  },\r\n});\r\n\r\nexport const storeValidator = z.object({\r\n  wealth: wealth,\r\n  projectedIncome: projectedIncome,\r\n  projectedWealth: projectedWealth,\r\n});\r\n\r\nexport type Store = z.infer<typeof storeValidator>;\r\n","import { Store as CreateStore } from \"@tanstack/store\";\r\nimport { ZodSchema } from \"zod\";\r\nimport { Store, getDefaultStore, storeValidator } from \"../models/store\";\r\n\r\nconst createStore = <T extends object>(validator: ZodSchema, defaultValue: T) => {\r\n  const key = \"store\";\r\n  const invalidData = \"store-invalid\";\r\n  const localData = localStorage.getItem(key);\r\n  const data = localData ? JSON.parse(localData) : defaultValue;\r\n  const parse = validator.safeParse(data);\r\n\r\n  //todo create migration process\r\n  if (!parse.success) {\r\n    console.log(\"zod error\", parse.error);\r\n    console.log(\"original\", data);\r\n    localStorage.setItem(invalidData, JSON.stringify(data));\r\n    localStorage.setItem(key, JSON.stringify(defaultValue));\r\n  }\r\n\r\n  const store = new CreateStore<T>(data);\r\n  store.subscribe(() => {\r\n    const current = localStorage.getItem(key);\r\n    current && localStorage.setItem(`${key}-previous`, current);\r\n    localStorage.setItem(key, JSON.stringify(store.state));\r\n  });\r\n\r\n  return store;\r\n};\r\n\r\nexport const store = createStore<Store>(storeValidator, getDefaultStore());\r\n","import { DateTime } from \"luxon\";\r\nimport { create } from \"mutative\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { Account } from \"../models/account\";\r\nimport { sortByDate } from \"../utility/sort-by-date\";\r\nimport { store } from \"./store\";\r\n\r\nexport const AddAccountEntry = (accountName: string, date: DateTime<true>, amount: number) => {\r\n  store.setState((prev) => {\r\n    return create(prev, (next) => {\r\n      (next.wealth[accountName] as Account).data.push({\r\n        date: date.startOf(\"day\").toString(),\r\n        value: amount,\r\n        id: uuid(),\r\n      });\r\n      next.wealth[accountName].data.sort(sortByDate((x) => DateTime.fromISO(x.date), \"asc\"));\r\n    });\r\n  });\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { create } from \"mutative\";\r\nimport { TimeSeries } from \"shared/models/projected-income\";\r\nimport { sortByDate } from \"shared/utility/sort-by-date\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { store } from \"./store\";\r\n\r\nexport const addProjectedIncome = (date: DateTime, timeSeries: TimeSeries, value: number) => {\r\n  store.setState((prev) => {\r\n    return create(prev, (next) => {\r\n      next.projectedIncome.timeSeries[timeSeries] = next.projectedIncome.timeSeries[timeSeries]\r\n        .concat({\r\n          date: date.startOf(\"day\").toString(),\r\n          value,\r\n          id: uuid(),\r\n        })\r\n        .sort(sortByDate((x) => DateTime.fromISO(x.date), \"asc\"));\r\n    });\r\n  });\r\n};\r\n","import { create } from \"mutative\";\r\nimport { store } from \"./store\";\r\n\r\nexport const removeAccount = (accountName: string) =>\r\n  store.setState((prev) => {\r\n    return create(prev, (next) => {\r\n      delete next.wealth[accountName];\r\n    });\r\n  });\r\n","import { create } from \"mutative\";\r\nimport { store } from \"./store\";\r\n\r\nexport const removeAccountEntry = (accountName: string, id: string) =>\r\n  store.setState((prev) => {\r\n    return create(prev, (next) => {\r\n      const idxToRemove = next.wealth[accountName].data.findIndex((x) => x.id === id);\r\n      next.wealth[accountName].data.splice(idxToRemove, 1);\r\n      return next;\r\n    });\r\n  });\r\n","import { create } from \"mutative\";\r\nimport { TimeSeries } from \"shared/models/projected-income\";\r\nimport { store } from \".\";\r\n\r\nexport const removeProjectedIncome = (accountName: TimeSeries, id: string) => {\r\n  store.setState((prev) => {\r\n    return create(prev, (next) => {\r\n      const idxToRemove = next.projectedIncome.timeSeries[accountName].findIndex((x) => x.id === id);\r\n      next.projectedIncome.timeSeries[accountName].splice(idxToRemove, 1);\r\n    });\r\n  });\r\n};\r\n","import { getDefaultStore } from \"shared/models/store\";\r\nimport { store } from \"./store\";\r\n\r\nexport const resetStore = () => store.setState(() => getDefaultStore());\r\n","import { create } from \"mutative\";\r\nimport { Loan } from \"shared/models/loan\";\r\nimport { Mortgage } from \"shared/models/mortgage\";\r\nimport { store } from \"./store\";\r\n\r\nexport const setLoan = (accountName: string, loan: Loan) =>\r\n  store.setState((prev) => {\r\n    return create(prev, (next) => {\r\n      if (next.wealth[accountName].type === \"mortgage\") {\r\n        (next.wealth[accountName] as Mortgage).loan = loan;\r\n      }\r\n    });\r\n  });\r\n","import { DateTime } from \"luxon\";\r\nimport { create } from \"mutative\";\r\nimport { store } from \".\";\r\n\r\nexport const updateAccountDate = (accountName: string, id: string, date: DateTime) => {\r\n  store.setState((prev) => {\r\n    const next = create(prev, (next) => {\r\n      const account = next.wealth[accountName];\r\n      const idx = account?.data.findIndex((x) => x.id === id);\r\n      if (idx >= 0) {\r\n        account.data[idx].date = date.toISO()!;\r\n      }\r\n    });\r\n    return next;\r\n  });\r\n};\r\n","import { create } from \"mutative\";\r\nimport { store } from \"./store\";\r\n\r\nexport const updateAccountName = (currentAccountName: string, newAccountName: string) =>\r\n  store.setState((prev) => {\r\n    return create(prev, (next) => {\r\n      next.wealth[newAccountName] = next.wealth[currentAccountName];\r\n      delete next.wealth[currentAccountName];\r\n    });\r\n  });\r\n","import { create } from \"mutative\";\r\nimport { store } from \".\";\r\n\r\nexport const updateAccountValue = (accountName: string, id: string, value: number) => {\r\n  store.setState((prev) => {\r\n    const next = create(prev, (next) => {\r\n      const account = next.wealth[accountName];\r\n      const idx = account?.data.findIndex((x) => x.id === id);\r\n      if (idx >= 0) {\r\n        account.data[idx].value = value;\r\n      }\r\n    });\r\n    return next;\r\n  });\r\n};\r\n","import { create } from \"mutative\";\r\nimport { TimeSeries } from \"shared/models/projected-income\";\r\nimport { store } from \".\";\r\n\r\nexport const updateProjectedIncome = (timeSeries: TimeSeries, id: string, value: number) => {\r\n  store.setState((prev) => {\r\n    const next = create(prev, (next) => {\r\n      const account = next.projectedIncome.timeSeries[timeSeries];\r\n      const idx = account.findIndex((x) => x.id === id);\r\n      account[idx].value = value;\r\n    });\r\n    return next;\r\n  });\r\n};\r\n","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, MenuItem, Stack, TextField } from \"@mui/material\";\r\nimport { create } from \"mutative\";\r\nimport { ReactNode, forwardRef, useRef, useState } from \"react\";\r\nimport { AssetType } from \"shared/models/asset-types\";\r\nimport { store } from \"shared/store\";\r\n\r\nexport const NewAccount = forwardRef<HTMLButtonElement, { children?: ReactNode }>((props, ref) => {\r\n  const [open, setOpen] = useState(false);\r\n  const nameRef = useRef<HTMLInputElement>(null);\r\n  const [error, setError] = useState(false);\r\n  const [accountType, setAccountType] = useState<AssetType>();\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        ref={ref}\r\n        variant=\"outlined\"\r\n        onClick={() => {\r\n          setOpen(true);\r\n          setError(false);\r\n          setAccountType(undefined);\r\n        }}\r\n        sx={{ marginLeft: \"auto\" }}\r\n      >\r\n        add account\r\n      </Button>\r\n\r\n      <Dialog open={open} onClose={() => setOpen(false)}>\r\n        <DialogTitle>Add New Account</DialogTitle>\r\n        <DialogContent>\r\n          <Stack spacing={2} margin={2}>\r\n            <TextField\r\n              select\r\n              color={error ? \"error\" : \"primary\"}\r\n              onChange={(value) => {\r\n                setError(false);\r\n                setAccountType(value.target.value as AssetType);\r\n              }}\r\n              label=\"Type\"\r\n            >\r\n              <MenuItem value=\"mortgage\">Mortgage</MenuItem>\r\n              <MenuItem value=\"account\">Generic Account</MenuItem>\r\n            </TextField>\r\n\r\n            <TextField\r\n              placeholder=\"Name\"\r\n              onChange={() => {\r\n                setError(false);\r\n              }}\r\n              error={error}\r\n              inputRef={nameRef}\r\n            />\r\n          </Stack>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            disabled={error}\r\n            onClick={() => {\r\n              store.setState((prev) => {\r\n                return create(prev, (next) => {\r\n                  if (!nameRef.current?.value || !accountType || prev.wealth[nameRef.current.value]) {\r\n                    setError(true);\r\n                    return;\r\n                  }\r\n\r\n                  next.wealth[nameRef.current.value] = {\r\n                    type: accountType,\r\n                    data: [],\r\n                  };\r\n\r\n                  setOpen(false);\r\n                });\r\n              });\r\n            }}\r\n          >\r\n            Add\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      {props?.children}\r\n    </>\r\n  );\r\n});\r\n","import { AgGridReact, AgGridReactProps } from \"ag-grid-react\";\r\n\r\nexport const AgGrid = (props: AgGridReactProps & { id: string }) => {\r\n  const { id, ...rest } = props;\r\n  return (\r\n    <div id={id} className=\"ag-theme-quartz-dark\" style={{ height: \"100%\" }}>\r\n      <AgGridReact {...rest} />\r\n    </div>\r\n  );\r\n};\r\n","import { DateTime } from \"luxon\";\r\n\r\nexport const getLocalDateTime = () => DateTime.local();\r\n","export const shortDate = \"yyyy-MM-dd\";\r\n\r\nexport const monthDay = \"MMM dd\";\r\n","import { Button, Paper } from \"@mui/material\";\r\nimport { removeAccount } from \"shared/store\";\r\n\r\nexport const DeleteAccount = (props: { accountName: string }) => {\r\n  const { accountName } = props;\r\n\r\n  return (\r\n    <Paper elevation={3} sx={{ padding: 2, width: \"100%\" }}>\r\n      <Button\r\n        onClick={() => {\r\n          removeAccount(accountName);\r\n        }}\r\n        color=\"error\"\r\n      >\r\n        Delete Account\r\n      </Button>\r\n    </Paper>\r\n  );\r\n};\r\n","import { Button, Paper, Stack, TextField } from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport { updateAccountName } from \"shared/store/update-account-name\";\r\n\r\nexport const RenameAccount = (props: { accountName: string }) => {\r\n  const { accountName } = props;\r\n  const [nextAccountName, setNextAccountName] = useState<string>(accountName);\r\n\r\n  return (\r\n    <Paper elevation={3} sx={{ padding: 2 }}>\r\n      <Stack spacing={1}>\r\n        <TextField\r\n          label=\"Account Name\"\r\n          value={nextAccountName}\r\n          onChange={(event) => setNextAccountName(event.target.value)}\r\n          placeholder=\"\"\r\n        />\r\n        <Button\r\n          disabled={!nextAccountName}\r\n          onClick={() => {\r\n            updateAccountName(accountName, nextAccountName);\r\n          }}\r\n        >\r\n          Update Name\r\n        </Button>\r\n      </Stack>\r\n    </Paper>\r\n  );\r\n};\r\n","export const formatCashShort = new Intl.NumberFormat(\"en-US\", {\r\n  style: \"currency\",\r\n  currency: \"USD\",\r\n  notation: \"compact\",\r\n  maximumFractionDigits: 0,\r\n}).format;\r\n\r\nexport const formatCash = new Intl.NumberFormat(\"en-US\", {\r\n  style: \"currency\",\r\n  currency: \"USD\",\r\n  maximumFractionDigits: 0,\r\n}).format;\r\n","import { Tooltip } from \"@mui/material\";\r\nimport { useMemo } from \"react\";\r\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\r\n\r\ninterface CashProps {\r\n  value?: number;\r\n  fallback?: number;\r\n  disableTooltip?: boolean;\r\n  compact?: boolean;\r\n  tooltip?: string;\r\n  placement?:\r\n    | \"top\"\r\n    | \"right\"\r\n    | \"bottom\"\r\n    | \"left\"\r\n    | \"bottom-end\"\r\n    | \"bottom-start\"\r\n    | \"left-end\"\r\n    | \"left-start\"\r\n    | \"right-end\"\r\n    | \"right-start\"\r\n    | \"top-end\"\r\n    | \"top-start\"\r\n    | undefined;\r\n}\r\nexport const Cash = ({ value, fallback, disableTooltip, compact = true, tooltip, placement }: CashProps) => {\r\n  const formatted = useMemo(() => {\r\n    if (value === undefined) {\r\n      return fallback;\r\n    }\r\n    return compact ? formatCashShort(value) : formatCash(value);\r\n  }, [compact, fallback, value]);\r\n\r\n  return (\r\n    <Tooltip\r\n      placement={placement}\r\n      disableHoverListener={disableTooltip || !compact || !value}\r\n      title={[tooltip, formatCash(value!)].join(\" \")}\r\n    >\r\n      <span>{formatted}</span>\r\n    </Tooltip>\r\n  );\r\n};\r\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\r\nimport { Button } from \"@mui/material\";\r\nimport { ColDef } from \"ag-grid-community\";\r\nimport { CustomCellRendererProps } from \"ag-grid-react\";\r\nimport { DateTime } from \"luxon\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { AccountData } from \"shared/models/account-data\";\r\nimport { updateAccountDate, updateAccountValue } from \"shared/store\";\r\nimport { removeAccountEntry } from \"shared/store/remove-account-entry\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\n\r\nexport const createAccountColumnConfig = (accountName: string): ColDef<AccountData>[] => [\r\n  {\r\n    headerName: \"Date\",\r\n    sort: \"desc\",\r\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\r\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\r\n    cellEditor: \"agDateCellEditor\",\r\n    editable: true,\r\n    valueSetter: (x) => {\r\n      const date = DateTime.fromJSDate(x.newValue);\r\n      if (date.isValid) {\r\n        updateAccountDate(accountName, x.data.id, date);\r\n      }\r\n      return date.isValid;\r\n    },\r\n  },\r\n  {\r\n    headerName: \"Value\",\r\n    valueGetter: (x) => x.data?.value,\r\n    valueSetter: (x) => {\r\n      updateAccountValue(accountName, x.data.id, +x.newValue);\r\n      return true;\r\n    },\r\n    cellRenderer: (x: CustomCellRendererProps<AccountData>) => <Cash value={x.value} placement=\"left\" />,\r\n    editable: true,\r\n    cellEditor: \"agNumberCellEditor\",\r\n    type: \"numericColumn\",\r\n  },\r\n  {\r\n    headerName: \"Actions\",\r\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\r\n      return (\r\n        <Button\r\n          onClick={() => {\r\n            props.data && removeAccountEntry(accountName, props.data.id);\r\n          }}\r\n          color=\"error\"\r\n          fullWidth\r\n        >\r\n          <DeleteForeverIcon />\r\n        </Button>\r\n      );\r\n    },\r\n  },\r\n];\r\n","import { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { Account } from \"shared/models/account\";\r\n\r\nexport const useMissingYears = (account: Account) => {\r\n  return useMemo(() => {\r\n    const years = Object.entries(Object.groupBy(account.data, (x) => DateTime.fromISO(x.date).year))\r\n      .map(\r\n        ([year, entries]) =>\r\n          [\r\n            +year,\r\n            !!entries?.find((x) => {\r\n              const date = DateTime.fromISO(x.date);\r\n              const janFirst = DateTime.fromObject({\r\n                day: 1,\r\n                month: 1,\r\n                year: +year,\r\n              });\r\n              return date.diff(janFirst, [\"days\", \"hours\"]).days == 0;\r\n            }),\r\n          ] as [number, boolean],\r\n      )\r\n      .sort(([a], [b]) => {\r\n        return a - b;\r\n      });\r\n\r\n    const lookup = Object.fromEntries(years);\r\n    const missing = [];\r\n    for (let i = years[0]?.[0] ?? 0; i <= years[years.length - 1]?.[0]; i++) {\r\n      if (!lookup[i]) {\r\n        missing.push(i);\r\n      }\r\n    }\r\n    return missing;\r\n  }, [account.data]);\r\n};\r\n","import { Alert, Button, InputAdornment, Paper, Stack, TextField } from \"@mui/material\";\r\nimport Grid from \"@mui/system/Unstable_Grid\";\r\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo, useRef, useState } from \"react\";\r\nimport { AgGrid } from \"shared/components/ag-grid\";\r\nimport { Account } from \"shared/models/account\";\r\nimport { AddAccountEntry, store } from \"shared/store\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\nimport { DeleteAccount } from \"../components/delete-account\";\r\nimport { RenameAccount } from \"../components/update-account\";\r\nimport { createAccountColumnConfig } from \"./column-config\";\r\nimport { useMissingYears } from \"./hooks/useMissingYears\";\r\n\r\nexport const AccountTab = (props: { accountName: string }) => {\r\n  const { accountName } = props;\r\n  const account = useStore(store, (state) => state.wealth[accountName]) as Account;\r\n  const [date, setDate] = useState(getLocalDateTime());\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const missingYears = useMissingYears(account);\r\n  const hasSameDate = useMemo(() => {\r\n    return !!account?.data?.find((x) => date.hasSame(DateTime.fromISO(x.date), \"day\"));\r\n  }, [account?.data, date]);\r\n\r\n  const onAddEntry = () => {\r\n    inputRef.current && AddAccountEntry(accountName, date, +inputRef.current?.value);\r\n  };\r\n\r\n  const accountColumnConfig = useMemo(() => {\r\n    return createAccountColumnConfig(accountName);\r\n  }, [accountName]);\r\n\r\n  return (\r\n    <Grid container height=\"100%\" width={\"100%\"} padding={1} spacing={2}>\r\n      <Grid xl={3} lg={4}>\r\n        <AgGrid\r\n          reactiveCustomComponents\r\n          rowData={account?.data ?? []}\r\n          columnDefs={accountColumnConfig}\r\n          id={account + \"-history\"}\r\n          autoSizeStrategy={{ type: \"fitGridWidth\" }}\r\n          stopEditingWhenCellsLoseFocus\r\n        />\r\n      </Grid>\r\n      <Grid xl={9} lg={8}>\r\n        <div>\r\n          <Grid container spacing={2}>\r\n            {missingYears.length > 0 && (\r\n              <Grid xs={12}>\r\n                <Paper elevation={3}>\r\n                  <Alert severity=\"warning\">Ensure an entry for Jan 1st for each year {missingYears.join(\", \")}</Alert>\r\n                </Paper>\r\n              </Grid>\r\n            )}\r\n            <Grid xl={2} lg={3}>\r\n              <Paper elevation={3} sx={{ padding: 2 }}>\r\n                <Stack spacing={1}>\r\n                  <DatePicker\r\n                    format={shortDate}\r\n                    sx={{ color: \"white\" }}\r\n                    label=\"Date\"\r\n                    defaultValue={date}\r\n                    onChange={(value) => value && setDate(value)}\r\n                  />\r\n                  <TextField\r\n                    label=\"amount\"\r\n                    type=\"number\"\r\n                    defaultValue={0}\r\n                    inputRef={inputRef}\r\n                    InputProps={{\r\n                      startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\r\n                    }}\r\n                    placeholder=\"0\"\r\n                  />\r\n                  <Button disabled={!date || hasSameDate} onClick={onAddEntry}>\r\n                    Add Entry\r\n                  </Button>\r\n                </Stack>\r\n              </Paper>\r\n            </Grid>\r\n            <Grid xl={8} lg={0}></Grid>\r\n            <Grid xl={2} lg={4}>\r\n              <Stack spacing={2}>\r\n                <DeleteAccount accountName={accountName} />\r\n                <RenameAccount key={accountName} accountName={accountName} />\r\n              </Stack>\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { AccountData } from \"shared/models/account-data\";\r\n\r\nexport const findNearestOnOrBefore = (date: DateTime, data: AccountData[]) => {\r\n  return data.find((x, idx, array) => {\r\n    if (idx == 0 && DateTime.fromISO(x.date).startOf(\"day\") >= date) {\r\n      return true;\r\n    }\r\n\r\n    if (\r\n      idx < array.length - 1 &&\r\n      DateTime.fromISO(x.date).startOf(\"day\") <= date &&\r\n      DateTime.fromISO(data[idx + 1].date).startOf(\"day\") > date\r\n    ) {\r\n      return true;\r\n    }\r\n\r\n    if (idx === array.length - 1) {\r\n      return true;\r\n    }\r\n  });\r\n};\r\n\r\nexport const findNearestIdxOnOrBefore = <T>(date: DateTime, data: T[], selector: (data: T) => DateTime) => {\r\n  return data.findIndex((x, idx, array) => {\r\n    if (idx == 0 && selector(x) >= date) {\r\n      return true;\r\n    }\r\n\r\n    if (idx < array.length - 1 && selector(x) <= date && selector(data[idx + 1]) > date) {\r\n      return true;\r\n    }\r\n\r\n    if (idx === array.length - 1) {\r\n      return true;\r\n    }\r\n  });\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { Account } from \"shared/models/account\";\r\nimport { Mortgage } from \"shared/models/mortgage\";\r\n\r\nexport const getGraphDates = (accounts: (Account | Mortgage)[]) => {\r\n  return [\r\n    ...new Set(\r\n      accounts.flatMap((x) => {\r\n        return x.data.map((x) => DateTime.fromISO(x.date).startOf(\"day\").toISO());\r\n      }),\r\n    ),\r\n  ]\r\n    .map((x) => DateTime.fromISO(x!))\r\n    .sort((a, b) => a.toMillis() - b.toMillis()) as DateTime<true>[];\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { Loan } from \"shared/models/loan\";\r\n\r\nexport const calcLoanBalance = (date: DateTime, loan: Loan) => {\r\n  const { firstPaymentDate, paymentsPerYear, principal: principal, ratePct: rate, payment: monthlyPayment } = loan;\r\n  const annualizedRate = rate / paymentsPerYear;\r\n  const periods = date.diff(DateTime.fromISO(firstPaymentDate), \"months\").months;\r\n  const totalRate = (1 + annualizedRate) ** periods;\r\n  const balance = principal * totalRate - (monthlyPayment / annualizedRate) * (totalRate - 1);\r\n\r\n  return balance;\r\n};\r\n\r\nexport const calcEquity = (\r\n  ownershipPct: number,\r\n  houseValue: number | undefined,\r\n  loanBalance: number,\r\n  principal: number\r\n) => {\r\n  return houseValue ? houseValue * ownershipPct - loanBalance : principal - loanBalance;\r\n};\r\n","import { Button, Paper, TextField } from \"@mui/material\";\r\nimport { Stack } from \"@mui/system\";\r\nimport { DatePicker } from \"@mui/x-date-pickers\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useRef } from \"react\";\r\nimport { AddAccountEntry } from \"shared/store\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\n\r\nexport const AddEntry = (props: { accountName: string }) => {\r\n  const { accountName } = props;\r\n  const ref = useRef<{ date?: DateTime; value?: number }>({\r\n    date: getLocalDateTime(),\r\n    value: 0,\r\n  });\r\n  const onAddEntry = () => {\r\n    const { date, value } = ref.current;\r\n    if (!date || !value) {\r\n      return;\r\n    }\r\n    AddAccountEntry(accountName, date, value);\r\n  };\r\n  return (\r\n    <Paper elevation={3} sx={{ padding: 2 }}>\r\n      <Stack spacing={1}>\r\n        <DatePicker\r\n          defaultValue={getLocalDateTime()}\r\n          onChange={(date: DateTime | null) => {\r\n            if (date) {\r\n              ref.current.date = date;\r\n            }\r\n          }}\r\n        />\r\n        <TextField\r\n          label=\"Home value\"\r\n          type=\"numeric\"\r\n          onChange={(event) => {\r\n            ref.current.value = +event.target.value;\r\n          }}\r\n        />\r\n        <Button onClick={onAddEntry}>Add Home Value</Button>\r\n      </Stack>\r\n    </Paper>\r\n  );\r\n};\r\n","export function groupBy<T, T2 extends string | number | symbol>(array: T[], selector: (x: T) => T2): Record<T2, T[]> {\r\n  return array.reduce(\r\n    (acc: Record<T2, T[]>, curr: T) => {\r\n      const key = selector(curr);\r\n      acc[key] ??= [];\r\n      acc[key].push(curr);\r\n      return acc;\r\n    },\r\n    {} as Record<T2, T[]>,\r\n  );\r\n}\r\n","import { Button, Paper, Stack, TextField } from \"@mui/material\";\r\nimport { DatePicker } from \"@mui/x-date-pickers\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useRef, useState } from \"react\";\r\nimport { Loan } from \"shared/models/loan\";\r\nimport { store } from \"shared/store\";\r\nimport { setLoan } from \"shared/store/set-loan\";\r\nimport { groupBy } from \"shared/utility/group-by\";\r\nimport { ZodIssue, z } from \"zod\";\r\n\r\nconst convertPct = (value: number) => {\r\n  return value > 1 ? value / 100 : value;\r\n};\r\n\r\nconst validator: z.ZodType<Loan> = z.object({\r\n  principal: z.number().min(0),\r\n  ratePct: z.number().min(0),\r\n  paymentsPerYear: z.number().min(0),\r\n  payment: z.number().min(0),\r\n  firstPaymentDate: z.string().datetime({ offset: true }),\r\n  ownershipPct: z.number().min(0),\r\n});\r\n\r\nexport const AddLoan = (props: { accountName: string }) => {\r\n  const { accountName } = props;\r\n\r\n  const loan = useStore(store, (x) => {\r\n    const account = x.wealth[accountName];\r\n    if (\"loan\" in account) {\r\n      return account.loan;\r\n    }\r\n  });\r\n\r\n  const ref = useRef<Partial<Loan>>(loan ?? {});\r\n  const [error, setError] = useState<Partial<Record<keyof Loan, ZodIssue>>>({});\r\n\r\n  return (\r\n    <Paper elevation={3} sx={{ padding: 2 }}>\r\n      <Stack spacing={1}>\r\n        <DatePicker\r\n          defaultValue={ref.current?.firstPaymentDate ? DateTime.fromISO(ref.current.firstPaymentDate) : null}\r\n          label=\"First Payment\"\r\n          slotProps={{\r\n            textField: {\r\n              error: !!error.firstPaymentDate,\r\n            },\r\n          }}\r\n          onChange={(value: DateTime | null) => {\r\n            if (value) {\r\n              ref.current.firstPaymentDate = value.startOf(\"day\").toISO()!;\r\n            }\r\n          }}\r\n        />\r\n        <TextField\r\n          error={!!error.principal}\r\n          defaultValue={loan?.principal}\r\n          onChange={(event) => {\r\n            ref.current.principal = +event.target.value;\r\n          }}\r\n          variant=\"outlined\"\r\n          label=\"Principal\"\r\n          type=\"number\"\r\n        />\r\n        <TextField\r\n          error={!!error.ratePct}\r\n          defaultValue={loan?.ratePct}\r\n          onChange={(event) => {\r\n            ref.current.ratePct = convertPct(+event.target.value);\r\n          }}\r\n          variant=\"outlined\"\r\n          label=\"Rate\"\r\n          type=\"number\"\r\n        />\r\n        <TextField\r\n          error={!!error.paymentsPerYear}\r\n          defaultValue={loan?.paymentsPerYear}\r\n          onChange={(event) => {\r\n            ref.current.paymentsPerYear = +event.target.value;\r\n          }}\r\n          variant=\"outlined\"\r\n          label=\"Payments Per Year\"\r\n          type=\"number\"\r\n        />\r\n        <TextField\r\n          defaultValue={loan?.payment}\r\n          error={!!error.payment}\r\n          onChange={(event) => {\r\n            ref.current.payment = +event.target.value;\r\n          }}\r\n          variant=\"outlined\"\r\n          label=\"Payment\"\r\n          type=\"number\"\r\n        />\r\n        <TextField\r\n          defaultValue={loan?.ownershipPct}\r\n          error={!!error.ownershipPct}\r\n          onChange={(event) => {\r\n            ref.current.ownershipPct = convertPct(+event.target.value);\r\n          }}\r\n          variant=\"outlined\"\r\n          label=\"Ownership (%)\"\r\n          type=\"number\"\r\n        />\r\n        <Button\r\n          onClick={() => {\r\n            const parsed = validator.safeParse(ref.current);\r\n            if (parsed.success) {\r\n              setError({});\r\n              setLoan(accountName, parsed.data);\r\n            } else {\r\n              const issues = groupBy(parsed.error.issues, (x) => x.path.join(\"\"));\r\n              setError(issues);\r\n            }\r\n          }}\r\n        >\r\n          Set Loan\r\n        </Button>\r\n      </Stack>\r\n    </Paper>\r\n  );\r\n};\r\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\r\nimport { Button } from \"@mui/material\";\r\nimport { ColDef } from \"ag-grid-community\";\r\nimport { CustomCellRendererProps } from \"ag-grid-react\";\r\nimport { DateTime } from \"luxon\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { AccountData } from \"shared/models/account-data\";\r\nimport { removeAccountEntry } from \"shared/store\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\n\r\nexport const createAccountColumnConfig = (accountName: string): ColDef<AccountData>[] => [\r\n  {\r\n    headerName: \"Date\",\r\n    sort: \"desc\",\r\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\r\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\r\n  },\r\n  {\r\n    headerName: \"Home Value\",\r\n    cellRenderer: (x: CustomCellRendererProps<AccountData>) => <Cash value={x.value} placement=\"left\" />,\r\n    valueGetter: (x) => x.data?.value,\r\n    type: \"numericColumn\",\r\n  },\r\n  {\r\n    headerName: \"Actions\",\r\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\r\n      return (\r\n        <Button\r\n          onClick={() => {\r\n            props.data && removeAccountEntry(accountName, props.data?.id);\r\n          }}\r\n          color=\"error\"\r\n          fullWidth\r\n        >\r\n          <DeleteForeverIcon />\r\n        </Button>\r\n      );\r\n    },\r\n  },\r\n];\r\n\r\ntype House = {\r\n  date: DateTime;\r\n  balance: number;\r\n  equity: number;\r\n};\r\n\r\nexport const mortgageColumnConfig: ColDef<House>[] = [\r\n  {\r\n    headerName: \"Date\",\r\n    sort: \"desc\",\r\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\r\n    valueGetter: (x) => x.data?.date,\r\n  },\r\n  {\r\n    headerName: \"Loan Balance\",\r\n    valueGetter: (x) => x.data?.balance.toFixed(2),\r\n    cellRenderer: (x: CustomCellRendererProps<House>) => <Cash value={x.value} placement=\"left\" />,\r\n    type: \"numericColumn\",\r\n  },\r\n  {\r\n    headerName: \"Equity\",\r\n    valueGetter: (x) => x.data?.equity.toFixed(2),\r\n    cellRenderer: (x: CustomCellRendererProps<House>) => <Cash value={x.value} placement=\"left\" />,\r\n    type: \"numericColumn\",\r\n  },\r\n];\r\n","import { Stack } from \"@mui/system\";\r\nimport Grid from \"@mui/system/Unstable_Grid\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { useMemo } from \"react\";\r\nimport { AgGrid } from \"shared/components/ag-grid\";\r\nimport { Mortgage } from \"shared/models/mortgage\";\r\nimport { store } from \"shared/store\";\r\n\r\nimport { findNearestOnOrBefore } from \"shared/utility/find-nearest-on-or-before\";\r\nimport { getGraphDates } from \"shared/utility/get-graph-dates\";\r\nimport { calcEquity, calcLoanBalance } from \"shared/utility/mortgage-calc\";\r\nimport { DeleteAccount } from \"../components/delete-account\";\r\nimport { RenameAccount } from \"../components/update-account\";\r\nimport { AddEntry } from \"./add-entry\";\r\nimport { AddLoan } from \"./add-loan\";\r\nimport { createAccountColumnConfig, mortgageColumnConfig } from \"./column-config\";\r\n\r\nexport const MortgageTab = (props: { accountName: string }) => {\r\n  const { accountName } = props;\r\n\r\n  const account = useStore(store, (state) => state.wealth[accountName]) as Mortgage;\r\n\r\n  const allAccounts = useStore(store, (x) => x.wealth);\r\n\r\n  const accountColumnConfig = useMemo(() => {\r\n    return createAccountColumnConfig(accountName);\r\n  }, [accountName]);\r\n\r\n  const mortgageData = useMemo(() => {\r\n    if (!account?.loan) {\r\n      return [];\r\n    }\r\n\r\n    return getGraphDates(Object.values(allAccounts)).map((date) => {\r\n      const loanBalance = calcLoanBalance(date, account.loan!);\r\n      return {\r\n        date,\r\n        balance: loanBalance,\r\n        equity: calcEquity(\r\n          account.loan!.ownershipPct,\r\n          findNearestOnOrBefore(date, account.data)?.value,\r\n          loanBalance,\r\n          account.loan!.principal\r\n        ),\r\n      };\r\n    });\r\n  }, [account, allAccounts]);\r\n\r\n  return (\r\n    <Grid container height=\"100%\" width={\"100%\"} padding={1} spacing={2}>\r\n      <Grid lg={3}>\r\n        <AgGrid\r\n          reactiveCustomComponents\r\n          rowData={account?.data ?? []}\r\n          columnDefs={accountColumnConfig}\r\n          id={account + \"-history\"}\r\n        />\r\n      </Grid>\r\n      <Grid lg={3}>\r\n        <AgGrid\r\n          rowData={mortgageData}\r\n          columnDefs={mortgageColumnConfig}\r\n          id={account + \"-history\"}\r\n          autoSizeStrategy={{ type: \"fitGridWidth\" }}\r\n        />\r\n      </Grid>\r\n      <Grid lg={6}>\r\n        <div>\r\n          <Grid container spacing={2}>\r\n            <Grid xl={3}>\r\n              <AddLoan accountName={accountName} />\r\n            </Grid>\r\n            <Grid xl={3}>\r\n              <AddEntry accountName={accountName} />\r\n            </Grid>\r\n            <Grid xl={0}></Grid>\r\n            <Grid xl={3}>\r\n              <Stack spacing={2}>\r\n                <DeleteAccount accountName={accountName} />\r\n                <RenameAccount key={accountName} accountName={accountName} />\r\n              </Stack>\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import { Box, Tab, Tabs } from \"@mui/material\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { NewAccount } from \"../new-account\";\r\nimport { AccountTab } from \"../tab-types/account/account\";\r\nimport { MortgageTab } from \"../tab-types/mortgage\";\r\n\r\nexport const AccountTabs = () => {\r\n  const accounts = useStore(store, (x) => x.wealth);\r\n  const firstAccount = Object.keys(accounts)?.[0];\r\n  const [account, setAccount] = useState<string>(firstAccount);\r\n\r\n  useEffect(() => {\r\n    if (!accounts[account]) {\r\n      setAccount(Object.keys(accounts)?.[0] ?? \"\");\r\n    }\r\n  }, [account, accounts]);\r\n\r\n  return (\r\n    <Box display=\"flex\" flexDirection={\"column\"} width=\"100%\" height=\"100%\">\r\n      <Box display={\"flex\"} flex={\"0 1 auto\"}>\r\n        {Object.keys(accounts).length > 0 && (\r\n          <Tabs\r\n            value={account}\r\n            onChange={(_, value) => {\r\n              setAccount(value as string);\r\n            }}\r\n          >\r\n            {Object.keys(accounts).map((account) => {\r\n              return <Tab key={account} value={account} label={account} />;\r\n            })}\r\n          </Tabs>\r\n        )}\r\n        <Tab component={NewAccount} />\r\n      </Box>\r\n      <Box flex={\"1 1 auto\"}>\r\n        {accounts[account]?.type === \"account\" && <AccountTab accountName={account} />}\r\n        {accounts[account]?.type === \"mortgage\" && <MortgageTab accountName={account} />}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { Account } from \"shared/models/account\";\r\nimport { Mortgage } from \"shared/models/mortgage\";\r\nimport { findNearestOnOrBefore } from \"./find-nearest-on-or-before\";\r\nimport { calcEquity, calcLoanBalance } from \"./mortgage-calc\";\r\n\r\nconst getMortgageValue = (date: DateTime, mortgage: Mortgage) => {\r\n  if (!mortgage.loan) {\r\n    return 0;\r\n  }\r\n  const entry = findNearestOnOrBefore(date, mortgage.data);\r\n  if (entry?.date && mortgage.data[0] === entry && DateTime.fromISO(entry.date).startOf(\"day\") > date) {\r\n    return 0;\r\n  }\r\n  const { ownershipPct, principal } = mortgage.loan;\r\n  const balance = calcLoanBalance(date, mortgage.loan);\r\n  return calcEquity(ownershipPct, entry?.value, balance, principal);\r\n};\r\n\r\nconst getAccountValue = (date: DateTime, account: Account) => {\r\n  const entry = findNearestOnOrBefore(date, account.data);\r\n  if (entry?.date && account.data[0] === entry && DateTime.fromISO(entry.date).startOf(\"day\") > date) {\r\n    return 0;\r\n  }\r\n  return entry?.value;\r\n};\r\n\r\nexport const getGraphValue = (date: DateTime, account: Account | Mortgage) => {\r\n  switch (account.type) {\r\n    case \"account\":\r\n      return getAccountValue(date, account);\r\n    case \"mortgage\":\r\n      return getMortgageValue(date, account);\r\n  }\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { useMemo } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { getGraphDates } from \"shared/utility/get-graph-dates\";\r\nimport { getGraphValue } from \"shared/utility/get-graph-value\";\r\n\r\nexport const useGraphData = () => {\r\n  const wealth = useStore(store, (x) => x.wealth);\r\n\r\n  return useMemo(() => {\r\n    const dates = getGraphDates(Object.values(wealth));\r\n    const accounts = Object.entries(wealth);\r\n    const graphData = dates.map((date) => {\r\n      return accounts.reduce(\r\n        (acc, [accountName, account]) => {\r\n          const value = getGraphValue(date, account);\r\n\r\n          if (value) {\r\n            acc[accountName] = value;\r\n            acc[\"total\"] = (acc[\"total\"] as number) + value;\r\n          } else {\r\n            acc[accountName] = null;\r\n          }\r\n\r\n          acc[\"date\"] = date.toJSDate();\r\n          return acc;\r\n        },\r\n        { total: 0 } as Record<string, number | Date | null>,\r\n      );\r\n    });\r\n\r\n    graphData.forEach((x, idx, arr) => {\r\n      if (idx < arr.length - 1) {\r\n        Object.keys(x).forEach((key) => {\r\n          if (x[key] === null && arr[idx + 1][key] !== null) {\r\n            x[key] = 0;\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    const firstNonZero = graphData.findIndex((x) => (x[\"total\"] as number) > 0);\r\n    return graphData.slice(firstNonZero);\r\n  }, [wealth]);\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { AgAreaSeriesOptions, AgCartesianChartOptions, AgLineSeriesOptions } from \"ag-charts-community\";\r\nimport { AgChartsReact } from \"ag-charts-react\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { formatCashShort } from \"shared/utility/format-cash\";\r\nimport { useGraphData } from \"./use-graph-data\";\r\n\r\nexport const WealthChart = () => {\r\n  const wealth = useStore(store, (x) => x.wealth);\r\n  const data = useGraphData();\r\n\r\n  const series = useMemo(() => {\r\n    return [\r\n      ...Object.keys(wealth).map((x) => {\r\n        return {\r\n          stacked: true,\r\n          type: \"area\",\r\n          xKey: \"date\",\r\n          yKey: x,\r\n          yName: x,\r\n          tooltip: {\r\n            renderer: ({ datum, yKey, xKey }) => ({\r\n              content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCashShort(datum[yKey])}`,\r\n            }),\r\n          },\r\n        } as AgAreaSeriesOptions;\r\n      }),\r\n      {\r\n        type: \"line\",\r\n        xKey: \"date\",\r\n        yKey: \"total\",\r\n        yName: \"Total\",\r\n        tooltip: {\r\n          renderer: ({ datum, yKey, xKey }) => ({\r\n            content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCashShort(datum[yKey])}`,\r\n          }),\r\n        },\r\n      } as AgLineSeriesOptions,\r\n    ];\r\n  }, [wealth]);\r\n\r\n  const options: AgCartesianChartOptions = useMemo(\r\n    () => ({\r\n      theme: \"ag-default-dark\",\r\n      title: {\r\n        text: `Total Wealth ${formatCashShort((data[data.length - 1]?.total ?? 0) as number)}`,\r\n      },\r\n      data,\r\n      axes: [\r\n        {\r\n          type: \"time\",\r\n          position: \"bottom\",\r\n          label: {\r\n            format: \"%Y\",\r\n          },\r\n        },\r\n        {\r\n          type: \"number\",\r\n          position: \"left\",\r\n        },\r\n      ],\r\n      series,\r\n    }),\r\n    [data, series],\r\n  );\r\n  return <AgChartsReact options={options} />;\r\n};\r\n","import Grid from \"@mui/system/Unstable_Grid\";\r\nimport { AccountTabs } from \"./components/account-tabs\";\r\nimport { WealthChart } from \"./components/wealth-chart\";\r\n\r\nexport const NetWealth = () => {\r\n  return (\r\n    <Grid container height={\"100%\"} width=\"100%\" spacing={1}>\r\n      <Grid xs={12} height=\"50%\">\r\n        <WealthChart />\r\n      </Grid>\r\n      <Grid xs={12} height=\"50%\">\r\n        <AccountTabs />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\n\r\nexport const useDates = (year?: number) =>\r\n  useMemo(() => {\r\n    return {\r\n      meritIncrease: DateTime.fromObject({ month: 4, day: 1, year }),\r\n      meritBonus: DateTime.fromObject({ month: 4, day: 15, year }),\r\n      companyBonus: DateTime.fromObject({ month: 6, day: 15, year }),\r\n      retirementBonus: DateTime.fromObject({ month: 7, day: 15, year }),\r\n    };\r\n  }, [year]);\r\n\r\nexport const useDateRanges = (year: number) => {\r\n  return useMemo(\r\n    () => ({\r\n      base: {\r\n        start: DateTime.fromObject({ month: 1, day: 1, year }),\r\n        end: DateTime.fromObject({ month: 12, day: 31, year }).endOf(\"day\"),\r\n      },\r\n      meritBonus: {\r\n        start: DateTime.fromObject({ month: 1, day: 1, year: year - 1 }),\r\n        end: DateTime.fromObject({ month: 12, day: 31, year: year - 1 }).endOf(\"day\"),\r\n      },\r\n      companyBonus: {\r\n        start: DateTime.fromObject({ day: 1, month: 4, year: year - 1 }),\r\n        end: DateTime.fromObject({ day: 31, month: 3, year }).endOf(\"day\"),\r\n      },\r\n      retirementBonus: {\r\n        start: DateTime.fromObject({ day: 1, month: 7, year: year - 1 }),\r\n        end: DateTime.fromObject({ day: 30, month: 6, year }).endOf(\"day\"),\r\n      },\r\n    }),\r\n    [year]\r\n  );\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { AccountData } from \"shared/models/account-data\";\r\n\r\nexport function findSameYear(year: number, data: AccountData[]): AccountData | undefined;\r\nexport function findSameYear(date: DateTime, data: AccountData[]): AccountData | undefined;\r\nexport function findSameYear(date: DateTime | number, data: AccountData[]): AccountData | undefined {\r\n  const year = typeof date === \"number\" ? date : date.year;\r\n  return data.find((x) => {\r\n    return DateTime.fromISO(x.date).year === year;\r\n  });\r\n}\r\n","export interface Outcome {\r\n  min: number;\r\n  max: number;\r\n  avg: number;\r\n  actual?: number;\r\n}\r\n\r\nexport interface BonusOutcomes {\r\n  percent: Outcome;\r\n  cash: Outcome;\r\n}\r\n\r\nexport const minMaxAvg = (values: number[]): Outcome => {\r\n  if (values.length === 0) {\r\n    return { min: 0, max: 0, avg: 0 };\r\n  }\r\n  return values.reduce(\r\n    (acc, curr, index, arr) => {\r\n      const { min, max, avg } = acc;\r\n      return {\r\n        min: Math.min(curr, min),\r\n        max: Math.max(curr, max),\r\n        avg: index === arr.length - 1 ? (avg + curr) / arr.length : avg + curr,\r\n      };\r\n    },\r\n    { min: Infinity, max: 0, avg: 0 },\r\n  );\r\n};\r\n\r\nexport const outcomeFromSingle = (value: number): Outcome => {\r\n  return { min: value, max: value, avg: value, actual: value };\r\n};\r\n\r\nexport const actualizedOutcome = (outcome: Outcome): Outcome =>\r\n  outcome.actual ? outcomeFromSingle(outcome.actual) : outcome;\r\n\r\nexport const scaleOutcome = (outcome: Outcome, value: number): Outcome => {\r\n  return {\r\n    min: outcome.min * value,\r\n    max: outcome.max * value,\r\n    avg: outcome.avg * value,\r\n    actual: outcome.actual ? outcome.actual * value : undefined,\r\n  };\r\n};\r\nexport const AddConstantOutcome = (outcome: Outcome, value: number): Outcome => {\r\n  return {\r\n    min: outcome.min + value,\r\n    max: outcome.max + value,\r\n    avg: outcome.avg + value,\r\n    actual: outcome.actual ? outcome.actual + value : undefined,\r\n  };\r\n};\r\n\r\nexport const MultiplyOutcome = (outcomeA: Outcome, outcomeB: Outcome): Outcome => {\r\n  return {\r\n    min: outcomeA.min * outcomeB.min,\r\n    max: outcomeA.max * outcomeB.max,\r\n    avg: outcomeA.avg * outcomeB.avg,\r\n    actual: outcomeA.actual != undefined && outcomeB.actual != undefined ? outcomeA.actual * outcomeB.avg : undefined,\r\n  };\r\n};\r\n\r\nexport const AddOutcome = (...outcomes: Outcome[]): Outcome => {\r\n  const everyActualDefined = outcomes.every((x) => x.actual != undefined);\r\n  return outcomes.reduce(\r\n    (acc, curr) => {\r\n      return {\r\n        min: acc.min + curr.min,\r\n        avg: acc.avg + curr.avg,\r\n        max: acc.max + curr.max,\r\n        actual: everyActualDefined ? (acc.actual ?? 0) + (curr.actual ?? 0) : undefined,\r\n      };\r\n    },\r\n    { min: 0, max: 0, avg: 0, actual: undefined },\r\n  );\r\n};\r\n","import { DateTime } from \"luxon\";\r\n\r\nexport const aPayday = DateTime.fromObject({ month: 12, day: 1, year: 2023 });\r\n","import { DateTime } from \"luxon\";\r\n\r\nexport function DateRangesOverlap(a: { start: DateTime; end: DateTime }, b: { start: DateTime; end: DateTime }) {\r\n  return a.start <= b.end && b.start <= a.end;\r\n}\r\n","import { DateTime } from \"luxon\";\r\n\r\nexport interface PayPeriod {\r\n  start: DateTime;\r\n  end: DateTime;\r\n  payedOn: DateTime;\r\n}\r\n\r\nexport const getPayPeriods = (anyPayday: DateTime, start: DateTime, end: DateTime): PayPeriod[] => {\r\n  const diff = anyPayday.diff(start, [\"weeks\", \"days\"]).days;\r\n  const startPayDay = start.plus({\r\n    day: diff,\r\n  });\r\n\r\n  const numPayDays = end.diff(start, [\"weeks\", \"days\"]).weeks / 2;\r\n  const periods = [];\r\n  for (let i = 1; i <= numPayDays; i++) {\r\n    periods.push({\r\n      start: startPayDay.plus({ weeks: i * 2 - 3, day: 3 }),\r\n      end: startPayDay.plus({ weeks: i * 2 - 1 }).endOf(\"day\"),\r\n      payedOn: startPayDay.plus({ weeks: i * 2 }),\r\n    });\r\n  }\r\n  return periods;\r\n};\r\n","import { useMemo } from \"react\";\r\nimport { AccountData } from \"shared/models/account-data\";\r\n\r\nexport const useMostFrequentValue = (data: AccountData[]): number | undefined => {\r\n  return useMemo(() => {\r\n    return Object.entries(\r\n      Object.groupBy(\r\n        data.map((x) => x.value),\r\n        (x) => x\r\n      )\r\n    )\r\n      .map(([key, values]) => [+key, values?.length ?? 0])\r\n      .sort(([, a], [, b]) => {\r\n        return b - a;\r\n      })[0]?.[0];\r\n  }, [data]);\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { AccountData } from \"shared/models/account-data\";\r\nimport { store } from \"shared/store\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { findSameYear } from \"shared/utility/find-same-year\";\r\nimport { sortByDate } from \"shared/utility/sort-by-date\";\r\nimport { useMostFrequentValue } from \"./use-most-frequent-value\";\r\n\r\nconst valueByDateRange = (account: AccountData[]) => {\r\n  return account.toSorted(sortByDate((x) => DateTime.fromISO(x.date), \"asc\")).map((x, index, array) => {\r\n    const next = array[index + 1];\r\n    return {\r\n      start: DateTime.fromISO(x.date),\r\n      end: (next?.date ? DateTime.fromISO(next?.date).startOf(\"day\") : DateTime.fromISO(x.date).plus({ years: 1 }))\r\n        .minus({ days: 1 })\r\n        .endOf(\"day\"),\r\n      value: x.value,\r\n    };\r\n  });\r\n};\r\n\r\nconst systemYear = getLocalDateTime().year;\r\nconst defaultValue = {\r\n  start: DateTime.fromObject({\r\n    month: 1,\r\n    day: 1,\r\n    year: systemYear,\r\n  }),\r\n  end: DateTime.fromObject({\r\n    month: 12,\r\n    day: 31,\r\n    year: systemYear,\r\n  }).endOf(\"day\"),\r\n  value: 0,\r\n};\r\n\r\nexport const useProjectedPay = () => {\r\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\r\n  const baseIncome = timeSeries.paycheck;\r\n  const meritPct = useMostFrequentValue(timeSeries.meritIncreasePct);\r\n\r\n  return useMemo(() => {\r\n    const payPerPeriod = valueByDateRange(baseIncome);\r\n    const mostRecentPay = payPerPeriod[payPerPeriod.length - 1] ?? defaultValue;\r\n\r\n    for (let i = 0; i < 2; i++) {\r\n      const { start, end, value } = payPerPeriod[0] ?? mostRecentPay;\r\n      const startDate = start.plus({ years: -1 }).startOf(\"day\");\r\n      const equity = findSameYear(start, timeSeries.equityPct)?.value ?? 0;\r\n      const merit = findSameYear(start, timeSeries.meritIncreasePct)?.value ?? meritPct ?? 0;\r\n      const multiplier = 1 / (1 + merit + equity);\r\n\r\n      payPerPeriod.unshift({\r\n        start: startDate,\r\n        end: end.plus({ years: -1 }).endOf(\"day\"),\r\n        value: Math.round(value * multiplier),\r\n      });\r\n    }\r\n\r\n    const startIdx = payPerPeriod.length;\r\n    for (let i = 0; i < 11; i++) {\r\n      const { start, end, value } = payPerPeriod[startIdx + i - 1] ?? mostRecentPay;\r\n      const startDate = start.plus({ years: 1 });\r\n      const equity = findSameYear(startDate, timeSeries.equityPct)?.value ?? 0;\r\n      const merit = findSameYear(startDate, timeSeries.meritIncreasePct)?.value ?? meritPct ?? 0;\r\n      const multiplier = 1 + merit + equity;\r\n\r\n      payPerPeriod.push({\r\n        start: startDate,\r\n        end: end.plus({ years: 1 }).endOf(\"day\"),\r\n        value: Math.round(value * multiplier),\r\n      });\r\n    }\r\n\r\n    return payPerPeriod;\r\n  }, [baseIncome, meritPct, timeSeries.equityPct, timeSeries.meritIncreasePct]);\r\n};\r\n","import { differenceInBusinessDays } from \"date-fns/differenceInBusinessDays\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { aPayday } from \"shared/utility/a-payday\";\r\nimport { DateRangesOverlap } from \"shared/utility/date-ranges-overlap\";\r\nimport { PayPeriod, getPayPeriods } from \"shared/utility/get-pay-periods\";\r\nimport { useProjectedPay } from \"./use-projected-pay\";\r\n\r\nexport type IncomePerPeriod = {\r\n  perPayday: number;\r\n  count: number;\r\n  start: DateTime;\r\n  end: DateTime;\r\n  value: number;\r\n};\r\n\r\nexport interface BaseIncome {\r\n  totalIncome: number;\r\n  payPeriods: (PayPeriod & { value: number })[];\r\n  incomePerPeriod: IncomePerPeriod[];\r\n}\r\n\r\nexport const useBaseIncome = (startDate: DateTime, endDate: DateTime): BaseIncome => {\r\n  const pay = useProjectedPay();\r\n\r\n  return useMemo(() => {\r\n    const payPeriods = getPayPeriods(aPayday, startDate, endDate).map((payPeriod) => {\r\n      const dateRanges = pay.filter((x) => DateRangesOverlap(x, payPeriod));\r\n      const payDuringPeriod = dateRanges.map((x) => {\r\n        const start = DateTime.max(x.start, payPeriod.start);\r\n        const end = DateTime.min(x.end, payPeriod.end);\r\n        const businessDays = differenceInBusinessDays(end.plus({ milliseconds: 1 }).toJSDate(), start.toJSDate());\r\n        const value = (x.value / 10) * Math.max(1, businessDays);\r\n        return {\r\n          start,\r\n          end,\r\n          value,\r\n        };\r\n      });\r\n      const sum = payDuringPeriod.reduce((acc, curr) => acc + curr.value, 0);\r\n\r\n      return {\r\n        ...payPeriod,\r\n        value: sum,\r\n      };\r\n    });\r\n\r\n    const totalIncome = payPeriods.reduce((acc, curr) => acc + curr.value, 0);\r\n\r\n    const incomePerPeriod = payPeriods\r\n      .reduceRight((acc, curr) => {\r\n        if (acc[0]?.[0]?.value === curr.value) {\r\n          acc[0].unshift(curr);\r\n        } else {\r\n          acc.unshift([curr]);\r\n        }\r\n\r\n        return acc;\r\n      }, [] as (typeof payPeriods)[])\r\n      .reduce((acc, curr) => {\r\n        acc.push({\r\n          start: curr[0].payedOn,\r\n          end: curr[curr.length - 1].payedOn,\r\n          value: curr.reduce((acc, curr) => acc + curr.value, 0),\r\n          perPayday: curr[0].value,\r\n          count: curr.length,\r\n        });\r\n        return acc;\r\n      }, [] as IncomePerPeriod[]);\r\n\r\n    return { totalIncome, payPeriods, incomePerPeriod };\r\n  }, [startDate, endDate, pay]);\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { useDateRanges } from \"shared/hooks/use-dates\";\r\nimport { store } from \"shared/store\";\r\nimport { findSameYear } from \"shared/utility/find-same-year\";\r\nimport { BonusOutcomes, actualizedOutcome, minMaxAvg, scaleOutcome } from \"shared/utility/min-max-avg\";\r\nimport { useBaseIncome } from \"./use-base-income\";\r\n\r\nexport const useCompanyBonus = (year: number): BonusOutcomes => {\r\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\r\n  const dateRanges = useDateRanges(year);\r\n  const { totalIncome } = useBaseIncome(dateRanges.companyBonus.start, dateRanges.companyBonus.end);\r\n\r\n  return useMemo(() => {\r\n    const mostRecentBonus = findSameYear(year, timeSeries.companyBonus);\r\n    const mostRecentPercent = findSameYear(year, timeSeries.companyBonusPct);\r\n\r\n    const meritFactor = timeSeries.meritBonusPct\r\n      .filter((x) => DateTime.fromISO(x.date).year <= year)\r\n      .slice(-3)\r\n      .reduce((acc, curr) => acc + curr.value, 0);\r\n\r\n    const outcomes = minMaxAvg(timeSeries.companyBonusPct.map((x) => x.value));\r\n    const cash = scaleOutcome(outcomes, meritFactor * totalIncome);\r\n    const projectedActual = mostRecentPercent?.value ? mostRecentPercent?.value * meritFactor * totalIncome : undefined;\r\n\r\n    return {\r\n      percent: actualizedOutcome({\r\n        ...outcomes,\r\n        actual: mostRecentPercent?.value,\r\n      }),\r\n      cash: actualizedOutcome({\r\n        ...cash,\r\n        actual: mostRecentBonus?.value ?? projectedActual,\r\n      }),\r\n    };\r\n  }, [totalIncome, timeSeries.companyBonus, timeSeries.companyBonusPct, timeSeries.meritBonusPct, year]);\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { useDateRanges } from \"shared/hooks/use-dates\";\r\nimport { store } from \"shared/store\";\r\nimport { findSameYear } from \"shared/utility/find-same-year\";\r\nimport { BonusOutcomes, actualizedOutcome, minMaxAvg, scaleOutcome } from \"shared/utility/min-max-avg\";\r\nimport { useBaseIncome } from \"./use-base-income\";\r\nimport { useMostFrequentValue } from \"./use-most-frequent-value\";\r\n\r\nexport const useMeritBonus = (year: number): BonusOutcomes => {\r\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\r\n  const ranges = useDateRanges(year);\r\n  const { totalIncome } = useBaseIncome(ranges.meritBonus.start, ranges.meritBonus.end);\r\n\r\n  const bonusAmount = useMemo(() => {\r\n    return findSameYear(year, timeSeries.meritBonus)?.value;\r\n  }, [timeSeries.meritBonus, year]);\r\n\r\n  const bonusPercent = useMemo(() => {\r\n    return findSameYear(year, timeSeries.meritBonusPct)?.value;\r\n  }, [timeSeries.meritBonusPct, year]);\r\n\r\n  const frequentMeritBonusPercent = useMostFrequentValue(timeSeries.meritBonusPct);\r\n\r\n  return useMemo(() => {\r\n    const meritOutcome = minMaxAvg(\r\n      timeSeries.meritBonusPct.filter((x) => DateTime.fromISO(x.date).year <= year).map((x) => x.value)\r\n    );\r\n    meritOutcome.avg = frequentMeritBonusPercent ?? 0;\r\n\r\n    return {\r\n      percent: actualizedOutcome({ ...meritOutcome, actual: bonusPercent }),\r\n      cash: actualizedOutcome({\r\n        ...scaleOutcome(meritOutcome, totalIncome),\r\n        actual: bonusAmount ?? (bonusPercent ? totalIncome * bonusPercent : undefined),\r\n      }),\r\n    };\r\n  }, [bonusAmount, bonusPercent, frequentMeritBonusPercent, timeSeries.meritBonusPct, totalIncome, year]);\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { useMemo } from \"react\";\r\nimport { useDateRanges } from \"shared/hooks/use-dates\";\r\nimport { store } from \"shared/store\";\r\nimport { findSameYear } from \"shared/utility/find-same-year\";\r\nimport {\r\n  AddOutcome,\r\n  BonusOutcomes,\r\n  actualizedOutcome,\r\n  outcomeFromSingle,\r\n  scaleOutcome,\r\n} from \"shared/utility/min-max-avg\";\r\nimport { useBaseIncome } from \"./use-base-income\";\r\nimport { useCompanyBonus } from \"./use-company-bonus\";\r\nimport { useMeritBonus } from \"./use-merit-bonus\";\r\n\r\nconst bonusPercent = 0.15;\r\nexport const useRetirementBonus = (year: number): BonusOutcomes => {\r\n  const actual = useStore(store, (x) => findSameYear(year, x.projectedIncome.timeSeries.retirementBonus)?.value);\r\n\r\n  const dateRanges = useDateRanges(year);\r\n  const { totalIncome } = useBaseIncome(dateRanges.retirementBonus.start, dateRanges.retirementBonus.end);\r\n\r\n  const meritBonus = useMeritBonus(year);\r\n  const juneBonus = useCompanyBonus(year);\r\n\r\n  return useMemo(() => {\r\n    const eligibleIncome = outcomeFromSingle(totalIncome);\r\n    const outcome = scaleOutcome(\r\n      AddOutcome(eligibleIncome, actualizedOutcome(meritBonus.cash), actualizedOutcome(juneBonus.cash)),\r\n      bonusPercent\r\n    );\r\n    return {\r\n      cash: actualizedOutcome({ ...outcome, actual: actual ?? outcome.actual }),\r\n      percent: {\r\n        min: 0.15,\r\n        max: 0.15,\r\n        avg: 0.15,\r\n        actual: 0.15,\r\n      },\r\n    };\r\n  }, [actual, juneBonus.cash, meritBonus.cash, totalIncome]);\r\n};\r\n","import { useMemo } from \"react\";\r\nimport { useDateRanges } from \"shared/hooks/use-dates\";\r\nimport { AddOutcome, actualizedOutcome, outcomeFromSingle } from \"shared/utility/min-max-avg\";\r\nimport { useBaseIncome } from \"./use-base-income\";\r\nimport { useCompanyBonus } from \"./use-company-bonus\";\r\nimport { useMeritBonus } from \"./use-merit-bonus\";\r\nimport { useRetirementBonus } from \"./use-retirement-bonus\";\r\n\r\nexport const useTotalIncome = (year: number) => {\r\n  const { base } = useDateRanges(year);\r\n  const baseIncome = useBaseIncome(base.start, base.end);\r\n\r\n  const meritBonus = useMeritBonus(year);\r\n  const juneBonus = useCompanyBonus(year);\r\n  const julyBonus = useRetirementBonus(year);\r\n\r\n  return useMemo(() => {\r\n    const taxableIncome = AddOutcome(\r\n      outcomeFromSingle(baseIncome.totalIncome),\r\n      actualizedOutcome(meritBonus.cash),\r\n      actualizedOutcome(juneBonus.cash)\r\n    );\r\n    const totalIncome = AddOutcome(taxableIncome, actualizedOutcome(julyBonus.cash));\r\n    return { taxableIncome, totalIncome };\r\n  }, [baseIncome.totalIncome, julyBonus.cash, juneBonus.cash, meritBonus.cash]);\r\n};\r\n","import { Box, Tooltip } from \"@mui/material\";\r\nimport { DateTime } from \"luxon\";\r\nimport { ReactNode, useMemo } from \"react\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\n\r\ninterface DurationProps {\r\n  dateTime?: DateTime;\r\n  children?: ReactNode;\r\n  variant?: \"countdown\" | \"date\";\r\n  dateFormat?: string;\r\n}\r\nexport const Duration = (props: DurationProps) => {\r\n  const { dateTime, children, variant = \"countdown\", dateFormat = shortDate } = props;\r\n\r\n  const countDownStr = useMemo(() => {\r\n    if (!dateTime) {\r\n      return \"??\";\r\n    }\r\n    if (variant === \"countdown\") {\r\n      const diff = dateTime?.diffNow([\"months\", \"days\", \"hours\"]);\r\n      const format = diff && diff.days === 0 ? \"h'hr'\" : \"d'd'\";\r\n      return diff?.toFormat(format);\r\n    }\r\n\r\n    return dateTime?.toFormat(dateFormat);\r\n  }, [dateFormat, dateTime, variant]);\r\n\r\n  const tooltipStr = useMemo(() => {\r\n    if (variant === \"countdown\") {\r\n      return dateTime?.toFormat(dateFormat);\r\n    }\r\n\r\n    return dateTime?.diffNow([\"months\", \"days\", \"hours\"]).toFormat(\"d 'days'\");\r\n  }, [dateFormat, dateTime, variant]);\r\n\r\n  const countDownColor = useMemo(() => {\r\n    if (!dateTime) {\r\n      return \"white\";\r\n    }\r\n\r\n    const days = dateTime.diffNow(\"days\").days;\r\n    if (days < 30) {\r\n      return \"green\";\r\n    } else if (days < 60) {\r\n      return \"yellow\";\r\n    }\r\n\r\n    return \"red\";\r\n  }, [dateTime]);\r\n\r\n  return dateTime && dateTime > getLocalDateTime() ? (\r\n    <Tooltip title={tooltipStr}>\r\n      <Box color={countDownColor}>{countDownStr}</Box>\r\n    </Tooltip>\r\n  ) : (\r\n    children\r\n  );\r\n};\r\n","export const formatPercent = new Intl.NumberFormat(\"en-us\", {\r\n  style: \"percent\",\r\n  maximumFractionDigits: 1,\r\n}).format;\r\n","import { formatPercent } from \"shared/utility/format-percent\";\r\n\r\ninterface PercentProps {\r\n  value: number;\r\n}\r\nexport const Percent = ({ value }: PercentProps) => {\r\n  return formatPercent(value);\r\n};\r\n","import { Box } from \"@mui/material\";\r\nimport { ReactNode } from \"react\";\r\n\r\ninterface CellProps {\r\n  children?: ReactNode;\r\n  secondaryValue?: ReactNode;\r\n  tertiaryValue?: ReactNode;\r\n  title: string;\r\n  className?: string;\r\n}\r\n\r\nexport const Value = (props: CellProps) => {\r\n  const { children, secondaryValue, tertiaryValue, title, className } = props;\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: \"flex\",\r\n        minWidth: 106,\r\n        height: 64,\r\n        padding: \"0px 8px\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"flex-start\",\r\n        gap: 0.5,\r\n        flexShrink: 0,\r\n      }}\r\n      className={className}\r\n    >\r\n      <Box display={\"flex\"} alignItems={\"center\"} gap={0.5}>\r\n        <Box fontSize={18} fontWeight={700} lineHeight={\"20px\"}>\r\n          {children ? children : \"?\"}\r\n        </Box>\r\n        {!!(secondaryValue ?? tertiaryValue) && (\r\n          <Box\r\n            alignSelf={\"flex-end\"}\r\n            fontSize={12}\r\n            fontWeight={500}\r\n            lineHeight={\"16px\"}\r\n            textTransform={\"uppercase\"}\r\n            color={\"#888\"}\r\n          >\r\n            {secondaryValue ?? tertiaryValue}\r\n          </Box>\r\n        )}\r\n      </Box>\r\n      <Box fontSize={12} fontWeight={500} lineHeight={\"16px\"} textTransform={\"uppercase\"}>\r\n        {title}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","import { Box, Divider, Stack, Typography } from \"@mui/material\";\r\nimport { DateTime } from \"luxon\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { Duration } from \"shared/components/formatters/duration\";\r\nimport { Percent } from \"shared/components/formatters/percent\";\r\nimport { BonusOutcomes } from \"shared/utility/min-max-avg\";\r\nimport { Value } from \"./value\";\r\n\r\nexport const BonusOutcome = (props: { title: string; outcome: BonusOutcomes; payDate: DateTime }) => {\r\n  const { outcome, title, payDate } = props;\r\n\r\n  return (\r\n    <Box sx={{ border: \"1px solid rgba(255,255,255,0.1)\", borderRadius: 2 }}>\r\n      <Typography\r\n        sx={{\r\n          paddingBottom: 1,\r\n          paddingLeft: 2,\r\n          paddingTop: 1,\r\n          paddingRight: 2,\r\n          width: \"max-content\",\r\n        }}\r\n        variant=\"h5\"\r\n      >\r\n        {title}\r\n      </Typography>\r\n      <Divider />\r\n      <Stack padding={1} direction={\"row\"} spacing={0.5} justifyContent={\"center\"}>\r\n        {!outcome.cash.actual && (\r\n          <>\r\n            <Value secondaryValue={<Percent value={outcome.percent.min} />} title={\"min\"}>\r\n              <Cash value={outcome.cash.min} fallback={0} />\r\n            </Value>\r\n            <Value secondaryValue={<Percent value={outcome.percent.avg} />} title={\"avg\"}>\r\n              <Cash value={outcome.cash.avg} fallback={0} />\r\n            </Value>\r\n            <Value secondaryValue={<Percent value={outcome.percent.max} />} title={\"max\"}>\r\n              <Cash value={outcome.cash.max} fallback={0} />\r\n            </Value>\r\n          </>\r\n        )}\r\n        <Value\r\n          title={\"Actual\"}\r\n          tertiaryValue={outcome.percent.actual && <Percent value={outcome.percent.actual} />}\r\n          secondaryValue={outcome.cash.actual && <Cash value={outcome.cash.actual} />}\r\n        >\r\n          <Duration dateTime={payDate}>\r\n            <Cash value={outcome.cash.actual} />\r\n          </Duration>\r\n        </Value>\r\n      </Stack>\r\n    </Box>\r\n  );\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { create } from \"mutative\";\r\nimport { TimeSeries } from \"shared/models/projected-income\";\r\nimport { store } from \".\";\r\n\r\nexport const updateProjectedIncomeDate = (timeSeries: TimeSeries, id: string, date: DateTime) => {\r\n  store.setState((prev) => {\r\n    const next = create(prev, (next) => {\r\n      const account = next.projectedIncome.timeSeries[timeSeries];\r\n      const idx = account.findIndex((x) => x.id === id);\r\n      account[idx].date = date.toISO()!;\r\n    });\r\n    return next;\r\n  });\r\n};\r\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\r\nimport UpdateIcon from \"@mui/icons-material/Update\";\r\nimport { Button, Tooltip } from \"@mui/material\";\r\nimport { Stack } from \"@mui/system\";\r\nimport { ColDef, ICellRendererParams } from \"ag-grid-community\";\r\nimport { CustomCellRendererProps } from \"ag-grid-react\";\r\nimport { DateTime } from \"luxon\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { Percent } from \"shared/components/formatters/percent\";\r\nimport { AccountData } from \"shared/models/account-data\";\r\nimport { TimeSeries } from \"shared/models/projected-income\";\r\nimport { updateProjectedIncome } from \"shared/store\";\r\nimport { removeProjectedIncome } from \"shared/store/remove-projected-income\";\r\nimport { updateProjectedIncomeDate } from \"shared/store/update-projected-income-date\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\n\r\nexport const createAccountColumnConfig = (\r\n  accountName: TimeSeries,\r\n  variant: \"number\" | \"cash\" | \"percent\"\r\n): ColDef<AccountData>[] => [\r\n  {\r\n    headerName: \"Date\",\r\n    sort: \"desc\",\r\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\r\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\r\n    cellRenderer: (x: ICellRendererParams<unknown, DateTime>) => {\r\n      return (\r\n        <Stack direction={\"row\"} alignItems={\"center\"}>\r\n          {x.valueFormatted}&nbsp;\r\n          {x.value && x.value > DateTime.local() && (\r\n            <Tooltip title=\"Future Event\">\r\n              <UpdateIcon htmlColor=\"yellow\" />\r\n            </Tooltip>\r\n          )}\r\n        </Stack>\r\n      );\r\n    },\r\n    cellEditor: \"agDateCellEditor\",\r\n    editable: true,\r\n    valueSetter: (x) => {\r\n      const date = DateTime.fromJSDate(x.newValue);\r\n      if (date.isValid) {\r\n        updateProjectedIncomeDate(accountName, x.data.id, DateTime.fromJSDate(x.newValue));\r\n      }\r\n      return date.isValid;\r\n    },\r\n  },\r\n  {\r\n    headerName: \"Value\",\r\n    valueGetter: (x) => x.data?.value,\r\n    cellRenderer: (x: CustomCellRendererProps<AccountData>) =>\r\n      variant === \"cash\" ? <Cash compact={false} value={x.value} /> : <Percent value={x.value} />,\r\n    type: \"numericColumn\",\r\n    editable: true,\r\n    cellEditor: \"agNumberCellEditor\",\r\n    valueSetter: (x) => {\r\n      updateProjectedIncome(accountName, x.data.id, +x.newValue);\r\n      return true;\r\n    },\r\n  },\r\n  {\r\n    headerName: \"Actions\",\r\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\r\n      return (\r\n        <Button\r\n          onClick={() => {\r\n            props.data && removeProjectedIncome(accountName, props.data?.id);\r\n          }}\r\n          color=\"error\"\r\n          fullWidth\r\n        >\r\n          <DeleteForeverIcon />\r\n        </Button>\r\n      );\r\n    },\r\n  },\r\n];\r\n","import { Box, Button, InputAdornment, Paper, Stack, TextField, Tooltip, Typography } from \"@mui/material\";\r\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo, useState } from \"react\";\r\nimport { AgGrid } from \"shared/components/ag-grid\";\r\nimport { TimeSeries } from \"shared/models/projected-income\";\r\nimport { addProjectedIncome, store } from \"shared/store\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\nimport { createAccountColumnConfig } from \"./column-config\";\r\n\r\nexport const DataEntry = (props: {\r\n  timeSeries: TimeSeries;\r\n  defaultDate: DateTime;\r\n  variant?: \"number\" | \"cash\" | \"percent\";\r\n}) => {\r\n  const { timeSeries, defaultDate, variant = \"number\" } = props;\r\n  const account = useStore(store, (state) => state.projectedIncome.timeSeries[timeSeries]);\r\n\r\n  const [date, setDate] = useState(defaultDate);\r\n  const [amount, setAmount] = useState<number | null>(null);\r\n\r\n  const hasSameDate = useMemo(() => {\r\n    return !!account?.find((x) => date.hasSame(DateTime.fromISO(x.date), \"day\"));\r\n  }, [account, date]);\r\n\r\n  const onAddEntry = () => {\r\n    if (amount != null) {\r\n      addProjectedIncome(date, timeSeries, variant === \"percent\" ? amount / 100 : amount);\r\n      setAmount(null);\r\n    }\r\n  };\r\n\r\n  const accountColumnConfig = useMemo(() => {\r\n    return createAccountColumnConfig(timeSeries, variant);\r\n  }, [timeSeries, variant]);\r\n\r\n  return (\r\n    <Box display={\"flex\"} flexDirection={\"column\"} height=\"100%\">\r\n      <Stack spacing={2} flex=\"0 1 auto\">\r\n        <DatePicker\r\n          format={shortDate}\r\n          sx={{ color: \"white\" }}\r\n          label=\"Date\"\r\n          value={date}\r\n          onChange={(value) => {\r\n            console.log(value);\r\n            value && setDate(value);\r\n          }}\r\n        />\r\n        <TextField\r\n          label=\"amount\"\r\n          value={amount ?? \"\"}\r\n          type=\"number\"\r\n          onChange={(event) => (event.target.value === \"\" ? setAmount(null) : setAmount(+event.target.value))}\r\n          InputProps={{\r\n            startAdornment: variant !== \"number\" && (\r\n              <InputAdornment position=\"start\">{variant === \"cash\" ? \"$\" : \"%\"}</InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n        <Button disabled={amount === null || !date || hasSameDate} onClick={onAddEntry}>\r\n          Add Entry\r\n        </Button>\r\n      </Stack>\r\n      <Box sx={{ paddingTop: 2, flex: \"1 1 auto\" }}>\r\n        <AgGrid\r\n          reactiveCustomComponents\r\n          rowData={account ?? []}\r\n          columnDefs={accountColumnConfig}\r\n          id={account + \"-history\"}\r\n          autoSizeStrategy={{\r\n            type: \"fitGridWidth\",\r\n          }}\r\n          stopEditingWhenCellsLoseFocus\r\n        />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport interface LayoutProps {\r\n  title: string;\r\n  accountName: TimeSeries;\r\n  defaultDate: DateTime;\r\n  variant: \"percent\" | \"number\" | \"cash\";\r\n}\r\n\r\nexport const Layout = (props: LayoutProps) => {\r\n  const { title, accountName, defaultDate, variant } = props;\r\n  return (\r\n    <Paper sx={{ padding: 2, height: \"100%\", width: 450, flexShrink: 0 }}>\r\n      <Box display=\"flex\" flexDirection=\"column\" height=\"100%\">\r\n        <Box flex=\"0 1 auto\" marginBottom={2}>\r\n          <Typography sx={{ marginBottom: 2 }} variant=\"h5\">\r\n            {title}{\" \"}\r\n            {variant === \"cash\" && (\r\n              <Tooltip\r\n                title={\r\n                  <>\r\n                    <span>Cash values are used in lieu of Percent values.</span>\r\n                    <br />\r\n                    <span>Cash values are considered actual payment values.</span>\r\n                  </>\r\n                }\r\n              >\r\n                <span>($)</span>\r\n              </Tooltip>\r\n            )}\r\n            {variant === \"percent\" && (\r\n              <Tooltip title=\"Percentage values are used for predictions.\">\r\n                <span>(%)</span>\r\n              </Tooltip>\r\n            )}\r\n          </Typography>\r\n        </Box>\r\n        <Box flex=\"1 1 auto\">\r\n          <DataEntry variant={variant} timeSeries={accountName} defaultDate={defaultDate} />\r\n        </Box>\r\n      </Box>\r\n    </Paper>\r\n  );\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { ReactNode } from \"react\";\r\n\r\ninterface UntilProps {\r\n  dateTime?: DateTime;\r\n  children: ReactNode;\r\n}\r\n\r\nexport const Until = (props: UntilProps) => {\r\n  const { dateTime, children } = props;\r\n  return dateTime && DateTime.local() < dateTime && children;\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { useProjectedPay } from \"shared/hooks/use-projected-pay\";\r\n\r\nexport const usePaycheck = (date: DateTime) => {\r\n  const paychecks = useProjectedPay();\r\n\r\n  const paycheck = useMemo(() => {\r\n    return paychecks.find(({ start }) => start.year === date.year)?.value ?? 0;\r\n  }, [date.year, paychecks]);\r\n\r\n  return paycheck;\r\n};\r\n","import ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\r\nimport { Table, TableBody, TableCell, TableRow } from \"@mui/material\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\nimport { IncomePerPeriod } from \"../../../shared/hooks/use-base-income\";\r\n\r\ninterface IncomePerPeriodTooltipProps {\r\n  incomePerPeriod: IncomePerPeriod[];\r\n  totalIncome: number;\r\n}\r\n\r\nexport const IncomePerPeriodTooltip = (props: IncomePerPeriodTooltipProps) => {\r\n  const { incomePerPeriod, totalIncome } = props;\r\n  return (\r\n    <Table sx={{ width: \"max-content\" }}>\r\n      <TableBody>\r\n        {incomePerPeriod.map(({ start, end, value, perPayday, count }, index) => {\r\n          return (\r\n            <TableRow key={index}>\r\n              <TableCell>\r\n                <Cash value={value} compact={false} />\r\n              </TableCell>\r\n              <TableCell>{start.toFormat(shortDate)}</TableCell>\r\n              <TableCell>\r\n                <ArrowForwardIcon />\r\n              </TableCell>\r\n              <TableCell>{end.toFormat(shortDate)}</TableCell>\r\n              <TableCell>\r\n                <Cash value={perPayday} compact={false} /> x {count}\r\n              </TableCell>\r\n            </TableRow>\r\n          );\r\n        })}\r\n        <TableRow>\r\n          <TableCell colSpan={4}>Total:</TableCell>\r\n          <TableCell>\r\n            <Cash value={totalIncome} compact={false} />\r\n          </TableCell>\r\n        </TableRow>\r\n      </TableBody>\r\n    </Table>\r\n  );\r\n};\r\n","import { Box, Divider, Stack, Tooltip, Typography } from \"@mui/material\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { Duration } from \"shared/components/formatters/duration\";\r\nimport { Percent } from \"shared/components/formatters/percent\";\r\nimport { Until } from \"shared/components/formatters/until\";\r\nimport { useBaseIncome } from \"shared/hooks/use-base-income\";\r\nimport { useDateRanges } from \"shared/hooks/use-dates\";\r\nimport { useMostFrequentValue } from \"shared/hooks/use-most-frequent-value\";\r\nimport { useProjectedPay } from \"shared/hooks/use-projected-pay\";\r\nimport { store } from \"shared/store\";\r\nimport { findSameYear } from \"shared/utility/find-same-year\";\r\nimport { usePaycheck } from \"../hooks/use-pay-check\";\r\nimport { IncomePerPeriodTooltip } from \"./income-per-period\";\r\nimport { Value } from \"./value\";\r\n\r\nexport const MeritOutcome = (props: { title: string; payDate: DateTime }) => {\r\n  const { title, payDate } = props;\r\n\r\n  const dateRanges = useDateRanges(payDate.year);\r\n  const income = useBaseIncome(dateRanges.base.start, dateRanges.base.end);\r\n\r\n  const projectedPay = useProjectedPay();\r\n  const baseAprToApr = useMemo(() => {\r\n    const pay = projectedPay.find((x) => {\r\n      return x.start <= payDate && payDate <= x.end;\r\n    });\r\n\r\n    return (pay?.value ?? 0) * 26;\r\n  }, [payDate, projectedPay]);\r\n\r\n  const meritIncreases = useStore(store, (x) => x.projectedIncome.timeSeries.meritIncreasePct);\r\n\r\n  const commonMerit = useMostFrequentValue(meritIncreases);\r\n  const meritPct = useStore(\r\n    store,\r\n    (x) => findSameYear(payDate, x.projectedIncome.timeSeries.meritIncreasePct)?.value ?? commonMerit\r\n  );\r\n\r\n  const equityPct = useStore(store, (x) => payDate && findSameYear(payDate, x.projectedIncome.timeSeries.equityPct));\r\n  const totalAdjust = (meritPct ?? 0) + (equityPct?.value ?? 0);\r\n  const paycheck = usePaycheck(payDate);\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        border: \"1px solid rgba(255,255,255,0.1)\",\r\n        borderRadius: 2,\r\n      }}\r\n    >\r\n      <Typography sx={{ paddingBottom: 1, paddingLeft: 2, paddingTop: 1 }} variant=\"h5\">\r\n        {title}\r\n      </Typography>\r\n      <Divider />\r\n\r\n      <Stack padding={1} direction={\"row\"} spacing={0.5}>\r\n        {\r\n          <Value title={\"Paycheck\"}>\r\n            <Cash value={paycheck} compact={false} />\r\n          </Value>\r\n        }\r\n        <Tooltip\r\n          componentsProps={{\r\n            tooltip: {\r\n              sx: {\r\n                maxWidth: \"none\",\r\n              },\r\n            },\r\n          }}\r\n          title={<IncomePerPeriodTooltip incomePerPeriod={income.incomePerPeriod} totalIncome={income.totalIncome} />}\r\n        >\r\n          <div>\r\n            <Value title={\"Base Pay\"}>\r\n              <Cash disableTooltip value={income.totalIncome ?? 0} />\r\n            </Value>\r\n          </div>\r\n        </Tooltip>\r\n\r\n        <Value title={\"APR to APR\"}>\r\n          <Cash value={baseAprToApr} />\r\n        </Value>\r\n\r\n        <Value\r\n          title={\"Actual\"}\r\n          secondaryValue={\r\n            <Until dateTime={payDate}>\r\n              <Percent value={totalAdjust} />\r\n            </Until>\r\n          }\r\n        >\r\n          <Duration dateTime={payDate}>\r\n            <Percent value={totalAdjust} />\r\n          </Duration>\r\n        </Value>\r\n      </Stack>\r\n    </Box>\r\n  );\r\n};\r\n","import { Box, Divider, Stack, Typography } from \"@mui/material\";\r\nimport { Outcome as TOutcome } from \"shared/utility/min-max-avg\";\r\nimport { Value } from \"./value\";\r\nimport { DateTime } from \"luxon\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { Duration } from \"shared/components/formatters/duration\";\r\nimport { Until } from \"shared/components/formatters/until\";\r\nimport { ReactNode } from \"react\";\r\n\r\nexport const Outcome = (props: { title: ReactNode; outcome: TOutcome; payDate?: DateTime }) => {\r\n  const { outcome, title, payDate } = props;\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        border: \"1px solid rgba(255,255,255,0.1)\",\r\n        borderRadius: 2,\r\n      }}\r\n    >\r\n      <Typography sx={{ paddingBottom: 1, paddingLeft: 2, paddingTop: 1 }} variant=\"h5\">\r\n        {title}\r\n      </Typography>\r\n      <Divider />\r\n\r\n      <Stack padding={1} direction={\"row\"} spacing={0.5}>\r\n        {!outcome.actual && (\r\n          <>\r\n            <Value title={\"min\"}>\r\n              <Cash value={outcome.min} fallback={0} />\r\n            </Value>\r\n            <Value title={\"avg\"}>\r\n              <Cash value={outcome.avg} fallback={0} />\r\n            </Value>\r\n            <Value title={\"max\"}>\r\n              <Cash value={outcome.max} fallback={0} />\r\n            </Value>\r\n          </>\r\n        )}\r\n        {payDate && (\r\n          <Value\r\n            title={\"Actual\"}\r\n            secondaryValue={\r\n              <Until dateTime={payDate}>\r\n                <Cash value={outcome.actual} />\r\n              </Until>\r\n            }\r\n          >\r\n            <Duration dateTime={payDate}>\r\n              <Cash value={outcome.actual} />\r\n            </Duration>\r\n          </Value>\r\n        )}\r\n      </Stack>\r\n    </Box>\r\n  );\r\n};\r\n","import { Box, Stack } from \"@mui/system\";\r\nimport { DatePicker } from \"@mui/x-date-pickers\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useState } from \"react\";\r\nimport { useDates } from \"shared/hooks/use-dates\";\r\nimport { store } from \"shared/store\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { useCompanyBonus } from \"../../shared/hooks/use-company-bonus\";\r\nimport { useMeritBonus } from \"../../shared/hooks/use-merit-bonus\";\r\nimport { useRetirementBonus } from \"../../shared/hooks/use-retirement-bonus\";\r\nimport { useTotalIncome } from \"../../shared/hooks/use-total-income\";\r\nimport { BonusOutcome } from \"./components/bonus-outcome\";\r\nimport { Layout } from \"./components/data-entry/data-entry\";\r\nimport { MeritOutcome } from \"./components/merit-increase\";\r\nimport { Outcome } from \"./components/outcome\";\r\n\r\nexport const ProjectedIncome = () => {\r\n  const [selectedYear, setSelectedYear] = useState(getLocalDateTime().year);\r\n\r\n  const oldestYear = useStore(store, (x) => {\r\n    const first = x.projectedIncome.timeSeries.paycheck[1]?.date;\r\n    const date = first ? DateTime.fromISO(first) : getLocalDateTime();\r\n    return date.year;\r\n  });\r\n\r\n  const dates = useDates(selectedYear);\r\n  const { totalIncome } = useTotalIncome(selectedYear);\r\n  const meritBonus = useMeritBonus(selectedYear);\r\n  const juneBonus = useCompanyBonus(selectedYear);\r\n  const julyBonus = useRetirementBonus(selectedYear);\r\n\r\n  return (\r\n    <Box display=\"flex\" flexDirection=\"column\" height=\"100%\" gap={2}>\r\n      <Box flex=\"0 1 auto\">\r\n        <Stack gap={2} direction={\"row\"} overflow={\"auto\"}>\r\n          <Outcome\r\n            title={\r\n              <Box display=\"flex\" alignItems={\"center\"} gap={2} width={\"100%\"}>\r\n                <span>Income</span>\r\n                <DatePicker\r\n                  sx={{ width: 90, marginLeft: \"auto\", marginRight: 2 }}\r\n                  label={\"year\"}\r\n                  views={[\"year\"]}\r\n                  minDate={getLocalDateTime().set({ year: oldestYear })}\r\n                  maxDate={getLocalDateTime().plus({ years: 10 })}\r\n                  defaultValue={getLocalDateTime()}\r\n                  slotProps={{\r\n                    textField: {\r\n                      variant: \"standard\",\r\n                      label: \"\",\r\n                    },\r\n                  }}\r\n                  onYearChange={(year) => {\r\n                    setSelectedYear(year.year);\r\n                  }}\r\n                />\r\n              </Box>\r\n            }\r\n            outcome={totalIncome}\r\n            payDate={dates.companyBonus}\r\n          />\r\n          <MeritOutcome title=\"Merit Increase\" payDate={dates.meritIncrease} />\r\n          <BonusOutcome title=\"Merit Bonus\" outcome={meritBonus} payDate={dates.meritBonus} />\r\n          <BonusOutcome title=\"Company Bonus\" outcome={juneBonus} payDate={dates.companyBonus} />\r\n          <BonusOutcome title=\"Retirement Bonus\" outcome={julyBonus} payDate={dates.retirementBonus} />\r\n        </Stack>\r\n      </Box>\r\n      <Box flex=\"1 1 auto\">\r\n        <Box overflow={\"auto\"} width={\"100%\"} height={\"100%\"}>\r\n          <Box height={\"100%\"} display={\"flex\"} gap={2} flexWrap={\"nowrap\"} flexShrink={0}>\r\n            <Layout\r\n              accountName=\"paycheck\"\r\n              variant=\"cash\"\r\n              defaultDate={DateTime.fromObject({\r\n                day: 1,\r\n                month: 4,\r\n                year: selectedYear,\r\n              })}\r\n              title=\"Income Per Paycheck\"\r\n            />\r\n            <Layout\r\n              title=\"Merit Increase\"\r\n              accountName=\"meritIncreasePct\"\r\n              variant=\"percent\"\r\n              defaultDate={dates.meritIncrease}\r\n            />\r\n            <Layout\r\n              title=\"Equity Increase\"\r\n              accountName=\"equityPct\"\r\n              variant=\"percent\"\r\n              defaultDate={dates.meritIncrease}\r\n            />\r\n            <Layout title=\"Merit Bonus\" accountName=\"meritBonusPct\" variant=\"percent\" defaultDate={dates.meritBonus} />\r\n            <Layout title=\"Merit Bonus\" accountName=\"meritBonus\" variant=\"cash\" defaultDate={dates.meritBonus} />\r\n            <Layout\r\n              title=\"Company Bonus Factor\"\r\n              accountName=\"companyBonusPct\"\r\n              defaultDate={dates.companyBonus}\r\n              variant=\"percent\"\r\n            />\r\n            <Layout title=\"Company Bonus\" accountName=\"companyBonus\" defaultDate={dates.companyBonus} variant=\"cash\" />\r\n            <Layout\r\n              title=\"Retirement Bonus\"\r\n              accountName=\"retirementBonus\"\r\n              defaultDate={dates.retirementBonus}\r\n              variant=\"cash\"\r\n            />\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","import { create } from \"mutative\";\r\nimport { ProjectedWealthConfig } from \"shared/models/projected-wealth\";\r\nimport { store } from \".\";\r\n\r\nexport const setProjectedWealth = (configName: ProjectedWealthConfig, value: number) => {\r\n  store.setState((prev) => {\r\n    return create(prev, (next) => {\r\n      next.projectedWealth[configName] = value;\r\n    });\r\n  });\r\n};\r\n","import { InputAdornment, TextField } from \"@mui/material\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { useCallback, useState } from \"react\";\r\nimport { ProjectedWealth } from \"shared/models/projected-wealth\";\r\nimport { store } from \"shared/store\";\r\nimport { setProjectedWealth } from \"shared/store/set-projected-wealth\";\r\n\r\ninterface ConfigEntryProps {\r\n  configName: keyof ProjectedWealth;\r\n  label: string;\r\n  variant?: \"cash\" | \"percent\";\r\n}\r\n\r\nexport const ConfigEntry = (props: ConfigEntryProps) => {\r\n  const { configName, label, variant = \"cash\" } = props;\r\n  const [error, setError] = useState(false);\r\n  const isPercent = variant === \"percent\";\r\n\r\n  const onchange = useCallback(\r\n    (input: string) => {\r\n      let value = +input;\r\n      const isNan = Number.isNaN(value);\r\n      setError(isNan);\r\n      if (isNan) {\r\n        return;\r\n      }\r\n\r\n      if (isPercent) {\r\n        value /= 100;\r\n      }\r\n\r\n      setProjectedWealth(configName, value);\r\n    },\r\n    [configName, isPercent]\r\n  );\r\n\r\n  const value = useStore(store, (x) => x.projectedWealth[configName]);\r\n  const defaultValue = isPercent ? value * 100 : value;\r\n\r\n  return (\r\n    <TextField\r\n      error={error}\r\n      variant=\"outlined\"\r\n      InputProps={{\r\n        startAdornment: <InputAdornment position=\"start\">{isPercent ? \"%\" : \"$\"}</InputAdornment>,\r\n      }}\r\n      defaultValue={defaultValue.toFixed(isPercent ? 2 : 0)}\r\n      type=\"numeric\"\r\n      label={label}\r\n      onChange={(event) => {\r\n        onchange(event.target.value);\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import { Typography } from \"@mui/material\";\r\nimport { Stack } from \"@mui/system\";\r\nimport { ConfigEntry } from \"./config-entry\";\r\n\r\nexport const Config = () => {\r\n  return (\r\n    <Stack spacing={2}>\r\n      <Typography variant=\"h5\">Configuration</Typography>\r\n      <ConfigEntry configName=\"savingsPerMonth\" label=\"Monthly Saving Rate\" />\r\n      <ConfigEntry configName=\"retirementContributionPaycheck\" label=\"Retirement Contribution Per Paycheck\" />\r\n      <Stack direction={\"row\"} spacing={2} width={\"100%\"} sx={{ \"& > *\": { flex: 1 } }}>\r\n        <ConfigEntry configName=\"socialSecurityLimit\" label=\"Social Security Tax Limit\" />\r\n        <ConfigEntry configName=\"socialSecurityTaxRate\" label=\"Social Security Tax\" variant=\"percent\" />\r\n      </Stack>\r\n      <Stack direction={\"row\"} spacing={2} width={\"100%\"} sx={{ \"& > *\": { flex: 1 } }}>\r\n        <ConfigEntry configName=\"medicareSupplementalTaxThreshold\" label=\"Medicare Supplemental Threshold\" />\r\n        <ConfigEntry configName=\"medicareSupplementalTaxRate\" label=\"Medicare Supplemental Tax\" variant=\"percent\" />\r\n      </Stack>\r\n    </Stack>\r\n  );\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { useCompanyBonus } from \"shared/hooks/use-company-bonus\";\r\nimport { useDates } from \"shared/hooks/use-dates\";\r\nimport { useMeritBonus } from \"shared/hooks/use-merit-bonus\";\r\nimport { useRetirementBonus } from \"shared/hooks/use-retirement-bonus\";\r\n\r\nexport const useFutureBonuses = () => {\r\n  const local = DateTime.local();\r\n  const year = local.year;\r\n  const dates = useDates(year);\r\n  const meritBonus = useMeritBonus(year);\r\n  const companyBonus = useCompanyBonus(year);\r\n  const retirementBonus = useRetirementBonus(year);\r\n\r\n  const bonuses = useMemo(() => {\r\n    return (\r\n      [\r\n        [dates.meritBonus, meritBonus.cash.actual ?? meritBonus.cash.avg],\r\n        [dates.companyBonus, companyBonus.cash.actual ?? companyBonus.cash.avg],\r\n        [dates.retirementBonus, retirementBonus.cash.actual ?? retirementBonus.cash.avg],\r\n      ] as [DateTime, number][]\r\n    )\r\n      .map(([payedOn, amount]) => (local < payedOn ? amount : 0))\r\n      .reduce((acc, curr) => acc + curr, 0);\r\n  }, [\r\n    dates.meritBonus,\r\n    dates.companyBonus,\r\n    dates.retirementBonus,\r\n    meritBonus.cash.actual,\r\n    meritBonus.cash.avg,\r\n    companyBonus.cash.actual,\r\n    companyBonus.cash.avg,\r\n    retirementBonus.cash.actual,\r\n    retirementBonus.cash.avg,\r\n    local,\r\n  ]);\r\n\r\n  return bonuses;\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { useBaseIncome } from \"shared/hooks/use-base-income\";\r\nimport { useCompanyBonus } from \"shared/hooks/use-company-bonus\";\r\nimport { useDateRanges, useDates } from \"shared/hooks/use-dates\";\r\nimport { useMeritBonus } from \"shared/hooks/use-merit-bonus\";\r\nimport { findNearestIdxOnOrBefore } from \"shared/utility/find-nearest-on-or-before\";\r\n\r\nexport const usePayments = () => {\r\n  const year = DateTime.local().year;\r\n  const dateRanges = useDateRanges(year);\r\n  const dates = useDates(year);\r\n  const { payPeriods } = useBaseIncome(dateRanges.base.start, dateRanges.base.end);\r\n\r\n  const merit = useMeritBonus(year);\r\n  const companyBonus = useCompanyBonus(year);\r\n\r\n  return useMemo(() => {\r\n    const cumulativePay = payPeriods.map((x) => {\r\n      return { ...x, cumulative: 0 };\r\n    });\r\n\r\n    const payBeforeMerit = findNearestIdxOnOrBefore(dates.meritBonus, cumulativePay, (x) => x.payedOn);\r\n\r\n    cumulativePay.splice(payBeforeMerit + 1, 0, {\r\n      cumulative: 0,\r\n      value: merit.cash.actual ?? merit.cash.avg,\r\n      start: dates.meritBonus,\r\n      end: dates.meritBonus,\r\n      payedOn: dates.meritBonus,\r\n    });\r\n\r\n    const payBeforeCompanyBonus = findNearestIdxOnOrBefore(dates.companyBonus, cumulativePay, (x) => x.payedOn);\r\n\r\n    cumulativePay.splice(payBeforeCompanyBonus + 1, 0, {\r\n      cumulative: 0,\r\n      value: companyBonus.cash.actual ?? companyBonus.cash.avg,\r\n      start: dates.companyBonus,\r\n      end: dates.companyBonus,\r\n      payedOn: dates.companyBonus,\r\n    });\r\n\r\n    cumulativePay.forEach((x, i, arr) => {\r\n      x.cumulative = i > 0 ? arr[i - 1].cumulative + x.value : x.value;\r\n    });\r\n\r\n    const previousPay = findNearestIdxOnOrBefore(DateTime.local(), payPeriods, (x) => x.payedOn);\r\n\r\n    const remainingPayments = payPeriods.length - previousPay;\r\n\r\n    return {\r\n      payments: cumulativePay,\r\n      nextPaymentIdx: previousPay + 1,\r\n      numRemaining: remainingPayments,\r\n      totalBasePayments: payPeriods.length,\r\n      totalPayments: cumulativePay.length,\r\n    };\r\n  }, [\r\n    companyBonus.cash.actual,\r\n    companyBonus.cash.avg,\r\n    dates.companyBonus,\r\n    dates.meritBonus,\r\n    merit.cash.actual,\r\n    merit.cash.avg,\r\n    payPeriods,\r\n  ]);\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { useMemo } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { usePayments } from \"./use-payments\";\r\n\r\nexport const useFutureMedicareTax = () => {\r\n  const { payments, nextPaymentIdx } = usePayments();\r\n  const config = useStore(store, (x) => x.projectedWealth);\r\n\r\n  return useMemo(() => {\r\n    const total =\r\n      config.medicareSupplementalTaxRate *\r\n      Math.min(0, config.medicareSupplementalTaxThreshold - (payments.at(-1)?.cumulative ?? 0));\r\n\r\n    const firstOccurrence = payments.find((x) => x.cumulative >= config.medicareSupplementalTaxThreshold)?.payedOn;\r\n\r\n    const remaining = payments\r\n      .slice(nextPaymentIdx)\r\n      .filter((x) => x.cumulative >= config.medicareSupplementalTaxThreshold)\r\n      .reduce((acc, curr) => {\r\n        return (\r\n          acc -\r\n          Math.min(curr.value, curr.cumulative - config.medicareSupplementalTaxThreshold) *\r\n            config.medicareSupplementalTaxRate\r\n        );\r\n      }, 0);\r\n\r\n    const perPaycheck = total && (payments.at(-1)?.value ?? 0) * config.medicareSupplementalTaxRate;\r\n\r\n    return {\r\n      total,\r\n      remaining,\r\n      perPaycheck,\r\n      firstOccurrence,\r\n    };\r\n  }, [config.medicareSupplementalTaxRate, config.medicareSupplementalTaxThreshold, nextPaymentIdx, payments]);\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { useMemo } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { usePayments } from \"./use-payments\";\r\n\r\nexport const useFutureRetirementContributions = () => {\r\n  const { numRemaining } = usePayments();\r\n  const retirementContribution = useStore(store, (x) => x.projectedWealth.retirementContributionPaycheck);\r\n\r\n  return useMemo(() => {\r\n    return {\r\n      remaining: numRemaining * retirementContribution,\r\n      perPaycheck: retirementContribution,\r\n    };\r\n  }, [numRemaining, retirementContribution]);\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\n\r\nexport const useFutureSavings = () => {\r\n  const config = useStore(store, (x) => x.projectedWealth);\r\n  return useMemo(() => {\r\n    const systemYear = getLocalDateTime().year;\r\n    return {\r\n      remaining:\r\n        config.savingsPerMonth *\r\n        DateTime.fromObject({\r\n          day: 31,\r\n          month: 12,\r\n          year: systemYear,\r\n        })\r\n          .endOf(\"day\")\r\n          .diffNow(\"months\").months,\r\n      perMonth: config.savingsPerMonth,\r\n    };\r\n  }, [config.savingsPerMonth]);\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { useMemo } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { usePayments } from \"./use-payments\";\r\n\r\nexport const useFutureSocialSecurity = () => {\r\n  const { payments, nextPaymentIdx } = usePayments();\r\n  const config = useStore(store, (x) => x.projectedWealth);\r\n\r\n  return useMemo(() => {\r\n    const total =\r\n      config.socialSecurityTaxRate * Math.max(0, (payments.at(-1)?.cumulative ?? 0) - config.socialSecurityLimit);\r\n    const firstOccurrence = payments.find((x) => x.cumulative >= config.socialSecurityLimit)?.payedOn;\r\n\r\n    const remaining = payments\r\n      .slice(nextPaymentIdx)\r\n      .filter((x) => x.cumulative >= config.socialSecurityLimit)\r\n      .reduce((acc, curr) => {\r\n        return acc + Math.min(curr.value, curr.cumulative - config.socialSecurityLimit) * config.socialSecurityTaxRate;\r\n      }, 0);\r\n\r\n    const perPaycheck = total && config.socialSecurityTaxRate * (payments.at(-1)?.value ?? 0);\r\n\r\n    return {\r\n      total,\r\n      remaining,\r\n      perPaycheck,\r\n      firstOccurrence,\r\n    };\r\n  }, [config.socialSecurityLimit, config.socialSecurityTaxRate, nextPaymentIdx, payments]);\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { ReactNode } from \"react\";\r\n\r\ninterface BeforeAfterProps {\r\n  dateTime?: DateTime;\r\n  before?: ReactNode;\r\n  after?: ReactNode;\r\n}\r\n\r\nexport const BeforeAfter = (props: BeforeAfterProps) => {\r\n  const { dateTime, before, after } = props;\r\n\r\n  if (!dateTime) {\r\n    return null;\r\n  }\r\n\r\n  return DateTime.local() < dateTime ? before : after;\r\n};\r\n","import { Typography } from \"@mui/material\";\r\nimport { Stack } from \"@mui/system\";\r\nimport { Value } from \"capabilities/projected-income/components/value\";\r\nimport { useFutureBonuses } from \"capabilities/projected-wealth/hooks/use-future-bonuses\";\r\nimport { useFutureMedicareTax } from \"capabilities/projected-wealth/hooks/use-future-medicare-tax\";\r\nimport { useFutureRetirementContributions } from \"capabilities/projected-wealth/hooks/use-future-retirement-contributions\";\r\nimport { useFutureSavings } from \"capabilities/projected-wealth/hooks/use-future-savings\";\r\nimport { useFutureSocialSecurity } from \"capabilities/projected-wealth/hooks/use-future-social-security\";\r\nimport { DateTime } from \"luxon\";\r\nimport { BeforeAfter } from \"shared/components/formatters/before-after\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { Duration } from \"shared/components/formatters/duration\";\r\nimport { useCompanyBonus } from \"shared/hooks/use-company-bonus\";\r\nimport { useDates } from \"shared/hooks/use-dates\";\r\nimport { useMeritBonus } from \"shared/hooks/use-merit-bonus\";\r\nimport { useRetirementBonus } from \"shared/hooks/use-retirement-bonus\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { monthDay } from \"shared/utility/format-date\";\r\n\r\nconst isFuture = (date: DateTime) => date.diffNow(\"milliseconds\").milliseconds > 0;\r\n\r\nexport const FutureEvents = () => {\r\n  const dates = useDates();\r\n  const systemYear = getLocalDateTime().year;\r\n  const savings = useFutureSavings();\r\n  const retirement = useFutureRetirementContributions();\r\n  const medicare = useFutureMedicareTax();\r\n  const socialSecurity = useFutureSocialSecurity();\r\n  const meritBonus = useMeritBonus(systemYear);\r\n  const companyBonus = useCompanyBonus(systemYear);\r\n  const retirementBonus = useRetirementBonus(systemYear);\r\n  const totalFutureBonuses = useFutureBonuses();\r\n\r\n  const total =\r\n    totalFutureBonuses + savings.remaining + retirement.remaining + socialSecurity.remaining + medicare.remaining;\r\n\r\n  return (\r\n    <>\r\n      <Typography variant=\"h5\">\r\n        {systemYear} Remaining Projected Wealth <Cash value={total} />\r\n      </Typography>\r\n      <Stack direction={\"row\"} sx={{ \"&& > *\": { minWidth: 210 } }}>\r\n        {isFuture(dates.meritBonus) && (\r\n          <Value title={\"merit bonus\"} secondaryValue={<Cash value={meritBonus.cash.actual ?? meritBonus.cash.avg} />}>\r\n            <Duration dateFormat={monthDay} variant=\"date\" dateTime={dates.meritBonus} />\r\n          </Value>\r\n        )}\r\n        {isFuture(dates.companyBonus) && (\r\n          <Value\r\n            title={\"company bonus\"}\r\n            secondaryValue={<Cash value={companyBonus.cash.actual ?? companyBonus.cash.avg} />}\r\n          >\r\n            <Duration variant=\"date\" dateFormat={monthDay} dateTime={dates.companyBonus} />\r\n          </Value>\r\n        )}\r\n        {isFuture(dates.retirementBonus) && (\r\n          <Value\r\n            title={\"retirement bonus\"}\r\n            secondaryValue={<Cash value={retirementBonus.cash.actual ?? retirementBonus.cash.avg} />}\r\n          >\r\n            <Duration dateFormat={monthDay} variant=\"date\" dateTime={dates.retirementBonus} />\r\n          </Value>\r\n        )}\r\n      </Stack>\r\n      <Stack direction={\"row\"} sx={{ \"&& > *\": { minWidth: 210 } }}>\r\n        {!!socialSecurity.total && (\r\n          <Value\r\n            title={\"social security cap\"}\r\n            secondaryValue={\r\n              <BeforeAfter\r\n                dateTime={socialSecurity.firstOccurrence}\r\n                before={<Cash tooltip=\"Remaining\" value={socialSecurity.remaining} />}\r\n                after={<Cash tooltip=\"Per Paycheck\" value={socialSecurity.perPaycheck} />}\r\n              />\r\n            }\r\n          >\r\n            <Duration dateFormat={monthDay} variant=\"date\" dateTime={socialSecurity.firstOccurrence}>\r\n              <Cash tooltip=\"Remaining\" value={socialSecurity.remaining} />\r\n            </Duration>\r\n          </Value>\r\n        )}\r\n        {!!medicare.total && (\r\n          <Value\r\n            title={\"medicare supplemental tax\"}\r\n            secondaryValue={\r\n              <BeforeAfter\r\n                dateTime={medicare.firstOccurrence}\r\n                before={<Cash tooltip=\"Total\" value={medicare.remaining} />}\r\n                after={<Cash tooltip=\"Per Paycheck\" value={medicare.perPaycheck} />}\r\n              />\r\n            }\r\n          >\r\n            <Duration dateFormat={monthDay} variant=\"date\" dateTime={medicare.firstOccurrence}>\r\n              <Cash tooltip=\"Remaining\" value={medicare.remaining} />\r\n            </Duration>\r\n          </Value>\r\n        )}\r\n      </Stack>\r\n      <Stack direction={\"row\"} sx={{ \"&& > *\": { minWidth: 210 } }}>\r\n        {!!savings.perMonth && (\r\n          <Value title={\"Expected savings\"} secondaryValue={<Cash tooltip=\"Per Month\" value={savings.perMonth} />}>\r\n            <Cash tooltip=\"Total Remaining\" value={savings.remaining} />\r\n          </Value>\r\n        )}\r\n        {!!retirement.perPaycheck && (\r\n          <Value\r\n            title={\"retirement contribution\"}\r\n            secondaryValue={<Cash tooltip=\"Per Paycheck\" value={retirement.perPaycheck} />}\r\n          >\r\n            <Cash tooltip=\"Total Remaining\" value={retirement.remaining} />\r\n          </Value>\r\n        )}\r\n      </Stack>\r\n    </>\r\n  );\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { store } from \"shared/store\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\n\r\nexport const useEarliestAccountEntry = () => {\r\n  const accounts = useStore(store, (x) => x.wealth);\r\n  return DateTime.fromMillis(\r\n    Object.values(accounts)\r\n      .map((x) => {\r\n        if (x.type === \"account\") {\r\n          return x.data[0]?.date ? DateTime.fromISO(x.data[0].date) : getLocalDateTime();\r\n        }\r\n        return getLocalDateTime();\r\n      })\r\n      .reduce((acc, curr) => Math.min(acc, curr?.toMillis() ?? Infinity), getLocalDateTime().toMillis()),\r\n  );\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { findNearestOnOrBefore } from \"shared/utility/find-nearest-on-or-before\";\r\nimport { calcEquity, calcLoanBalance } from \"shared/utility/mortgage-calc\";\r\nimport { useEarliestAccountEntry } from \"./use-earliest-account-entry\";\r\nimport { useFutureBonuses } from \"./use-future-bonuses\";\r\nimport { useFutureMedicareTax } from \"./use-future-medicare-tax\";\r\nimport { useFutureRetirementContributions } from \"./use-future-retirement-contributions\";\r\nimport { useFutureSavings } from \"./use-future-savings\";\r\nimport { useFutureSocialSecurity } from \"./use-future-social-security\";\r\n\r\nexport interface TimeSeriesWealth {\r\n  graphDate: Date;\r\n  date: DateTime;\r\n  wealth: number;\r\n  yoyCash?: number;\r\n  yoyPct?: number;\r\n}\r\n\r\nexport const useTimeSeriesWealth = () => {\r\n  const localDateTime = getLocalDateTime();\r\n  const earliest = useEarliestAccountEntry();\r\n  const accounts = useStore(store, (x) => x.wealth);\r\n  const bonuses = useFutureBonuses();\r\n  const savings = useFutureSavings();\r\n  const ssiTaxValue = useFutureSocialSecurity();\r\n  const medicareTaxValue = useFutureMedicareTax();\r\n  const retirementContribution = useFutureRetirementContributions();\r\n\r\n  const data = useMemo(() => {\r\n    if (!earliest.isValid) {\r\n      return [];\r\n    }\r\n\r\n    const futureWealth =\r\n      bonuses +\r\n      savings.remaining +\r\n      retirementContribution.remaining +\r\n      ssiTaxValue.remaining +\r\n      medicareTaxValue.remaining;\r\n\r\n    const dates = new Array(localDateTime.year + 2 - earliest.year)\r\n      .fill(earliest.year)\r\n      .map((x, i) => DateTime.fromObject({ day: 1, month: 1, year: x + i }).startOf(\"day\"));\r\n\r\n    if (!localDateTime.equals(dates[dates.length - 2])) {\r\n      dates.splice(-1, 0, localDateTime);\r\n    }\r\n\r\n    return dates\r\n      .map((date, idx, arr) => {\r\n        const isLast = idx === arr.length - 1;\r\n        const accountWealth = Object.values(accounts)\r\n          .map((x) => {\r\n            if (x.type === \"mortgage\" && x.loan) {\r\n              const houseValue = findNearestOnOrBefore(date, x.data);\r\n              const balance = calcLoanBalance(date, x.loan);\r\n              return calcEquity(x.loan.ownershipPct, houseValue?.value, balance, x.loan.principal);\r\n            } else if (x.type === \"account\") {\r\n              const entry = findNearestOnOrBefore(date, x.data);\r\n              return entry?.value ?? 0;\r\n            }\r\n            return 0;\r\n          })\r\n          .reduce((acc, curr) => acc + curr, 0);\r\n\r\n        return {\r\n          date,\r\n          graphDate: date.toJSDate(),\r\n          wealth: accountWealth + (isLast ? futureWealth : 0),\r\n        };\r\n      })\r\n      .map((x, idx, arr) => {\r\n        if (idx !== arr.length - 1) {\r\n          const benchmarkWealth = arr[idx - 1]?.wealth;\r\n          if (!benchmarkWealth) {\r\n            return x;\r\n          }\r\n          return {\r\n            ...x,\r\n            yoyCash: x.wealth - benchmarkWealth,\r\n            yoyPct: x.wealth / benchmarkWealth - 1,\r\n          };\r\n        }\r\n\r\n        const benchmarkWealth = arr[idx - 2]?.wealth;\r\n        if (!benchmarkWealth) {\r\n          return x;\r\n        }\r\n        return {\r\n          ...x,\r\n          yoyCash: x.wealth - benchmarkWealth,\r\n          yoyPct: x.wealth / benchmarkWealth - 1,\r\n        };\r\n      });\r\n  }, [\r\n    earliest.isValid,\r\n    earliest.year,\r\n    bonuses,\r\n    savings.remaining,\r\n    retirementContribution.remaining,\r\n    ssiTaxValue.remaining,\r\n    medicareTaxValue.remaining,\r\n    localDateTime,\r\n    accounts,\r\n  ]);\r\n  return data as TimeSeriesWealth[];\r\n};\r\n","import { AgCartesianChartOptions, AgLineSeriesOptions } from \"ag-charts-community\";\r\nimport { AgChartsReact } from \"ag-charts-react\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\nimport { useTimeSeriesWealth } from \"../hooks/use-times-series-wealth\";\r\n\r\nexport const WealthChart = () => {\r\n  const data = useTimeSeriesWealth();\r\n\r\n  const series = useMemo(() => {\r\n    return [\r\n      {\r\n        type: \"line\",\r\n        xKey: \"graphDate\",\r\n        yKey: \"wealth\",\r\n        yName: \"Wealth\",\r\n        tooltip: {\r\n          renderer: ({ datum, yKey, xKey }) => ({\r\n            content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCash(datum[yKey])}`,\r\n          }),\r\n        },\r\n      },\r\n      {\r\n        type: \"line\",\r\n        xKey: \"graphDate\",\r\n        yKey: \"yoyCash\",\r\n        yName: \"YoY ($)\",\r\n        tooltip: {\r\n          renderer: ({ datum, yKey, xKey }) => ({\r\n            content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCash(datum[yKey])}`,\r\n          }),\r\n        },\r\n      },\r\n    ] as AgLineSeriesOptions[];\r\n  }, []);\r\n\r\n  const options: AgCartesianChartOptions = useMemo(\r\n    () => ({\r\n      theme: \"ag-default-dark\",\r\n      title: {\r\n        text: `${data[data.length - 1].date.toFormat(shortDate)} Projected wealth ${formatCashShort(\r\n          (data[data.length - 1]?.wealth ?? 0) as number,\r\n        )}`,\r\n      },\r\n      data,\r\n      axes: [\r\n        {\r\n          type: \"time\",\r\n          position: \"bottom\",\r\n          label: {\r\n            format: \"%Y\",\r\n          },\r\n        },\r\n        {\r\n          type: \"number\",\r\n          position: \"left\",\r\n          nice: false,\r\n        },\r\n      ],\r\n      series,\r\n    }),\r\n    [data, series],\r\n  );\r\n  return <AgChartsReact options={options} />;\r\n};\r\n","import QueryStatsIcon from \"@mui/icons-material/QueryStats\";\r\nimport UpdateIcon from \"@mui/icons-material/Update\";\r\nimport { Tooltip } from \"@mui/material\";\r\nimport { Stack } from \"@mui/system\";\r\nimport { ColDef, ICellRendererParams } from \"ag-grid-community\";\r\nimport { DateTime } from \"luxon\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { formatCash } from \"shared/utility/format-cash\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\nimport { formatPercent } from \"shared/utility/format-percent\";\r\nimport { TimeSeriesWealth } from \"../../hooks/use-times-series-wealth\";\r\n\r\nexport const columnConfig: ColDef<TimeSeriesWealth>[] = [\r\n  {\r\n    headerName: \"Date\",\r\n    sort: \"desc\",\r\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\r\n    valueGetter: (x) => x.data?.date,\r\n    cellRenderer: (x: ICellRendererParams<unknown, DateTime>) => {\r\n      const systemYear = getLocalDateTime().year;\r\n      return (\r\n        <Stack direction={\"row\"} alignItems={\"center\"}>\r\n          {x.valueFormatted}&nbsp;\r\n          {x.value && x.value > getLocalDateTime() && (\r\n            <Tooltip title=\"Future Event\">\r\n              <UpdateIcon htmlColor=\"yellow\" />\r\n            </Tooltip>\r\n          )}\r\n          {x.value &&\r\n            x.value.equals(\r\n              DateTime.fromObject({\r\n                day: 1,\r\n                month: 1,\r\n                year: systemYear,\r\n              })\r\n            ) && (\r\n              <Tooltip title=\"Benchmark for current and future entries\">\r\n                <QueryStatsIcon htmlColor=\"yellow\" />\r\n              </Tooltip>\r\n            )}\r\n        </Stack>\r\n      );\r\n    },\r\n  },\r\n  {\r\n    headerName: \"Wealth\",\r\n    valueGetter: (x) => x.data?.wealth,\r\n    valueFormatter: (x) => formatCash(x.data?.wealth ?? 0),\r\n  },\r\n  {\r\n    headerName: \"YoY ($)\",\r\n    valueGetter: (x) => x.data?.yoyCash,\r\n    valueFormatter: (x) => (x.value != undefined ? formatCash(x.value) : \"\"),\r\n  },\r\n  {\r\n    headerName: \"YoY (%)\",\r\n    valueGetter: (x) => x.data?.yoyPct,\r\n    valueFormatter: (x) => (x.value !== undefined ? formatPercent(x.value) : \"\"),\r\n  },\r\n];\r\n","import { useTimeSeriesWealth } from \"capabilities/projected-wealth/hooks/use-times-series-wealth\";\r\nimport { AgGrid } from \"shared/components/ag-grid\";\r\nimport { columnConfig } from \"./colum-config\";\r\n\r\nexport const WealthTable = () => {\r\n  const data = useTimeSeriesWealth();\r\n\r\n  return (\r\n    <AgGrid\r\n      id=\"time-series-wealth\"\r\n      rowData={data}\r\n      columnDefs={columnConfig}\r\n      autoSizeStrategy={{ type: \"fitGridWidth\" }}\r\n    />\r\n  );\r\n};\r\n","import { Grid, Paper } from \"@mui/material\";\r\nimport { Config } from \"./components/config\";\r\nimport { FutureEvents } from \"./components/future-events\";\r\nimport { WealthChart } from \"./components/wealth-chart\";\r\nimport { WealthTable } from \"./components/wealth-table\";\r\n\r\nexport const ProjectedWealth = () => {\r\n  return (\r\n    <Grid container height={\"100%\"} spacing={2}>\r\n      <Grid item xs={6} height={\"50%\"}>\r\n        <WealthChart />\r\n      </Grid>\r\n      <Grid item xs={6} height={\"50%\"}>\r\n        <Paper sx={{ padding: 2, height: \"100%\" }}>\r\n          <Config />\r\n        </Paper>\r\n      </Grid>\r\n      <Grid item xs={6} height={\"50%\"}>\r\n        <WealthTable />\r\n      </Grid>\r\n      <Grid item xs={6} height={\"50%\"}>\r\n        <Paper sx={{ padding: 2, height: \"100%\" }}>\r\n          <FutureEvents />\r\n        </Paper>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import { LinearProgress } from \"@mui/material\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nexport const CountDown = (props: { timeMs: number }) => {\r\n  const { timeMs } = props;\r\n  const [time, setTime] = useState(timeMs);\r\n\r\n  useEffect(() => {\r\n    const intervalMs = 100;\r\n    const interval = setInterval(() => {\r\n      setTime((prev) => {\r\n        const remaining = prev - intervalMs;\r\n        if (remaining < 0) {\r\n          clearInterval(interval);\r\n          return 0;\r\n        }\r\n        return remaining;\r\n      });\r\n    }, 100);\r\n    return () => clearInterval(interval);\r\n  }, [props.timeMs]);\r\n\r\n  return <LinearProgress value={(time / timeMs) * 100} variant=\"determinate\" color=\"inherit\" />;\r\n};\r\n","import { Box, Button, ButtonProps, Stack } from \"@mui/material\";\r\nimport { ReactNode, useEffect, useState } from \"react\";\r\nimport { CountDown } from \"./count-down\";\r\n\r\ntype SafetyState = \"inactive\" | \"activating\" | \"active\" | \"confirmed\";\r\n\r\ninterface SafetyButtonProps {\r\n  inactiveLabel: string;\r\n  activatingLabel: string;\r\n  activeLabel: string;\r\n  confirmedLabel: string;\r\n  icon?: ReactNode;\r\n  onConfirm: () => void;\r\n}\r\n\r\nexport const SafetyButton = (props: Omit<ButtonProps, \"children\"> & SafetyButtonProps) => {\r\n  const { inactiveLabel, activatingLabel, activeLabel, confirmedLabel, onConfirm, icon, disabled, ...rest } = props;\r\n  const [safetyState, setSafetyState] = useState<SafetyState>(\"inactive\");\r\n\r\n  useEffect(() => {\r\n    if (safetyState === \"active\") {\r\n      setTimeout(() => {\r\n        setSafetyState((prev) => {\r\n          return prev === \"active\" ? \"inactive\" : prev;\r\n        });\r\n      }, 3200);\r\n    } else if (safetyState === \"activating\") {\r\n      setTimeout(() => {\r\n        setSafetyState(\"active\");\r\n      }, 1000);\r\n    } else if (safetyState === \"confirmed\") {\r\n      setTimeout(() => {\r\n        setSafetyState(\"inactive\");\r\n      }, 3200);\r\n    }\r\n  }, [safetyState]);\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        minWidth: 130,\r\n      }}\r\n    >\r\n      <Button\r\n        {...rest}\r\n        sx={{ height: \"100%\", width: \"100%\" }}\r\n        disabled={disabled || safetyState === \"activating\" || safetyState === \"confirmed\"}\r\n        size=\"small\"\r\n        onClick={() => {\r\n          safetyState === \"inactive\" && setSafetyState(\"activating\");\r\n          if (safetyState === \"active\") {\r\n            onConfirm?.();\r\n            setSafetyState(\"confirmed\");\r\n          }\r\n        }}\r\n      >\r\n        <Stack>\r\n          <Stack direction={\"row\"}>\r\n            {icon}\r\n            {safetyState === \"inactive\" && inactiveLabel}\r\n            {safetyState === \"activating\" && activatingLabel}\r\n            {safetyState === \"active\" && activeLabel}\r\n            {safetyState === \"confirmed\" && confirmedLabel}\r\n          </Stack>\r\n          {safetyState === \"active\" && <CountDown timeMs={2800} />}\r\n          {safetyState === \"activating\" && <CountDown timeMs={500} />}\r\n        </Stack>\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\r\nimport { useCallback } from \"react\";\r\nimport { store } from \"shared/store\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\n\r\nexport const downloadJson = <T,>(filename: string, storeData: T) => {\r\n  const data = JSON.stringify(storeData, null, 2);\r\n  const link = document.createElement(\"a\");\r\n  link.download = filename;\r\n  const blob = new Blob([data], { type: \"application/json\" });\r\n  link.href = window.URL.createObjectURL(blob);\r\n  link.click();\r\n};\r\n\r\nexport const useExport = () => {\r\n  const storeData = useStore(store);\r\n  const onExport = useCallback(() => {\r\n    downloadJson(`wealth-tracker-${getLocalDateTime().toFormat(shortDate)}.json`, storeData);\r\n  }, [storeData]);\r\n\r\n  return onExport;\r\n};\r\n","import { useCallback } from \"react\";\r\nimport { storeValidator } from \"shared/models/store\";\r\nimport { store } from \"shared/store\";\r\n\r\nfunction selectFile(contentType: string) {\r\n  return new Promise<File>((resolve) => {\r\n    const input = document.createElement(\"input\");\r\n    input.type = \"file\";\r\n    input.multiple = false;\r\n    input.accept = contentType;\r\n\r\n    input.onchange = () => {\r\n      const files = Array.from(input.files ?? []);\r\n      resolve(files[0]);\r\n    };\r\n\r\n    input.click();\r\n  });\r\n}\r\n\r\nexport const useImport = () => {\r\n  return useCallback(() => {\r\n    return new Promise<void>((resolve, reject) => {\r\n      selectFile(\"application/json\").then((file) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = (readerEvent) => {\r\n          const content = readerEvent.target?.result?.toString();\r\n          if (content) {\r\n            const data = JSON.parse(window.atob(content.split(\",\")[1]));\r\n            const validation = storeValidator.safeParse(data);\r\n            validation.success && store.setState(() => data);\r\n            validation.success ? resolve() : reject(validation.error);\r\n          }\r\n        };\r\n      });\r\n    });\r\n  }, []);\r\n};\r\n","import { useMemo } from \"react\";\r\nimport { storeValidator } from \"shared/models/store\";\r\n\r\nexport const useStoreDataError = () => {\r\n  const invalidData = localStorage.getItem(\"store-invalid\");\r\n  return useMemo(() => {\r\n    if (!invalidData) {\r\n      return { hadError: false };\r\n    }\r\n    const jsonInvalidData = JSON.parse(invalidData);\r\n    const validated = storeValidator.safeParse(jsonInvalidData);\r\n    return {\r\n      hadError: !!invalidData,\r\n      invalidData: jsonInvalidData,\r\n      parseError: invalidData && !validated.success ? validated.error : undefined,\r\n      resetError: () => {\r\n        localStorage.removeItem(\"store-invalid\");\r\n      },\r\n    };\r\n  }, [invalidData]);\r\n};\r\n","import { Box, Table, TableBody, TableCell, TableHead, TableRow } from \"@mui/material\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport DialogContentText from \"@mui/material/DialogContentText\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\nimport { ReactNode } from \"react\";\r\nimport { ZodError } from \"zod\";\r\n\r\ninterface InvalidDataDialogProps {\r\n  open?: boolean;\r\n  error?: ZodError;\r\n  children?: ReactNode;\r\n}\r\n\r\nexport default function InvalidDataDialog(props: InvalidDataDialogProps) {\r\n  const { open, error, children } = props;\r\n\r\n  return (\r\n    <>\r\n      <Dialog open={!!open}>\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Error Loading Data\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            <Box maxHeight={500} overflow={\"auto\"}>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Error Message</TableCell>\r\n                    <TableCell>Path</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {error?.issues.map((x, idx) => {\r\n                    return (\r\n                      <TableRow key={idx}>\r\n                        <TableCell>{x.message}</TableCell>\r\n                        <TableCell>{x.path.join(\".\")}</TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                </TableBody>\r\n              </Table>\r\n            </Box>\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>{children}</DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n}\r\n","import DeleteForever from \"@mui/icons-material/DeleteForever\";\r\nimport { Box, Button, Stack, Tab, Tabs } from \"@mui/material\";\r\nimport { NetWealth } from \"capabilities/net-wealth\";\r\nimport { ProjectedIncome } from \"capabilities/projected-income\";\r\nimport { ProjectedWealth } from \"capabilities/projected-wealth\";\r\nimport { useState } from \"react\";\r\nimport { SafetyButton } from \"shared/components/safety-button\";\r\nimport { downloadJson, useExport } from \"shared/hooks/use-export\";\r\nimport { useImport } from \"shared/hooks/use-import\";\r\nimport { useStoreDataError } from \"shared/hooks/use-store-data-error\";\r\nimport { resetStore } from \"shared/store\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\nimport InvalidDataDialog from \"./invalid-data-dialog\";\r\n\r\nexport const App = () => {\r\n  const [tab, setTab] = useState<string>(\"wealth\");\r\n  const onExport = useExport();\r\n  const onImport = useImport();\r\n  const { hadError, parseError, resetError, invalidData } = useStoreDataError();\r\n  const [error, setError] = useState(parseError);\r\n  const [isOpen, setIsOpen] = useState(hadError);\r\n\r\n  return (\r\n    <>\r\n      <InvalidDataDialog open={isOpen} error={error}>\r\n        {hadError && (\r\n          <>\r\n            <Button\r\n              color=\"error\"\r\n              onClick={() => {\r\n                setIsOpen(false);\r\n                resetError?.();\r\n                resetStore();\r\n              }}\r\n            >\r\n              Reset\r\n            </Button>\r\n            <Button\r\n              onClick={() => {\r\n                downloadJson(`invalid-data-wealth-tracker-${getLocalDateTime().toFormat(shortDate)}.json`, invalidData);\r\n              }}\r\n            >\r\n              Download Data\r\n            </Button>\r\n\r\n            <Button\r\n              onClick={() => {\r\n                setIsOpen(false);\r\n                resetError?.();\r\n              }}\r\n            >\r\n              Ignore\r\n            </Button>\r\n          </>\r\n        )}\r\n        {!hadError && (\r\n          <Button\r\n            onClick={() => {\r\n              setIsOpen(false);\r\n            }}\r\n          >\r\n            Cancel\r\n          </Button>\r\n        )}\r\n      </InvalidDataDialog>\r\n      <Stack direction=\"row\">\r\n        <Tabs value={tab} onChange={(_, value) => setTab(value)}>\r\n          <Tab value=\"wealth\" label=\"Total Wealth\" />\r\n          <Tab value=\"projected-income\" label=\"Projected Income\" />\r\n          <Tab value=\"projected-wealth\" label=\"Projected Wealth\" />\r\n        </Tabs>\r\n        <Box marginLeft={\"auto\"} gap={2} display={\"flex\"}>\r\n          <Button\r\n            onClick={() =>\r\n              onImport().catch((err) => {\r\n                setIsOpen(true);\r\n                setError(err);\r\n              })\r\n            }\r\n          >\r\n            Import\r\n          </Button>\r\n          <Button onClick={onExport}>Export</Button>\r\n          <SafetyButton\r\n            onConfirm={resetStore}\r\n            inactiveLabel=\"Reset\"\r\n            activatingLabel=\"Activating\"\r\n            activeLabel=\"Confirm\"\r\n            confirmedLabel=\"confirmed\"\r\n            color=\"error\"\r\n            icon={<DeleteForever />}\r\n          />\r\n        </Box>\r\n      </Stack>\r\n      <Box padding={2} height={\"95%\"} width={\"100%\"}>\r\n        {tab === \"wealth\" && <NetWealth />}\r\n        {tab === \"projected-income\" && <ProjectedIncome />}\r\n        {tab === \"projected-wealth\" && <ProjectedWealth />}\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n","import { CssBaseline, ThemeProvider, createTheme } from \"@mui/material\";\r\nimport { LocalizationProvider } from \"@mui/x-date-pickers\";\r\nimport { AdapterLuxon } from \"@mui/x-date-pickers/AdapterLuxon\";\r\nimport \"ag-grid-community/styles/ag-grid.css\";\r\nimport \"ag-grid-community/styles/ag-theme-quartz.css\";\r\nimport { App } from \"app/app.tsx\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport { ErrorBoundary } from \"react-error-boundary\";\r\nimport \"./index.css\";\r\n\r\nconst darkTheme = createTheme({\r\n  palette: {\r\n    mode: \"dark\",\r\n  },\r\n});\r\n\r\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\r\n  <React.StrictMode>\r\n    <ErrorBoundary\r\n      fallbackRender={(props) => {\r\n        return (\r\n          <>\r\n            <div style={{ backgroundColor: \"#FFF\" }}>{props.error.message}</div>\r\n            <div style={{ backgroundColor: \"#FFF\" }}>{props.error.stackTrace}</div>\r\n          </>\r\n        );\r\n      }}\r\n    >\r\n      <LocalizationProvider dateAdapter={AdapterLuxon}>\r\n        <ThemeProvider theme={darkTheme}>\r\n          <CssBaseline />\r\n          <App />\r\n        </ThemeProvider>\r\n      </LocalizationProvider>\r\n    </ErrorBoundary>\r\n  </React.StrictMode>,\r\n);\r\n"],"names":["sortByDate","select","direction","a","b","toMillis","accountDataValidator","z","object","date","string","value","number","id","accountValidator","type","literal","data","array","loanValidator","principal","ratePct","paymentsPerYear","payment","firstPaymentDate","ownershipPct","mortgageValidator","loan","optional","wealth","record","union","projectedIncome","timeSeries","paycheck","meritIncreasePct","equityPct","meritBonusPct","meritBonus","companyBonusPct","companyBonus","retirementBonus","projectedWealth","socialSecurityLimit","socialSecurityTaxRate","medicareSupplementalTaxThreshold","medicareSupplementalTaxRate","savingsPerMonth","retirementContributionPaycheck","getDefaultStore","storeValidator","createStore","validator","defaultValue","key","invalidData","localData","localStorage","getItem","JSON","parse","safeParse","success","log","error","setItem","stringify","store","CreateStore","subscribe","current","state","AddAccountEntry","accountName","amount","setState","create","prev","next","push","startOf","toString","uuid","sort","DateTime","fromISO","x","addProjectedIncome","concat","removeAccount","removeAccountEntry","idxToRemove","findIndex","splice","removeProjectedIncome","resetStore","setLoan","updateAccountDate","account","idx","toISO","updateAccountName","currentAccountName","newAccountName","updateAccountValue","updateProjectedIncome","NewAccount","forwardRef","props","ref","open","setOpen","useState","nameRef","useRef","setError","accountType","setAccountType","undefined","marginLeft","target","children","AgGrid","rest","height","getLocalDateTime","local","shortDate","monthDay","DeleteAccount","padding","width","RenameAccount","nextAccountName","setNextAccountName","event","formatCashShort","Intl","NumberFormat","style","currency","notation","maximumFractionDigits","format","formatCash","Cash","fallback","disableTooltip","compact","tooltip","placement","formatted","useMemo","join","createAccountColumnConfig","headerName","valueFormatter","toFormat","valueGetter","cellEditor","editable","valueSetter","fromJSDate","newValue","isValid","cellRenderer","DeleteForeverIcon","useMissingYears","years","Object","entries","groupBy","year","map","find","janFirst","fromObject","day","month","diff","days","lookup","fromEntries","missing","i","length","AccountTab","useStore","setDate","inputRef","missingYears","hasSameDate","hasSame","onAddEntry","accountColumnConfig","color","startAdornment","findNearestOnOrBefore","findNearestIdxOnOrBefore","selector","getGraphDates","accounts","Set","flatMap","calcLoanBalance","rate","monthlyPayment","annualizedRate","periods","months","totalRate","balance","calcEquity","houseValue","loanBalance","AddEntry","Stack","reduce","acc","curr","convertPct","min","datetime","offset","AddLoan","textField","parsed","issues","path","mortgageColumnConfig","toFixed","equity","MortgageTab","allAccounts","mortgageData","values","AccountTabs","firstAccount","keys","setAccount","useEffect","_","getMortgageValue","mortgage","entry","getAccountValue","getGraphValue","useGraphData","dates","graphData","toJSDate","total","forEach","arr","firstNonZero","slice","WealthChart","series","stacked","xKey","yKey","yName","renderer","datum","content","toISODate","options","theme","title","text","axes","position","label","NetWealth","useDates","meritIncrease","useDateRanges","base","start","end","endOf","findSameYear","minMaxAvg","max","avg","index","Math","Infinity","outcomeFromSingle","actual","actualizedOutcome","outcome","scaleOutcome","AddOutcome","outcomes","everyActualDefined","every","aPayday","DateRangesOverlap","getPayPeriods","anyPayday","startPayDay","plus","numPayDays","weeks","payedOn","useMostFrequentValue","valueByDateRange","toSorted","minus","systemYear","useProjectedPay","baseIncome","meritPct","payPerPeriod","mostRecentPay","startDate","multiplier","unshift","round","startIdx","useBaseIncome","endDate","pay","payPeriods","sum","filter","payPeriod","businessDays","differenceInBusinessDays","milliseconds","totalIncome","incomePerPeriod","reduceRight","perPayday","count","useCompanyBonus","dateRanges","mostRecentBonus","mostRecentPercent","meritFactor","cash","projectedActual","percent","useMeritBonus","ranges","bonusAmount","bonusPercent","frequentMeritBonusPercent","meritOutcome","useRetirementBonus","juneBonus","eligibleIncome","useTotalIncome","julyBonus","taxableIncome","Duration","dateTime","variant","dateFormat","countDownStr","diffNow","tooltipStr","countDownColor","formatPercent","Percent","Value","secondaryValue","tertiaryValue","className","display","minWidth","flexDirection","justifyContent","alignItems","gap","flexShrink","BonusOutcome","payDate","border","borderRadius","paddingBottom","paddingLeft","paddingTop","paddingRight","updateProjectedIncomeDate","valueFormatted","UpdateIcon","DataEntry","defaultDate","setAmount","console","flex","Layout","marginBottom","Until","usePaycheck","paychecks","IncomePerPeriodTooltip","ArrowForwardIcon","MeritOutcome","income","projectedPay","baseAprToApr","meritIncreases","commonMerit","totalAdjust","sx","maxWidth","Outcome","ProjectedIncome","selectedYear","setSelectedYear","oldestYear","first","Box","marginRight","set","setProjectedWealth","configName","ConfigEntry","isPercent","onchange","useCallback","input","isNan","Number","isNaN","Config","useFutureBonuses","bonuses","usePayments","merit","cumulativePay","cumulative","payBeforeMerit","payBeforeCompanyBonus","previousPay","remainingPayments","payments","nextPaymentIdx","numRemaining","totalBasePayments","totalPayments","useFutureMedicareTax","config","at","firstOccurrence","remaining","perPaycheck","useFutureRetirementContributions","retirementContribution","useFutureSavings","perMonth","useFutureSocialSecurity","BeforeAfter","before","after","isFuture","FutureEvents","savings","retirement","medicare","socialSecurity","useEarliestAccountEntry","fromMillis","useTimeSeriesWealth","localDateTime","earliest","ssiTaxValue","medicareTaxValue","futureWealth","Array","fill","equals","isLast","accountWealth","graphDate","benchmarkWealth","yoyCash","yoyPct","nice","columnConfig","QueryStatsIcon","WealthTable","ProjectedWealth","Grid","CountDown","timeMs","time","setTime","interval","setInterval","intervalMs","clearInterval","SafetyButton","inactiveLabel","activatingLabel","activeLabel","confirmedLabel","onConfirm","icon","disabled","safetyState","setSafetyState","setTimeout","downloadJson","filename","storeData","link","document","createElement","download","blob","Blob","href","window","URL","createObjectURL","click","useExport","onExport","selectFile","contentType","Promise","multiple","accept","files","from","useImport","resolve","reject","then","reader","FileReader","readAsDataURL","file","onload","readerEvent","result","atob","split","validation","useStoreDataError","hadError","jsonInvalidData","validated","parseError","resetError","removeItem","InvalidDataDialog","message","App","tab","setTab","onImport","isOpen","setIsOpen","catch","err","DeleteForever","darkTheme","createTheme","palette","mode","ReactDOM","createRoot","getElementById","render","backgroundColor","stackTrace","AdapterLuxon"],"mappings":"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"}