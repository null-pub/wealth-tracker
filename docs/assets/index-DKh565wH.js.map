{"version":3,"file":"index-DKh565wH.js","sources":["../../src/shared/utility/sort-by-date.ts","../../src/shared/models/store/version-0/loan.ts","../../src/shared/models/store/version-3/account-data.ts","../../src/shared/models/store/version-0/account-data.ts","../../src/shared/models/store/version-0/account.ts","../../src/shared/models/store/version-0/mortgage.ts","../../src/shared/models/store/version-0/net-wealth.ts","../../src/shared/models/store/version-0/projected-income.ts","../../src/shared/models/store/version-2/projected-wealth.ts","../../src/shared/models/store/version-0/projected-wealth.ts","../../src/shared/models/store/version-1/store.ts","../../src/shared/models/store/version-2/store.ts","../../src/shared/models/store/version-3/mortgage.ts","../../src/shared/models/store/version-3/projected-income.ts","../../src/shared/models/store/version-4/projected-wealth.ts","../../src/shared/models/store/version-5/account.ts","../../src/shared/models/store/version-5/get-default.ts","../../src/shared/models/store/version-5/mortgage.ts","../../src/shared/models/store/version-5/net-wealth.ts","../../src/shared/models/store/version-5/store.ts","../../src/shared/models/store/version-0/store.ts","../../src/shared/models/store/version-3/account.ts","../../src/shared/models/store/version-3/net-wealth.ts","../../src/shared/models/store/version-3/projected-wealth.ts","../../src/shared/models/store/version-3/store.ts","../../src/shared/models/store/version-4/store.ts","../../src/shared/store/migrations.ts","../../src/shared/store/store.ts","../../src/shared/store/add-account-entry.ts","../../src/shared/store/add-projected-income.ts","../../src/shared/store/hide-account.ts","../../src/shared/store/remove-account.ts","../../src/shared/store/remove-account-entry.ts","../../src/shared/store/remove-projected-income.ts","../../src/shared/store/reset-store.ts","../../src/shared/store/set-loan.ts","../../src/shared/store/update-account-date.ts","../../src/shared/store/update-account-name.ts","../../src/shared/store/update-account-value.ts","../../src/shared/store/update-projected-income.ts","../../src/capabilities/net-wealth/new-account.tsx","../../src/shared/components/ag-grid/ag-grid.tsx","../../src/shared/utility/current-date.ts","../../src/shared/utility/format-date.ts","../../src/shared/utility/format-cash.ts","../../src/shared/components/formatters/cash.tsx","../../src/capabilities/net-wealth/tab-types/account/column-config.tsx","../../src/capabilities/net-wealth/tab-types/account/hooks/useMissingYears.ts","../../src/shared/components/confirm-dialog.tsx","../../src/capabilities/net-wealth/tab-types/account/settings.tsx","../../src/capabilities/net-wealth/tab-types/account/account.tsx","../../src/shared/utility/find-nearest-on-or-before.ts","../../src/shared/utility/get-graph-dates.ts","../../src/shared/utility/mortgage-calc.ts","../../src/capabilities/net-wealth/tab-types/mortgage/add-entry.tsx","../../src/capabilities/net-wealth/tab-types/mortgage/column-config.tsx","../../src/capabilities/net-wealth/tab-types/mortgage/settings.tsx","../../src/capabilities/net-wealth/tab-types/mortgage/mortgage.tsx","../../src/capabilities/net-wealth/account-tabs.tsx","../../src/shared/hooks/use-earliest-account-entry.ts","../../src/shared/utility/get-graph-value.ts","../../src/capabilities/net-wealth/wealth-chart/use-graph-data.ts","../../src/capabilities/net-wealth/wealth-chart/wealth-chart.tsx","../../src/capabilities/net-wealth/net-wealth.tsx","../../src/shared/components/card.tsx","../../src/shared/components/formatters/cash-range.tsx","../../src/shared/utility/format-percent.ts","../../src/shared/components/formatters/percent.tsx","../../src/shared/components/formatters/percent-range.tsx","../../src/shared/components/formatters/value.tsx","../../src/shared/components/formatters/cluster-value.tsx","../../src/shared/utility/to-human.ts","../../src/shared/components/formatters/countdown.tsx","../../src/shared/store/scenario-store.ts","../../src/shared/utility/ckmeans/make-matrix.ts","../../src/shared/utility/ckmeans/numeric-sort.ts","../../src/shared/utility/ckmeans/unique-count-sorted.ts","../../src/shared/utility/ckmeans/ckmeans.ts","../../src/shared/utility/ckmeans/collapse.ts","../../src/shared/utility/cluster-helpers.ts","../../src/shared/hooks/use-clusters.ts","../../src/shared/utility/find-same-year.ts","../../src/shared/hooks/use-dates.ts","../../src/shared/models/payment-periods.ts","../../src/shared/constants.ts","../../src/capabilities/projected-income/spark-chart.tsx","../../src/shared/store/update-projected-income-date.ts","../../src/capabilities/projected-income/data-entry/column-config.tsx","../../src/capabilities/projected-income/data-entry/data-entry.tsx","../../src/capabilities/projected-income/income-chart.tsx","../../src/capabilities/projected-income/income-per-period.tsx","../../src/capabilities/projected-income/use-has-merit-pairs.ts","../../src/capabilities/projected-income/projected-income.tsx","../../src/shared/utility/is-future.ts","../../src/capabilities/projected-wealth/hooks/use-future-mortgage-equity.ts","../../src/capabilities/projected-wealth/hooks/use-future-retirement-contributions.ts","../../src/capabilities/projected-wealth/hooks/use-future-savings.ts","../../src/capabilities/projected-wealth/hooks/use-future-social-security.ts","../../src/capabilities/projected-wealth/hooks/use-future-totals.tsx","../../src/capabilities/projected-wealth/future-events.tsx","../../src/capabilities/projected-wealth/hooks/use-times-series-wealth.ts","../../src/capabilities/projected-wealth/wealth-chart.tsx","../../src/capabilities/projected-wealth/wealth-table/colum-config.tsx","../../src/capabilities/projected-wealth/wealth-table/wealth-table.tsx","../../src/capabilities/projected-wealth/projected-wealth.tsx","../../src/shared/store/set-projected-wealth.ts","../../src/app/config/config-entry.tsx","../../src/app/config/config.tsx","../../src/app/config/scenario-explorer.tsx","../../src/app/invalid-data-dialog.tsx","../../src/shared/hooks/use-export.tsx","../../src/shared/hooks/use-import.tsx","../../src/shared/hooks/use-store-data-error.ts","../../src/app/config/system.tsx","../../src/app/config/config-modal.tsx","../../src/app/app.tsx","../../src/shared/utility/a-payday.ts","../../src/shared/web-worker/merit-sequence.ts","../../src/shared/web-worker/entry.ts","../../src/main.tsx"],"sourcesContent":["import { DateTime } from \"luxon\";\n\nexport const sortByDate =\n  <T>(select: (data: T) => DateTime, direction: \"asc\" | \"desc\") =>\n  (a: T, b: T) =>\n    direction === \"asc\" ? select(a).toMillis() - select(b).toMillis() : select(b).toMillis() - select(a).toMillis();\n","import { z } from \"zod\";\n\nexport const loanValidator = z.object({\n  principal: z.number(),\n  ratePct: z.number(),\n  paymentsPerYear: z.number(),\n  payment: z.number(),\n  firstPaymentDate: z.string(),\n  ownershipPct: z.number(),\n});\n\nexport type Loan = z.infer<typeof loanValidator>;\n","import { z } from \"zod\";\n\nexport const accountDataValidator = z.object({\n  date: z.string(),\n  value: z.number(),\n});\n\nexport type AccountData = z.infer<typeof accountDataValidator>;\n","import { z } from \"zod\";\n\nexport const accountDataValidator = z.object({\n  date: z.string(),\n  value: z.number(),\n  id: z.string(),\n});\n\nexport type AccountData = z.infer<typeof accountDataValidator>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const accountValidator = z.object({\n  type: z.literal(\"account\"),\n  data: z.array(accountDataValidator),\n});\n\nexport type Account = z.infer<typeof accountValidator>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\nimport { loanValidator } from \"./loan\";\n\nexport const mortgageValidator = z.object({\n  type: z.literal(\"mortgage\"),\n  loan: loanValidator.optional(),\n  data: z.array(accountDataValidator),\n});\n\nexport type Mortgage = z.infer<typeof mortgageValidator>;\n","import { z } from \"zod\";\nimport { accountValidator } from \"./account\";\nimport { mortgageValidator } from \"./mortgage\";\n\nexport const wealth = z.record(z.union([accountValidator, mortgageValidator]));\n\nexport type Wealth = z.infer<typeof wealth>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const projectedIncome = z.object({\n  timeSeries: z.object({\n    paycheck: z.array(accountDataValidator),\n    meritIncreasePct: z.array(accountDataValidator),\n    equityPct: z.array(accountDataValidator),\n    meritBonusPct: z.array(accountDataValidator),\n    meritBonus: z.array(accountDataValidator),\n    companyBonusPct: z.array(accountDataValidator),\n    companyBonus: z.array(accountDataValidator),\n    retirementBonus: z.array(accountDataValidator),\n  }),\n});\n\nexport type ProjectedIncome = z.infer<typeof projectedIncome>;\nexport type TimeSeries = keyof ProjectedIncome[\"timeSeries\"];\n","import { z } from \"zod\";\n\nexport const projectedWealth = z.object({\n  socialSecurityLimit: z.number(),\n  socialSecurityTaxRate: z.number(),\n  medicareSupplementalTaxThreshold: z.number(),\n  medicareSupplementalTaxRate: z.number(),\n  savingsPerMonth: z.number(),\n  retirementContributionPaycheck: z.number(),\n  bonusWitholdingsRate: z.number(),\n});\n\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\nexport type ProjectedWealthKeys = keyof ProjectedWealth;\n","import { z } from \"zod\";\n\nexport const projectedWealth = z.object({\n  socialSecurityLimit: z.number(),\n  socialSecurityTaxRate: z.number(),\n  medicareSupplementalTaxThreshold: z.number(),\n  medicareSupplementalTaxRate: z.number(),\n  savingsPerMonth: z.number(),\n  retirementContributionPaycheck: z.number(),\n});\n\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\nexport type ProjectedWealthKeys = keyof ProjectedWealth;\n","import { z } from \"zod\";\nimport { wealth } from \"../version-0/net-wealth\";\nimport { projectedIncome } from \"../version-0/projected-income\";\nimport { projectedWealth } from \"../version-0/projected-wealth\";\n\nexport const storeValidator = z.object({\n  version: z.literal(1),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { z } from \"zod\";\nimport { projectedIncome, wealth } from \"../version-1\";\nimport { projectedWealth } from \"./projected-wealth\";\n\nexport const storeValidator = z.object({\n  version: z.literal(2),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { z } from \"zod\";\nimport { loanValidator } from \"../version-2\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const mortgageValidator = z.object({\n  type: z.literal(\"mortgage\"),\n  loan: loanValidator.optional(),\n  data: z.array(accountDataValidator),\n});\n\nexport type Mortgage = z.infer<typeof mortgageValidator>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const projectedIncome = z.object({\n  timeSeries: z.object({\n    paycheck: z.array(accountDataValidator),\n    meritIncreasePct: z.array(accountDataValidator),\n    equityPct: z.array(accountDataValidator),\n    meritBonusPct: z.array(accountDataValidator),\n    meritBonus: z.array(accountDataValidator),\n    companyBonusPct: z.array(accountDataValidator),\n    companyBonus: z.array(accountDataValidator),\n    retirementBonus: z.array(accountDataValidator),\n  }),\n});\n\nexport type ProjectedIncome = z.infer<typeof projectedIncome>;\nexport type TimeSeries = keyof ProjectedIncome[\"timeSeries\"];\n","import { z } from \"zod\";\n\nexport const projectedWealth = z.object({\n  socialSecurityLimit: z.number(),\n  socialSecurityTaxRate: z.number(),\n  medicareSupplementalTaxThreshold: z.number(),\n  medicareSupplementalTaxRate: z.number(),\n  savingsPerMonth: z.number(),\n  retirementContributionPaycheck: z.number(),\n  bonusWithholdingsRate: z.number(),\n});\n\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\nexport type ProjectedWealthKeys = keyof ProjectedWealth;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"../version-3/account-data\";\n\nexport const accountValidator = z.object({\n  type: z.literal(\"account\"),\n  data: z.array(accountDataValidator),\n  hidden: z.boolean().default(false),\n});\n\nexport type Account = z.infer<typeof accountValidator>;\n","import { Store } from \"./store\";\n\nexport const getDefaultStore = (): Store => ({\n  version: 5,\n  projectedIncome: {\n    timeSeries: {\n      paycheck: [],\n      meritBonusPct: [],\n      companyBonusPct: [\n        {\n          date: \"2014-06-15T00:00:00.000-07:00\",\n          value: 0.248,\n        },\n        {\n          date: \"2015-06-15T00:00:00.000-07:00\",\n          value: 0.248,\n        },\n        {\n          date: \"2016-06-15T00:00:00.000-07:00\",\n          value: 0.204,\n        },\n        {\n          date: \"2017-06-15T00:00:00.000-07:00\",\n          value: 0.22,\n        },\n        {\n          date: \"2018-06-15T00:00:00.000-07:00\",\n          value: 0.26,\n        },\n        {\n          date: \"2019-06-15T00:00:00.000-07:00\",\n          value: 0.242,\n        },\n        {\n          date: \"2020-06-15T00:00:00.000-07:00\",\n          value: 0.219,\n        },\n        {\n          date: \"2021-06-15T00:00:00.000-07:00\",\n          value: 0.254,\n        },\n        {\n          date: \"2022-06-15T00:00:00.000-07:00\",\n          value: 0.272,\n        },\n        {\n          date: \"2023-06-15T00:00:00.000-07:00\",\n          value: 0.168,\n        },\n        {\n          date: \"2024-06-15T00:00:00.000-07:00\",\n          value: 0.2075,\n        },\n      ],\n      meritBonus: [],\n      companyBonus: [],\n      retirementBonus: [],\n      equityPct: [],\n      meritIncreasePct: [],\n    },\n  },\n  wealth: {},\n  projectedWealth: {\n    medicareSupplementalTaxThreshold: 200_000,\n    socialSecurityLimit: 168_600,\n    socialSecurityTaxRate: 0.062,\n    medicareSupplementalTaxRate: 0.009,\n    savingsPerMonth: 0,\n    retirementContributionPaycheck: 0,\n    bonusWithholdingsRate: 0,\n  },\n});\n","import { z } from \"zod\";\nimport { loanValidator } from \"../version-2\";\nimport { accountDataValidator } from \"../version-3/account-data\";\n\nexport const mortgageValidator = z.object({\n  type: z.literal(\"mortgage\"),\n  loan: loanValidator.optional(),\n  data: z.array(accountDataValidator),\n  hidden: z.boolean().default(false),\n});\n\nexport type Mortgage = z.infer<typeof mortgageValidator>;\n","import { z } from \"zod\";\nimport { accountValidator } from \"./account\";\nimport { mortgageValidator } from \"./mortgage\";\n\nexport const wealth = z.record(z.union([accountValidator, mortgageValidator]));\n\nexport type Wealth = z.infer<typeof wealth>;\n","import { z } from \"zod\";\nimport { projectedIncome } from \"../version-3/projected-income\";\nimport { projectedWealth } from \"../version-4/projected-wealth\";\nimport { wealth } from \"./net-wealth\";\n\nexport const storeValidator = z.object({\n  version: z.literal(5),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { z } from \"zod\";\nimport { wealth } from \"./net-wealth\";\nimport { projectedIncome } from \"./projected-income\";\nimport { projectedWealth } from \"./projected-wealth\";\n\nexport const storeValidator = z.object({\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const accountValidator = z.object({\n  type: z.literal(\"account\"),\n  data: z.array(accountDataValidator),\n});\n\nexport type Account = z.infer<typeof accountValidator>;\n","import { z } from \"zod\";\nimport { accountValidator } from \"./account\";\nimport { mortgageValidator } from \"./mortgage\";\n\nexport const wealth = z.record(z.union([accountValidator, mortgageValidator]));\n\nexport type Wealth = z.infer<typeof wealth>;\n","import { z } from \"zod\";\n\nexport const projectedWealth = z.object({\n  socialSecurityLimit: z.number(),\n  socialSecurityTaxRate: z.number(),\n  medicareSupplementalTaxThreshold: z.number(),\n  medicareSupplementalTaxRate: z.number(),\n  savingsPerMonth: z.number(),\n  retirementContributionPaycheck: z.number(),\n  bonusWitholdingsRate: z.number(),\n});\n\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\nexport type ProjectedWealthKeys = keyof ProjectedWealth;\n","import { z } from \"zod\";\nimport { wealth } from \"./net-wealth\";\nimport { projectedIncome } from \"./projected-income\";\nimport { projectedWealth } from \"./projected-wealth\";\n\nexport const storeValidator = z.object({\n  version: z.literal(3),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { z } from \"zod\";\nimport { wealth } from \"../version-3/net-wealth\";\nimport { projectedIncome } from \"../version-3/projected-income\";\nimport { projectedWealth } from \"./projected-wealth\";\n\nexport const storeValidator = z.object({\n  version: z.literal(4),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { storeValidator } from \"shared/models/store/current\";\nimport { storeValidator as storeV0Validator } from \"shared/models/store/version-0\";\nimport { Store as StoreV1, storeValidator as storeV1Validator } from \"shared/models/store/version-1\";\nimport { Store as StoreV2, storeValidator as storeV2Validator } from \"shared/models/store/version-2\";\nimport { Store as StoreV3, storeValidator as storeV3Validator } from \"shared/models/store/version-3\";\nimport { Store as StoreV4, storeValidator as storeV4Validator } from \"shared/models/store/version-4\";\nimport { Store as StoreV5 } from \"shared/models/store/version-5\";\n\nexport const migration = (data: unknown) => {\n  if (data === null || data === undefined) {\n    throw new Error(\"parsed data is null or undefined\");\n  } else if (typeof data !== \"object\") {\n    throw new Error(\"Parsed data is not an object\");\n  }\n\n  if (!(\"version\" in data)) {\n    storeV0Validator.parse(data);\n    (data as StoreV1).version = 1;\n  }\n\n  if (\"version\" in data) {\n    if (data.version === 1) {\n      storeV1Validator.parse(data);\n      (data as StoreV2).version = 2;\n      (data as StoreV2).projectedWealth.bonusWitholdingsRate = 0;\n    }\n    if (data.version === 2) {\n      storeV2Validator.parse(data);\n      (data as StoreV3).version = 3;\n    }\n    if (data.version === 3) {\n      storeV3Validator.parse(data);\n      (data as StoreV4).version = 4;\n      (data as StoreV4).projectedWealth.bonusWithholdingsRate = (data as StoreV3).projectedWealth.bonusWitholdingsRate;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      delete (data as any).projectedWealth.bonusWitholdingsRate;\n    }\n    if (data.version === 4) {\n      storeV4Validator.parse(data);\n      (data as StoreV5).version = 5;\n      const keys = Object.keys((data as StoreV5).wealth);\n      for (let i = 0; i < keys.length; i++) {\n        (data as StoreV5).wealth[keys[i]].hidden = false;\n      }\n    }\n  }\n\n  const next = storeValidator.parse(data);\n  console.log(next);\n  return next;\n};\n","import { Store as CreateStore } from \"@tanstack/store\";\nimport { ZodSchema } from \"zod\";\nimport { Store, getDefaultStore, storeValidator } from \"../models/store/current\";\nimport { migration } from \"./migrations\";\n\nconst createStore = <T extends object>(validator: ZodSchema, defaultValue: T) => {\n  const key = \"store\";\n  const invalidData = \"store-invalid\";\n  const localData = localStorage.getItem(key);\n  const data = localData ? JSON.parse(localData) : defaultValue;\n  const parse = validator.safeParse(data);\n\n  if (!parse.success) {\n    try {\n      migration(data);\n      localStorage.setItem(key, JSON.stringify(data));\n    } catch (err) {\n      console.log(\"error\", err);\n      console.log(\"invalid data\", data);\n      localStorage.setItem(invalidData, JSON.stringify(data));\n      localStorage.setItem(key, JSON.stringify(defaultValue));\n    }\n  }\n\n  const store = new CreateStore<T>(data);\n  store.subscribe(() => {\n    const current = localStorage.getItem(key);\n    current && localStorage.setItem(`${key}-previous`, current);\n    localStorage.setItem(key, JSON.stringify(store.state));\n  });\n\n  return store;\n};\n\nexport const store = createStore<Store>(storeValidator, getDefaultStore());\n","import { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { Account } from \"shared/models/store/current\";\nimport { sortByDate } from \"../utility/sort-by-date\";\nimport { store } from \"./store\";\n\nexport const addAccountEntry = (accountName: string, date: DateTime<true>, amount: number) => {\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      (next.wealth[accountName] as Account).data.push({\n        date: date.startOf(\"day\").toString(),\n        value: amount,\n      });\n      next.wealth[accountName].data.sort(sortByDate((x) => DateTime.fromISO(x.date), \"asc\"));\n    });\n  });\n};\n","import { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { TimeSeries } from \"shared/models/store/current\";\nimport { sortByDate } from \"shared/utility/sort-by-date\";\nimport { store } from \"./store\";\n\nexport const addProjectedIncome = (date: DateTime, timeSeries: TimeSeries, value: number) => {\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      next.projectedIncome.timeSeries[timeSeries] = next.projectedIncome.timeSeries[timeSeries]\n        .concat({\n          date: date.startOf(\"day\").toString(),\n          value,\n        })\n        .sort(sortByDate((x) => DateTime.fromISO(x.date), \"asc\"));\n    });\n  });\n};\n","import { create } from \"mutative\";\nimport { store } from \"./store\";\n\nexport const hideAccount = (accountName: string) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      next.wealth[accountName].hidden = true;\n    });\n  });\n","import { create } from \"mutative\";\nimport { store } from \"./store\";\n\nexport const removeAccount = (accountName: string) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      delete next.wealth[accountName];\n    });\n  });\n","import { create } from \"mutative\";\nimport { AccountData } from \"shared/models/store/current\";\nimport { store } from \"./store\";\n\nexport const removeAccountEntry = (accountName: string, data: AccountData) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      const idx = prev.wealth[accountName].data.findIndex((x) => x === data);\n      if (idx < 0) {\n        throw new Error(\"failed to find data\");\n      }\n\n      next.wealth[accountName].data.splice(idx, 1);\n      return next;\n    });\n  });\n","import { create } from \"mutative\";\nimport { AccountData, TimeSeries } from \"shared/models/store/current\";\nimport { store } from \".\";\n\nexport const removeProjectedIncome = (accountName: TimeSeries, data: AccountData) => {\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      const idx = prev.projectedIncome.timeSeries[accountName].findIndex((x) => x === data);\n      if (idx < 0) {\n        throw new Error(\"failed to find data\");\n      }\n\n      next.projectedIncome.timeSeries[accountName].splice(idx, 1);\n    });\n  });\n};\n","import { getDefaultStore } from \"shared/models/store/current\";\nimport { store } from \"./store\";\n\nexport const resetStore = () => store.setState(() => getDefaultStore());\n","import { create } from \"mutative\";\nimport { Loan, Mortgage } from \"shared/models/store/current\";\nimport { store } from \"./store\";\n\nexport const setLoan = (accountName: string, loan: Loan) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      if (next.wealth[accountName].type === \"mortgage\") {\n        (next.wealth[accountName] as Mortgage).loan = loan;\n      }\n    });\n  });\n","import { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { AccountData } from \"shared/models/store/current\";\nimport { store } from \".\";\n\nexport const updateAccountDate = (accountName: string, data: AccountData, date: DateTime) => {\n  store.setState((prev) => {\n    const next = create(prev, (next) => {\n      const idx = prev.wealth[accountName]?.data.findIndex((x) => x === data);\n      if (idx < 0) {\n        throw new Error(\"failed to find data\");\n      }\n\n      next.wealth[accountName].data[idx].date = date.toISO()!;\n    });\n    return next;\n  });\n};\n","import { create } from \"mutative\";\nimport { store } from \"./store\";\n\nexport const updateAccountName = (currentAccountName: string, newAccountName: string) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      next.wealth[newAccountName] = next.wealth[currentAccountName];\n      delete next.wealth[currentAccountName];\n    });\n  });\n","import { create } from \"mutative\";\nimport { AccountData } from \"shared/models/store/current\";\nimport { store } from \".\";\n\nexport const updateAccountValue = (accountName: string, data: AccountData, value: number) => {\n  store.setState((prev) => {\n    const next = create(prev, (next) => {\n      const idx = prev.wealth[accountName]?.data.findIndex((x) => x === data);\n      if (idx < 0) {\n        throw new Error(\"failed to find data\");\n      }\n\n      next.wealth[accountName].data[idx].value = value;\n    });\n    return next;\n  });\n};\n","import { create } from \"mutative\";\nimport { AccountData, TimeSeries } from \"shared/models/store/current\";\nimport { store } from \".\";\n\nexport const updateProjectedIncome = (timeSeries: TimeSeries, data: AccountData, value: number) => {\n  store.setState((prev) => {\n    const next = create(prev, (next) => {\n      const idx = prev.projectedIncome.timeSeries[timeSeries].findIndex((x) => x === data);\n      if (idx < 0) {\n        throw new Error(\"failed to find data\");\n      }\n      next.projectedIncome.timeSeries[timeSeries][idx].value = value;\n    });\n    return next;\n  });\n};\n","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, MenuItem, Stack, TextField } from \"@mui/material\";\nimport { create } from \"mutative\";\nimport { ReactNode, forwardRef, useRef, useState } from \"react\";\nimport { store } from \"shared/store\";\n\ntype AssetType = \"account\" | \"mortgage\";\nexport const NewAccount = forwardRef<HTMLButtonElement, { children?: ReactNode }>(function NewAccount(props, ref) {\n  const [open, setOpen] = useState(false);\n  const nameRef = useRef<HTMLInputElement>(null);\n  const [error, setError] = useState(false);\n  const [accountType, setAccountType] = useState<AssetType>();\n\n  return (\n    <>\n      <Button\n        ref={ref}\n        variant=\"outlined\"\n        onClick={() => {\n          setOpen(true);\n          setError(false);\n          setAccountType(undefined);\n        }}\n        sx={{ marginTop: 3 }}\n      >\n        add account\n      </Button>\n\n      <Dialog open={open} onClose={() => setOpen(false)}>\n        <DialogTitle>Add New Account</DialogTitle>\n        <DialogContent>\n          <Stack spacing={2} margin={2}>\n            <TextField\n              select\n              color={error ? \"error\" : \"primary\"}\n              onChange={(value) => {\n                setError(false);\n                setAccountType(value.target.value as AssetType);\n              }}\n              label=\"Type\"\n            >\n              <MenuItem value=\"mortgage\">Mortgage</MenuItem>\n              <MenuItem value=\"account\">Generic Account</MenuItem>\n            </TextField>\n\n            <TextField\n              placeholder=\"Name\"\n              onChange={() => {\n                setError(false);\n              }}\n              error={error}\n              inputRef={nameRef}\n            />\n          </Stack>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            disabled={error}\n            onClick={() => {\n              store.setState((prev) => {\n                return create(prev, (next) => {\n                  if (!nameRef.current?.value || !accountType || prev.wealth[nameRef.current.value]) {\n                    setError(true);\n                    return;\n                  }\n\n                  next.wealth[nameRef.current.value] = {\n                    type: accountType,\n                    data: [],\n                    hidden: false,\n                  };\n\n                  setOpen(false);\n                });\n              });\n            }}\n          >\n            Add\n          </Button>\n        </DialogActions>\n      </Dialog>\n      {props?.children}\n    </>\n  );\n});\n","import { AgGridReact, AgGridReactProps } from \"ag-grid-react\";\n\nimport { themeQuartz } from \"ag-grid-community\";\n\n// to use myTheme in an application, pass it to the theme grid option\nconst myTheme = themeQuartz.withParams({\n  backgroundColor: \"#1f2836\",\n  browserColorScheme: \"dark\",\n  chromeBackgroundColor: {\n    ref: \"foregroundColor\",\n    mix: 0.07,\n    onto: \"backgroundColor\",\n  },\n  foregroundColor: \"#FFF\",\n  headerFontSize: 14,\n});\n\nexport const AgGrid = (props: AgGridReactProps & { id: string }) => {\n  const { id, ...rest } = props;\n  return (\n    <div id={id} style={{ height: \"100%\" }}>\n      <AgGridReact {...rest} theme={myTheme} suppressMovableColumns />\n    </div>\n  );\n};\n","import { DateTime } from \"luxon\";\n\nexport const getLocalDateTime = () => {\n  const date = DateTime.local();\n  return date;\n};\n","export const shortDate = \"yyyy-MM-dd\";\n\nexport const monthDay = \"MMM dd\";\n","export const formatCashShort = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  notation: \"compact\",\n  maximumFractionDigits: 0,\n  minimumSignificantDigits: 3,\n  maximumSignificantDigits: 3,\n}).format;\n\nexport const formatCash = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  maximumFractionDigits: 0,\n}).format;\n","import { Tooltip } from \"@mui/material\";\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\n\ninterface CashProps {\n  value?: number;\n  fallback?: number;\n  disableTooltip?: boolean;\n  compact?: boolean;\n  tooltip?: string;\n  placement?:\n    | \"top\"\n    | \"right\"\n    | \"bottom\"\n    | \"left\"\n    | \"bottom-end\"\n    | \"bottom-start\"\n    | \"left-end\"\n    | \"left-start\"\n    | \"right-end\"\n    | \"right-start\"\n    | \"top-end\"\n    | \"top-start\"\n    | undefined;\n}\n\nconst format = (value: number | undefined, compact: boolean, fallback: number | undefined) => {\n  if (value === undefined) {\n    return fallback;\n  }\n  return compact ? formatCashShort(value) : formatCash(value);\n};\n\nexport const Cash = ({ value, fallback, disableTooltip, compact = true, tooltip, placement }: CashProps) => {\n  const formatted = format(value, compact, fallback);\n\n  return (\n    <Tooltip\n      placement={placement}\n      disableHoverListener={disableTooltip || !compact || !value}\n      title={[tooltip, formatCash(value!)].join(\" \")}\n    >\n      <span>{formatted}</span>\n    </Tooltip>\n  );\n};\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\nimport { Button } from \"@mui/material\";\nimport { ColDef } from \"ag-grid-community\";\nimport { CustomCellRendererProps } from \"ag-grid-react\";\nimport { DateTime } from \"luxon\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { AccountData } from \"shared/models/store/current\";\nimport { updateAccountDate, updateAccountValue } from \"shared/store\";\nimport { removeAccountEntry } from \"shared/store/remove-account-entry\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const createAccountColumnConfig = (accountName: string): ColDef<AccountData>[] => [\n  {\n    headerName: \"Date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\n    cellEditor: \"agDateCellEditor\",\n    editable: true,\n    valueSetter: (x) => {\n      const date = DateTime.fromJSDate(x.newValue);\n      if (date.isValid) {\n        updateAccountDate(accountName, x.data, date);\n      }\n      return date.isValid;\n    },\n  },\n  {\n    headerName: \"Value\",\n    valueGetter: (x) => x.data?.value,\n    valueSetter: (x) => {\n      updateAccountValue(accountName, x.data, +x.newValue);\n      return true;\n    },\n    cellRenderer: (x: CustomCellRendererProps<AccountData>) => <Cash value={x.value} placement=\"left\" />,\n    editable: true,\n    cellEditor: \"agNumberCellEditor\",\n    type: \"numericColumn\",\n  },\n  {\n    cellStyle: () => ({ display: \"inline-flex\", padding: \"0px\" }),\n    sortable: false,\n    headerName: \"\",\n    width: 80,\n    colId: \"actions\",\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\n      return (\n        <Button\n          onClick={() => {\n            props.data && removeAccountEntry(accountName, props.data);\n          }}\n          color=\"error\"\n          fullWidth\n        >\n          <DeleteForeverIcon />\n        </Button>\n      );\n    },\n  },\n];\n","import { DateTime } from \"luxon\";\nimport { Account } from \"shared/models/store/current\";\n\nexport const useMissingYears = (account: Account) => {\n  const years = Object.entries(Object.groupBy(account.data, (x) => DateTime.fromISO(x.date).year))\n    .map(\n      ([year, entries]) =>\n        [\n          +year,\n          !!entries?.find((x) => {\n            const date = DateTime.fromISO(x.date);\n            const janFirst = DateTime.fromObject({\n              day: 1,\n              month: 1,\n              year: +year,\n            });\n            return date.diff(janFirst, [\"days\", \"hours\"]).days == 0;\n          }),\n        ] as [number, boolean]\n    )\n    .sort(([a], [b]) => {\n      return a - b;\n    });\n\n  const lookup = Object.fromEntries(years);\n  const missing = [];\n  for (let i = years[0]?.[0] ?? 0; i <= years[years.length - 1]?.[0]; i++) {\n    if (!lookup[i]) {\n      missing.push(i);\n    }\n  }\n  return missing;\n};\n","import { Button, Dialog, DialogActions, DialogTitle } from \"@mui/material\";\nimport { ReactElement, useState } from \"react\";\n\ninterface ConfirmDialogProps {\n  onConfirm?: () => void;\n  title: string;\n  children: ReactElement;\n}\nexport const ConfirmDialog = (props: ConfirmDialogProps) => {\n  const { onConfirm, title, children } = props;\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <>\n      <div onClick={() => setIsOpen(true)}>{children}</div>\n      <Dialog open={isOpen} onClose={() => setIsOpen(false)}>\n        <DialogTitle sx={{ minWidth: 300, display: \"flex\", justifyContent: \"center\" }}>{title}</DialogTitle>\n        <DialogActions>\n          <Button sx={{ marginRight: \"auto\" }} onClick={() => setIsOpen(false)}>\n            Cancel\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"error\"\n            onClick={() => {\n              onConfirm?.();\n              setIsOpen(false);\n            }}\n          >\n            Confirm\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n","import Close from \"@mui/icons-material/Close\";\nimport SettingsIcon from \"@mui/icons-material/Settings\";\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Stack, TextField, Typography } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { ConfirmDialog } from \"shared/components/confirm-dialog\";\nimport { hideAccount, removeAccount, updateAccountName } from \"shared/store\";\n\ninterface AccountSettingsProps {\n  accountName: string;\n}\n\nexport const AccountSettings = (props: AccountSettingsProps) => {\n  const { accountName } = props;\n  const [nextAccountName, setNextAccountName] = useState<string>(accountName);\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    <>\n      <IconButton onClick={() => setIsOpen(true)}>\n        <SettingsIcon />\n      </IconButton>\n      <Dialog open={isOpen} onClose={() => setIsOpen(false)}>\n        <DialogTitle>\n          <Stack direction={\"row\"} width=\"100%\" alignItems={\"center\"} justify-content={\"space-between\"}>\n            <Typography variant=\"h6\">{accountName} Settings</Typography>\n            <IconButton onClick={() => setIsOpen(false)}>\n              <Close />\n            </IconButton>\n          </Stack>\n        </DialogTitle>\n        <DialogContent>\n          <Stack spacing={1} marginTop={1}>\n            <TextField\n              label=\"Account Name\"\n              value={nextAccountName}\n              onChange={(event) => setNextAccountName(event.target.value)}\n              placeholder=\"\"\n            />\n          </Stack>\n        </DialogContent>\n        <DialogActions>\n          <ConfirmDialog\n            onConfirm={() => {\n              removeAccount(accountName);\n              setIsOpen(false);\n            }}\n            title={`Confirm Deleting ${accountName} Account`}\n          >\n            <Button color=\"error\">Delete Account</Button>\n          </ConfirmDialog>\n          <ConfirmDialog\n            onConfirm={() => {\n              hideAccount(accountName);\n              setIsOpen(false);\n            }}\n            title={`Confirm Hiding ${accountName} Account`}\n          >\n            <Button sx={{ marginRight: 10 }} color=\"error\">\n              Hide Account\n            </Button>\n          </ConfirmDialog>\n          <Button\n            disabled={!nextAccountName}\n            onClick={() => {\n              setIsOpen(false);\n            }}\n          >\n            Cancel\n          </Button>\n          <Button\n            disabled={!nextAccountName}\n            onClick={() => {\n              accountName != nextAccountName && updateAccountName(accountName, nextAccountName);\n              setIsOpen(false);\n            }}\n          >\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n","import { Alert, Box, Button, InputAdornment, Paper, Stack, TextField, Typography } from \"@mui/material\";\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useState } from \"react\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { Account } from \"shared/models/store/current\";\nimport { addAccountEntry, store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { createAccountColumnConfig } from \"./column-config\";\nimport { useMissingYears } from \"./hooks/useMissingYears\";\nimport { AccountSettings } from \"./settings\";\n\nexport const AccountTab = (props: { accountName: string }) => {\n  const { accountName } = props;\n  const account = useStore(store, (state) => state.wealth[accountName]) as Account;\n  const [date, setDate] = useState(getLocalDateTime());\n  const [amount, setAmount] = useState<number | null>(null);\n  const missingYears = useMissingYears(account);\n  const hasSameDate = !!account?.data?.find((x) => date.hasSame(DateTime.fromISO(x.date), \"day\"));\n  const accountColumnConfig = createAccountColumnConfig(accountName);\n\n  const onAddEntry = () => {\n    if (amount != null) {\n      addAccountEntry(accountName, date, amount);\n      setAmount(null);\n    }\n  };\n\n  return (\n    <Stack height=\"100%\" spacing={2}>\n      <Stack direction={\"row\"}>\n        <Typography variant=\"h5\">{accountName}</Typography>\n        <Box sx={{ marginLeft: \"auto\" }}>\n          <AccountSettings key={accountName} accountName={accountName} />\n        </Box>\n      </Stack>\n      {missingYears.length > 0 && (\n        <Paper elevation={3}>\n          <Alert severity=\"warning\">Ensure an entry for Jan 1st for {missingYears.join(\", \")}</Alert>\n        </Paper>\n      )}\n\n      <DatePicker\n        format={shortDate}\n        sx={{ color: \"white\" }}\n        label=\"Date\"\n        defaultValue={date}\n        onChange={(value) => value && setDate(value)}\n        disableFuture\n      />\n      <TextField\n        label=\"amount\"\n        value={amount ?? \"\"}\n        type=\"number\"\n        onChange={(event) => (event.target.value === \"\" ? setAmount(null) : setAmount(+event.target.value))}\n        slotProps={{\n          input: {\n            startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n          },\n        }}\n        placeholder=\"0\"\n      />\n      <Button disabled={amount === null || !date || hasSameDate} onClick={onAddEntry}>\n        Add Entry\n      </Button>\n\n      <AgGrid\n        rowData={account.data}\n        columnDefs={accountColumnConfig}\n        id={account + \"-history\"}\n        autoSizeStrategy={{ type: \"fitGridWidth\" }}\n        onRowDataUpdated={(x) => x.api.sizeColumnsToFit()}\n        stopEditingWhenCellsLoseFocus\n      />\n    </Stack>\n  );\n};\n","import { DateTime } from \"luxon\";\nimport { AccountData } from \"shared/models/store/current\";\n\nexport const findNearestOnOrBefore = (date: DateTime, data: AccountData[]) => {\n  return data.find((x, idx, array) => {\n    if (idx == 0 && DateTime.fromISO(x.date).startOf(\"day\") >= date) {\n      return true;\n    }\n\n    if (\n      idx < array.length - 1 &&\n      DateTime.fromISO(x.date).startOf(\"day\") <= date &&\n      DateTime.fromISO(data[idx + 1].date).startOf(\"day\") > date\n    ) {\n      return true;\n    }\n\n    if (idx === array.length - 1) {\n      return true;\n    }\n  });\n};\n\nexport const findNearestIdxOnOrBefore = <T>(date: DateTime, data: T[], selector: (data: T) => DateTime) => {\n  return data.findIndex((x, idx, array) => {\n    if (idx == 0 && selector(x) >= date) {\n      return true;\n    }\n\n    if (idx < array.length - 1 && selector(x) <= date && selector(data[idx + 1]) > date) {\n      return true;\n    }\n\n    if (idx === array.length - 1) {\n      return true;\n    }\n  });\n};\n","import { DateTime } from \"luxon\";\nimport { Account, Mortgage } from \"shared/models/store/current\";\n\nexport const getGraphDates = (accounts: (Account | Mortgage)[]) => {\n  return [\n    ...new Set(\n      accounts.flatMap((x) => {\n        return x.data.map((x) => DateTime.fromISO(x.date).startOf(\"day\").toISO());\n      })\n    ),\n  ]\n    .map((x) => DateTime.fromISO(x!))\n    .sort((a, b) => a.toMillis() - b.toMillis()) as DateTime<true>[];\n};\n","import { DateTime } from \"luxon\";\nimport { Loan } from \"shared/models/store/current\";\n\nexport const calcLoanBalance = (date: DateTime, loan: Loan) => {\n  const { firstPaymentDate, paymentsPerYear, principal: principal, ratePct: rate, payment: monthlyPayment } = loan;\n  const annualizedRate = rate / paymentsPerYear;\n  const periods = date.diff(DateTime.fromISO(firstPaymentDate), \"months\").months;\n  const totalRate = (1 + annualizedRate) ** periods;\n  const balance = principal * totalRate - (monthlyPayment / annualizedRate) * (totalRate - 1);\n\n  return balance;\n};\n\nexport const calcEquity = (ownershipPct: number, houseValue: number | undefined, loanBalance: number, principal: number) => {\n  return houseValue ? houseValue * ownershipPct - loanBalance : principal - loanBalance;\n};\n","import { Button, InputAdornment, TextField } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useState } from \"react\";\nimport { addAccountEntry, store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\n\nexport const AddEntry = (props: { accountName: string }) => {\n  const { accountName } = props;\n  const [date, setDate] = useState<DateTime>(getLocalDateTime());\n  const [amount, setAmount] = useState<number | null>(null);\n  const account = useStore(store, (state) => state.wealth[accountName]);\n  const hasSameDate = !!account?.data?.find((x) => date?.hasSame(DateTime.fromISO(x.date), \"day\"));\n\n  const onAddEntry = () => {\n    if (date != undefined && amount != null) {\n      addAccountEntry(accountName, date, amount);\n      setAmount(null);\n    }\n  };\n\n  return (\n    <Stack spacing={2}>\n      <DatePicker\n        value={date}\n        onChange={(date: DateTime | null) => {\n          date && setDate(date);\n        }}\n        disableFuture\n      />\n      <TextField\n        label=\"amount\"\n        value={amount ?? \"\"}\n        type=\"number\"\n        onChange={(event) => (event.target.value === \"\" ? setAmount(null) : setAmount(+event.target.value))}\n        slotProps={{\n          input: {\n            startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n          },\n        }}\n        placeholder=\"0\"\n      />\n      <Button disabled={amount === null || !date || hasSameDate} onClick={onAddEntry}>\n        Add Home Value\n      </Button>\n    </Stack>\n  );\n};\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\nimport { Button } from \"@mui/material\";\nimport { ColDef } from \"ag-grid-community\";\nimport { CustomCellRendererProps } from \"ag-grid-react\";\nimport { DateTime } from \"luxon\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { AccountData } from \"shared/models/store/current\";\nimport { removeAccountEntry, updateAccountDate, updateAccountValue } from \"shared/store\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const createAccountColumnConfig = (accountName: string): ColDef<AccountData>[] => [\n  {\n    cellEditor: \"agDateCellEditor\",\n    editable: true,\n    headerName: \"Date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\n    valueSetter: (x) => {\n      const date = DateTime.fromJSDate(x.newValue);\n      if (date.isValid) {\n        updateAccountDate(accountName, x.data, date);\n      }\n      return date.isValid;\n    },\n  },\n  {\n    editable: true,\n    cellEditor: \"agNumberCellEditor\",\n    headerName: \"Home Value\",\n    cellRenderer: (x: CustomCellRendererProps<AccountData>) => <Cash value={x.value} placement=\"left\" />,\n    valueGetter: (x) => x.data?.value,\n    type: \"numericColumn\",\n    valueSetter: (x) => {\n      updateAccountValue(accountName, x.data, +x.newValue);\n      return true;\n    },\n  },\n  {\n    cellStyle: () => ({ display: \"inline-flex\", padding: \"0px\" }),\n    headerName: \"\",\n    width: 80,\n    sortable: false,\n    colId: \"actions\",\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\n      return (\n        <Button\n          onClick={() => {\n            props.data && removeAccountEntry(accountName, props.data);\n          }}\n          color=\"error\"\n          fullWidth\n        >\n          <DeleteForeverIcon />\n        </Button>\n      );\n    },\n  },\n];\n\ntype House = {\n  date: DateTime;\n  balance: number;\n  equity: number;\n};\n\nexport const mortgageColumnConfig: ColDef<House>[] = [\n  {\n    headerName: \"Date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data?.date,\n  },\n  {\n    headerName: \"Loan Balance\",\n    valueGetter: (x) => x.data?.balance.toFixed(2),\n    cellRenderer: (x: CustomCellRendererProps<House>) => <Cash value={x.value} placement=\"left\" />,\n    type: \"numericColumn\",\n  },\n  {\n    headerName: \"Equity\",\n    valueGetter: (x) => x.data?.equity.toFixed(2),\n    cellRenderer: (x: CustomCellRendererProps<House>) => <Cash value={x.value} placement=\"left\" />,\n    type: \"numericColumn\",\n  },\n];\n","import Close from \"@mui/icons-material/Close\";\nimport SettingsIcon from \"@mui/icons-material/Settings\";\nimport { Box, Button, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Stack, TextField, Typography } from \"@mui/material\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useRef, useState } from \"react\";\nimport { ConfirmDialog } from \"shared/components/confirm-dialog\";\nimport { Loan } from \"shared/models/store/version-1\";\nimport { hideAccount, removeAccount, setLoan, store, updateAccountName } from \"shared/store\";\nimport { ZodIssue, z } from \"zod\";\n\nconst convertPct = (value: number) => {\n  return value > 1 ? value / 100 : value;\n};\n\nconst validator: z.ZodType<Loan> = z.object({\n  principal: z.number().min(0),\n  ratePct: z.number().min(0),\n  paymentsPerYear: z.number().min(0),\n  payment: z.number().min(0),\n  firstPaymentDate: z.string().datetime({ offset: true }),\n  ownershipPct: z.number().min(0),\n});\n\ninterface AccountSettingsProps {\n  accountName: string;\n}\n\nexport const AccountSettings = (props: AccountSettingsProps) => {\n  const { accountName } = props;\n  const [nextAccountName, setNextAccountName] = useState<string>(accountName);\n  const loan = useStore(store, (x) => {\n    const account = x.wealth[accountName];\n    if (\"loan\" in account) {\n      return account.loan;\n    }\n  });\n\n  const ref = useRef<Partial<Loan>>(loan ?? {});\n  const [error, setError] = useState<Partial<Record<keyof Loan, ZodIssue>>>({});\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleClose = () => {\n    setError({});\n    ref.current = loan ?? {};\n    setIsOpen(false);\n  };\n\n  return (\n    <>\n      <IconButton onClick={() => setIsOpen(true)}>\n        <SettingsIcon />\n      </IconButton>\n      <Dialog open={isOpen} onClose={handleClose}>\n        <DialogTitle sx={{ width: \"100%\" }}>\n          <Box display={\"flex\"} width=\"100%\" alignItems={\"center\"} sx={{ justifyContent: \"space-between\" }}>\n            <Typography variant=\"h6\">{accountName} Settings</Typography>\n            <IconButton sx={{ marginLeft: \"auto\" }} onClick={handleClose}>\n              <Close />\n            </IconButton>\n          </Box>\n        </DialogTitle>\n        <DialogContent>\n          <Stack spacing={2} marginTop={1}>\n            <TextField\n              label=\"Account Name\"\n              value={nextAccountName}\n              onChange={(event) => setNextAccountName(event.target.value)}\n              placeholder=\"\"\n            />\n            <DatePicker\n              defaultValue={ref.current?.firstPaymentDate ? DateTime.fromISO(ref.current.firstPaymentDate) : null}\n              label=\"First Payment\"\n              slotProps={{\n                textField: {\n                  error: !!error.firstPaymentDate,\n                },\n              }}\n              onChange={(value: DateTime | null) => {\n                if (value) {\n                  ref.current.firstPaymentDate = value.startOf(\"day\").toISO()!;\n                }\n              }}\n            />\n            <TextField\n              error={!!error.principal}\n              defaultValue={loan?.principal}\n              onChange={(event) => {\n                ref.current.principal = +event.target.value;\n              }}\n              variant=\"outlined\"\n              label=\"Principal\"\n              type=\"number\"\n            />\n            <TextField\n              error={!!error.ratePct}\n              defaultValue={(loan?.ratePct ?? 0) * 100}\n              onChange={(event) => {\n                ref.current.ratePct = convertPct(+event.target.value);\n              }}\n              variant=\"outlined\"\n              label=\"Rate (%)\"\n              type=\"number\"\n            />\n            <TextField\n              error={!!error.paymentsPerYear}\n              defaultValue={loan?.paymentsPerYear}\n              onChange={(event) => {\n                ref.current.paymentsPerYear = +event.target.value;\n              }}\n              variant=\"outlined\"\n              label=\"Payments Per Year\"\n              type=\"number\"\n            />\n            <TextField\n              defaultValue={loan?.payment}\n              error={!!error.payment}\n              onChange={(event) => {\n                ref.current.payment = +event.target.value;\n              }}\n              variant=\"outlined\"\n              label=\"Payment\"\n              type=\"number\"\n            />\n            <TextField\n              defaultValue={loan?.ownershipPct}\n              error={!!error.ownershipPct}\n              onChange={(event) => {\n                ref.current.ownershipPct = convertPct(+event.target.value);\n              }}\n              variant=\"outlined\"\n              label=\"Ownership (%)\"\n              type=\"number\"\n            />\n          </Stack>\n        </DialogContent>\n        <DialogActions>\n          <ConfirmDialog\n            onConfirm={() => {\n              removeAccount(accountName);\n              setIsOpen(false);\n            }}\n            title={`Confirm Deleting ${accountName} Mortgage`}\n          >\n            <Button color=\"error\">Delete Account</Button>\n          </ConfirmDialog>\n          <ConfirmDialog\n            onConfirm={() => {\n              hideAccount(accountName);\n              setIsOpen(false);\n            }}\n            title={`Confirm Hiding ${accountName} Account`}\n          >\n            <Button sx={{ marginRight: 10 }} color=\"error\">\n              Hide Account\n            </Button>\n          </ConfirmDialog>\n          <Button disabled={!nextAccountName} onClick={handleClose}>\n            Cancel\n          </Button>\n          <Button\n            disabled={!nextAccountName}\n            onClick={() => {\n              const parsed = validator.safeParse(ref.current);\n              if (parsed.success) {\n                accountName != nextAccountName && updateAccountName(accountName, nextAccountName);\n                setLoan(accountName, parsed.data);\n                handleClose();\n              } else {\n                const issues = Object.groupBy(parsed.error.issues, (x) => x.path.join(\"\"));\n                setError(issues);\n              }\n            }}\n          >\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n","import { Typography } from \"@mui/material\";\nimport { Box, Stack } from \"@mui/system\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { Mortgage } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\nimport { findNearestOnOrBefore } from \"shared/utility/find-nearest-on-or-before\";\nimport { getGraphDates } from \"shared/utility/get-graph-dates\";\nimport { calcEquity, calcLoanBalance } from \"shared/utility/mortgage-calc\";\nimport { AddEntry } from \"./add-entry\";\nimport { createAccountColumnConfig, mortgageColumnConfig } from \"./column-config\";\nimport { AccountSettings } from \"./settings\";\n\nfunction createLoanValueGetter(account: Mortgage) {\n  return (date: DateTime) => {\n    const loanBalance = calcLoanBalance(date, account.loan!);\n    return {\n      date,\n      balance: loanBalance,\n      equity: calcEquity(\n        account.loan!.ownershipPct,\n        findNearestOnOrBefore(date, account.data)?.value,\n        loanBalance,\n        account.loan!.principal\n      ),\n    };\n  };\n}\n\nexport const MortgageTab = (props: { accountName: string }) => {\n  const { accountName } = props;\n  const account = useStore(store, (state) => state.wealth[accountName]) as Mortgage;\n  const allAccounts = useStore(store, (x) => x.wealth);\n  const accountColumnConfig = createAccountColumnConfig(accountName);\n  const accounts = Object.values(allAccounts);\n  const dates = getGraphDates(accounts);\n  const mortgageData = account.loan ? dates.map(createLoanValueGetter(account)) : [];\n\n  return (\n    <Stack height=\"100%\" spacing={2}>\n      <Stack direction={\"row\"}>\n        <Typography variant=\"h5\">{accountName}</Typography>\n        <Box sx={{ marginLeft: \"auto\" }}>\n          <AccountSettings key={accountName} accountName={accountName} />\n        </Box>\n      </Stack>\n      <AddEntry accountName={accountName} />\n      <AgGrid\n        rowData={account?.data ?? []}\n        columnDefs={accountColumnConfig}\n        id={account + \"-history\"}\n        autoSizeStrategy={{ type: \"fitGridWidth\" }}\n      />\n\n      <AgGrid\n        rowData={mortgageData}\n        columnDefs={mortgageColumnConfig}\n        id={account + \"-history\"}\n        autoSizeStrategy={{ type: \"fitGridWidth\" }}\n      />\n    </Stack>\n  );\n};\n","import { Box, Tab, Tabs } from \"@mui/material\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { useEffect, useState } from \"react\";\nimport { store } from \"shared/store\";\nimport { NewAccount } from \"./new-account\";\nimport { AccountTab } from \"./tab-types/account/account\";\nimport { MortgageTab } from \"./tab-types/mortgage\";\n\nexport const AccountTabs = () => {\n  const accounts = useStore(store, (x) => x.wealth);\n  const firstAccount = Object.keys(accounts)?.[0];\n  const [account, setAccount] = useState<string>(firstAccount);\n\n  useEffect(() => {\n    if (!accounts[account]) {\n      setAccount(Object.keys(accounts)?.[0] ?? \"\");\n    }\n  }, [account, accounts]);\n\n  return (\n    <Box display=\"flex\" width=\"100%\" height=\"100%\" gap={2}>\n      <Box display={\"flex\"} flexDirection={\"column\"} flex={\"0 1 auto\"}>\n        <Tabs\n          orientation=\"vertical\"\n          value={account}\n          onChange={(_, value) => {\n            setAccount(value as string);\n          }}\n        >\n          {Object.entries(accounts)\n            .filter(([, data]) => !data.hidden)\n            .map(([account]) => {\n              return <Tab key={account} value={account} label={account} />;\n            })}\n          <Tab component={NewAccount} />\n        </Tabs>\n      </Box>\n      <Box flex={\"1 1 auto\"} overflow={\"auto\"}>\n        {accounts[account]?.type === \"account\" && <AccountTab accountName={account} />}\n        {accounts[account]?.type === \"mortgage\" && <MortgageTab accountName={account} />}\n      </Box>\n    </Box>\n  );\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\n\nexport const useEarliestAccountEntry = () => {\n  const accounts = useStore(store, (x) => x.wealth);\n  return DateTime.fromMillis(\n    Object.values(accounts)\n      .map((x) => {\n        if (x.type === \"account\") {\n          return x.data[0]?.date ? DateTime.fromISO(x.data[0].date) : getLocalDateTime();\n        }\n        return getLocalDateTime();\n      })\n      .reduce((acc, curr) => Math.min(acc, curr?.toMillis() ?? Infinity), getLocalDateTime().toMillis())\n  );\n};\n","import { DateTime } from \"luxon\";\nimport { Account, Mortgage } from \"shared/models/store/current\";\nimport { findNearestOnOrBefore } from \"./find-nearest-on-or-before\";\nimport { calcEquity, calcLoanBalance } from \"./mortgage-calc\";\n\nconst getMortgageValue = (date: DateTime, mortgage: Mortgage) => {\n  if (!mortgage.loan) {\n    return 0;\n  }\n  const entry = findNearestOnOrBefore(date, mortgage.data);\n  if (entry?.date && mortgage.data[0] === entry && DateTime.fromISO(entry.date).startOf(\"day\") > date) {\n    return 0;\n  }\n  const { ownershipPct, principal } = mortgage.loan;\n  const balance = calcLoanBalance(date, mortgage.loan);\n  return calcEquity(ownershipPct, entry?.value, balance, principal);\n};\n\nconst getAccountValue = (date: DateTime, account: Account) => {\n  const entry = findNearestOnOrBefore(date, account.data);\n  if (entry?.date && account.data[0] === entry && DateTime.fromISO(entry.date).startOf(\"day\") > date) {\n    return 0;\n  }\n  return entry?.value;\n};\n\nexport const getGraphValue = (date: DateTime, account: Account | Mortgage) => {\n  switch (account.type) {\n    case \"account\":\n      return getAccountValue(date, account);\n    case \"mortgage\":\n      return getMortgageValue(date, account);\n  }\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { store } from \"shared/store\";\nimport { getGraphDates } from \"shared/utility/get-graph-dates\";\nimport { getGraphValue } from \"shared/utility/get-graph-value\";\n\nexport const useGraphData = () => {\n  const wealth = useStore(store, (x) => x.wealth);\n  const dates = getGraphDates(Object.values(wealth));\n  const accounts = Object.entries(wealth);\n  const graphData = dates.map((date) => {\n    return accounts.reduce(\n      (acc, [accountName, account]) => {\n        const value = getGraphValue(date, account);\n\n        if (value) {\n          acc[accountName] = value;\n          acc[\"total\"] = (acc[\"total\"] as number) + value;\n        } else {\n          acc[accountName] = null;\n        }\n\n        acc[\"date\"] = date.toJSDate();\n        return acc;\n      },\n      { total: 0 } as Record<string, number | Date | null>\n    );\n  });\n\n  graphData.forEach((x, idx, arr) => {\n    if (idx < arr.length - 1) {\n      Object.keys(x).forEach((key) => {\n        if (x[key] === null && arr[idx + 1][key] !== null) {\n          x[key] = 0;\n        }\n      });\n    }\n  });\n\n  const firstNonZero = graphData.findIndex((x) => (x[\"total\"] as number) > 0);\n  return graphData.slice(firstNonZero);\n};\n","import { Box } from \"@mui/system\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { AgAreaSeriesOptions, AgCartesianChartOptions, AgLineSeriesOptions, time } from \"ag-charts-community\";\nimport { AgCharts } from \"ag-charts-react\";\nimport { DateTime } from \"luxon\";\nimport { useState } from \"react\";\nimport { useEarliestAccountEntry } from \"shared/hooks/use-earliest-account-entry\";\nimport { store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { formatCashShort } from \"shared/utility/format-cash\";\nimport { useGraphData } from \"./use-graph-data\";\n\nexport const WealthChart = () => {\n  const wealth = useStore(store, (x) => x.wealth);\n  const data = useGraphData();\n  const initialFromDate = useEarliestAccountEntry().startOf(\"year\");\n  const intialToDate = getLocalDateTime().endOf(\"year\");\n  const [fromDate, setFromDate] = useState<DateTime>(getLocalDateTime().plus({ year: -1 }));\n  const [toDate, setToDate] = useState<DateTime>(intialToDate);\n\n  const filteredData = data.filter((x) => {\n    const year = (x[\"date\"] as Date).getFullYear();\n    return year >= fromDate.year && year <= toDate.year;\n  });\n\n  const series = [\n    ...Object.entries(wealth).map(([x, data]) => {\n      return {\n        stacked: true,\n        type: \"area\",\n        xKey: \"date\",\n        yKey: x,\n        yName: `${x}${data.hidden ? \" (hidden)\" : \"\"}`,\n        tooltip: {\n          renderer: ({ datum, yKey, xKey }) => ({\n            content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCashShort(datum[yKey])}`,\n          }),\n        },\n      } as AgAreaSeriesOptions;\n    }),\n    {\n      type: \"line\",\n      xKey: \"date\",\n      yKey: \"total\",\n      yName: \"Total\",\n      tooltip: {\n        renderer: ({ datum, yKey, xKey }) => ({\n          content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCashShort(datum[yKey])}`,\n        }),\n      },\n    } as AgLineSeriesOptions,\n  ];\n\n  const options: AgCartesianChartOptions = {\n    theme: \"ag-default-dark\",\n    title: {\n      text: `Total Wealth ${formatCashShort((data[data.length - 1]?.total ?? 0) as number)}`,\n    },\n    data: filteredData,\n    axes: [\n      {\n        type: \"time\",\n        position: \"bottom\",\n        label: {\n          format: \"%Y\",\n        },\n        nice: false,\n        interval: {\n          step: time.year.every(1, { snapTo: \"start\" }),\n        },\n      },\n      {\n        type: \"number\",\n        position: \"left\",\n      },\n    ],\n    series,\n  };\n\n  return (\n    <Box position={\"relative\"} height=\"100%\" width=\"100%\">\n      <AgCharts options={options} css={{ height: \"100%\", width: \"100%\" }} />\n      <Box position={\"absolute\"} top={16} right={16} zIndex={100} width={250} display={\"flex\"} gap={2}>\n        <DatePicker\n          sx={{ backgroundColor: \"#121212\" }}\n          views={[\"year\"]}\n          label=\"From\"\n          minDate={initialFromDate}\n          maxDate={intialToDate}\n          value={fromDate}\n          onChange={(value) => {\n            value && setFromDate(value);\n          }}\n        />\n        <DatePicker\n          label=\"To\"\n          sx={{ backgroundColor: \"#121212\" }}\n          views={[\"year\"]}\n          value={toDate}\n          minDate={initialFromDate}\n          maxDate={intialToDate}\n          onChange={(value) => {\n            value && setToDate(value);\n          }}\n        />\n      </Box>\n    </Box>\n  );\n};\n","import { Box } from \"@mui/material\";\nimport { AccountTabs } from \"./account-tabs\";\nimport { WealthChart } from \"./wealth-chart\";\n\nexport const NetWealth = () => {\n  return (\n    <Box display={\"flex\"} height=\"100%\" width={\"100%\"} overflow={\"hidden\"} gap={2}>\n      <Box flex=\"0 1 auto\">\n        <Box\n          width={650}\n          height={\"100%\"}\n          sx={{\n            padding: 2,\n            border: \"1px solid rgba(255,255,255,0.1)\",\n            borderRadius: 2,\n            minWidth: 480,\n            backgroundColor: \"#121212\",\n            boxShadow: \"2px 3px 9px 1px #12121252\",\n          }}\n        >\n          <AccountTabs />\n        </Box>\n      </Box>\n      <Box flex=\"1 1 auto\" overflow={\"hidden\"} width=\"100%\" height={\"100%\"}>\n        <WealthChart />\n      </Box>\n    </Box>\n  );\n};\n","import { Box, Divider, Stack, Typography } from \"@mui/material\";\nimport { ReactNode } from \"react\";\n\nexport const Card = (props: { title: ReactNode; children?: ReactNode }) => {\n  const { title, children } = props;\n\n  return (\n    <Box\n      sx={{\n        border: \"1px solid rgba(255,255,255,0.1)\",\n        borderRadius: 2,\n        minWidth: 0,\n        backgroundColor: \"#121212\",\n        boxShadow: \"2px 3px 9px 1px #12121252\",\n\n        minHeight: \"max-content\",\n      }}\n    >\n      <Typography sx={{ paddingBottom: 1, paddingLeft: 2, paddingTop: 1, display: \"flex\" }} variant=\"h5\">\n        {title}\n      </Typography>\n\n      {children && (\n        <>\n          <Divider />\n          <Stack padding={1} direction={\"row\"} spacing={0.5} width={\"100%\"} minHeight={80} justifyContent={\"space-between\"}>\n            {children}\n          </Stack>\n        </>\n      )}\n    </Box>\n  );\n};\n","import { Box } from \"@mui/system\";\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\nimport { Cash } from \"./cash\";\n\ninterface CashProps {\n  min?: number;\n  max?: number;\n  fallback?: number;\n  disableTooltip?: boolean;\n  compact?: boolean;\n  tooltip?: string;\n\n  placement?:\n    | \"top\"\n    | \"right\"\n    | \"bottom\"\n    | \"left\"\n    | \"bottom-end\"\n    | \"bottom-start\"\n    | \"left-end\"\n    | \"left-start\"\n    | \"right-end\"\n    | \"right-start\"\n    | \"top-end\"\n    | \"top-start\"\n    | undefined;\n}\nexport const CashRange = ({ min, max, fallback, disableTooltip, compact = true }: CashProps) => {\n  const minFormatted = compact ? formatCashShort(min ?? 0) : formatCash(min ?? 0);\n  const maxFormatted = compact ? formatCashShort(max ?? 0) : formatCash(max ?? 0);\n  const showRange = minFormatted !== maxFormatted;\n\n  return (\n    <Box>\n      {!showRange && (\n        <Cash\n          fallback={fallback}\n          value={max}\n          tooltip={min != max ? `${formatCash(min ?? 0)} - ` : undefined}\n          disableTooltip={disableTooltip}\n          compact={compact}\n        />\n      )}\n      {showRange && (\n        <>\n          <Cash value={min} fallback={fallback} disableTooltip={disableTooltip} compact={compact} />\n          <span> - </span>\n          <Cash value={max} fallback={fallback} disableTooltip={disableTooltip} compact={compact} />\n        </>\n      )}\n    </Box>\n  );\n};\n","export const formatPercent = new Intl.NumberFormat(\"en-us\", {\n  style: \"percent\",\n  maximumFractionDigits: 1,\n}).format;\n\nexport const formatPercentKatex = (value: number) =>\n  new Intl.NumberFormat(\"en-us\", {\n    style: \"percent\",\n    maximumFractionDigits: 1,\n  })\n    .format(value)\n    .replace(\"%\", \"\\\\%\");\n","import { Box } from \"@mui/system\";\nimport { ReactNode } from \"react\";\nimport { formatPercent } from \"shared/utility/format-percent\";\n\ninterface PercentProps {\n  value?: number;\n  probability?: number;\n  fallback?: ReactNode;\n}\n\nconst getColor = (probability?: number) => {\n  if (!probability) {\n    return \"inherit\";\n  }\n  if (probability >= 0.5) {\n    return \"green\";\n  }\n  if (probability >= 0.25) {\n    return \"orange\";\n  }\n  return \"rgb(244, 67, 54)\";\n};\n\nexport const Percent = ({ value, probability, fallback }: PercentProps) => {\n  return <Box color={getColor(probability)}>{value != undefined ? formatPercent(value) : fallback}</Box>;\n};\n","import { Box } from \"@mui/system\";\nimport { Percent } from \"./percent\";\n\ninterface PercentProps {\n  min?: number;\n  max?: number;\n  fallback?: number;\n}\n\nexport const PercentRange = ({ min, max, fallback }: PercentProps) => {\n  return (\n    <Box>\n      {(max ?? 0) / (min ?? 1) <= 1.005 && <Percent fallback={fallback} value={max} />}\n      {(max ?? 0) / (min ?? 1) > 1.005 && (\n        <>\n          <Percent value={min} fallback={fallback} />\n          <span> - </span>\n          <Percent value={max} fallback={fallback} />\n        </>\n      )}\n    </Box>\n  );\n};\n","import { Box } from \"@mui/material\";\nimport { ReactNode } from \"react\";\n\ninterface CellProps {\n  children?: ReactNode;\n  secondaryValue?: ReactNode;\n  tertiaryValue?: ReactNode;\n  title: ReactNode;\n  className?: string;\n}\n\nexport const Value = (props: CellProps) => {\n  const { children, secondaryValue, tertiaryValue, title, className } = props;\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        minWidth: 145,\n        height: 64,\n        padding: \"0px 8px\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"flex-start\",\n        gap: 0.5,\n        flexShrink: 0,\n      }}\n      className={className}\n    >\n      <Box display={\"flex\"} alignItems={\"center\"} gap={0.5}>\n        <Box fontSize={18} fontWeight={700} lineHeight={\"20px\"}>\n          {children ? children : \"?\"}\n        </Box>\n        {!!(secondaryValue ?? tertiaryValue) && (\n          <Box alignSelf={\"flex-end\"} fontSize={12} fontWeight={500} lineHeight={\"16px\"} textTransform={\"uppercase\"} color={\"#888\"}>\n            {secondaryValue ?? tertiaryValue}\n          </Box>\n        )}\n      </Box>\n      <Box fontSize={12} fontWeight={500} lineHeight={\"16px\"} textTransform={\"uppercase\"}>\n        {title}\n      </Box>\n    </Box>\n  );\n};\n","import { Box } from \"@mui/material\";\nimport { DateTime } from \"luxon\";\nimport { CashRange } from \"shared/components/formatters/cash-range\";\nimport { Percent } from \"shared/components/formatters/percent\";\nimport { PercentRange } from \"shared/components/formatters/percent-range\";\nimport { Value } from \"shared/components/formatters/value\";\nimport { Cluster } from \"shared/hooks/use-clusters\";\n\ninterface ClusterValueProps extends Cluster {\n  compact?: boolean;\n  className?: string;\n}\n\nexport const ClusterValue = (props: ClusterValueProps) => {\n  const { min, max, probability, title, compact, className } = props;\n  return (\n    <Value\n      className={className}\n      title={\n        <Box display={\"flex\"} gap={1}>\n          <span>{title}</span>\n          {probability < 1 && probability >= 0 && <Percent probability={probability} value={probability} />}\n        </Box>\n      }\n    >\n      {min < 1 && min > 0 && <PercentRange min={min} max={max} />}\n      {min > 1 && <CashRange compact={compact} min={min} max={max} />}\n      {min === 0 && 0}\n    </Value>\n  );\n};\n\nexport const ClusterValues = (props: { clusters?: Cluster[]; eventDate?: DateTime; compact?: boolean }) => {\n  const { clusters, eventDate, compact = true } = props;\n  return clusters?.map((x, i, arr) => {\n    const title = arr.length === 1 && (eventDate?.diffNow().toMillis() ?? -1) > 0 ? \"Expected\" : x.title;\n    return <ClusterValue {...x} title={title} compact={compact} key={i} />;\n  });\n};\n","import { Duration, DurationUnit } from \"luxon\";\n\nexport function toHuman(dur: Duration, smallestUnit: DurationUnit = \"seconds\"): string {\n  const units = [\"years\", \"months\", \"days\", \"hours\", \"minutes\", \"seconds\", \"milliseconds\"] as DurationUnit[];\n  const smallestIdx = units.indexOf(smallestUnit);\n  const entries = Object.entries(\n    dur\n      .shiftTo(...units)\n      .normalize()\n      .toObject()\n  ).filter(([, amount], idx) => amount > 0 && idx <= smallestIdx);\n  const dur2 = Duration.fromObject(entries.length === 0 ? { [smallestUnit]: 0 } : Object.fromEntries(entries));\n  return dur2.toHuman().replaceAll(\",\", \"\");\n}\n","import { Box, Tooltip } from \"@mui/material\";\nimport { DateTime } from \"luxon\";\nimport { ReactNode } from \"react\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { toHuman } from \"shared/utility/to-human\";\n\ninterface DurationProps {\n  dateTime?: DateTime;\n  children?: ReactNode;\n  variant?: \"countdown\" | \"date\";\n  dateFormat?: string;\n}\nexport const CountDown = (props: DurationProps) => {\n  const { dateTime, children, variant = \"countdown\", dateFormat = shortDate } = props;\n\n  const countDownStr = (() => {\n    if (!dateTime) {\n      return \"??\";\n    }\n    if (variant === \"countdown\") {\n      const diff = dateTime?.diff(getLocalDateTime(), [\"years\", \"months\", \"days\", \"hours\"]);\n\n      return toHuman(diff, \"days\");\n    }\n\n    return dateTime?.toFormat(dateFormat);\n  })();\n\n  const tooltipStr = (() => {\n    if (!dateTime) {\n      return \"??\";\n    }\n\n    if (variant === \"countdown\") {\n      return dateTime?.toFormat(dateFormat);\n    }\n    const diff = dateTime?.diff(getLocalDateTime(), [\"years\", \"months\", \"days\", \"hours\"]);\n\n    return toHuman(diff, \"days\");\n  })();\n\n  const countDownColor = (() => {\n    if (!dateTime) {\n      return \"white\";\n    }\n\n    const days = dateTime.diffNow(\"days\").days;\n    if (days < 30) {\n      return \"green\";\n    } else if (days <= 60) {\n      return \"orange\";\n    }\n\n    return \"rgb(244, 67, 54)\";\n  })();\n\n  return dateTime && dateTime > getLocalDateTime() ? (\n    <Tooltip title={tooltipStr}>\n      <Box color={countDownColor}>{countDownStr}</Box>\n    </Tooltip>\n  ) : (\n    children\n  );\n};\n","import { Store } from \"@tanstack/store\";\nimport { Scenario } from \"shared/models/scenario\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\n\ninterface ScenarioStore {\n  scenarios: Partial<Record<number, Scenario[]>>;\n  loading: boolean;\n  minYear: number;\n  maxYear: number;\n}\n\nconst year = getLocalDateTime().year;\nexport const scenarioStore = new Store<ScenarioStore>({\n  loading: true,\n  maxYear: year,\n  minYear: year,\n  scenarios: {},\n});\n","export function makeMatrix(columns: number, rows: number) {\n  const matrix = [];\n  for (let i = 0; i < columns; i++) {\n    const column = [];\n    for (let j = 0; j < rows; j++) {\n      column.push(0);\n    }\n    matrix.push(column);\n  }\n  return matrix;\n}\n","export function numericSort<T>(x: T[], selector: (data: T) => number) {\n  return x.toSorted(function (a, b) {\n    return selector(a) - selector(b);\n  });\n}\n","export function uniqueCountSorted<T>(x: T[], selector: (x: T) => number) {\n  let uniqueValueCount = 0,\n    lastSeenValue;\n  for (let i = 0; i < x.length; i++) {\n    const value = selector(x[i]);\n    if (i === 0 || value !== lastSeenValue) {\n      lastSeenValue = value;\n      uniqueValueCount++;\n    }\n  }\n  return uniqueValueCount;\n}\n","import { makeMatrix } from \"./make-matrix\";\nimport { numericSort } from \"./numeric-sort\";\nimport { uniqueCountSorted } from \"./unique-count-sorted\";\n\n/**\n * Generates incrementally computed values based on the sums and sums of\n * squares for the data array\n *\n * @private\n * @param {number} j\n * @param {number} i\n * @param {Array<number>} sums\n * @param {Array<number>} sumsOfSquares\n * @return {number}\n * @example\n * ssq(0, 1, [-1, 0, 2], [1, 1, 5]);\n */\nfunction ssq(j: number, i: number, sums: number[], sumsOfSquares: number[]) {\n  let sji; // s(j, i)\n  if (j > 0) {\n    const muji = (sums[i] - sums[j - 1]) / (i - j + 1); // mu(j, i)\n    sji = sumsOfSquares[i] - sumsOfSquares[j - 1] - (i - j + 1) * muji * muji;\n  } else {\n    sji = sumsOfSquares[i] - (sums[i] * sums[i]) / (i + 1);\n  }\n  if (sji < 0) {\n    return 0;\n  }\n  return sji;\n}\n\n/**\n * Function that recursively divides and conquers computations\n * for cluster j\n *\n * @private\n * @param {number} iMin Minimum index in cluster to be computed\n * @param {number} iMax Maximum index in cluster to be computed\n * @param {number} cluster Index of the cluster currently being computed\n * @param {Array<Array<number>>} matrix\n * @param {Array<Array<number>>} backtrackMatrix\n * @param {Array<number>} sums\n * @param {Array<number>} sumsOfSquares\n */\nfunction fillMatrixColumn(\n  iMin: number,\n  iMax: number,\n  cluster: number,\n  matrix: number[][],\n  backtrackMatrix: number[][],\n  sums: number[],\n  sumsOfSquares: number[]\n) {\n  if (iMin > iMax) {\n    return;\n  }\n\n  // Start at midpoint between iMin and iMax\n  const i = Math.floor((iMin + iMax) / 2);\n\n  matrix[cluster][i] = matrix[cluster - 1][i - 1];\n  backtrackMatrix[cluster][i] = i;\n\n  let jlow = cluster; // the lower end for j\n\n  if (iMin > cluster) {\n    jlow = Math.max(jlow, backtrackMatrix[cluster][iMin - 1] || 0);\n  }\n  jlow = Math.max(jlow, backtrackMatrix[cluster - 1][i] || 0);\n\n  let jhigh = i - 1; // the upper end for j\n  if (iMax < matrix[0].length - 1) {\n    jhigh = Math.min(jhigh, backtrackMatrix[cluster][iMax + 1] || 0);\n  }\n\n  let sji;\n  let sjlowi;\n  let ssqjlow;\n  let ssqj;\n  for (let j = jhigh; j >= jlow; --j) {\n    sji = ssq(j, i, sums, sumsOfSquares);\n\n    if (sji + matrix[cluster - 1][jlow - 1] >= matrix[cluster][i]) {\n      break;\n    }\n\n    // Examine the lower bound of the cluster border\n    sjlowi = ssq(jlow, i, sums, sumsOfSquares);\n\n    ssqjlow = sjlowi + matrix[cluster - 1][jlow - 1];\n\n    if (ssqjlow < matrix[cluster][i]) {\n      // Shrink the lower bound\n      matrix[cluster][i] = ssqjlow;\n      backtrackMatrix[cluster][i] = jlow;\n    }\n    jlow++;\n\n    ssqj = sji + matrix[cluster - 1][j - 1];\n    if (ssqj < matrix[cluster][i]) {\n      matrix[cluster][i] = ssqj;\n      backtrackMatrix[cluster][i] = j;\n    }\n  }\n\n  fillMatrixColumn(iMin, i - 1, cluster, matrix, backtrackMatrix, sums, sumsOfSquares);\n  fillMatrixColumn(i + 1, iMax, cluster, matrix, backtrackMatrix, sums, sumsOfSquares);\n}\n\n/**\n * Initializes the main matrices used in Ckmeans and kicks\n * off the divide and conquer cluster computation strategy\n *\n * @private\n * @param {Array<number>} data sorted array of values\n * @param {Array<Array<number>>} matrix\n * @param {Array<Array<number>>} backtrackMatrix\n */\nfunction fillMatrices<T>(data: T[], matrix: number[][], backtrackMatrix: number[][], selector: (x: T) => number) {\n  const nValues = matrix[0].length;\n\n  // Shift values by the median to improve numeric stability\n  const shift = selector(data[Math.floor(nValues / 2)]);\n\n  // Cumulative sum and cumulative sum of squares for all values in data array\n  const sums: number[] = [];\n  const sumsOfSquares: number[] = [];\n\n  // Initialize first column in matrix & backtrackMatrix\n  for (let i = 0, shiftedValue; i < nValues; ++i) {\n    shiftedValue = selector(data[i]) - shift;\n    if (i === 0) {\n      sums.push(shiftedValue);\n      sumsOfSquares.push(shiftedValue * shiftedValue);\n    } else {\n      sums.push(sums[i - 1] + shiftedValue);\n      sumsOfSquares.push(sumsOfSquares[i - 1] + shiftedValue * shiftedValue);\n    }\n\n    // Initialize for cluster = 0\n    matrix[0][i] = ssq(0, i, sums, sumsOfSquares);\n    backtrackMatrix[0][i] = 0;\n  }\n\n  // Initialize the rest of the columns\n  let iMin;\n  for (let cluster = 1; cluster < matrix.length; ++cluster) {\n    if (cluster < matrix.length - 1) {\n      iMin = cluster;\n    } else {\n      // No need to compute matrix[K-1][0] ... matrix[K-1][N-2]\n      iMin = nValues - 1;\n    }\n\n    fillMatrixColumn(iMin, nValues - 1, cluster, matrix, backtrackMatrix, sums, sumsOfSquares);\n  }\n}\n\n/**\n * Ckmeans clustering is an improvement on heuristic-based clustering\n * approaches like Jenks. The algorithm was developed in\n * [Haizhou Wang and Mingzhou Song](http://journal.r-project.org/archive/2011-2/RJournal_2011-2_Wang+Song.pdf)\n * as a [dynamic programming](https://en.wikipedia.org/wiki/Dynamic_programming) approach\n * to the problem of clustering numeric data into groups with the least\n * within-group sum-of-squared-deviations.\n *\n * Minimizing the difference within groups - what Wang & Song refer to as\n * `withinss`, or within sum-of-squares, means that groups are optimally\n * homogenous within and the data is split into representative groups.\n * This is very useful for visualization, where you may want to represent\n * a continuous variable in discrete color or style groups. This function\n * can provide groups that emphasize differences between data.\n *\n * Being a dynamic approach, this algorithm is based on two matrices that\n * store incrementally-computed values for squared deviations and backtracking\n * indexes.\n *\n * This implementation is based on Ckmeans 3.4.6, which introduced a new divide\n * and conquer approach that improved runtime from O(kn^2) to O(kn log(n)).\n *\n * Unlike the [original implementation](https://cran.r-project.org/web/packages/Ckmeans.1d.dp/index.html),\n * this implementation does not include any code to automatically determine\n * the optimal number of clusters: this information needs to be explicitly\n * provided.\n *\n * ### References\n * _Ckmeans.1d.dp: Optimal k-means Clustering in One Dimension by Dynamic\n * Programming_ Haizhou Wang and Mingzhou Song ISSN 2073-4859\n *\n * from The R Journal Vol. 3/2, December 2011\n * @param {Array<number>} data input data, as an array of number values\n * @param {number} nClusters number of desired classes. This cannot be\n * greater than the number of values in the data array.\n * @returns {Array<Array<number>>} clustered input\n * @throws {Error} if the number of requested clusters is higher than the size of the data\n * @example\n * ckmeans([-1, 2, -1, 2, 4, 5, 6, -1, 2, -1], 3);\n * // The input, clustered into groups of similar numbers.\n * //= [[-1, -1, -1, -1], [2, 2, 2], [4, 5, 6]]);\n */\nexport function ckmeans<T>(data: T[], nClusters: number, selector: (x: T) => number) {\n  if (nClusters === 0) {\n    return [];\n  }\n  if (nClusters > data.length) {\n    throw new Error(\"cannot generate more classes than there are data values\");\n  }\n\n  const sorted = numericSort(data, selector);\n  // we'll use this as the maximum number of clusters\n  const uniqueCount = uniqueCountSorted(sorted, selector);\n\n  // if all of the input values are identical, there's one cluster\n  // with all of the input in it.\n  if (uniqueCount === 1) {\n    return [sorted];\n  }\n\n  // named 'S' originally\n  const matrix = makeMatrix(nClusters, sorted.length);\n  // named 'J' originally\n  const backtrackMatrix = makeMatrix(nClusters, sorted.length);\n\n  // This is a dynamic programming way to solve the problem of minimizing\n  // within-cluster sum of squares. It's similar to linear regression\n  // in this way, and this calculation incrementally computes the\n  // sum of squares that are later read.\n  fillMatrices(sorted, matrix, backtrackMatrix, selector);\n\n  // The real work of Ckmeans clustering happens in the matrix generation:\n  // the generated matrices encode all possible clustering combinations, and\n  // once they're generated we can solve for the best clustering groups\n  // very quickly.\n  const clusters = [];\n  let clusterRight = backtrackMatrix[0].length - 1;\n\n  // Backtrack the clusters from the dynamic programming matrix. This\n  // starts at the bottom-right corner of the matrix (if the top-left is 0, 0),\n  // and moves the cluster target with the loop.\n  for (let cluster = backtrackMatrix.length - 1; cluster >= 0; cluster--) {\n    const clusterLeft = backtrackMatrix[cluster][clusterRight];\n\n    // fill the cluster from the sorted input by taking a slice of the\n    // array. the backtrack matrix makes this easy - it stores the\n    // indexes where the cluster should start and end.\n    clusters[cluster] = sorted.slice(clusterLeft, clusterRight + 1);\n\n    if (cluster > 0) {\n      clusterRight = clusterLeft - 1;\n    }\n  }\n\n  return clusters;\n}\n","const areSetsEqual = <T>(a: Set<T>, b: Set<T>) => [...a].every((value) => b.has(value)) && [...b].every((value) => a.has(value));\n\nexport const collapseClusters = <T>(data: T[][], selector: (data: T) => number) => {\n  const sets = data.map((x) => new Set(x.map((y) => selector(y))));\n  const result: T[][] = [];\n  for (let i = 0; i < sets.length; i++) {\n    const curr = data[i].slice();\n    for (let j = i + 1; j < sets.length; j++) {\n      if (areSetsEqual(sets[i], sets[j])) {\n        curr.push(...data[j]);\n        sets.splice(j, 1);\n        data.splice(j, 1);\n      }\n    }\n    result.push(curr);\n  }\n  return result;\n};\n","import { Cluster } from \"shared/hooks/use-clusters\";\n\nexport const scaleCluster = (cluster: Cluster | undefined, factor: number) => {\n  if (!cluster) {\n    return undefined;\n  }\n  return { ...cluster, min: cluster.min * factor, max: cluster.max * factor, median: cluster.median * factor };\n};\n\nexport const scaleClusters = (clusters: Cluster[] | undefined, factor: number): Cluster[] | undefined => {\n  return clusters?.filter((x) => x).map((x) => scaleCluster(x, factor)!);\n};\n\nexport const findMostMostLikely = (cluster: Cluster[]) => {\n  if (cluster.length === 0) {\n    return;\n  }\n  const mostLikely = cluster.reduce((acc, curr) => {\n    return curr.probability > acc.probability ? curr : acc;\n  });\n  return mostLikely;\n};\n\nexport const clusterTitle = (index: number, length: number) => {\n  if (length === 1) {\n    return \"Actual\";\n  } else if (length == 2) {\n    return [\"Low\", \"High\"][index];\n  } else {\n    return [\"Low\", \"Med\", \"High\"][index];\n  }\n};\n\nexport const getClusterCount = <T>(values: T[], selector: (x: T) => number) => {\n  const uniqeValues = new Set(values.map((x) => selector(x))).size;\n\n  if (uniqeValues < 3) {\n    return uniqeValues;\n  } else if (uniqeValues === 4) {\n    return 2;\n  }\n  return 3;\n};\n\nexport const SumClusters = (clusters: Cluster[][]) => {\n  if (clusters.length == 0) {\n    return [];\n  }\n\n  const numClusters = clusters.reduce((acc, curr) => Math.max(acc, curr.length), 0);\n  const expandedClusters = clusters\n    .filter((x) => x.length > 0)\n    .map((cluster) => {\n      if (cluster.length === 1) {\n        return new Array(numClusters).fill(cluster[0]) as Cluster[];\n      }\n      if (cluster.length === 2 && numClusters === 3) {\n        const min = cluster[0];\n        const max = cluster[1];\n        return [\n          min,\n          {\n            min: (min.min + max.min) / 2,\n            max: (min.max + max.max) / 2,\n            median: (min.median + max.median) / 2,\n            probability: (min.probability + max.probability) / 2,\n            title: \"Med\",\n          },\n          max,\n        ].map((x, _i, arr) => {\n          const probability = x.probability / arr.reduce((acc, curr) => acc + curr.probability, 0);\n          return { ...x, probability };\n        }) as Cluster[];\n      }\n      return cluster;\n    });\n\n  return expandedClusters\n    .reduce((acc, curr) => {\n      return curr.map((x, i) => ({\n        min: x.min + acc[i].min,\n        max: x.max + acc[i].max,\n        median: x.median + acc[i].median,\n        probability: x.probability + acc[i].probability,\n        title: x.title,\n      }));\n    })\n    .map((x, _i, arr) => {\n      const probability = x.probability / arr.reduce((acc, curr) => acc + curr.probability, 0);\n      return { ...x, probability };\n    })\n    .map((x, i, arr) => {\n      return { ...x, title: clusterTitle(i, arr.length) };\n    });\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { Scenario } from \"shared/models/scenario\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\nimport { ckmeans } from \"shared/utility/ckmeans\";\nimport { clusterTitle, getClusterCount } from \"shared/utility/cluster-helpers\";\nimport { max, median, min, sumSimple } from \"simple-statistics\";\n\nexport interface Cluster {\n  min: number;\n  max: number;\n  median: number;\n  probability: number;\n  title: string;\n}\n\nconst clusters = <T extends Scenario>(values: T[] | undefined, selector: (x: T) => number): Cluster[] => {\n  if (!values || values.length === 0) {\n    return [];\n  }\n\n  const totalWeight = sumSimple(values.map((x) => x.weight));\n  const clusterCount = getClusterCount(values, selector);\n  const clusters = ckmeans(values, clusterCount, selector);\n\n  const result = clusters.map((x, i, arr) => {\n    return {\n      min: min(x.map((x) => selector(x))),\n      max: max(x.map((x) => selector(x))),\n      median: median(x.map((x) => selector(x))),\n      probability: sumSimple(x.map((x) => x.weight)) / totalWeight,\n      title: clusterTitle(i, arr.length),\n    };\n  });\n\n  return result;\n};\n\nexport const useClusters = (year: number) => {\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios[year]);\n\n  if (scenarios?.length === 0) {\n    return {\n      totalPay: [],\n      meritBonus: [],\n      retirementBonus: [],\n      companyBonus: [],\n      pay: [],\n      meritIncrease: [],\n      scenarios,\n      taxablePay: [],\n    };\n  }\n\n  return {\n    totalPay: clusters(scenarios, (x) => x.totalPay),\n    meritBonus: clusters(scenarios, (x) => x.meritBonus),\n    retirementBonus: clusters(scenarios, (x) => x.retirementBonus),\n    companyBonus: clusters(scenarios, (x) => x.companyBonus),\n    pay: clusters(scenarios, (x) => x.pay.at(-1)?.value ?? 0),\n    meritIncrease: clusters(scenarios, (x) => x.meritIncreasePct + x.equityIncreasePct),\n    taxablePay: clusters(scenarios, (x) => x.taxablePay),\n    scenarios,\n  };\n};\n\nexport const useTotalPayClusters = () => {\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios);\n  const allScenarios = Object.entries(scenarios);\n  if (allScenarios.length === 0) {\n    return [];\n  }\n\n  return allScenarios.map(([year, scenarios]) => [year, clusters(scenarios, (x) => x.totalPay)]) as [string, Cluster[]][];\n};\n","import { DateTime } from \"luxon\";\nimport { AccountData } from \"shared/models/store/current\";\n\nexport function findSameYear(year: number, data: AccountData[]): AccountData | undefined;\nexport function findSameYear(date: DateTime, data: AccountData[]): AccountData | undefined;\nexport function findSameYear(date: DateTime | number, data: AccountData[]): AccountData | undefined {\n  const year = typeof date === \"number\" ? date : date.year;\n  return data.find((x) => {\n    return DateTime.fromISO(x.date).year === year;\n  });\n}\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { AccountData } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\nimport { findSameYear } from \"shared/utility/find-same-year\";\n\nconst useRealDate = (year: number | undefined, data: AccountData[]) => {\n  if (!year) {\n    return undefined;\n  }\n\n  const meritBonus = findSameYear(year, data);\n  if (!meritBonus) {\n    return undefined;\n  }\n\n  return DateTime.fromISO(meritBonus.date);\n};\n\nexport const useDates = (year?: number) => {\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\n  const meritBonusDate = useRealDate(year, timeSeries.meritBonus);\n  const companyBonusDate = useRealDate(year, timeSeries.companyBonus);\n  const retirementBonusDate = useRealDate(year, timeSeries.retirementBonus);\n\n  return {\n    meritIncrease: DateTime.fromObject({ month: 4, day: 1, year }),\n    meritBonus: meritBonusDate ?? DateTime.fromObject({ month: 4, day: 15, year }),\n    companyBonus: companyBonusDate ?? DateTime.fromObject({ month: 6, day: 15, year }),\n    retirementBonus: retirementBonusDate ?? DateTime.fromObject({ month: 7, day: 15, year }),\n  };\n};\n\nexport const useDateRanges = (year: number) => {\n  return {\n    base: {\n      start: DateTime.fromObject({ month: 1, day: 1, year }),\n      end: DateTime.fromObject({ month: 12, day: 31, year }).endOf(\"day\"),\n    },\n    meritBonus: {\n      start: DateTime.fromObject({ month: 1, day: 1, year: year - 1 }),\n      end: DateTime.fromObject({ month: 12, day: 31, year: year - 1 }).endOf(\"day\"),\n    },\n    companyBonus: {\n      start: DateTime.fromObject({ day: 1, month: 4, year: year - 1 }),\n      end: DateTime.fromObject({ day: 31, month: 3, year }).endOf(\"day\"),\n    },\n    retirementBonus: {\n      start: DateTime.fromObject({ day: 1, month: 7, year: year - 1 }),\n      end: DateTime.fromObject({ day: 30, month: 6, year }).endOf(\"day\"),\n    },\n  };\n};\n","export interface PaymentPeriod {\n  start: string;\n  end: string;\n  payedOn: string;\n  value: number;\n  cumulative: number;\n  type: PaymentType;\n}\n\nexport const PaymentTypes = {\n  regular: \"regular\",\n  bonus: \"taxable bonus\",\n  nonTaxableBonus: \"non-taxable bonus\",\n} as const;\n\nexport type PaymentType = (typeof PaymentTypes)[keyof typeof PaymentTypes];\n","export const MAX_NUM_ENTRIES = 10;\n","import InsertChartIcon from \"@mui/icons-material/InsertChart\";\nimport { Tooltip } from \"@mui/material\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { AgCartesianChartOptions, AgColorType } from \"ag-charts-community\";\nimport { AgCharts } from \"ag-charts-react\";\nimport { DateTime } from \"luxon\";\nimport { TimeSeries } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\nimport { ckmeans, collapseClusters } from \"shared/utility/ckmeans\";\nimport { formatCash } from \"shared/utility/format-cash\";\nimport { formatPercent } from \"shared/utility/format-percent\";\nimport { sortByDate } from \"shared/utility/sort-by-date\";\n\nconst getColor = (probability?: number) => {\n  if (!probability) {\n    return \"inherit\";\n  }\n  if (probability >= 0.5) {\n    return \"green\";\n  }\n  if (probability >= 0.25) {\n    return \"orange\";\n  }\n  return \"rgb(244, 67, 54)\";\n};\n\nexport const SparkChart = (props: { accountName: TimeSeries; variant: \"cash\" | \"percent\" | \"number\" }) => {\n  const { accountName, variant } = props;\n  const account = useStore(store, (x) => x.projectedIncome.timeSeries[accountName]);\n  const data = account.map((x) => ({ ...x, date: DateTime.fromISO(x.date).toJSDate() }));\n  const selector = (x: { date: Date; value: number }) => x.value;\n  const maxClusters = Math.min(data.length, 3);\n  const ckData = collapseClusters(ckmeans(data, maxClusters, selector), selector)\n    .map((x) => {\n      return x.map((y, i, subArr) => ({\n        ...y,\n        cluster: subArr.length / data.length,\n        color: getColor(subArr.length / data.length) as AgColorType,\n      }));\n    })\n    .flat()\n    .sort(sortByDate((x) => DateTime.fromJSDate(x.date), \"asc\"));\n\n  const options: AgCartesianChartOptions = {\n    data: ckData,\n    theme: \"ag-default-dark\",\n    series: [\n      {\n        type: \"line\",\n        yKey: \"value\",\n        xKey: \"date\",\n        stroke: \"white\",\n        marker: {\n          itemStyler: (params) => {\n            const fill = variant === \"percent\" ? \"#FFF\" : params.datum.color;\n            return {\n              fill,\n              size: 10,\n            };\n          },\n        },\n      },\n    ],\n    axes: [\n      {\n        type: \"number\",\n        position: \"left\",\n\n        nice: true,\n        interval: {\n          maxSpacing: 45,\n        },\n        label: {\n          formatter: (params) => {\n            return variant === \"percent\" ? formatPercent(params.value) : formatCash(params.value);\n          },\n        },\n      },\n      {\n        nice: false,\n        type: \"time\",\n        position: \"bottom\",\n        label: {\n          format: \"%Y\",\n        },\n      },\n    ],\n  };\n\n  const isDisabled = account.length === 0;\n\n  return (\n    <Tooltip\n      disableHoverListener={isDisabled}\n      disableFocusListener={isDisabled}\n      disableTouchListener={isDisabled}\n      slotProps={{\n        tooltip: {\n          sx: {\n            maxWidth: \"unset\",\n          },\n        },\n      }}\n      title={<AgCharts options={options} css={{ width: 750, height: 375 }} />}\n    >\n      <InsertChartIcon color={isDisabled ? \"disabled\" : undefined} />\n    </Tooltip>\n  );\n};\n","import { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { AccountData, TimeSeries } from \"shared/models/store/current\";\nimport { store } from \".\";\n\nexport const updateProjectedIncomeDate = (timeSeries: TimeSeries, data: AccountData, date: DateTime) => {\n  store.setState((prev) => {\n    const next = create(prev, (next) => {\n      const idx = prev.projectedIncome.timeSeries[timeSeries].findIndex((x) => x === data);\n      if (idx < 0) {\n        throw new Error(\"failed to find data\");\n      }\n\n      next.projectedIncome.timeSeries[timeSeries][idx].date = date.toISO()!;\n    });\n    return next;\n  });\n};\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\nimport UpdateIcon from \"@mui/icons-material/Update\";\nimport { Button, Tooltip } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { ColDef, ICellRendererParams } from \"ag-grid-community\";\nimport { CustomCellRendererProps } from \"ag-grid-react\";\nimport { DateTime } from \"luxon\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { Percent } from \"shared/components/formatters/percent\";\nimport { AccountData, TimeSeries } from \"shared/models/store/current\";\nimport { updateProjectedIncome } from \"shared/store\";\nimport { removeProjectedIncome } from \"shared/store/remove-projected-income\";\nimport { updateProjectedIncomeDate } from \"shared/store/update-projected-income-date\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const createAccountColumnConfig = (\n  accountName: TimeSeries,\n  variant: \"number\" | \"cash\" | \"percent\",\n  dateVariant: \"date\" | \"year\"\n): ColDef<AccountData>[] => [\n  {\n    headerName: dateVariant === \"date\" ? \"Date\" : \"Year\",\n    colId: \"date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(dateVariant === \"date\" ? shortDate : \"yyyy\"),\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\n    tooltipValueGetter: (x) => (dateVariant === \"year\" ? x.value?.toFormat(shortDate) : undefined),\n    cellRenderer: (x: ICellRendererParams<unknown, DateTime>) => {\n      return (\n        <Stack direction={\"row\"} alignItems={\"center\"}>\n          {x.valueFormatted}&nbsp;\n          {x.value && x.value > DateTime.local() && (\n            <Tooltip title=\"Future Event\">\n              <UpdateIcon htmlColor=\"orange\" />\n            </Tooltip>\n          )}\n        </Stack>\n      );\n    },\n    cellEditor: dateVariant === \"date\" ? \"agDateCellEditor\" : \"agNumberCellEditor\",\n    editable: true,\n    valueSetter: (x) => {\n      const date = dateVariant === \"date\" ? DateTime.fromJSDate(x.newValue) : DateTime.fromISO(x.data.date).set({ year: x.newValue });\n\n      if (date.isValid) {\n        updateProjectedIncomeDate(accountName, x.data, date);\n      }\n      return date.isValid;\n    },\n  },\n  {\n    headerName: \"Value\",\n    valueGetter: (x) => x.data?.value,\n    cellRenderer: (x: CustomCellRendererProps<AccountData>) =>\n      variant === \"cash\" ? <Cash compact={false} value={x.value} /> : <Percent value={x.value} />,\n    type: \"numericColumn\",\n    editable: true,\n    cellEditor: \"agNumberCellEditor\",\n    valueSetter: (x) => {\n      updateProjectedIncome(accountName, x.data, +x.newValue);\n      return true;\n    },\n  },\n  {\n    cellStyle: () => ({ display: \"inline-flex\", padding: \"0px\" }),\n    sortable: false,\n    headerName: \"\",\n    width: 80,\n    colId: \"actions\",\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\n      return (\n        <Button\n          onClick={() => {\n            props.data && removeProjectedIncome(accountName, props.data);\n          }}\n          color=\"error\"\n          fullWidth\n        >\n          <DeleteForeverIcon />\n        </Button>\n      );\n    },\n  },\n];\n","import { Box, Button, InputAdornment, Paper, Stack, TextField, Tooltip, Typography } from \"@mui/material\";\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useState } from \"react\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { MAX_NUM_ENTRIES } from \"shared/constants\";\nimport { TimeSeries } from \"shared/models/store/current\";\nimport { addProjectedIncome, store } from \"shared/store\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { SparkChart } from \"../spark-chart\";\nimport { createAccountColumnConfig } from \"./column-config\";\n\nconst disabledStyle = {\n  color: \"grey\",\n};\n\nconst DataEntry = (props: {\n  timeSeries: TimeSeries;\n  defaultDate: DateTime;\n  variant?: \"number\" | \"cash\" | \"percent\";\n  dateVariant?: \"date\" | \"year\";\n}) => {\n  const { timeSeries, defaultDate, variant = \"number\", dateVariant = \"date\" } = props;\n  const account = useStore(store, (state) => state.projectedIncome.timeSeries[timeSeries]);\n\n  const [date, setDate] = useState(defaultDate);\n  const [amount, setAmount] = useState<number | null>(null);\n\n  const hasSameDate = !!account?.find((x) => date.hasSame(DateTime.fromISO(x.date), \"day\"));\n\n  const onAddEntry = () => {\n    if (amount != null) {\n      addProjectedIncome(date, timeSeries, variant === \"percent\" ? amount / 100 : amount);\n      setAmount(null);\n    }\n  };\n\n  const accountColumnConfig = createAccountColumnConfig(timeSeries, variant, dateVariant);\n\n  return (\n    <Box display={\"flex\"} flexDirection={\"column\"} height=\"100%\">\n      <Stack spacing={2} flex=\"0 1 auto\">\n        <DatePicker\n          format={dateVariant === \"year\" ? \"yyyy\" : shortDate}\n          views={dateVariant === \"year\" ? [\"year\"] : undefined}\n          sx={{ color: \"white\" }}\n          label={dateVariant === \"date\" ? \"Date\" : \"Year\"}\n          value={date}\n          onChange={(value) => {\n            console.log(value);\n            value && setDate(value);\n          }}\n        />\n        <TextField\n          label=\"Amount\"\n          value={amount ?? \"\"}\n          placeholder=\"0\"\n          type=\"number\"\n          onChange={(event) => (event.target.value === \"\" ? setAmount(null) : setAmount(+event.target.value))}\n          slotProps={{\n            input: {\n              startAdornment: variant !== \"number\" && <InputAdornment position=\"start\">{variant === \"cash\" ? \"$\" : \"%\"}</InputAdornment>,\n            },\n          }}\n        />\n        <Button disabled={amount === null || !date || hasSameDate} onClick={onAddEntry}>\n          Add Entry\n        </Button>\n      </Stack>\n      <Box sx={{ paddingTop: 2, flex: \"1 1 auto\" }}>\n        <AgGrid\n          reactiveCustomComponents\n          rowData={account ?? []}\n          columnDefs={accountColumnConfig}\n          id={account + \"-history\"}\n          autoSizeStrategy={{\n            type: \"fitGridWidth\",\n          }}\n          stopEditingWhenCellsLoseFocus\n          getRowStyle={(x) => {\n            return x.rowIndex >= MAX_NUM_ENTRIES ? disabledStyle : undefined;\n          }}\n        />\n      </Box>\n    </Box>\n  );\n};\n\ninterface LayoutProps {\n  title: string;\n  accountName: TimeSeries;\n  defaultDate: DateTime;\n  variant: \"percent\" | \"number\" | \"cash\";\n  dateVariant?: \"date\" | \"year\";\n}\n\nexport const Layout = (props: LayoutProps) => {\n  const { title, accountName, defaultDate, variant, dateVariant = \"date\" } = props;\n  return (\n    <Paper sx={{ padding: 2, height: \"100%\", width: 450, flexShrink: 0 }}>\n      <Box display=\"flex\" flexDirection=\"column\" height=\"100%\">\n        <Box flex=\"0 1 auto\" marginBottom={4} display={\"flex\"} alignItems={\"center\"} justifyContent={\"space-between\"}>\n          <Typography variant=\"h5\">\n            {title}{\" \"}\n            {variant === \"cash\" && (\n              <Tooltip\n                title={\n                  <>\n                    <span>Cash values are used in lieu of Percent values.</span>\n                    <br />\n                    <span>Cash values are considered actual payment values.</span>\n                  </>\n                }\n              >\n                <span>($)</span>\n              </Tooltip>\n            )}\n            {variant === \"percent\" && (\n              <Tooltip title=\"Percentage values are used for predictions.\">\n                <span>(%)</span>\n              </Tooltip>\n            )}\n          </Typography>\n          <SparkChart accountName={accountName} variant={variant} />\n        </Box>\n        <Box flex=\"1 1 auto\">\n          <DataEntry variant={variant} timeSeries={accountName} defaultDate={defaultDate} dateVariant={dateVariant} />\n        </Box>\n      </Box>\n    </Paper>\n  );\n};\n","import InsertChartIcon from \"@mui/icons-material/InsertChart\";\nimport { Tooltip } from \"@mui/material\";\nimport { AgCartesianChartOptions, AgLineSeriesOptions } from \"ag-charts-community\";\nimport { AgCharts } from \"ag-charts-react\";\nimport { DateTime } from \"luxon\";\nimport { useTotalPayClusters } from \"shared/hooks/use-clusters\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\nimport { formatPercent } from \"shared/utility/format-percent\";\n\nconst getColor = (probability?: number) => {\n  if (!probability) {\n    return \"inherit\";\n  }\n  if (probability >= 0.5) {\n    return \"green\";\n  }\n  if (probability >= 0.25) {\n    return \"orange\";\n  }\n  return \"rgb(244, 67, 54)\";\n};\n\nexport const IncomeChart = () => {\n  const clusters = useTotalPayClusters();\n  const history = clusters\n    .filter(([year]) => +year <= getLocalDateTime().year)\n    .map(([year, x]) => ({\n      totalPay: x[0]?.median ?? 0,\n      date: DateTime.fromObject({ year: +year, month: 1, day: 1 }).toJSDate(),\n    }));\n\n  const future = clusters\n    .filter(([year]) => +year >= getLocalDateTime().year)\n    .map(([year, x]) => {\n      const data = Object.fromEntries(\n        x?.flatMap((x) => {\n          const title = x.title.toLocaleLowerCase();\n          return [\n            [title, x.median],\n            [title + \"Probability\", x.probability],\n          ];\n        })\n      );\n      return {\n        ...data,\n        date: DateTime.fromObject({ year: +year, month: 1, day: 1 }).toJSDate(),\n      };\n    });\n\n  const isDisabled = future.length + history.length === 0;\n\n  const series = [\n    {\n      type: \"line\",\n      xKey: \"date\",\n      yKey: \"totalPay\",\n      data: history,\n      yName: \"Income\",\n\n      tooltip: {\n        renderer: ({ datum, yKey, xKey }) => ({\n          content: `${DateTime.fromJSDate(datum[xKey]).year} ${formatCashShort(datum[yKey])}`,\n        }),\n      },\n    },\n    {\n      type: \"line\",\n      xKey: \"date\",\n      yKey: \"low\",\n      data: future,\n      yName: \"Low\",\n      stroke: \"grey\",\n      marker: {\n        itemStyler: (params) => {\n          const color = getColor(params.datum.lowProbability);\n          return {\n            fill: color,\n            stroke: color,\n          };\n        },\n      },\n      tooltip: {\n        renderer: ({ datum, yKey, xKey }) => ({\n          content: `${DateTime.fromJSDate(datum[xKey]).year} ${formatCashShort(datum[yKey])} ${formatPercent(datum.lowProbability)}`,\n        }),\n      },\n    },\n    {\n      marker: {\n        itemStyler: (params) => {\n          const color = getColor(params.datum.medProbability);\n          return {\n            fill: color,\n          };\n        },\n      },\n      type: \"line\",\n      stroke: \"grey\",\n      xKey: \"date\",\n      yKey: \"med\",\n      data: future,\n      yName: \"Medium\",\n      tooltip: {\n        renderer: ({ datum, yKey, xKey }) => ({\n          content: `${DateTime.fromJSDate(datum[xKey]).year} ${formatCashShort(datum[yKey])} ${formatPercent(datum.medProbability)}`,\n        }),\n      },\n    },\n    {\n      stroke: \"grey\",\n      marker: {\n        itemStyler: (params) => {\n          const color = getColor(params.datum.highProbability);\n          return {\n            fill: color,\n            stroke: color,\n          };\n        },\n      },\n      type: \"line\",\n      xKey: \"date\",\n      yKey: \"high\",\n      data: future,\n      yName: \"High\",\n      tooltip: {\n        renderer: ({ datum, yKey, xKey }) => ({\n          content: `${DateTime.fromJSDate(datum[xKey]).year} ${formatCashShort(datum[yKey])} ${formatPercent(datum.highProbability)}`,\n        }),\n      },\n    },\n  ] as AgLineSeriesOptions[];\n\n  const options: AgCartesianChartOptions = {\n    theme: \"ag-default-dark\",\n    title: {\n      text: `Income`,\n    },\n\n    axes: [\n      {\n        type: \"time\",\n        position: \"bottom\",\n        label: {\n          format: \"%Y\",\n        },\n        nice: false,\n      },\n      {\n        type: \"number\",\n        position: \"left\",\n        nice: true,\n        interval: {\n          maxSpacing: 45,\n        },\n        label: {\n          formatter: (params) => {\n            return formatCash(params.value);\n          },\n        },\n      },\n    ],\n    series,\n  };\n\n  return (\n    <Tooltip\n      disableHoverListener={isDisabled}\n      disableFocusListener={isDisabled}\n      disableTouchListener={isDisabled}\n      slotProps={{\n        tooltip: {\n          sx: {\n            maxWidth: \"unset\",\n          },\n        },\n      }}\n      title={<AgCharts options={options} css={{ height: 375, width: 750 }} />}\n    >\n      <InsertChartIcon color={isDisabled ? \"disabled\" : undefined} />\n    </Tooltip>\n  );\n};\n","import ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\nimport { Table, TableBody, TableCell, TableRow } from \"@mui/material\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { IncomePerPeriod } from \"shared/models/IncomePerPeriod\";\nimport { shortDate } from \"shared/utility/format-date\";\n\ninterface IncomePerPeriodTooltipProps {\n  incomePerPeriod: IncomePerPeriod[];\n}\n\nexport const IncomePerPeriodTooltip = (props: IncomePerPeriodTooltipProps) => {\n  const { incomePerPeriod } = props;\n  return (\n    <Table sx={{ width: \"max-content\" }}>\n      <TableBody>\n        {incomePerPeriod.map(({ start, end, value, perPayday, count }, index) => {\n          return (\n            <TableRow key={index}>\n              <TableCell>\n                <Cash value={value} compact={false} />\n              </TableCell>\n              <TableCell>{start.toFormat(shortDate)}</TableCell>\n              <TableCell>\n                <ArrowForwardIcon />\n              </TableCell>\n              <TableCell>{end.toFormat(shortDate)}</TableCell>\n              <TableCell>\n                <Cash value={perPayday} compact={false} /> x {count}\n              </TableCell>\n            </TableRow>\n          );\n        })}\n        <TableRow>\n          <TableCell colSpan={4}>Total:</TableCell>\n          <TableCell>\n            <Cash value={incomePerPeriod.reduce((acc, curr) => curr.value + acc, 0)} compact={false} />\n          </TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  );\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { store } from \"shared/store\";\nimport { findSameYear } from \"shared/utility/find-same-year\";\n\nexport const useHasMeritPairs = () => {\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\n\n  return (\n    timeSeries.meritIncreasePct.every((x) => {\n      return !!findSameYear(DateTime.fromISO(x.date).year, timeSeries.meritBonusPct);\n    }) &&\n    timeSeries.meritBonusPct.every((x) => {\n      return !!findSameYear(DateTime.fromISO(x.date).year, timeSeries.meritIncreasePct);\n    })\n  );\n};\n","import { Alert, CircularProgress, Tooltip } from \"@mui/material\";\nimport { Box, Stack } from \"@mui/system\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useState } from \"react\";\nimport { Card } from \"shared/components/card\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { ClusterValue, ClusterValues } from \"shared/components/formatters/cluster-value\";\nimport { CountDown } from \"shared/components/formatters/countdown\";\nimport { Value } from \"shared/components/formatters/value\";\nimport { useClusters } from \"shared/hooks/use-clusters\";\nimport { useDateRanges, useDates } from \"shared/hooks/use-dates\";\nimport { IncomePerPeriod } from \"shared/models/IncomePerPeriod\";\nimport { PaymentTypes } from \"shared/models/payment-periods\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { monthDay } from \"shared/utility/format-date\";\nimport { Layout } from \"./data-entry/data-entry\";\nimport { IncomeChart } from \"./income-chart\";\nimport { IncomePerPeriodTooltip } from \"./income-per-period\";\nimport { useHasMeritPairs } from \"./use-has-merit-pairs\";\n\nexport const ProjectedIncome = () => {\n  const [selectedYear, setSelectedYear] = useState(getLocalDateTime().year);\n\n  const hasMissingPairs = useHasMeritPairs();\n  const clusters = useClusters(selectedYear);\n  const dates = useDates(selectedYear);\n  const dateRanges = useDateRanges(selectedYear);\n\n  const basePay = clusters.pay.length === 1 ? clusters.scenarios?.at(0)?.basePay : undefined;\n  const aprToApr = clusters.pay.length === 1 ? clusters.scenarios?.at(0)?.aprToApr : undefined;\n  const payPeriods =\n    clusters.scenarios?.[0].payments\n      .filter((x) => x.type === PaymentTypes.regular)\n      .filter((x) => {\n        const payedOn = DateTime.fromISO(x.payedOn);\n        return payedOn >= dateRanges.base.start && payedOn <= dateRanges.base.end;\n      }) ?? [];\n\n  const paychecks =\n    clusters.pay.length === 1\n      ? payPeriods\n          .reduceRight(\n            (acc, curr) => {\n              if (acc[0]?.[0]?.value === curr.value) {\n                acc[0].unshift(curr);\n              } else {\n                acc.unshift([curr]);\n              }\n\n              return acc;\n            },\n            [] as (typeof payPeriods)[]\n          )\n          .reduce((acc, curr) => {\n            acc.push({\n              start: DateTime.fromISO(curr[0].payedOn),\n              end: DateTime.fromISO(curr[curr.length - 1].payedOn),\n              value: curr.reduce((acc, curr) => acc + curr.value, 0),\n              perPayday: curr[0].value,\n              count: curr.length,\n              type: curr[0].type,\n            });\n\n            return acc;\n          }, [] as IncomePerPeriod[])\n      : undefined;\n\n  const scenarios = useStore(scenarioStore);\n\n  return (\n    <Box display=\"flex\" flexDirection=\"row\" height=\"100%\" width={\"100%\"}>\n      <Box flex=\"0 1 auto\" maxWidth={500} height=\"100%\">\n        <Stack gap={2} direction={\"column\"} overflow={\"auto\"} height=\"100%\" paddingRight={1} minWidth={500}>\n          {!hasMissingPairs && <Alert severity=\"error\">Every Merit Increase must have a paired Merit Bonus percent</Alert>}\n          <Card\n            title={\n              <Box display=\"flex\" alignItems={\"center\"} gap={2} width={\"100%\"}>\n                <span>Income</span>\n                <CountDown dateTime={dates.companyBonus} variant=\"date\" dateFormat={monthDay} />\n                <IncomeChart />\n                <Box sx={{ display: \"flex\", marginLeft: \"auto\", alignItems: \"center\", flexWrap: \"wrap\" }}>\n                  {scenarios.loading && <CircularProgress style={{ width: 20, height: 20 }} />}\n                </Box>\n                <DatePicker\n                  sx={{ width: 90, marginRight: 2 }}\n                  label={\"year\"}\n                  views={[\"year\"]}\n                  minDate={getLocalDateTime().set({ year: scenarios.minYear })}\n                  maxDate={getLocalDateTime().set({ year: scenarios.maxYear })}\n                  defaultValue={getLocalDateTime()}\n                  slotProps={{\n                    textField: {\n                      variant: \"standard\",\n                      label: \"\",\n                    },\n                  }}\n                  onChange={(value) => {\n                    setSelectedYear(value?.year ?? getLocalDateTime().year);\n                  }}\n                />\n              </Box>\n            }\n          >\n            <ClusterValues clusters={clusters.totalPay} eventDate={dates.companyBonus} />\n          </Card>\n          <Card\n            title={\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\n                <span>Paycheck</span>\n                <CountDown dateTime={dates.meritIncrease} variant=\"date\" dateFormat={monthDay} />\n              </Box>\n            }\n          >\n            {!basePay && <ClusterValues clusters={clusters.pay} eventDate={dates.meritIncrease} compact={false} />}\n            {basePay && (\n              <>\n                <ClusterValue {...clusters.pay[0]} title={\"Paycheck\"} compact={false} />\n                <Tooltip\n                  placement=\"bottom\"\n                  componentsProps={{\n                    tooltip: {\n                      sx: {\n                        maxWidth: \"none\",\n                      },\n                    },\n                  }}\n                  title={paychecks && <IncomePerPeriodTooltip incomePerPeriod={paychecks} />}\n                >\n                  <div>\n                    <Value title={\"Base Pay\"}>\n                      <Cash disableTooltip value={basePay} />\n                    </Value>\n                  </div>\n                </Tooltip>\n                <Value title={\"APR to APR\"}>\n                  <Cash value={aprToApr} />\n                </Value>\n              </>\n            )}\n          </Card>\n          <Card\n            title={\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\n                <span>Merit Increase</span>\n                <CountDown dateTime={dates.meritIncrease} variant=\"date\" dateFormat={monthDay} />\n              </Box>\n            }\n          >\n            <ClusterValues clusters={clusters.meritIncrease} eventDate={dates.meritIncrease} />\n          </Card>\n\n          <Card\n            title={\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\n                <span>Merit Bonus</span>\n                <CountDown dateTime={dates.meritBonus} variant=\"date\" dateFormat={monthDay} />\n              </Box>\n            }\n          >\n            <ClusterValues clusters={clusters.meritBonus} eventDate={dates.meritBonus} />\n          </Card>\n          <Card\n            title={\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\n                <span>Company Bonus</span>\n                <CountDown dateTime={dates.companyBonus} variant=\"date\" dateFormat={monthDay} />\n              </Box>\n            }\n          >\n            <ClusterValues clusters={clusters.companyBonus} eventDate={dates.companyBonus} />\n          </Card>\n          <Card\n            title={\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\n                <span>Retirement Bonus</span>\n                <CountDown dateTime={dates.retirementBonus} variant=\"date\" dateFormat={monthDay} />\n              </Box>\n            }\n          >\n            <ClusterValues clusters={clusters.retirementBonus} eventDate={dates.retirementBonus} />\n          </Card>\n        </Stack>\n      </Box>\n      <Box flex=\"1 1 auto\" overflow={\"auto\"} paddingBottom={2} paddingLeft={1}>\n        <Box display={\"flex\"} height={\"100%\"} width={\"100%\"} gap={2}>\n          <Layout\n            dateVariant=\"year\"\n            accountName=\"paycheck\"\n            variant=\"cash\"\n            defaultDate={DateTime.fromObject({\n              day: 1,\n              month: 4,\n              year: selectedYear,\n            })}\n            title=\"Income Per Paycheck\"\n          />\n          <Layout\n            title=\"Merit Increase\"\n            accountName=\"meritIncreasePct\"\n            variant=\"percent\"\n            defaultDate={dates.meritIncrease}\n            dateVariant=\"year\"\n          />\n          <Layout title=\"Equity Increase\" accountName=\"equityPct\" variant=\"percent\" defaultDate={dates.meritIncrease} dateVariant=\"year\" />\n          <Layout title=\"Merit Bonus\" accountName=\"meritBonusPct\" variant=\"percent\" defaultDate={dates.meritBonus} dateVariant=\"year\" />\n          <Layout title=\"Merit Bonus\" accountName=\"meritBonus\" variant=\"cash\" defaultDate={dates.meritBonus} />\n          <Layout\n            title=\"Company Bonus Factor\"\n            accountName=\"companyBonusPct\"\n            defaultDate={dates.companyBonus}\n            variant=\"percent\"\n            dateVariant=\"year\"\n          />\n          <Layout title=\"Company Bonus\" accountName=\"companyBonus\" defaultDate={dates.companyBonus} variant=\"cash\" />\n          <Layout title=\"Retirement Bonus\" accountName=\"retirementBonus\" defaultDate={dates.retirementBonus} variant=\"cash\" />\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n","import { DateTime } from \"luxon\";\n\nexport const isFuture = (date: DateTime) => date.diffNow(\"milliseconds\").milliseconds > 0;\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { Mortgage } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { calcLoanBalance } from \"shared/utility/mortgage-calc\";\n\nexport const useFutureMortgageEquity = (year: number) => {\n  const accounts = useStore(store, (x) => x.wealth);\n  const mortgages = Object.values(accounts).filter((x) => x.type === \"mortgage\") as Mortgage[];\n\n  return mortgages\n    .map((x) => {\n      if (!x.loan) {\n        return 0;\n      }\n\n      const startDate =\n        getLocalDateTime() < DateTime.fromObject({ month: 1, day: 1, year })\n          ? DateTime.fromObject({ month: 1, day: 1, year })\n          : getLocalDateTime().endOf(\"month\");\n\n      return calcLoanBalance(startDate, x.loan) - calcLoanBalance(startDate.endOf(\"year\"), x.loan);\n    })\n    .reduce((acc, curr) => acc + curr, 0);\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { store } from \"shared/store\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\n\nexport const useFutureRetirementContributions = (year: number) => {\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios[year]);\n  const retirementContribution = useStore(store, (x) => x.projectedWealth.retirementContributionPaycheck);\n\n  return {\n    remaining: Math.min(scenarios?.at(0)?.remainingRegularPayments ?? 0, 26) * retirementContribution,\n    perPaycheck: retirementContribution,\n  };\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { useDateRanges } from \"shared/hooks/use-dates\";\nimport { store } from \"shared/store\";\n\nexport const useFutureSavings = (year: number) => {\n  const config = useStore(store, (x) => x.projectedWealth);\n  const dateRanges = useDateRanges(year);\n\n  return {\n    remaining: config.savingsPerMonth * Math.min(Math.max(0, dateRanges.base.end.diffNow(\"months\").months), 12),\n    perMonth: config.savingsPerMonth,\n  };\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { store } from \"shared/store\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\nimport { isFuture } from \"shared/utility/is-future\";\n\ninterface ThresholdTaxData {\n  total: number;\n  firstOccurrence: DateTime;\n  remaining: number;\n  perPaycheck: number;\n}\n\nexport const useFutureSocialSecurity = (year: number): ThresholdTax => {\n  const config = useStore(store, (x) => x.projectedWealth);\n  return useThresholdTax(year, config.socialSecurityLimit, config.socialSecurityTaxRate);\n};\n\nexport const useFutureMedicareTax = (year: number): ThresholdTax => {\n  const config = useStore(store, (x) => x.projectedWealth);\n  const taxes = useThresholdTax(year, config.medicareSupplementalTaxThreshold, -1 * config.medicareSupplementalTaxRate);\n\n  return {\n    min: taxes.max,\n    max: taxes.min,\n  };\n};\n\nexport type ThresholdTax = Partial<Record<\"min\" | \"max\", ThresholdTaxData>>;\n\nconst useThresholdTax = (year: number, threshold: number, taxRate: number): ThresholdTax => {\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios[year]);\n\n  return (\n    (scenarios ?? [])\n      .map((x) => {\n        const total = taxRate * Math.max(0, (x.payments.at(-1)?.cumulative ?? 0) - threshold);\n        const firstOccurrence = x.payments.find((x) => x.cumulative > threshold)?.payedOn;\n        const remaining = x.payments\n          .slice(x.currentPaymentIdx)\n          .filter((x) => x.cumulative >= threshold && isFuture(DateTime.fromISO(x.payedOn)))\n          .reduce((acc, curr) => {\n            return acc + Math.min(curr.value, curr.cumulative - threshold) * taxRate;\n          }, 0);\n        const perPaycheck = total && taxRate * (x.payments.at(-1)?.value ?? 0);\n\n        return {\n          total,\n          firstOccurrence: firstOccurrence ? DateTime.fromISO(firstOccurrence) : undefined,\n          remaining,\n          perPaycheck,\n        };\n      })\n      .filter((x) => x.firstOccurrence) as ThresholdTaxData[]\n  ).reduce(\n    (acc, curr, i) => {\n      if (i == 0) {\n        return { min: curr, max: curr };\n      } else {\n        if (curr.total < acc.min!.total) {\n          acc.min = curr;\n        }\n        if (curr.total > acc.max!.total) {\n          acc.max = curr;\n        }\n      }\n      return acc;\n    },\n    {} as Partial<Record<\"min\" | \"max\", ThresholdTaxData>>\n  );\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useDates } from \"shared/hooks/use-dates\";\nimport { Scenario } from \"shared/models/scenario\";\nimport { store } from \"shared/store\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\nimport { clusterTitle, getClusterCount } from \"shared/utility/cluster-helpers\";\nimport { isFuture } from \"shared/utility/is-future\";\nimport { ckmeans, median, sumSimple } from \"simple-statistics\";\nimport { useFutureMortgageEquity } from \"./use-future-mortgage-equity\";\nimport { useFutureRetirementContributions } from \"./use-future-retirement-contributions\";\nimport { useFutureSavings } from \"./use-future-savings\";\n\nconst thresholdTaxRemaining = (taxRate: number, threshold: number, scenario: Scenario) => {\n  const remaining = scenario.payments\n    .slice(scenario.currentPaymentIdx)\n    .filter((x) => x.cumulative >= threshold && isFuture(DateTime.fromISO(x.payedOn)))\n    .reduce((acc, curr) => {\n      return acc + Math.min(curr.value, curr.cumulative - threshold) * taxRate;\n    }, 0);\n  return remaining;\n};\n\nexport const useFutureTotals = (year: number, options: { excludeHomeEquity: boolean } = { excludeHomeEquity: false }) => {\n  const { excludeHomeEquity } = options;\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios[year]);\n  const bonusTakeHomeFactor = useStore(store, (x) => 1 - x.projectedWealth.bonusWithholdingsRate);\n  const savings = useFutureSavings(year);\n  const homeEquity = useFutureMortgageEquity(year);\n  const retirement = useFutureRetirementContributions(year);\n  const config = useStore(store, (x) => x.projectedWealth);\n\n  const dates = useDates(year);\n\n  const rawClusters = (() => {\n    const totals = scenarios\n      ?.map((x) => {\n        const futureBonuses = [\n          isFuture(dates.meritBonus) && x.meritBonus * bonusTakeHomeFactor,\n          isFuture(dates.companyBonus) && x.companyBonus * bonusTakeHomeFactor,\n          isFuture(dates.retirementBonus) && x.retirementBonus,\n          thresholdTaxRemaining(config.socialSecurityTaxRate, config.socialSecurityLimit, x),\n          thresholdTaxRemaining(-1 * config.medicareSupplementalTaxRate, config.medicareSupplementalTaxThreshold, x),\n        ].filter((x) => x) as number[];\n        return sumSimple(futureBonuses);\n      })\n      .map((y) => y + savings.remaining + retirement.remaining + (excludeHomeEquity ? 0 : homeEquity));\n\n    if (!totals || totals.length === 0) {\n      return [[savings.remaining + retirement.remaining]];\n    }\n    const clusters = ckmeans(\n      totals,\n      getClusterCount(totals, (x) => x)\n    );\n    return clusters;\n  })();\n\n  const numValues = rawClusters.flat().length;\n  return rawClusters.map((x, i, arr) => {\n    return {\n      min: Math.min(...x),\n      max: Math.max(...x),\n      median: median(x),\n      probability: x.length / numValues,\n      title: clusterTitle(i, arr.length),\n    };\n  });\n};\n","import { Box, Stack } from \"@mui/system\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { Card } from \"shared/components/card\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { ClusterValues } from \"shared/components/formatters/cluster-value\";\nimport { CountDown } from \"shared/components/formatters/countdown\";\nimport { Value } from \"shared/components/formatters/value\";\nimport { Cluster, useClusters } from \"shared/hooks/use-clusters\";\nimport { useDates } from \"shared/hooks/use-dates\";\nimport { store } from \"shared/store\";\nimport { scaleClusters } from \"shared/utility/cluster-helpers\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { monthDay } from \"shared/utility/format-date\";\nimport { isFuture } from \"shared/utility/is-future\";\nimport { useFutureMortgageEquity } from \"./hooks/use-future-mortgage-equity\";\nimport { useFutureRetirementContributions } from \"./hooks/use-future-retirement-contributions\";\nimport { useFutureSavings } from \"./hooks/use-future-savings\";\nimport { ThresholdTax, useFutureMedicareTax, useFutureSocialSecurity } from \"./hooks/use-future-social-security\";\nimport { useFutureTotals } from \"./hooks/use-future-totals\";\n\nexport const FutureEvents = (props: { year: number; onChange: (year: number) => void }) => {\n  const { year, onChange } = props;\n  const dates = useDates(year);\n\n  const savings = useFutureSavings(year);\n  const retirement = useFutureRetirementContributions(year);\n  const medicare = useFutureMedicareTax(year);\n  const socialSecurity = useFutureSocialSecurity(year);\n  const clusters = useClusters(year);\n  const bonusTakeHomeFactor = useStore(store, (x) => 1 - x.projectedWealth.bonusWithholdingsRate);\n  const total = useFutureTotals(year);\n  const equity = useFutureMortgageEquity(year);\n\n  return (\n    <>\n      <Stack spacing={2} width={550} paddingRight={1}>\n        <Card\n          title={\n            <>\n              <span>Remaining Projected Wealth</span>\n              <DatePicker\n                sx={{ width: 90, marginRight: 2, marginLeft: \"auto\" }}\n                label={\"year\"}\n                views={[\"year\"]}\n                minDate={getLocalDateTime()}\n                maxDate={getLocalDateTime().plus({ years: 1 })}\n                value={getLocalDateTime().set({ year })}\n                slotProps={{\n                  textField: {\n                    variant: \"standard\",\n                    label: \"\",\n                  },\n                }}\n                onYearChange={(year) => {\n                  onChange(year.year);\n                }}\n              />\n            </>\n          }\n        >\n          <ClusterValues clusters={total} eventDate={dates.companyBonus} />\n        </Card>\n        {isFuture(dates.meritBonus) && clusters.meritBonus.length > 0 && (\n          <ClusterCard title=\"Merit Bonus\" date={dates.meritBonus} cluster={scaleClusters(clusters.meritBonus, bonusTakeHomeFactor)} />\n        )}\n        {isFuture(dates.companyBonus) && clusters.companyBonus.length > 0 && (\n          <ClusterCard\n            title=\"Company Bonus\"\n            date={dates.companyBonus}\n            cluster={scaleClusters(clusters.companyBonus, bonusTakeHomeFactor)}\n          />\n        )}\n        {isFuture(dates.retirementBonus) && clusters.retirementBonus.length > 0 && (\n          <ClusterCard title=\"Retirement Bonus\" date={dates.retirementBonus} cluster={clusters.retirementBonus} />\n        )}\n        {!!socialSecurity.min && <ThresholdTaxCard thresholdTax={socialSecurity} title={\"Social Security Limit\"} />}\n        {!!medicare.min && <ThresholdTaxCard thresholdTax={medicare} title={\"Medicare Supplemental Tax\"} />}\n\n        {(!!savings.perMonth || !!retirement.perPaycheck || !!equity) && (\n          <Card title={\"Savings & Retirement\"}>\n            {!!savings.perMonth && (\n              <Value title={\"savings\"} secondaryValue={<Cash tooltip=\"Per Month\" value={savings.perMonth} />}>\n                <Cash tooltip=\"Total Remaining\" value={savings.remaining} />\n              </Value>\n            )}\n            {!!retirement.perPaycheck && (\n              <Value title={\"retirement\"} secondaryValue={<Cash tooltip=\"Per Paycheck\" value={retirement.perPaycheck} />}>\n                <Cash tooltip=\"Total Remaining\" value={retirement.remaining} />\n              </Value>\n            )}\n            {!!equity && (\n              <Value title={\"Home Equity\"}>\n                <Cash tooltip=\"Total Remaining\" value={equity} />\n              </Value>\n            )}\n          </Card>\n        )}\n      </Stack>\n    </>\n  );\n};\n\nconst ThresholdTaxCard = (props: { thresholdTax: ThresholdTax; title: string }) => {\n  const { thresholdTax, title } = props;\n  return (\n    <Card\n      title={\n        <Box display={\"flex\"} width={\"max-content\"} gap={1} marginRight={2}>\n          <span>{title}</span>\n\n          <CountDown dateFormat={monthDay} variant=\"date\" dateTime={thresholdTax.max?.firstOccurrence} />\n          {thresholdTax.min && thresholdTax.max && !thresholdTax.min.firstOccurrence.equals(thresholdTax.max.firstOccurrence) && (\n            <>\n              <span>or</span>\n              <CountDown dateFormat={monthDay} variant=\"date\" dateTime={thresholdTax.min.firstOccurrence} />\n            </>\n          )}\n        </Box>\n      }\n    >\n      {thresholdTax.max && thresholdTax.max.total === thresholdTax.min?.total && (\n        <Value title={\"Remaining\"}>\n          <Cash value={thresholdTax.max?.remaining} compact={false} />\n        </Value>\n      )}\n      {thresholdTax.max && thresholdTax.max.total !== thresholdTax.min?.total && (\n        <>\n          <Value title={thresholdTax.max.firstOccurrence > getLocalDateTime() ? \"Early\" : \"Low\"}>\n            <Cash value={thresholdTax.max?.remaining} compact={false} />\n          </Value>\n          <Value title={thresholdTax.max.firstOccurrence > getLocalDateTime() ? \"Late\" : \"High\"}>\n            <Cash value={thresholdTax.min?.total} compact={false} />\n          </Value>\n        </>\n      )}\n      <Value title={\"Per Paycheck\"}>\n        <Cash value={thresholdTax.max?.perPaycheck} compact={false} />\n      </Value>\n    </Card>\n  );\n};\n\nconst ClusterCard = (props: { date: DateTime; cluster?: Cluster[]; title: string }) => {\n  const { date, cluster, title } = props;\n  return (\n    <Card\n      title={\n        <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\n          <span>{title}</span>\n          <CountDown variant=\"date\" dateFormat={monthDay} dateTime={date} />\n        </Box>\n      }\n    >\n      <ClusterValues clusters={cluster} eventDate={date} />\n    </Card>\n  );\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { store } from \"shared/store\";\nimport { findMostMostLikely } from \"shared/utility/cluster-helpers\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { findNearestIdxOnOrBefore, findNearestOnOrBefore } from \"shared/utility/find-nearest-on-or-before\";\nimport { calcEquity, calcLoanBalance } from \"shared/utility/mortgage-calc\";\nimport { useEarliestAccountEntry } from \"../../../shared/hooks/use-earliest-account-entry\";\nimport { useFutureTotals } from \"./use-future-totals\";\n\nexport interface TimeSeriesWealth {\n  graphDate: Date;\n  date: DateTime;\n  wealth: number;\n  yoyCash?: number;\n  yoyPct?: number;\n}\n\nconst useFuturesWealth = () => {\n  const year = getLocalDateTime().year;\n  const totals = useFutureTotals(year, { excludeHomeEquity: true });\n  const totalsPlusOne = useFutureTotals(year + 1, { excludeHomeEquity: true });\n\n  return {\n    [year + 1]: findMostMostLikely(totals)?.median ?? 0,\n    [year + 2]: (findMostMostLikely(totals)?.median ?? 0) + (findMostMostLikely(totalsPlusOne)?.median ?? 0),\n  };\n};\n\nexport const useTimeSeriesWealth = (year: number) => {\n  const localDateTime = getLocalDateTime().startOf(\"day\");\n  const earliest = useEarliestAccountEntry();\n  const accounts = useStore(store, (x) => x.wealth);\n  const futuresWealth = useFuturesWealth();\n\n  if (!earliest.isValid) {\n    return [] as TimeSeriesWealth[];\n  }\n\n  const dates = new Array(year + 2 - earliest.year)\n    .fill(earliest.year)\n    .map((x, i) => DateTime.fromObject({ day: 1, month: 1, year: x + i }).startOf(\"day\"));\n\n  const idx = findNearestIdxOnOrBefore(localDateTime, dates, (x) => x);\n  if (!dates.some((x) => x.equals(localDateTime))) {\n    dates.splice(idx + 1, 0, localDateTime);\n  }\n\n  const futureBenchmarkIdx = idx;\n\n  return dates\n    .map((date) => {\n      const accountsWealth = Object.values(accounts).map((x) => {\n        if (x.type === \"mortgage\" && x.loan) {\n          const houseValue = findNearestOnOrBefore(date, x.data);\n          const balance = calcLoanBalance(date, x.loan);\n          return calcEquity(x.loan.ownershipPct, houseValue?.value, balance, x.loan.principal);\n        } else if (x.type === \"account\") {\n          const entry = findNearestOnOrBefore(date, x.data);\n          return entry?.value ?? 0;\n        }\n        return 0;\n      });\n\n      const accountWealth = accountsWealth.reduce((acc, curr) => acc + curr, 0);\n      const futureWealth = futuresWealth[date.year] ?? 0;\n\n      return {\n        date,\n        graphDate: date.toJSDate(),\n        wealth: accountWealth + futureWealth,\n      };\n    })\n    .map((x, idx, arr) => {\n      if (x.date <= localDateTime || x.date.year === localDateTime.year + 2) {\n        const benchmarkWealth = arr[idx - 1]?.wealth;\n        if (!benchmarkWealth) {\n          return x;\n        }\n        return {\n          ...x,\n          yoyCash: x.wealth - benchmarkWealth,\n          yoyPct: x.wealth / benchmarkWealth - 1,\n        };\n      }\n\n      const benchmarkWealth = arr[futureBenchmarkIdx]?.wealth;\n      if (!benchmarkWealth) {\n        return x;\n      }\n      return {\n        ...x,\n        yoyCash: x.wealth - benchmarkWealth,\n        yoyPct: x.wealth / benchmarkWealth - 1,\n      };\n    }) as TimeSeriesWealth[];\n};\n","import { AgCartesianChartOptions, AgLineSeriesOptions } from \"ag-charts-community\";\nimport { AgCharts } from \"ag-charts-react\";\nimport { DateTime } from \"luxon\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { TimeSeriesWealth, useTimeSeriesWealth } from \"./hooks/use-times-series-wealth\";\n\ninterface MarkerParams<T> {\n  fill: string;\n  fillOpacity: number;\n  highlighted: boolean;\n  seriesId: string;\n  size: number;\n  stroke: string;\n  strokeOpacity: number;\n  strokeWidth: number;\n  xKey: string;\n  yKey: string;\n  datum: T;\n}\n\nexport const WealthChart = (props: { titleYear: number }) => {\n  const dataYear = getLocalDateTime().year + 1;\n  const { titleYear } = props;\n  const data = useTimeSeriesWealth(dataYear);\n  const offsetIdx = getLocalDateTime().year - titleYear + 1;\n\n  const series = [\n    {\n      type: \"line\",\n      xKey: \"graphDate\",\n      yKey: \"wealth\",\n      yName: \"Wealth\",\n      tooltip: {\n        renderer: ({ datum, yKey, xKey }) => ({\n          content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCash(datum[yKey])}`,\n        }),\n      },\n      marker: {\n        itemStyler: (params: MarkerParams<TimeSeriesWealth>) => {\n          if (params.datum.date.year === DateTime.local().plus({ years: 1 }).year) {\n            return {\n              fill: \"orange\",\n            };\n          } else if (params.datum.date.year === DateTime.local().plus({ years: 2 }).year) {\n            return {\n              fill: \"rgb(244, 67, 54)\",\n            };\n          } else if (params.datum.date.hasSame(DateTime.local(), \"day\")) {\n            return {\n              fill: \"lightgrey\",\n            };\n          }\n        },\n      },\n    },\n    {\n      type: \"line\",\n      xKey: \"graphDate\",\n      yKey: \"yoyCash\",\n      yName: \"YoY ($)\",\n      stroke: \"grey\",\n\n      tooltip: {\n        renderer: ({ datum, yKey, xKey }) => ({\n          content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCash(datum[yKey])}`,\n        }),\n      },\n      marker: {\n        fill: \"grey\",\n        itemStyler: (params: MarkerParams<TimeSeriesWealth>) => {\n          if (params.datum.date.year === DateTime.local().plus({ years: 1 }).year) {\n            return {\n              fill: \"orange\",\n            };\n          } else if (params.datum.date.year === DateTime.local().plus({ years: 2 }).year) {\n            return {\n              fill: \"rgb(244, 67, 54)\",\n            };\n          } else if (params.datum.date.hasSame(DateTime.local(), \"day\")) {\n            return {\n              fill: \"lightgrey\",\n            };\n          }\n        },\n      },\n    },\n  ] as AgLineSeriesOptions[];\n\n  const options: AgCartesianChartOptions = {\n    theme: \"ag-default-dark\",\n    title: {\n      text: `${data[data.length - 1 - offsetIdx].date.toFormat(shortDate)} Projected wealth ${formatCashShort(\n        (data[data.length - 1 - offsetIdx]?.wealth ?? 0) as number\n      )}`,\n    },\n    data,\n    axes: [\n      {\n        type: \"time\",\n        position: \"bottom\",\n        label: {\n          format: \"%Y\",\n        },\n      },\n      {\n        type: \"number\",\n        position: \"left\",\n        nice: false,\n      },\n    ],\n    series,\n  };\n\n  return <AgCharts options={options} css={{ height: \"100%\", width: \"100%\" }} />;\n};\n","import QueryStatsIcon from \"@mui/icons-material/QueryStats\";\nimport TodayIcon from \"@mui/icons-material/Today\";\nimport UpdateIcon from \"@mui/icons-material/Update\";\nimport { Tooltip } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { ColDef, ICellRendererParams } from \"ag-grid-community\";\nimport { DateTime } from \"luxon\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { Percent } from \"shared/components/formatters/percent\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { TimeSeriesWealth } from \"../hooks/use-times-series-wealth\";\n\nexport const columnConfig: ColDef<TimeSeriesWealth>[] = [\n  {\n    headerName: \"Date\",\n    colId: \"date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data?.date,\n    cellRenderer: (x: ICellRendererParams<unknown, DateTime>) => {\n      const localDateTime = getLocalDateTime().startOf(\"day\");\n      const systemYear = localDateTime.year;\n      return (\n        <Stack direction={\"row\"} alignItems={\"center\"}>\n          {x.valueFormatted}&nbsp;\n          {x.value && x.value.equals(localDateTime) && (\n            <Tooltip title=\"Today\">\n              <TodayIcon htmlColor=\"orange\" />\n            </Tooltip>\n          )}\n          {x.value &&\n            x.value.equals(\n              DateTime.fromObject({\n                day: 1,\n                month: 1,\n                year: systemYear,\n              })\n            ) && (\n              <Tooltip\n                title={`Benchmark for ${localDateTime.toFormat(shortDate)} & ${localDateTime.set({ day: 1, month: 1 }).plus({ years: 1 }).toFormat(shortDate)} `}\n              >\n                <QueryStatsIcon htmlColor=\"orange\" />\n              </Tooltip>\n            )}\n          {x.value &&\n            x.value.equals(\n              DateTime.fromObject({\n                day: 1,\n                month: 1,\n                year: systemYear + 1,\n              })\n            ) && (\n              <Tooltip title={`Benchmark for ${localDateTime.set({ day: 1, month: 1 }).plus({ years: 2 }).toFormat(shortDate)} `}>\n                <QueryStatsIcon htmlColor=\"rgb(244, 67, 54)\" />\n              </Tooltip>\n            )}\n          {x.value && x.value > localDateTime && (\n            <Tooltip title=\"Future Event\">\n              <UpdateIcon htmlColor={x.value.year - systemYear > 1 ? \"rgb(244, 67, 54)\" : \"orange\"} />\n            </Tooltip>\n          )}\n        </Stack>\n      );\n    },\n  },\n  {\n    type: \"numericColumn\",\n    headerName: \"Wealth\",\n    colId: \"wealth\",\n    valueGetter: (x) => x.data?.wealth,\n    cellRenderer: (x: ICellRendererParams<unknown, number>) => {\n      return x.value && <Cash value={x.value} placement=\"left\" />;\n    },\n  },\n  {\n    colId: \"yoy-cash\",\n    type: \"numericColumn\",\n    headerName: \"YoY ($)\",\n    valueGetter: (x) => x.data?.yoyCash,\n    cellRenderer: (x: ICellRendererParams<unknown, number>) => {\n      return x.value && <Cash value={x.value} placement=\"left\" />;\n    },\n  },\n  {\n    colId: \"yoy-percent\",\n    type: \"numericColumn\",\n    headerName: \"YoY (%)\",\n    valueGetter: (x) => x.data?.yoyPct,\n    cellRenderer: (x: ICellRendererParams<unknown, number>) => {\n      return x.value && <Percent value={x.value} />;\n    },\n    minWidth: 60,\n  },\n];\n","import { Box } from \"@mui/system\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { useTimeSeriesWealth } from \"../hooks/use-times-series-wealth\";\nimport { columnConfig } from \"./colum-config\";\n\nexport const WealthTable = () => {\n  const dataYear = getLocalDateTime().year + 1;\n  const data = useTimeSeriesWealth(dataYear);\n\n  return (\n    <Box height={\"100%\"} width={\"100%\"}>\n      <AgGrid\n        id=\"time-series-wealth\"\n        rowData={data}\n        columnDefs={columnConfig}\n        autoSizeStrategy={{ type: \"fitGridWidth\" }}\n        onRowDataUpdated={(e) => e.api.sizeColumnsToFit()}\n      />\n    </Box>\n  );\n};\n","import { Box, Stack } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { FutureEvents } from \"./future-events\";\nimport { WealthChart } from \"./wealth-chart\";\nimport { WealthTable } from \"./wealth-table\";\n\nexport const ProjectedWealth = () => {\n  const localTime = getLocalDateTime();\n  const [year, setYear] = useState(localTime.year);\n\n  return (\n    <Box display=\"flex\" flexDirection=\"row\" height=\"100%\" width={\"100%\"} gap={1}>\n      <Box flex=\"0 1 auto\" height={\"100%\"} overflow={\"auto\"}>\n        <FutureEvents onChange={setYear} year={year} />\n      </Box>\n      <Box flex=\"1 1 auto\" overflow={\"auto\"}>\n        <Stack spacing={2} height={\"100%\"} width={\"100%\"}>\n          <WealthChart titleYear={year} />\n          <WealthTable />\n        </Stack>\n      </Box>\n    </Box>\n  );\n};\n","import { create } from \"mutative\";\nimport { ProjectedWealthKeys } from \"shared/models/store/current\";\nimport { store } from \".\";\n\nexport const setProjectedWealth = (configName: ProjectedWealthKeys, value: number) => {\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      next.projectedWealth[configName] = value;\n    });\n  });\n};\n","import { InputAdornment, TextField } from \"@mui/material\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { useCallback, useState } from \"react\";\nimport { ProjectedWealthKeys } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\nimport { setProjectedWealth } from \"shared/store/set-projected-wealth\";\n\ninterface ConfigEntryProps {\n  configName: ProjectedWealthKeys;\n  label: string;\n  variant?: \"cash\" | \"percent\";\n}\n\nexport const ConfigEntry = (props: ConfigEntryProps) => {\n  const { configName, label, variant = \"cash\" } = props;\n  const [error, setError] = useState(false);\n  const isPercent = variant === \"percent\";\n\n  const onchange = useCallback(\n    (input: string) => {\n      let value = +input;\n      const isNan = Number.isNaN(value);\n      setError(isNan);\n      if (isNan) {\n        return;\n      }\n\n      if (isPercent) {\n        value /= 100;\n      }\n\n      setProjectedWealth(configName, value);\n    },\n    [configName, isPercent]\n  );\n\n  const value = useStore(store, (x) => x.projectedWealth[configName]);\n  const defaultValue = isPercent ? value * 100 : value;\n\n  return (\n    <TextField\n      error={error}\n      variant=\"outlined\"\n      slotProps={{\n        input: {\n          startAdornment: <InputAdornment position=\"start\">{isPercent ? \"%\" : \"$\"}</InputAdornment>,\n        },\n      }}\n      defaultValue={defaultValue.toFixed(isPercent ? 2 : 0)}\n      type=\"numeric\"\n      label={label}\n      onChange={(event) => {\n        onchange(event.target.value);\n      }}\n    />\n  );\n};\n","import { Card, CardContent, CardHeader } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { ConfigEntry } from \"./config-entry\";\n\nexport const Config = () => {\n  return (\n    <Card>\n      <CardHeader title=\"Configuration\" />\n      <CardContent>\n        <Stack spacing={2}>\n          <ConfigEntry configName=\"savingsPerMonth\" label=\"Monthly Saving Rate\" />\n          <ConfigEntry configName=\"retirementContributionPaycheck\" label=\"Retirement Contribution Per Paycheck\" />\n          <ConfigEntry configName=\"bonusWithholdingsRate\" label=\"Bonus Withholdings Rate\" variant=\"percent\" />\n          <Stack direction={\"row\"} spacing={2} width={\"100%\"} sx={{ \"& > *\": { flex: 1 } }}>\n            <ConfigEntry configName=\"socialSecurityLimit\" label=\"Social Security Tax Limit\" />\n            <ConfigEntry configName=\"socialSecurityTaxRate\" label=\"Social Security Tax\" variant=\"percent\" />\n          </Stack>\n          <Stack direction={\"row\"} spacing={2} width={\"100%\"} sx={{ \"& > *\": { flex: 1 } }}>\n            <ConfigEntry configName=\"medicareSupplementalTaxThreshold\" label=\"Medicare Supplemental Threshold\" />\n            <ConfigEntry configName=\"medicareSupplementalTaxRate\" label=\"Medicare Supplemental Tax\" variant=\"percent\" />\n          </Stack>\n        </Stack>\n      </CardContent>\n    </Card>\n  );\n};\n","import Close from \"@mui/icons-material/Close\";\nimport { Box, Button, IconButton, MenuItem, Modal, Paper, Select, Stack, Typography } from \"@mui/material\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { SimpleTreeView } from \"@mui/x-tree-view/SimpleTreeView\";\nimport { TreeItem } from \"@mui/x-tree-view/TreeItem\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useState } from \"react\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { Percent } from \"shared/components/formatters/percent\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { formatCash } from \"shared/utility/format-cash\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { formatPercent } from \"shared/utility/format-percent\";\n\nexport const ScenarioExplorer = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [year, setYear] = useState(getLocalDateTime().year);\n  const [scenarioIndex, setScenarioIndex] = useState(0);\n  const scenarioData = useStore(scenarioStore);\n  const scenarios = scenarioData.scenarios[year];\n  const scenario = scenarios?.[scenarioIndex];\n  if (!scenario) {\n    return null;\n  }\n  return (\n    <>\n      <Button onClick={() => setIsOpen(true)}>Scenario Explorer</Button>\n      <Modal open={isOpen}>\n        <Paper sx={{ position: \"absolute\", top: 24, bottom: 24, right: 24, left: 24, padding: 2, overflow: \"auto\" }}>\n          <IconButton onClick={() => setIsOpen(false)} sx={{ position: \"absolute\", top: 8, right: 8 }}>\n            <Close />\n          </IconButton>\n          <Stack spacing={2}>\n            <Stack direction={\"row\"} alignItems={\"center\"} spacing={2}>\n              <Typography variant=\"h5\">Scenario Explorer</Typography>\n              <DatePicker\n                sx={{ width: 90, marginRight: 2 }}\n                label={\"year\"}\n                views={[\"year\"]}\n                minDate={getLocalDateTime().set({ year: scenarioData?.minYear })}\n                maxDate={getLocalDateTime().set({ year: scenarioData?.maxYear })}\n                defaultValue={getLocalDateTime()}\n                slotProps={{\n                  textField: {\n                    variant: \"standard\",\n                    label: \"\",\n                  },\n                }}\n                onYearChange={(year) => {\n                  setYear(year.year);\n                }}\n              />\n              <Select variant=\"standard\" onChange={(event) => setScenarioIndex(+event.target.value)} defaultValue={\"0\"}>\n                {scenarios?.map((x, i) => (\n                  <MenuItem key={i} value={i}>\n                    {x.weight} {formatCash(x.totalPay)}\n                  </MenuItem>\n                ))}\n              </Select>\n            </Stack>\n\n            <Paper elevation={5} sx={{ padding: 2 }}>\n              <SimpleTreeView\n                defaultExpandedItems={[\"_TotalPay\", \"totalMerit\", \"pay\", \"meritBonus\", \"companyBonus\", \"lastThreeMeritBonusFactor\"]}\n              >\n                <TreeItem itemId=\"scenario\" label={<span>Scenario</span>}>\n                  <TreeItem itemId=\"weight\" label={<span>Weight: {scenario.weight}</span>} />\n                  <TreeItem itemId=\"year\" label={<span>Year: {scenario.year}</span>} />\n                </TreeItem>\n                <TreeItem\n                  itemId=\"_TotalPay\"\n                  label={\n                    <Stack direction={\"row\"} spacing={1}>\n                      <span>Total Pay: </span>\n                      <Cash value={scenario.totalPay} compact={false} />\n                    </Stack>\n                  }\n                >\n                  <TreeItem\n                    itemId=\"aprToApr\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Apr To Apr: </span>\n                        <Cash value={scenario.aprToApr} compact={false} />\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"basePay\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Base Pay: </span>\n                        <Cash value={scenario.basePay} compact={false} />\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"taxablePay\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Taxable Pay: </span>\n                        <Cash value={scenario.taxablePay} compact={false} />\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"totalPay\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Total Pay: </span>\n                        <Cash value={scenario.totalPay} compact={false} />\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"totalMerit\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Total Merit Increase: </span>\n                        <Percent value={scenario.meritIncreasePct + scenario.equityIncreasePct} />\n                      </Stack>\n                    }\n                  >\n                    <TreeItem\n                      itemId=\"meritIncreasePct\"\n                      label={\n                        <Stack direction={\"row\"} spacing={1}>\n                          <span>Merit Increase: </span>\n                          <Percent value={scenario.meritIncreasePct} />\n                        </Stack>\n                      }\n                    />\n                    <TreeItem\n                      itemId=\"equityIncreasePct\"\n                      label={\n                        <Stack direction={\"row\"} spacing={1}>\n                          <span>Equity Increase: </span>\n                          <Percent value={scenario.equityIncreasePct} />\n                        </Stack>\n                      }\n                    />\n                  </TreeItem>\n\n                  <TreeItem\n                    itemId=\"currentPaymentIdx\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Current Payment Index: </span>\n                        <span>{scenario.currentPaymentIdx}</span>\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"remainingPayments\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Remaining Regular Payments: </span>\n                        <span>{scenario.remainingRegularPayments}</span>\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"current_payment\"\n                    label={\n                      <Stack direction={\"row\"} spacing={2}>\n                        <Box>Current Payment: </Box>\n                        <Box>{DateTime.fromISO(scenario.payments[scenario.currentPaymentIdx].payedOn).toFormat(shortDate)}</Box>\n                        <Box width={70} textAlign={\"right\"}>\n                          {formatCash(scenario.payments[scenario.currentPaymentIdx].value)}\n                        </Box>\n                        <Box width={70} textAlign={\"right\"}>\n                          {formatCash(scenario.payments[scenario.currentPaymentIdx].cumulative)}\n                        </Box>\n                        <Box> {scenario.payments[scenario.currentPaymentIdx].type}</Box>\n                      </Stack>\n                    }\n                  ></TreeItem>\n                  <TreeItem itemId=\"payments\" label={\"Payments Considered\"}>\n                    {scenario.payments.toReversed().map((x, i, arr) => (\n                      <TreeItem\n                        key={i}\n                        itemId={`payments-${i}`}\n                        label={\n                          <Stack\n                            sx={{\n                              backgroundColor: scenario.currentPaymentIdx == arr.length - 1 - i ? \"rgba(0,255,0,.15)\" : undefined,\n                            }}\n                            direction={\"row\"}\n                            spacing={2}\n                          >\n                            <Box>{arr.length - 1 - i}</Box>\n                            <Box>{DateTime.fromISO(x.payedOn).toFormat(shortDate)}</Box>\n                            <Box width={70} textAlign={\"right\"}>\n                              {formatCash(x.value)}\n                            </Box>\n                            <Box width={70} textAlign={\"right\"}>\n                              {formatCash(x.cumulative)}\n                            </Box>\n                            <Box> {x.type}</Box>\n                          </Stack>\n                        }\n                      />\n                    ))}\n                  </TreeItem>\n                  <TreeItem itemId=\"pay\" label={\"Pay\"}>\n                    {scenario.pay.toReversed().map((x, i) => (\n                      <TreeItem key={i} itemId={`$pay-${i}`} label={`${DateTime.fromISO(x.date).year} ${x.value}`} />\n                    ))}\n                  </TreeItem>\n                </TreeItem>\n\n                <TreeItem\n                  itemId=\"meritBonus\"\n                  label={\n                    <Stack direction={\"row\"} spacing={1}>\n                      <span>Merit Bonus: </span>\n                      <Cash value={scenario.meritBonus} compact={false} />\n                    </Stack>\n                  }\n                >\n                  <TreeItem\n                    itemId=\"mertiBonusPct\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Merit Bonus Percent: </span>\n                        <Percent value={scenario.meritBonusPct} />\n                      </Stack>\n                    }\n                  />\n                </TreeItem>\n                <TreeItem\n                  itemId=\"companyBonus\"\n                  label={\n                    <Stack direction={\"row\"} spacing={1}>\n                      <span>Company Bonus:</span>\n                      <Cash value={scenario.companyBonus} compact={false} />\n                    </Stack>\n                  }\n                >\n                  <TreeItem\n                    itemId=\"companyBonusFactor.value\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Company Bonus Factor:</span>\n                        <Percent value={scenario.companyBonusFactor} />\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"companyBonusPct.value\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Company Bonus Percent:</span>\n                        <Percent value={scenario.companyBonusPct} />\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"lastThreeMeritBonusFactor\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Last Three Merit Bonus Percent:</span>\n                        <Percent value={scenario.lastThreeMeritBonusFactor} />\n                      </Stack>\n                    }\n                  >\n                    {scenario.lastThreeMeritBonuses.toReversed().map((x, i) => (\n                      <TreeItem key={`${i}${x}`} itemId={`lastThreeMeritBonuses${i}`} label={`${year - i} ${formatPercent(x)}`} />\n                    ))}\n                  </TreeItem>\n                </TreeItem>\n                <TreeItem\n                  itemId=\"retirementBonus\"\n                  label={\n                    <Stack direction={\"row\"} spacing={1}>\n                      <span>Retirement Bonus:</span>\n                      <Cash value={scenario.retirementBonus} compact={false} />\n                    </Stack>\n                  }\n                >\n                  <TreeItem\n                    itemId=\"retirementBonusPct\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Retirement Bonus Percent:</span>\n                        <Percent value={scenario.retirementBonusPct} />\n                      </Stack>\n                    }\n                  />\n                </TreeItem>\n              </SimpleTreeView>\n            </Paper>\n          </Stack>\n        </Paper>\n      </Modal>\n    </>\n  );\n};\n","import { Box, Table, TableBody, TableCell, TableHead, TableRow } from \"@mui/material\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport { ReactNode } from \"react\";\nimport { ZodError } from \"zod\";\n\ninterface InvalidDataDialogProps {\n  open?: boolean;\n  error?: ZodError;\n  children?: ReactNode;\n}\n\nexport default function InvalidDataDialog(props: InvalidDataDialogProps) {\n  const { open, error, children } = props;\n\n  return (\n    <>\n      <Dialog open={!!open}>\n        <DialogTitle id=\"alert-dialog-title\">{\"Error Loading Data\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            <Box maxHeight={500} overflow={\"auto\"}>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Error Message</TableCell>\n                    <TableCell>Path</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {error?.issues.map((x, idx) => {\n                    return (\n                      <TableRow key={idx}>\n                        <TableCell>{x.message}</TableCell>\n                        <TableCell>{x.path.join(\".\")}</TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            </Box>\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>{children}</DialogActions>\n      </Dialog>\n    </>\n  );\n}\n","import { useStore } from \"@tanstack/react-store\";\nimport { useCallback } from \"react\";\nimport { store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const downloadJson = <T,>(filename: string, storeData: T) => {\n  const data = JSON.stringify(storeData, null, 2);\n  const link = document.createElement(\"a\");\n  link.download = filename;\n  const blob = new Blob([data], { type: \"application/json\" });\n  link.href = window.URL.createObjectURL(blob);\n  link.click();\n};\n\nexport const useExport = () => {\n  const storeData = useStore(store);\n  const onExport = useCallback(() => {\n    downloadJson(`wealth-tracker-${getLocalDateTime().toFormat(shortDate)}.json`, storeData);\n  }, [storeData]);\n\n  return onExport;\n};\n","import { useCallback } from \"react\";\nimport { storeValidator } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\nimport { migration } from \"shared/store/migrations\";\n\nfunction selectFile(contentType: string) {\n  return new Promise<File>((resolve) => {\n    const input = document.createElement(\"input\");\n    input.type = \"file\";\n    input.multiple = false;\n    input.accept = contentType;\n\n    input.onchange = () => {\n      const files = Array.from(input.files ?? []);\n      resolve(files[0]);\n    };\n\n    input.click();\n  });\n}\n\nexport const useImport = () => {\n  return useCallback(() => {\n    return new Promise<void>((resolve, reject) => {\n      selectFile(\"application/json\").then((file) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = (readerEvent) => {\n          const content = readerEvent.target?.result?.toString();\n          if (content) {\n            const data = JSON.parse(window.atob(content.split(\",\")[1]));\n            const validation = storeValidator.safeParse(data);\n            if (validation.success) {\n              store.setState(() => data);\n              resolve();\n            } else {\n              try {\n                migration(data);\n                store.setState(() => data);\n                resolve();\n              } catch (err) {\n                console.log(\"error\", err);\n                console.log(\"invalid data\", data);\n                reject(err);\n              }\n            }\n          }\n        };\n      });\n    });\n  }, []);\n};\n","import { storeValidator } from \"shared/models/store/current\";\n\nexport const useStoreDataError = () => {\n  const invalidData = localStorage.getItem(\"store-invalid\");\n\n  if (!invalidData) {\n    return { hadError: false };\n  }\n\n  const jsonInvalidData = JSON.parse(invalidData);\n  const validated = storeValidator.safeParse(jsonInvalidData);\n\n  return {\n    hadError: !!invalidData,\n    invalidData: jsonInvalidData,\n    parseError: invalidData && !validated.success ? validated.error : undefined,\n    resetError: () => {\n      localStorage.removeItem(\"store-invalid\");\n    },\n  };\n};\n","import DeleteForever from \"@mui/icons-material/DeleteForever\";\nimport { Button, Card, CardActions, CardContent, CardHeader, Stack, Typography } from \"@mui/material\";\nimport InvalidDataDialog from \"app/invalid-data-dialog\";\nimport { useState } from \"react\";\nimport { ConfirmDialog } from \"shared/components/confirm-dialog\";\nimport { downloadJson, useExport } from \"shared/hooks/use-export\";\nimport { useImport } from \"shared/hooks/use-import\";\nimport { useStoreDataError } from \"shared/hooks/use-store-data-error\";\nimport { resetStore } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const System = () => {\n  const onExport = useExport();\n  const onImport = useImport();\n  const { hadError, parseError, resetError, invalidData } = useStoreDataError();\n  const [error, setError] = useState(parseError);\n  const [isOpen, setIsOpen] = useState(hadError);\n\n  return (\n    <>\n      <Stack spacing={2}>\n        <Card>\n          <CardHeader title={\"System\"} />\n          <CardContent>\n            <Typography variant=\"body2\">Built On {BUILD_DATE}</Typography>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader title={\"Data\"} />\n\n          <CardActions>\n            <Button\n              onClick={() =>\n                onImport().catch((err) => {\n                  setIsOpen(true);\n                  setError(err);\n                })\n              }\n            >\n              Import\n            </Button>\n            <Button onClick={onExport}>Export</Button>\n            <ConfirmDialog title=\"Reset Everything\" onConfirm={resetStore}>\n              <Button color=\"error\">\n                <DeleteForever />\n                Reset\n              </Button>\n            </ConfirmDialog>\n          </CardActions>\n        </Card>\n      </Stack>\n      <InvalidDataDialog open={isOpen} error={error}>\n        {hadError && (\n          <>\n            <Button\n              color=\"error\"\n              onClick={() => {\n                setIsOpen(false);\n                resetError?.();\n                resetStore();\n              }}\n            >\n              Reset\n            </Button>\n            <Button\n              onClick={() => {\n                downloadJson(`invalid-data-wealth-tracker-${getLocalDateTime().toFormat(shortDate)}.json`, invalidData);\n              }}\n            >\n              Download Data\n            </Button>\n\n            <Button\n              onClick={() => {\n                setIsOpen(false);\n                resetError?.();\n              }}\n            >\n              Ignore\n            </Button>\n          </>\n        )}\n        {!hadError && (\n          <Button\n            onClick={() => {\n              setIsOpen(false);\n            }}\n          >\n            Cancel\n          </Button>\n        )}\n      </InvalidDataDialog>\n    </>\n  );\n};\n","import CloseIcon from \"@mui/icons-material/Close\";\nimport SettingsIcon from \"@mui/icons-material/Settings\";\nimport { Box, Button, Dialog, DialogContent, DialogTitle, IconButton, Tab, Tabs } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { Config } from \"./config\";\nimport { ScenarioExplorer } from \"./scenario-explorer\";\nimport { System } from \"./system\";\n\nexport const ConfigModal = () => {\n  const [tab, setTab] = useState(\"system\");\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <>\n      <Button onClick={() => setIsOpen(true)}>\n        <SettingsIcon />\n      </Button>\n      <Dialog maxWidth={false} open={isOpen} onClose={() => setIsOpen(false)}>\n        <DialogTitle sx={{ display: \"flex\" }}>\n          <Tabs value={tab} onChange={(_, value) => setTab(value)}>\n            <Tab value=\"projected-Income\" label=\"Projected Income\" />\n            <Tab value=\"projected-wealth\" label=\"Projected Wealth\" />\n            <Tab value=\"system\" label=\"System\" />\n          </Tabs>\n          <IconButton sx={{ height: \"min-content\", marginLeft: \"auto\" }} onClick={() => setIsOpen(false)}>\n            <CloseIcon />\n          </IconButton>\n        </DialogTitle>\n        <DialogContent>\n          <Box width={600} height={450}>\n            {tab === \"projected-Income\" && <ScenarioExplorer />}\n            {tab === \"projected-wealth\" && <Config />}\n            {tab === \"system\" && <System />}\n          </Box>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n};\n","import { Box, Stack, Tab, Tabs } from \"@mui/material\";\nimport { NetWealth } from \"capabilities/net-wealth\";\nimport { ProjectedIncome } from \"capabilities/projected-income\";\nimport { ProjectedWealth } from \"capabilities/projected-wealth\";\nimport { useState } from \"react\";\nimport { ConfigModal } from \"./config/config-modal\";\n\nexport const App = () => {\n  const [tab, setTab] = useState<string>(\"wealth\");\n\n  return (\n    <Box padding={2} paddingTop={0} display={\"flex\"} flexDirection={\"column\"} height=\"100%\" gap={2}>\n      <Box flex=\"0 1 auto\">\n        <Stack direction=\"row\">\n          <Tabs value={tab} onChange={(_, value) => setTab(value)}>\n            <Tab value=\"wealth\" label=\"Total Wealth\" />\n            <Tab value=\"projected-income\" label=\"Projected Income\" />\n            <Tab value=\"projected-wealth\" label=\"Projected Wealth\" />\n          </Tabs>\n          <Box marginLeft={\"auto\"} gap={2} display={\"flex\"}>\n            <ConfigModal />\n          </Box>\n        </Stack>\n      </Box>\n      <Box flex=\"1 1 auto\" height={\"100%\"} width={\"100%\"} overflow=\"hidden\">\n        {tab === \"wealth\" && <NetWealth />}\n        {tab === \"projected-income\" && <ProjectedIncome />}\n        {tab === \"projected-wealth\" && <ProjectedWealth />}\n      </Box>\n    </Box>\n  );\n};\n","import { DateTime } from \"luxon\";\n\nexport const aPayday = DateTime.fromObject({ month: 12, day: 1, year: 2023 });\n","import { DateTime } from \"luxon\";\nimport { MAX_NUM_ENTRIES } from \"shared/constants\";\nimport { AccountData, ProjectedIncome } from \"shared/models/store/current\";\nimport { findSameYear } from \"shared/utility/find-same-year\";\nimport { getPayments } from \"shared/utility/get-payments\";\nimport { valueByDateRange } from \"shared/utility/get-values-by-date-range\";\n\nexport const getScenarioSize = (year: number, projectedIncome: ProjectedIncome) => {\n  const meritSequence = getMeritSequence(year, projectedIncome);\n  const companyBonusFactor = findSameYear(year, projectedIncome.timeSeries.companyBonusPct);\n  const companyBonusPcts = companyBonusFactor\n    ? [companyBonusFactor.value]\n    : projectedIncome.timeSeries.companyBonusPct.slice(-1 * MAX_NUM_ENTRIES).map((x) => x.value);\n\n  const companyBonusPctWeights = Object.entries(Object.groupBy(companyBonusPcts, (x) => x)).map(([, values]) => {\n    return {\n      weight: values!.length,\n      value: values!.at(0)!,\n    };\n  });\n\n  return meritSequence.slice(-1 * MAX_NUM_ENTRIES).length * companyBonusPctWeights.length;\n};\n\nconst getMeritPairs = (year: number, projectedIncome: ProjectedIncome) => {\n  const timeSeries = projectedIncome.timeSeries;\n  const meritBonusPct = findSameYear(year, timeSeries.meritBonusPct);\n  const meritIncreasePct = findSameYear(year, timeSeries.meritIncreasePct);\n\n  const allMeritPairs = timeSeries.meritIncreasePct.map((x) => {\n    const meritBonusPctPair = findSameYear(DateTime.fromISO(x.date).year, timeSeries.meritBonusPct);\n    return {\n      meritIncreasePct: x.value,\n      meritBonusPct: meritBonusPctPair?.value ?? 0,\n    };\n  });\n\n  return allMeritPairs\n    .filter((x) => (meritBonusPct ? x.meritBonusPct === meritBonusPct.value : true))\n    .filter((x) => (meritIncreasePct ? x.meritIncreasePct === meritIncreasePct?.value : true))\n    .slice(-1 * MAX_NUM_ENTRIES);\n};\n\nexport const getMeritSequence = (year: number, projectedIncome: ProjectedIncome) => {\n  const timeSeries = projectedIncome.timeSeries;\n  const meritPairs = getMeritPairs(year, projectedIncome);\n\n  const pay = timeSeries.paycheck.filter((x) => DateTime.fromISO(x.date).year > year - 3);\n  const mostRecentPay = pay.at(-1) ?? timeSeries.paycheck.at(-1);\n\n  if (!mostRecentPay) {\n    return [];\n  }\n\n  const yearsToGenerate = Math.max(year - DateTime.fromISO(mostRecentPay.date).year, 1);\n\n  let meritSequence = meritPairs.slice().map((x) => [x]);\n  for (let i = 0; i < yearsToGenerate - 1; i++) {\n    meritSequence = meritSequence.flatMap((x) => {\n      return meritPairs.map((merit) => {\n        return x.slice().concat(merit);\n      });\n    });\n  }\n\n  const groups = Object.entries(Object.groupBy(meritSequence, (x) => JSON.stringify(x))).map(([, values]) => {\n    return {\n      weight: values!.length,\n      values: values!.at(0)!,\n    };\n  });\n\n  return groups;\n};\n\nexport const getEmptyMeritSequence = (year: number, projectedIncome: ProjectedIncome, pay: AccountData[]) => {\n  const timeSeries = projectedIncome.timeSeries;\n  const equityIncreasePct = findSameYear(year, timeSeries.equityPct)?.value ?? 0;\n  const meritIncreasePct = findSameYear(year, timeSeries.meritIncreasePct)?.value ?? 0;\n  const meritBonusPct = findSameYear(year, timeSeries.meritBonusPct)?.value ?? 0;\n  const meritBonuses = pay.map((x) => findSameYear(DateTime.fromISO(x.date).year, timeSeries.meritBonusPct)?.value ?? 0);\n\n  const lastThreeMeritBonuses = meritBonuses.slice(-3);\n  const lastThreeMeritBonusFactor = meritBonuses.slice(-3).reduce((acc, curr) => acc + curr, 0);\n  const payments = getPayments(\n    DateTime.fromObject({ day: 1, month: 1, year: year - 1 }),\n    DateTime.fromObject({ day: 31, month: 12, year: year }).endOf(\"day\"),\n    valueByDateRange(pay)\n  );\n\n  return [\n    {\n      year,\n      pay: pay.slice(),\n      lastThreeMeritBonusFactor,\n      lastThreeMeritBonuses,\n      meritBonusPct,\n      meritIncreasePct,\n      payments,\n      equityIncreasePct,\n      retirementBonusPct: 0.15,\n      weight: 1,\n    },\n  ];\n};\n","import { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { Scenario } from \"shared/models/scenario\";\nimport { store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { scenarioStore } from \"../store/scenario-store\";\nimport { getScenarioSize } from \"./merit-sequence\";\n\nconst currentYear = getLocalDateTime().year;\nconst maxYear = (() => {\n  const projectedIncome = store.state.projectedIncome;\n  for (let i = currentYear; i <= currentYear + 5; i++) {\n    const size = getScenarioSize(i, projectedIncome);\n    if (size > 2499 || size === 0) {\n      return Math.max(currentYear, i - 1);\n    }\n  }\n  return currentYear + 5;\n})();\n\nconst workers = [\n  new Worker(new URL(\"worker.js\", import.meta.url), { type: \"module\", name: \"1\" }),\n  new Worker(new URL(\"worker.js\", import.meta.url), { type: \"module\", name: \"2\" }),\n  new Worker(new URL(\"worker.js\", import.meta.url), { type: \"module\", name: \"3\" }),\n  new Worker(new URL(\"worker.js\", import.meta.url), { type: \"module\", name: \"4\" }),\n];\n\nworkers.map(\n  (x) =>\n    (x.onmessage = (event: MessageEvent<{ year: number; scenarios: Scenario[] }>) => {\n      scenarioStore.setState((prev) => {\n        return create(prev, (x) => {\n          x.scenarios[event.data.year] = event.data.scenarios;\n\n          const range = Object.keys(x.scenarios)\n            .map((x) => +x)\n            .filter((x, i, arr) => {\n              return i === 0 ? true : x - arr[i - 1] === 1;\n            });\n          const min = range[0];\n          const max = range.at(-1);\n\n          x.loading = max !== maxYear;\n          x.maxYear = max!;\n          x.minYear = min;\n        });\n      });\n    })\n);\n\nconst loadAllScenarios = () => {\n  const projectedIncome = store.state.projectedIncome;\n  const first = projectedIncome.timeSeries.paycheck[1]?.date;\n  const date = first ? DateTime.fromISO(first) : getLocalDateTime();\n  const oldestYear = date.year;\n\n  workers[0].postMessage({ year: currentYear, projectedIncome });\n\n  let workerIdx = 1;\n  for (let i = oldestYear; i < currentYear; i++) {\n    const idx = workerIdx++ % workers.length;\n    workers[idx].postMessage({ year: i, projectedIncome });\n  }\n\n  for (let i = currentYear + 1; i <= maxYear; i++) {\n    const idx = workerIdx++ % workers.length;\n    workers[idx].postMessage({ year: i, projectedIncome });\n  }\n};\nloadAllScenarios();\n\nlet priorProjectedIncome = store.state.projectedIncome;\nstore.subscribe(() => {\n  if (priorProjectedIncome === store.state.projectedIncome) {\n    return;\n  }\n  scenarioStore.setState(() => ({ loading: false, scenarios: {}, maxYear: currentYear, minYear: currentYear }));\n  priorProjectedIncome = store.state.projectedIncome;\n  loadAllScenarios();\n});\n","import { CssBaseline, ThemeProvider, createTheme } from \"@mui/material\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers\";\nimport { AdapterLuxon } from \"@mui/x-date-pickers/AdapterLuxon\";\nimport { App } from \"app/app.tsx\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport \"shared/web-worker/entry\";\nimport \"./index.css\";\n\nimport { AllCommunityModule, ModuleRegistry } from \"ag-grid-community\";\nModuleRegistry.registerModules([AllCommunityModule]);\n\nconst darkTheme = createTheme({\n  palette: {\n    mode: \"dark\",\n  },\n});\n\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n  <React.StrictMode>\n    <ErrorBoundary\n      fallbackRender={(props) => {\n        return (\n          <>\n            <div style={{ backgroundColor: \"#FFF\" }}>{props.error.message}</div>\n            <div style={{ backgroundColor: \"#FFF\" }}>{props.error.stackTrace}</div>\n          </>\n        );\n      }}\n    >\n      <LocalizationProvider dateAdapter={AdapterLuxon}>\n        <ThemeProvider theme={darkTheme}>\n          <CssBaseline />\n          <App />\n        </ThemeProvider>\n      </LocalizationProvider>\n    </ErrorBoundary>\n  </React.StrictMode>\n);\n"],"names":["sortByDate","select","direction","a","b","toMillis","loanValidator","z","object","principal","number","ratePct","paymentsPerYear","payment","firstPaymentDate","string","ownershipPct","accountDataValidator","date","value","id","accountValidator","type","literal","data","array","mortgageValidator","loan","optional","wealth","record","union","projectedIncome","timeSeries","paycheck","meritIncreasePct","equityPct","meritBonusPct","meritBonus","companyBonusPct","companyBonus","retirementBonus","projectedWealth","socialSecurityLimit","socialSecurityTaxRate","medicareSupplementalTaxThreshold","medicareSupplementalTaxRate","savingsPerMonth","retirementContributionPaycheck","bonusWitholdingsRate","storeValidator","version","bonusWithholdingsRate","hidden","boolean","default","getDefaultStore","migration","Error","storeV0Validator","parse","storeV1Validator","storeV2Validator","storeV3Validator","storeV4Validator","keys","Object","i","length","next","console","log","createStore","validator","defaultValue","key","invalidData","localData","localStorage","getItem","JSON","safeParse","success","setItem","stringify","err","store","CreateStore","subscribe","current","state","addAccountEntry","accountName","amount","setState","create","prev","push","startOf","toString","sort","DateTime","fromISO","x","addProjectedIncome","concat","hideAccount","removeAccount","removeAccountEntry","idx","findIndex","splice","removeProjectedIncome","resetStore","setLoan","updateAccountDate","toISO","updateAccountName","currentAccountName","newAccountName","updateAccountValue","updateProjectedIncome","NewAccount","forwardRef","props","ref","$","_c","open","setOpen","useState","nameRef","useRef","error","setError","accountType","setAccountType","t0","t1","Symbol","for","undefined","marginTop","t2","t3","t4","t5","t6","target","t7","t8","t9","t10","t11","t12","t13","t14","t15","t16","children","t17","myTheme","themeQuartz","withParams","backgroundColor","browserColorScheme","chromeBackgroundColor","mix","onto","foregroundColor","headerFontSize","AgGrid","rest","height","getLocalDateTime","local","shortDate","monthDay","formatCashShort","Intl","NumberFormat","style","currency","notation","maximumFractionDigits","minimumSignificantDigits","maximumSignificantDigits","format","formatCash","compact","fallback","Cash","disableTooltip","tooltip","placement","formatted","join","createAccountColumnConfig","headerName","valueFormatter","toFormat","valueGetter","cellEditor","editable","valueSetter","fromJSDate","newValue","isValid","cellRenderer","cellStyle","display","padding","sortable","width","colId","DeleteForeverIcon","useMissingYears","account","years","entries","groupBy","year","map","find","janFirst","fromObject","day","month","diff","days","lookup","fromEntries","missing","ConfirmDialog","onConfirm","title","isOpen","setIsOpen","minWidth","justifyContent","marginRight","AccountSettings","nextAccountName","setNextAccountName","Close","event","t18","t19","t20","t21","t22","AccountTab","useStore","setDate","setAmount","missingYears","hasSameDate","hasSame","accountColumnConfig","onAddEntry","marginLeft","color","input","startAdornment","_temp","x_0","api","sizeColumnsToFit","findNearestOnOrBefore","findNearestIdxOnOrBefore","selector","getGraphDates","accounts","Set","flatMap","calcLoanBalance","rate","monthlyPayment","annualizedRate","periods","months","totalRate","balance","calcEquity","houseValue","loanBalance","AddEntry","date_0","Stack","mortgageColumnConfig","toFixed","equity","convertPct","min","datetime","offset","handleClose","textField","parsed","issues","path","createLoanValueGetter","MortgageTab","allAccounts","values","dates","mortgageData","Box","AccountTabs","firstAccount","setAccount","useEffect","_","filter","_temp2","_temp3","account_0","useEarliestAccountEntry","fromMillis","reduce","acc","curr","Math","Infinity","getMortgageValue","mortgage","entry","getAccountValue","getGraphValue","useGraphData","graphData","total","toJSDate","forEach","firstNonZero","slice","arr","x_1","WealthChart","initialFromDate","endOf","intialToDate","plus","fromDate","setFromDate","toDate","setToDate","getFullYear","filteredData","xKey","yKey","yName","renderer","_temp4","series","text","position","label","nice","interval","step","time","every","snapTo","theme","axes","options","value_0","datum","content","toISODate","data_0","stacked","datum_0","yKey_0","xKey_0","NetWealth","border","borderRadius","boxShadow","Card","minHeight","paddingBottom","paddingLeft","paddingTop","CashRange","max","minFormatted","maxFormatted","showRange","formatPercent","getColor","probability","Percent","PercentRange","Value","secondaryValue","tertiaryValue","className","flexDirection","alignItems","gap","flexShrink","ClusterValue","ClusterValues","clusters","eventDate","diffNow","toHuman","dur","smallestUnit","units","smallestIdx","indexOf","shiftTo","normalize","toObject","Duration","replaceAll","CountDown","dateTime","variant","dateFormat","bb0","countDownStr","bb1","diff_0","tooltipStr","bb2","countDownColor","scenarioStore","Store","loading","maxYear","minYear","scenarios","makeMatrix","columns","rows","matrix","column","j","numericSort","toSorted","uniqueCountSorted","uniqueValueCount","lastSeenValue","ssq","sums","sumsOfSquares","sji","muji","fillMatrixColumn","iMin","iMax","cluster","backtrackMatrix","floor","jlow","jhigh","sjlowi","ssqjlow","ssqj","fillMatrices","nValues","shift","shiftedValue","ckmeans","nClusters","sorted","clusterRight","clusterLeft","areSetsEqual","has","collapseClusters","sets","y","result","scaleCluster","factor","median","scaleClusters","findMostMostLikely","clusterTitle","index","getClusterCount","uniqeValues","size","totalWeight","sumSimple","weight","clusterCount","useClusters","totalPay","pay","meritIncrease","taxablePay","_temp5","_temp6","_temp7","useTotalPayClusters","_temp8","allScenarios","_temp10","x_2","x_3","x_4","at","x_5","equityIncreasePct","x_6","_temp9","scenarios_0","findSameYear","useRealDate","useDates","meritBonusDate","companyBonusDate","retirementBonusDate","useDateRanges","base","start","end","PaymentTypes","regular","MAX_NUM_ENTRIES","SparkChart","maxClusters","subArr","flat","ckData","stroke","marker","itemStyler","params","fill","maxSpacing","formatter","params_0","isDisabled","sx","maxWidth","updateProjectedIncomeDate","dateVariant","tooltipValueGetter","valueFormatted","set","disabledStyle","DataEntry","defaultDate","flex","t23","t24","Layout","rowIndex","IncomeChart","history","future","_temp11","_temp12","_temp13","year_0","year_1","toLocaleLowerCase","year_2","lowProbability","medProbability","datum_1","yKey_1","xKey_1","params_1","color_1","highProbability","datum_2","yKey_2","xKey_2","params_2","IncomePerPeriodTooltip","incomePerPeriod","perPayday","count","useHasMeritPairs","ProjectedIncome","selectedYear","setSelectedYear","hasMissingPairs","dateRanges","basePay","aprToApr","payments","payPeriods","payedOn","reduceRight","IncomePerPeriod","paychecks","flexWrap","t25","t26","t27","t28","t29","t30","t31","t32","t33","t34","t35","t36","t37","t38","t39","t40","t41","t42","t43","t44","t45","t46","t47","t48","t49","t50","t51","t52","t53","t54","unshift","acc_1","curr_1","acc_0","curr_0","isFuture","milliseconds","useFutureMortgageEquity","mortgages","startDate","useFutureRetirementContributions","retirementContribution","remainingRegularPayments","remaining","perPaycheck","useFutureSavings","config","perMonth","useFutureSocialSecurity","useThresholdTax","useFutureMedicareTax","taxes","threshold","taxRate","cumulative","firstOccurrence","currentPaymentIdx","Partial","thresholdTaxRemaining","scenario","useFutureTotals","excludeHomeEquity","bonusTakeHomeFactor","savings","homeEquity","retirement","totals","futureBonuses","rawClusters","numValues","FutureEvents","onChange","medicare","socialSecurity","ThresholdTaxCard","thresholdTax","equals","ClusterCard","useFuturesWealth","totalsPlusOne","useTimeSeriesWealth","localDateTime","earliest","futuresWealth","Array","some","futureBenchmarkIdx","accountWealth","futureWealth","graphDate","idx_0","benchmarkWealth","yoyCash","yoyPct","benchmarkWealth_0","dataYear","titleYear","offsetIdx","columnConfig","systemYear","WealthTable","e","ProjectedWealth","localTime","setYear","setProjectedWealth","configName","ConfigEntry","isPercent","isNan","Number","isNaN","onchange","Config","ScenarioExplorer","scenarioIndex","setScenarioIndex","scenarioData","top","bottom","right","left","overflow","t55","t56","t57","t58","i_0","toReversed","t59","t60","t61","t62","t63","t64","t65","t66","t67","t68","t69","t70","companyBonusFactor","t71","t72","t73","t74","lastThreeMeritBonusFactor","t75","lastThreeMeritBonuses","t76","i_2","t77","t78","t79","t80","t81","retirementBonusPct","t82","t83","t84","t85","i_1","InvalidDataDialog","message","downloadJson","filename","storeData","link","document","createElement","download","blob","Blob","href","window","URL","createObjectURL","click","useExport","selectFile","contentType","Promise","multiple","accept","files","from","useImport","resolve","reject","then","reader","FileReader","readAsDataURL","file","onload","readerEvent","atob","split","useStoreDataError","hadError","jsonInvalidData","validated","parseError","resetError","removeItem","System","onExport","onImport","BUILD_DATE","catch","ConfigModal","tab","setTab","App","getScenarioSize","meritSequence","getMeritSequence","companyBonusPcts","companyBonusPctWeights","getMeritPairs","allMeritPairs","meritBonusPctPair","meritPairs","mostRecentPay","yearsToGenerate","merit","groups","currentYear","workers","Worker","name","onmessage","range","loadAllScenarios","first","oldestYear","postMessage","workerIdx","priorProjectedIncome","ModuleRegistry","registerModules","AllCommunityModule","darkTheme","createTheme","palette","mode","ReactDOM","createRoot","getElementById","render","stackTrace","AdapterLuxon"],"mappings":"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"}