{"version":3,"file":"index-y2cXUnC_.js","sources":["../../src/shared/utility/sort-by-date.ts","../../src/shared/models/store/version-0/loan.ts","../../src/shared/models/store/current/account-data.ts","../../src/shared/models/store/current/account.ts","../../src/shared/models/store/current/get-default.ts","../../src/shared/models/store/version-0/account-data.ts","../../src/shared/models/store/version-0/account.ts","../../src/shared/models/store/version-0/mortgage.ts","../../src/shared/models/store/version-0/net-wealth.ts","../../src/shared/models/store/version-0/projected-income.ts","../../src/shared/models/store/version-2/projected-wealth.ts","../../src/shared/models/store/version-0/projected-wealth.ts","../../src/shared/models/store/version-1/store.ts","../../src/shared/models/store/version-2/store.ts","../../src/shared/models/store/current/mortgage.ts","../../src/shared/models/store/current/net-wealth.ts","../../src/shared/models/store/current/projected-income.ts","../../src/shared/models/store/current/projected-wealth.ts","../../src/shared/models/store/current/store.ts","../../src/shared/models/store/version-0/store.ts","../../src/shared/store/migrations.ts","../../src/shared/store/store.ts","../../src/shared/store/add-account-entry.ts","../../src/shared/store/add-projected-income.ts","../../src/shared/store/remove-account.ts","../../src/shared/store/remove-account-entry.ts","../../src/shared/store/remove-projected-income.ts","../../src/shared/store/reset-store.ts","../../src/shared/store/set-loan.ts","../../src/shared/store/update-account-date.ts","../../src/shared/store/update-account-name.ts","../../src/shared/store/update-account-value.ts","../../src/shared/store/update-projected-income.ts","../../src/capabilities/net-wealth/components/new-account/new-account.tsx","../../src/shared/components/ag-grid/ag-grid.tsx","../../src/shared/utility/current-date.ts","../../src/shared/utility/format-date.ts","../../src/shared/utility/format-cash.ts","../../src/shared/components/formatters/cash.tsx","../../src/capabilities/net-wealth/components/tab-types/account/column-config.tsx","../../src/capabilities/net-wealth/components/tab-types/account/hooks/useMissingYears.ts","../../src/shared/components/confirm-dialog.tsx","../../src/capabilities/net-wealth/components/tab-types/account/settings.tsx","../../src/capabilities/net-wealth/components/tab-types/account/account.tsx","../../src/shared/utility/find-nearest-on-or-before.ts","../../src/shared/utility/get-graph-dates.ts","../../src/shared/utility/mortgage-calc.ts","../../src/capabilities/net-wealth/components/tab-types/mortgage/add-entry.tsx","../../src/capabilities/net-wealth/components/tab-types/mortgage/column-config.tsx","../../src/capabilities/net-wealth/components/tab-types/mortgage/settings.tsx","../../src/capabilities/net-wealth/components/tab-types/mortgage/mortgage.tsx","../../src/capabilities/net-wealth/components/account-tabs/account-tabs.tsx","../../src/shared/utility/get-graph-value.ts","../../src/capabilities/net-wealth/components/wealth-chart/use-graph-data.ts","../../src/capabilities/net-wealth/components/wealth-chart/wealth-chart.tsx","../../src/capabilities/net-wealth/net-wealth.tsx","../../src/shared/components/card.tsx","../../src/shared/components/formatters/cash-range.tsx","../../src/shared/utility/format-percent.ts","../../src/shared/components/formatters/percent.tsx","../../src/shared/components/formatters/percent-range.tsx","../../src/shared/components/formatters/value.tsx","../../src/shared/components/formatters/cluster-value.tsx","../../src/shared/utility/to-human.ts","../../src/shared/components/formatters/countdown.tsx","../../src/shared/utility/find-same-year.ts","../../src/shared/hooks/use-dates.ts","../../src/shared/store/scenario-store.ts","../../src/shared/store/update-projected-income-date.ts","../../src/capabilities/projected-income/components/data-entry/column-config.tsx","../../src/capabilities/projected-income/components/data-entry/data-entry.tsx","../../src/capabilities/projected-income/components/income-per-period.tsx","../../src/capabilities/projected-income/hooks/use-gradient.ts","../../src/capabilities/projected-income/hooks/use-has-merit-pairs.ts","../../src/capabilities/projected-income/projected-income.tsx","../../src/capabilities/projected-wealth/hooks/use-future-retirement-contributions.ts","../../src/capabilities/projected-wealth/hooks/use-future-savings.ts","../../src/capabilities/projected-wealth/hooks/use-future-social-security.ts","../../src/shared/utility/cluster-helpers.ts","../../src/capabilities/projected-wealth/components/future-events/future-events.tsx","../../src/capabilities/projected-wealth/hooks/use-earliest-account-entry.ts","../../src/capabilities/projected-wealth/hooks/use-future-bonuses.ts","../../src/capabilities/projected-wealth/hooks/use-times-series-wealth.ts","../../src/capabilities/projected-wealth/components/wealth-chart.tsx","../../src/capabilities/projected-wealth/components/wealth-table/colum-config.tsx","../../src/capabilities/projected-wealth/components/wealth-table/wealth-table.tsx","../../src/capabilities/projected-wealth/projected-wealth.tsx","../../src/shared/hooks/use-export.tsx","../../src/shared/hooks/use-import.tsx","../../src/shared/hooks/use-store-data-error.ts","../../src/shared/store/set-projected-wealth.ts","../../src/app/config/config-entry.tsx","../../src/app/config/config.tsx","../../src/app/invalid-data-dialog.tsx","../../src/app/app.tsx","../../src/shared/utility/a-payday.ts","../../src/shared/web-worker/merit-sequence.ts","../../src/shared/web-worker/entry.ts","../../src/main.tsx"],"sourcesContent":["import { DateTime } from \"luxon\";\n\nexport const sortByDate =\n  <T>(select: (data: T) => DateTime, direction: \"asc\" | \"desc\") =>\n  (a: T, b: T) =>\n    direction === \"asc\" ? select(a).toMillis() - select(b).toMillis() : select(b).toMillis() - select(a).toMillis();\n","import { z } from \"zod\";\n\nexport const loanValidator = z.object({\n  principal: z.number(),\n  ratePct: z.number(),\n  paymentsPerYear: z.number(),\n  payment: z.number(),\n  firstPaymentDate: z.string(),\n  ownershipPct: z.number(),\n});\n\nexport type Loan = z.infer<typeof loanValidator>;\n","import { z } from \"zod\";\r\n\r\nexport const accountDataValidator = z.object({\r\n  date: z.string(),\r\n  value: z.number(),\r\n});\r\n\r\nexport type AccountData = z.infer<typeof accountDataValidator>;\r\n","import { z } from \"zod\";\r\nimport { accountDataValidator } from \"./account-data\";\r\n\r\nexport const accountValidator = z.object({\r\n  type: z.literal(\"account\"),\r\n  data: z.array(accountDataValidator),\r\n});\r\n\r\nexport type Account = z.infer<typeof accountValidator>;\r\n","import { Store } from \"./store\";\r\n\r\nexport const getDefaultStore = (): Store => ({\r\n  version: 3,\r\n  projectedIncome: {\r\n    timeSeries: {\r\n      paycheck: [],\r\n      meritBonusPct: [],\r\n      companyBonusPct: [\r\n        {\r\n          date: \"2020-06-15T00:00:00.000-07:00\",\r\n          value: 0.182,\r\n        },\r\n        {\r\n          date: \"2021-06-15T00:00:00.000-07:00\",\r\n          value: 0.254,\r\n        },\r\n        {\r\n          date: \"2022-06-15T00:00:00.000-07:00\",\r\n          value: 0.272,\r\n        },\r\n        {\r\n          date: \"2023-06-15T00:00:00.000-07:00\",\r\n          value: 0.168,\r\n        },\r\n      ],\r\n      meritBonus: [],\r\n      companyBonus: [],\r\n      retirementBonus: [],\r\n      equityPct: [],\r\n      meritIncreasePct: [],\r\n    },\r\n  },\r\n  wealth: {},\r\n  projectedWealth: {\r\n    medicareSupplementalTaxThreshold: 200_000,\r\n    socialSecurityLimit: 168_600,\r\n    socialSecurityTaxRate: 0.062,\r\n    medicareSupplementalTaxRate: 0.009,\r\n    savingsPerMonth: 0,\r\n    retirementContributionPaycheck: 0,\r\n    bonusWitholdingsRate: 0,\r\n  },\r\n});\r\n","import { z } from \"zod\";\n\nexport const accountDataValidator = z.object({\n  date: z.string(),\n  value: z.number(),\n  id: z.string(),\n});\n\nexport type AccountData = z.infer<typeof accountDataValidator>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const accountValidator = z.object({\n  type: z.literal(\"account\"),\n  data: z.array(accountDataValidator),\n});\n\nexport type Account = z.infer<typeof accountValidator>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\nimport { loanValidator } from \"./loan\";\n\nexport const mortgageValidator = z.object({\n  type: z.literal(\"mortgage\"),\n  loan: loanValidator.optional(),\n  data: z.array(accountDataValidator),\n});\n\nexport type Mortgage = z.infer<typeof mortgageValidator>;\n","import { z } from \"zod\";\nimport { accountValidator } from \"./account\";\nimport { mortgageValidator } from \"./mortgage\";\n\nexport const wealth = z.record(z.union([accountValidator, mortgageValidator]));\n\nexport type Wealth = z.infer<typeof wealth>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const projectedIncome = z.object({\n  timeSeries: z.object({\n    paycheck: z.array(accountDataValidator),\n    meritIncreasePct: z.array(accountDataValidator),\n    equityPct: z.array(accountDataValidator),\n    meritBonusPct: z.array(accountDataValidator),\n    meritBonus: z.array(accountDataValidator),\n    companyBonusPct: z.array(accountDataValidator),\n    companyBonus: z.array(accountDataValidator),\n    retirementBonus: z.array(accountDataValidator),\n  }),\n});\n\nexport type ProjectedIncome = z.infer<typeof projectedIncome>;\nexport type TimeSeries = keyof ProjectedIncome[\"timeSeries\"];\n","import { z } from \"zod\";\r\n\r\nexport const projectedWealth = z.object({\r\n  socialSecurityLimit: z.number(),\r\n  socialSecurityTaxRate: z.number(),\r\n  medicareSupplementalTaxThreshold: z.number(),\r\n  medicareSupplementalTaxRate: z.number(),\r\n  savingsPerMonth: z.number(),\r\n  retirementContributionPaycheck: z.number(),\r\n  bonusWitholdingsRate: z.number(),\r\n});\r\n\r\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\r\nexport type ProjectedWealthKeys = keyof ProjectedWealth;\r\n","import { z } from \"zod\";\n\nexport const projectedWealth = z.object({\n  socialSecurityLimit: z.number(),\n  socialSecurityTaxRate: z.number(),\n  medicareSupplementalTaxThreshold: z.number(),\n  medicareSupplementalTaxRate: z.number(),\n  savingsPerMonth: z.number(),\n  retirementContributionPaycheck: z.number(),\n});\n\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\nexport type ProjectedWealthKeys = keyof ProjectedWealth;\n","import { z } from \"zod\";\nimport { wealth } from \"../version-0/net-wealth\";\nimport { projectedIncome } from \"../version-0/projected-income\";\nimport { projectedWealth } from \"../version-0/projected-wealth\";\n\nexport const storeValidator = z.object({\n  version: z.literal(1),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { z } from \"zod\";\r\nimport { projectedIncome, wealth } from \"../version-1\";\r\nimport { projectedWealth } from \"./projected-wealth\";\r\n\r\nexport const storeValidator = z.object({\r\n  version: z.literal(2),\r\n  wealth: wealth,\r\n  projectedIncome: projectedIncome,\r\n  projectedWealth: projectedWealth,\r\n});\r\n\r\nexport type Store = z.infer<typeof storeValidator>;\r\n","import { z } from \"zod\";\r\nimport { loanValidator } from \"../version-2\";\r\nimport { accountDataValidator } from \"./account-data\";\r\n\r\nexport const mortgageValidator = z.object({\r\n  type: z.literal(\"mortgage\"),\r\n  loan: loanValidator.optional(),\r\n  data: z.array(accountDataValidator),\r\n});\r\n\r\nexport type Mortgage = z.infer<typeof mortgageValidator>;\r\n","import { z } from \"zod\";\r\nimport { accountValidator } from \"./account\";\r\nimport { mortgageValidator } from \"./mortgage\";\r\n\r\nexport const wealth = z.record(z.union([accountValidator, mortgageValidator]));\r\n\r\nexport type Wealth = z.infer<typeof wealth>;\r\n","import { z } from \"zod\";\r\nimport { accountDataValidator } from \"./account-data\";\r\n\r\nexport const projectedIncome = z.object({\r\n  timeSeries: z.object({\r\n    paycheck: z.array(accountDataValidator),\r\n    meritIncreasePct: z.array(accountDataValidator),\r\n    equityPct: z.array(accountDataValidator),\r\n    meritBonusPct: z.array(accountDataValidator),\r\n    meritBonus: z.array(accountDataValidator),\r\n    companyBonusPct: z.array(accountDataValidator),\r\n    companyBonus: z.array(accountDataValidator),\r\n    retirementBonus: z.array(accountDataValidator),\r\n  }),\r\n});\r\n\r\nexport type ProjectedIncome = z.infer<typeof projectedIncome>;\r\nexport type TimeSeries = keyof ProjectedIncome[\"timeSeries\"];\r\n","import { z } from \"zod\";\r\n\r\nexport const projectedWealth = z.object({\r\n  socialSecurityLimit: z.number(),\r\n  socialSecurityTaxRate: z.number(),\r\n  medicareSupplementalTaxThreshold: z.number(),\r\n  medicareSupplementalTaxRate: z.number(),\r\n  savingsPerMonth: z.number(),\r\n  retirementContributionPaycheck: z.number(),\r\n  bonusWitholdingsRate: z.number(),\r\n});\r\n\r\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\r\nexport type ProjectedWealthKeys = keyof ProjectedWealth;\r\n","import { z } from \"zod\";\r\nimport { wealth } from \"./net-wealth\";\r\nimport { projectedIncome } from \"./projected-income\";\r\nimport { projectedWealth } from \"./projected-wealth\";\r\n\r\nexport const storeValidator = z.object({\r\n  version: z.literal(3),\r\n  wealth: wealth,\r\n  projectedIncome: projectedIncome,\r\n  projectedWealth: projectedWealth,\r\n});\r\n\r\nexport type Store = z.infer<typeof storeValidator>;\r\n","import { z } from \"zod\";\nimport { wealth } from \"./net-wealth\";\nimport { projectedIncome } from \"./projected-income\";\nimport { projectedWealth } from \"./projected-wealth\";\n\nexport const storeValidator = z.object({\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { Store, storeValidator } from \"shared/models/store/current\";\r\nimport { storeValidator as storeV0Validator } from \"shared/models/store/version-0\";\r\nimport { Store as StoreV1, storeValidator as storeV1Validator } from \"shared/models/store/version-1\";\r\nimport { Store as StoreV2, storeValidator as storeV2Validator } from \"shared/models/store/version-2\";\r\n\r\nexport const migration = (data: unknown) => {\r\n  if (data === null || data === undefined) {\r\n    throw new Error(\"parsed data is null or undefined\");\r\n  } else if (typeof data !== \"object\") {\r\n    throw new Error(\"Parsed data is not an object\");\r\n  }\r\n\r\n  if (!(\"version\" in data)) {\r\n    storeV0Validator.parse(data);\r\n    (data as StoreV1).version = 1;\r\n  }\r\n\r\n  if (\"version\" in data) {\r\n    if (data.version === 1) {\r\n      storeV1Validator.parse(data);\r\n      (data as StoreV2).version = 2;\r\n      (data as StoreV2).projectedWealth.bonusWitholdingsRate = 0;\r\n    }\r\n    if (data.version === 2) {\r\n      storeV2Validator.parse(data);\r\n      (data as Store).version = 3;\r\n    }\r\n  }\r\n\r\n  const next = storeValidator.parse(data);\r\n  console.log(next);\r\n  return next;\r\n};\r\n","import { Store as CreateStore } from \"@tanstack/store\";\nimport { ZodSchema } from \"zod\";\nimport { Store, getDefaultStore, storeValidator } from \"../models/store/current\";\nimport { migration } from \"./migrations\";\n\nconst createStore = <T extends object>(validator: ZodSchema, defaultValue: T) => {\n  const key = \"store\";\n  const invalidData = \"store-invalid\";\n  const localData = localStorage.getItem(key);\n  const data = localData ? JSON.parse(localData) : defaultValue;\n  const parse = validator.safeParse(data);\n\n  if (!parse.success) {\n    try {\n      migration(data);\n      localStorage.setItem(key, JSON.stringify(data));\n    } catch (err) {\n      console.log(\"error\", err);\n      console.log(\"invalid data\", data);\n      localStorage.setItem(invalidData, JSON.stringify(data));\n      localStorage.setItem(key, JSON.stringify(defaultValue));\n    }\n  }\n\n  const store = new CreateStore<T>(data);\n  store.subscribe(() => {\n    const current = localStorage.getItem(key);\n    current && localStorage.setItem(`${key}-previous`, current);\n    localStorage.setItem(key, JSON.stringify(store.state));\n  });\n\n  return store;\n};\n\nexport const store = createStore<Store>(storeValidator, getDefaultStore());\n","import { DateTime } from \"luxon\";\r\nimport { create } from \"mutative\";\r\nimport { Account } from \"shared/models/store/current\";\r\nimport { sortByDate } from \"../utility/sort-by-date\";\r\nimport { store } from \"./store\";\r\n\r\nexport const AddAccountEntry = (accountName: string, date: DateTime<true>, amount: number) => {\r\n  store.setState((prev) => {\r\n    return create(prev, (next) => {\r\n      (next.wealth[accountName] as Account).data.push({\r\n        date: date.startOf(\"day\").toString(),\r\n        value: amount,\r\n      });\r\n      next.wealth[accountName].data.sort(sortByDate((x) => DateTime.fromISO(x.date), \"asc\"));\r\n    });\r\n  });\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport { create } from \"mutative\";\r\nimport { TimeSeries } from \"shared/models/store/current\";\r\nimport { sortByDate } from \"shared/utility/sort-by-date\";\r\nimport { store } from \"./store\";\r\n\r\nexport const addProjectedIncome = (date: DateTime, timeSeries: TimeSeries, value: number) => {\r\n  store.setState((prev) => {\r\n    return create(prev, (next) => {\r\n      next.projectedIncome.timeSeries[timeSeries] = next.projectedIncome.timeSeries[timeSeries]\r\n        .concat({\r\n          date: date.startOf(\"day\").toString(),\r\n          value,\r\n        })\r\n        .sort(sortByDate((x) => DateTime.fromISO(x.date), \"asc\"));\r\n    });\r\n  });\r\n};\r\n","import { create } from \"mutative\";\nimport { store } from \"./store\";\n\nexport const removeAccount = (accountName: string) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      delete next.wealth[accountName];\n    });\n  });\n","import { create } from \"mutative\";\r\nimport { AccountData } from \"shared/models/store/current\";\r\nimport { store } from \"./store\";\r\n\r\nexport const removeAccountEntry = (accountName: string, data: AccountData) =>\r\n  store.setState((prev) => {\r\n    return create(prev, (next) => {\r\n      const idxToRemove = next.wealth[accountName].data.findIndex((x) => x === data);\r\n      next.wealth[accountName].data.splice(idxToRemove, 1);\r\n      return next;\r\n    });\r\n  });\r\n","import { create } from \"mutative\";\r\nimport { AccountData, TimeSeries } from \"shared/models/store/current\";\r\nimport { store } from \".\";\r\n\r\nexport const removeProjectedIncome = (accountName: TimeSeries, data: AccountData) => {\r\n  store.setState((prev) => {\r\n    return create(prev, (next) => {\r\n      const idxToRemove = next.projectedIncome.timeSeries[accountName].findIndex((x) => x === data);\r\n      next.projectedIncome.timeSeries[accountName].splice(idxToRemove, 1);\r\n    });\r\n  });\r\n};\r\n","import { getDefaultStore } from \"shared/models/store/current\";\nimport { store } from \"./store\";\n\nexport const resetStore = () => store.setState(() => getDefaultStore());\n","import { create } from \"mutative\";\nimport { Loan, Mortgage } from \"shared/models/store/current\";\nimport { store } from \"./store\";\n\nexport const setLoan = (accountName: string, loan: Loan) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      if (next.wealth[accountName].type === \"mortgage\") {\n        (next.wealth[accountName] as Mortgage).loan = loan;\n      }\n    });\n  });\n","import { DateTime } from \"luxon\";\r\nimport { create } from \"mutative\";\r\nimport { AccountData } from \"shared/models/store/current\";\r\nimport { store } from \".\";\r\n\r\nexport const updateAccountDate = (accountName: string, data: AccountData, date: DateTime) => {\r\n  store.setState((prev) => {\r\n    const next = create(prev, (next) => {\r\n      const account = next.wealth[accountName];\r\n      const idx = account?.data.findIndex((x) => x === data);\r\n      if (idx >= 0) {\r\n        account.data[idx].date = date.toISO()!;\r\n      }\r\n    });\r\n    return next;\r\n  });\r\n};\r\n","import { create } from \"mutative\";\nimport { store } from \"./store\";\n\nexport const updateAccountName = (currentAccountName: string, newAccountName: string) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      next.wealth[newAccountName] = next.wealth[currentAccountName];\n      delete next.wealth[currentAccountName];\n    });\n  });\n","import { create } from \"mutative\";\r\nimport { AccountData } from \"shared/models/store/current\";\r\nimport { store } from \".\";\r\n\r\nexport const updateAccountValue = (accountName: string, data: AccountData, value: number) => {\r\n  store.setState((prev) => {\r\n    const next = create(prev, (next) => {\r\n      const account = next.wealth[accountName];\r\n      const idx = account?.data.findIndex((x) => x === data);\r\n      if (idx >= 0) {\r\n        account.data[idx].value = value;\r\n      }\r\n    });\r\n    return next;\r\n  });\r\n};\r\n","import { create } from \"mutative\";\r\nimport { AccountData, TimeSeries } from \"shared/models/store/current\";\r\nimport { store } from \".\";\r\n\r\nexport const updateProjectedIncome = (timeSeries: TimeSeries, data: AccountData, value: number) => {\r\n  store.setState((prev) => {\r\n    const next = create(prev, (next) => {\r\n      const account = next.projectedIncome.timeSeries[timeSeries];\r\n      const idx = account.findIndex((x) => x === data);\r\n      account[idx].value = value;\r\n    });\r\n    return next;\r\n  });\r\n};\r\n","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, MenuItem, Stack, TextField } from \"@mui/material\";\nimport { create } from \"mutative\";\nimport { ReactNode, forwardRef, useRef, useState } from \"react\";\nimport { store } from \"shared/store\";\n\ntype AssetType = \"account\" | \"mortgage\";\nexport const NewAccount = forwardRef<HTMLButtonElement, { children?: ReactNode }>((props, ref) => {\n  const [open, setOpen] = useState(false);\n  const nameRef = useRef<HTMLInputElement>(null);\n  const [error, setError] = useState(false);\n  const [accountType, setAccountType] = useState<AssetType>();\n\n  return (\n    <>\n      <Button\n        ref={ref}\n        variant=\"outlined\"\n        onClick={() => {\n          setOpen(true);\n          setError(false);\n          setAccountType(undefined);\n        }}\n        sx={{ marginTop: 3 }}\n      >\n        add account\n      </Button>\n\n      <Dialog open={open} onClose={() => setOpen(false)}>\n        <DialogTitle>Add New Account</DialogTitle>\n        <DialogContent>\n          <Stack spacing={2} margin={2}>\n            <TextField\n              select\n              color={error ? \"error\" : \"primary\"}\n              onChange={(value) => {\n                setError(false);\n                setAccountType(value.target.value as AssetType);\n              }}\n              label=\"Type\"\n            >\n              <MenuItem value=\"mortgage\">Mortgage</MenuItem>\n              <MenuItem value=\"account\">Generic Account</MenuItem>\n            </TextField>\n\n            <TextField\n              placeholder=\"Name\"\n              onChange={() => {\n                setError(false);\n              }}\n              error={error}\n              inputRef={nameRef}\n            />\n          </Stack>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            disabled={error}\n            onClick={() => {\n              store.setState((prev) => {\n                return create(prev, (next) => {\n                  if (!nameRef.current?.value || !accountType || prev.wealth[nameRef.current.value]) {\n                    setError(true);\n                    return;\n                  }\n\n                  next.wealth[nameRef.current.value] = {\n                    type: accountType,\n                    data: [],\n                  };\n\n                  setOpen(false);\n                });\n              });\n            }}\n          >\n            Add\n          </Button>\n        </DialogActions>\n      </Dialog>\n      {props?.children}\n    </>\n  );\n});\n","import { AgGridReact, AgGridReactProps } from \"ag-grid-react\";\n\nexport const AgGrid = (props: AgGridReactProps & { id: string }) => {\n  const { id, ...rest } = props;\n  return (\n    <div id={id} className=\"ag-theme-quartz-dark\" style={{ height: \"100%\" }}>\n      <AgGridReact {...rest} suppressMovableColumns />\n    </div>\n  );\n};\n","import { DateTime } from \"luxon\";\n\nexport const getLocalDateTime = () => DateTime.local();\n","export const shortDate = \"yyyy-MM-dd\";\n\nexport const monthDay = \"MMM dd\";\n","export const formatCashShort = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  notation: \"compact\",\n  maximumFractionDigits: 0,\n}).format;\n\nexport const formatCash = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  maximumFractionDigits: 0,\n}).format;\n","import { Tooltip } from \"@mui/material\";\nimport { useMemo } from \"react\";\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\n\ninterface CashProps {\n  value?: number;\n  fallback?: number;\n  disableTooltip?: boolean;\n  compact?: boolean;\n  tooltip?: string;\n  placement?:\n    | \"top\"\n    | \"right\"\n    | \"bottom\"\n    | \"left\"\n    | \"bottom-end\"\n    | \"bottom-start\"\n    | \"left-end\"\n    | \"left-start\"\n    | \"right-end\"\n    | \"right-start\"\n    | \"top-end\"\n    | \"top-start\"\n    | undefined;\n}\nexport const Cash = ({ value, fallback, disableTooltip, compact = true, tooltip, placement }: CashProps) => {\n  const formatted = useMemo(() => {\n    if (value === undefined) {\n      return fallback;\n    }\n    return compact ? formatCashShort(value) : formatCash(value);\n  }, [compact, fallback, value]);\n\n  return (\n    <Tooltip\n      placement={placement}\n      disableHoverListener={disableTooltip || !compact || !value}\n      title={[tooltip, formatCash(value!)].join(\" \")}\n    >\n      <span>{formatted}</span>\n    </Tooltip>\n  );\n};\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\r\nimport { Button } from \"@mui/material\";\r\nimport { ColDef } from \"ag-grid-community\";\r\nimport { CustomCellRendererProps } from \"ag-grid-react\";\r\nimport { DateTime } from \"luxon\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { AccountData } from \"shared/models/store/current\";\r\nimport { updateAccountDate, updateAccountValue } from \"shared/store\";\r\nimport { removeAccountEntry } from \"shared/store/remove-account-entry\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\n\r\nexport const createAccountColumnConfig = (accountName: string): ColDef<AccountData>[] => [\r\n  {\r\n    headerName: \"Date\",\r\n    sort: \"desc\",\r\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\r\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\r\n    cellEditor: \"agDateCellEditor\",\r\n    editable: true,\r\n    valueSetter: (x) => {\r\n      const date = DateTime.fromJSDate(x.newValue);\r\n      if (date.isValid) {\r\n        updateAccountDate(accountName, x.data, date);\r\n      }\r\n      return date.isValid;\r\n    },\r\n  },\r\n  {\r\n    headerName: \"Value\",\r\n    valueGetter: (x) => x.data?.value,\r\n    valueSetter: (x) => {\r\n      updateAccountValue(accountName, x.data, +x.newValue);\r\n      return true;\r\n    },\r\n    cellRenderer: (x: CustomCellRendererProps<AccountData>) => <Cash value={x.value} placement=\"left\" />,\r\n    editable: true,\r\n    cellEditor: \"agNumberCellEditor\",\r\n    type: \"numericColumn\",\r\n  },\r\n  {\r\n    cellStyle: () => ({ display: \"inline-flex\", padding: \"0px\" }),\r\n    sortable: false,\r\n    headerName: \"\",\r\n    width: 80,\r\n    colId: \"actions\",\r\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\r\n      return (\r\n        <Button\r\n          onClick={() => {\r\n            props.data && removeAccountEntry(accountName, props.data);\r\n          }}\r\n          color=\"error\"\r\n          fullWidth\r\n        >\r\n          <DeleteForeverIcon />\r\n        </Button>\r\n      );\r\n    },\r\n  },\r\n];\r\n","import { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { Account } from \"shared/models/store/current\";\n\nexport const useMissingYears = (account: Account) => {\n  return useMemo(() => {\n    const years = Object.entries(Object.groupBy(account.data, (x) => DateTime.fromISO(x.date).year))\n      .map(\n        ([year, entries]) =>\n          [\n            +year,\n            !!entries?.find((x) => {\n              const date = DateTime.fromISO(x.date);\n              const janFirst = DateTime.fromObject({\n                day: 1,\n                month: 1,\n                year: +year,\n              });\n              return date.diff(janFirst, [\"days\", \"hours\"]).days == 0;\n            }),\n          ] as [number, boolean]\n      )\n      .sort(([a], [b]) => {\n        return a - b;\n      });\n\n    const lookup = Object.fromEntries(years);\n    const missing = [];\n    for (let i = years[0]?.[0] ?? 0; i <= years[years.length - 1]?.[0]; i++) {\n      if (!lookup[i]) {\n        missing.push(i);\n      }\n    }\n    return missing;\n  }, [account.data]);\n};\n","import { Button, Dialog, DialogActions, DialogTitle } from \"@mui/material\";\r\nimport React, { ReactElement, useMemo, useState } from \"react\";\r\n\r\ninterface ConfirmDialogProps {\r\n  onConfirm?: () => void;\r\n  title: string;\r\n  children: ReactElement;\r\n}\r\nexport const ConfirmDialog = (props: ConfirmDialogProps) => {\r\n  const { onConfirm, title, children } = props;\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const openButton = useMemo(() => {\r\n    return React.cloneElement(children, { onClick: () => setIsOpen(true) });\r\n  }, [children]);\r\n\r\n  return (\r\n    <>\r\n      {openButton}\r\n      <Dialog open={isOpen} onClose={() => setIsOpen(false)}>\r\n        <DialogTitle sx={{ minWidth: 300, display: \"flex\", justifyContent: \"center\" }}>{title}</DialogTitle>\r\n        <DialogActions>\r\n          <Button sx={{ marginRight: \"auto\" }} onClick={() => setIsOpen(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button variant=\"contained\" color=\"error\" onClick={onConfirm}>\r\n            Confirm\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n","import Close from \"@mui/icons-material/Close\";\r\nimport SettingsIcon from \"@mui/icons-material/Settings\";\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  IconButton,\r\n  Stack,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport { ConfirmDialog } from \"shared/components/confirm-dialog\";\r\nimport { removeAccount, updateAccountName } from \"shared/store\";\r\n\r\ninterface AccountSettingsProps {\r\n  accountName: string;\r\n}\r\n\r\nexport const AccountSettings = (props: AccountSettingsProps) => {\r\n  const { accountName } = props;\r\n  const [nextAccountName, setNextAccountName] = useState<string>(accountName);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  return (\r\n    <>\r\n      <IconButton onClick={() => setIsOpen(true)}>\r\n        <SettingsIcon />\r\n      </IconButton>\r\n      <Dialog open={isOpen} onClose={() => setIsOpen(false)}>\r\n        <DialogTitle>\r\n          <Stack direction={\"row\"} width=\"100%\" alignItems={\"center\"} justify-content={\"space-between\"}>\r\n            <Typography variant=\"h6\">{accountName} Settings</Typography>\r\n            <IconButton onClick={() => setIsOpen(false)}>\r\n              <Close />\r\n            </IconButton>\r\n          </Stack>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Stack spacing={1} marginTop={1}>\r\n            <TextField\r\n              label=\"Account Name\"\r\n              value={nextAccountName}\r\n              onChange={(event) => setNextAccountName(event.target.value)}\r\n              placeholder=\"\"\r\n            />\r\n          </Stack>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <ConfirmDialog onConfirm={() => removeAccount(accountName)} title={`Confirm Deleting ${accountName} Account`}>\r\n            <Button sx={{ marginRight: 10 }} color=\"error\">\r\n              Delete Account\r\n            </Button>\r\n          </ConfirmDialog>\r\n          <Button\r\n            disabled={!nextAccountName}\r\n            onClick={() => {\r\n              setIsOpen(false);\r\n            }}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            disabled={!nextAccountName}\r\n            onClick={() => {\r\n              accountName != nextAccountName && updateAccountName(accountName, nextAccountName);\r\n              setIsOpen(false);\r\n            }}\r\n          >\r\n            Save\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n","import { Alert, Box, Button, InputAdornment, Paper, Stack, TextField, Typography } from \"@mui/material\";\nimport Grid from \"@mui/system/Unstable_Grid\";\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo, useRef, useState } from \"react\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { Account } from \"shared/models/store/current\";\nimport { AddAccountEntry, store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { createAccountColumnConfig } from \"./column-config\";\nimport { useMissingYears } from \"./hooks/useMissingYears\";\nimport { AccountSettings } from \"./settings\";\n\nexport const AccountTab = (props: { accountName: string }) => {\n  const { accountName } = props;\n  const account = useStore(store, (state) => state.wealth[accountName]) as Account;\n  const [date, setDate] = useState(getLocalDateTime());\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const missingYears = useMissingYears(account);\n  const hasSameDate = useMemo(() => {\n    return !!account?.data?.find((x) => date.hasSame(DateTime.fromISO(x.date), \"day\"));\n  }, [account?.data, date]);\n\n  const onAddEntry = () => {\n    inputRef.current && AddAccountEntry(accountName, date, +inputRef.current?.value);\n  };\n\n  const accountColumnConfig = useMemo(() => {\n    return createAccountColumnConfig(accountName);\n  }, [accountName]);\n\n  return (\n    <Stack height=\"100%\" spacing={2}>\n      <Stack direction={\"row\"}>\n        <Typography variant=\"h5\">{accountName}</Typography>\n        <Box sx={{ marginLeft: \"auto\" }}>\n          <AccountSettings key={accountName} accountName={accountName} />\n        </Box>\n      </Stack>\n      {missingYears.length > 0 && (\n        <Grid xs={12}>\n          <Paper elevation={3}>\n            <Alert severity=\"warning\">Ensure an entry for Jan 1st for each year {missingYears.join(\", \")}</Alert>\n          </Paper>\n        </Grid>\n      )}\n\n      <DatePicker\n        format={shortDate}\n        sx={{ color: \"white\" }}\n        label=\"Date\"\n        defaultValue={date}\n        onChange={(value) => value && setDate(value)}\n      />\n      <TextField\n        key={accountName}\n        label=\"amount\"\n        type=\"number\"\n        inputRef={inputRef}\n        InputProps={{\n          startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n        }}\n        placeholder=\"0\"\n      />\n      <Button disabled={!date || hasSameDate} onClick={onAddEntry}>\n        Add Entry\n      </Button>\n\n      <AgGrid\n        reactiveCustomComponents\n        rowData={account.data}\n        columnDefs={accountColumnConfig}\n        id={account + \"-history\"}\n        autoSizeStrategy={{ type: \"fitGridWidth\" }}\n        onRowDataUpdated={(x) => x.api.sizeColumnsToFit()}\n        stopEditingWhenCellsLoseFocus\n      />\n    </Stack>\n  );\n};\n","import { DateTime } from \"luxon\";\nimport { AccountData } from \"shared/models/store/current\";\n\nexport const findNearestOnOrBefore = (date: DateTime, data: AccountData[]) => {\n  return data.find((x, idx, array) => {\n    if (idx == 0 && DateTime.fromISO(x.date).startOf(\"day\") >= date) {\n      return true;\n    }\n\n    if (\n      idx < array.length - 1 &&\n      DateTime.fromISO(x.date).startOf(\"day\") <= date &&\n      DateTime.fromISO(data[idx + 1].date).startOf(\"day\") > date\n    ) {\n      return true;\n    }\n\n    if (idx === array.length - 1) {\n      return true;\n    }\n  });\n};\n\nexport const findNearestIdxOnOrBefore = <T>(date: DateTime, data: T[], selector: (data: T) => DateTime) => {\n  return data.findIndex((x, idx, array) => {\n    if (idx == 0 && selector(x) >= date) {\n      return true;\n    }\n\n    if (idx < array.length - 1 && selector(x) <= date && selector(data[idx + 1]) > date) {\n      return true;\n    }\n\n    if (idx === array.length - 1) {\n      return true;\n    }\n  });\n};\n","import { DateTime } from \"luxon\";\nimport { Account, Mortgage } from \"shared/models/store/current\";\n\nexport const getGraphDates = (accounts: (Account | Mortgage)[]) => {\n  return [\n    ...new Set(\n      accounts.flatMap((x) => {\n        return x.data.map((x) => DateTime.fromISO(x.date).startOf(\"day\").toISO());\n      })\n    ),\n  ]\n    .map((x) => DateTime.fromISO(x!))\n    .sort((a, b) => a.toMillis() - b.toMillis()) as DateTime<true>[];\n};\n","import { DateTime } from \"luxon\";\nimport { Loan } from \"shared/models/store/current\";\n\nexport const calcLoanBalance = (date: DateTime, loan: Loan) => {\n  const { firstPaymentDate, paymentsPerYear, principal: principal, ratePct: rate, payment: monthlyPayment } = loan;\n  const annualizedRate = rate / paymentsPerYear;\n  const periods = date.diff(DateTime.fromISO(firstPaymentDate), \"months\").months;\n  const totalRate = (1 + annualizedRate) ** periods;\n  const balance = principal * totalRate - (monthlyPayment / annualizedRate) * (totalRate - 1);\n\n  return balance;\n};\n\nexport const calcEquity = (\n  ownershipPct: number,\n  houseValue: number | undefined,\n  loanBalance: number,\n  principal: number\n) => {\n  return houseValue ? houseValue * ownershipPct - loanBalance : principal - loanBalance;\n};\n","import { Button, InputAdornment, TextField } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { DateTime } from \"luxon\";\nimport { useRef, useState } from \"react\";\nimport { AddAccountEntry } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\n\nexport const AddEntry = (props: { accountName: string }) => {\n  const { accountName } = props;\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [date, setDate] = useState<DateTime>();\n\n  const onAddEntry = () => {\n    const value = inputRef.current?.value;\n    if (!date || !value) {\n      return;\n    }\n    AddAccountEntry(accountName, date, +value);\n  };\n\n  return (\n    <Stack spacing={2}>\n      <DatePicker\n        defaultValue={getLocalDateTime()}\n        onChange={(date: DateTime | null) => {\n          date && setDate(date);\n        }}\n      />\n      <TextField\n        key={accountName}\n        label=\"Home value\"\n        type=\"numeric\"\n        inputRef={inputRef}\n        InputProps={{\n          startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n        }}\n        placeholder=\"0\"\n      />\n      <Button onClick={onAddEntry}>Add Home Value</Button>\n    </Stack>\n  );\n};\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\r\nimport { Button } from \"@mui/material\";\r\nimport { ColDef } from \"ag-grid-community\";\r\nimport { CustomCellRendererProps } from \"ag-grid-react\";\r\nimport { DateTime } from \"luxon\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { AccountData } from \"shared/models/store/current\";\r\nimport { removeAccountEntry } from \"shared/store\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\n\r\nexport const createAccountColumnConfig = (accountName: string): ColDef<AccountData>[] => [\r\n  {\r\n    headerName: \"Date\",\r\n    sort: \"desc\",\r\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\r\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\r\n  },\r\n  {\r\n    headerName: \"Home Value\",\r\n    cellRenderer: (x: CustomCellRendererProps<AccountData>) => <Cash value={x.value} placement=\"left\" />,\r\n    valueGetter: (x) => x.data?.value,\r\n    type: \"numericColumn\",\r\n  },\r\n  {\r\n    cellStyle: () => ({ display: \"inline-flex\", padding: \"0px\" }),\r\n    headerName: \"\",\r\n    width: 80,\r\n    sortable: false,\r\n    colId: \"actions\",\r\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\r\n      return (\r\n        <Button\r\n          onClick={() => {\r\n            props.data && removeAccountEntry(accountName, props.data);\r\n          }}\r\n          color=\"error\"\r\n          fullWidth\r\n        >\r\n          <DeleteForeverIcon />\r\n        </Button>\r\n      );\r\n    },\r\n  },\r\n];\r\n\r\ntype House = {\r\n  date: DateTime;\r\n  balance: number;\r\n  equity: number;\r\n};\r\n\r\nexport const mortgageColumnConfig: ColDef<House>[] = [\r\n  {\r\n    headerName: \"Date\",\r\n    sort: \"desc\",\r\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\r\n    valueGetter: (x) => x.data?.date,\r\n  },\r\n  {\r\n    headerName: \"Loan Balance\",\r\n    valueGetter: (x) => x.data?.balance.toFixed(2),\r\n    cellRenderer: (x: CustomCellRendererProps<House>) => <Cash value={x.value} placement=\"left\" />,\r\n    type: \"numericColumn\",\r\n  },\r\n  {\r\n    headerName: \"Equity\",\r\n    valueGetter: (x) => x.data?.equity.toFixed(2),\r\n    cellRenderer: (x: CustomCellRendererProps<House>) => <Cash value={x.value} placement=\"left\" />,\r\n    type: \"numericColumn\",\r\n  },\r\n];\r\n","import Close from \"@mui/icons-material/Close\";\r\nimport SettingsIcon from \"@mui/icons-material/Settings\";\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  IconButton,\r\n  Stack,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { DatePicker } from \"@mui/x-date-pickers\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useRef, useState } from \"react\";\r\nimport { ConfirmDialog } from \"shared/components/confirm-dialog\";\r\nimport { Loan } from \"shared/models/store/version-1\";\r\nimport { removeAccount, setLoan, store, updateAccountName } from \"shared/store\";\r\nimport { ZodIssue, z } from \"zod\";\r\n\r\nconst convertPct = (value: number) => {\r\n  return value > 1 ? value / 100 : value;\r\n};\r\n\r\nconst validator: z.ZodType<Loan> = z.object({\r\n  principal: z.number().min(0),\r\n  ratePct: z.number().min(0),\r\n  paymentsPerYear: z.number().min(0),\r\n  payment: z.number().min(0),\r\n  firstPaymentDate: z.string().datetime({ offset: true }),\r\n  ownershipPct: z.number().min(0),\r\n});\r\n\r\ninterface AccountSettingsProps {\r\n  accountName: string;\r\n}\r\n\r\nexport const AccountSettings = (props: AccountSettingsProps) => {\r\n  const { accountName } = props;\r\n  const [nextAccountName, setNextAccountName] = useState<string>(accountName);\r\n  const loan = useStore(store, (x) => {\r\n    const account = x.wealth[accountName];\r\n    if (\"loan\" in account) {\r\n      return account.loan;\r\n    }\r\n  });\r\n\r\n  const ref = useRef<Partial<Loan>>(loan ?? {});\r\n  const [error, setError] = useState<Partial<Record<keyof Loan, ZodIssue>>>({});\r\n\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const handleClose = () => {\r\n    setError({});\r\n    ref.current = loan ?? {};\r\n    setIsOpen(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton onClick={() => setIsOpen(true)}>\r\n        <SettingsIcon />\r\n      </IconButton>\r\n      <Dialog open={isOpen} onClose={handleClose}>\r\n        <DialogTitle>\r\n          <Stack direction={\"row\"} width=\"100%\" alignItems={\"center\"} justify-content={\"space-between\"}>\r\n            <Typography variant=\"h6\">{accountName} Settings</Typography>\r\n            <IconButton onClick={handleClose}>\r\n              <Close />\r\n            </IconButton>\r\n          </Stack>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Stack spacing={2} marginTop={1}>\r\n            <TextField\r\n              label=\"Account Name\"\r\n              value={nextAccountName}\r\n              onChange={(event) => setNextAccountName(event.target.value)}\r\n              placeholder=\"\"\r\n            />\r\n            <DatePicker\r\n              defaultValue={ref.current?.firstPaymentDate ? DateTime.fromISO(ref.current.firstPaymentDate) : null}\r\n              label=\"First Payment\"\r\n              slotProps={{\r\n                textField: {\r\n                  error: !!error.firstPaymentDate,\r\n                },\r\n              }}\r\n              onChange={(value: DateTime | null) => {\r\n                if (value) {\r\n                  ref.current.firstPaymentDate = value.startOf(\"day\").toISO()!;\r\n                }\r\n              }}\r\n            />\r\n            <TextField\r\n              error={!!error.principal}\r\n              defaultValue={loan?.principal}\r\n              onChange={(event) => {\r\n                ref.current.principal = +event.target.value;\r\n              }}\r\n              variant=\"outlined\"\r\n              label=\"Principal\"\r\n              type=\"number\"\r\n            />\r\n            <TextField\r\n              error={!!error.ratePct}\r\n              defaultValue={loan?.ratePct}\r\n              onChange={(event) => {\r\n                ref.current.ratePct = convertPct(+event.target.value);\r\n              }}\r\n              variant=\"outlined\"\r\n              label=\"Rate\"\r\n              type=\"number\"\r\n            />\r\n            <TextField\r\n              error={!!error.paymentsPerYear}\r\n              defaultValue={loan?.paymentsPerYear}\r\n              onChange={(event) => {\r\n                ref.current.paymentsPerYear = +event.target.value;\r\n              }}\r\n              variant=\"outlined\"\r\n              label=\"Payments Per Year\"\r\n              type=\"number\"\r\n            />\r\n            <TextField\r\n              defaultValue={loan?.payment}\r\n              error={!!error.payment}\r\n              onChange={(event) => {\r\n                ref.current.payment = +event.target.value;\r\n              }}\r\n              variant=\"outlined\"\r\n              label=\"Payment\"\r\n              type=\"number\"\r\n            />\r\n            <TextField\r\n              defaultValue={loan?.ownershipPct}\r\n              error={!!error.ownershipPct}\r\n              onChange={(event) => {\r\n                ref.current.ownershipPct = convertPct(+event.target.value);\r\n              }}\r\n              variant=\"outlined\"\r\n              label=\"Ownership (%)\"\r\n              type=\"number\"\r\n            />\r\n          </Stack>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <ConfirmDialog\r\n            onConfirm={() => removeAccount(accountName)}\r\n            title={`Confirm Deleting ${accountName} Mortgage`}\r\n          >\r\n            <Button sx={{ marginRight: 10 }} color=\"error\">\r\n              Delete Account\r\n            </Button>\r\n          </ConfirmDialog>\r\n          <Button disabled={!nextAccountName} onClick={handleClose}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            disabled={!nextAccountName}\r\n            onClick={() => {\r\n              const parsed = validator.safeParse(ref.current);\r\n              if (parsed.success) {\r\n                accountName != nextAccountName && updateAccountName(accountName, nextAccountName);\r\n                setLoan(accountName, parsed.data);\r\n                handleClose();\r\n              } else {\r\n                const issues = Object.groupBy(parsed.error.issues, (x) => x.path.join(\"\"));\r\n                setError(issues);\r\n              }\r\n            }}\r\n          >\r\n            Save\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\nimport { useMemo } from \"react\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { Mortgage } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\n\nimport { findNearestOnOrBefore } from \"shared/utility/find-nearest-on-or-before\";\nimport { getGraphDates } from \"shared/utility/get-graph-dates\";\nimport { calcEquity, calcLoanBalance } from \"shared/utility/mortgage-calc\";\n\nimport { Typography } from \"@mui/material\";\nimport { Box, Stack } from \"@mui/system\";\nimport { AddEntry } from \"./add-entry\";\nimport { createAccountColumnConfig, mortgageColumnConfig } from \"./column-config\";\nimport { AccountSettings } from \"./settings\";\n\nexport const MortgageTab = (props: { accountName: string }) => {\n  const { accountName } = props;\n\n  const account = useStore(store, (state) => state.wealth[accountName]) as Mortgage;\n\n  const allAccounts = useStore(store, (x) => x.wealth);\n\n  const accountColumnConfig = useMemo(() => {\n    return createAccountColumnConfig(accountName);\n  }, [accountName]);\n\n  const mortgageData = useMemo(() => {\n    if (!account?.loan) {\n      return [];\n    }\n\n    return getGraphDates(Object.values(allAccounts)).map((date) => {\n      const loanBalance = calcLoanBalance(date, account.loan!);\n      return {\n        date,\n        balance: loanBalance,\n        equity: calcEquity(\n          account.loan!.ownershipPct,\n          findNearestOnOrBefore(date, account.data)?.value,\n          loanBalance,\n          account.loan!.principal\n        ),\n      };\n    });\n  }, [account, allAccounts]);\n\n  return (\n    <Stack height=\"100%\" spacing={2}>\n      <Stack direction={\"row\"}>\n        <Typography variant=\"h5\">{accountName}</Typography>\n        <Box sx={{ marginLeft: \"auto\" }}>\n          <AccountSettings key={accountName} accountName={accountName} />\n        </Box>\n      </Stack>\n      <AddEntry accountName={accountName} />\n      <AgGrid\n        reactiveCustomComponents\n        rowData={account?.data ?? []}\n        columnDefs={accountColumnConfig}\n        id={account + \"-history\"}\n        autoSizeStrategy={{ type: \"fitGridWidth\" }}\n      />\n\n      <AgGrid\n        rowData={mortgageData}\n        columnDefs={mortgageColumnConfig}\n        id={account + \"-history\"}\n        autoSizeStrategy={{ type: \"fitGridWidth\" }}\n      />\n    </Stack>\n  );\n};\n","import { Box, Tab, Tabs } from \"@mui/material\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { useEffect, useState } from \"react\";\nimport { store } from \"shared/store\";\nimport { NewAccount } from \"../new-account\";\nimport { AccountTab } from \"../tab-types/account/account\";\nimport { MortgageTab } from \"../tab-types/mortgage\";\n\nexport const AccountTabs = () => {\n  const accounts = useStore(store, (x) => x.wealth);\n  const firstAccount = Object.keys(accounts)?.[0];\n  const [account, setAccount] = useState<string>(firstAccount);\n\n  useEffect(() => {\n    if (!accounts[account]) {\n      setAccount(Object.keys(accounts)?.[0] ?? \"\");\n    }\n  }, [account, accounts]);\n\n  return (\n    <Box display=\"flex\" width=\"100%\" height=\"100%\" gap={2}>\n      <Box display={\"flex\"} flex={\"0 1 auto\"}>\n        {Object.keys(accounts).length > 0 && (\n          <Tabs\n            orientation=\"vertical\"\n            value={account}\n            onChange={(_, value) => {\n              setAccount(value as string);\n            }}\n          >\n            {Object.keys(accounts).map((account) => {\n              return <Tab key={account} value={account} label={account} />;\n            })}\n            <Tab component={NewAccount} />\n          </Tabs>\n        )}\n      </Box>\n      <Box flex={\"1 1 auto\"} overflow={\"auto\"}>\n        {accounts[account]?.type === \"account\" && <AccountTab accountName={account} />}\n        {accounts[account]?.type === \"mortgage\" && <MortgageTab accountName={account} />}\n      </Box>\n    </Box>\n  );\n};\n","import { DateTime } from \"luxon\";\nimport { Account, Mortgage } from \"shared/models/store/current\";\nimport { findNearestOnOrBefore } from \"./find-nearest-on-or-before\";\nimport { calcEquity, calcLoanBalance } from \"./mortgage-calc\";\n\nconst getMortgageValue = (date: DateTime, mortgage: Mortgage) => {\n  if (!mortgage.loan) {\n    return 0;\n  }\n  const entry = findNearestOnOrBefore(date, mortgage.data);\n  if (entry?.date && mortgage.data[0] === entry && DateTime.fromISO(entry.date).startOf(\"day\") > date) {\n    return 0;\n  }\n  const { ownershipPct, principal } = mortgage.loan;\n  const balance = calcLoanBalance(date, mortgage.loan);\n  return calcEquity(ownershipPct, entry?.value, balance, principal);\n};\n\nconst getAccountValue = (date: DateTime, account: Account) => {\n  const entry = findNearestOnOrBefore(date, account.data);\n  if (entry?.date && account.data[0] === entry && DateTime.fromISO(entry.date).startOf(\"day\") > date) {\n    return 0;\n  }\n  return entry?.value;\n};\n\nexport const getGraphValue = (date: DateTime, account: Account | Mortgage) => {\n  switch (account.type) {\n    case \"account\":\n      return getAccountValue(date, account);\n    case \"mortgage\":\n      return getMortgageValue(date, account);\n  }\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { getGraphDates } from \"shared/utility/get-graph-dates\";\nimport { getGraphValue } from \"shared/utility/get-graph-value\";\n\nexport const useGraphData = () => {\n  const wealth = useStore(store, (x) => x.wealth);\n\n  return useMemo(() => {\n    const dates = getGraphDates(Object.values(wealth));\n    const accounts = Object.entries(wealth);\n    const graphData = dates.map((date) => {\n      return accounts.reduce(\n        (acc, [accountName, account]) => {\n          const value = getGraphValue(date, account);\n\n          if (value) {\n            acc[accountName] = value;\n            acc[\"total\"] = (acc[\"total\"] as number) + value;\n          } else {\n            acc[accountName] = null;\n          }\n\n          acc[\"date\"] = date.toJSDate();\n          return acc;\n        },\n        { total: 0 } as Record<string, number | Date | null>\n      );\n    });\n\n    graphData.forEach((x, idx, arr) => {\n      if (idx < arr.length - 1) {\n        Object.keys(x).forEach((key) => {\n          if (x[key] === null && arr[idx + 1][key] !== null) {\n            x[key] = 0;\n          }\n        });\n      }\n    });\n\n    const firstNonZero = graphData.findIndex((x) => (x[\"total\"] as number) > 0);\n    return graphData.slice(firstNonZero);\n  }, [wealth]);\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { AgAreaSeriesOptions, AgCartesianChartOptions, AgLineSeriesOptions } from \"ag-charts-community\";\nimport { AgChartsReact } from \"ag-charts-react\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { formatCashShort } from \"shared/utility/format-cash\";\nimport { useGraphData } from \"./use-graph-data\";\n\nexport const WealthChart = () => {\n  const wealth = useStore(store, (x) => x.wealth);\n  const data = useGraphData();\n\n  const series = useMemo(() => {\n    return [\n      ...Object.keys(wealth).map((x) => {\n        return {\n          stacked: true,\n          type: \"area\",\n          xKey: \"date\",\n          yKey: x,\n          yName: x,\n          tooltip: {\n            renderer: ({ datum, yKey, xKey }) => ({\n              content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCashShort(datum[yKey])}`,\n            }),\n          },\n        } as AgAreaSeriesOptions;\n      }),\n      {\n        type: \"line\",\n        xKey: \"date\",\n        yKey: \"total\",\n        yName: \"Total\",\n        tooltip: {\n          renderer: ({ datum, yKey, xKey }) => ({\n            content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCashShort(datum[yKey])}`,\n          }),\n        },\n      } as AgLineSeriesOptions,\n    ];\n  }, [wealth]);\n\n  const options: AgCartesianChartOptions = useMemo(\n    () => ({\n      theme: \"ag-default-dark\",\n      title: {\n        text: `Total Wealth ${formatCashShort((data[data.length - 1]?.total ?? 0) as number)}`,\n      },\n      data,\n      axes: [\n        {\n          type: \"time\",\n          position: \"bottom\",\n          label: {\n            format: \"%Y\",\n          },\n        },\n        {\n          type: \"number\",\n          position: \"left\",\n        },\n      ],\n      series,\n    }),\n    [data, series]\n  );\n  return <AgChartsReact options={options} />;\n};\n","import { Box } from \"@mui/material\";\nimport { AccountTabs } from \"./components/account-tabs\";\nimport { WealthChart } from \"./components/wealth-chart\";\n\nexport const NetWealth = () => {\n  return (\n    <Box display={\"flex\"} height=\"100%\" width={\"100%\"} overflow={\"hidden\"} gap={2}>\n      <Box flex=\"0 1 auto\">\n        <Box\n          width={650}\n          height={\"100%\"}\n          sx={{\n            padding: 2,\n            border: \"1px solid rgba(255,255,255,0.1)\",\n            borderRadius: 2,\n            minWidth: 480,\n            backgroundColor: \"#121212\",\n            boxShadow: \"2px 3px 9px 1px #12121252\",\n          }}\n        >\n          <AccountTabs />\n        </Box>\n      </Box>\n      <Box flex=\"1 1 auto\" overflow={\"hidden\"} width=\"100%\" height={\"100%\"}>\n        <WealthChart />\n      </Box>\n    </Box>\n  );\n};\n","import { Box, Divider, Stack, Typography } from \"@mui/material\";\nimport { ReactNode } from \"react\";\n\nexport const Card = (props: { title: ReactNode; children?: ReactNode }) => {\n  const { title, children } = props;\n\n  return (\n    <Box\n      sx={{\n        border: \"1px solid rgba(255,255,255,0.1)\",\n        borderRadius: 2,\n        minWidth: 480,\n        backgroundColor: \"#121212\",\n        boxShadow: \"2px 3px 9px 1px #12121252\",\n      }}\n    >\n      <Typography sx={{ paddingBottom: 1, paddingLeft: 2, paddingTop: 1, display: \"flex\" }} variant=\"h5\">\n        {title}\n      </Typography>\n\n      {children && (\n        <>\n          <Divider />\n          <Stack padding={1} direction={\"row\"} spacing={0.5} width={\"max-content\"} minHeight={80}>\n            {children}\n          </Stack>\n        </>\n      )}\n    </Box>\n  );\n};\n","import { Box } from \"@mui/system\";\nimport { useMemo } from \"react\";\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\nimport { Cash } from \"./cash\";\n\ninterface CashProps {\n  min?: number;\n  max?: number;\n  fallback?: number;\n  disableTooltip?: boolean;\n  compact?: boolean;\n  tooltip?: string;\n\n  placement?:\n    | \"top\"\n    | \"right\"\n    | \"bottom\"\n    | \"left\"\n    | \"bottom-end\"\n    | \"bottom-start\"\n    | \"left-end\"\n    | \"left-start\"\n    | \"right-end\"\n    | \"right-start\"\n    | \"top-end\"\n    | \"top-start\"\n    | undefined;\n}\nexport const CashRange = ({ min, max, fallback, disableTooltip, compact = true }: CashProps) => {\n  const showRange = useMemo(() => {\n    const minFormatted = compact ? formatCashShort(min ?? 0) : formatCash(min ?? 0);\n    const maxFormatted = compact ? formatCashShort(max ?? 0) : formatCash(max ?? 0);\n    return minFormatted !== maxFormatted;\n  }, [compact, max, min]);\n\n  return (\n    <Box>\n      {!showRange && (\n        <Cash\n          fallback={fallback}\n          value={max}\n          tooltip={min != max ? `${formatCash(min ?? 0)} - ` : undefined}\n          disableTooltip={disableTooltip}\n          compact={compact}\n        />\n      )}\n      {showRange && (\n        <>\n          <Cash value={min} fallback={fallback} disableTooltip={disableTooltip} compact={compact} />\n          <span> - </span>\n          <Cash value={max} fallback={fallback} disableTooltip={disableTooltip} compact={compact} />\n        </>\n      )}\n    </Box>\n  );\n};\n","export const formatPercent = new Intl.NumberFormat(\"en-us\", {\n  style: \"percent\",\n  maximumFractionDigits: 1,\n}).format;\n","import { Box } from \"@mui/system\";\nimport { ReactNode } from \"react\";\nimport { formatPercent } from \"shared/utility/format-percent\";\n\ninterface PercentProps {\n  value?: number;\n  probability?: number;\n  fallback?: ReactNode;\n}\n\nconst getColor = (probability?: number) => {\n  if (!probability) {\n    return \"inherit\";\n  }\n  if (probability >= 0.5) {\n    return \"green\";\n  }\n  if (probability >= 0.25) {\n    return \"yellow\";\n  }\n  return \"red\";\n};\n\nexport const Percent = ({ value, probability, fallback }: PercentProps) => {\n  return <Box color={getColor(probability)}>{value ? formatPercent(value) : fallback}</Box>;\n};\n","import { Box } from \"@mui/system\";\nimport { Percent } from \"./percent\";\n\ninterface PercentProps {\n  min?: number;\n  max?: number;\n  fallback?: number;\n}\n\nexport const PercentRange = ({ min, max, fallback }: PercentProps) => {\n  return (\n    <Box>\n      {(max ?? 0) / (min ?? 1) <= 1.005 && <Percent fallback={fallback} value={max} />}\n      {(max ?? 0) / (min ?? 1) > 1.005 && (\n        <>\n          <Percent value={min} fallback={fallback} />\n          <span> - </span>\n          <Percent value={max} fallback={fallback} />\n        </>\n      )}\n    </Box>\n  );\n};\n","import { Box } from \"@mui/material\";\r\nimport { ReactNode } from \"react\";\r\n\r\ninterface CellProps {\r\n  children?: ReactNode;\r\n  secondaryValue?: ReactNode;\r\n  tertiaryValue?: ReactNode;\r\n  title: ReactNode;\r\n  className?: string;\r\n}\r\n\r\nexport const Value = (props: CellProps) => {\r\n  const { children, secondaryValue, tertiaryValue, title, className } = props;\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: \"flex\",\r\n        minWidth: 106,\r\n        height: 64,\r\n        padding: \"0px 8px\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"flex-start\",\r\n        gap: 0.5,\r\n        flexShrink: 0,\r\n      }}\r\n      className={className}\r\n    >\r\n      <Box display={\"flex\"} alignItems={\"center\"} gap={0.5}>\r\n        <Box fontSize={18} fontWeight={700} lineHeight={\"20px\"}>\r\n          {children ? children : \"?\"}\r\n        </Box>\r\n        {!!(secondaryValue ?? tertiaryValue) && (\r\n          <Box\r\n            alignSelf={\"flex-end\"}\r\n            fontSize={12}\r\n            fontWeight={500}\r\n            lineHeight={\"16px\"}\r\n            textTransform={\"uppercase\"}\r\n            color={\"#888\"}\r\n          >\r\n            {secondaryValue ?? tertiaryValue}\r\n          </Box>\r\n        )}\r\n      </Box>\r\n      <Box fontSize={12} fontWeight={500} lineHeight={\"16px\"} textTransform={\"uppercase\"}>\r\n        {title}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","import { Box } from \"@mui/material\";\r\nimport { Cluster } from \"capabilities/projected-income/hooks/use-gradient\";\r\nimport { DateTime } from \"luxon\";\r\nimport { CashRange } from \"shared/components/formatters/cash-range\";\r\nimport { Percent } from \"shared/components/formatters/percent\";\r\nimport { PercentRange } from \"shared/components/formatters/percent-range\";\r\nimport { Value } from \"shared/components/formatters/value\";\r\n\r\ninterface ClusterValueProps extends Cluster {\r\n  compact?: boolean;\r\n}\r\n\r\nconst ClusterValue = (props: ClusterValueProps) => {\r\n  const { min, max, probability, title, compact } = props;\r\n  return (\r\n    <Value\r\n      title={\r\n        <Box display={\"flex\"} gap={1}>\r\n          <span>{title}</span>\r\n          {probability < 1 && <Percent probability={probability} value={probability} />}\r\n        </Box>\r\n      }\r\n    >\r\n      {min < 1 && min > 0 && <PercentRange min={min} max={max} />}\r\n      {min > 1 && <CashRange compact={compact} min={min} max={max} />}\r\n      {min === 0 && 0}\r\n    </Value>\r\n  );\r\n};\r\n\r\nexport const ClusterValues = (props: { clusters?: Cluster[]; eventDate?: DateTime; compact?: boolean }) => {\r\n  const { clusters, eventDate, compact = true } = props;\r\n  return clusters?.map((x, i, arr) => {\r\n    const title = arr.length === 1 && (eventDate?.diffNow().toMillis() ?? -1) > 0 ? \"Expected\" : x.title;\r\n    return <ClusterValue {...x} title={title} compact={compact} key={i} />;\r\n  });\r\n};\r\n","import { Duration, DurationUnit } from \"luxon\";\r\n\r\nexport function toHuman(dur: Duration, smallestUnit: DurationUnit = \"seconds\"): string {\r\n  const units = [\"years\", \"months\", \"days\", \"hours\", \"minutes\", \"seconds\", \"milliseconds\"] as DurationUnit[];\r\n  const smallestIdx = units.indexOf(smallestUnit);\r\n  const entries = Object.entries(\r\n    dur\r\n      .shiftTo(...units)\r\n      .normalize()\r\n      .toObject()\r\n  ).filter(([, amount], idx) => amount > 0 && idx <= smallestIdx);\r\n  const dur2 = Duration.fromObject(entries.length === 0 ? { [smallestUnit]: 0 } : Object.fromEntries(entries));\r\n  return dur2.toHuman().replaceAll(\",\", \"\");\r\n}\r\n","import { Box, Tooltip } from \"@mui/material\";\nimport { DateTime } from \"luxon\";\nimport { ReactNode, useMemo } from \"react\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { toHuman } from \"shared/utility/to-human\";\n\ninterface DurationProps {\n  dateTime?: DateTime;\n  children?: ReactNode;\n  variant?: \"countdown\" | \"date\";\n  dateFormat?: string;\n}\nexport const CountDown = (props: DurationProps) => {\n  const { dateTime, children, variant = \"countdown\", dateFormat = shortDate } = props;\n\n  const countDownStr = useMemo(() => {\n    if (!dateTime) {\n      return \"??\";\n    }\n    if (variant === \"countdown\") {\n      const diff = dateTime?.diff(getLocalDateTime(), [\"years\", \"months\", \"days\", \"hours\"]);\n\n      return toHuman(diff, \"days\");\n    }\n\n    return dateTime?.toFormat(dateFormat);\n  }, [dateFormat, dateTime, variant]);\n\n  const tooltipStr = useMemo(() => {\n    if (!dateTime) {\n      return \"??\";\n    }\n\n    if (variant === \"countdown\") {\n      return dateTime?.toFormat(dateFormat);\n    }\n    const diff = dateTime?.diff(getLocalDateTime(), [\"years\", \"months\", \"days\", \"hours\"]);\n\n    return toHuman(diff, \"days\");\n  }, [dateFormat, dateTime, variant]);\n\n  const countDownColor = useMemo(() => {\n    if (!dateTime) {\n      return \"white\";\n    }\n\n    const days = dateTime.diffNow(\"days\").days;\n    if (days < 30) {\n      return \"green\";\n    } else if (days <= 60) {\n      return \"yellow\";\n    }\n\n    return \"red\";\n  }, [dateTime]);\n\n  return dateTime && dateTime > getLocalDateTime() ? (\n    <Tooltip title={tooltipStr}>\n      <Box color={countDownColor}>{countDownStr}</Box>\n    </Tooltip>\n  ) : (\n    children\n  );\n};\n","import { DateTime } from \"luxon\";\nimport { AccountData } from \"shared/models/store/current\";\n\nexport function findSameYear(year: number, data: AccountData[]): AccountData | undefined;\nexport function findSameYear(date: DateTime, data: AccountData[]): AccountData | undefined;\nexport function findSameYear(date: DateTime | number, data: AccountData[]): AccountData | undefined {\n  const year = typeof date === \"number\" ? date : date.year;\n  return data.find((x) => {\n    return DateTime.fromISO(x.date).year === year;\n  });\n}\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { AccountData } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\nimport { findSameYear } from \"shared/utility/find-same-year\";\n\nconst useRealDate = (year: number | undefined, data: AccountData[]) => {\n  return useMemo(() => {\n    if (!year) {\n      return undefined;\n    }\n    const meritBonus = findSameYear(year, data);\n    if (!meritBonus) {\n      return undefined;\n    }\n\n    return DateTime.fromISO(meritBonus.date);\n  }, [data, year]);\n};\n\nexport const useDates = (year?: number) => {\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\n  const meritBonusDate = useRealDate(year, timeSeries.meritBonus);\n  const companyBonusDate = useRealDate(year, timeSeries.companyBonus);\n\n  return useMemo(() => {\n    return {\n      meritIncrease: DateTime.fromObject({ month: 4, day: 1, year }),\n      meritBonus: meritBonusDate ?? DateTime.fromObject({ month: 4, day: 15, year }),\n      companyBonus: companyBonusDate ?? DateTime.fromObject({ month: 6, day: 15, year }),\n      retirementBonus: DateTime.fromObject({ month: 7, day: 15, year }),\n    };\n  }, [companyBonusDate, meritBonusDate, year]);\n};\n\nexport const useDateRanges = (year: number) => {\n  return useMemo(\n    () => ({\n      base: {\n        start: DateTime.fromObject({ month: 1, day: 1, year }),\n        end: DateTime.fromObject({ month: 12, day: 31, year }).endOf(\"day\"),\n      },\n      meritBonus: {\n        start: DateTime.fromObject({ month: 1, day: 1, year: year - 1 }),\n        end: DateTime.fromObject({ month: 12, day: 31, year: year - 1 }).endOf(\"day\"),\n      },\n      companyBonus: {\n        start: DateTime.fromObject({ day: 1, month: 4, year: year - 1 }),\n        end: DateTime.fromObject({ day: 31, month: 3, year }).endOf(\"day\"),\n      },\n      retirementBonus: {\n        start: DateTime.fromObject({ day: 1, month: 7, year: year - 1 }),\n        end: DateTime.fromObject({ day: 30, month: 6, year }).endOf(\"day\"),\n      },\n    }),\n    [year]\n  );\n};\n","import { Store } from \"@tanstack/store\";\nimport { Scenario } from \"shared/models/scenario\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\n\ninterface ScenarioStore {\n  scenarios: Partial<Record<number, Scenario[]>>;\n  loading: boolean;\n  minYear: number;\n  maxYear: number;\n}\n\nconst year = getLocalDateTime().year;\nexport const scenarioStore = new Store<ScenarioStore>({\n  loading: true,\n  maxYear: year,\n  minYear: year,\n  scenarios: {},\n});\n","import { DateTime } from \"luxon\";\r\nimport { create } from \"mutative\";\r\nimport { AccountData, TimeSeries } from \"shared/models/store/current\";\r\nimport { store } from \".\";\r\n\r\nexport const updateProjectedIncomeDate = (timeSeries: TimeSeries, data: AccountData, date: DateTime) => {\r\n  store.setState((prev) => {\r\n    const next = create(prev, (next) => {\r\n      const account = next.projectedIncome.timeSeries[timeSeries];\r\n      const idx = account.findIndex((x) => x === data);\r\n      account[idx].date = date.toISO()!;\r\n    });\r\n    return next;\r\n  });\r\n};\r\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\r\nimport UpdateIcon from \"@mui/icons-material/Update\";\r\nimport { Button, Tooltip } from \"@mui/material\";\r\nimport { Stack } from \"@mui/system\";\r\nimport { ColDef, ICellRendererParams } from \"ag-grid-community\";\r\nimport { CustomCellRendererProps } from \"ag-grid-react\";\r\nimport { DateTime } from \"luxon\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { Percent } from \"shared/components/formatters/percent\";\r\nimport { AccountData, TimeSeries } from \"shared/models/store/current\";\r\nimport { updateProjectedIncome } from \"shared/store\";\r\nimport { removeProjectedIncome } from \"shared/store/remove-projected-income\";\r\nimport { updateProjectedIncomeDate } from \"shared/store/update-projected-income-date\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\n\r\nexport const createAccountColumnConfig = (\r\n  accountName: TimeSeries,\r\n  variant: \"number\" | \"cash\" | \"percent\"\r\n): ColDef<AccountData>[] => [\r\n  {\r\n    headerName: \"Date\",\r\n    sort: \"desc\",\r\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\r\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\r\n    cellRenderer: (x: ICellRendererParams<unknown, DateTime>) => {\r\n      return (\r\n        <Stack direction={\"row\"} alignItems={\"center\"}>\r\n          {x.valueFormatted}&nbsp;\r\n          {x.value && x.value > DateTime.local() && (\r\n            <Tooltip title=\"Future Event\">\r\n              <UpdateIcon htmlColor=\"yellow\" />\r\n            </Tooltip>\r\n          )}\r\n        </Stack>\r\n      );\r\n    },\r\n    cellEditor: \"agDateCellEditor\",\r\n    editable: true,\r\n    valueSetter: (x) => {\r\n      const date = DateTime.fromJSDate(x.newValue);\r\n      if (date.isValid) {\r\n        updateProjectedIncomeDate(accountName, x.data, DateTime.fromJSDate(x.newValue));\r\n      }\r\n      return date.isValid;\r\n    },\r\n  },\r\n  {\r\n    headerName: \"Value\",\r\n    valueGetter: (x) => x.data?.value,\r\n    cellRenderer: (x: CustomCellRendererProps<AccountData>) =>\r\n      variant === \"cash\" ? <Cash compact={false} value={x.value} /> : <Percent value={x.value} />,\r\n    type: \"numericColumn\",\r\n    editable: true,\r\n    cellEditor: \"agNumberCellEditor\",\r\n    valueSetter: (x) => {\r\n      updateProjectedIncome(accountName, x.data, +x.newValue);\r\n      return true;\r\n    },\r\n  },\r\n  {\r\n    cellStyle: () => ({ display: \"inline-flex\", padding: \"0px\" }),\r\n    sortable: false,\r\n    headerName: \"\",\r\n    width: 80,\r\n    colId: \"actions\",\r\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\r\n      return (\r\n        <Button\r\n          onClick={() => {\r\n            props.data && removeProjectedIncome(accountName, props.data);\r\n          }}\r\n          color=\"error\"\r\n          fullWidth\r\n        >\r\n          <DeleteForeverIcon />\r\n        </Button>\r\n      );\r\n    },\r\n  },\r\n];\r\n","import { Box, Button, InputAdornment, Paper, Stack, TextField, Tooltip, Typography } from \"@mui/material\";\r\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo, useState } from \"react\";\r\nimport { AgGrid } from \"shared/components/ag-grid\";\r\nimport { TimeSeries } from \"shared/models/store/current\";\r\nimport { addProjectedIncome, store } from \"shared/store\";\r\nimport { shortDate } from \"shared/utility/format-date\";\r\nimport { createAccountColumnConfig } from \"./column-config\";\r\n\r\nconst DataEntry = (props: {\r\n  timeSeries: TimeSeries;\r\n  defaultDate: DateTime;\r\n  variant?: \"number\" | \"cash\" | \"percent\";\r\n}) => {\r\n  const { timeSeries, defaultDate, variant = \"number\" } = props;\r\n  const account = useStore(store, (state) => state.projectedIncome.timeSeries[timeSeries]);\r\n\r\n  const [date, setDate] = useState(defaultDate);\r\n  const [amount, setAmount] = useState<number | null>(null);\r\n\r\n  const hasSameDate = useMemo(() => {\r\n    return !!account?.find((x) => date.hasSame(DateTime.fromISO(x.date), \"day\"));\r\n  }, [account, date]);\r\n\r\n  const onAddEntry = () => {\r\n    if (amount != null) {\r\n      addProjectedIncome(date, timeSeries, variant === \"percent\" ? amount / 100 : amount);\r\n      setAmount(null);\r\n    }\r\n  };\r\n\r\n  const accountColumnConfig = useMemo(() => {\r\n    return createAccountColumnConfig(timeSeries, variant);\r\n  }, [timeSeries, variant]);\r\n\r\n  return (\r\n    <Box display={\"flex\"} flexDirection={\"column\"} height=\"100%\">\r\n      <Stack spacing={2} flex=\"0 1 auto\">\r\n        <DatePicker\r\n          format={shortDate}\r\n          sx={{ color: \"white\" }}\r\n          label=\"Date\"\r\n          value={date}\r\n          onChange={(value) => {\r\n            console.log(value);\r\n            value && setDate(value);\r\n          }}\r\n        />\r\n        <TextField\r\n          label=\"amount\"\r\n          value={amount ?? \"\"}\r\n          type=\"number\"\r\n          onChange={(event) => (event.target.value === \"\" ? setAmount(null) : setAmount(+event.target.value))}\r\n          InputProps={{\r\n            startAdornment: variant !== \"number\" && (\r\n              <InputAdornment position=\"start\">{variant === \"cash\" ? \"$\" : \"%\"}</InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n        <Button disabled={amount === null || !date || hasSameDate} onClick={onAddEntry}>\r\n          Add Entry\r\n        </Button>\r\n      </Stack>\r\n      <Box sx={{ paddingTop: 2, flex: \"1 1 auto\" }}>\r\n        <AgGrid\r\n          reactiveCustomComponents\r\n          rowData={account ?? []}\r\n          columnDefs={accountColumnConfig}\r\n          id={account + \"-history\"}\r\n          autoSizeStrategy={{\r\n            type: \"fitGridWidth\",\r\n          }}\r\n          stopEditingWhenCellsLoseFocus\r\n        />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\ninterface LayoutProps {\r\n  title: string;\r\n  accountName: TimeSeries;\r\n  defaultDate: DateTime;\r\n  variant: \"percent\" | \"number\" | \"cash\";\r\n}\r\n\r\nexport const Layout = (props: LayoutProps) => {\r\n  const { title, accountName, defaultDate, variant } = props;\r\n  return (\r\n    <Paper sx={{ padding: 2, height: \"100%\", width: 450, flexShrink: 0 }}>\r\n      <Box display=\"flex\" flexDirection=\"column\" height=\"100%\">\r\n        <Box flex=\"0 1 auto\" marginBottom={2}>\r\n          <Typography sx={{ marginBottom: 2 }} variant=\"h5\">\r\n            {title}{\" \"}\r\n            {variant === \"cash\" && (\r\n              <Tooltip\r\n                title={\r\n                  <>\r\n                    <span>Cash values are used in lieu of Percent values.</span>\r\n                    <br />\r\n                    <span>Cash values are considered actual payment values.</span>\r\n                  </>\r\n                }\r\n              >\r\n                <span>($)</span>\r\n              </Tooltip>\r\n            )}\r\n            {variant === \"percent\" && (\r\n              <Tooltip title=\"Percentage values are used for predictions.\">\r\n                <span>(%)</span>\r\n              </Tooltip>\r\n            )}\r\n          </Typography>\r\n        </Box>\r\n        <Box flex=\"1 1 auto\">\r\n          <DataEntry variant={variant} timeSeries={accountName} defaultDate={defaultDate} />\r\n        </Box>\r\n      </Box>\r\n    </Paper>\r\n  );\r\n};\r\n","import ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\nimport { Table, TableBody, TableCell, TableRow } from \"@mui/material\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { IncomePerPeriod } from \"shared/models/IncomePerPeriod\";\nimport { shortDate } from \"shared/utility/format-date\";\n\ninterface IncomePerPeriodTooltipProps {\n  incomePerPeriod: IncomePerPeriod[];\n}\n\nexport const IncomePerPeriodTooltip = (props: IncomePerPeriodTooltipProps) => {\n  const { incomePerPeriod } = props;\n  return (\n    <Table sx={{ width: \"max-content\" }}>\n      <TableBody>\n        {incomePerPeriod.map(({ start, end, value, perPayday, count }, index) => {\n          return (\n            <TableRow key={index}>\n              <TableCell>\n                <Cash value={value} compact={false} />\n              </TableCell>\n              <TableCell>{start.toFormat(shortDate)}</TableCell>\n              <TableCell>\n                <ArrowForwardIcon />\n              </TableCell>\n              <TableCell>{end.toFormat(shortDate)}</TableCell>\n              <TableCell>\n                <Cash value={perPayday} compact={false} /> x {count}\n              </TableCell>\n            </TableRow>\n          );\n        })}\n        <TableRow>\n          <TableCell colSpan={4}>Total:</TableCell>\n          <TableCell>\n            <Cash value={incomePerPeriod.reduce((acc, curr) => curr.value + acc, 0)} compact={false} />\n          </TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  );\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { useMemo } from \"react\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\nimport { ckmeans, median } from \"simple-statistics\";\n\nconst clusterTitle = (index: number, length: number) => {\n  if (length === 1) {\n    return \"Actual\";\n  } else if (length == 2) {\n    return [\"Low\", \"High\"][index];\n  } else {\n    return [\"Low\", \"Med\", \"High\"][index];\n  }\n};\n\nexport interface Cluster {\n  min: number;\n  max: number;\n  median: number;\n  probability: number;\n  title: string;\n}\n\nconst clusters = (values?: number[]): Cluster[] => {\n  if (!values) {\n    return [];\n  }\n  return ckmeans(values, Math.min(3, values.length)).map((x, i, arr) => {\n    return {\n      min: Math.min(...x),\n      max: Math.max(...x),\n      median: median(x),\n      probability: x.length / values.length,\n      title: clusterTitle(i, arr.length),\n    };\n  });\n};\n\nexport const useClusters = (year: number) => {\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios[year]);\n\n  return useMemo(() => {\n    if (scenarios?.length === 0) {\n      return {\n        totalPay: [],\n        meritBonus: [],\n        retirementBonus: [],\n        companyBonus: [],\n        pay: [],\n        meritIncrease: [],\n        scenarios,\n        taxablePay: [],\n      };\n    }\n    return {\n      totalPay: clusters(scenarios?.map((x) => x.totalPay)),\n      meritBonus: clusters(scenarios?.map((x) => x.meritBonus)),\n      retirementBonus: clusters(scenarios?.map((x) => x.retirementBonus)),\n      companyBonus: clusters(scenarios?.map((x) => x.companyBonus)),\n      pay: clusters(scenarios?.map((x) => x.pay.at(-1)?.value ?? 0)),\n      meritIncrease: clusters(scenarios?.map((x) => x.meritIncreasePct + x.equityIncreasePct)),\n      taxablePay: clusters(scenarios?.map((x) => x.taxablePay)),\n      scenarios,\n    };\n  }, [scenarios]);\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { findSameYear } from \"shared/utility/find-same-year\";\n\nexport const useHasMeritPairs = () => {\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\n  return useMemo(() => {\n    return (\n      timeSeries.meritIncreasePct.every((x) => {\n        return !!findSameYear(DateTime.fromISO(x.date).year, timeSeries.meritBonusPct);\n      }) &&\n      timeSeries.meritBonusPct.every((x) => {\n        return !!findSameYear(DateTime.fromISO(x.date).year, timeSeries.meritIncreasePct);\n      })\n    );\n  }, [timeSeries.meritBonusPct, timeSeries.meritIncreasePct]);\n};\n","import { Alert, CircularProgress, Tooltip } from \"@mui/material\";\r\nimport { Box, Stack } from \"@mui/system\";\r\nimport { DatePicker } from \"@mui/x-date-pickers\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo, useState } from \"react\";\r\nimport { Card } from \"shared/components/card\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { ClusterValues } from \"shared/components/formatters/cluster-value\";\r\nimport { CountDown } from \"shared/components/formatters/countdown\";\r\nimport { Value } from \"shared/components/formatters/value\";\r\nimport { useDateRanges, useDates } from \"shared/hooks/use-dates\";\r\nimport { IncomePerPeriod } from \"shared/models/IncomePerPeriod\";\r\nimport { scenarioStore } from \"shared/store/scenario-store\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { monthDay } from \"shared/utility/format-date\";\r\nimport { Layout } from \"./components/data-entry/data-entry\";\r\nimport { IncomePerPeriodTooltip } from \"./components/income-per-period\";\r\nimport { useClusters } from \"./hooks/use-gradient\";\r\nimport { useHasMeritPairs } from \"./hooks/use-has-merit-pairs\";\r\n\r\nexport const ProjectedIncome = () => {\r\n  const [selectedYear, setSelectedYear] = useState(getLocalDateTime().year);\r\n\r\n  const hasMissingPairs = useHasMeritPairs();\r\n  const clusters = useClusters(selectedYear);\r\n  const dates = useDates(selectedYear);\r\n  const dateRanges = useDateRanges(selectedYear);\r\n\r\n  const basePay = useMemo(() => {\r\n    if (clusters.pay.length !== 1) {\r\n      return;\r\n    }\r\n    return clusters.scenarios?.[0].basePay;\r\n  }, [clusters.pay.length, clusters.scenarios]);\r\n\r\n  const aprToApr = useMemo(() => {\r\n    if (clusters.pay.length !== 1) {\r\n      return;\r\n    }\r\n    return clusters.scenarios?.[0].aprToApr;\r\n  }, [clusters.pay.length, clusters.scenarios]);\r\n\r\n  const paychecks = useMemo(() => {\r\n    if (clusters.pay.length !== 1) {\r\n      return;\r\n    }\r\n\r\n    const payPeriods =\r\n      clusters.scenarios?.[0].payments.filter((x) => {\r\n        const payedOn = DateTime.fromISO(x.payedOn);\r\n        return payedOn >= dateRanges.base.start && payedOn <= dateRanges.base.end;\r\n      }) ?? [];\r\n\r\n    return payPeriods\r\n      .filter((x) => x.type !== \"bonus\")\r\n      .reduceRight(\r\n        (acc, curr) => {\r\n          if (acc[0]?.[0]?.value === curr.value) {\r\n            acc[0].unshift(curr);\r\n          } else {\r\n            acc.unshift([curr]);\r\n          }\r\n\r\n          return acc;\r\n        },\r\n        [] as (typeof payPeriods)[]\r\n      )\r\n      .reduce((acc, curr) => {\r\n        acc.push({\r\n          start: DateTime.fromISO(curr[0].payedOn),\r\n          end: DateTime.fromISO(curr[curr.length - 1].payedOn),\r\n          value: curr.reduce((acc, curr) => acc + curr.value, 0),\r\n          perPayday: curr[0].value,\r\n          count: curr.length,\r\n          type: curr[0].type,\r\n        });\r\n\r\n        return acc;\r\n      }, [] as IncomePerPeriod[]);\r\n  }, [clusters.pay.length, clusters.scenarios, dateRanges.base.end, dateRanges.base.start]);\r\n\r\n  const scenarios = useStore(scenarioStore);\r\n\r\n  return (\r\n    <Box display=\"flex\" flexDirection=\"row\" height=\"100%\" width={\"100%\"}>\r\n      <Box flex=\"0 1 auto\">\r\n        <Stack gap={2} direction={\"column\"} overflow={\"auto\"} height=\"100%\" paddingRight={1}>\r\n          {!hasMissingPairs && (\r\n            <Alert severity=\"error\">Every Merit Increase must have a paired Merit Bonus percent</Alert>\r\n          )}\r\n          <Card\r\n            title={\r\n              <Box display=\"flex\" alignItems={\"center\"} gap={2} width={\"100%\"}>\r\n                <span>Income</span>\r\n                <CountDown dateTime={dates.companyBonus} variant=\"date\" dateFormat={monthDay} />\r\n                <Box sx={{ display: \"flex\", marginLeft: \"auto\", alignItems: \"center\", flexWrap: \"wrap\" }}>\r\n                  {scenarios.loading && <CircularProgress style={{ width: 20, height: 20 }} />}\r\n                </Box>\r\n                <DatePicker\r\n                  sx={{ width: 90, marginRight: 2 }}\r\n                  label={\"year\"}\r\n                  views={[\"year\"]}\r\n                  minDate={getLocalDateTime().set({ year: scenarios.minYear })}\r\n                  maxDate={getLocalDateTime().set({ year: scenarios.maxYear })}\r\n                  defaultValue={getLocalDateTime()}\r\n                  slotProps={{\r\n                    textField: {\r\n                      variant: \"standard\",\r\n                      label: \"\",\r\n                    },\r\n                  }}\r\n                  onYearChange={(year) => {\r\n                    setSelectedYear(year.year);\r\n                  }}\r\n                />\r\n              </Box>\r\n            }\r\n          >\r\n            <ClusterValues clusters={clusters.totalPay} eventDate={dates.companyBonus} />\r\n          </Card>\r\n          <Card\r\n            title={\r\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\r\n                <span>Paycheck</span>\r\n                <CountDown dateTime={dates.meritIncrease} variant=\"date\" dateFormat={monthDay} />\r\n              </Box>\r\n            }\r\n          >\r\n            <ClusterValues clusters={clusters.pay} eventDate={dates.meritIncrease} compact={false} />\r\n            {basePay && (\r\n              <Tooltip\r\n                placement=\"right\"\r\n                componentsProps={{\r\n                  tooltip: {\r\n                    sx: {\r\n                      maxWidth: \"none\",\r\n                    },\r\n                  },\r\n                }}\r\n                title={paychecks && <IncomePerPeriodTooltip incomePerPeriod={paychecks} />}\r\n              >\r\n                <div>\r\n                  <Value title={\"Base Pay\"}>\r\n                    <Cash disableTooltip value={basePay} />\r\n                  </Value>\r\n                </div>\r\n              </Tooltip>\r\n            )}\r\n            {aprToApr && (\r\n              <Value title={\"APR to APR\"}>\r\n                <Cash value={aprToApr} />\r\n              </Value>\r\n            )}\r\n          </Card>\r\n          <Card\r\n            title={\r\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\r\n                <span>Merit Increase</span>\r\n                <CountDown dateTime={dates.meritIncrease} variant=\"date\" dateFormat={monthDay} />\r\n              </Box>\r\n            }\r\n          >\r\n            <ClusterValues clusters={clusters.meritIncrease} eventDate={dates.meritIncrease} />\r\n          </Card>\r\n\r\n          <Card\r\n            title={\r\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\r\n                <span>Merit Bonus</span>\r\n                <CountDown dateTime={dates.meritBonus} variant=\"date\" dateFormat={monthDay} />\r\n              </Box>\r\n            }\r\n          >\r\n            <ClusterValues clusters={clusters.meritBonus} eventDate={dates.meritBonus} />\r\n          </Card>\r\n          <Card\r\n            title={\r\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\r\n                <span>Company Bonus</span>\r\n                <CountDown dateTime={dates.companyBonus} variant=\"date\" dateFormat={monthDay} />\r\n              </Box>\r\n            }\r\n          >\r\n            <ClusterValues clusters={clusters.companyBonus} eventDate={dates.companyBonus} />\r\n          </Card>\r\n          <Card\r\n            title={\r\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\r\n                <span>Retirement Bonus</span>\r\n                <CountDown dateTime={dates.retirementBonus} variant=\"date\" dateFormat={monthDay} />\r\n              </Box>\r\n            }\r\n          >\r\n            <ClusterValues clusters={clusters.retirementBonus} eventDate={dates.retirementBonus} />\r\n          </Card>\r\n        </Stack>\r\n      </Box>\r\n      <Box flex=\"1 1 auto\" overflow={\"auto\"} paddingBottom={2} paddingLeft={1}>\r\n        <Box display={\"flex\"} height={\"100%\"} width={\"100%\"} gap={2}>\r\n          <Layout\r\n            accountName=\"paycheck\"\r\n            variant=\"cash\"\r\n            defaultDate={DateTime.fromObject({\r\n              day: 1,\r\n              month: 4,\r\n              year: selectedYear,\r\n            })}\r\n            title=\"Income Per Paycheck\"\r\n          />\r\n          <Layout\r\n            title=\"Merit Increase\"\r\n            accountName=\"meritIncreasePct\"\r\n            variant=\"percent\"\r\n            defaultDate={dates.meritIncrease}\r\n          />\r\n          <Layout title=\"Equity Increase\" accountName=\"equityPct\" variant=\"percent\" defaultDate={dates.meritIncrease} />\r\n          <Layout title=\"Merit Bonus\" accountName=\"meritBonusPct\" variant=\"percent\" defaultDate={dates.meritBonus} />\r\n          <Layout title=\"Merit Bonus\" accountName=\"meritBonus\" variant=\"cash\" defaultDate={dates.meritBonus} />\r\n          <Layout\r\n            title=\"Company Bonus Factor\"\r\n            accountName=\"companyBonusPct\"\r\n            defaultDate={dates.companyBonus}\r\n            variant=\"percent\"\r\n          />\r\n          <Layout title=\"Company Bonus\" accountName=\"companyBonus\" defaultDate={dates.companyBonus} variant=\"cash\" />\r\n          <Layout\r\n            title=\"Retirement Bonus\"\r\n            accountName=\"retirementBonus\"\r\n            defaultDate={dates.retirementBonus}\r\n            variant=\"cash\"\r\n          />\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\n\nexport const useFutureRetirementContributions = (year: number) => {\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios[year]);\n  const retirementContribution = useStore(store, (x) => x.projectedWealth.retirementContributionPaycheck);\n\n  return useMemo(() => {\n    return {\n      remaining: Math.min(scenarios?.at(0)?.remainingPayments ?? 0, 26) * retirementContribution,\n      perPaycheck: retirementContribution,\n    };\n  }, [retirementContribution, scenarios]);\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { useMemo } from \"react\";\nimport { useDateRanges } from \"shared/hooks/use-dates\";\nimport { store } from \"shared/store\";\n\nexport const useFutureSavings = (year: number) => {\n  const config = useStore(store, (x) => x.projectedWealth);\n  const dateRanges = useDateRanges(year);\n  return useMemo(() => {\n    return {\n      remaining: config.savingsPerMonth * Math.min(Math.max(0, dateRanges.base.end.diffNow(\"months\").months), 12),\n      perMonth: config.savingsPerMonth,\n    };\n  }, [config.savingsPerMonth, dateRanges.base]);\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\n\ninterface ThresholdTaxData {\n  total: number;\n  firstOccurrence: DateTime;\n  remaining: number;\n  perPaycheck: number;\n}\n\nexport const useFutureSocialSecurity = (year: number): TresholdTax => {\n  const config = useStore(store, (x) => x.projectedWealth);\n  return useThresholdTax(year, config.socialSecurityLimit, config.socialSecurityTaxRate);\n};\n\nexport const useFutureMedicareTax = (year: number): TresholdTax => {\n  const config = useStore(store, (x) => x.projectedWealth);\n  const taxes = useThresholdTax(year, config.medicareSupplementalTaxThreshold, -1 * config.medicareSupplementalTaxRate);\n  return useMemo(() => {\n    return {\n      min: taxes.max,\n      max: taxes.min,\n    };\n  }, [taxes]);\n};\n\nexport type TresholdTax = Partial<Record<\"min\" | \"max\", ThresholdTaxData>>;\n\nconst useThresholdTax = (year: number, threshold: number, taxRate: number): TresholdTax => {\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios[year]);\n\n  const data = useMemo(\n    () =>\n      (\n        (scenarios ?? [])\n          .map((x) => {\n            const total = taxRate * Math.max(0, (x.payments.at(-1)?.cumulative ?? 0) - threshold);\n            const firstOccurrence = x.payments.find((x) => x.cumulative > threshold)?.payedOn;\n            const remaining = x.payments\n              .slice(x.currentPaymentIdx)\n              .filter((x) => x.cumulative >= threshold)\n              .reduce((acc, curr) => {\n                return acc + Math.min(curr.value, curr.cumulative - threshold) * taxRate;\n              }, 0);\n            const perPaycheck = total && taxRate * (x.payments.at(-1)?.value ?? 0);\n\n            return {\n              total,\n              firstOccurrence: firstOccurrence ? DateTime.fromISO(firstOccurrence) : undefined,\n              remaining,\n              perPaycheck,\n            };\n          })\n          .filter((x) => x.firstOccurrence) as ThresholdTaxData[]\n      ).reduce(\n        (acc, curr, i) => {\n          if (i == 0) {\n            return { min: curr, max: curr };\n          } else {\n            if (curr.total < acc.min!.total) {\n              acc.min = curr;\n            }\n            if (curr.total > acc.max!.total) {\n              acc.max = curr;\n            }\n          }\n          return acc;\n        },\n        {} as Partial<Record<\"min\" | \"max\", ThresholdTaxData>>\n      ),\n    [threshold, taxRate, scenarios]\n  );\n\n  return data;\n};\n","import { Cluster } from \"capabilities/projected-income/hooks/use-gradient\";\n\nexport const scaleCluster = (cluster: Cluster | undefined, factor: number) => {\n  if (!cluster) {\n    return undefined;\n  }\n  return { ...cluster, min: cluster.min * factor, max: cluster.max * factor, median: cluster.median * factor };\n};\n\nexport const scaleClusters = (clusters: Cluster[] | undefined, factor: number): Cluster[] | undefined => {\n  return clusters?.filter((x) => x).map((x) => scaleCluster(x, factor)!);\n};\n\nexport const findMostMostLikely = (cluster: Cluster[]) => {\n  if (cluster.length === 0) {\n    return;\n  }\n  const mostLikely = cluster.reduce((acc, curr) => {\n    return acc.probability > curr.probability ? acc : curr;\n  });\n  return mostLikely;\n};\n\nexport const ExpectedValue = (Clusers: Cluster[][]) => {\n  if (Clusers.length == 0) {\n    return [];\n  }\n\n  return [\n    Clusers.reduce(\n      (acc, curr) => {\n        if (curr.length === 0) {\n          return acc;\n        }\n        const mostLikely = findMostMostLikely(curr);\n\n        acc.max += mostLikely?.max ?? 0;\n        acc.min += mostLikely?.min ?? 0;\n        acc.median += mostLikely?.median ?? 0;\n        return acc;\n      },\n      { min: 0, max: 0, median: 0, title: \"Actual\", probability: 0 }\n    ),\n  ];\n};\n","import { Box, Stack } from \"@mui/system\";\r\nimport { DatePicker } from \"@mui/x-date-pickers\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { Cluster, useClusters } from \"capabilities/projected-income/hooks/use-gradient\";\r\nimport { useFutureRetirementContributions } from \"capabilities/projected-wealth/hooks/use-future-retirement-contributions\";\r\nimport { useFutureSavings } from \"capabilities/projected-wealth/hooks/use-future-savings\";\r\nimport {\r\n  TresholdTax,\r\n  useFutureMedicareTax,\r\n  useFutureSocialSecurity,\r\n} from \"capabilities/projected-wealth/hooks/use-future-social-security\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { Card } from \"shared/components/card\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { ClusterValues } from \"shared/components/formatters/cluster-value\";\r\nimport { CountDown } from \"shared/components/formatters/countdown\";\r\nimport { Value } from \"shared/components/formatters/value\";\r\nimport { useDates } from \"shared/hooks/use-dates\";\r\nimport { store } from \"shared/store\";\r\nimport { ExpectedValue, scaleClusters } from \"shared/utility/cluster-helpers\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { monthDay } from \"shared/utility/format-date\";\r\n\r\nconst isFuture = (date: DateTime) => date.diffNow(\"milliseconds\").milliseconds > 0;\r\n\r\nexport const FutureEvents = (props: { year: number; onChange: (year: number) => void }) => {\r\n  const { year, onChange } = props;\r\n  const dates = useDates(year);\r\n\r\n  const savings = useFutureSavings(year);\r\n  const retirement = useFutureRetirementContributions(year);\r\n  const medicare = useFutureMedicareTax(year);\r\n  const socialSecurity = useFutureSocialSecurity(year);\r\n  const clusters = useClusters(year);\r\n  const bonusTakehomeFactor = useStore(store, (x) => 1 - x.projectedWealth.bonusWitholdingsRate);\r\n\r\n  const total = useMemo(() => {\r\n    const remaining = [\r\n      isFuture(dates.meritBonus) && scaleClusters(clusters.meritBonus, bonusTakehomeFactor),\r\n      isFuture(dates.companyBonus) && scaleClusters(clusters.companyBonus, bonusTakehomeFactor),\r\n      isFuture(dates.retirementBonus) && clusters.retirementBonus,\r\n      [{ min: savings.remaining, max: savings.remaining, probability: 1, median: 1 }],\r\n      [{ min: retirement.remaining, max: retirement.remaining, probability: 1, median: 1 }],\r\n      [{ min: socialSecurity.min?.remaining ?? 0, max: socialSecurity.max?.remaining ?? 0, probability: 1, median: 1 }],\r\n      [{ min: medicare.min?.remaining, max: medicare.max?.remaining, probability: 1, median: 1 }],\r\n    ].filter((x) => x !== false) as Cluster[][];\r\n\r\n    return ExpectedValue(remaining);\r\n  }, [\r\n    bonusTakehomeFactor,\r\n    clusters.companyBonus,\r\n    clusters.meritBonus,\r\n    clusters.retirementBonus,\r\n    dates.companyBonus,\r\n    dates.meritBonus,\r\n    dates.retirementBonus,\r\n    medicare.max?.remaining,\r\n    medicare.min?.remaining,\r\n    retirement.remaining,\r\n    savings.remaining,\r\n    socialSecurity.max?.remaining,\r\n    socialSecurity.min?.remaining,\r\n  ]);\r\n\r\n  return (\r\n    <>\r\n      <Stack spacing={2} width={550} paddingRight={1}>\r\n        <Card\r\n          title={\r\n            <>\r\n              <span>Remaining Projected Wealth</span>\r\n              <DatePicker\r\n                sx={{ width: 90, marginRight: 2, marginLeft: \"auto\" }}\r\n                label={\"year\"}\r\n                views={[\"year\"]}\r\n                minDate={getLocalDateTime()}\r\n                maxDate={getLocalDateTime().plus({ years: 1 })}\r\n                value={getLocalDateTime().set({ year })}\r\n                slotProps={{\r\n                  textField: {\r\n                    variant: \"standard\",\r\n                    label: \"\",\r\n                  },\r\n                }}\r\n                onYearChange={(year) => {\r\n                  onChange(year.year);\r\n                }}\r\n              />\r\n            </>\r\n          }\r\n        >\r\n          <ClusterValues clusters={total} eventDate={dates.companyBonus} />\r\n        </Card>\r\n        {isFuture(dates.meritBonus) && (\r\n          <ClusterCard\r\n            title=\"Merit Bonus\"\r\n            date={dates.meritBonus}\r\n            cluster={scaleClusters(clusters.meritBonus, bonusTakehomeFactor)}\r\n          />\r\n        )}\r\n        {isFuture(dates.companyBonus) && (\r\n          <ClusterCard\r\n            title=\"Company Bonus\"\r\n            date={dates.companyBonus}\r\n            cluster={scaleClusters(clusters.companyBonus, bonusTakehomeFactor)}\r\n          />\r\n        )}\r\n        {isFuture(dates.retirementBonus) && (\r\n          <ClusterCard title=\"Retirement Bonus\" date={dates.retirementBonus} cluster={clusters.retirementBonus} />\r\n        )}\r\n        {!!socialSecurity.min && <ThresholdTaxCard thresholdTax={socialSecurity} title={\"Social Security Limit\"} />}\r\n        {!!medicare.min && <ThresholdTaxCard thresholdTax={medicare} title={\"Medicare Supplmental Tax\"} />}\r\n\r\n        <Card title={\"Savings & Retirement\"}>\r\n          {!!savings.perMonth && (\r\n            <Value title={\"Expected savings\"} secondaryValue={<Cash tooltip=\"Per Month\" value={savings.perMonth} />}>\r\n              <Cash tooltip=\"Total Remaining\" value={savings.remaining} />\r\n            </Value>\r\n          )}\r\n          {!!retirement.perPaycheck && (\r\n            <Value\r\n              title={\"retirement contribution\"}\r\n              secondaryValue={<Cash tooltip=\"Per Paycheck\" value={retirement.perPaycheck} />}\r\n            >\r\n              <Cash tooltip=\"Total Remaining\" value={retirement.remaining} />\r\n            </Value>\r\n          )}\r\n        </Card>\r\n      </Stack>\r\n    </>\r\n  );\r\n};\r\n\r\nconst ThresholdTaxCard = (props: { thresholdTax: TresholdTax; title: string }) => {\r\n  const { thresholdTax, title } = props;\r\n  return (\r\n    <Card\r\n      title={\r\n        <Box display={\"flex\"} width={\"max-content\"} gap={1} marginRight={2}>\r\n          <span>{title}</span>\r\n\r\n          <CountDown dateFormat={monthDay} variant=\"date\" dateTime={thresholdTax.max?.firstOccurrence} />\r\n          {thresholdTax.min &&\r\n            thresholdTax.max &&\r\n            !thresholdTax.min.firstOccurrence.equals(thresholdTax.max.firstOccurrence) && (\r\n              <>\r\n                <span>or</span>\r\n                <CountDown dateFormat={monthDay} variant=\"date\" dateTime={thresholdTax.min.firstOccurrence} />\r\n              </>\r\n            )}\r\n        </Box>\r\n      }\r\n    >\r\n      {thresholdTax.max && thresholdTax.max.total === thresholdTax.min?.total && (\r\n        <Value title={\"Remaining\"}>\r\n          <Cash value={thresholdTax.max?.remaining} compact={false} />\r\n        </Value>\r\n      )}\r\n      {thresholdTax.max && thresholdTax.max.total !== thresholdTax.min?.total && (\r\n        <>\r\n          <Value title={thresholdTax.max.firstOccurrence > getLocalDateTime() ? \"Early\" : \"Low\"}>\r\n            <Cash value={thresholdTax.max?.remaining} compact={false} />\r\n          </Value>\r\n          <Value title={thresholdTax.max.firstOccurrence > getLocalDateTime() ? \"Late\" : \"High\"}>\r\n            <Cash value={thresholdTax.min?.total} compact={false} />\r\n          </Value>\r\n        </>\r\n      )}\r\n      <Value title={\"Per Paycheck\"}>\r\n        <Cash value={thresholdTax.max?.perPaycheck} compact={false} />\r\n      </Value>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst ClusterCard = (props: { date: DateTime; cluster?: Cluster[]; title: string }) => {\r\n  const { date, cluster, title } = props;\r\n  return (\r\n    <Card\r\n      title={\r\n        <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\r\n          <span>{title}</span>\r\n          <CountDown variant=\"date\" dateFormat={monthDay} dateTime={date} />\r\n        </Box>\r\n      }\r\n    >\r\n      <ClusterValues clusters={cluster} eventDate={date} />\r\n    </Card>\r\n  );\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\n\nexport const useEarliestAccountEntry = () => {\n  const accounts = useStore(store, (x) => x.wealth);\n  return DateTime.fromMillis(\n    Object.values(accounts)\n      .map((x) => {\n        if (x.type === \"account\") {\n          return x.data[0]?.date ? DateTime.fromISO(x.data[0].date) : getLocalDateTime();\n        }\n        return getLocalDateTime();\n      })\n      .reduce((acc, curr) => Math.min(acc, curr?.toMillis() ?? Infinity), getLocalDateTime().toMillis())\n  );\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { useClusters } from \"capabilities/projected-income/hooks/use-gradient\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { useDates } from \"shared/hooks/use-dates\";\nimport { store } from \"shared/store\";\nimport { findMostMostLikely, scaleCluster } from \"shared/utility/cluster-helpers\";\n\nexport const useFutureBonuses = (year: number) => {\n  const local = DateTime.local();\n  const dates = useDates(year);\n  const clusters = useClusters(year);\n  const config = useStore(store, (x) => x.projectedWealth);\n\n  const bonuses = useMemo(() => {\n    return (\n      [\n        [\n          dates.meritBonus,\n          scaleCluster(findMostMostLikely(clusters.meritBonus), 1 - config.bonusWitholdingsRate)?.median ?? 0,\n        ],\n        [\n          dates.companyBonus,\n          scaleCluster(findMostMostLikely(clusters.companyBonus), 1 - config.bonusWitholdingsRate)?.median ?? 0,\n        ],\n        [dates.retirementBonus, findMostMostLikely(clusters.retirementBonus)?.median ?? 0],\n      ] as [DateTime, number][]\n    )\n      .map(([payedOn, amount]) => (local < payedOn ? amount : 0))\n      .reduce((acc, curr) => acc + curr, 0);\n  }, [\n    dates.meritBonus,\n    dates.companyBonus,\n    dates.retirementBonus,\n    clusters.meritBonus,\n    clusters.companyBonus,\n    clusters.retirementBonus,\n    config.bonusWitholdingsRate,\n    local,\n  ]);\n\n  return bonuses;\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { findNearestIdxOnOrBefore, findNearestOnOrBefore } from \"shared/utility/find-nearest-on-or-before\";\nimport { calcEquity, calcLoanBalance } from \"shared/utility/mortgage-calc\";\nimport { useEarliestAccountEntry } from \"./use-earliest-account-entry\";\nimport { useFutureBonuses } from \"./use-future-bonuses\";\nimport { useFutureRetirementContributions } from \"./use-future-retirement-contributions\";\nimport { useFutureSavings } from \"./use-future-savings\";\nimport { useFutureMedicareTax, useFutureSocialSecurity } from \"./use-future-social-security\";\n\nexport interface TimeSeriesWealth {\n  graphDate: Date;\n  date: DateTime;\n  wealth: number;\n  yoyCash?: number;\n  yoyPct?: number;\n}\n\nconst useFutureWealth = (year: number) => {\n  const bonuses = useFutureBonuses(year);\n  const savings = useFutureSavings(year);\n  const ssiTaxValue = useFutureSocialSecurity(year);\n  const medicareTaxValue = useFutureMedicareTax(year);\n  const retirementContribution = useFutureRetirementContributions(year);\n\n  return (\n    bonuses +\n    savings.remaining +\n    retirementContribution.remaining +\n    (ssiTaxValue.min?.remaining ?? 0) +\n    (medicareTaxValue?.min?.remaining ?? 0)\n  );\n};\n\nconst useFuturesWealth = () => {\n  const year = getLocalDateTime().year;\n  return {\n    [year + 1]: useFutureWealth(year),\n    [year + 2]: useFutureWealth(year + 1) + useFutureWealth(year),\n  };\n};\n\nexport const useTimeSeriesWealth = (year: number) => {\n  const localDateTime = getLocalDateTime();\n  const earliest = useEarliestAccountEntry();\n  const accounts = useStore(store, (x) => x.wealth);\n  const futuresWealth = useFuturesWealth();\n\n  const data = useMemo(() => {\n    if (!earliest.isValid) {\n      return [];\n    }\n\n    const dates = new Array(year + 2 - earliest.year)\n      .fill(earliest.year)\n      .map((x, i) => DateTime.fromObject({ day: 1, month: 1, year: x + i }).startOf(\"day\"));\n\n    const idx = findNearestIdxOnOrBefore(localDateTime, dates, (x) => x);\n    if (!dates.some((x) => x.equals(localDateTime.startOf(\"day\")))) {\n      dates.splice(idx + 1, 0, localDateTime);\n    }\n\n    const futureBenchmarkIdx = idx;\n\n    return dates\n      .map((date) => {\n        const accountsWealth = Object.values(accounts).map((x) => {\n          if (x.type === \"mortgage\" && x.loan) {\n            const houseValue = findNearestOnOrBefore(date, x.data);\n            const balance = calcLoanBalance(date, x.loan);\n            return calcEquity(x.loan.ownershipPct, houseValue?.value, balance, x.loan.principal);\n          } else if (x.type === \"account\") {\n            const entry = findNearestOnOrBefore(date, x.data);\n            return entry?.value ?? 0;\n          }\n          return 0;\n        });\n\n        const accountWealth = accountsWealth.reduce((acc, curr) => acc + curr, 0);\n        const futureWealth = futuresWealth[date.year] ?? 0;\n\n        return {\n          date,\n          graphDate: date.toJSDate(),\n          wealth: accountWealth + futureWealth,\n        };\n      })\n      .map((x, idx, arr) => {\n        if (x.date <= localDateTime || x.date.year === localDateTime.year + 2) {\n          const benchmarkWealth = arr[idx - 1]?.wealth;\n          if (!benchmarkWealth) {\n            return x;\n          }\n          return {\n            ...x,\n            yoyCash: x.wealth - benchmarkWealth,\n            yoyPct: x.wealth / benchmarkWealth - 1,\n          };\n        }\n\n        const benchmarkWealth = arr[futureBenchmarkIdx]?.wealth;\n        if (!benchmarkWealth) {\n          return x;\n        }\n        return {\n          ...x,\n          yoyCash: x.wealth - benchmarkWealth,\n          yoyPct: x.wealth / benchmarkWealth - 1,\n        };\n      });\n  }, [earliest.isValid, earliest.year, year, localDateTime, accounts, futuresWealth]);\n  return data as TimeSeriesWealth[];\n};\n","import { AgCartesianChartOptions, AgLineSeriesOptions } from \"ag-charts-community\";\nimport { AgChartsReact } from \"ag-charts-react\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { useTimeSeriesWealth } from \"../hooks/use-times-series-wealth\";\n\nexport const WealthChart = (props: { titleYear: number }) => {\n  const dataYear = getLocalDateTime().year + 1;\n  const { titleYear } = props;\n  const data = useTimeSeriesWealth(dataYear);\n  const offsetIdx = getLocalDateTime().year - titleYear + 1;\n\n  const series = useMemo(() => {\n    return [\n      {\n        type: \"line\",\n        xKey: \"graphDate\",\n        yKey: \"wealth\",\n        yName: \"Wealth\",\n        tooltip: {\n          renderer: ({ datum, yKey, xKey }) => ({\n            content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCash(datum[yKey])}`,\n          }),\n        },\n      },\n      {\n        type: \"line\",\n        xKey: \"graphDate\",\n        yKey: \"yoyCash\",\n        yName: \"YoY ($)\",\n        tooltip: {\n          renderer: ({ datum, yKey, xKey }) => ({\n            content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCash(datum[yKey])}`,\n          }),\n        },\n      },\n    ] as AgLineSeriesOptions[];\n  }, []);\n\n  const options: AgCartesianChartOptions = useMemo(\n    () => ({\n      theme: \"ag-default-dark\",\n      title: {\n        text: `${data[data.length - 1 - offsetIdx].date.toFormat(shortDate)} Projected wealth ${formatCashShort(\n          (data[data.length - 1 - offsetIdx]?.wealth ?? 0) as number\n        )}`,\n      },\n      data,\n      axes: [\n        {\n          type: \"time\",\n          position: \"bottom\",\n          label: {\n            format: \"%Y\",\n          },\n        },\n        {\n          type: \"number\",\n          position: \"left\",\n          nice: false,\n        },\n      ],\n      series,\n    }),\n    [data, series, offsetIdx]\n  );\n  return <AgChartsReact options={options} />;\n};\n","import QueryStatsIcon from \"@mui/icons-material/QueryStats\";\nimport UpdateIcon from \"@mui/icons-material/Update\";\nimport { Tooltip } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { ColDef, ICellRendererParams } from \"ag-grid-community\";\nimport { DateTime } from \"luxon\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { Percent } from \"shared/components/formatters/percent\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { TimeSeriesWealth } from \"../../hooks/use-times-series-wealth\";\n\nexport const columnConfig: ColDef<TimeSeriesWealth>[] = [\n  {\n    headerName: \"Date\",\n    colId: \"date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data?.date,\n    cellRenderer: (x: ICellRendererParams<unknown, DateTime>) => {\n      const systemYear = getLocalDateTime().year;\n      return (\n        <Stack direction={\"row\"} alignItems={\"center\"}>\n          {x.valueFormatted}&nbsp;\n          {x.value && x.value > getLocalDateTime() && (\n            <Tooltip title=\"Future Event\">\n              <UpdateIcon htmlColor=\"yellow\" />\n            </Tooltip>\n          )}\n          {x.value &&\n            x.value.equals(\n              DateTime.fromObject({\n                day: 1,\n                month: 1,\n                year: systemYear,\n              })\n            ) && (\n              <Tooltip\n                title={`Benchmark for ${getLocalDateTime().toFormat(shortDate)} & ${getLocalDateTime().set({ day: 1, month: 1 }).plus({ years: 1 }).toFormat(shortDate)} `}\n              >\n                <QueryStatsIcon htmlColor=\"yellow\" />\n              </Tooltip>\n            )}\n        </Stack>\n      );\n    },\n  },\n  {\n    type: \"numericColumn\",\n    headerName: \"Wealth\",\n    colId: \"wealth\",\n    valueGetter: (x) => x.data?.wealth,\n    cellRenderer: (x: ICellRendererParams<unknown, number>) => {\n      return x.value && <Cash value={x.value} placement=\"left\" />;\n    },\n  },\n  {\n    colId: \"yoy-cash\",\n    type: \"numericColumn\",\n    headerName: \"YoY ($)\",\n    valueGetter: (x) => x.data?.yoyCash,\n    cellRenderer: (x: ICellRendererParams<unknown, number>) => {\n      return x.value && <Cash value={x.value} placement=\"left\" />;\n    },\n  },\n  {\n    colId: \"yoy-percent\",\n    type: \"numericColumn\",\n    headerName: \"YoY (%)\",\n    valueGetter: (x) => x.data?.yoyPct,\n    cellRenderer: (x: ICellRendererParams<unknown, number>) => {\n      return x.value && <Percent value={x.value} />;\n    },\n    minWidth: 60,\n  },\n];\n","import { Box } from \"@mui/system\";\nimport { useTimeSeriesWealth } from \"capabilities/projected-wealth/hooks/use-times-series-wealth\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { columnConfig } from \"./colum-config\";\n\nexport const WealthTable = () => {\n  const dataYear = getLocalDateTime().year + 1;\n  const data = useTimeSeriesWealth(dataYear);\n\n  return (\n    <Box height={\"100%\"} width={\"100%\"}>\n      <AgGrid\n        id=\"time-series-wealth\"\n        rowData={data}\n        columnDefs={columnConfig}\n        autoSizeStrategy={{ type: \"fitGridWidth\" }}\n        onRowDataUpdated={(e) => e.api.sizeColumnsToFit()}\n      />\n    </Box>\n  );\n};\n","import { Box, Stack } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { FutureEvents } from \"./components/future-events\";\nimport { WealthChart } from \"./components/wealth-chart\";\nimport { WealthTable } from \"./components/wealth-table\";\n\nexport const ProjectedWealth = () => {\n  const localTime = getLocalDateTime();\n  const [year, setYear] = useState(localTime.year);\n\n  return (\n    <Box display=\"flex\" flexDirection=\"row\" height=\"100%\" width={\"100%\"} gap={1}>\n      <Box flex=\"0 1 auto\" height={\"100%\"} overflow={\"auto\"}>\n        <FutureEvents onChange={setYear} year={year} />\n      </Box>\n      <Box flex=\"1 1 auto\" overflow={\"auto\"}>\n        <Stack spacing={2} height={\"100%\"} width={\"100%\"}>\n          <WealthChart titleYear={year} />\n          <WealthTable />\n        </Stack>\n      </Box>\n    </Box>\n  );\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { useCallback } from \"react\";\nimport { store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const downloadJson = <T,>(filename: string, storeData: T) => {\n  const data = JSON.stringify(storeData, null, 2);\n  const link = document.createElement(\"a\");\n  link.download = filename;\n  const blob = new Blob([data], { type: \"application/json\" });\n  link.href = window.URL.createObjectURL(blob);\n  link.click();\n};\n\nexport const useExport = () => {\n  const storeData = useStore(store);\n  const onExport = useCallback(() => {\n    downloadJson(`wealth-tracker-${getLocalDateTime().toFormat(shortDate)}.json`, storeData);\n  }, [storeData]);\n\n  return onExport;\n};\n","import { useCallback } from \"react\";\nimport { storeValidator } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\nimport { migration } from \"shared/store/migrations\";\n\nfunction selectFile(contentType: string) {\n  return new Promise<File>((resolve) => {\n    const input = document.createElement(\"input\");\n    input.type = \"file\";\n    input.multiple = false;\n    input.accept = contentType;\n\n    input.onchange = () => {\n      const files = Array.from(input.files ?? []);\n      resolve(files[0]);\n    };\n\n    input.click();\n  });\n}\n\nexport const useImport = () => {\n  return useCallback(() => {\n    return new Promise<void>((resolve, reject) => {\n      selectFile(\"application/json\").then((file) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = (readerEvent) => {\n          const content = readerEvent.target?.result?.toString();\n          if (content) {\n            const data = JSON.parse(window.atob(content.split(\",\")[1]));\n            const validation = storeValidator.safeParse(data);\n            if (validation.success) {\n              store.setState(() => data);\n              resolve();\n            } else {\n              try {\n                migration(data);\n                store.setState(() => data);\n                resolve();\n              } catch (err) {\n                console.log(\"error\", err);\n                console.log(\"invalid data\", data);\n                reject(err);\n              }\n            }\n          }\n        };\n      });\n    });\n  }, []);\n};\n","import { useMemo } from \"react\";\nimport { storeValidator } from \"shared/models/store/current\";\n\nexport const useStoreDataError = () => {\n  const invalidData = localStorage.getItem(\"store-invalid\");\n  return useMemo(() => {\n    if (!invalidData) {\n      return { hadError: false };\n    }\n    const jsonInvalidData = JSON.parse(invalidData);\n    const validated = storeValidator.safeParse(jsonInvalidData);\n    return {\n      hadError: !!invalidData,\n      invalidData: jsonInvalidData,\n      parseError: invalidData && !validated.success ? validated.error : undefined,\n      resetError: () => {\n        localStorage.removeItem(\"store-invalid\");\n      },\n    };\n  }, [invalidData]);\n};\n","import { create } from \"mutative\";\nimport { ProjectedWealthKeys } from \"shared/models/store/current\";\nimport { store } from \".\";\n\nexport const setProjectedWealth = (configName: ProjectedWealthKeys, value: number) => {\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      next.projectedWealth[configName] = value;\n    });\n  });\n};\n","import { InputAdornment, TextField } from \"@mui/material\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { useCallback, useState } from \"react\";\nimport { ProjectedWealthKeys } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\nimport { setProjectedWealth } from \"shared/store/set-projected-wealth\";\n\ninterface ConfigEntryProps {\n  configName: ProjectedWealthKeys;\n  label: string;\n  variant?: \"cash\" | \"percent\";\n}\n\nexport const ConfigEntry = (props: ConfigEntryProps) => {\n  const { configName, label, variant = \"cash\" } = props;\n  const [error, setError] = useState(false);\n  const isPercent = variant === \"percent\";\n\n  const onchange = useCallback(\n    (input: string) => {\n      let value = +input;\n      const isNan = Number.isNaN(value);\n      setError(isNan);\n      if (isNan) {\n        return;\n      }\n\n      if (isPercent) {\n        value /= 100;\n      }\n\n      setProjectedWealth(configName, value);\n    },\n    [configName, isPercent]\n  );\n\n  const value = useStore(store, (x) => x.projectedWealth[configName]);\n  const defaultValue = isPercent ? value * 100 : value;\n\n  return (\n    <TextField\n      error={error}\n      variant=\"outlined\"\n      InputProps={{\n        startAdornment: <InputAdornment position=\"start\">{isPercent ? \"%\" : \"$\"}</InputAdornment>,\n      }}\n      defaultValue={defaultValue.toFixed(isPercent ? 2 : 0)}\n      type=\"numeric\"\n      label={label}\n      onChange={(event) => {\n        onchange(event.target.value);\n      }}\n    />\n  );\n};\n","import { Stack } from \"@mui/system\";\nimport { ConfigEntry } from \"./config-entry\";\n\nexport const Config = () => {\n  return (\n    <Stack spacing={2}>\n      <ConfigEntry configName=\"savingsPerMonth\" label=\"Monthly Saving Rate\" />\n      <ConfigEntry configName=\"retirementContributionPaycheck\" label=\"Retirement Contribution Per Paycheck\" />\n      <ConfigEntry configName=\"bonusWitholdingsRate\" label=\"Bonus Witholdings Rate\" variant=\"percent\" />\n      <Stack direction={\"row\"} spacing={2} width={\"100%\"} sx={{ \"& > *\": { flex: 1 } }}>\n        <ConfigEntry configName=\"socialSecurityLimit\" label=\"Social Security Tax Limit\" />\n        <ConfigEntry configName=\"socialSecurityTaxRate\" label=\"Social Security Tax\" variant=\"percent\" />\n      </Stack>\n      <Stack direction={\"row\"} spacing={2} width={\"100%\"} sx={{ \"& > *\": { flex: 1 } }}>\n        <ConfigEntry configName=\"medicareSupplementalTaxThreshold\" label=\"Medicare Supplemental Threshold\" />\n        <ConfigEntry configName=\"medicareSupplementalTaxRate\" label=\"Medicare Supplemental Tax\" variant=\"percent\" />\n      </Stack>\n    </Stack>\n  );\n};\n","import { Box, Table, TableBody, TableCell, TableHead, TableRow } from \"@mui/material\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport { ReactNode } from \"react\";\nimport { ZodError } from \"zod\";\n\ninterface InvalidDataDialogProps {\n  open?: boolean;\n  error?: ZodError;\n  children?: ReactNode;\n}\n\nexport default function InvalidDataDialog(props: InvalidDataDialogProps) {\n  const { open, error, children } = props;\n\n  return (\n    <>\n      <Dialog open={!!open}>\n        <DialogTitle id=\"alert-dialog-title\">{\"Error Loading Data\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            <Box maxHeight={500} overflow={\"auto\"}>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Error Message</TableCell>\n                    <TableCell>Path</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {error?.issues.map((x, idx) => {\n                    return (\n                      <TableRow key={idx}>\n                        <TableCell>{x.message}</TableCell>\n                        <TableCell>{x.path.join(\".\")}</TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            </Box>\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>{children}</DialogActions>\n      </Dialog>\n    </>\n  );\n}\n","import CloseIcon from \"@mui/icons-material/Close\";\nimport DeleteForever from \"@mui/icons-material/DeleteForever\";\nimport SettingsIcon from \"@mui/icons-material/Settings\";\nimport { Box, Button, IconButton, Modal, Paper, Stack, Tab, Tabs, Typography } from \"@mui/material\";\nimport { NetWealth } from \"capabilities/net-wealth\";\nimport { ProjectedIncome } from \"capabilities/projected-income\";\nimport { ProjectedWealth } from \"capabilities/projected-wealth\";\nimport { useState } from \"react\";\nimport { ConfirmDialog } from \"shared/components/confirm-dialog\";\nimport { downloadJson, useExport } from \"shared/hooks/use-export\";\nimport { useImport } from \"shared/hooks/use-import\";\nimport { useStoreDataError } from \"shared/hooks/use-store-data-error\";\nimport { resetStore } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { Config } from \"./config\";\nimport InvalidDataDialog from \"./invalid-data-dialog\";\n\nexport const App = () => {\n  const [tab, setTab] = useState<string>(\"wealth\");\n  const onExport = useExport();\n  const onImport = useImport();\n  const { hadError, parseError, resetError, invalidData } = useStoreDataError();\n  const [error, setError] = useState(parseError);\n  const [isOpen, setIsOpen] = useState(hadError);\n\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n\n  return (\n    <>\n      <Modal open={isSettingsOpen} onClose={() => setIsSettingsOpen(false)}>\n        <Paper\n          sx={{\n            padding: 2,\n            width: 600,\n            top: \"50%\",\n            left: \"50%\",\n            transform: \"translate(-50%, -50%)\",\n            position: \"absolute\",\n          }}\n        >\n          <Stack spacing={2}>\n            <Box display={\"flex\"}>\n              <Typography variant=\"h5\">Configuration</Typography>\n              <IconButton sx={{ marginLeft: \"auto\" }} onClick={() => setIsSettingsOpen(false)}>\n                <CloseIcon />\n              </IconButton>\n            </Box>\n            <Config />\n          </Stack>\n        </Paper>\n      </Modal>\n      <InvalidDataDialog open={isOpen} error={error}>\n        {hadError && (\n          <>\n            <Button\n              color=\"error\"\n              onClick={() => {\n                setIsOpen(false);\n                resetError?.();\n                resetStore();\n              }}\n            >\n              Reset\n            </Button>\n            <Button\n              onClick={() => {\n                downloadJson(`invalid-data-wealth-tracker-${getLocalDateTime().toFormat(shortDate)}.json`, invalidData);\n              }}\n            >\n              Download Data\n            </Button>\n\n            <Button\n              onClick={() => {\n                setIsOpen(false);\n                resetError?.();\n              }}\n            >\n              Ignore\n            </Button>\n          </>\n        )}\n        {!hadError && (\n          <Button\n            onClick={() => {\n              setIsOpen(false);\n            }}\n          >\n            Cancel\n          </Button>\n        )}\n      </InvalidDataDialog>\n      <Box display={\"flex\"} flexDirection={\"column\"} height=\"100%\">\n        <Box flex=\"0 1 auto\">\n          <Stack direction=\"row\">\n            <Tabs value={tab} onChange={(_, value) => setTab(value)}>\n              <Tab value=\"wealth\" label=\"Total Wealth\" />\n              <Tab value=\"projected-income\" label=\"Projected Income\" />\n              <Tab value=\"projected-wealth\" label=\"Projected Wealth\" />\n            </Tabs>\n            <Box marginLeft={\"auto\"} gap={2} display={\"flex\"}>\n              <Button onClick={() => setIsSettingsOpen(true)}>\n                <SettingsIcon />\n              </Button>\n              <Button\n                onClick={() =>\n                  onImport().catch((err) => {\n                    setIsOpen(true);\n                    setError(err);\n                  })\n                }\n              >\n                Import\n              </Button>\n              <Button onClick={onExport}>Export</Button>\n              <ConfirmDialog title=\"Reset Everything\" onConfirm={resetStore}>\n                <Button color=\"error\">\n                  <DeleteForever />\n                  Reset\n                </Button>\n              </ConfirmDialog>\n            </Box>\n          </Stack>\n        </Box>\n        <Box flex=\"1 1 auto\" padding={2} height={\"100%\"} width={\"100%\"} overflow=\"hidden\">\n          {tab === \"wealth\" && <NetWealth />}\n          {tab === \"projected-income\" && <ProjectedIncome />}\n          {tab === \"projected-wealth\" && <ProjectedWealth />}\n        </Box>\n      </Box>\n    </>\n  );\n};\n","import { DateTime } from \"luxon\";\n\nexport const aPayday = DateTime.fromObject({ month: 12, day: 1, year: 2023 });\n","import { DateTime } from \"luxon\";\nimport { AccountData, ProjectedIncome } from \"shared/models/store/current\";\nimport { findSameYear } from \"shared/utility/find-same-year\";\nimport { getPayments } from \"shared/utility/get-payments\";\nimport { valueByDateRange } from \"shared/utility/get-values-by-date-range\";\n\nexport const getScenarioSize = (year: number, projectedIncome: ProjectedIncome) => {\n  const timeSeries = projectedIncome.timeSeries;\n  const pay = timeSeries.paycheck.filter((x) => DateTime.fromISO(x.date).year > year - 3);\n  const mostRecentPay = pay.at(-1) ?? timeSeries.paycheck.at(-1);\n  if (!mostRecentPay) {\n    return 0;\n  }\n\n  const yearsToGenerate = Math.max(year - DateTime.fromISO(mostRecentPay.date).year, 1);\n  return Math.pow(timeSeries.meritIncreasePct.length, yearsToGenerate) * timeSeries.companyBonus.length;\n};\n\nconst getMeritPairs = (year: number, projectedIncome: ProjectedIncome) => {\n  const timeSeries = projectedIncome.timeSeries;\n  const meritBonusPct = findSameYear(year, timeSeries.meritBonusPct);\n  const meritIncreasePct = findSameYear(year, timeSeries.meritIncreasePct);\n\n  const allMeritPairs = timeSeries.meritIncreasePct.map((x) => {\n    const meritBonusPctPair = findSameYear(DateTime.fromISO(x.date).year, timeSeries.meritBonusPct);\n    return {\n      meritIncreasePct: x.value,\n      meritBonusPct: meritBonusPctPair?.value ?? 0,\n    };\n  });\n\n  return allMeritPairs\n    .filter((x) => (meritBonusPct ? x.meritBonusPct === meritBonusPct.value : true))\n    .filter((x) => (meritIncreasePct ? x.meritIncreasePct === meritIncreasePct?.value : true));\n};\n\nexport const getMeritSequence = (year: number, projectedIncome: ProjectedIncome) => {\n  const timeSeries = projectedIncome.timeSeries;\n  const meritPairs = getMeritPairs(year, projectedIncome);\n\n  const pay = timeSeries.paycheck.filter((x) => DateTime.fromISO(x.date).year > year - 3);\n  const mostRecentPay = pay.at(-1) ?? timeSeries.paycheck.at(-1);\n\n  if (!mostRecentPay) {\n    return [];\n  }\n\n  const yearsToGenerate = Math.max(year - DateTime.fromISO(mostRecentPay.date).year, 1);\n\n  let meritSequence = meritPairs.slice().map((x) => [x]);\n  for (let i = 0; i < yearsToGenerate - 1; i++) {\n    meritSequence = meritSequence.flatMap((x) => {\n      return meritPairs.map((merit) => {\n        return x.slice().concat(merit);\n      });\n    });\n  }\n  return meritSequence;\n};\n\nexport const getEmptyMeritSequence = (year: number, projectedIncome: ProjectedIncome, pay: AccountData[]) => {\n  const timeSeries = projectedIncome.timeSeries;\n  const equityIncreasePct = findSameYear(year, timeSeries.equityPct)?.value ?? 0;\n  const meritIncreasePct = findSameYear(year, timeSeries.meritIncreasePct)?.value ?? 0;\n  const meritBonusPct = findSameYear(year, timeSeries.meritBonusPct)?.value ?? 0;\n  const meritBonuses = pay.map(\n    (x) => findSameYear(DateTime.fromISO(x.date).year, timeSeries.meritBonusPct)?.value ?? 0\n  );\n\n  const lastThreeMeritBonuses = meritBonuses.slice(-3);\n  const lastThreeMeritBonusFactor = meritBonuses.slice(-3).reduce((acc, curr) => acc + curr, 0);\n  const payments = getPayments(\n    DateTime.fromObject({ day: 1, month: 1, year: year - 1 }),\n    DateTime.fromObject({ day: 31, month: 12, year: year }).endOf(\"day\"),\n    valueByDateRange(pay)\n  );\n\n  return [\n    {\n      pay: pay.slice(),\n      lastThreeMeritBonusFactor,\n      lastThreeMeritBonuses,\n      meritBonusPct,\n      meritIncreasePct,\n      payments,\n      equityIncreasePct,\n      retirementBonusPct: 0.15,\n    },\n  ];\n};\n","import { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { Scenario } from \"shared/models/scenario\";\nimport { store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { scenarioStore } from \"../store/scenario-store\";\nimport { getScenarioSize } from \"./merit-sequence\";\n\nconst currentYear = getLocalDateTime().year;\nconst maxYear = (() => {\n  const projectedIncome = store.state.projectedIncome;\n  for (let i = currentYear; i <= currentYear + 10; i++) {\n    if (getScenarioSize(i, projectedIncome) > 2499) {\n      return Math.max(currentYear, i - 1);\n    }\n  }\n  return currentYear + 10;\n})();\n\nconst worker = new Worker(new URL(\"worker.js\", import.meta.url), { type: \"module\" });\nworker.onmessage = (event: MessageEvent<{ year: number; scenarios: Scenario[] }>) => {\n  const isLoading = event.data.year !== maxYear;\n\n  scenarioStore.setState((prev) => {\n    return create(prev, (x) => {\n      x.scenarios[event.data.year] = event.data.scenarios;\n      x.loading = isLoading;\n      x.maxYear = Math.max(event.data.year, x.maxYear);\n      x.minYear = Math.min(event.data.year, x.minYear);\n    });\n  });\n};\n\nconst loadAllScenarios = () => {\n  const projectedIncome = store.state.projectedIncome;\n  const first = projectedIncome.timeSeries.paycheck[1]?.date;\n  const date = first ? DateTime.fromISO(first) : getLocalDateTime();\n  const oldestYear = date.year;\n  worker.postMessage({ year: 2024, projectedIncome });\n  for (let i = oldestYear; i < currentYear; i++) {\n    worker.postMessage({ year: i, projectedIncome });\n  }\n  for (let i = currentYear; i <= maxYear; i++) {\n    worker.postMessage({ year: i, projectedIncome });\n  }\n};\nloadAllScenarios();\n\nlet priorProjectedIncome = store.state.projectedIncome;\nstore.subscribe(() => {\n  if (priorProjectedIncome === store.state.projectedIncome) {\n    return;\n  }\n  scenarioStore.setState(() => ({ loading: false, scenarios: {}, maxYear: currentYear, minYear: currentYear }));\n  priorProjectedIncome = store.state.projectedIncome;\n  loadAllScenarios();\n});\n","import { CssBaseline, ThemeProvider, createTheme } from \"@mui/material\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers\";\nimport { AdapterLuxon } from \"@mui/x-date-pickers/AdapterLuxon\";\nimport \"ag-grid-community/styles/ag-grid.css\";\nimport \"ag-grid-community/styles/ag-theme-quartz.css\";\nimport { App } from \"app/app.tsx\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport \"shared/web-worker/entry\";\nimport \"./index.css\";\n\nconst darkTheme = createTheme({\n  palette: {\n    mode: \"dark\",\n  },\n});\n\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n  <React.StrictMode>\n    <ErrorBoundary\n      fallbackRender={(props) => {\n        return (\n          <>\n            <div style={{ backgroundColor: \"#FFF\" }}>{props.error.message}</div>\n            <div style={{ backgroundColor: \"#FFF\" }}>{props.error.stackTrace}</div>\n          </>\n        );\n      }}\n    >\n      <LocalizationProvider dateAdapter={AdapterLuxon}>\n        <ThemeProvider theme={darkTheme}>\n          <CssBaseline />\n          <App />\n        </ThemeProvider>\n      </LocalizationProvider>\n    </ErrorBoundary>\n  </React.StrictMode>\n);\n"],"names":["sortByDate","select","direction","a","b","toMillis","loanValidator","z","object","principal","number","ratePct","paymentsPerYear","payment","firstPaymentDate","string","ownershipPct","accountDataValidator","date","value","accountValidator","type","literal","data","array","getDefaultStore","version","projectedIncome","timeSeries","paycheck","meritBonusPct","companyBonusPct","meritBonus","companyBonus","retirementBonus","equityPct","meritIncreasePct","wealth","projectedWealth","medicareSupplementalTaxThreshold","socialSecurityLimit","socialSecurityTaxRate","medicareSupplementalTaxRate","savingsPerMonth","retirementContributionPaycheck","bonusWitholdingsRate","id","mortgageValidator","loan","optional","record","union","storeValidator","migration","Error","storeV0Validator","parse","storeV1Validator","storeV2Validator","next","console","log","createStore","validator","defaultValue","key","invalidData","localData","localStorage","getItem","JSON","safeParse","success","setItem","stringify","err","store","CreateStore","subscribe","current","state","AddAccountEntry","accountName","amount","setState","create","prev","push","startOf","toString","sort","DateTime","fromISO","x","addProjectedIncome","concat","removeAccount","removeAccountEntry","idxToRemove","findIndex","splice","removeProjectedIncome","resetStore","setLoan","updateAccountDate","account","idx","toISO","updateAccountName","currentAccountName","newAccountName","updateAccountValue","updateProjectedIncome","NewAccount","forwardRef","props","ref","open","setOpen","useState","nameRef","useRef","error","setError","accountType","setAccountType","undefined","marginTop","target","children","AgGrid","rest","height","getLocalDateTime","local","shortDate","monthDay","formatCashShort","Intl","NumberFormat","style","currency","notation","maximumFractionDigits","format","formatCash","Cash","fallback","disableTooltip","compact","tooltip","placement","formatted","useMemo","join","createAccountColumnConfig","headerName","valueFormatter","toFormat","valueGetter","cellEditor","editable","valueSetter","fromJSDate","newValue","isValid","cellRenderer","cellStyle","display","padding","sortable","width","colId","DeleteForeverIcon","useMissingYears","years","Object","entries","groupBy","year","map","find","janFirst","fromObject","day","month","diff","days","lookup","fromEntries","missing","i","length","ConfirmDialog","onConfirm","title","isOpen","setIsOpen","openButton","React","cloneElement","onClick","minWidth","justifyContent","marginRight","AccountSettings","nextAccountName","setNextAccountName","SettingsIcon","Close","event","AccountTab","useStore","setDate","inputRef","missingYears","hasSameDate","hasSame","onAddEntry","accountColumnConfig","marginLeft","color","startAdornment","api","sizeColumnsToFit","findNearestOnOrBefore","findNearestIdxOnOrBefore","selector","getGraphDates","accounts","Set","flatMap","calcLoanBalance","rate","monthlyPayment","annualizedRate","periods","months","totalRate","balance","calcEquity","houseValue","loanBalance","AddEntry","Stack","mortgageColumnConfig","toFixed","equity","convertPct","min","datetime","offset","handleClose","textField","parsed","issues","path","MortgageTab","allAccounts","mortgageData","values","Box","AccountTabs","firstAccount","keys","setAccount","useEffect","_","getMortgageValue","mortgage","entry","getAccountValue","getGraphValue","useGraphData","dates","graphData","reduce","acc","toJSDate","total","forEach","arr","firstNonZero","slice","WealthChart","series","stacked","xKey","yKey","yName","renderer","datum","content","toISODate","options","theme","text","axes","position","label","NetWealth","border","borderRadius","backgroundColor","boxShadow","Card","paddingBottom","paddingLeft","paddingTop","CashRange","max","showRange","minFormatted","maxFormatted","formatPercent","getColor","probability","Percent","PercentRange","Value","secondaryValue","tertiaryValue","className","flexDirection","alignItems","gap","flexShrink","ClusterValue","ClusterValues","clusters","eventDate","diffNow","toHuman","dur","smallestUnit","units","smallestIdx","indexOf","shiftTo","normalize","toObject","filter","Duration","replaceAll","CountDown","dateTime","variant","dateFormat","countDownStr","tooltipStr","countDownColor","findSameYear","useRealDate","useDates","meritBonusDate","companyBonusDate","meritIncrease","useDateRanges","base","start","end","endOf","scenarioStore","Store","loading","maxYear","minYear","scenarios","updateProjectedIncomeDate","valueFormatted","UpdateIcon","DataEntry","defaultDate","setAmount","flex","Layout","marginBottom","IncomePerPeriodTooltip","incomePerPeriod","perPayday","count","index","ArrowForwardIcon","curr","clusterTitle","ckmeans","Math","median","useClusters","totalPay","pay","taxablePay","at","equityIncreasePct","useHasMeritPairs","every","ProjectedIncome","selectedYear","setSelectedYear","hasMissingPairs","dateRanges","basePay","aprToApr","paychecks","payments","payedOn","reduceRight","unshift","flexWrap","set","sx","maxWidth","useFutureRetirementContributions","retirementContribution","remaining","remainingPayments","perPaycheck","useFutureSavings","config","perMonth","useFutureSocialSecurity","useThresholdTax","useFutureMedicareTax","taxes","threshold","taxRate","cumulative","firstOccurrence","currentPaymentIdx","scaleCluster","cluster","factor","scaleClusters","findMostMostLikely","ExpectedValue","Clusers","mostLikely","isFuture","milliseconds","FutureEvents","onChange","savings","retirement","medicare","socialSecurity","bonusTakehomeFactor","plus","ThresholdTaxCard","thresholdTax","equals","ClusterCard","useEarliestAccountEntry","fromMillis","Infinity","useFutureBonuses","bonuses","useFutureWealth","ssiTaxValue","medicareTaxValue","useFuturesWealth","useTimeSeriesWealth","localDateTime","earliest","futuresWealth","Array","fill","some","futureBenchmarkIdx","accountWealth","futureWealth","graphDate","benchmarkWealth","yoyCash","yoyPct","dataYear","titleYear","offsetIdx","nice","columnConfig","systemYear","QueryStatsIcon","WealthTable","e","ProjectedWealth","localTime","setYear","downloadJson","filename","storeData","link","document","createElement","download","blob","Blob","href","window","URL","createObjectURL","click","useExport","onExport","useCallback","selectFile","contentType","Promise","input","multiple","accept","onchange","files","from","useImport","resolve","reject","then","reader","FileReader","readAsDataURL","file","onload","readerEvent","result","atob","split","useStoreDataError","hadError","jsonInvalidData","validated","parseError","resetError","removeItem","setProjectedWealth","configName","ConfigEntry","isPercent","isNan","Number","isNaN","Config","InvalidDataDialog","message","App","tab","setTab","onImport","isSettingsOpen","setIsSettingsOpen","top","left","transform","CloseIcon","catch","DeleteForever","getScenarioSize","mostRecentPay","yearsToGenerate","pow","currentYear","worker","Worker","onmessage","isLoading","loadAllScenarios","first","oldestYear","postMessage","priorProjectedIncome","darkTheme","createTheme","palette","mode","ReactDOM","createRoot","getElementById","render","stackTrace","AdapterLuxon"],"mappings":"o3FAEaA,MAAAA,WACX,QAAIC,OAA+BC,YACnC,CAACC,EAAMC,IACLF,YAAc,MAAQD,OAAOE,CAAC,EAAEE,SAAAA,EAAaJ,OAAOG,CAAC,EAAEC,SAAS,EAAIJ,OAAOG,CAAC,EAAEC,WAAaJ,OAAOE,CAAC,EAAEE,SAAS,EAFhH,cCDWC,cAAgBC,EAAEC,OAAO,CACpCC,UAAWF,EAAEG,OAAO,EACpBC,QAASJ,EAAEG,OAAO,EAClBE,gBAAiBL,EAAEG,OAAO,EAC1BG,QAASN,EAAEG,OAAO,EAClBI,iBAAkBP,EAAEQ,OAAO,EAC3BC,aAAcT,EAAEG,OAAO,CACzB,CAAC,ECPYO,uBAAuBV,EAAEC,OAAO,CAC3CU,KAAMX,EAAEQ,OAAO,EACfI,MAAOZ,EAAEG,OAAO,CAClB,CAAC,ECFYU,mBAAmBb,EAAEC,OAAO,CACvCa,KAAMd,EAAEe,QAAQ,SAAS,EACzBC,KAAMhB,EAAEiB,MAAMP,sBAAoB,CACpC,CAAC,ECJYQ,gBAAkBA,YAAc,CAC3CC,QAAS,EACTC,gBAAiB,CACfC,WAAY,CACVC,SAAU,CAAE,EACZC,cAAe,CAAE,EACjBC,gBAAiB,CACf,CACEb,KAAM,gCACNC,MAAO,IAAA,EAET,CACED,KAAM,gCACNC,MAAO,IAAA,EAET,CACED,KAAM,gCACNC,MAAO,IAAA,EAET,CACED,KAAM,gCACNC,MAAO,IAAA,CACR,EAEHa,WAAY,CAAE,EACdC,aAAc,CAAE,EAChBC,gBAAiB,CAAE,EACnBC,UAAW,CAAE,EACbC,iBAAkB,CAAA,CACpB,CACF,EACAC,OAAQ,CAAC,EACTC,gBAAiB,CACfC,iCAAkC,IAClCC,oBAAqB,OACrBC,sBAAuB,KACvBC,4BAA6B,KAC7BC,gBAAiB,EACjBC,+BAAgC,EAChCC,qBAAsB,CACxB,CACF,GAzC+BpB,mBCAlBR,qBAAuBV,EAAEC,OAAO,CAC3CU,KAAMX,EAAEQ,OAAO,EACfI,MAAOZ,EAAEG,OAAO,EAChBoC,GAAIvC,EAAEQ,OAAO,CACf,CAAC,ECHYK,iBAAmBb,EAAEC,OAAO,CACvCa,KAAMd,EAAEe,QAAQ,SAAS,EACzBC,KAAMhB,EAAEiB,MAAMP,oBAAoB,CACpC,CAAC,ECFY8B,oBAAoBxC,EAAEC,OAAO,CACxCa,KAAMd,EAAEe,QAAQ,UAAU,EAC1B0B,KAAM1C,cAAc2C,SAAS,EAC7B1B,KAAMhB,EAAEiB,MAAMP,oBAAoB,CACpC,CAAC,ECJYoB,SAAS9B,EAAE2C,OAAO3C,EAAE4C,MAAM,CAAC/B,iBAAkB2B,mBAAiB,CAAC,CAAC,ECDhEpB,kBAAkBpB,EAAEC,OAAO,CACtCoB,WAAYrB,EAAEC,OAAO,CACnBqB,SAAUtB,EAAEiB,MAAMP,oBAAoB,EACtCmB,iBAAkB7B,EAAEiB,MAAMP,oBAAoB,EAC9CkB,UAAW5B,EAAEiB,MAAMP,oBAAoB,EACvCa,cAAevB,EAAEiB,MAAMP,oBAAoB,EAC3Ce,WAAYzB,EAAEiB,MAAMP,oBAAoB,EACxCc,gBAAiBxB,EAAEiB,MAAMP,oBAAoB,EAC7CgB,aAAc1B,EAAEiB,MAAMP,oBAAoB,EAC1CiB,gBAAiB3B,EAAEiB,MAAMP,oBAAoB,CAAA,CAC9C,CACH,CAAC,ECZYqB,kBAAkB/B,EAAEC,OAAO,CACtCgC,oBAAqBjC,EAAEG,OAAO,EAC9B+B,sBAAuBlC,EAAEG,OAAO,EAChC6B,iCAAkChC,EAAEG,OAAO,EAC3CgC,4BAA6BnC,EAAEG,OAAO,EACtCiC,gBAAiBpC,EAAEG,OAAO,EAC1BkC,+BAAgCrC,EAAEG,OAAO,EACzCmC,qBAAsBtC,EAAEG,OAAO,CACjC,CAAC,ECRY4B,kBAAkB/B,EAAEC,OAAO,CACtCgC,oBAAqBjC,EAAEG,OAAO,EAC9B+B,sBAAuBlC,EAAEG,OAAO,EAChC6B,iCAAkChC,EAAEG,OAAO,EAC3CgC,4BAA6BnC,EAAEG,OAAO,EACtCiC,gBAAiBpC,EAAEG,OAAO,EAC1BkC,+BAAgCrC,EAAEG,OAAO,CAC3C,CAAC,ECJY0C,iBAAiB7C,EAAEC,OAAO,CACrCkB,QAASnB,EAAEe,QAAQ,CAAC,EAAA,OACpBe,SAAAA,gBACAV,kBAAAA,gBACAW,iBACF,CAAC,ECNYc,iBAAiB7C,EAAEC,OAAO,CACrCkB,QAASnB,EAAEe,QAAQ,CAAC,EAAA,OACpBe,SAAAA,gBACAV,kBAAAA,gBACAW,iBACF,CAAC,ECLYS,kBAAoBxC,EAAEC,OAAO,CACxCa,KAAMd,EAAEe,QAAQ,UAAU,EAC1B0B,KAAM1C,cAAc2C,SAAS,EAC7B1B,KAAMhB,EAAEiB,MAAMP,sBAAoB,CACpC,CAAC,ECJYoB,OAAS9B,EAAE2C,OAAO3C,EAAE4C,MAAM,CAAC/B,mBAAkB2B,iBAAiB,CAAC,CAAC,ECDhEpB,gBAAkBpB,EAAEC,OAAO,CACtCoB,WAAYrB,EAAEC,OAAO,CACnBqB,SAAUtB,EAAEiB,MAAMP,sBAAoB,EACtCmB,iBAAkB7B,EAAEiB,MAAMP,sBAAoB,EAC9CkB,UAAW5B,EAAEiB,MAAMP,sBAAoB,EACvCa,cAAevB,EAAEiB,MAAMP,sBAAoB,EAC3Ce,WAAYzB,EAAEiB,MAAMP,sBAAoB,EACxCc,gBAAiBxB,EAAEiB,MAAMP,sBAAoB,EAC7CgB,aAAc1B,EAAEiB,MAAMP,sBAAoB,EAC1CiB,gBAAiB3B,EAAEiB,MAAMP,sBAAoB,CAAA,CAC9C,CACH,CAAC,ECZYqB,gBAAkB/B,EAAEC,OAAO,CACtCgC,oBAAqBjC,EAAEG,OAAO,EAC9B+B,sBAAuBlC,EAAEG,OAAO,EAChC6B,iCAAkChC,EAAEG,OAAO,EAC3CgC,4BAA6BnC,EAAEG,OAAO,EACtCiC,gBAAiBpC,EAAEG,OAAO,EAC1BkC,+BAAgCrC,EAAEG,OAAO,EACzCmC,qBAAsBtC,EAAEG,OAAO,CACjC,CAAC,ECLY0C,iBAAiB7C,EAAEC,OAAO,CACrCkB,QAASnB,EAAEe,QAAQ,CAAC,EACpBe,OACAV,gBACAW,eACF,CAAC,ECLYc,eAAiB7C,EAAEC,OAAO,CAAA,OACrC6B,SAAAA,gBACAV,kBAAAA,gBACAW,iBACF,CAAC,ECJYe,UAAYA,OAAC9B,MAAkB,CACtCA,GAAAA,MAAS,KACL,MAAA,IAAI+B,MAAM,kCAAkC,EACpD,GAAW,OAAO/B,MAAS,SACnB,MAAA,IAAI+B,MAAM,8BAA8B,EAG1C,YAAa/B,OACjBgC,eAAiBC,MAAMjC,IAAI,EAC1BA,KAAiBG,QAAU,GAG1B,YAAaH,OACXA,KAAKG,UAAY,IACnB+B,iBAAiBD,MAAMjC,IAAI,EAC1BA,KAAiBG,QAAU,EAC3BH,KAAiBe,gBAAgBO,qBAAuB,GAEvDtB,KAAKG,UAAY,IACnBgC,iBAAiBF,MAAMjC,IAAI,EAC1BA,KAAeG,QAAU,IAIxBiC,MAAAA,KAAOP,iBAAeI,MAAMjC,IAAI,EACtCqC,eAAQC,IAAIF,IAAI,EACTA,IACT,EA3ByBN,aCAnBS,YAAc,QAAmBC,WAAsBC,eAAoB,CAC/E,MAAMC,IAAM,QACNC,YAAc,gBACdC,UAAYC,aAAaC,QAAQJ,GAAG,EACpC1C,KAAO4C,UAAYG,KAAKd,MAAMW,SAAS,EAAIH,aAG7C,GAAA,CAFUD,WAAUQ,UAAUhD,IAAI,EAE3BiD,QACL,GAAA,CACFnB,UAAU9B,IAAI,EACd6C,aAAaK,QAAQR,IAAKK,KAAKI,UAAUnD,IAAI,CAAC,QACvCoD,IAAK,CACJd,QAAAA,IAAI,QAASc,GAAG,EAChBd,QAAAA,IAAI,eAAgBtC,IAAI,EAChC6C,aAAaK,QAAQP,YAAaI,KAAKI,UAAUnD,IAAI,CAAC,EACtD6C,aAAaK,QAAQR,IAAKK,KAAKI,UAAUV,YAAY,CAAC,CACxD,CAGIY,MAAAA,OAAQ,IAAIC,MAAetD,IAAI,EACrCqD,cAAME,UAAU,IAAM,CACdC,MAAAA,QAAUX,aAAaC,QAAQJ,GAAG,EACxCc,SAAWX,aAAaK,QAAS,GAAER,GAAI,YAAYc,OAAO,EAC1DX,aAAaK,QAAQR,IAAKK,KAAKI,UAAUE,OAAMI,KAAK,CAAC,CAAA,CACtD,EAEMJ,MACT,EA3BoB,eA6BPA,MAAQd,YAAmBV,iBAAgB3B,iBAAiB,EC5B5DwD,gBAAkBA,QAACC,YAAqBhE,KAAsBiE,SAAmB,CAC5FP,MAAMQ,SAAmB,MAChBC,OAAOC,KAAgB,MAAA,CAC3B3B,KAAKtB,OAAO6C,WAAW,EAAc3D,KAAKgE,KAAK,CAC9CrE,KAAMA,KAAKsE,QAAQ,KAAK,EAAEC,SAAS,EACnCtE,MAAOgE,MAAAA,CACR,EACDxB,KAAKtB,OAAO6C,WAAW,EAAE3D,KAAKmE,KAAK1F,WAAkB2F,GAAAA,SAASC,QAAQC,EAAE3E,IAAI,EAAG,KAAK,CAAC,CAAA,CACtF,CACF,CACH,EAV+B+D,mBCAlBa,mBAAqBA,QAAC5E,KAAgBU,WAAwBT,QAAkB,CAC3FyD,MAAMQ,SAAmB,MAChBC,OAAOC,KAAgB,MAAA,CACvB3D,KAAAA,gBAAgBC,WAAWA,UAAU,EAAI+B,KAAKhC,gBAAgBC,WAAWA,UAAU,EACrFmE,OAAO,CACN7E,KAAMA,KAAKsE,QAAQ,KAAK,EAAEC,SAAS,EACnCtE,KACD,CAAA,EACAuE,KAAK1F,WAAY6F,GAAMF,SAASC,QAAQC,EAAE3E,IAAI,EAAG,KAAK,CAAC,CAAA,CAC3D,CACF,CACH,EAXkC4E,sBCHrBE,cAAgBA,OAACd,aAC5BN,MAAMQ,SAAmB,MAChBC,OAAOC,KAAgB,MAAA,CACrB3B,OAAAA,KAAKtB,OAAO6C,WAAW,CAAA,CAC/B,CACF,EAL0Bc,iBCChBC,mBAAqBA,QAACf,YAAqB3D,OACtDqD,MAAMQ,SAAmB,MAChBC,OAAOC,KAAgB,MAAA,CACtBY,MAAAA,YAAcvC,KAAKtB,OAAO6C,WAAW,EAAE3D,KAAK4E,UAAiBN,GAAAA,IAAMtE,IAAI,EAC7EoC,YAAKtB,OAAO6C,WAAW,EAAE3D,KAAK6E,OAAOF,YAAa,CAAC,EAC5CvC,IAAAA,CACR,CACF,EAP+BsC,sBCArBI,sBAAwBA,QAACnB,YAAyB3D,OAAsB,CACnFqD,MAAMQ,SAAmB,MAChBC,OAAOC,KAAgB,MAAA,CACtBY,MAAAA,YAAcvC,KAAKhC,gBAAgBC,WAAWsD,WAAW,EAAEiB,UAAiBN,GAAAA,IAAMtE,IAAI,EAC5FoC,KAAKhC,gBAAgBC,WAAWsD,WAAW,EAAEkB,OAAOF,YAAa,CAAC,CAAA,CACnE,CACF,CACH,EAPqCG,yBCDxBC,WAAaA,WAAM1B,MAAMQ,SAAS,IAAM3D,iBAAiB,EAA5C6E,cCCbC,QAAUA,QAACrB,YAAqBlC,OAC3C4B,MAAMQ,SAAmB,MAChBC,OAAOC,KAAgB,MAAA,CACxB3B,KAAKtB,OAAO6C,WAAW,EAAE7D,OAAS,aACnCsC,KAAKtB,OAAO6C,WAAW,EAAelC,KAAOA,KAChD,CACD,CACF,EAPoBuD,WCCVC,kBAAoBA,QAACtB,YAAqB3D,KAAmBL,OAAmB,CAC3F0D,MAAMQ,SAAmB,MACVC,OAAOC,KAAO3B,OAAS,CAC5B8C,MAAAA,QAAU9C,MAAKtB,OAAO6C,WAAW,EACjCwB,IAAMD,6BAASlF,KAAK4E,UAAWN,GAAMA,IAAMtE,MAC7CmF,KAAO,IACTD,QAAQlF,KAAKmF,GAAG,EAAExF,KAAOA,KAAKyF,QAChC,CACD,CAEF,CACH,EAXiCH,qBCFpBI,kBAAoBA,QAACC,mBAA4BC,iBAC5DlC,MAAMQ,SAAmB,MAChBC,OAAOC,KAAgB,MAAA,CAC5B3B,KAAKtB,OAAOyE,cAAc,EAAInD,KAAKtB,OAAOwE,kBAAkB,EACrDlD,OAAAA,KAAKtB,OAAOwE,kBAAkB,CAAA,CACtC,CACF,EAN8BD,qBCCpBG,mBAAqBA,QAAC7B,YAAqB3D,KAAmBJ,QAAkB,CAC3FyD,MAAMQ,SAAmB,MACVC,OAAOC,KAAO3B,OAAS,CAC5B8C,MAAAA,QAAU9C,MAAKtB,OAAO6C,WAAW,EACjCwB,IAAMD,6BAASlF,KAAK4E,UAAWN,GAAMA,IAAMtE,MAC7CmF,KAAO,IACDnF,QAAAA,KAAKmF,GAAG,EAAEvF,MAAQA,MAC5B,CACD,CAEF,CACH,EAXkC4F,sBCArBC,sBAAwBA,QAACpF,WAAwBL,KAAmBJ,QAAkB,CACjGyD,MAAMQ,SAAmB,MACVC,OAAOC,KAAO3B,OAAS,CAClC,MAAM8C,QAAU9C,MAAKhC,gBAAgBC,WAAWA,UAAU,EACpD8E,IAAMD,QAAQN,UAAWN,GAAMA,IAAMtE,IAAI,EACvCmF,QAAAA,GAAG,EAAEvF,MAAQA,KAAAA,CACtB,CAEF,CACH,EATqC6F,yBCExBC,WAAaC,aAAAA,WAAwD,CAACC,MAAOC,MAAQ,CAChG,KAAM,CAACC,KAAMC,OAAO,EAAIC,sBAAS,EAAK,EAChCC,QAAUC,oBAAyB,IAAI,EACvC,CAACC,MAAOC,QAAQ,EAAIJ,sBAAS,EAAK,EAClC,CAACK,YAAaC,cAAc,EAAIN,aAAoB,SAAA,EAE1D,OAEI,KAAA,SAAA,CAAA,SAAA,CAAA,IAAC,OACC,CAAA,IACA,QAAQ,WACR,QAAS,IAAM,CACbD,QAAQ,EAAI,EACZK,SAAS,EAAK,EACdE,eAAeC,MAAS,GAE1B,GAAI,CAAEC,UAAW,CAAA,EAAI,SAGvB,cAAA,OAEC,OAAO,CAAA,KAAY,QAAS,IAAMT,QAAQ,EAAK,EAC9C,SAAA,CAAA,IAAC,aAAY,SAAe,iBAAA,CAAA,MAC3B,cACC,CAAA,SAAA,KAAC,OAAM,QAAS,EAAG,OAAQ,EACzB,SAAA,CAAC,KAAA,UAAA,CACC,OAAM,GACN,MAAOI,MAAQ,QAAU,UACzB,SAAqB,OAAA,CACnBC,SAAS,EAAK,EACCxG,eAAAA,MAAM6G,OAAO7G,KAAmB,CAAA,EAEjD,MAAM,OAEN,SAAA,CAAC,IAAA,SAAA,CAAS,MAAM,WAAW,SAAQ,WAAA,EAClC,IAAA,SAAA,CAAS,MAAM,UAAU,SAAe,kBAAA,CAAA,EAC3C,EAEC,IAAA,UAAA,CACC,YAAY,OACZ,SAAU,IAAM,CACdwG,SAAS,EAAK,CAAA,EAEhB,MACA,SAAUH,QAAQ,CAAA,CAAA,CAEtB,CACF,CAAA,MACC,cACC,CAAA,SAAA,IAAC,QACC,SAAUE,MACV,QAAS,IAAM,CACb9C,MAAMQ,SAAmB,MAChBC,OAAOC,KAAgB,MAAA,QACxB,GAAA,GAACkC,WAAQzC,UAARyC,SAAiBrG,QAAS,CAACyG,aAAetC,KAAKjD,OAAOmF,QAAQzC,QAAQ5D,KAAK,EAAG,CACjFwG,SAAS,EAAI,EACb,MACF,CAEAhE,KAAKtB,OAAOmF,QAAQzC,QAAQ5D,KAAK,EAAI,CACnCE,KAAMuG,YACNrG,KAAM,CAAA,CAAA,EAGR+F,QAAQ,EAAK,CAAA,CACd,CACF,CAAA,EACD,cAGJ,CAAA,EACF,CAAA,EACF,EACCH,yBAAOc,QACV,CAAA,CAAA,CAEJ,CAAC,EChFYC,OAASA,OAACf,OAA6C,CAC5D,KAAA,CAAErE,GAAI,GAAGqF,IAAShB,EAAAA,MACxB,OACG,IAAA,MAAA,CAAI,GAAQ,UAAU,uBAAuB,MAAO,CAAEiB,OAAQ,MAAA,EAC7D,SAAC,IAAA,YAAA,IAAgBD,KAAM,uBAAsB,GAAA,CAC/C,CAAA,CAEJ,EAPsBD,UCATG,iBAAmBA,WAAM1C,SAAS2C,MAAM,EAArBD,oBCFnBE,UAAY,aAEZC,SAAW,SCFXC,gBAAkB,IAAIC,KAAKC,aAAa,QAAS,CAC5DC,MAAO,WACPC,SAAU,MACVC,SAAU,UACVC,sBAAuB,CACzB,CAAC,EAAEC,OAEUC,WAAa,IAAIP,KAAKC,aAAa,QAAS,CACvDC,MAAO,WACPC,SAAU,MACVE,sBAAuB,CACzB,CAAC,EAAEC,OCcUE,KAAOA,QAAC,CAAE/H,MAAOgI,SAAUC,eAAgBC,QAAU,GAAMC,QAASC,SAAqB,IAAM,CACpGC,MAAAA,UAAYC,aAAAA,QAAQ,IACpBtI,QAAU2G,OACLqB,SAEFE,QAAUZ,gBAAgBtH,KAAK,EAAI8H,WAAW9H,KAAK,EACzD,CAACkI,QAASF,SAAUhI,KAAK,CAAC,EAG3B,OAAA,IAAC,SACC,UACA,qBAAsBiI,gBAAkB,CAACC,SAAW,CAAClI,MACrD,MAAO,CAACmI,QAASL,WAAW9H,KAAM,CAAC,EAAEuI,KAAK,GAAG,EAE7C,SAAA,IAAC,OAAMF,CAAAA,SAAAA,SAAU,CAAA,CACnB,CAAA,CAEJ,EAjBoBN,QCdPS,4BAA4BA,OAACzE,aAA+C,CACvF,CACE0E,WAAY,OACZlE,KAAM,OACNmE,eAAiBhE,GAAMA,QAAAA,YAAE1E,QAAF0E,eAASiE,SAASvB,YACzCwB,eAAoBlE,EAAEtE,MAAQoE,SAASC,QAAQC,EAAEtE,KAAKL,IAAI,EAC1D8I,WAAY,mBACZC,SAAU,GACVC,YAAoB,GAAA,CAClB,MAAMhJ,KAAOyE,SAASwE,WAAWtE,EAAEuE,QAAQ,EAC3C,OAAIlJ,KAAKmJ,SACWnF,kBAAAA,YAAaW,EAAEtE,KAAML,IAAI,EAEtCA,KAAKmJ,OACd,CACF,EACA,CACET,WAAY,QACZG,YAAoBlE,WAAAA,YAAEtE,OAAFsE,eAAQ1E,OAC5B+I,YAAoB,IAClBnD,mBAAmB7B,YAAaW,EAAEtE,KAAM,CAACsE,EAAEuE,QAAQ,EAC5C,IAETE,aAAezE,GAA4C,IAAC,MAAK,MAAOA,EAAE1E,MAAO,UAAU,OAAS,EACpG8I,SAAU,GACVD,WAAY,qBACZ3I,KAAM,eACR,EACA,CACEkJ,UAAWA,KAAO,CAAEC,QAAS,cAAeC,QAAS,KAAA,GACrDC,SAAU,GACVd,WAAY,GACZe,MAAO,GACPC,MAAO,UACPN,aAAenD,OAEX,IAAC,OACC,CAAA,QAAS,IAAM,CACbA,MAAM5F,MAAQ0E,mBAAmBf,YAAaiC,MAAM5F,IAAI,CAAA,EAE1D,MAAM,QACN,UAAS,GAET,SAAA,IAACsJ,YAAoB,CACvB,CAAA,CAGN,CAAC,EA/CsClB,+BCP5BmB,gBAAkBA,OAACrE,SACvBgD,qBAAQ,IAAM,WACnB,MAAMsB,MAAQC,OAAOC,QAAQD,OAAOE,QAAQzE,QAAQlF,KAAOsE,GAAMF,SAASC,QAAQC,EAAE3E,IAAI,EAAEiK,IAAI,CAAC,EAC5FC,IACC,CAAC,CAACD,MAAMF,OAAO,IACb,CACE,CAACE,MACD,CAAC,EAACF,uBAASI,KAAY,GAAA,CACrB,MAAMnK,KAAOyE,SAASC,QAAQC,EAAE3E,IAAI,EAC9BoK,SAAW3F,SAAS4F,WAAW,CACnCC,IAAK,EACLC,MAAO,EACPN,KAAM,CAACA,KAAAA,CACR,EACMjK,OAAAA,KAAKwK,KAAKJ,SAAU,CAAC,OAAQ,OAAO,CAAC,EAAEK,MAAQ,CAAA,GACtD,CAER,EACCjG,KAAK,CAAC,CAACvF,CAAC,EAAG,CAACC,CAAC,IACLD,EAAIC,CACZ,EAEGwL,OAASZ,OAAOa,YAAYd,KAAK,EACjCe,QAAU,CAAA,EAChB,QAASC,IAAIhB,SAAM,CAAC,IAAPA,eAAW,KAAM,EAAGgB,KAAKhB,SAAMA,MAAMiB,OAAS,CAAC,IAAtBjB,eAA0B,IAAIgB,IAC7DH,OAAOG,CAAC,GACXD,QAAQvG,KAAKwG,CAAC,EAGXD,OAAAA,OAAAA,EACN,CAACrF,QAAQlF,IAAI,CAAC,EA9BYuJ,mBCIlBmB,cAAgBA,OAAC9E,OAA8B,CACpD,KAAA,CAAE+E,UAAWC,MAAOlE,QAAad,EAAAA,MACjC,CAACiF,OAAQC,SAAS,EAAI9E,sBAAS,EAAK,EAEpC+E,WAAa7C,aAAAA,QAAQ,IAClB8C,MAAMC,aAAavE,SAAU,CAAEwE,QAASA,IAAMJ,UAAU,EAAI,CAAA,CAAG,EACrE,CAACpE,QAAQ,CAAC,EAEb,OAEKqE,KAAAA,SAAAA,CAAAA,SAAAA,CAAAA,WACD,KAAC,QAAO,KAAMF,OAAQ,QAAS,IAAMC,UAAU,EAAK,EAClD,SAAA,CAAA,IAAC,aAAY,GAAI,CAAEK,SAAU,IAAKlC,QAAS,OAAQmC,eAAgB,QAAA,EAAaR,SAAM,MAAA,OACrF,cACC,CAAA,SAAA,CAAA,IAAC,QAAO,GAAI,CAAES,YAAa,MAAA,EAAU,QAAS,IAAMP,UAAU,EAAK,EAAG,SAEtE,SAAA,EACA,IAAC,QAAO,QAAQ,YAAY,MAAM,QAAQ,QAASH,UAAW,SAE9D,SAAA,CAAA,CAAA,EACF,CAAA,EACF,CACF,CAAA,CAAA,CAEJ,EAxB6BD,iBCahBY,kBAAkBA,OAAC1F,OAAgC,CACxD,KAAA,CAAEjC,WAAgBiC,EAAAA,MAClB,CAAC2F,gBAAiBC,kBAAkB,EAAIxF,sBAAiBrC,WAAW,EACpE,CAACkH,OAAQC,SAAS,EAAI9E,sBAAS,EAAK,EAC1C,OAEI,KAAA,SAAA,CAAA,SAAA,CAAC,IAAA,WAAA,CAAW,QAAS,IAAM8E,UAAU,EAAI,EACvC,SAAA,IAACW,cAAe,CAClB,CAAA,EACA,KAAC,QAAO,KAAMZ,OAAQ,QAAS,IAAMC,UAAU,EAAK,EAClD,SAAA,CAAC,IAAA,YAAA,CACC,SAAC,KAAA,MAAA,CAAM,UAAW,MAAO,MAAM,OAAO,WAAY,SAAU,kBAAiB,gBAC3E,SAAA,CAAC,KAAA,WAAA,CAAW,QAAQ,KAAMnH,SAAAA,CAAAA,YAAY,WAAA,EAAS,EAC/C,IAAC,YAAW,QAAS,IAAMmH,UAAU,EAAK,EACxC,SAAC,IAAAY,YAAA,CAAA,CAAQ,CACX,CAAA,CAAA,CAAA,CACF,CACF,CAAA,EACA,IAAC,cACC,CAAA,SAAA,IAAC,MAAM,CAAA,QAAS,EAAG,UAAW,EAC5B,SAAC,IAAA,UAAA,CACC,MAAM,eACN,MAAOH,gBACP,SAAqBC,OAAAA,mBAAmBG,MAAMlF,OAAO7G,KAAK,EAC1D,YAAY,EACZ,CAAA,CAAA,CACJ,CACF,CAAA,OACC,cACC,CAAA,SAAA,CAAA,IAAC,cAAc,CAAA,UAAW,IAAM6E,cAAcd,WAAW,EAAG,MAAQ,oBAAmBA,WAAY,WACjG,SAAC,IAAA,OAAA,CAAO,GAAI,CAAE0H,YAAa,EAAM,EAAA,MAAM,QAAQ,SAAA,gBAAA,CAE/C,CACF,CAAA,MACC,OACC,CAAA,SAAU,CAACE,gBACX,QAAS,IAAM,CACbT,UAAU,EAAK,CAAA,EAElB,SAED,SAAA,MACC,OACC,CAAA,SAAU,CAACS,gBACX,QAAS,IAAM,CACEA,aAAAA,iBAAmBlG,kBAAkB1B,YAAa4H,eAAe,EAChFT,UAAU,EAAK,CAAA,EAElB,SAED,OAAA,CAAA,EACF,CAAA,EACF,CACF,CAAA,CAAA,CAEJ,EAvD+BQ,qBCNlBM,WAAaA,OAAChG,OAAmC,CACtD,KAAA,CAAEjC,WAAgBiC,EAAAA,MAClBV,QAAU2G,SAASxI,aAAkBI,MAAM3C,OAAO6C,WAAW,CAAC,EAC9D,CAAChE,KAAMmM,OAAO,EAAI9F,aAAAA,SAASc,iBAAkB,CAAA,EAC7CiF,SAAW7F,oBAAyB,IAAI,EAExC8F,aAAezC,gBAAgBrE,OAAO,EACtC+G,YAAc/D,aAAAA,QAAQ,IAAM,QAChC,MAAO,CAAC,GAAChD,gCAASlF,OAATkF,SAAe4E,KAAYnK,GAAAA,KAAKuM,QAAQ9H,SAASC,QAAQC,EAAE3E,IAAI,EAAG,KAAK,GAC/E,EAAA,CAACuF,6BAASlF,KAAML,IAAI,CAAC,EAElBwM,WAAaA,WAAM,QACvBJ,SAASvI,SAAWE,gBAAgBC,YAAahE,KAAM,GAACoM,YAASvI,UAATuI,eAAkBnM,MAAK,CAAA,EAD9DuM,cAIbC,oBAAsBlE,aAAAA,QAAQ,IAC3BE,4BAA0BzE,WAAW,EAC3C,CAACA,WAAW,CAAC,EAEhB,OACG,KAAA,MAAA,CAAM,OAAO,OAAO,QAAS,EAC5B,SAAA,CAAC,KAAA,MAAA,CAAM,UAAW,MAChB,SAAA,CAAC,IAAA,WAAA,CAAW,QAAQ,KAAMA,SAAY,YAAA,EACtC,IAAC,KAAI,GAAI,CAAE0I,WAAY,MAAA,EACrB,SAAA,IAACf,kBAAkC,CAAA,WAAA,EAAb3H,WAAsC,EAC9D,CAAA,EACF,EACCqI,aAAavB,OAAS,GACrB,IAAC,MAAK,GAAI,GACR,SAAC,IAAA,MAAA,CAAM,UAAW,EAChB,SAAC,KAAA,MAAA,CAAM,SAAS,UAAU,SAAA,CAAA,6CAA2CuB,aAAa7D,KAAK,IAAI,CAAA,CAAE,CAAA,CAC/F,CAAA,EACF,EAGD,IAAA,WAAA,CACC,OAAQnB,UACR,GAAI,CAAEsF,MAAO,OAAQ,EACrB,MAAM,OACN,aAAc3M,KACd,SAAqBC,OAAAA,OAASkM,QAAQlM,KAAK,CAAE,CAAA,MAE9C,UAEC,CAAA,MAAM,SACN,KAAK,SACL,SACA,WAAY,CACV2M,eAAgB,IAAC,eAAe,CAAA,SAAS,QAAQ,SAAC,IAAA,CAAA,EAEpD,YAAY,GAAA,EAPP5I,WAOU,EAEjB,IAAC,QAAO,SAAU,CAAChE,MAAQsM,YAAa,QAASE,WAAW,SAE5D,YAAA,EAEC,IAAA,OAAA,CACC,yBAAwB,GACxB,QAASjH,QAAQlF,KACjB,WAAYoM,oBACZ,GAAIlH,QAAU,WACd,iBAAkB,CAAEpF,KAAM,cAAA,EAC1B,iBAAyBwE,GAAAA,EAAEkI,IAAIC,iBAAiB,EAChD,8BAA6B,GAAA,CAEjC,CAAA,CAAA,CAEJ,EAnE0Bb,cCZbc,sBAAwBA,QAAC/M,KAAgBK,OAC7CA,KAAK8J,KAAK,CAACxF,EAAGa,IAAKlF,QAAU,CAa9BkF,GAZAA,KAAO,GAAKf,SAASC,QAAQC,EAAE3E,IAAI,EAAEsE,QAAQ,KAAK,GAAKtE,MAKzDwF,IAAMlF,MAAMwK,OAAS,GACrBrG,SAASC,QAAQC,EAAE3E,IAAI,EAAEsE,QAAQ,KAAK,GAAKtE,MAC3CyE,SAASC,QAAQrE,KAAKmF,IAAM,CAAC,EAAExF,IAAI,EAAEsE,QAAQ,KAAK,EAAItE,MAKpDwF,MAAQlF,MAAMwK,OAAS,EAClB,MAAA,EACT,CACD,EAjBkCiC,yBAoBxBC,yBAA2B,QAAIhN,KAAgBK,KAAW4M,WAC9D5M,KAAK4E,UAAU,CAACN,EAAGa,IAAKlF,QAAU,CASnCkF,GARAA,KAAO,GAAKyH,SAAStI,CAAC,GAAK3E,MAI3BwF,IAAMlF,MAAMwK,OAAS,GAAKmC,SAAStI,CAAC,GAAK3E,MAAQiN,SAAS5M,KAAKmF,IAAM,CAAC,CAAC,EAAIxF,MAI3EwF,MAAQlF,MAAMwK,OAAS,EAClB,MAAA,EACT,CACD,EAbqC,4BCpB3BoC,cAAgBA,OAACC,UACrB,CACL,GAAG,IAAIC,IACLD,SAASE,QAAe,GACf1I,EAAEtE,KAAK6J,IAAKvF,IAAMF,SAASC,QAAQC,GAAE3E,IAAI,EAAEsE,QAAQ,KAAK,EAAEmB,MAAO,CAAA,CACzE,CACH,CAAC,EAEAyE,IAAWzF,GAAAA,SAASC,QAAQC,CAAE,CAAC,EAC/BH,KAAK,CAACvF,EAAGC,IAAMD,EAAEE,WAAaD,EAAEC,UAAU,EATlB+N,iBCAhBI,gBAAkBA,QAACtN,KAAgB8B,OAAe,CACvD,KAAA,CAAElC,iBAAkBF,gBAAiBH,UAAsBE,QAAS8N,KAAM5N,QAAS6N,cAAmB1L,EAAAA,KACtG2L,eAAiBF,KAAO7N,gBACxBgO,QAAU1N,KAAKwK,KAAK/F,SAASC,QAAQ9E,gBAAgB,EAAG,QAAQ,EAAE+N,OAClEC,WAAa,EAAIH,iBAAmBC,QAGnCG,OAFStO,UAAYqO,UAAaJ,eAAiBC,gBAAmBG,UAAY,EAG3F,EAR+BN,mBAUlBQ,WAAaA,QACxBhO,aACAiO,WACAC,YACAzO,YAEOwO,WAAaA,WAAajO,aAAekO,YAAczO,UAAYyO,YANlDF,cCLbG,SAAWA,OAAChI,OAAmC,CACpD,KAAA,CAAEjC,WAAgBiC,EAAAA,MAClBmG,SAAW7F,oBAAyB,IAAI,EACxC,CAACvG,KAAMmM,OAAO,EAAI9F,aAAmB,SAAA,EAErCmG,WAAaA,WAAM,QACjBvM,MAAAA,OAAQmM,YAASvI,UAATuI,eAAkBnM,MAC5B,CAACD,MAAQ,CAACC,OAGE+D,gBAAAA,YAAahE,KAAM,CAACC,KAAK,CAAA,EALxBuM,cASjB,OAAA,KAAC0B,QAAM,CAAA,QAAS,EACd,SAAA,CAAA,IAAC,YACC,aAAc/G,iBAAAA,EACd,SAAWnH,OAA0B,CACnCA,OAAQmM,QAAQnM,KAAI,CAAA,EACpB,MAEH,UAEC,CAAA,MAAM,aACN,KAAK,UACL,SACA,WAAY,CACV4M,eAAgB,IAAC,eAAe,CAAA,SAAS,QAAQ,SAAC,IAAA,CAAA,EAEpD,YAAY,GAAA,EAPP5I,WAOU,EAEhB,IAAA,OAAA,CAAO,QAASwI,WAAY,SAAc,iBAAA,CAC7C,CAAA,CAAA,CAEJ,EAlCwByB,YCEXxF,4BAA4BA,OAACzE,aAA+C,CACvF,CACE0E,WAAY,OACZlE,KAAM,OACNmE,eAAiBhE,GAAMA,QAAAA,YAAE1E,QAAF0E,eAASiE,SAASvB,YACzCwB,eAAoBlE,EAAEtE,MAAQoE,SAASC,QAAQC,EAAEtE,KAAKL,IAAI,CAC5D,EACA,CACE0I,WAAY,aACZU,aAAezE,GAA4C,IAAC,MAAK,MAAOA,EAAE1E,MAAO,UAAU,OAAS,EACpG4I,YAAoBlE,WAAAA,YAAEtE,OAAFsE,eAAQ1E,OAC5BE,KAAM,eACR,EACA,CACEkJ,UAAWA,KAAO,CAAEC,QAAS,cAAeC,QAAS,KAAA,GACrDb,WAAY,GACZe,MAAO,GACPD,SAAU,GACVE,MAAO,UACPN,aAAenD,OAEX,IAAC,OACC,CAAA,QAAS,IAAM,CACbA,MAAM5F,MAAQ0E,mBAAmBf,YAAaiC,MAAM5F,IAAI,CAAA,EAE1D,MAAM,QACN,UAAS,GAET,SAAA,IAACsJ,YAAoB,CACvB,CAAA,CAGN,CAAC,EAhCsClB,+BAyC5B0F,qBAAwC,CACnD,CACEzF,WAAY,OACZlE,KAAM,OACNmE,eAAiBhE,GAAMA,QAAAA,YAAE1E,QAAF0E,eAASiE,SAASvB,YACzCwB,YAAoBlE,WAAAA,YAAEtE,OAAFsE,eAAQ3E,KAC9B,EACA,CACE0I,WAAY,eACZG,YAAoBlE,WAAAA,YAAEtE,OAAFsE,eAAQkJ,QAAQO,QAAQ,IAC5ChF,aAAezE,GAAsC,IAAC,MAAK,MAAOA,EAAE1E,MAAO,UAAU,OAAS,EAC9FE,KAAM,eACR,EACA,CACEuI,WAAY,SACZG,YAAoBlE,WAAAA,YAAEtE,OAAFsE,eAAQ0J,OAAOD,QAAQ,IAC3ChF,aAAezE,GAAsC,IAAC,MAAK,MAAOA,EAAE1E,MAAO,UAAU,OAAS,EAC9FE,KAAM,eACR,CAAC,EC/CGmO,WAAaA,OAACrO,OACXA,MAAQ,EAAIA,MAAQ,IAAMA,MADhBqO,cAIbzL,UAA6BxD,EAAEC,OAAO,CAC1CC,UAAWF,EAAEG,SAAS+O,IAAI,CAAC,EAC3B9O,QAASJ,EAAEG,SAAS+O,IAAI,CAAC,EACzB7O,gBAAiBL,EAAEG,SAAS+O,IAAI,CAAC,EACjC5O,QAASN,EAAEG,SAAS+O,IAAI,CAAC,EACzB3O,iBAAkBP,EAAEQ,OAAO,EAAE2O,SAAS,CAAEC,OAAQ,EAAA,CAAM,EACtD3O,aAAcT,EAAEG,SAAS+O,IAAI,CAAC,CAChC,CAAC,EAMY5C,gBAAkBA,OAAC1F,OAAgC,QACxD,KAAA,CAAEjC,WAAgBiC,EAAAA,MAClB,CAAC2F,gBAAiBC,kBAAkB,EAAIxF,sBAAiBrC,WAAW,EACpElC,KAAOoK,SAASxI,MAAc,GAAA,CAC5B6B,MAAAA,QAAUZ,EAAExD,OAAO6C,WAAW,EACpC,GAAI,SAAUuB,QACZ,OAAOA,QAAQzD,IACjB,CACD,EAEKoE,IAAMK,aAAAA,OAAsBzE,MAAQ,CAAE,CAAA,EACtC,CAAC0E,MAAOC,QAAQ,EAAIJ,aAAAA,SAAgD,CAAE,CAAA,EAEtE,CAAC6E,OAAQC,SAAS,EAAI9E,sBAAS,EAAK,EAEpCqI,YAAcA,WAAM,CACxBjI,SAAS,CAAE,CAAA,EACP5C,IAAAA,QAAU/B,MAAQ,GACtBqJ,UAAU,EAAK,CAAA,EAHGuD,eAMpB,OAEI,KAAA,SAAA,CAAA,SAAA,CAAC,IAAA,WAAA,CAAW,QAAS,IAAMvD,UAAU,EAAI,EACvC,SAAA,IAACW,cAAe,CAClB,CAAA,EACC,KAAA,OAAA,CAAO,KAAMZ,OAAQ,QAASwD,YAC7B,SAAA,CAAC,IAAA,YAAA,CACC,SAAC,KAAA,MAAA,CAAM,UAAW,MAAO,MAAM,OAAO,WAAY,SAAU,kBAAiB,gBAC3E,SAAA,CAAC,KAAA,WAAA,CAAW,QAAQ,KAAM1K,SAAAA,CAAAA,YAAY,WAAA,EAAS,MAC9C,WAAW,CAAA,QAAS0K,YACnB,SAAA,IAAC3C,aAAQ,CAAA,EACX,CAAA,CAAA,CACF,CACF,CAAA,MACC,cACC,CAAA,SAAA,KAAC,OAAM,QAAS,EAAG,UAAW,EAC5B,SAAA,CAAA,IAAC,UACC,CAAA,MAAM,eACN,MAAOH,gBACP,SAAqBC,OAAAA,mBAAmBG,MAAMlF,OAAO7G,KAAK,EAC1D,YAAY,GACZ,EACD,IAAA,WAAA,CACC,cAAciG,OAAIrC,UAAJqC,SAAatG,iBAAmB6E,SAASC,QAAQwB,IAAIrC,QAAQjE,gBAAgB,EAAI,KAC/F,MAAM,gBACN,UAAW,CACT+O,UAAW,CACTnI,MAAO,CAAC,CAACA,MAAM5G,gBACjB,CAAA,EAEF,SAAWK,OAA2B,CAChCA,QACFiG,IAAIrC,QAAQjE,iBAAmBK,MAAMqE,QAAQ,KAAK,EAAEmB,QACtD,EAEF,EACF,IAAC,UACC,CAAA,MAAO,CAAC,CAACe,MAAMjH,UACf,aAAcuC,uBAAMvC,UACpB,SAAqB,OAAA,CACnB2G,IAAIrC,QAAQtE,UAAY,CAACyM,MAAMlF,OAAO7G,KAAAA,EAExC,QAAQ,WACR,MAAM,YACN,KAAK,SACL,EACF,IAAC,UACC,CAAA,MAAO,CAAC,CAACuG,MAAM/G,QACf,aAAcqC,uBAAMrC,QACpB,SAAqB,OAAA,CACnByG,IAAIrC,QAAQpE,QAAU6O,WAAW,CAACtC,MAAMlF,OAAO7G,KAAK,CAAA,EAEtD,QAAQ,WACR,MAAM,OACN,KAAK,SACL,EACF,IAAC,UACC,CAAA,MAAO,CAAC,CAACuG,MAAM9G,gBACf,aAAcoC,uBAAMpC,gBACpB,SAAqB,OAAA,CACnBwG,IAAIrC,QAAQnE,gBAAkB,CAACsM,MAAMlF,OAAO7G,KAAAA,EAE9C,QAAQ,WACR,MAAM,oBACN,KAAK,SACL,EACF,IAAC,UACC,CAAA,aAAc6B,uBAAMnC,QACpB,MAAO,CAAC,CAAC6G,MAAM7G,QACf,SAAqB,OAAA,CACnBuG,IAAIrC,QAAQlE,QAAU,CAACqM,MAAMlF,OAAO7G,KAAAA,EAEtC,QAAQ,WACR,MAAM,UACN,KAAK,SACL,EACF,IAAC,UACC,CAAA,aAAc6B,uBAAMhC,aACpB,MAAO,CAAC,CAAC0G,MAAM1G,aACf,SAAqB,OAAA,CACnBoG,IAAIrC,QAAQ/D,aAAewO,WAAW,CAACtC,MAAMlF,OAAO7G,KAAK,CAAA,EAE3D,QAAQ,WACR,MAAM,gBACN,KAAK,SACL,CAAA,CAAA,CACJ,CACF,CAAA,OACC,cACC,CAAA,SAAA,CAAA,IAAC,cACC,CAAA,UAAW,IAAM6E,cAAcd,WAAW,EAC1C,MAAQ,oBAAmBA,WAAY,YAEvC,SAAC,IAAA,OAAA,CAAO,GAAI,CAAE0H,YAAa,EAAM,EAAA,MAAM,QAAQ,SAAA,gBAAA,CAE/C,CACF,CAAA,MACC,OAAO,CAAA,SAAU,CAACE,gBAAiB,QAAS8C,YAAa,SAE1D,SAAA,MACC,OACC,CAAA,SAAU,CAAC9C,gBACX,QAAS,IAAM,CACb,MAAMgD,OAAS/L,UAAUQ,UAAU6C,IAAIrC,OAAO,EAC9C,GAAI+K,OAAOtL,QACMsI,aAAAA,iBAAmBlG,kBAAkB1B,YAAa4H,eAAe,EACxE5H,QAAAA,YAAa4K,OAAOvO,IAAI,EACpB,kBACP,CACCwO,MAAAA,OAAS/E,OAAOE,QAAQ4E,OAAOpI,MAAMqI,OAASlK,GAAMA,EAAEmK,KAAKtG,KAAK,EAAE,CAAC,EACzE/B,SAASoI,MAAM,CACjB,CAAA,EAEH,SAED,OAAA,CAAA,EACF,CAAA,EACF,CACF,CAAA,CAAA,CAEJ,EA7I+BlD,mBCvBlBoD,YAAcA,OAAC9I,OAAmC,CACvD,KAAA,CAAEjC,WAAgBiC,EAAAA,MAElBV,QAAU2G,SAASxI,aAAkBI,MAAM3C,OAAO6C,WAAW,CAAC,EAE9DgL,YAAc9C,SAASxI,MAAQiB,GAAMA,EAAExD,MAAM,EAE7CsL,oBAAsBlE,aAAAA,QAAQ,IAC3BE,4BAA0BzE,WAAW,EAC3C,CAACA,WAAW,CAAC,EAEViL,aAAe1G,aAAAA,QAAQ,IACtBhD,uBAASzD,KAIPoL,cAAcpD,OAAOoF,OAAOF,WAAW,CAAC,EAAE9E,IAAc,MAAA,QAC7D,MAAM8D,YAAcV,gBAAgBtN,KAAMuF,QAAQzD,IAAK,EAChD,MAAA,CACL9B,KACA6N,QAASG,YACTK,OAAQP,WACNvI,QAAQzD,KAAMhC,cACdiN,yBAAsB/M,KAAMuF,QAAQlF,IAAI,IAAxC0M,eAA2C9M,MAC3C+N,YACAzI,QAAQzD,KAAMvC,SAChB,CAAA,CACF,CACD,EAfQ,GAgBR,CAACgG,QAASyJ,WAAW,CAAC,EAEzB,OACG,KAAAd,QAAA,CAAM,OAAO,OAAO,QAAS,EAC5B,SAAA,CAAC,KAAAA,QAAA,CAAM,UAAW,MAChB,SAAA,CAAC,IAAA,WAAA,CAAW,QAAQ,KAAMlK,SAAY,YAAA,EACtC,IAACmL,OAAI,GAAI,CAAEzC,WAAY,MAAA,EACrB,SAAA,IAAC,gBAAkC,CAAA,WAAA,EAAb1I,WAAsC,EAC9D,CAAA,EACF,EACA,IAAC,UAAS,YAAyB,EAClC,IAAA,OAAA,CACC,yBAAwB,GACxB,SAASuB,6BAASlF,OAAQ,CAAA,EAC1B,WAAYoM,oBACZ,GAAIlH,QAAU,WACd,iBAAkB,CAAEpF,KAAM,cAAA,EAAiB,EAG7C,IAAC,QACC,QAAS8O,aACT,WAAYd,qBACZ,GAAI5I,QAAU,WACd,iBAAkB,CAAEpF,KAAM,cAAA,EAAiB,CAE/C,CAAA,CAAA,CAEJ,EAxD2B4O,eCRdK,YAAcA,WAAM,cAC/B,MAAMjC,SAAWjB,SAASxI,MAAQiB,GAAMA,EAAExD,MAAM,EAC1CkO,cAAevF,UAAOwF,KAAKnC,QAAQ,IAApBrD,eAAwB,GACvC,CAACvE,QAASgK,UAAU,EAAIlJ,sBAAiBgJ,YAAY,EAE3DG,oBAAAA,UAAU,IAAM,SACTrC,SAAS5H,OAAO,GACnBgK,aAAWzF,IAAAA,OAAOwF,KAAKnC,QAAQ,IAApBrD,YAAAA,IAAwB,KAAM,EAAE,CAC7C,EACC,CAACvE,QAAS4H,QAAQ,CAAC,EAGpB,KAAC,KAAI,QAAQ,OAAO,MAAM,OAAO,OAAO,OAAO,IAAK,EAClD,SAAA,CAAC,IAAA,IAAA,CAAI,QAAS,OAAQ,KAAM,WACzBrD,SAAOwF,OAAAA,KAAKnC,QAAQ,EAAErC,OAAS,GAC7B,KAAA,KAAA,CACC,YAAY,WACZ,MAAOvF,QACP,SAAU,CAACkK,EAAGxP,QAAU,CACtBsP,WAAWtP,KAAgB,CAG5B6J,EAAAA,SAAAA,CAAAA,OAAOwF,KAAKnC,QAAQ,EAAEjD,IAAK3E,cAClB,IAAkB,CAAA,MAAOA,SAAS,MAAOA,UAAhCA,QAA2C,CAC7D,EACD,IAAC,IAAI,CAAA,UAAWQ,UAAW,CAAA,CAAA,CAAA,CAC7B,CAEJ,CAAA,EACC,KAAA,IAAA,CAAI,KAAM,WAAY,SAAU,OAC9BoH,SAAAA,GAAAA,YAAS5H,OAAO,IAAhB4H,eAAmBhN,QAAS,WAAc,IAAA,WAAA,CAAW,YAAaoF,QAAW,IAC7E4H,YAAS5H,OAAO,IAAhB4H,eAAmBhN,QAAS,YAAe,IAAA,YAAA,CAAY,YAAaoF,QAAW,CAAA,EAClF,CACF,CAAA,CAAA,CAEJ,EAnC2B6J,eCHrBM,iBAAmBA,QAAC1P,KAAgB2P,WAAuB,CAC3D,GAAA,CAACA,SAAS7N,KACL,MAAA,GAET,MAAM8N,MAAQ7C,sBAAsB/M,KAAM2P,SAAStP,IAAI,EACvD,GAAIuP,mBAAO5P,MAAQ2P,SAAStP,KAAK,CAAC,IAAMuP,OAASnL,SAASC,QAAQkL,MAAM5P,IAAI,EAAEsE,QAAQ,KAAK,EAAItE,KACtF,MAAA,GAEH,KAAA,CAAEF,aAAcP,SAAAA,EAAcoQ,SAAS7N,KACvC+L,QAAUP,gBAAgBtN,KAAM2P,SAAS7N,IAAI,EACnD,OAAOgM,WAAWhO,aAAc8P,yBAAO3P,MAAO4N,QAAStO,SAAS,CAClE,EAXyBmQ,oBAanBG,gBAAkBA,QAAC7P,KAAgBuF,UAAqB,CAC5D,MAAMqK,MAAQ7C,sBAAsB/M,KAAMuF,QAAQlF,IAAI,EACtD,OAAIuP,mBAAO5P,MAAQuF,QAAQlF,KAAK,CAAC,IAAMuP,OAASnL,SAASC,QAAQkL,MAAM5P,IAAI,EAAEsE,QAAQ,KAAK,EAAItE,KACrF,EAEF4P,yBAAO3P,KAChB,EANwB4P,mBAQXC,cAAgBA,QAAC9P,KAAgBuF,UAAgC,CAC5E,OAAQA,QAAQpF,KAAI,CAClB,IAAK,UACI0P,OAAAA,gBAAgB7P,KAAMuF,OAAO,EACtC,IAAK,WACImK,OAAAA,iBAAiB1P,KAAMuF,OAAO,CACzC,CACF,EAP6BuK,iBCpBhBC,aAAeA,WAAM,CAChC,MAAM5O,QAAS+K,SAASxI,MAAQiB,GAAMA,EAAExD,MAAM,EAE9C,OAAOoH,qBAAQ,IAAM,CACnB,MAAMyH,MAAQ9C,cAAcpD,OAAOoF,OAAO/N,OAAM,CAAC,EAC3CgM,SAAWrD,OAAOC,QAAQ5I,OAAM,EAChC8O,UAAYD,MAAM9F,IAAc,MAC7BiD,SAAS+C,OACd,CAACC,IAAK,CAACnM,YAAauB,OAAO,IAAM,CACzBtF,MAAAA,MAAQ6P,cAAc9P,KAAMuF,OAAO,EAEzC,OAAItF,OACFkQ,IAAInM,WAAW,EAAI/D,MACnBkQ,IAAI,MAAYA,IAAI,MAAsBlQ,OAE1CkQ,IAAInM,WAAW,EAAI,KAGjB,IAAA,KAAUhE,KAAKoQ,SAAS,EACrBD,GAAAA,EAET,CAAEE,MAAO,CAAA,CACX,CACD,EAEDJ,UAAUK,QAAQ,CAAC3L,EAAGa,IAAK+K,MAAQ,CAC7B/K,IAAM+K,IAAIzF,OAAS,GACrBhB,OAAOwF,KAAK3K,CAAC,EAAE2L,QAAiB,KAAA,CAC1B3L,EAAE5B,GAAG,IAAM,MAAQwN,IAAI/K,IAAM,CAAC,EAAEzC,GAAG,IAAM,OAC3C4B,EAAE5B,GAAG,EAAI,EACX,CACD,CACH,CACD,EAED,MAAMyN,aAAeP,UAAUhL,aAAkBN,EAAE,MAAsB,CAAC,EACnEsL,OAAAA,UAAUQ,MAAMD,YAAY,CAAA,EAClC,CAACrP,OAAM,CAAC,CACb,EAtC4B4O,gBCGfW,cAAcA,WAAM,CAC/B,MAAMvP,QAAS+K,SAASxI,MAAQiB,GAAMA,EAAExD,MAAM,EACxCd,KAAO0P,eAEPY,OAASpI,aAAAA,QAAQ,IACd,CACL,GAAGuB,OAAOwF,KAAKnO,OAAM,EAAE+I,IAAW,IACzB,CACL0G,QAAS,GACTzQ,KAAM,OACN0Q,KAAM,OACNC,KAAMnM,EACNoM,MAAOpM,EACPyD,QAAS,CACP4I,SAAUA,CAAC,CAAEC,MAAOH,KAAMD,IAAAA,KAAY,CACpCK,QAAU,GAAEzM,SAASwE,WAAWgI,MAAMJ,IAAI,CAAC,EAAEM,UAAY,CAAA,IAAG5J,gBAAgB0J,MAAMH,IAAI,CAAC,CAAE,EAAA,EAE7F,CAAA,EAEH,EACD,CACE3Q,KAAM,OACN0Q,KAAM,OACNC,KAAM,QACNC,MAAO,QACP3I,QAAS,CACP4I,SAAUA,CAAC,CAAEC,MAAOH,KAAMD,IAAAA,KAAY,CACpCK,QAAU,GAAEzM,SAASwE,WAAWgI,MAAMJ,IAAI,CAAC,EAAEM,UAAY,CAAA,IAAG5J,gBAAgB0J,MAAMH,IAAI,CAAC,CAAE,EAAA,EAE7F,CAAA,CAEH,EACA,CAAC3P,OAAM,CAAC,EAELiQ,QAAmC7I,aAAAA,QACvC,IAAO,QAAA,OACL8I,MAAO,kBACPpG,MAAO,CACLqG,KAAO,gBAAe/J,kBAAiBlH,QAAKA,KAAKyK,OAAS,CAAC,IAApBzK,eAAuBgQ,QAAS,CAAc,CAAA,EACvF,EACAhQ,KACAkR,KAAM,CACJ,CACEpR,KAAM,OACNqR,SAAU,SACVC,MAAO,CACL3J,OAAQ,IACV,CAAA,EAEF,CACE3H,KAAM,SACNqR,SAAU,MAAA,CACX,EAEHb,MAEF,GAAA,CAACtQ,KAAMsQ,MAAM,CACf,EACO,OAAA,IAAC,eAAc,OAAoB,CAAA,CAC5C,EA3D2BD,iBCLdgB,UAAYA,WAErB,KAAC,IAAI,CAAA,QAAS,OAAQ,OAAO,OAAO,MAAO,OAAQ,SAAU,SAAU,IAAK,EAC1E,SAAA,CAAC,IAAA,IAAA,CAAI,KAAK,WACR,SAAA,IAAC,KACC,MAAO,IACP,OAAQ,OACR,GAAI,CACFnI,QAAS,EACToI,OAAQ,kCACRC,aAAc,EACdpG,SAAU,IACVqG,gBAAiB,UACjBC,UAAW,2BAAA,EAGb,SAAA,IAAC,YAAW,CAAA,CAAA,CAAA,CACd,CACF,CAAA,EACC,IAAA,IAAA,CAAI,KAAK,WAAW,SAAU,SAAU,MAAM,OAAO,OAAQ,OAC5D,SAAC,IAAApB,cAAA,CAAW,CAAA,EACd,CACF,CAAA,CAAA,EAtBqBgB,aCDZK,KAAOA,OAAC9L,OAAsD,CACnE,KAAA,CAAEgF,MAAOlE,QAAad,EAAAA,MAG1B,OAAA,KAAC,KACC,GAAI,CACF0L,OAAQ,kCACRC,aAAc,EACdpG,SAAU,IACVqG,gBAAiB,UACjBC,UAAW,2BAGb,EAAA,SAAA,CAAA,IAAC,YAAW,GAAI,CAAEE,cAAe,EAAGC,YAAa,EAAGC,WAAY,EAAG5I,QAAS,MAAO,EAAG,QAAQ,KAC3F2B,SACH,KAAA,CAAA,EAEClE,UAEG,KAAA,SAAA,CAAA,SAAA,CAAA,IAAC,QAAO,EAAA,EACP,IAAA,MAAA,CAAM,QAAS,EAAG,UAAW,MAAO,QAAS,GAAK,MAAO,cAAe,UAAW,GACjFA,QACH,CAAA,CAAA,EACF,CAEJ,CAAA,CAAA,CAEJ,EA3BoBgL,QCyBPI,UAAYA,QAAC,CAAE5D,IAAK6D,IAAKnK,SAAUC,eAAgBC,QAAU,EAAgB,IAAM,CACxFkK,MAAAA,UAAY9J,aAAAA,QAAQ,IAAM,CACxB+J,MAAAA,aAAenK,QAAUZ,gBAAgBgH,KAAO,CAAC,EAAIxG,WAAWwG,KAAO,CAAC,EACxEgE,aAAepK,QAAUZ,gBAAgB6K,KAAO,CAAC,EAAIrK,WAAWqK,KAAO,CAAC,EAC9E,OAAOE,eAAiBC,YACvB,EAAA,CAACpK,QAASiK,IAAK7D,GAAG,CAAC,EAEtB,YACGY,MACE,CAAA,SAAA,CAAA,CAACkD,WACC,IAAA,KAAA,CACC,SACA,MAAOD,IACP,QAAS7D,KAAO6D,IAAO,GAAErK,WAAWwG,KAAO,CAAC,CAAE,MAAO3H,OACrD,eACA,QAEH,EACAyL,WAEG,KAAA,SAAA,CAAA,SAAA,CAAA,IAAC,KAAK,CAAA,MAAO9D,IAAK,SAAoB,eAAgC,QAAiB,EACvF,IAAC,QAAK,SAAG,KAAA,CAAA,MACR,KAAK,CAAA,MAAO6D,IAAK,SAAoB,eAAgC,QAAiB,CAAA,EACzF,CAEJ,CAAA,CAAA,CAEJ,EA3ByBD,aC5BZK,cAAgB,IAAIhL,KAAKC,aAAa,QAAS,CAC1DC,MAAO,UACPG,sBAAuB,CACzB,CAAC,EAAEC,OCOG2K,SAAWA,OAACC,aACXA,YAGDA,aAAe,GACV,QAELA,aAAe,IACV,SAEF,MARE,UAFMD,YAaJE,QAAUA,QAAC,CAAE1S,MAAOyS,YAAazK,QAAuB,IAC5D,IAACkH,MAAI,CAAA,MAAOsD,SAASC,WAAW,EAAIzS,SAAQuS,MAAAA,cAAcvS,KAAK,EAAIgI,QAAS,CAAA,EAD9D0K,WCdVC,aAAeA,QAAC,CAAErE,IAAK6D,IAAKnK,QAAuB,SAE3DkH,MACGiD,CAAAA,SAAAA,EAAO,KAAA,IAAM7D,KAAO,IAAM,WAAU,QAAQ,CAAA,SAAoB,MAAO6D,GAAO,CAAA,GAC9EA,KAAO,IAAM7D,KAAO,GAAK,OAEvB,KAAA,SAAA,CAAA,SAAA,CAAC,IAAA,QAAA,CAAQ,MAAOA,IAAK,QAAmB,CAAA,EACxC,IAAC,QAAK,SAAG,KAAA,CAAA,EACR,IAAA,QAAA,CAAQ,MAAO6D,IAAK,QAAmB,CAAA,CAAA,EAC1C,CAEJ,CAAA,CAAA,EAXwBQ,gBCEfC,MAAQA,OAAC5M,OAAqB,CACnC,KAAA,CAAEc,SAAU+L,eAAgBC,cAAe9H,MAAO+H,SAAc/M,EAAAA,MAEpE,OAAA,KAAC,KACC,GAAI,CACFqD,QAAS,OACTkC,SAAU,IACVtE,OAAQ,GACRqC,QAAS,UACT0J,cAAe,SACfxH,eAAgB,SAChByH,WAAY,aACZC,IAAK,GACLC,WAAY,CAAA,EAEd,UAEA,SAAA,CAAA,KAAC,KAAI,QAAS,OAAQ,WAAY,SAAU,IAAK,GAC/C,SAAA,CAAC,IAAA,IAAA,CAAI,SAAU,GAAI,WAAY,IAAK,WAAY,OAC7CrM,SAAWA,UAAW,GACzB,CAAA,EACC,CAAC,EAAE+L,gBAAkBC,gBACnB,IAAA,IAAA,CACC,UAAW,WACX,SAAU,GACV,WAAY,IACZ,WAAY,OACZ,cAAe,YACf,MAAO,OAEND,yBAAkBC,cACrB,CAAA,EAEJ,EACA,IAAC,IAAI,CAAA,SAAU,GAAI,WAAY,IAAK,WAAY,OAAQ,cAAe,YACpE9H,SACH,KAAA,CAAA,CACF,CAAA,CAAA,CAEJ,EAvCqB4H,SCCfQ,aAAeA,OAACpN,OAA6B,CAC3C,KAAA,CAAEsI,IAAK6D,IAAKM,YAAazH,MAAO9C,OAAYlC,EAAAA,MAEhD,OAAA,KAAC,OACC,MACE,KAAC,KAAI,QAAS,OAAQ,IAAK,EACzB,SAAA,CAAA,IAAC,QAAMgF,SAAM,KAAA,CAAA,EACZyH,YAAc,GAAK,IAAC,QAAQ,CAAA,YAA0B,MAAOA,cAChE,CAAA,EAGDnE,SAAAA,CAAAA,IAAM,GAAKA,IAAM,GAAM,IAAA,aAAA,CAAa,IAAU,IAAS,EACvDA,IAAM,GAAK,IAAC,UAAU,CAAA,QAAkB,IAAU,IAAS,EAC3DA,MAAQ,GAAK,CAChB,CAAA,CAAA,CAEJ,EAhBqB8E,gBAkBRC,cAAgBA,OAACrN,OAA6E,CACnG,KAAA,CAAEsN,SAAAA,UAAUC,UAAWrL,QAAU,EAASlC,EAAAA,MAChD,OAAOsN,WAAAA,YAAAA,UAAUrJ,IAAI,CAACvF,EAAGkG,EAAG0F,MAAQ,CAClC,MAAMtF,MAAQsF,IAAIzF,SAAW,KAAM0I,iCAAWC,UAAUtU,aAAc,IAAM,EAAI,WAAawF,EAAEsG,MAC/F,aAAQ,aAAiBtG,CAAAA,GAAAA,EAAG,MAAc,QAAkB,IAAKkG,CAAK,CAAA,CAAA,EAE1E,EAN6ByI,iBC5BbI,SAAAA,QAAQC,IAAeC,aAA6B,UAAmB,CAC/EC,MAAAA,MAAQ,CAAC,QAAS,SAAU,OAAQ,QAAS,UAAW,UAAW,cAAc,EACjFC,YAAcD,MAAME,QAAQH,YAAY,EACxC7J,QAAUD,OAAOC,QACrB4J,IACGK,QAAQ,GAAGH,KAAK,EAChBI,YACAC,SACL,CAAA,EAAEC,OAAO,CAAC,CAAGlQ,CAAAA,MAAM,EAAGuB,MAAQvB,OAAS,GAAKuB,KAAOsO,WAAW,EAE9D,OADaM,SAAS/J,WAAWN,QAAQe,SAAW,EAAI,CAAE,CAAC8I,YAAY,EAAG,CAAM9J,EAAAA,OAAOa,YAAYZ,OAAO,CAAC,EAC/F2J,QAAUW,EAAAA,WAAW,IAAK,EAAE,CAC1C,CAXgBX,0BCWHY,MAAAA,UAAYA,OAACrO,OAAyB,CAC3C,KAAA,CAAEsO,SAAUxN,SAAUyN,QAAU,YAAaC,WAAapN,SAAcpB,EAAAA,MAExEyO,aAAenM,aAAAA,QAAQ,IAAM,CACjC,GAAI,CAACgM,SACI,MAAA,KAET,GAAIC,UAAY,YAAa,CACrBhK,MAAAA,KAAO+J,+BAAU/J,KAAKrD,iBAAiB,EAAG,CAAC,QAAS,SAAU,OAAQ,OAAO,GAE5EuM,OAAAA,QAAQlJ,KAAM,MAAM,CAC7B,CAEO+J,OAAAA,+BAAU3L,SAAS6L,WACzB,EAAA,CAACA,WAAYF,SAAUC,OAAO,CAAC,EAE5BG,WAAapM,aAAAA,QAAQ,IAAM,CAC/B,GAAI,CAACgM,SACI,MAAA,KAGT,GAAIC,UAAY,YACPD,OAAAA,+BAAU3L,SAAS6L,YAEtBjK,MAAAA,KAAO+J,+BAAU/J,KAAKrD,iBAAiB,EAAG,CAAC,QAAS,SAAU,OAAQ,OAAO,GAE5EuM,OAAAA,QAAQlJ,KAAM,MAAM,CAC1B,EAAA,CAACiK,WAAYF,SAAUC,OAAO,CAAC,EAE5BI,eAAiBrM,aAAAA,QAAQ,IAAM,CACnC,GAAI,CAACgM,SACI,MAAA,QAGT,MAAM9J,KAAO8J,SAASd,QAAQ,MAAM,EAAEhJ,KACtC,OAAIA,KAAO,GACF,QACEA,MAAQ,GACV,SAGF,KAAA,EACN,CAAC8J,QAAQ,CAAC,EAEb,OAAOA,UAAYA,SAAWpN,iBAAiB,MAC5C,QAAQ,CAAA,MAAOwN,WACd,SAAA,IAAC,IAAI,CAAA,MAAOC,eAAiBF,SAAAA,YAAa,CAAA,EAC5C,EAEA3N,QAEJ,EAnDyBuN,aCRTO,SAAAA,aAAa7U,KAAyBK,KAA8C,CAClG,MAAM4J,MAAO,OAAOjK,MAAS,SAAWA,KAAOA,KAAKiK,KAC7C5J,OAAAA,KAAK8J,KAAY,GACf1F,SAASC,QAAQC,EAAE3E,IAAI,EAAEiK,OAASA,KAC1C,CACH,CALgB4K,oCCEhB,MAAMC,YAAcA,QAAC7K,MAA0B5J,OACtCkI,qBAAQ,IAAM,CACnB,GAAI,CAAC0B,MACIrD,OAEH9F,MAAAA,WAAa+T,aAAa5K,MAAM5J,IAAI,EAC1C,GAAKS,WAIE2D,OAAAA,SAASC,QAAQ5D,WAAWd,IAAI,CAAA,EACtC,CAACK,KAAM4J,KAAI,CAAC,EAXG6K,eAcPC,SAAWA,OAAC9K,OAAkB,CACzC,MAAMvJ,WAAawL,SAASxI,MAAciB,GAAAA,EAAElE,gBAAgBC,UAAU,EAChEsU,eAAiBF,YAAY7K,MAAMvJ,WAAWI,UAAU,EACxDmU,iBAAmBH,YAAY7K,MAAMvJ,WAAWK,YAAY,EAElE,OAAOwH,qBAAQ,KACN,CACL2M,cAAezQ,SAAS4F,WAAW,CAAEE,MAAO,EAAGD,IAAK,EAAGL,KAAAA,KAAAA,CAAM,EAC7DnJ,WAAYkU,gBAAkBvQ,SAAS4F,WAAW,CAAEE,MAAO,EAAGD,IAAK,GAAIL,KAAAA,KAAAA,CAAM,EAC7ElJ,aAAckU,kBAAoBxQ,SAAS4F,WAAW,CAAEE,MAAO,EAAGD,IAAK,GAAIL,KAAAA,KAAAA,CAAM,EACjFjJ,gBAAiByD,SAAS4F,WAAW,CAAEE,MAAO,EAAGD,IAAK,GAAIL,KAAAA,KAAAA,CAAM,CAAA,GAEjE,CAACgL,iBAAkBD,eAAgB/K,KAAI,CAAC,CAC7C,EAbwB8K,YAeXI,cAAgBA,OAAClL,OACrB1B,qBACL,KAAO,CACL6M,KAAM,CACJC,MAAO5Q,SAAS4F,WAAW,CAAEE,MAAO,EAAGD,IAAK,EAAGL,KAAAA,KAAAA,CAAM,EACrDqL,IAAK7Q,SAAS4F,WAAW,CAAEE,MAAO,GAAID,IAAK,GAAIL,KAAAA,KAAAA,CAAM,EAAEsL,MAAM,KAAK,CACpE,EACAzU,WAAY,CACVuU,MAAO5Q,SAAS4F,WAAW,CAAEE,MAAO,EAAGD,IAAK,EAAGL,KAAMA,MAAO,CAAA,CAAG,EAC/DqL,IAAK7Q,SAAS4F,WAAW,CAAEE,MAAO,GAAID,IAAK,GAAIL,KAAMA,MAAO,CAAA,CAAG,EAAEsL,MAAM,KAAK,CAC9E,EACAxU,aAAc,CACZsU,MAAO5Q,SAAS4F,WAAW,CAAEC,IAAK,EAAGC,MAAO,EAAGN,KAAMA,MAAO,CAAA,CAAG,EAC/DqL,IAAK7Q,SAAS4F,WAAW,CAAEC,IAAK,GAAIC,MAAO,EAAGN,KAAAA,KAAAA,CAAM,EAAEsL,MAAM,KAAK,CACnE,EACAvU,gBAAiB,CACfqU,MAAO5Q,SAAS4F,WAAW,CAAEC,IAAK,EAAGC,MAAO,EAAGN,KAAMA,MAAO,CAAA,CAAG,EAC/DqL,IAAK7Q,SAAS4F,WAAW,CAAEC,IAAK,GAAIC,MAAO,EAAGN,KAAAA,KAAAA,CAAM,EAAEsL,MAAM,KAAK,CACnE,CAAA,GAEF,CAACtL,KAAI,CACP,EArB2BkL,iBCzBvBlL,KAAO9C,iBAAmB8C,EAAAA,KACnBuL,cAAgB,IAAIC,MAAqB,CACpDC,QAAS,GACTC,QAAS1L,KACT2L,QAAS3L,KACT4L,UAAW,CAAC,CACd,CAAC,ECZYC,0BAA4BA,QAACpV,WAAwBL,KAAmBL,OAAmB,CACtG0D,MAAMQ,SAAmB,MACVC,OAAOC,KAAO3B,OAAS,CAClC,MAAM8C,QAAU9C,MAAKhC,gBAAgBC,WAAWA,UAAU,EACpD8E,IAAMD,QAAQN,UAAWN,GAAMA,IAAMtE,IAAI,EAC/CkF,QAAQC,GAAG,EAAExF,KAAOA,KAAKyF,MAAM,CAAA,CAChC,CAEF,CACH,EATyCqQ,6BCU5BrN,0BAA4BA,QACvCzE,YACAwQ,UAC0B,CAC1B,CACE9L,WAAY,OACZlE,KAAM,OACNmE,eAAiBhE,GAAMA,QAAAA,YAAE1E,QAAF0E,eAASiE,SAASvB,YACzCwB,eAAoBlE,EAAEtE,MAAQoE,SAASC,QAAQC,EAAEtE,KAAKL,IAAI,EAC1DoJ,aAAezE,GAEV,KAAAuJ,QAAA,CAAM,UAAW,MAAO,WAAY,SAClCvJ,SAAAA,CAAEoR,EAAAA,eAAe,IACjBpR,EAAE1E,OAAS0E,EAAE1E,MAAQwE,SAAS2C,MAAM,GAClC,IAAA,QAAA,CAAQ,MAAM,eACb,SAAA,IAAC4O,YAAW,CAAA,UAAU,QAAW,CAAA,EACnC,CAEJ,CAAA,CAAA,EAGJlN,WAAY,mBACZC,SAAU,GACVC,YAAoB,GAAA,CAClB,MAAMhJ,KAAOyE,SAASwE,WAAWtE,EAAEuE,QAAQ,EAC3C,OAAIlJ,KAAKmJ,SACP2M,0BAA0B9R,YAAaW,EAAEtE,KAAMoE,SAASwE,WAAWtE,EAAEuE,QAAQ,CAAC,EAEzElJ,KAAKmJ,OACd,CACF,EACA,CACET,WAAY,QACZG,YAAoBlE,WAAAA,YAAEtE,OAAFsE,eAAQ1E,OAC5BmJ,aAAezE,GACb6P,UAAY,WAAU,KAAK,CAAA,QAAS,GAAO,MAAO7P,EAAE1E,KAAS,CAAA,MAAI,QAAQ,CAAA,MAAO0E,EAAE1E,MAAS,EAC7FE,KAAM,gBACN4I,SAAU,GACVD,WAAY,qBACZE,YAAoB,IAClBlD,sBAAsB9B,YAAaW,EAAEtE,KAAM,CAACsE,EAAEuE,QAAQ,EAC/C,GAEX,EACA,CACEG,UAAWA,KAAO,CAAEC,QAAS,cAAeC,QAAS,KAAA,GACrDC,SAAU,GACVd,WAAY,GACZe,MAAO,GACPC,MAAO,UACPN,aAAenD,OAEX,IAAC,OACC,CAAA,QAAS,IAAM,CACbA,MAAM5F,MAAQ8E,sBAAsBnB,YAAaiC,MAAM5F,IAAI,CAAA,EAE7D,MAAM,QACN,UAAS,GAET,SAAA,IAACsJ,YAAoB,CACvB,CAAA,CAGN,CAAC,EA/DsClB,6BCJnCwN,UAAYA,OAAChQ,OAIb,CACE,KAAA,CAAEvF,WAAYwV,YAAa1B,QAAU,QAAavO,EAAAA,MAClDV,QAAU2G,SAASxI,MAAQI,OAAUA,MAAMrD,gBAAgBC,WAAWA,UAAU,CAAC,EAEjF,CAACV,KAAMmM,OAAO,EAAI9F,sBAAS6P,WAAW,EACtC,CAACjS,OAAQkS,SAAS,EAAI9P,sBAAwB,IAAI,EAElDiG,YAAc/D,aAAAA,QAAQ,IACnB,CAAC,EAAChD,uBAAS4E,KAAYnK,GAAAA,KAAKuM,QAAQ9H,SAASC,QAAQC,EAAE3E,IAAI,EAAG,KAAK,IACzE,CAACuF,QAASvF,IAAI,CAAC,EAEZwM,WAAaA,WAAM,CACnBvI,QAAU,OACZW,mBAAmB5E,KAAMU,WAAY8T,UAAY,UAAYvQ,OAAS,IAAMA,MAAM,EAClFkS,UAAU,IAAI,EAChB,EAJiB3J,cAObC,oBAAsBlE,aAAAA,QAAQ,IAC3BE,0BAA0B/H,WAAY8T,OAAO,EACnD,CAAC9T,WAAY8T,OAAO,CAAC,EAExB,YACG,IAAI,CAAA,QAAS,OAAQ,cAAe,SAAU,OAAO,OACpD,SAAA,CAAA,KAAC,MAAM,CAAA,QAAS,EAAG,KAAK,WACtB,SAAA,CAAC,IAAA,WAAA,CACC,OAAQnN,UACR,GAAI,CAAEsF,MAAO,OAAA,EACb,MAAM,OACN,MAAO3M,KACP,SAAqB,OAAA,CACnB0C,QAAQC,IAAI1C,KAAK,EACjBA,OAASkM,QAAQlM,KAAK,CAAA,EAExB,EACF,IAAC,UACC,CAAA,MAAM,SACN,MAAOgE,QAAU,GACjB,KAAK,SACL,SAAsB+H,OAAAA,MAAMlF,OAAO7G,QAAU,GAAKkW,UAAU,IAAI,EAAIA,UAAU,CAACnK,MAAMlF,OAAO7G,KAAK,EACjG,WAAY,CACV2M,eAAgB4H,UAAY,UACzB,IAAA,eAAA,CAAe,SAAS,QAASA,SAAAA,UAAY,OAAS,IAAM,GAAI,CAAA,CAAA,EAGrE,EACF,IAAC,OAAO,CAAA,SAAUvQ,SAAW,MAAQ,CAACjE,MAAQsM,YAAa,QAASE,WAAY,SAEhF,WAAA,CAAA,CAAA,EACF,EACA,IAAC,KAAI,GAAI,CAAE0F,WAAY,EAAGkE,KAAM,UAAA,EAC9B,SAAA,IAAC,OACC,CAAA,yBAAwB,GACxB,QAAS7Q,SAAW,CAAE,EACtB,WAAYkH,oBACZ,GAAIlH,QAAU,WACd,iBAAkB,CAChBpF,KAAM,cAAA,EAER,8BAA6B,EAC7B,CAAA,EACJ,CACF,CAAA,CAAA,CAEJ,EApEkB8V,aA6ELI,OAASA,OAACpQ,OAAuB,CACtC,KAAA,CAAEgF,MAAOjH,YAAakS,YAAa1B,OAAYvO,EAAAA,MAEnD,OAAA,IAAC,OAAM,GAAI,CAAEsD,QAAS,EAAGrC,OAAQ,OAAQuC,MAAO,IAAK2J,WAAY,CAAE,EACjE,cAAC,IAAI,CAAA,QAAQ,OAAO,cAAc,SAAS,OAAO,OAChD,SAAA,CAAA,IAAC,KAAI,KAAK,WAAW,aAAc,EACjC,SAAA,KAAC,YAAW,GAAI,CAAEkD,aAAc,CAAA,EAAK,QAAQ,KAC1CrL,SAAAA,CAAAA,MAAO,IACPuJ,UAAY,QACV,IAAA,QAAA,CACC,MAEI,KAAA,SAAA,CAAA,SAAA,CAAA,IAAC,QAAK,SAA+C,iDAAA,CAAA,MACpD,KAAK,EAAA,EACN,IAAC,QAAK,SAAiD,mDAAA,CAAA,CAAA,EACzD,EAGF,SAAA,IAAC,OAAK,CAAA,SAAA,KAAG,CAAA,EACX,EAEDA,UAAY,WACV,IAAA,QAAA,CAAQ,MAAM,8CACb,SAAA,IAAC,OAAK,CAAA,SAAA,KAAA,CAAG,CACX,CAAA,CAAA,CAAA,CAEJ,CACF,CAAA,EACA,IAAC,IAAI,CAAA,KAAK,WACR,SAAA,IAAC,WAAU,QAAkB,WAAYxQ,YAAa,WAAA,CAA4B,CACpF,CAAA,CAAA,CACF,CAAA,CACF,CAAA,CAEJ,EAlCsBqS,UC9ETE,uBAAyBA,OAACtQ,OAAuC,CACtE,KAAA,CAAEuQ,eAAoBvQ,EAAAA,MAE1B,OAAA,IAAC,OAAM,GAAI,CAAEwD,MAAO,aAAc,EAChC,cAAC,UACE+M,CAAAA,SAAAA,CAAAA,gBAAgBtM,IAAI,CAAC,CAAEmL,MAAOC,IAAKrV,MAAOwW,UAAWC,OAASC,aAE1D,SACC,CAAA,SAAA,CAAA,IAAC,WACC,SAAC,IAAA,KAAA,CAAK,MAAc,QAAS,EAAM,CAAA,EACrC,EACC,IAAA,UAAA,CAAWtB,SAAMzM,MAAAA,SAASvB,SAAS,EAAE,EACrC,IAAA,UAAA,CACC,SAAC,IAAAuP,YAAA,CAAgB,CAAA,EACnB,EACC,IAAA,UAAA,CAAWtB,SAAI1M,IAAAA,SAASvB,SAAS,EAAE,OACnC,UACC,CAAA,SAAA,CAAA,IAAC,KAAK,CAAA,MAAOoP,UAAW,QAAS,GAAS,EAAA,MAAIC,KAAAA,EAChD,CAAA,CAAA,EAXaC,KAYf,CAEH,OACA,SACC,CAAA,SAAA,CAAC,IAAA,UAAA,CAAU,QAAS,EAAG,SAAM,SAAA,MAC5B,UACC,CAAA,SAAA,IAAC,KAAK,CAAA,MAAOH,gBAAgBtG,OAAO,CAACC,IAAK0G,OAASA,KAAK5W,MAAQkQ,IAAK,CAAC,EAAG,QAAS,EAAM,CAAA,EAC1F,CAAA,EACF,CAAA,CACF,CAAA,CACF,CAAA,CAEJ,EA/BsCoG,0BCLhCO,aAAeA,QAACH,MAAe7L,SAC/BA,SAAW,EACN,SACEA,QAAU,EACZ,CAAC,MAAO,MAAM,EAAE6L,KAAK,EAErB,CAAC,MAAO,MAAO,MAAM,EAAEA,KAAK,EANlBG,gBAkBfvD,SAAWA,OAACrE,QACXA,OAGE6H,QAAQ7H,OAAQ8H,KAAKzI,IAAI,EAAGW,OAAOpE,MAAM,CAAC,EAAEZ,IAAI,CAACvF,EAAGkG,EAAG0F,OACrD,CACLhC,IAAKyI,KAAKzI,IAAI,GAAG5J,CAAC,EAClByN,IAAK4E,KAAK5E,IAAI,GAAGzN,CAAC,EAClBsS,OAAQA,OAAOtS,CAAC,EAChB+N,YAAa/N,EAAEmG,OAASoE,OAAOpE,OAC/BG,MAAO6L,aAAajM,EAAG0F,IAAIzF,MAAM,CAAA,EAEpC,EAVQ,GAFMyI,YAeJ2D,YAAcA,OAACjN,OAAiB,CAC3C,MAAM4L,UAAY3J,SAASsJ,iBAAsB7Q,EAAEkR,UAAU5L,KAAI,CAAC,EAElE,OAAO1B,qBAAQ,KACTsN,iCAAW/K,UAAW,EACjB,CACLqM,SAAU,CAAE,EACZrW,WAAY,CAAE,EACdE,gBAAiB,CAAE,EACnBD,aAAc,CAAE,EAChBqW,IAAK,CAAE,EACPlC,cAAe,CAAE,EACjBW,UACAwB,WAAY,CAAA,CAAA,EAGT,CACLF,SAAU5D,SAASsC,iCAAW3L,IAAWvF,GAAAA,EAAEwS,SAAS,EACpDrW,WAAYyS,SAASsC,iCAAW3L,IAAWvF,GAAAA,EAAE7D,WAAW,EACxDE,gBAAiBuS,SAASsC,iCAAW3L,IAAWvF,GAAAA,EAAE3D,gBAAgB,EAClED,aAAcwS,SAASsC,iCAAW3L,IAAWvF,GAAAA,EAAE5D,aAAa,EAC5DqW,IAAK7D,SAASsC,iCAAW3L,IAAWvF,GAAAA,QAAAA,aAAEyS,IAAIE,GAAG,EAAE,IAAX3S,eAAc1E,QAAS,GAAE,EAC7DiV,cAAe3B,SAASsC,iCAAW3L,OAAWvF,EAAEzD,iBAAmByD,EAAE4S,kBAAkB,EACvFF,WAAY9D,SAASsC,iCAAW3L,IAAWvF,GAAAA,EAAE0S,WAAW,EACxDxB,SAAAA,EAED,CAACA,SAAS,CAAC,CAChB,EA3B2BqB,eChCdM,iBAAmBA,WAAM,CACpC,MAAM9W,WAAawL,SAASxI,MAAciB,GAAAA,EAAElE,gBAAgBC,UAAU,EACtE,OAAO6H,qBAAQ,IAEX7H,WAAWQ,iBAAiBuW,MAAa,GAChC,CAAC,CAAC5C,aAAapQ,SAASC,QAAQC,EAAE3E,IAAI,EAAEiK,KAAMvJ,WAAWE,aAAa,CAC9E,GACDF,WAAWE,cAAc6W,MAAa,GAC7B,CAAC,CAAC5C,aAAapQ,SAASC,QAAQC,EAAE3E,IAAI,EAAEiK,KAAMvJ,WAAWQ,gBAAgB,CACjF,EAEF,CAACR,WAAWE,cAAeF,WAAWQ,gBAAgB,CAAC,CAC5D,EAZgCsW,oBCenBE,gBAAkBA,WAAM,CACnC,KAAM,CAACC,aAAcC,eAAe,EAAIvR,aAASc,SAAAA,iBAAAA,EAAmB8C,IAAI,EAElE4N,gBAAkBL,mBAClBjE,UAAW2D,YAAYS,YAAY,EACnC3H,MAAQ+E,SAAS4C,YAAY,EAC7BG,WAAa3C,cAAcwC,YAAY,EAEvCI,QAAUxP,aAAAA,QAAQ,IAAM,QACxBgL,GAAAA,UAAS6D,IAAItM,SAAW,EAGrByI,OAAAA,GAAAA,UAASsC,YAATtC,eAAqB,GAAGwE,OAAAA,EAC9B,CAACxE,UAAS6D,IAAItM,OAAQyI,UAASsC,SAAS,CAAC,EAEtCmC,SAAWzP,aAAAA,QAAQ,IAAM,QACzBgL,GAAAA,UAAS6D,IAAItM,SAAW,EAGrByI,OAAAA,GAAAA,UAASsC,YAATtC,eAAqB,GAAGyE,QAAAA,EAC9B,CAACzE,UAAS6D,IAAItM,OAAQyI,UAASsC,SAAS,CAAC,EAEtCoC,UAAY1P,aAAAA,QAAQ,IAAM,QAC1BgL,OAAAA,UAAS6D,IAAItM,SAAW,EAC1B,UAIAyI,GAAAA,UAASsC,YAATtC,eAAqB,GAAG2E,SAAS/D,OAAc,GAAA,CAC7C,MAAMgE,QAAU1T,SAASC,QAAQC,EAAEwT,OAAO,EAC1C,OAAOA,SAAWL,WAAW1C,KAAKC,OAAS8C,SAAWL,WAAW1C,KAAKE,GACvE,KAAK,CAAA,GAGLnB,OAAQxP,GAAMA,EAAExE,OAAS,OAAO,EAChCiY,YACC,CAACjI,IAAK0G,OAAS,YACb,QAAI1G,IAAAA,IAAAA,IAAI,CAAC,IAALA,YAAAA,IAAS,KAATA,eAAalQ,SAAU4W,KAAK5W,MAC1B,IAAA,CAAC,EAAEoY,QAAQxB,IAAI,EAEfwB,IAAAA,QAAQ,CAACxB,IAAI,CAAC,EAGb1G,KAET,CACF,CAAA,EACCD,OAAO,CAACC,IAAK0G,QACZ1G,IAAI9L,KAAK,CACPgR,MAAO5Q,SAASC,QAAQmS,KAAK,CAAC,EAAEsB,OAAO,EACvC7C,IAAK7Q,SAASC,QAAQmS,KAAKA,KAAK/L,OAAS,CAAC,EAAEqN,OAAO,EACnDlY,MAAO4W,KAAK3G,OAAO,CAACC,KAAK0G,QAAS1G,KAAM0G,MAAK5W,MAAO,CAAC,EACrDwW,UAAWI,KAAK,CAAC,EAAE5W,MACnByW,MAAOG,KAAK/L,OACZ3K,KAAM0W,KAAK,CAAC,EAAE1W,IAAAA,CACf,EAEMgQ,KACN,CAAwB,CAAA,CAC5B,EAAA,CAACoD,UAAS6D,IAAItM,OAAQyI,UAASsC,UAAWiC,WAAW1C,KAAKE,IAAKwC,WAAW1C,KAAKC,KAAK,CAAC,EAElFQ,UAAY3J,SAASsJ,aAAa,EAGtC,OAAA,KAACrG,OAAI,QAAQ,OAAO,cAAc,MAAM,OAAO,OAAO,MAAO,OAC3D,SAAA,CAAA,IAACA,MAAI,CAAA,KAAK,WACR,SAAA,KAACjB,SAAM,IAAK,EAAG,UAAW,SAAU,SAAU,OAAQ,OAAO,OAAO,aAAc,EAC/E,SAAA,CAAA,CAAC2J,iBACA,IAAC,MAAM,CAAA,SAAS,QAAQ,SAA2D,8DAAA,EAEpF,IAAA,KAAA,CACC,MACE,KAAC1I,MAAI,CAAA,QAAQ,OAAO,WAAY,SAAU,IAAK,EAAG,MAAO,OACvD,SAAA,CAAA,IAAC,QAAK,SAAM,QAAA,CAAA,EACZ,IAAC,WAAU,SAAUa,MAAMjP,aAAc,QAAQ,OAAO,WAAYuG,SAAY,EAChF,IAAC6H,OAAI,GAAI,CAAE7F,QAAS,OAAQoD,WAAY,OAAQwG,WAAY,SAAUoF,SAAU,MAAA,EAC7EzC,SAAAA,UAAUH,SAAW,IAAC,kBAAiB,MAAO,CAAEjM,MAAO,GAAIvC,OAAQ,KACtE,CAAA,EACA,IAAC,YACC,GAAI,CAAEuC,MAAO,GAAIiC,YAAa,CAAA,EAC9B,MAAO,OACP,MAAO,CAAC,MAAM,EACd,QAASvE,iBAAiB,EAAEoR,IAAI,CAAEtO,KAAM4L,UAAUD,OAAS,CAAA,EAC3D,QAASzO,mBAAmBoR,IAAI,CAAEtO,KAAM4L,UAAUF,OAAS,CAAA,EAC3D,aAAcxO,mBACd,UAAW,CACTwH,UAAW,CACT6F,QAAS,WACT/C,MAAO,EACT,CAAA,EAEF,aAAwBxH,OAAA,CACtB2N,gBAAgB3N,MAAKA,IAAI,CAAA,EAE3B,CACJ,CAAA,CAAA,EAGF,aAAC,cAAc,CAAA,SAAUsJ,UAAS4D,SAAU,UAAWnH,MAAMjP,YAAAA,CAAgB,CAC/E,CAAA,EACC,KAAA,KAAA,CACC,MACE,KAACoO,MAAI,CAAA,QAAS,OAAQ,MAAO,cAAe,IAAK,EAAG,YAAa,EAC/D,SAAA,CAAA,IAAC,QAAK,SAAQ,UAAA,CAAA,EACd,IAAC,WAAU,SAAUa,MAAMkF,cAAe,QAAQ,OAAO,WAAY5N,SAAY,CAAA,CACnF,CAAA,EAGF,SAAA,CAAC,IAAA,cAAA,CAAc,SAAUiM,UAAS6D,IAAK,UAAWpH,MAAMkF,cAAe,QAAS,EAAS,CAAA,EACxF6C,SACC,IAAC,QACC,CAAA,UAAU,QACV,gBAAiB,CACf3P,QAAS,CACPoQ,GAAI,CACFC,SAAU,MACZ,CACF,CACF,EACA,MAAOR,WAAa,IAAC,wBAAuB,gBAAiBA,SAAU,CAAA,EAEvE,SAAA,IAAC,MACC,CAAA,SAAA,IAAC,OAAM,MAAO,WACZ,aAAC,KAAK,CAAA,eAAc,GAAC,MAAOF,OAAAA,CAAW,CACzC,CAAA,CAAA,CACF,CACF,CAAA,EAEDC,cACE,MAAM,CAAA,MAAO,aACZ,SAAC,IAAA,KAAA,CAAK,MAAOA,QAAAA,CAAY,CAC3B,CAAA,CAAA,EAEJ,EACC,IAAA,KAAA,CACC,MACE,KAAC7I,MAAI,CAAA,QAAS,OAAQ,MAAO,cAAe,IAAK,EAAG,YAAa,EAC/D,SAAA,CAAA,IAAC,QAAK,SAAc,gBAAA,CAAA,EACpB,IAAC,WAAU,SAAUa,MAAMkF,cAAe,QAAQ,OAAO,WAAY5N,SAAY,CACnF,CAAA,CAAA,EAGF,aAAC,cAAc,CAAA,SAAUiM,UAAS2B,cAAe,UAAWlF,MAAMkF,aAAAA,CAAiB,CACrF,CAAA,EAEC,IAAA,KAAA,CACC,MACE,KAAC/F,MAAI,CAAA,QAAS,OAAQ,MAAO,cAAe,IAAK,EAAG,YAAa,EAC/D,SAAA,CAAA,IAAC,QAAK,SAAW,aAAA,CAAA,EACjB,IAAC,WAAU,SAAUa,MAAMlP,WAAY,QAAQ,OAAO,WAAYwG,SAAY,CAChF,CAAA,CAAA,EAGF,aAAC,cAAc,CAAA,SAAUiM,UAASzS,WAAY,UAAWkP,MAAMlP,UAAAA,CAAc,CAC/E,CAAA,EACC,IAAA,KAAA,CACC,MACE,KAACqO,MAAI,CAAA,QAAS,OAAQ,MAAO,cAAe,IAAK,EAAG,YAAa,EAC/D,SAAA,CAAA,IAAC,QAAK,SAAa,eAAA,CAAA,EACnB,IAAC,WAAU,SAAUa,MAAMjP,aAAc,QAAQ,OAAO,WAAYuG,SAAY,CAClF,CAAA,CAAA,EAGF,aAAC,cAAc,CAAA,SAAUiM,UAASxS,aAAc,UAAWiP,MAAMjP,YAAAA,CAAgB,CACnF,CAAA,EACC,IAAA,KAAA,CACC,MACE,KAACoO,MAAI,CAAA,QAAS,OAAQ,MAAO,cAAe,IAAK,EAAG,YAAa,EAC/D,SAAA,CAAA,IAAC,QAAK,SAAgB,kBAAA,CAAA,EACtB,IAAC,WAAU,SAAUa,MAAMhP,gBAAiB,QAAQ,OAAO,WAAYsG,SAAY,CACrF,CAAA,CAAA,EAGF,aAAC,cAAc,CAAA,SAAUiM,UAASvS,gBAAiB,UAAWgP,MAAMhP,eAAAA,CAAmB,CACzF,CAAA,CAAA,CAAA,CACF,CACF,CAAA,MACCmO,MAAI,CAAA,KAAK,WAAW,SAAU,OAAQ,cAAe,EAAG,YAAa,EACpE,SAAC,KAAAA,MAAA,CAAI,QAAS,OAAQ,OAAQ,OAAQ,MAAO,OAAQ,IAAK,EACxD,SAAA,CAAA,IAAC,QACC,YAAY,WACZ,QAAQ,OACR,YAAa1K,SAAS4F,WAAW,CAC/BC,IAAK,EACLC,MAAO,EACPN,KAAM0N,YAAAA,CACP,EACD,MAAM,sBACN,EACF,IAAC,OACC,CAAA,MAAM,iBACN,YAAY,mBACZ,QAAQ,UACR,YAAa3H,MAAMkF,aACnB,CAAA,EACF,IAAC,OAAO,CAAA,MAAM,kBAAkB,YAAY,YAAY,QAAQ,UAAU,YAAalF,MAAMkF,aAAiB,CAAA,EAC9G,IAAC,OAAO,CAAA,MAAM,cAAc,YAAY,gBAAgB,QAAQ,UAAU,YAAalF,MAAMlP,UAAc,CAAA,EAC3G,IAAC,OAAO,CAAA,MAAM,cAAc,YAAY,aAAa,QAAQ,OAAO,YAAakP,MAAMlP,UAAc,CAAA,EACrG,IAAC,OACC,CAAA,MAAM,uBACN,YAAY,kBACZ,YAAakP,MAAMjP,aACnB,QAAQ,SACR,CAAA,EACF,IAAC,OAAO,CAAA,MAAM,gBAAgB,YAAY,eAAe,YAAaiP,MAAMjP,aAAc,QAAQ,MAAS,CAAA,EAC3G,IAAC,OACC,CAAA,MAAM,mBACN,YAAY,kBACZ,YAAaiP,MAAMhP,gBACnB,QAAQ,MACR,CAAA,CAAA,CAAA,CACJ,CACF,CAAA,CACF,CAAA,CAAA,CAEJ,EAvN+B0W,mBChBlBgB,iCAAmCA,OAACzO,OAAiB,CAChE,MAAM4L,UAAY3J,SAASsJ,iBAAsB7Q,EAAEkR,UAAU5L,KAAI,CAAC,EAC5D0O,uBAAyBzM,SAASxI,MAAciB,GAAAA,EAAEvD,gBAAgBM,8BAA8B,EAEtG,OAAO6G,qBAAQ,IAAM,QACZ,MAAA,CACLqQ,UAAW5B,KAAKzI,MAAIsH,oCAAWyB,GAAG,KAAdzB,eAAkBgD,oBAAqB,EAAG,EAAE,EAAIF,uBACpEG,YAAaH,sBAAAA,CACf,EACC,CAACA,uBAAwB9C,SAAS,CAAC,CACxC,EAVgD6C,oCCAnCK,iBAAmBA,OAAC9O,OAAiB,CAChD,MAAM+O,OAAS9M,SAASxI,MAAQiB,GAAMA,EAAEvD,eAAe,EACjD0W,WAAa3C,cAAclL,KAAI,EACrC,OAAO1B,qBAAQ,KACN,CACLqQ,UAAWI,OAAOvX,gBAAkBuV,KAAKzI,IAAIyI,KAAK5E,IAAI,EAAG0F,WAAW1C,KAAKE,IAAI7B,QAAQ,QAAQ,EAAE9F,MAAM,EAAG,EAAE,EAC1GsL,SAAUD,OAAOvX,eAAAA,GAElB,CAACuX,OAAOvX,gBAAiBqW,WAAW1C,IAAI,CAAC,CAC9C,EATgC2D,oBCQnBG,wBAA0BA,OAACjP,OAA8B,CACpE,MAAM+O,OAAS9M,SAASxI,MAAQiB,GAAMA,EAAEvD,eAAe,EACvD,OAAO+X,gBAAgBlP,MAAM+O,OAAO1X,oBAAqB0X,OAAOzX,qBAAqB,CACvF,EAHuC2X,2BAK1BE,qBAAuBA,OAACnP,OAA8B,CACjE,MAAM+O,OAAS9M,SAASxI,MAAQiB,GAAMA,EAAEvD,eAAe,EACjDiY,MAAQF,gBAAgBlP,MAAM+O,OAAO3X,iCAAkC,GAAK2X,OAAOxX,2BAA2B,EACpH,OAAO+G,qBAAQ,KACN,CACLgG,IAAK8K,MAAMjH,IACXA,IAAKiH,MAAM9K,GAAAA,GAEZ,CAAC8K,KAAK,CAAC,CACZ,EAToCD,wBAa9BD,gBAAkBA,QAAClP,MAAcqP,UAAmBC,UAAiC,CACzF,MAAM1D,UAAY3J,SAASsJ,iBAAsB7Q,EAAEkR,UAAU5L,KAAI,CAAC,EA4C3D5J,OA1CMkI,aAAAA,QACX,KAEKsN,WAAa,IACX3L,IAAW,GAAA,cACV,MAAMmG,MAAQkJ,QAAUvC,KAAK5E,IAAI,KAAIzN,KAAEuT,SAASZ,GAAG,EAAE,IAAhB3S,eAAmB6U,aAAc,GAAKF,SAAS,EAC9EG,iBAAkB9U,KAAEuT,SAAS/N,KAAMxF,IAAMA,GAAE6U,WAAaF,SAAS,IAA/C3U,eAAkDwT,QACpES,UAAYjU,EAAEuT,SACjBzH,MAAM9L,EAAE+U,iBAAiB,EACzBvF,OAAQxP,IAAMA,GAAE6U,YAAcF,SAAS,EACvCpJ,OAAO,CAACC,IAAK0G,OACL1G,IAAM6G,KAAKzI,IAAIsI,KAAK5W,MAAO4W,KAAK2C,WAAaF,SAAS,EAAIC,QAChE,CAAC,EACAT,YAAczI,OAASkJ,WAAW5U,KAAEuT,SAASZ,GAAG,EAAE,IAAhB3S,eAAmB1E,QAAS,GAE7D,MAAA,CACLoQ,MACAoJ,gBAAiBA,gBAAkBhV,SAASC,QAAQ+U,eAAe,EAAI7S,OACvEgS,UACAE,WAAAA,CAEH,CAAA,EACA3E,OAAcxP,GAAAA,EAAE8U,eAAe,EAClCvJ,OACA,CAACC,IAAK0G,KAAMhM,IACNA,GAAK,EACA,CAAE0D,IAAKsI,KAAMzE,IAAKyE,IAAAA,GAErBA,KAAKxG,MAAQF,IAAI5B,IAAK8B,QACxBF,IAAI5B,IAAMsI,MAERA,KAAKxG,MAAQF,IAAIiC,IAAK/B,QACxBF,IAAIiC,IAAMyE,MAGP1G,KAET,CAAA,CACF,EACF,CAACmJ,UAAWC,QAAS1D,SAAS,CAChC,CAGF,EA9CwBsD,mBC7BXQ,aAAeA,QAACC,QAA8BC,SAAmB,CAC5E,GAAKD,QAGE,MAAA,CAAE,GAAGA,QAASrL,IAAKqL,QAAQrL,IAAMsL,OAAQzH,IAAKwH,QAAQxH,IAAMyH,OAAQ5C,OAAQ2C,QAAQ3C,OAAS4C,MAAAA,CACtG,EAL4BF,gBAOfG,cAAgBA,QAACvG,UAAiCsG,SACtDtG,WAAAA,YAAAA,UAAUY,OAAQxP,GAAMA,GAAGuF,IAAWyP,GAAAA,aAAahV,EAAGkV,MAAM,GADxCC,iBAIhBC,mBAAqBA,OAACH,SAC7BA,QAAQ9O,SAAW,EACrB,OAEiB8O,QAAQ1J,OAAO,CAACC,IAAK0G,OAC/B1G,IAAIuC,YAAcmE,KAAKnE,YAAcvC,IAAM0G,IACnD,EAN+BkD,sBAUrBC,cAAgBA,OAACC,SACxBA,QAAQnP,QAAU,EACb,GAGF,CACLmP,QAAQ/J,OACN,CAACC,IAAK0G,OAAS,CACTA,GAAAA,KAAK/L,SAAW,EACXqF,OAAAA,IAEH+J,MAAAA,WAAaH,mBAAmBlD,IAAI,EAEtCzE,WAAAA,MAAO8H,mCAAY9H,MAAO,EAC1B7D,IAAAA,MAAO2L,mCAAY3L,MAAO,EAC1B0I,IAAAA,SAAUiD,mCAAYjD,SAAU,EAC7B9G,GAAAA,EAET,CAAE5B,IAAK,EAAG6D,IAAK,EAAG6E,OAAQ,EAAGhM,MAAO,SAAUyH,YAAa,CAC7D,CAAA,CAAC,EAnBwBsH,iBCCvBG,SAAWA,OAACna,MAAmBA,KAAKyT,QAAQ,cAAc,EAAE2G,aAAe,EAAhED,YAEJE,aAAeA,OAACpU,OAA8D,iBACnF,KAAA,CAAEgE,KAAAA,MAAMqQ,QAAarU,EAAAA,MACrB+J,MAAQ+E,SAAS9K,KAAI,EAErBsQ,QAAUxB,iBAAiB9O,KAAI,EAC/BuQ,WAAa9B,iCAAiCzO,KAAI,EAClDwQ,SAAWrB,qBAAqBnP,KAAI,EACpCyQ,eAAiBxB,wBAAwBjP,KAAI,EAC7CsJ,UAAW2D,YAAYjN,KAAI,EAC3B0Q,oBAAsBzO,SAASxI,SAAc,EAAIiB,EAAEvD,gBAAgBO,oBAAoB,EAEvF0O,MAAQ9H,aAAAA,QAAQ,IAAM,qBACpBqQ,MAAAA,UAAY,CAChBuB,SAASnK,MAAMlP,UAAU,GAAKgZ,cAAcvG,UAASzS,WAAY6Z,mBAAmB,EACpFR,SAASnK,MAAMjP,YAAY,GAAK+Y,cAAcvG,UAASxS,aAAc4Z,mBAAmB,EACxFR,SAASnK,MAAMhP,eAAe,GAAKuS,UAASvS,gBAC5C,CAAC,CAAEuN,IAAKgM,QAAQ3B,UAAWxG,IAAKmI,QAAQ3B,UAAWlG,YAAa,EAAGuE,OAAQ,CAAG,CAAA,EAC9E,CAAC,CAAE1I,IAAKiM,WAAW5B,UAAWxG,IAAKoI,WAAW5B,UAAWlG,YAAa,EAAGuE,OAAQ,CAAG,CAAA,EACpF,CAAC,CAAE1I,MAAKmM,IAAAA,eAAenM,MAAfmM,YAAAA,IAAoB9B,YAAa,EAAGxG,MAAKsI,IAAAA,eAAetI,MAAfsI,YAAAA,IAAoB9B,YAAa,EAAGlG,YAAa,EAAGuE,OAAQ,CAAG,CAAA,EAChH,CAAC,CAAE1I,KAAKkM,IAAAA,SAASlM,MAATkM,YAAAA,IAAc7B,UAAWxG,KAAKqI,IAAAA,SAASrI,MAATqI,YAAAA,IAAc7B,UAAWlG,YAAa,EAAGuE,OAAQ,CAAA,CAAG,CAAC,EAC3F9C,OAAQxP,GAAMA,IAAM,EAAK,EAE3B,OAAOqV,cAAcpB,SAAS,CAAA,EAC7B,CACD+B,oBACApH,UAASxS,aACTwS,UAASzS,WACTyS,UAASvS,gBACTgP,MAAMjP,aACNiP,MAAMlP,WACNkP,MAAMhP,iBACNyZ,YAASrI,MAATqI,eAAc7B,WACd6B,YAASlM,MAATkM,eAAc7B,UACd4B,WAAW5B,UACX2B,QAAQ3B,WACR8B,kBAAetI,MAAfsI,eAAoB9B,WACpB8B,kBAAenM,MAAfmM,eAAoB9B,SAAS,CAC9B,EAGC,OAAA,IAAA,SAAA,CACE,cAAC1K,QAAM,CAAA,QAAS,EAAG,MAAO,IAAK,aAAc,EAC3C,SAAA,CAAC,IAAA,KAAA,CACC,MAEI,KAAA,SAAA,CAAA,SAAA,CAAA,IAAC,QAAK,SAA0B,4BAAA,CAAA,EAChC,IAAC,YACC,GAAI,CAAEzE,MAAO,GAAIiC,YAAa,EAAGgB,WAAY,MAC7C,EAAA,MAAO,OACP,MAAO,CAAC,MAAM,EACd,QAASvF,mBACT,QAASA,iBAAAA,EAAmByT,KAAK,CAAE/Q,MAAO,CAAG,CAAA,EAC7C,MAAO1C,mBAAmBoR,IAAI,CAAEtO,KAAAA,KAAM,CAAA,EACtC,UAAW,CACT0E,UAAW,CACT6F,QAAS,WACT/C,MAAO,EACT,CAAA,EAEF,aAAexH,QAAS,CACtBqQ,SAASrQ,OAAKA,IAAI,CAAA,EAEpB,CACJ,CAAA,CAAA,EAGF,aAAC,cAAc,CAAA,SAAUoG,MAAO,UAAWL,MAAMjP,aAAgB,CACnE,CAAA,EACCoZ,SAASnK,MAAMlP,UAAU,GACxB,IAAC,aACC,MAAM,cACN,KAAMkP,MAAMlP,WACZ,QAASgZ,cAAcvG,UAASzS,WAAY6Z,mBAAmB,IAGlER,SAASnK,MAAMjP,YAAY,GAC1B,IAAC,aACC,MAAM,gBACN,KAAMiP,MAAMjP,aACZ,QAAS+Y,cAAcvG,UAASxS,aAAc4Z,mBAAmB,IAGpER,SAASnK,MAAMhP,eAAe,GAC5B,IAAA,YAAA,CAAY,MAAM,mBAAmB,KAAMgP,MAAMhP,gBAAiB,QAASuS,UAASvS,kBAEtF,CAAC,CAAC0Z,eAAenM,SAAQ,iBAAiB,CAAA,aAAcmM,eAAgB,MAAO,wBAAwB,EACvG,CAAC,CAACD,SAASlM,SAAQ,iBAAiB,CAAA,aAAckM,SAAU,MAAO,2BAA2B,EAE/F,KAAC,KAAK,CAAA,MAAO,uBACV,SAAA,CAAC,CAAA,CAACF,QAAQtB,UACT,IAAC,OAAM,MAAO,mBAAoB,eAAgB,IAAC,KAAK,CAAA,QAAQ,YAAY,MAAOsB,QAAQtB,QAAS,CAAA,EAClG,SAAC,IAAA,KAAA,CAAK,QAAQ,kBAAkB,MAAOsB,QAAQ3B,SAAAA,CAAa,CAC9D,CAAA,EAED,CAAC,CAAC4B,WAAW1B,aACZ,IAAC,OACC,MAAO,0BACP,eAAgB,IAAC,KAAK,CAAA,QAAQ,eAAe,MAAO0B,WAAW1B,WAAY,CAAA,EAE3E,SAAC,IAAA,KAAA,CAAK,QAAQ,kBAAkB,MAAO0B,WAAW5B,SAAAA,CAAa,CACjE,CAAA,CAAA,EAEJ,CAAA,CACF,CAAA,CACF,CAAA,CAEJ,EA1G4ByB,gBA4GtBQ,iBAAmBA,OAAC5U,OAAwD,0BAC1E,KAAA,CAAE6U,aAAc7P,KAAUhF,EAAAA,MAChC,OACG,KAAA,KAAA,CACC,MACE,KAACkJ,MAAI,CAAA,QAAS,OAAQ,MAAO,cAAe,IAAK,EAAG,YAAa,EAC/D,SAAA,CAAA,IAAC,QAAMlE,SAAM,KAAA,CAAA,EAEb,IAAC,WAAU,WAAY3D,SAAU,QAAQ,OAAO,UAAUwT,gBAAa1I,MAAb0I,eAAkBrB,eAAmB,CAAA,EAC9FqB,aAAavM,KACZuM,aAAa1I,KACb,CAAC0I,aAAavM,IAAIkL,gBAAgBsB,OAAOD,aAAa1I,IAAIqH,eAAe,GAErE,KAAA,SAAA,CAAA,SAAA,CAAA,IAAC,QAAK,SAAE,IAAA,CAAA,EACR,IAAC,WAAU,WAAYnS,SAAU,QAAQ,OAAO,SAAUwT,aAAavM,IAAIkL,eAAmB,CAAA,CAAA,EAChG,CAAA,CAEN,CAAA,EAGDqB,SAAAA,CAAAA,aAAa1I,KAAO0I,aAAa1I,IAAI/B,UAAUyK,gBAAavM,MAAbuM,eAAkBzK,QAC/D,IAAA,MAAA,CAAM,MAAO,YACZ,SAAA,IAAC,MAAK,OAAOyK,gBAAa1I,MAAb0I,eAAkBlC,UAAW,QAAS,GAAS,CAC9D,CAAA,EAEDkC,aAAa1I,KAAO0I,aAAa1I,IAAI/B,UAAUyK,gBAAavM,MAAbuM,eAAkBzK,QAE9D,KAAA,SAAA,CAAA,SAAA,CAAA,IAAC,OAAM,MAAOyK,aAAa1I,IAAIqH,gBAAkBtS,mBAAqB,QAAU,MAC9E,SAAA,IAAC,MAAK,OAAO2T,gBAAa1I,MAAb0I,eAAkBlC,UAAW,QAAS,EAAS,CAAA,EAC9D,MACC,MAAM,CAAA,MAAOkC,aAAa1I,IAAIqH,gBAAkBtS,mBAAqB,OAAS,OAC7E,SAAA,IAAC,MAAK,OAAO2T,gBAAavM,MAAbuM,eAAkBzK,MAAO,QAAS,EAAS,CAAA,EAC1D,CAAA,EACF,EAED,IAAA,MAAA,CAAM,MAAO,eACZ,SAAC,IAAA,KAAA,CAAK,OAAOyK,gBAAa1I,MAAb0I,eAAkBhC,YAAa,QAAS,EAAS,CAAA,EAChE,CACF,CAAA,CAAA,CAEJ,EAxCyB+B,oBA0CnBG,YAAcA,OAAC/U,OAAkE,CAC/E,KAAA,CAAEjG,KAAM4Z,QAAS3O,KAAUhF,EAAAA,MACjC,OACG,IAAA,KAAA,CACC,MACE,KAACkJ,MAAI,CAAA,QAAS,OAAQ,MAAO,cAAe,IAAK,EAAG,YAAa,EAC/D,SAAA,CAAA,IAAC,QAAMlE,SAAM,KAAA,CAAA,MACZ,UAAU,CAAA,QAAQ,OAAO,WAAY3D,SAAU,SAAUtH,KAAQ,CAAA,CAAA,CACpE,EAGF,SAAC,IAAA,cAAA,CAAc,SAAU4Z,QAAS,UAAW5Z,IAAQ,CAAA,CACvD,CAAA,CAEJ,EAdoBgb,eC3KPC,wBAA0BA,WAAM,CAC3C,MAAM9N,SAAWjB,SAASxI,MAAQiB,GAAMA,EAAExD,MAAM,EAChD,OAAOsD,SAASyW,WACdpR,OAAOoF,OAAO/B,QAAQ,EACnBjD,IAAW,GAAA,QACNvF,OAAAA,EAAExE,OAAS,YACNwE,KAAEtE,KAAK,CAAC,IAARsE,SAAW3E,KAAOyE,SAASC,QAAQC,EAAEtE,KAAK,CAAC,EAAEL,IAAI,EAEnDmH,iBAAiB,CAAA,CACzB,EACA+I,OAAO,CAACC,IAAK0G,OAASG,KAAKzI,IAAI4B,KAAK0G,uBAAM1X,aAAcgc,GAAQ,EAAGhU,mBAAmBhI,SAAU,CAAA,CACrG,CACF,EAZuC8b,2BCG1BG,iBAAmBA,OAACnR,OAAiB,CAC1C7C,MAAAA,MAAQ3C,SAAS2C,QACjB4I,MAAQ+E,SAAS9K,KAAI,EACrBsJ,UAAW2D,YAAYjN,KAAI,EAC3B+O,OAAS9M,SAASxI,MAAQiB,GAAMA,EAAEvD,eAAe,EA6BhDia,OA3BS9S,aAAAA,QAAQ,IAAM,cAE1B,MAAA,CACE,CACEyH,MAAMlP,aACN6Y,gBAAaI,mBAAmBxG,UAASzS,UAAU,EAAG,EAAIkY,OAAOrX,oBAAoB,IAArFgY,eAAwF1C,SAAU,CAAC,EAErG,CACEjH,MAAMjP,eACN4Y,gBAAaI,mBAAmBxG,UAASxS,YAAY,EAAG,EAAIiY,OAAOrX,oBAAoB,IAAvFgY,eAA0F1C,SAAU,CAAC,EAEvG,CAACjH,MAAMhP,kBAAiB+Y,sBAAmBxG,UAASvS,eAAe,IAA3C+Y,eAA8C9C,SAAU,CAAC,CAAC,EAGnF/M,IAAI,CAAC,CAACiO,QAASlU,MAAM,IAAOmD,MAAQ+Q,QAAUlU,OAAS,CAAE,EACzDiM,OAAO,CAACC,IAAK0G,OAAS1G,IAAM0G,KAAM,CAAC,CAAA,EACrC,CACD7G,MAAMlP,WACNkP,MAAMjP,aACNiP,MAAMhP,gBACNuS,UAASzS,WACTyS,UAASxS,aACTwS,UAASvS,gBACTgY,OAAOrX,qBACPyF,KAAK,CACN,CAGH,EAlCgCgU,oBCa1BE,gBAAkBA,OAACrR,OAAiB,WAClCoR,MAAAA,QAAUD,iBAAiBnR,KAAI,EAC/BsQ,QAAUxB,iBAAiB9O,KAAI,EAC/BsR,YAAcrC,wBAAwBjP,KAAI,EAC1CuR,iBAAmBpC,qBAAqBnP,KAAI,EAC5C0O,uBAAyBD,iCAAiCzO,KAAI,EAGlEoR,OAAAA,QACAd,QAAQ3B,UACRD,uBAAuBC,aACtB2C,eAAYhN,MAAZgN,eAAiB3C,YAAa,MAC9B4C,kDAAkBjN,MAAlBiN,eAAuB5C,YAAa,EAEzC,EAdwB0C,mBAgBlBG,iBAAmBA,WAAM,CACvBxR,MAAAA,MAAO9C,iBAAmB8C,EAAAA,KACzB,MAAA,CACL,CAACA,MAAO,CAAC,EAAGqR,gBAAgBrR,KAAI,EAChC,CAACA,MAAO,CAAC,EAAGqR,gBAAgBrR,MAAO,CAAC,EAAIqR,gBAAgBrR,KAAI,CAAA,CAEhE,EANyBwR,oBAQZC,oBAAsBA,OAACzR,OAAiB,CACnD,MAAM0R,cAAgBxU,mBAChByU,SAAWX,0BACX9N,SAAWjB,SAASxI,MAAQiB,GAAMA,EAAExD,MAAM,EAC1C0a,cAAgBJ,mBAiEfpb,OA/DMkI,aAAAA,QAAQ,IAAM,CACrB,GAAA,CAACqT,SAASzS,QACZ,MAAO,GAGT,MAAM6G,MAAQ,IAAI8L,MAAM7R,MAAO,EAAI2R,SAAS3R,IAAI,EAC7C8R,KAAKH,SAAS3R,IAAI,EAClBC,IAAI,CAACvF,EAAGkG,IAAMpG,SAAS4F,WAAW,CAAEC,IAAK,EAAGC,MAAO,EAAGN,KAAMtF,EAAIkG,CAAAA,CAAG,EAAEvG,QAAQ,KAAK,CAAC,EAEhFkB,IAAMwH,yBAAyB2O,cAAe3L,SAAcrL,CAAC,EAC9DqL,MAAMgM,KAAYrX,GAAAA,EAAEoW,OAAOY,cAAcrX,QAAQ,KAAK,CAAC,CAAC,GAC3D0L,MAAM9K,OAAOM,IAAM,EAAG,EAAGmW,aAAa,EAGxC,MAAMM,mBAAqBzW,IAEpBwK,OAAAA,MACJ9F,IAAc,MAAA,CAaPgS,MAAAA,cAZiBpS,OAAOoF,OAAO/B,QAAQ,EAAEjD,IAAW,GAAA,CACxD,GAAIvF,EAAExE,OAAS,YAAcwE,EAAE7C,KAAM,CACnC,MAAMiM,WAAahB,sBAAsB/M,KAAM2E,EAAEtE,IAAI,EAC/CwN,QAAUP,gBAAgBtN,KAAM2E,EAAE7C,IAAI,EACrCgM,OAAAA,WAAWnJ,EAAE7C,KAAKhC,aAAciO,mCAAY9N,MAAO4N,QAASlJ,EAAE7C,KAAKvC,SAAS,CAAA,SAC1EoF,EAAExE,OAAS,UAAW,CAC/B,MAAMyP,MAAQ7C,sBAAsB/M,KAAM2E,EAAEtE,IAAI,EAChD,OAAOuP,yBAAO3P,QAAS,CACzB,CACO,MAAA,EAAA,CACR,EAEoCiQ,OAAO,CAACC,IAAK0G,OAAS1G,IAAM0G,KAAM,CAAC,EAClEsF,aAAeN,cAAc7b,KAAKiK,IAAI,GAAK,EAE1C,MAAA,CACLjK,KACAoc,UAAWpc,KAAKoQ,SAAS,EACzBjP,OAAQ+a,cAAgBC,YAAAA,CAE3B,CAAA,EACAjS,IAAI,CAACvF,EAAGa,KAAK+K,MAAQ,WAChB5L,GAAAA,EAAE3E,MAAQ2b,eAAiBhX,EAAE3E,KAAKiK,OAAS0R,cAAc1R,KAAO,EAAG,CACrE,MAAMoS,kBAAkB9L,OAAI/K,KAAM,CAAC,IAAX+K,eAAcpP,OACtC,OAAKkb,iBAGE,CACL,GAAG1X,EACH2X,QAAS3X,EAAExD,OAASkb,iBACpBE,OAAQ5X,EAAExD,OAASkb,iBAAkB,CAAA,EAL9B1X,CAOX,CAEM0X,MAAAA,iBAAkB9L,OAAI0L,kBAAkB,IAAtB1L,eAAyBpP,OACjD,OAAKkb,gBAGE,CACL,GAAG1X,EACH2X,QAAS3X,EAAExD,OAASkb,gBACpBE,OAAQ5X,EAAExD,OAASkb,gBAAkB,CAAA,EAL9B1X,CAMT,CACD,CAAA,EACF,CAACiX,SAASzS,QAASyS,SAAS3R,KAAMA,MAAM0R,cAAexO,SAAU0O,aAAa,CAAC,CAEpF,EAtEmCH,uBCpCtBhL,YAAcA,OAACzK,OAAiC,CACrDuW,MAAAA,SAAWrV,mBAAmB8C,KAAO,EACrC,CAAEwS,SAAcxW,EAAAA,MAChB5F,KAAOqb,oBAAoBc,QAAQ,EACnCE,UAAYvV,iBAAAA,EAAmB8C,KAAOwS,UAAY,EAElD9L,OAASpI,aAAAA,QAAQ,IACd,CACL,CACEpI,KAAM,OACN0Q,KAAM,YACNC,KAAM,SACNC,MAAO,SACP3I,QAAS,CACP4I,SAAUA,CAAC,CAAEC,MAAOH,KAAMD,IAAAA,KAAY,CACpCK,QAAU,GAAEzM,SAASwE,WAAWgI,MAAMJ,IAAI,CAAC,EAAEM,UAAY,CAAA,IAAGpJ,WAAWkJ,MAAMH,IAAI,CAAC,CAAE,EAAA,EAExF,CAAA,EAEF,CACE3Q,KAAM,OACN0Q,KAAM,YACNC,KAAM,UACNC,MAAO,UACP3I,QAAS,CACP4I,SAAUA,CAAC,CAAEC,MAAOH,KAAMD,IAAAA,KAAY,CACpCK,QAAU,GAAEzM,SAASwE,WAAWgI,MAAMJ,IAAI,CAAC,EAAEM,UAAY,CAAA,IAAGpJ,WAAWkJ,MAAMH,IAAI,CAAC,CAAE,EAAA,EAExF,CAAA,CACD,EAEF,CAAE,CAAA,EAECM,QAAmC7I,aAAAA,QACvC,IAAO,QAAA,OACL8I,MAAO,kBACPpG,MAAO,CACLqG,KAAO,GAAEjR,KAAKA,KAAKyK,OAAS,EAAI4R,SAAS,EAAE1c,KAAK4I,SAASvB,SAAS,CAAE,qBAAoBE,kBACrFlH,QAAKA,KAAKyK,OAAS,EAAI4R,SAAS,IAAhCrc,eAAmCc,SAAU,CAChD,CAAE,EACJ,EACAd,KACAkR,KAAM,CACJ,CACEpR,KAAM,OACNqR,SAAU,SACVC,MAAO,CACL3J,OAAQ,IACV,CAAA,EAEF,CACE3H,KAAM,SACNqR,SAAU,OACVmL,KAAM,EAAA,CACP,EAEHhM,MAEF,GAAA,CAACtQ,KAAMsQ,OAAQ+L,SAAS,CAC1B,EACO,OAAA,IAAC,eAAc,OAAoB,CAAA,CAC5C,EA7D2BhM,eCGdkM,aAA2C,CACtD,CACElU,WAAY,OACZgB,MAAO,OACPlF,KAAM,OACNmE,eAAiBhE,GAAMA,QAAAA,YAAE1E,QAAF0E,eAASiE,SAASvB,YACzCwB,YAAoBlE,WAAAA,YAAEtE,OAAFsE,eAAQ3E,MAC5BoJ,aAAezE,GAA8C,CACrDkY,MAAAA,WAAa1V,iBAAmB8C,EAAAA,KACtC,OACG,KAAAiE,QAAA,CAAM,UAAW,MAAO,WAAY,SAClCvJ,SAAAA,CAAEoR,EAAAA,eAAe,IACjBpR,EAAE1E,OAAS0E,EAAE1E,MAAQkH,iBACpB,GAAA,IAAC,QAAQ,CAAA,MAAM,eACb,SAAA,IAAC6O,YAAW,CAAA,UAAU,QAAQ,CAAA,EAChC,EAEDrR,EAAE1E,OACD0E,EAAE1E,MAAM8a,OACNtW,SAAS4F,WAAW,CAClBC,IAAK,EACLC,MAAO,EACPN,KAAM4S,UACP,CAAA,CACH,GACE,IAAC,SACC,MAAQ,iBAAgB1V,iBAAiB,EAAEyB,SAASvB,SAAS,CAAE,MAAKF,iBAAAA,EAAmBoR,IAAI,CAAEjO,IAAK,EAAGC,MAAO,CAAG,CAAA,EAAEqQ,KAAK,CAAE/Q,MAAO,CAAG,CAAA,EAAEjB,SAASvB,SAAS,CAAE,IAExJ,SAAC,IAAAyV,YAAA,CAAe,UAAU,QAAA,CAAQ,CACpC,CAAA,CAEN,CAAA,CAAA,CAEJ,CACF,EACA,CACE3c,KAAM,gBACNuI,WAAY,SACZgB,MAAO,SACPb,YAAoBlE,WAAAA,YAAEtE,OAAFsE,eAAQxD,QAC5BiI,aAAezE,GACNA,EAAE1E,OAAU,IAAA,KAAA,CAAK,MAAO0E,EAAE1E,MAAO,UAAU,MAAS,CAAA,CAE/D,EACA,CACEyJ,MAAO,WACPvJ,KAAM,gBACNuI,WAAY,UACZG,YAAoBlE,WAAAA,YAAEtE,OAAFsE,eAAQ2X,SAC5BlT,aAAezE,GACNA,EAAE1E,OAAU,IAAA,KAAA,CAAK,MAAO0E,EAAE1E,MAAO,UAAU,MAAS,CAAA,CAE/D,EACA,CACEyJ,MAAO,cACPvJ,KAAM,gBACNuI,WAAY,UACZG,YAAoBlE,WAAAA,YAAEtE,OAAFsE,eAAQ4X,QAC5BnT,aAAezE,GACNA,EAAE1E,OAAS,IAAC,QAAQ,CAAA,MAAO0E,EAAE1E,KAAS,CAAA,EAE/CuL,SAAU,EACZ,CAAC,ECpEUuR,YAAcA,WAAM,CACzBP,MAAAA,SAAWrV,mBAAmB8C,KAAO,EACrC5J,KAAOqb,oBAAoBc,QAAQ,EAEzC,OACG,IAAArN,MAAA,CAAI,OAAQ,OAAQ,MAAO,OAC1B,SAAA,IAAC,OACC,CAAA,GAAG,qBACH,QAAS9O,KACT,WAAYuc,aACZ,iBAAkB,CAAEzc,KAAM,cAAA,EAC1B,iBAAmB6c,GAAMA,EAAEnQ,IAAIC,mBAAmB,CAEtD,CAAA,CAEJ,EAf2BiQ,eCCdE,gBAAkBA,WAAM,CACnC,MAAMC,UAAY/V,mBACZ,CAAC8C,MAAMkT,OAAO,EAAI9W,aAAAA,SAAS6W,UAAUjT,IAAI,EAG7C,OAAA,KAAC,IAAI,CAAA,QAAQ,OAAO,cAAc,MAAM,OAAO,OAAO,MAAO,OAAQ,IAAK,EACxE,SAAA,CAAA,IAAC,IAAI,CAAA,KAAK,WAAW,OAAQ,OAAQ,SAAU,OAC7C,SAAA,IAAC,aAAa,CAAA,SAAUkT,QAAS,KAAAlT,KAAW,CAAA,EAC9C,EACC,IAAA,IAAA,CAAI,KAAK,WAAW,SAAU,OAC7B,SAAC,KAAA,MAAA,CAAM,QAAS,EAAG,OAAQ,OAAQ,MAAO,OACxC,SAAA,CAAC,IAAA,YAAA,CAAY,UAAWA,KAAK,CAAA,MAC5B,YAAW,EAAA,CAAA,CAAA,CACd,CACF,CAAA,CACF,CAAA,CAAA,CAEJ,EAjB+BgT,mBCDlBG,aAAe,QAAKC,SAAkBC,YAAiB,CAClE,MAAMjd,KAAO+C,KAAKI,UAAU8Z,UAAW,KAAM,CAAC,EACxCC,KAAOC,SAASC,cAAc,GAAG,EACvCF,KAAKG,SAAWL,SAChB,MAAMM,KAAO,IAAIC,KAAK,CAACvd,IAAI,EAAG,CAAEF,KAAM,kBAAA,CAAoB,EAC1Dod,KAAKM,KAAOC,OAAOC,IAAIC,gBAAgBL,IAAI,EAC3CJ,KAAKU,MAAM,CACb,EAP4B,gBASfC,UAAYA,WAAM,CACvBZ,MAAAA,UAAYpR,SAASxI,KAAK,EAKzBya,OAJUC,aAAAA,YAAY,IAAM,CACjChB,aAAc,kBAAiBjW,mBAAmByB,SAASvB,SAAS,CAAE,QAAQiW,SAAS,CAAA,EACtF,CAACA,SAAS,CAAC,CAGhB,EAPyBY,aCVzB,SAASG,WAAWC,YAAqB,CAChC,OAAA,IAAIC,QAA2B,SAAA,CAC9BC,MAAAA,MAAQhB,SAASC,cAAc,OAAO,EAC5Ce,MAAMre,KAAO,OACbqe,MAAMC,SAAW,GACjBD,MAAME,OAASJ,YAEfE,MAAMG,SAAW,IAAM,CACrB,MAAMC,MAAQ9C,MAAM+C,KAAKL,MAAMI,OAAS,CAAA,CAAE,EAClCA,QAAAA,MAAM,CAAC,CAAC,CAAA,EAGlBJ,MAAMP,MAAM,CAAA,CACb,CACH,CAdSI,gCAgBF,MAAMS,UAAYA,WAChBV,yBAAY,IACV,IAAIG,QAAc,CAACQ,QAASC,SAAW,CACjC,WAAA,kBAAkB,EAAEC,KAAe,MAAA,CACtCC,MAAAA,OAAS,IAAIC,WACnBD,OAAOE,cAAcC,IAAI,EACzBH,OAAOI,OAA0B,aAAA,WAC/B,MAAMpO,SAAUqO,mBAAYzY,SAAZyY,eAAoBC,SAApBD,eAA4Bhb,WAC5C,GAAI2M,QAAS,CACL7Q,MAAAA,KAAO+C,KAAKd,MAAMwb,OAAO2B,KAAKvO,QAAQwO,MAAM,GAAG,EAAE,CAAC,CAAC,CAAC,EAE1D,GADmBxd,iBAAemB,UAAUhD,IAAI,EACjCiD,QACPY,MAAAA,SAAS,IAAM7D,IAAI,EACjB,cAEJ,IAAA,CACF8B,UAAU9B,IAAI,EACR6D,MAAAA,SAAS,IAAM7D,IAAI,EACjB,gBACDoD,IAAK,CACJd,QAAAA,IAAI,QAASc,GAAG,EAChBd,QAAAA,IAAI,eAAgBtC,IAAI,EAChC2e,OAAOvb,GAAG,CACZ,CAEJ,CAAA,CACF,CACD,CAAA,CACF,EACA,CAAE,CAAA,EA7BkBqb,aClBZa,kBAAoBA,WAAM,CAC/B3c,MAAAA,YAAcE,aAAaC,QAAQ,eAAe,EACxD,OAAOoF,qBAAQ,IAAM,CACnB,GAAI,CAACvF,YACI,MAAA,CAAE4c,SAAU,EAAA,EAEfC,MAAAA,gBAAkBzc,KAAKd,MAAMU,WAAW,EACxC8c,UAAY5d,iBAAemB,UAAUwc,eAAe,EACnD,MAAA,CACLD,SAAU,CAAC,CAAC5c,YACZA,YAAa6c,gBACbE,WAAY/c,aAAe,CAAC8c,UAAUxc,QAAUwc,UAAUtZ,MAAQI,OAClEoZ,WAAYA,IAAM,CAChB9c,aAAa+c,WAAW,eAAe,CACzC,CAAA,CACF,EACC,CAACjd,WAAW,CAAC,CAClB,EAjBiC2c,qBCCpBO,mBAAqBA,QAACC,WAAiClgB,QAAkB,CACpFyD,MAAMQ,SAAmB,MAChBC,OAAOC,KAAgB,MAAA,CACvBhD,KAAAA,gBAAgB+e,UAAU,EAAIlgB,KAAAA,CACpC,CACF,CACH,EANkCigB,sBCSrBE,YAAcA,OAACna,OAA4B,CAChD,KAAA,CAAEka,WAAY1O,MAAO+C,QAAU,MAAWvO,EAAAA,MAC1C,CAACO,MAAOC,QAAQ,EAAIJ,sBAAS,EAAK,EAClCga,UAAY7L,UAAY,UAExBmK,SAAWP,yBACdI,OAAkB,CACjB,IAAIve,OAAQ,CAACue,MACP8B,MAAAA,MAAQC,OAAOC,MAAMvgB,MAAK,EAChCwG,SAAS6Z,KAAK,EACVA,SAIAD,YACFpgB,QAAS,KAGXigB,mBAAmBC,WAAYlgB,MAAK,EAAA,EAEtC,CAACkgB,WAAYE,SAAS,CACxB,EAEMpgB,MAAQiM,SAASxI,SAAciB,EAAEvD,gBAAgB+e,UAAU,CAAC,EAC5Drd,aAAeud,UAAYpgB,MAAQ,IAAMA,MAE/C,OACG,IAAA,UAAA,CACC,MACA,QAAQ,WACR,WAAY,CACV2M,eAAiB,IAAA,eAAA,CAAe,SAAS,QAASyT,SAAAA,UAAY,IAAM,IAAI,CAE1E,EAAA,aAAcvd,aAAasL,QAAQiS,UAAY,EAAI,CAAC,EACpD,KAAK,UACL,MACA,SAAqB,OAAA,CACVrU,SAAAA,MAAMlF,OAAO7G,KAAK,CAE7B,CAAA,CAAA,CAEN,EAzC2BmgB,eCVdK,OAASA,WAElB,KAACvS,QAAM,CAAA,QAAS,EACd,SAAA,CAAA,IAAC,YAAY,CAAA,WAAW,kBAAkB,MAAM,sBAAqB,EACpE,IAAA,YAAA,CAAY,WAAW,iCAAiC,MAAM,uCAAsC,MACpG,YAAY,CAAA,WAAW,uBAAuB,MAAM,yBAAyB,QAAQ,UAAS,EAC/F,KAACA,SAAM,UAAW,MAAO,QAAS,EAAG,MAAO,OAAQ,GAAI,CAAE,QAAS,CAAEkI,KAAM,CAAE,CAC3E,EAAA,SAAA,CAAA,IAAC,YAAY,CAAA,WAAW,sBAAsB,MAAM,4BAA2B,MAC9E,YAAY,CAAA,WAAW,wBAAwB,MAAM,sBAAsB,QAAQ,UAAS,CAAA,EAC/F,EACA,KAAClI,SAAM,UAAW,MAAO,QAAS,EAAG,MAAO,OAAQ,GAAI,CAAE,QAAS,CAAEkI,KAAM,CAAE,CAC3E,EAAA,SAAA,CAAA,IAAC,YAAY,CAAA,WAAW,mCAAmC,MAAM,kCAAiC,MACjG,YAAY,CAAA,WAAW,8BAA8B,MAAM,4BAA4B,QAAQ,UAAS,CAAA,EAC3G,CACF,CAAA,CAAA,EAdkBqK,UCYtB,SAAwBC,kBAAkBza,MAA+B,CACjE,KAAA,CAAEE,KAAMK,MAAOO,QAAad,EAAAA,MAElC,qBAEI,SAAC,KAAA,OAAA,CAAO,KAAM,CAAC,CAACE,KACd,SAAA,CAAC,IAAA,YAAA,CAAY,GAAG,qBAAsB,SAAqB,qBAAA,EAC1D,IAAA,cAAA,CACC,SAAC,IAAA,kBAAA,CAAkB,GAAG,2BACpB,SAAC,IAAA,IAAA,CAAI,UAAW,IAAK,SAAU,OAC7B,cAAC,MACC,CAAA,SAAA,CAAC,IAAA,UAAA,CACC,cAAC,SACC,CAAA,SAAA,CAAA,IAAC,WAAU,SAAa,eAAA,CAAA,EACxB,IAAC,WAAU,SAAI,MAAA,CAAA,CAAA,CAAA,CACjB,CACF,CAAA,MACC,UACEK,CAAAA,SAAAA,yBAAOqI,OAAO3E,IAAI,CAACvF,EAAGa,WAElB,SACC,CAAA,SAAA,CAAC,IAAA,UAAA,CAAWb,WAAEgc,OAAQ,CAAA,MACrB,UAAWhc,CAAAA,SAAAA,EAAEmK,KAAKtG,KAAK,GAAG,EAAE,CAAA,CAAA,EAFhBhD,GAGf,GAGN,CAAA,EACF,CAAA,CACF,CACF,CAAA,EACF,EACA,IAAC,eAAeuB,SAAS,CAAA,CAC3B,CAAA,CACF,CAAA,CAEJ,CAnCwB2Z,8CCGjB,MAAME,IAAMA,WAAM,CACvB,KAAM,CAACC,IAAKC,MAAM,EAAIza,sBAAiB,QAAQ,EACzC8X,SAAWD,YACX6C,SAAWjC,YACX,CAAEc,SAAUG,WAAYC,WAAYhd,aAAgB2c,kBAAkB,EACtE,CAACnZ,MAAOC,QAAQ,EAAIJ,sBAAS0Z,UAAU,EACvC,CAAC7U,OAAQC,SAAS,EAAI9E,sBAASuZ,QAAQ,EAEvC,CAACoB,eAAgBC,iBAAiB,EAAI5a,sBAAS,EAAK,EAE1D,OAEI,KAAA,SAAA,CAAA,SAAA,CAAC,IAAA,MAAA,CAAM,KAAM2a,eAAgB,QAAS,IAAMC,kBAAkB,EAAK,EACjE,SAAC,IAAA,MAAA,CACC,GAAI,CACF1X,QAAS,EACTE,MAAO,IACPyX,IAAK,MACLC,KAAM,MACNC,UAAW,wBACX5P,SAAU,UAAA,EAGZ,SAAA,KAAC,MAAM,CAAA,QAAS,EACd,SAAA,CAAC,KAAA,IAAA,CAAI,QAAS,OACZ,SAAA,CAAC,IAAA,WAAA,CAAW,QAAQ,KAAK,SAAa,gBAAA,EACtC,IAAC,YAAW,GAAI,CAAE9E,WAAY,MAAA,EAAU,QAAS,IAAMuU,kBAAkB,EAAK,EAC5E,SAAA,IAACI,aAAS,CAAA,EACZ,CAAA,EACF,MACC,OAAM,EAAA,CAAA,CACT,CAAA,CACF,CAAA,EACF,EACC,KAAA,kBAAA,CAAkB,KAAMnW,OAAQ,MAC9B0U,SAAAA,CAAAA,UAEG,KAAA,SAAA,CAAA,SAAA,CAAA,IAAC,OACC,CAAA,MAAM,QACN,QAAS,IAAM,CACbzU,UAAU,EAAK,EACF,+BACF,YAAA,EACX,SAGJ,QAAA,EACA,IAAC,OACC,CAAA,QAAS,IAAM,CACbiS,aAAc,+BAA8BjW,mBAAmByB,SAASvB,SAAS,CAAE,QAAQrE,WAAW,CAAA,EACtG,SAGJ,gBAAA,EAEA,IAAC,OACC,CAAA,QAAS,IAAM,CACbmI,UAAU,EAAK,EACF,8BAAA,EACb,SAGJ,SAAA,CAAA,EACF,EAED,CAACyU,UACC,IAAA,OAAA,CACC,QAAS,IAAM,CACbzU,UAAU,EAAK,CAAA,EACf,SAGJ,SAAA,CAAA,EAEJ,OACC,IAAI,CAAA,QAAS,OAAQ,cAAe,SAAU,OAAO,OACpD,SAAA,CAAA,IAAC,KAAI,KAAK,WACR,SAAC,KAAA,MAAA,CAAM,UAAU,MACf,SAAA,CAAC,KAAA,KAAA,CAAK,MAAO0V,IAAK,SAAU,CAACpR,EAAGxP,QAAU6gB,OAAO7gB,KAAK,EACpD,SAAA,CAAA,IAAC,IAAI,CAAA,MAAM,SAAS,MAAM,eAAc,EACvC,IAAA,IAAA,CAAI,MAAM,mBAAmB,MAAM,mBAAkB,EACrD,IAAA,IAAA,CAAI,MAAM,mBAAmB,MAAM,mBAAkB,CAAA,EACxD,OACC,IAAI,CAAA,WAAY,OAAQ,IAAK,EAAG,QAAS,OACxC,SAAA,CAAC,IAAA,OAAA,CAAO,QAAS,IAAMghB,kBAAkB,EAAI,EAC3C,SAAA,IAACnV,cAAY,CACf,CAAA,MACC,OACC,CAAA,QAAS,IACPiV,WAAWO,MAAe,KAAA,CACxBnW,UAAU,EAAI,EACd1E,SAAShD,GAAG,CAAA,CACb,EACF,SAGH,SAAA,EACC,IAAA,OAAA,CAAO,QAAS0a,SAAU,SAAM,SAAA,EACjC,IAAC,eAAc,MAAM,mBAAmB,UAAW/Y,WACjD,SAAA,KAAC,OAAO,CAAA,MAAM,QACZ,SAAA,CAAA,IAACmc,UAAa,EAAA,EAAA,OAAA,CAAA,CAEhB,CACF,CAAA,CAAA,EACF,CAAA,CAAA,CACF,CACF,CAAA,EACA,KAAC,IAAI,CAAA,KAAK,WAAW,QAAS,EAAG,OAAQ,OAAQ,MAAO,OAAQ,SAAS,SACtEV,SAAAA,CAAQ,MAAA,cAAa,UAAY,CAAA,CAAA,EACjCA,MAAQ,oBAAsB,IAAC,gBAAkB,CAAA,CAAA,EACjDA,MAAQ,oBAAsB,IAAC,gBAAkB,CAAA,CAAA,CAAA,EACpD,CAAA,EACF,CACF,CAAA,CAAA,CAEJ,EAnHmBD,OChBInc,SAAS4F,WAAW,CAAEE,MAAO,GAAID,IAAK,EAAGL,KAAM,IAAK,CAAC,ECI/DuX,MAAAA,gBAAkBA,QAACvX,MAAcxJ,mBAAqC,CACjF,MAAMC,WAAaD,iBAAgBC,WAE7B+gB,cADM/gB,WAAWC,SAASwT,OAAc1P,GAAAA,SAASC,QAAQC,EAAE3E,IAAI,EAAEiK,KAAOA,MAAO,CAAC,EAC5DqN,GAAG,EAAE,GAAK5W,WAAWC,SAAS2W,GAAG,EAAE,EAC7D,GAAI,CAACmK,cACI,MAAA,GAGHC,MAAAA,gBAAkB1K,KAAK5E,IAAInI,MAAOxF,SAASC,QAAQ+c,cAAczhB,IAAI,EAAEiK,KAAM,CAAC,EAC7E+M,OAAAA,KAAK2K,IAAIjhB,WAAWQ,iBAAiB4J,OAAQ4W,eAAe,EAAIhhB,WAAWK,aAAa+J,MACjG,EAV+B0W,mBCEzBI,YAAcza,iBAAmB8C,EAAAA,KACjC0L,SAAW,IAAM,CACflV,MAAAA,iBAAkBiD,MAAMI,MAAMrD,gBACpC,QAASoK,EAAI+W,YAAa/W,GAAK+W,YAAc,GAAI/W,IAC/C,GAAI2W,gBAAgB3W,EAAGpK,gBAAe,EAAI,KACxC,OAAOuW,KAAK5E,IAAIwP,YAAa/W,EAAI,CAAC,EAGtC,OAAO+W,YAAc,EACvB,KAEMC,OAAS,IAAIC,OAAO,IAAA,IAAA,4CAAA,YAAA,GAAA,EAAuC,CAAE3hB,KAAM,QAAS,CAAC,EACnF0hB,OAAOE,UAAa/V,OAAiE,CAC7EgW,MAAAA,UAAYhW,MAAM3L,KAAK4J,OAAS0L,QAEtCH,cAActR,SAAmB,MACxBC,OAAOC,KAAa,GAAA,CACzBO,EAAEkR,UAAU7J,MAAM3L,KAAK4J,IAAI,EAAI+B,MAAM3L,KAAKwV,UAC1ClR,EAAE+Q,QAAUsM,UACZrd,EAAEgR,QAAUqB,KAAK5E,IAAIpG,MAAM3L,KAAK4J,KAAMtF,EAAEgR,OAAO,EAC/ChR,EAAEiR,QAAUoB,KAAKzI,IAAIvC,MAAM3L,KAAK4J,KAAMtF,EAAEiR,OAAO,CAAA,CAChD,CACF,CACH,EAEA,MAAMqM,iBAAmBA,WAAM,QACvBxhB,MAAAA,iBAAkBiD,MAAMI,MAAMrD,gBAC9ByhB,OAAQzhB,GAAAA,iBAAgBC,WAAWC,SAAS,CAAC,IAArCF,eAAwCT,KAEhDmiB,YADOD,MAAQzd,SAASC,QAAQwd,KAAK,EAAI/a,oBACvB8C,KACxB4X,OAAOO,YAAY,CAAEnY,KAAM,KAAMxJ,gBAAAA,gBAAAA,CAAiB,EAClD,QAASoK,EAAIsX,WAAYtX,EAAI+W,YAAa/W,IACxCgX,OAAOO,YAAY,CAAEnY,KAAMY,EAAGpK,gBAAAA,gBAAAA,CAAiB,EAEjD,QAASoK,EAAI+W,YAAa/W,GAAK8K,QAAS9K,IACtCgX,OAAOO,YAAY,CAAEnY,KAAMY,EAAGpK,gBAAAA,gBAAAA,CAAiB,CAEnD,EAZyBwhB,oBAazBA,mBAEA,IAAII,qBAAuB3e,MAAMI,MAAMrD,gBACvCiD,MAAME,UAAU,IAAM,CAChBye,uBAAyB3e,MAAMI,MAAMrD,kBAGzC+U,cAActR,SAAS,KAAO,CAAEwR,QAAS,GAAOG,UAAW,CAAC,EAAGF,QAASiM,YAAahM,QAASgM,WAAc,EAAA,EAC5GS,qBAAuB3e,MAAMI,MAAMrD,gBAClB,mBACnB,CAAC,EC5CD,MAAM6hB,UAAYC,YAAY,CAC5BC,QAAS,CACPC,KAAM,MACR,CACF,CAAC,EAEDC,OAASC,WAAWnF,SAASoF,eAAe,MAAM,CAAE,EAAEC,OACnD,IAAA,MAAM,WAAN,CACC,SAAC,IAAA,cAAA,CACC,eAA2B,OAGrB,KAAA,SAAA,CAAA,SAAA,CAAA,IAAC,OAAI,MAAO,CAAEhR,gBAAiB,MAAO,EAAI5L,SAAMO,MAAAA,MAAMma,OAAQ,CAAA,EAC9D,IAAC,OAAI,MAAO,CAAE9O,gBAAiB,MAAO,EAAI5L,SAAMO,MAAAA,MAAMsc,UAAW,CAAA,CACnE,CAAA,CAAA,EAIJ,aAAC,qBAAqB,CAAA,YAAaC,aACjC,SAAC,KAAA,cAAA,CAAc,MAAOT,UACpB,SAAA,CAAA,IAAC,YAAW,EAAA,MACX,IAAG,EAAA,CAAA,CACN,CAAA,CACF,CAAA,EACF,CAAA,CACF,CACF"}