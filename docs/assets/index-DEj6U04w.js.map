{"version":3,"file":"index-DEj6U04w.js","sources":["../../src/shared/utility/sort-by-date.ts","../../src/shared/models/account-data.ts","../../src/shared/models/account.ts","../../src/shared/models/loan.ts","../../src/shared/models/mortgage.ts","../../src/shared/models/net-wealth.ts","../../src/shared/models/projected-income.ts","../../src/shared/models/projected-wealth.ts","../../src/shared/models/store.ts","../../src/shared/store/store.ts","../../src/shared/store/add-account-entry.ts","../../src/shared/store/add-projected-income.ts","../../src/shared/store/remove-account.ts","../../src/shared/store/remove-account-entry.ts","../../src/shared/store/remove-projected-income.ts","../../src/shared/store/reset-store.ts","../../src/shared/store/set-loan.ts","../../src/shared/store/update-account-date.ts","../../src/shared/store/update-account-name.ts","../../src/shared/store/update-account-value.ts","../../src/shared/store/update-projected-income.ts","../../src/capabilities/net-wealth/components/new-account/new-account.tsx","../../src/shared/components/ag-grid/ag-grid.tsx","../../src/shared/utility/current-date.ts","../../src/shared/utility/format-date.ts","../../src/capabilities/net-wealth/components/tab-types/components/delete-account.tsx","../../src/capabilities/net-wealth/components/tab-types/components/update-account.tsx","../../src/shared/utility/format-cash.ts","../../src/capabilities/net-wealth/components/tab-types/account/column-config.tsx","../../src/capabilities/net-wealth/components/tab-types/account/hooks/useMissingYears.ts","../../src/capabilities/net-wealth/components/tab-types/account/account.tsx","../../src/shared/utility/find-nearest-on-or-before.ts","../../src/shared/utility/get-graph-dates.ts","../../src/shared/utility/mortgage-calc.ts","../../src/capabilities/net-wealth/components/tab-types/mortgage/add-entry.tsx","../../src/shared/utility/group-by.ts","../../src/capabilities/net-wealth/components/tab-types/mortgage/add-loan.tsx","../../src/capabilities/net-wealth/components/tab-types/mortgage/column-config.tsx","../../src/capabilities/net-wealth/components/tab-types/mortgage/mortgage.tsx","../../src/capabilities/net-wealth/components/account-tabs/account-tabs.tsx","../../src/shared/utility/get-graph-value.ts","../../src/capabilities/net-wealth/components/wealth-chart/use-graph-data.ts","../../src/capabilities/net-wealth/components/wealth-chart/wealth-chart.tsx","../../src/capabilities/net-wealth/net-wealth.tsx","../../src/shared/hooks/use-dates.ts","../../src/shared/utility/find-same-year.ts","../../src/shared/utility/min-max-avg.ts","../../src/shared/utility/a-payday.ts","../../src/shared/utility/date-ranges-overlap.ts","../../src/shared/utility/get-pay-periods.ts","../../src/shared/hooks/use-most-frequent-value.ts","../../src/shared/hooks/use-projected-pay.ts","../../src/shared/hooks/use-base-income.ts","../../src/shared/hooks/use-company-bonus.ts","../../src/shared/hooks/use-merit-bonus.ts","../../src/shared/hooks/use-retirement-bonus.ts","../../src/shared/hooks/use-total-income.ts","../../src/shared/components/formatters/cash.tsx","../../src/shared/components/formatters/duration.tsx","../../src/shared/utility/format-percent.ts","../../src/shared/components/formatters/percent.tsx","../../src/capabilities/projected-income/components/value.tsx","../../src/capabilities/projected-income/components/bonus-outcome.tsx","../../src/shared/store/update-projected-income-date.ts","../../src/capabilities/projected-income/components/data-entry/column-config.tsx","../../src/capabilities/projected-income/components/data-entry/data-entry.tsx","../../src/shared/components/formatters/until.tsx","../../src/capabilities/projected-income/hooks/use-pay-check.ts","../../src/capabilities/projected-income/components/income-per-period.tsx","../../src/capabilities/projected-income/components/merit-increase.tsx","../../src/capabilities/projected-income/components/outcome.tsx","../../src/capabilities/projected-income/projected-income.tsx","../../src/shared/store/set-projected-wealth.ts","../../src/capabilities/projected-wealth/components/config/config-entry.tsx","../../src/capabilities/projected-wealth/components/config/config.tsx","../../src/capabilities/projected-wealth/hooks/use-future-bonuses.ts","../../src/capabilities/projected-wealth/hooks/use-payments.ts","../../src/capabilities/projected-wealth/hooks/use-future-medicare-tax.ts","../../src/capabilities/projected-wealth/hooks/use-future-retirement-contributions.ts","../../src/capabilities/projected-wealth/hooks/use-future-savings.ts","../../src/capabilities/projected-wealth/hooks/use-future-social-security.ts","../../src/shared/components/formatters/before-after.tsx","../../src/capabilities/projected-wealth/components/future-events/future-events.tsx","../../src/capabilities/projected-wealth/hooks/use-earliest-account-entry.ts","../../src/capabilities/projected-wealth/hooks/use-times-series-wealth.ts","../../src/capabilities/projected-wealth/components/wealth-chart.tsx","../../src/capabilities/projected-wealth/components/wealth-table/colum-config.tsx","../../src/capabilities/projected-wealth/components/wealth-table/wealth-table.tsx","../../src/capabilities/projected-wealth/projected-wealth.tsx","../../src/shared/components/safety-button/count-down.tsx","../../src/shared/components/safety-button/safety-button.tsx","../../src/shared/hooks/use-export.tsx","../../src/shared/hooks/use-import.tsx","../../src/shared/hooks/use-store-data-error.ts","../../src/app/invalid-data-dialog.tsx","../../src/app/app.tsx","../../src/main.tsx"],"sourcesContent":["import { DateTime } from \"luxon\";\n\nexport const sortByDate =\n  <T>(select: (data: T) => DateTime, direction: \"asc\" | \"desc\") =>\n  (a: T, b: T) =>\n    direction === \"asc\" ? select(a).toMillis() - select(b).toMillis() : select(b).toMillis() - select(a).toMillis();\n","import { z } from \"zod\";\n\nexport const accountDataValidator = z.object({\n  date: z.string(),\n  value: z.number(),\n  id: z.string(),\n});\n\nexport type AccountData = z.infer<typeof accountDataValidator>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const accountValidator = z.object({\n  type: z.literal(\"account\"),\n  data: z.array(accountDataValidator),\n});\n\nexport type Account = z.infer<typeof accountValidator>;\n","import { z } from \"zod\";\n\nexport const loanValidator = z.object({\n  principal: z.number(),\n  ratePct: z.number(),\n  paymentsPerYear: z.number(),\n  payment: z.number(),\n  firstPaymentDate: z.string(),\n  ownershipPct: z.number(),\n});\n\nexport type Loan = z.infer<typeof loanValidator>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\nimport { loanValidator } from \"./loan\";\n\nexport const mortgageValidator = z.object({\n  type: z.literal(\"mortgage\"),\n  loan: loanValidator.optional(),\n  data: z.array(accountDataValidator),\n});\n\nexport type Mortgage = z.infer<typeof mortgageValidator>;\n","import { z } from \"zod\";\nimport { accountValidator } from \"./account\";\nimport { mortgageValidator } from \"./mortgage\";\n\nexport const wealth = z.record(z.union([accountValidator, mortgageValidator]));\n\nexport type Wealth = z.infer<typeof wealth>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const projectedIncome = z.object({\n  timeSeries: z.object({\n    paycheck: z.array(accountDataValidator),\n    meritIncreasePct: z.array(accountDataValidator),\n    equityPct: z.array(accountDataValidator),\n    meritBonusPct: z.array(accountDataValidator),\n    meritBonus: z.array(accountDataValidator),\n    companyBonusPct: z.array(accountDataValidator),\n    companyBonus: z.array(accountDataValidator),\n    retirementBonus: z.array(accountDataValidator),\n  }),\n});\n\nexport type ProjectedIncome = z.infer<typeof projectedIncome>;\nexport type TimeSeries = keyof ProjectedIncome[\"timeSeries\"];\n","import { z } from \"zod\";\n\nexport const projectedWealth = z.object({\n  socialSecurityLimit: z.number(),\n  socialSecurityTaxRate: z.number(),\n  medicareSupplementalTaxThreshold: z.number(),\n  medicareSupplementalTaxRate: z.number(),\n  savingsPerMonth: z.number(),\n  retirementContributionPaycheck: z.number(),\n});\n\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\nexport type ProjectedWealthConfig = keyof ProjectedWealth;\n","import { z } from \"zod\";\nimport { wealth } from \"./net-wealth\";\nimport { projectedIncome } from \"./projected-income\";\nimport { projectedWealth } from \"./projected-wealth\";\n\nexport const getDefaultStore = (): Store => ({\n  projectedIncome: {\n    timeSeries: {\n      paycheck: [],\n      meritBonusPct: [],\n      companyBonusPct: [],\n      meritBonus: [],\n      companyBonus: [],\n      retirementBonus: [],\n      equityPct: [],\n      meritIncreasePct: [],\n    },\n  },\n  wealth: {},\n  projectedWealth: {\n    medicareSupplementalTaxThreshold: 200_000,\n    socialSecurityLimit: 168_600,\n    socialSecurityTaxRate: 0.062,\n    medicareSupplementalTaxRate: 0.009,\n    savingsPerMonth: 0,\n    retirementContributionPaycheck: 0,\n  },\n});\n\nexport const storeValidator = z.object({\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { Store as CreateStore } from \"@tanstack/store\";\nimport { ZodSchema } from \"zod\";\nimport { Store, getDefaultStore, storeValidator } from \"../models/store\";\n\nconst createStore = <T extends object>(validator: ZodSchema, defaultValue: T) => {\n  const key = \"store\";\n  const invalidData = \"store-invalid\";\n  const localData = localStorage.getItem(key);\n  const data = localData ? JSON.parse(localData) : defaultValue;\n  const parse = validator.safeParse(data);\n\n  //todo create migration process\n  if (!parse.success) {\n    console.log(\"zod error\", parse.error);\n    console.log(\"original\", data);\n    localStorage.setItem(invalidData, JSON.stringify(data));\n    localStorage.setItem(key, JSON.stringify(defaultValue));\n  }\n\n  const store = new CreateStore<T>(data);\n  store.subscribe(() => {\n    const current = localStorage.getItem(key);\n    current && localStorage.setItem(`${key}-previous`, current);\n    localStorage.setItem(key, JSON.stringify(store.state));\n  });\n\n  return store;\n};\n\nexport const store = createStore<Store>(storeValidator, getDefaultStore());\n","import { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { v4 as uuid } from \"uuid\";\nimport { Account } from \"../models/account\";\nimport { sortByDate } from \"../utility/sort-by-date\";\nimport { store } from \"./store\";\n\nexport const AddAccountEntry = (accountName: string, date: DateTime<true>, amount: number) => {\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      (next.wealth[accountName] as Account).data.push({\n        date: date.startOf(\"day\").toString(),\n        value: amount,\n        id: uuid(),\n      });\n      next.wealth[accountName].data.sort(sortByDate((x) => DateTime.fromISO(x.date), \"asc\"));\n    });\n  });\n};\n","import { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { TimeSeries } from \"shared/models/projected-income\";\nimport { sortByDate } from \"shared/utility/sort-by-date\";\nimport { v4 as uuid } from \"uuid\";\nimport { store } from \"./store\";\n\nexport const addProjectedIncome = (date: DateTime, timeSeries: TimeSeries, value: number) => {\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      next.projectedIncome.timeSeries[timeSeries] = next.projectedIncome.timeSeries[timeSeries]\n        .concat({\n          date: date.startOf(\"day\").toString(),\n          value,\n          id: uuid(),\n        })\n        .sort(sortByDate((x) => DateTime.fromISO(x.date), \"asc\"));\n    });\n  });\n};\n","import { create } from \"mutative\";\nimport { store } from \"./store\";\n\nexport const removeAccount = (accountName: string) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      delete next.wealth[accountName];\n    });\n  });\n","import { create } from \"mutative\";\nimport { store } from \"./store\";\n\nexport const removeAccountEntry = (accountName: string, id: string) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      const idxToRemove = next.wealth[accountName].data.findIndex((x) => x.id === id);\n      next.wealth[accountName].data.splice(idxToRemove, 1);\n      return next;\n    });\n  });\n","import { create } from \"mutative\";\nimport { TimeSeries } from \"shared/models/projected-income\";\nimport { store } from \".\";\n\nexport const removeProjectedIncome = (accountName: TimeSeries, id: string) => {\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      const idxToRemove = next.projectedIncome.timeSeries[accountName].findIndex((x) => x.id === id);\n      next.projectedIncome.timeSeries[accountName].splice(idxToRemove, 1);\n    });\n  });\n};\n","import { getDefaultStore } from \"shared/models/store\";\nimport { store } from \"./store\";\n\nexport const resetStore = () => store.setState(() => getDefaultStore());\n","import { create } from \"mutative\";\nimport { Loan } from \"shared/models/loan\";\nimport { Mortgage } from \"shared/models/mortgage\";\nimport { store } from \"./store\";\n\nexport const setLoan = (accountName: string, loan: Loan) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      if (next.wealth[accountName].type === \"mortgage\") {\n        (next.wealth[accountName] as Mortgage).loan = loan;\n      }\n    });\n  });\n","import { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { store } from \".\";\n\nexport const updateAccountDate = (accountName: string, id: string, date: DateTime) => {\n  store.setState((prev) => {\n    const next = create(prev, (next) => {\n      const account = next.wealth[accountName];\n      const idx = account?.data.findIndex((x) => x.id === id);\n      if (idx >= 0) {\n        account.data[idx].date = date.toISO()!;\n      }\n    });\n    return next;\n  });\n};\n","import { create } from \"mutative\";\nimport { store } from \"./store\";\n\nexport const updateAccountName = (currentAccountName: string, newAccountName: string) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      next.wealth[newAccountName] = next.wealth[currentAccountName];\n      delete next.wealth[currentAccountName];\n    });\n  });\n","import { create } from \"mutative\";\nimport { store } from \".\";\n\nexport const updateAccountValue = (accountName: string, id: string, value: number) => {\n  store.setState((prev) => {\n    const next = create(prev, (next) => {\n      const account = next.wealth[accountName];\n      const idx = account?.data.findIndex((x) => x.id === id);\n      if (idx >= 0) {\n        account.data[idx].value = value;\n      }\n    });\n    return next;\n  });\n};\n","import { create } from \"mutative\";\nimport { TimeSeries } from \"shared/models/projected-income\";\nimport { store } from \".\";\n\nexport const updateProjectedIncome = (timeSeries: TimeSeries, id: string, value: number) => {\n  store.setState((prev) => {\n    const next = create(prev, (next) => {\n      const account = next.projectedIncome.timeSeries[timeSeries];\n      const idx = account.findIndex((x) => x.id === id);\n      account[idx].value = value;\n    });\n    return next;\n  });\n};\n","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, MenuItem, Stack, TextField } from \"@mui/material\";\nimport { create } from \"mutative\";\nimport { ReactNode, forwardRef, useRef, useState } from \"react\";\nimport { AssetType } from \"shared/models/asset-types\";\nimport { store } from \"shared/store\";\n\nexport const NewAccount = forwardRef<HTMLButtonElement, { children?: ReactNode }>((props, ref) => {\n  const [open, setOpen] = useState(false);\n  const nameRef = useRef<HTMLInputElement>(null);\n  const [error, setError] = useState(false);\n  const [accountType, setAccountType] = useState<AssetType>();\n\n  return (\n    <>\n      <Button\n        ref={ref}\n        variant=\"outlined\"\n        onClick={() => {\n          setOpen(true);\n          setError(false);\n          setAccountType(undefined);\n        }}\n        sx={{ marginLeft: \"auto\" }}\n      >\n        add account\n      </Button>\n\n      <Dialog open={open} onClose={() => setOpen(false)}>\n        <DialogTitle>Add New Account</DialogTitle>\n        <DialogContent>\n          <Stack spacing={2} margin={2}>\n            <TextField\n              select\n              color={error ? \"error\" : \"primary\"}\n              onChange={(value) => {\n                setError(false);\n                setAccountType(value.target.value as AssetType);\n              }}\n              label=\"Type\"\n            >\n              <MenuItem value=\"mortgage\">Mortgage</MenuItem>\n              <MenuItem value=\"account\">Generic Account</MenuItem>\n            </TextField>\n\n            <TextField\n              placeholder=\"Name\"\n              onChange={() => {\n                setError(false);\n              }}\n              error={error}\n              inputRef={nameRef}\n            />\n          </Stack>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            disabled={error}\n            onClick={() => {\n              store.setState((prev) => {\n                return create(prev, (next) => {\n                  if (!nameRef.current?.value || !accountType || prev.wealth[nameRef.current.value]) {\n                    setError(true);\n                    return;\n                  }\n\n                  next.wealth[nameRef.current.value] = {\n                    type: accountType,\n                    data: [],\n                  };\n\n                  setOpen(false);\n                });\n              });\n            }}\n          >\n            Add\n          </Button>\n        </DialogActions>\n      </Dialog>\n      {props?.children}\n    </>\n  );\n});\n","import { AgGridReact, AgGridReactProps } from \"ag-grid-react\";\n\nexport const AgGrid = (props: AgGridReactProps & { id: string }) => {\n  const { id, ...rest } = props;\n  return (\n    <div id={id} className=\"ag-theme-quartz-dark\" style={{ height: \"100%\" }}>\n      <AgGridReact {...rest} />\n    </div>\n  );\n};\n","import { DateTime } from \"luxon\";\n\nexport const getLocalDateTime = () => DateTime.local();\n","export const shortDate = \"yyyy-MM-dd\";\n\nexport const monthDay = \"MMM dd\";\n","import { Button, Paper } from \"@mui/material\";\nimport { removeAccount } from \"shared/store\";\n\nexport const DeleteAccount = (props: { accountName: string }) => {\n  const { accountName } = props;\n\n  return (\n    <Paper elevation={3} sx={{ padding: 2, width: \"100%\" }}>\n      <Button\n        onClick={() => {\n          removeAccount(accountName);\n        }}\n        color=\"error\"\n      >\n        Delete Account\n      </Button>\n    </Paper>\n  );\n};\n","import { Button, Paper, Stack, TextField } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { updateAccountName } from \"shared/store/update-account-name\";\n\nexport const RenameAccount = (props: { accountName: string }) => {\n  const { accountName } = props;\n  const [nextAccountName, setNextAccountName] = useState<string>(accountName);\n\n  return (\n    <Paper elevation={3} sx={{ padding: 2 }}>\n      <Stack spacing={1}>\n        <TextField\n          label=\"Account Name\"\n          value={nextAccountName}\n          onChange={(event) => setNextAccountName(event.target.value)}\n          placeholder=\"\"\n        />\n        <Button\n          disabled={!nextAccountName}\n          onClick={() => {\n            updateAccountName(accountName, nextAccountName);\n          }}\n        >\n          Update Name\n        </Button>\n      </Stack>\n    </Paper>\n  );\n};\n","export const formatCashShort = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  notation: \"compact\",\n  maximumFractionDigits: 0,\n}).format;\n\nexport const formatCash = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  maximumFractionDigits: 0,\n}).format;\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\nimport { Button } from \"@mui/material\";\nimport { ColDef } from \"ag-grid-community\";\nimport { CustomCellRendererProps } from \"ag-grid-react\";\nimport { DateTime } from \"luxon\";\nimport { AccountData } from \"shared/models/account-data\";\nimport { updateAccountDate, updateAccountValue } from \"shared/store\";\nimport { removeAccountEntry } from \"shared/store/remove-account-entry\";\nimport { formatCashShort } from \"shared/utility/format-cash\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const createAccountColumnConfig = (accountName: string): ColDef<AccountData>[] => [\n  {\n    headerName: \"Date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\n    cellEditor: \"agDateCellEditor\",\n    editable: true,\n    valueSetter: (x) => {\n      updateAccountDate(accountName, x.data.id, DateTime.fromJSDate(x.newValue));\n      return true;\n    },\n  },\n  {\n    headerName: \"Value\",\n    valueGetter: (x) => x.data?.value,\n    valueFormatter: (x) => formatCashShort(x.value),\n    valueSetter: (x) => {\n      updateAccountValue(accountName, x.data.id, +x.newValue);\n      return true;\n    },\n    editable: true,\n    cellEditor: \"agNumberCellEditor\",\n    type: \"numericColumn\",\n  },\n  {\n    headerName: \"Actions\",\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\n      return (\n        <Button\n          onClick={() => {\n            props.data && removeAccountEntry(accountName, props.data.id);\n          }}\n          color=\"error\"\n        >\n          <DeleteForeverIcon />\n        </Button>\n      );\n    },\n  },\n];\n","import { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { Account } from \"shared/models/account\";\n\nexport const useMissingYears = (account: Account) => {\n  return useMemo(() => {\n    const years = Object.entries(Object.groupBy(account.data, (x) => DateTime.fromISO(x.date).year))\n      .map(\n        ([year, entries]) =>\n          [\n            +year,\n            !!entries?.find((x) => {\n              const date = DateTime.fromISO(x.date);\n              const janFirst = DateTime.fromObject({\n                day: 1,\n                month: 1,\n                year: +year,\n              });\n              return date.diff(janFirst, [\"days\", \"hours\"]).days == 0;\n            }),\n          ] as [number, boolean],\n      )\n      .sort(([a], [b]) => {\n        return a - b;\n      });\n\n    const lookup = Object.fromEntries(years);\n    const missing = [];\n    for (let i = years[0]?.[0] ?? 0; i <= years[years.length - 1]?.[0]; i++) {\n      if (!lookup[i]) {\n        missing.push(i);\n      }\n    }\n    return missing;\n  }, [account.data]);\n};\n","import { Alert, Button, InputAdornment, Paper, Stack, TextField } from \"@mui/material\";\nimport Grid from \"@mui/system/Unstable_Grid\";\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo, useRef, useState } from \"react\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { Account } from \"shared/models/account\";\nimport { AddAccountEntry, store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { DeleteAccount } from \"../components/delete-account\";\nimport { RenameAccount } from \"../components/update-account\";\nimport { createAccountColumnConfig } from \"./column-config\";\nimport { useMissingYears } from \"./hooks/useMissingYears\";\n\nexport const AccountTab = (props: { accountName: string }) => {\n  const { accountName } = props;\n  const account = useStore(store, (state) => state.wealth[accountName]) as Account;\n  const [date, setDate] = useState(getLocalDateTime());\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const missingYears = useMissingYears(account);\n  const hasSameDate = useMemo(() => {\n    return !!account?.data?.find((x) => date.hasSame(DateTime.fromISO(x.date), \"day\"));\n  }, [account?.data, date]);\n\n  const onAddEntry = () => {\n    inputRef.current && AddAccountEntry(accountName, date, +inputRef.current?.value);\n  };\n\n  const accountColumnConfig = useMemo(() => {\n    return createAccountColumnConfig(accountName);\n  }, [accountName]);\n\n  return (\n    <Grid container height=\"100%\" width={\"100%\"} padding={1} spacing={2}>\n      <Grid xl={3} lg={4}>\n        <AgGrid\n          reactiveCustomComponents\n          rowData={account?.data ?? []}\n          columnDefs={accountColumnConfig}\n          id={account + \"-history\"}\n          autoSizeStrategy={{ type: \"fitGridWidth\" }}\n          stopEditingWhenCellsLoseFocus\n        />\n      </Grid>\n      <Grid xl={9} lg={8}>\n        <div>\n          <Grid container spacing={2}>\n            {missingYears.length > 0 && (\n              <Grid xs={12}>\n                <Paper elevation={3}>\n                  <Alert severity=\"warning\">Ensure an entry for Jan 1st for each year {missingYears.join(\", \")}</Alert>\n                </Paper>\n              </Grid>\n            )}\n            <Grid xl={2} lg={3}>\n              <Paper elevation={3} sx={{ padding: 2 }}>\n                <Stack spacing={1}>\n                  <DatePicker\n                    format={shortDate}\n                    sx={{ color: \"white\" }}\n                    label=\"Date\"\n                    defaultValue={date}\n                    onChange={(value) => value && setDate(value)}\n                  />\n                  <TextField\n                    label=\"amount\"\n                    type=\"number\"\n                    defaultValue={0}\n                    inputRef={inputRef}\n                    InputProps={{\n                      startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n                    }}\n                    placeholder=\"0\"\n                  />\n                  <Button disabled={!date || hasSameDate} onClick={onAddEntry}>\n                    Add Entry\n                  </Button>\n                </Stack>\n              </Paper>\n            </Grid>\n            <Grid xl={8} lg={0}></Grid>\n            <Grid xl={2} lg={4}>\n              <Stack spacing={2}>\n                <DeleteAccount accountName={accountName} />\n                <RenameAccount key={accountName} accountName={accountName} />\n              </Stack>\n            </Grid>\n          </Grid>\n        </div>\n      </Grid>\n    </Grid>\n  );\n};\n","import { DateTime } from \"luxon\";\nimport { AccountData } from \"shared/models/account-data\";\n\nexport const findNearestOnOrBefore = (date: DateTime, data: AccountData[]) => {\n  return data.find((x, idx, array) => {\n    if (idx == 0 && DateTime.fromISO(x.date).startOf(\"day\") >= date) {\n      return true;\n    }\n\n    if (\n      idx < array.length - 1 &&\n      DateTime.fromISO(x.date).startOf(\"day\") <= date &&\n      DateTime.fromISO(data[idx + 1].date).startOf(\"day\") > date\n    ) {\n      return true;\n    }\n\n    if (idx === array.length - 1) {\n      return true;\n    }\n  });\n};\n\nexport const findNearestIdxOnOrBefore = <T>(date: DateTime, data: T[], selector: (data: T) => DateTime) => {\n  return data.findIndex((x, idx, array) => {\n    if (idx == 0 && selector(x) >= date) {\n      return true;\n    }\n\n    if (idx < array.length - 1 && selector(x) <= date && selector(data[idx + 1]) > date) {\n      return true;\n    }\n\n    if (idx === array.length - 1) {\n      return true;\n    }\n  });\n};\n","import { DateTime } from \"luxon\";\nimport { Account } from \"shared/models/account\";\nimport { Mortgage } from \"shared/models/mortgage\";\n\nexport const getGraphDates = (accounts: (Account | Mortgage)[]) => {\n  return [\n    ...new Set(\n      accounts.flatMap((x) => {\n        return x.data.map((x) => DateTime.fromISO(x.date).startOf(\"day\").toISO());\n      }),\n    ),\n  ]\n    .map((x) => DateTime.fromISO(x!))\n    .sort((a, b) => a.toMillis() - b.toMillis()) as DateTime<true>[];\n};\n","import { DateTime } from \"luxon\";\nimport { Loan } from \"shared/models/loan\";\n\nexport const calcLoanBalance = (date: DateTime, loan: Loan) => {\n  const { firstPaymentDate, paymentsPerYear, principal: principal, ratePct: rate, payment: monthlyPayment } = loan;\n  const annualizedRate = rate / paymentsPerYear;\n  const periods = date.diff(DateTime.fromISO(firstPaymentDate), \"months\").months;\n  const totalRate = (1 + annualizedRate) ** periods;\n  const balance = principal * totalRate - (monthlyPayment / annualizedRate) * (totalRate - 1);\n\n  return balance;\n};\n\nexport const calcEquity = (\n  ownershipPct: number,\n  houseValue: number | undefined,\n  loanBalance: number,\n  principal: number\n) => {\n  return houseValue ? houseValue * ownershipPct - loanBalance : principal - loanBalance;\n};\n","import { Button, Paper, TextField } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { DateTime } from \"luxon\";\nimport { useRef } from \"react\";\nimport { AddAccountEntry } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\n\nexport const AddEntry = (props: { accountName: string }) => {\n  const { accountName } = props;\n  const ref = useRef<{ date?: DateTime; value?: number }>({\n    date: getLocalDateTime(),\n    value: 0,\n  });\n  const onAddEntry = () => {\n    const { date, value } = ref.current;\n    if (!date || !value) {\n      return;\n    }\n    AddAccountEntry(accountName, date, value);\n  };\n  return (\n    <Paper elevation={3} sx={{ padding: 2 }}>\n      <Stack spacing={1}>\n        <DatePicker\n          defaultValue={getLocalDateTime()}\n          onChange={(date: DateTime | null) => {\n            if (date) {\n              ref.current.date = date;\n            }\n          }}\n        />\n        <TextField\n          label=\"Home value\"\n          type=\"numeric\"\n          onChange={(event) => {\n            ref.current.value = +event.target.value;\n          }}\n        />\n        <Button onClick={onAddEntry}>Add Home Value</Button>\n      </Stack>\n    </Paper>\n  );\n};\n","export function groupBy<T, T2 extends string | number | symbol>(array: T[], selector: (x: T) => T2): Record<T2, T[]> {\n  return array.reduce(\n    (acc: Record<T2, T[]>, curr: T) => {\n      const key = selector(curr);\n      acc[key] ??= [];\n      acc[key].push(curr);\n      return acc;\n    },\n    {} as Record<T2, T[]>,\n  );\n}\n","import { Button, Paper, Stack, TextField } from \"@mui/material\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useRef, useState } from \"react\";\nimport { Loan } from \"shared/models/loan\";\nimport { store } from \"shared/store\";\nimport { setLoan } from \"shared/store/set-loan\";\nimport { groupBy } from \"shared/utility/group-by\";\nimport { ZodIssue, z } from \"zod\";\n\nconst convertPct = (value: number) => {\n  return value > 1 ? value / 100 : value;\n};\n\nconst validator: z.ZodType<Loan> = z.object({\n  principal: z.number().min(0),\n  ratePct: z.number().min(0),\n  paymentsPerYear: z.number().min(0),\n  payment: z.number().min(0),\n  firstPaymentDate: z.string().datetime({ offset: true }),\n  ownershipPct: z.number().min(0),\n});\n\nexport const AddLoan = (props: { accountName: string }) => {\n  const { accountName } = props;\n\n  const loan = useStore(store, (x) => {\n    const account = x.wealth[accountName];\n    if (\"loan\" in account) {\n      return account.loan;\n    }\n  });\n\n  const ref = useRef<Partial<Loan>>(loan ?? {});\n  const [error, setError] = useState<Partial<Record<keyof Loan, ZodIssue>>>({});\n\n  return (\n    <Paper elevation={3} sx={{ padding: 2 }}>\n      <Stack spacing={1}>\n        <DatePicker\n          defaultValue={ref.current?.firstPaymentDate ? DateTime.fromISO(ref.current.firstPaymentDate) : null}\n          label=\"First Payment\"\n          slotProps={{\n            textField: {\n              error: !!error.firstPaymentDate,\n            },\n          }}\n          onChange={(value: DateTime | null) => {\n            if (value) {\n              ref.current.firstPaymentDate = value.startOf(\"day\").toISO()!;\n            }\n          }}\n        />\n        <TextField\n          error={!!error.principal}\n          defaultValue={loan?.principal}\n          onChange={(event) => {\n            ref.current.principal = +event.target.value;\n          }}\n          variant=\"outlined\"\n          label=\"Principal\"\n          type=\"number\"\n        />\n        <TextField\n          error={!!error.ratePct}\n          defaultValue={loan?.ratePct}\n          onChange={(event) => {\n            ref.current.ratePct = convertPct(+event.target.value);\n          }}\n          variant=\"outlined\"\n          label=\"Rate\"\n          type=\"number\"\n        />\n        <TextField\n          error={!!error.paymentsPerYear}\n          defaultValue={loan?.paymentsPerYear}\n          onChange={(event) => {\n            ref.current.paymentsPerYear = +event.target.value;\n          }}\n          variant=\"outlined\"\n          label=\"Payments Per Year\"\n          type=\"number\"\n        />\n        <TextField\n          defaultValue={loan?.payment}\n          error={!!error.payment}\n          onChange={(event) => {\n            ref.current.payment = +event.target.value;\n          }}\n          variant=\"outlined\"\n          label=\"Payment\"\n          type=\"number\"\n        />\n        <TextField\n          defaultValue={loan?.ownershipPct}\n          error={!!error.ownershipPct}\n          onChange={(event) => {\n            ref.current.ownershipPct = convertPct(+event.target.value);\n          }}\n          variant=\"outlined\"\n          label=\"Ownership (%)\"\n          type=\"number\"\n        />\n        <Button\n          onClick={() => {\n            const parsed = validator.safeParse(ref.current);\n            if (parsed.success) {\n              setError({});\n              setLoan(accountName, parsed.data);\n            } else {\n              const issues = groupBy(parsed.error.issues, (x) => x.path.join(\"\"));\n              setError(issues);\n            }\n          }}\n        >\n          Set Loan\n        </Button>\n      </Stack>\n    </Paper>\n  );\n};\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\nimport { Button } from \"@mui/material\";\nimport { ColDef } from \"ag-grid-community\";\nimport { CustomCellRendererProps } from \"ag-grid-react\";\nimport { DateTime } from \"luxon\";\nimport { AccountData } from \"shared/models/account-data\";\nimport { removeAccountEntry } from \"shared/store\";\nimport { formatCashShort } from \"shared/utility/format-cash\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const createAccountColumnConfig = (accountName: string): ColDef<AccountData>[] => [\n  {\n    headerName: \"Date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\n  },\n  {\n    headerName: \"Home Value\",\n    valueGetter: (x) => x.data?.value,\n    valueFormatter: (x) => formatCashShort(x.value),\n    type: \"numericColumn\",\n  },\n  {\n    headerName: \"Actions\",\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\n      return (\n        <Button\n          onClick={() => {\n            props.data && removeAccountEntry(accountName, props.data?.id);\n          }}\n          color=\"error\"\n        >\n          <DeleteForeverIcon />\n        </Button>\n      );\n    },\n  },\n];\n\nexport const mortgageColumnConfig: ColDef<{\n  date: DateTime;\n  balance: number;\n  equity: number;\n}>[] = [\n  {\n    headerName: \"Date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data?.date,\n  },\n  {\n    headerName: \"Loan Balance\",\n    valueGetter: (x) => x.data?.balance.toFixed(2),\n    valueFormatter: (x) => formatCashShort(x.value),\n    type: \"numericColumn\",\n  },\n  {\n    headerName: \"Equity\",\n    valueGetter: (x) => x.data?.equity.toFixed(2),\n    valueFormatter: (x) => formatCashShort(x.value),\n    type: \"numericColumn\",\n  },\n];\n","import { Stack } from \"@mui/system\";\nimport Grid from \"@mui/system/Unstable_Grid\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { useMemo } from \"react\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { Mortgage } from \"shared/models/mortgage\";\nimport { store } from \"shared/store\";\n\nimport { findNearestOnOrBefore } from \"shared/utility/find-nearest-on-or-before\";\nimport { getGraphDates } from \"shared/utility/get-graph-dates\";\nimport { calcEquity, calcLoanBalance } from \"shared/utility/mortgage-calc\";\nimport { DeleteAccount } from \"../components/delete-account\";\nimport { RenameAccount } from \"../components/update-account\";\nimport { AddEntry } from \"./add-entry\";\nimport { AddLoan } from \"./add-loan\";\nimport { createAccountColumnConfig, mortgageColumnConfig } from \"./column-config\";\n\nexport const MortgageTab = (props: { accountName: string }) => {\n  const { accountName } = props;\n\n  const account = useStore(store, (state) => state.wealth[accountName]) as Mortgage;\n\n  const allAccounts = useStore(store, (x) => x.wealth);\n\n  const accountColumnConfig = useMemo(() => {\n    return createAccountColumnConfig(accountName);\n  }, [accountName]);\n\n  const mortgageData = useMemo(() => {\n    if (!account?.loan) {\n      return [];\n    }\n\n    return getGraphDates(Object.values(allAccounts)).map((date) => {\n      const loanBalance = calcLoanBalance(date, account.loan!);\n      return {\n        date,\n        balance: loanBalance,\n        equity: calcEquity(\n          account.loan!.ownershipPct,\n          findNearestOnOrBefore(date, account.data)?.value,\n          loanBalance,\n          account.loan!.principal\n        ),\n      };\n    });\n  }, [account, allAccounts]);\n\n  return (\n    <Grid container height=\"100%\" width={\"100%\"} padding={1} spacing={2}>\n      <Grid lg={3}>\n        <AgGrid\n          reactiveCustomComponents\n          rowData={account?.data ?? []}\n          columnDefs={accountColumnConfig}\n          id={account + \"-history\"}\n        />\n      </Grid>\n      <Grid lg={3}>\n        <AgGrid\n          rowData={mortgageData}\n          columnDefs={mortgageColumnConfig}\n          id={account + \"-history\"}\n          autoSizeStrategy={{ type: \"fitGridWidth\" }}\n        />\n      </Grid>\n      <Grid lg={6}>\n        <div>\n          <Grid container spacing={2}>\n            <Grid xl={3}>\n              <AddLoan accountName={accountName} />\n            </Grid>\n            <Grid xl={3}>\n              <AddEntry accountName={accountName} />\n            </Grid>\n            <Grid xl={0}></Grid>\n            <Grid xl={3}>\n              <Stack spacing={2}>\n                <DeleteAccount accountName={accountName} />\n                <RenameAccount key={accountName} accountName={accountName} />\n              </Stack>\n            </Grid>\n          </Grid>\n        </div>\n      </Grid>\n    </Grid>\n  );\n};\n","import { Box, Tab, Tabs } from \"@mui/material\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { useEffect, useState } from \"react\";\nimport { store } from \"shared/store\";\nimport { NewAccount } from \"../new-account\";\nimport { AccountTab } from \"../tab-types/account/account\";\nimport { MortgageTab } from \"../tab-types/mortgage\";\n\nexport const AccountTabs = () => {\n  const accounts = useStore(store, (x) => x.wealth);\n  const firstAccount = Object.keys(accounts)?.[0];\n  const [account, setAccount] = useState<string>(firstAccount);\n\n  useEffect(() => {\n    if (!accounts[account]) {\n      setAccount(Object.keys(accounts)?.[0] ?? \"\");\n    }\n  }, [account, accounts]);\n\n  return (\n    <Box display=\"flex\" flexDirection={\"column\"} width=\"100%\" height=\"100%\">\n      <Box display={\"flex\"} flex={\"0 1 auto\"}>\n        {Object.keys(accounts).length > 0 && (\n          <Tabs\n            value={account}\n            onChange={(_, value) => {\n              setAccount(value as string);\n            }}\n          >\n            {Object.keys(accounts).map((account) => {\n              return <Tab key={account} value={account} label={account} />;\n            })}\n          </Tabs>\n        )}\n        <Tab component={NewAccount} />\n      </Box>\n      <Box flex={\"1 1 auto\"}>\n        {accounts[account]?.type === \"account\" && <AccountTab accountName={account} />}\n        {accounts[account]?.type === \"mortgage\" && <MortgageTab accountName={account} />}\n      </Box>\n    </Box>\n  );\n};\n","import { DateTime } from \"luxon\";\nimport { Account } from \"shared/models/account\";\nimport { Mortgage } from \"shared/models/mortgage\";\nimport { findNearestOnOrBefore } from \"./find-nearest-on-or-before\";\nimport { calcEquity, calcLoanBalance } from \"./mortgage-calc\";\n\nconst getMortgageValue = (date: DateTime, mortgage: Mortgage) => {\n  if (!mortgage.loan) {\n    return 0;\n  }\n  const entry = findNearestOnOrBefore(date, mortgage.data);\n  if (entry?.date && mortgage.data[0] === entry && DateTime.fromISO(entry.date).startOf(\"day\") > date) {\n    return 0;\n  }\n  const { ownershipPct, principal } = mortgage.loan;\n  const balance = calcLoanBalance(date, mortgage.loan);\n  return calcEquity(ownershipPct, entry?.value, balance, principal);\n};\n\nconst getAccountValue = (date: DateTime, account: Account) => {\n  const entry = findNearestOnOrBefore(date, account.data);\n  if (entry?.date && account.data[0] === entry && DateTime.fromISO(entry.date).startOf(\"day\") > date) {\n    return 0;\n  }\n  return entry?.value;\n};\n\nexport const getGraphValue = (date: DateTime, account: Account | Mortgage) => {\n  switch (account.type) {\n    case \"account\":\n      return getAccountValue(date, account);\n    case \"mortgage\":\n      return getMortgageValue(date, account);\n  }\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { getGraphDates } from \"shared/utility/get-graph-dates\";\nimport { getGraphValue } from \"shared/utility/get-graph-value\";\n\nexport const useGraphData = () => {\n  const wealth = useStore(store, (x) => x.wealth);\n\n  return useMemo(() => {\n    const dates = getGraphDates(Object.values(wealth));\n    const accounts = Object.entries(wealth);\n    const graphData = dates.map((date) => {\n      return accounts.reduce(\n        (acc, [accountName, account]) => {\n          const value = getGraphValue(date, account);\n\n          if (value) {\n            acc[accountName] = value;\n            acc[\"total\"] = (acc[\"total\"] as number) + value;\n          } else {\n            acc[accountName] = null;\n          }\n\n          acc[\"date\"] = date.toJSDate();\n          return acc;\n        },\n        { total: 0 } as Record<string, number | Date | null>,\n      );\n    });\n\n    graphData.forEach((x, idx, arr) => {\n      if (idx < arr.length - 1) {\n        Object.keys(x).forEach((key) => {\n          if (x[key] === null && arr[idx + 1][key] !== null) {\n            x[key] = 0;\n          }\n        });\n      }\n    });\n\n    const firstNonZero = graphData.findIndex((x) => (x[\"total\"] as number) > 0);\n    return graphData.slice(firstNonZero);\n  }, [wealth]);\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { AgAreaSeriesOptions, AgCartesianChartOptions, AgLineSeriesOptions } from \"ag-charts-community\";\nimport { AgChartsReact } from \"ag-charts-react\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { formatCashShort } from \"shared/utility/format-cash\";\nimport { useGraphData } from \"./use-graph-data\";\n\nexport const WealthChart = () => {\n  const wealth = useStore(store, (x) => x.wealth);\n  const data = useGraphData();\n\n  const series = useMemo(() => {\n    return [\n      ...Object.keys(wealth).map((x) => {\n        return {\n          stacked: true,\n          type: \"area\",\n          xKey: \"date\",\n          yKey: x,\n          yName: x,\n          tooltip: {\n            renderer: ({ datum, yKey, xKey }) => ({\n              content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCashShort(datum[yKey])}`,\n            }),\n          },\n        } as AgAreaSeriesOptions;\n      }),\n      {\n        type: \"line\",\n        xKey: \"date\",\n        yKey: \"total\",\n        yName: \"Total\",\n        tooltip: {\n          renderer: ({ datum, yKey, xKey }) => ({\n            content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCashShort(datum[yKey])}`,\n          }),\n        },\n      } as AgLineSeriesOptions,\n    ];\n  }, [wealth]);\n\n  const options: AgCartesianChartOptions = useMemo(\n    () => ({\n      theme: \"ag-default-dark\",\n      title: {\n        text: `Total Wealth ${formatCashShort((data[data.length - 1]?.total ?? 0) as number)}`,\n      },\n      data,\n      axes: [\n        {\n          type: \"time\",\n          position: \"bottom\",\n          label: {\n            format: \"%Y\",\n          },\n        },\n        {\n          type: \"number\",\n          position: \"left\",\n        },\n      ],\n      series,\n    }),\n    [data, series],\n  );\n  return <AgChartsReact options={options} />;\n};\n","import Grid from \"@mui/system/Unstable_Grid\";\nimport { AccountTabs } from \"./components/account-tabs\";\nimport { WealthChart } from \"./components/wealth-chart\";\n\nexport const NetWealth = () => {\n  return (\n    <Grid container height={\"100%\"} width=\"100%\" spacing={1}>\n      <Grid xs={12} height=\"50%\">\n        <WealthChart />\n      </Grid>\n      <Grid xs={12} height=\"50%\">\n        <AccountTabs />\n      </Grid>\n    </Grid>\n  );\n};\n","import { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\n\nexport const useDates = (year?: number) =>\n  useMemo(() => {\n    return {\n      meritIncrease: DateTime.fromObject({ month: 4, day: 1, year }),\n      meritBonus: DateTime.fromObject({ month: 4, day: 15, year }),\n      companyBonus: DateTime.fromObject({ month: 6, day: 15, year }),\n      retirementBonus: DateTime.fromObject({ month: 7, day: 15, year }),\n    };\n  }, [year]);\n\nexport const useDateRanges = (year: number) => {\n  return useMemo(\n    () => ({\n      base: {\n        start: DateTime.fromObject({ month: 1, day: 1, year }),\n        end: DateTime.fromObject({ month: 12, day: 31, year }).endOf(\"day\"),\n      },\n      meritBonus: {\n        start: DateTime.fromObject({ month: 1, day: 1, year: year - 1 }),\n        end: DateTime.fromObject({ month: 12, day: 31, year: year - 1 }).endOf(\"day\"),\n      },\n      companyBonus: {\n        start: DateTime.fromObject({ day: 1, month: 4, year: year - 1 }),\n        end: DateTime.fromObject({ day: 31, month: 3, year }).endOf(\"day\"),\n      },\n      retirementBonus: {\n        start: DateTime.fromObject({ day: 1, month: 7, year: year - 1 }),\n        end: DateTime.fromObject({ day: 30, month: 6, year }).endOf(\"day\"),\n      },\n    }),\n    [year]\n  );\n};\n","import { DateTime } from \"luxon\";\nimport { AccountData } from \"shared/models/account-data\";\n\nexport function findSameYear(year: number, data: AccountData[]): AccountData | undefined;\nexport function findSameYear(date: DateTime, data: AccountData[]): AccountData | undefined;\nexport function findSameYear(date: DateTime | number, data: AccountData[]): AccountData | undefined {\n  const year = typeof date === \"number\" ? date : date.year;\n  return data.find((x) => {\n    return DateTime.fromISO(x.date).year === year;\n  });\n}\n","export interface Outcome {\n  min: number;\n  max: number;\n  avg: number;\n  actual?: number;\n}\n\nexport interface BonusOutcomes {\n  percent: Outcome;\n  cash: Outcome;\n}\n\nexport const minMaxAvg = (values: number[]): Outcome => {\n  if (values.length === 0) {\n    return { min: 0, max: 0, avg: 0 };\n  }\n  return values.reduce(\n    (acc, curr, index, arr) => {\n      const { min, max, avg } = acc;\n      return {\n        min: Math.min(curr, min),\n        max: Math.max(curr, max),\n        avg: index === arr.length - 1 ? (avg + curr) / arr.length : avg + curr,\n      };\n    },\n    { min: Infinity, max: 0, avg: 0 },\n  );\n};\n\nexport const outcomeFromSingle = (value: number): Outcome => {\n  return { min: value, max: value, avg: value, actual: value };\n};\n\nexport const actualizedOutcome = (outcome: Outcome): Outcome =>\n  outcome.actual ? outcomeFromSingle(outcome.actual) : outcome;\n\nexport const scaleOutcome = (outcome: Outcome, value: number): Outcome => {\n  return {\n    min: outcome.min * value,\n    max: outcome.max * value,\n    avg: outcome.avg * value,\n    actual: outcome.actual ? outcome.actual * value : undefined,\n  };\n};\nexport const AddConstantOutcome = (outcome: Outcome, value: number): Outcome => {\n  return {\n    min: outcome.min + value,\n    max: outcome.max + value,\n    avg: outcome.avg + value,\n    actual: outcome.actual ? outcome.actual + value : undefined,\n  };\n};\n\nexport const MultiplyOutcome = (outcomeA: Outcome, outcomeB: Outcome): Outcome => {\n  return {\n    min: outcomeA.min * outcomeB.min,\n    max: outcomeA.max * outcomeB.max,\n    avg: outcomeA.avg * outcomeB.avg,\n    actual: outcomeA.actual != undefined && outcomeB.actual != undefined ? outcomeA.actual * outcomeB.avg : undefined,\n  };\n};\n\nexport const AddOutcome = (...outcomes: Outcome[]): Outcome => {\n  const everyActualDefined = outcomes.every((x) => x.actual != undefined);\n  return outcomes.reduce(\n    (acc, curr) => {\n      return {\n        min: acc.min + curr.min,\n        avg: acc.avg + curr.avg,\n        max: acc.max + curr.max,\n        actual: everyActualDefined ? (acc.actual ?? 0) + (curr.actual ?? 0) : undefined,\n      };\n    },\n    { min: 0, max: 0, avg: 0, actual: undefined },\n  );\n};\n","import { DateTime } from \"luxon\";\n\nexport const aPayday = DateTime.fromObject({ month: 12, day: 1, year: 2023 });\n","import { DateTime } from \"luxon\";\n\nexport function DateRangesOverlap(a: { start: DateTime; end: DateTime }, b: { start: DateTime; end: DateTime }) {\n  return a.start <= b.end && b.start <= a.end;\n}\n","import { DateTime } from \"luxon\";\n\nexport interface PayPeriod {\n  start: DateTime;\n  end: DateTime;\n  payedOn: DateTime;\n}\n\nexport const getPayPeriods = (anyPayday: DateTime, start: DateTime, end: DateTime): PayPeriod[] => {\n  const diff = -1 * Math.abs(start.diff(anyPayday, [\"weeks\", \"days\"]).days);\n  const daysOffset = +(anyPayday > start);\n  const startPayDay = start.plus({\n    day: diff + daysOffset,\n  });\n\n  const numPayDays = end.diff(start, [\"weeks\", \"days\"]).weeks / 2;\n  const periods = [];\n  for (let i = 1; i <= numPayDays; i++) {\n    periods.push({\n      start: startPayDay.plus({ weeks: i * 2 - 3, day: 3 }),\n      end: startPayDay.plus({ weeks: i * 2 - 1 }).endOf(\"day\"),\n      payedOn: startPayDay.plus({ weeks: i * 2 }),\n    });\n  }\n  return periods;\n};\n","import { useMemo } from \"react\";\nimport { AccountData } from \"shared/models/account-data\";\n\nexport const useMostFrequentValue = (data: AccountData[]): number | undefined => {\n  return useMemo(() => {\n    return Object.entries(\n      Object.groupBy(\n        data.map((x) => x.value),\n        (x) => x\n      )\n    )\n      .map(([key, values]) => [+key, values?.length ?? 0])\n      .sort(([, a], [, b]) => {\n        return b - a;\n      })[0]?.[0];\n  }, [data]);\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { AccountData } from \"shared/models/account-data\";\nimport { store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { findSameYear } from \"shared/utility/find-same-year\";\nimport { sortByDate } from \"shared/utility/sort-by-date\";\nimport { useMostFrequentValue } from \"./use-most-frequent-value\";\n\nconst valueByDateRange = (account: AccountData[]) => {\n  return account.toSorted(sortByDate((x) => DateTime.fromISO(x.date), \"asc\")).map((x, index, array) => {\n    const next = array[index + 1];\n    return {\n      start: DateTime.fromISO(x.date),\n      end: (next?.date ? DateTime.fromISO(next?.date).startOf(\"day\") : DateTime.fromISO(x.date).plus({ years: 1 }))\n        .minus({ days: 1 })\n        .endOf(\"day\"),\n      value: x.value,\n    };\n  });\n};\n\nconst systemYear = getLocalDateTime().year;\nconst defaultValue = {\n  start: DateTime.fromObject({\n    month: 1,\n    day: 1,\n    year: systemYear,\n  }),\n  end: DateTime.fromObject({\n    month: 12,\n    day: 31,\n    year: systemYear,\n  }).endOf(\"day\"),\n  value: 0,\n};\n\nexport const useProjectedPay = () => {\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\n  const baseIncome = timeSeries.paycheck;\n  const meritPct = useMostFrequentValue(timeSeries.meritIncreasePct);\n\n  return useMemo(() => {\n    const payPerPeriod = valueByDateRange(baseIncome);\n    const mostRecentPay = payPerPeriod[payPerPeriod.length - 1] ?? defaultValue;\n\n    for (let i = 0; i < 2; i++) {\n      const { start, end, value } = payPerPeriod[0] ?? mostRecentPay;\n      const startDate = start.plus({ years: -1 }).startOf(\"day\");\n      const equity = findSameYear(start, timeSeries.equityPct)?.value ?? 0;\n      const merit = findSameYear(start, timeSeries.meritIncreasePct)?.value ?? meritPct ?? 0;\n      const multiplier = 1 / (1 + merit + equity);\n\n      payPerPeriod.unshift({\n        start: startDate,\n        end: end.plus({ years: -1 }).endOf(\"day\"),\n        value: Math.round(value * multiplier),\n      });\n    }\n\n    const startIdx = payPerPeriod.length;\n    for (let i = 0; i < 11; i++) {\n      const { start, end, value } = payPerPeriod[startIdx + i - 1] ?? mostRecentPay;\n      const startDate = start.plus({ years: 1 });\n      const equity = findSameYear(startDate, timeSeries.equityPct)?.value ?? 0;\n      const merit = findSameYear(startDate, timeSeries.meritIncreasePct)?.value ?? meritPct ?? 0;\n      const multiplier = 1 + merit + equity;\n\n      payPerPeriod.push({\n        start: startDate,\n        end: end.plus({ years: 1 }).endOf(\"day\"),\n        value: Math.round(value * multiplier),\n      });\n    }\n\n    return payPerPeriod;\n  }, [baseIncome, meritPct, timeSeries.equityPct, timeSeries.meritIncreasePct]);\n};\n","import { differenceInBusinessDays } from \"date-fns/differenceInBusinessDays\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { aPayday } from \"shared/utility/a-payday\";\nimport { DateRangesOverlap } from \"shared/utility/date-ranges-overlap\";\nimport { PayPeriod, getPayPeriods } from \"shared/utility/get-pay-periods\";\nimport { useProjectedPay } from \"./use-projected-pay\";\n\nexport type IncomePerPeriod = {\n  perPayday: number;\n  count: number;\n  start: DateTime;\n  end: DateTime;\n  value: number;\n};\n\nexport interface BaseIncome {\n  totalIncome: number;\n  payPeriods: (PayPeriod & { value: number })[];\n  incomePerPeriod: IncomePerPeriod[];\n}\n\nexport const useBaseIncome = (startDate: DateTime, endDate: DateTime): BaseIncome => {\n  const pay = useProjectedPay();\n\n  return useMemo(() => {\n    const payPeriods = getPayPeriods(aPayday, startDate, endDate).map((payPeriod) => {\n      const dateRanges = pay.filter((_pay) => DateRangesOverlap(_pay, payPeriod));\n      const payDuringPeriod = dateRanges.map((__pay) => {\n        const start = DateTime.max(__pay.start, payPeriod.start);\n        const end = DateTime.min(__pay.end, payPeriod.end);\n        const businessDays = differenceInBusinessDays(end.plus({ millisecond: 1 }).toJSDate(), start.toJSDate());\n        const value = (__pay.value / 10) * Math.round(businessDays);\n        return {\n          start,\n          end,\n          value,\n        };\n      });\n      const sum = payDuringPeriod.reduce((acc, curr) => acc + curr.value, 0);\n\n      return {\n        ...payPeriod,\n        value: sum,\n      };\n    });\n\n    const totalIncome = payPeriods.reduce((acc, curr) => acc + curr.value, 0);\n\n    const incomePerPeriod = payPeriods\n      .reduceRight((acc, curr) => {\n        if (acc[0]?.[0]?.value === curr.value) {\n          acc[0].unshift(curr);\n        } else {\n          acc.unshift([curr]);\n        }\n\n        return acc;\n      }, [] as (typeof payPeriods)[])\n      .reduce((acc, curr) => {\n        acc.push({\n          start: curr[0].payedOn,\n          end: curr[curr.length - 1].payedOn,\n          value: curr.reduce((acc, curr) => acc + curr.value, 0),\n          perPayday: curr[0].value,\n          count: curr.length,\n        });\n        return acc;\n      }, [] as IncomePerPeriod[]);\n\n    return { totalIncome, payPeriods, incomePerPeriod };\n  }, [startDate, endDate, pay]);\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { useDateRanges } from \"shared/hooks/use-dates\";\nimport { store } from \"shared/store\";\nimport { findSameYear } from \"shared/utility/find-same-year\";\nimport { BonusOutcomes, actualizedOutcome, minMaxAvg, scaleOutcome } from \"shared/utility/min-max-avg\";\nimport { useBaseIncome } from \"./use-base-income\";\n\nexport const useCompanyBonus = (year: number): BonusOutcomes => {\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\n  const dateRanges = useDateRanges(year);\n  const { totalIncome } = useBaseIncome(dateRanges.companyBonus.start, dateRanges.companyBonus.end);\n\n  return useMemo(() => {\n    const mostRecentBonus = findSameYear(year, timeSeries.companyBonus);\n    const mostRecentPercent = findSameYear(year, timeSeries.companyBonusPct);\n\n    const meritFactor = timeSeries.meritBonusPct\n      .filter((x) => DateTime.fromISO(x.date).year <= year)\n      .slice(-3)\n      .reduce((acc, curr) => acc + curr.value, 0);\n\n    const outcomes = minMaxAvg(timeSeries.companyBonusPct.map((x) => x.value));\n    const cash = scaleOutcome(outcomes, meritFactor * totalIncome);\n    const projectedActual = mostRecentPercent?.value ? mostRecentPercent?.value * meritFactor * totalIncome : undefined;\n\n    return {\n      percent: actualizedOutcome({\n        ...outcomes,\n        actual: mostRecentPercent?.value,\n      }),\n      cash: actualizedOutcome({\n        ...cash,\n        actual: mostRecentBonus?.value ?? projectedActual,\n      }),\n    };\n  }, [totalIncome, timeSeries.companyBonus, timeSeries.companyBonusPct, timeSeries.meritBonusPct, year]);\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { useDateRanges } from \"shared/hooks/use-dates\";\nimport { store } from \"shared/store\";\nimport { findSameYear } from \"shared/utility/find-same-year\";\nimport { BonusOutcomes, actualizedOutcome, minMaxAvg, scaleOutcome } from \"shared/utility/min-max-avg\";\nimport { useBaseIncome } from \"./use-base-income\";\nimport { useMostFrequentValue } from \"./use-most-frequent-value\";\n\nexport const useMeritBonus = (year: number): BonusOutcomes => {\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\n  const ranges = useDateRanges(year);\n  const { totalIncome } = useBaseIncome(ranges.meritBonus.start, ranges.meritBonus.end);\n\n  const bonusAmount = useMemo(() => {\n    return findSameYear(year, timeSeries.meritBonus)?.value;\n  }, [timeSeries.meritBonus, year]);\n\n  const bonusPercent = useMemo(() => {\n    return findSameYear(year, timeSeries.meritBonusPct)?.value;\n  }, [timeSeries.meritBonusPct, year]);\n\n  const frequentMeritBonusPercent = useMostFrequentValue(timeSeries.meritBonusPct);\n\n  return useMemo(() => {\n    const meritOutcome = minMaxAvg(\n      timeSeries.meritBonusPct.filter((x) => DateTime.fromISO(x.date).year <= year).map((x) => x.value)\n    );\n    meritOutcome.avg = frequentMeritBonusPercent ?? 0;\n\n    return {\n      percent: actualizedOutcome({ ...meritOutcome, actual: bonusPercent }),\n      cash: actualizedOutcome({\n        ...scaleOutcome(meritOutcome, totalIncome),\n        actual: bonusAmount ?? (bonusPercent ? totalIncome * bonusPercent : undefined),\n      }),\n    };\n  }, [bonusAmount, bonusPercent, frequentMeritBonusPercent, timeSeries.meritBonusPct, totalIncome, year]);\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { useMemo } from \"react\";\nimport { useDateRanges } from \"shared/hooks/use-dates\";\nimport { store } from \"shared/store\";\nimport { findSameYear } from \"shared/utility/find-same-year\";\nimport {\n  AddOutcome,\n  BonusOutcomes,\n  actualizedOutcome,\n  outcomeFromSingle,\n  scaleOutcome,\n} from \"shared/utility/min-max-avg\";\nimport { useBaseIncome } from \"./use-base-income\";\nimport { useCompanyBonus } from \"./use-company-bonus\";\nimport { useMeritBonus } from \"./use-merit-bonus\";\n\nconst bonusPercent = 0.15;\nexport const useRetirementBonus = (year: number): BonusOutcomes => {\n  const actual = useStore(store, (x) => findSameYear(year, x.projectedIncome.timeSeries.retirementBonus)?.value);\n\n  const dateRanges = useDateRanges(year);\n  const { totalIncome } = useBaseIncome(dateRanges.retirementBonus.start, dateRanges.retirementBonus.end);\n\n  const meritBonus = useMeritBonus(year);\n  const juneBonus = useCompanyBonus(year);\n\n  return useMemo(() => {\n    const eligibleIncome = outcomeFromSingle(totalIncome);\n    const outcome = scaleOutcome(\n      AddOutcome(eligibleIncome, actualizedOutcome(meritBonus.cash), actualizedOutcome(juneBonus.cash)),\n      bonusPercent\n    );\n    return {\n      cash: actualizedOutcome({ ...outcome, actual: actual ?? outcome.actual }),\n      percent: {\n        min: 0.15,\n        max: 0.15,\n        avg: 0.15,\n        actual: 0.15,\n      },\n    };\n  }, [actual, juneBonus.cash, meritBonus.cash, totalIncome]);\n};\n","import { useMemo } from \"react\";\nimport { useDateRanges } from \"shared/hooks/use-dates\";\nimport { AddOutcome, actualizedOutcome, outcomeFromSingle } from \"shared/utility/min-max-avg\";\nimport { useBaseIncome } from \"./use-base-income\";\nimport { useCompanyBonus } from \"./use-company-bonus\";\nimport { useMeritBonus } from \"./use-merit-bonus\";\nimport { useRetirementBonus } from \"./use-retirement-bonus\";\n\nexport const useTotalIncome = (year: number) => {\n  const { base } = useDateRanges(year);\n  const baseIncome = useBaseIncome(base.start, base.end);\n\n  const meritBonus = useMeritBonus(year);\n  const juneBonus = useCompanyBonus(year);\n  const julyBonus = useRetirementBonus(year);\n\n  return useMemo(() => {\n    const taxableIncome = AddOutcome(\n      outcomeFromSingle(baseIncome.totalIncome),\n      actualizedOutcome(meritBonus.cash),\n      actualizedOutcome(juneBonus.cash)\n    );\n    const totalIncome = AddOutcome(taxableIncome, actualizedOutcome(julyBonus.cash));\n    return { taxableIncome, totalIncome };\n  }, [baseIncome.totalIncome, julyBonus.cash, juneBonus.cash, meritBonus.cash]);\n};\n","import { Tooltip } from \"@mui/material\";\nimport { useMemo } from \"react\";\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\n\ninterface CashProps {\n  value?: number;\n  fallback?: number;\n  disableTooltip?: boolean;\n  compact?: boolean;\n  tooltip?: string;\n}\nexport const Cash = ({ value, fallback, disableTooltip, compact = true, tooltip }: CashProps) => {\n  const formatted = useMemo(() => {\n    if (value === undefined) {\n      return fallback;\n    }\n    return compact ? formatCashShort(value) : formatCash(value);\n  }, [compact, fallback, value]);\n\n  return (\n    <Tooltip\n      disableHoverListener={disableTooltip || !compact || !value}\n      title={[tooltip, formatCash(value!)].join(\" \")}\n    >\n      <span>{formatted}</span>\n    </Tooltip>\n  );\n};\n","import { Box, Tooltip } from \"@mui/material\";\nimport { DateTime } from \"luxon\";\nimport { ReactNode, useMemo } from \"react\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\n\ninterface DurationProps {\n  dateTime?: DateTime;\n  children?: ReactNode;\n  variant?: \"countdown\" | \"date\";\n  dateFormat?: string;\n}\nexport const Duration = (props: DurationProps) => {\n  const { dateTime, children, variant = \"countdown\", dateFormat = shortDate } = props;\n\n  const countDownStr = useMemo(() => {\n    if (!dateTime) {\n      return \"??\";\n    }\n    if (variant === \"countdown\") {\n      const diff = dateTime?.diffNow([\"months\", \"days\", \"hours\"]);\n      const format = diff && diff.days === 0 ? \"h'hr'\" : \"d'd'\";\n      return diff?.toFormat(format);\n    }\n\n    return dateTime?.toFormat(dateFormat);\n  }, [dateFormat, dateTime, variant]);\n\n  const tooltipStr = useMemo(() => {\n    if (variant === \"countdown\") {\n      return dateTime?.toFormat(dateFormat);\n    }\n\n    return dateTime?.diffNow([\"months\", \"days\", \"hours\"]).toFormat(\"d 'days'\");\n  }, [dateFormat, dateTime, variant]);\n\n  const countDownColor = useMemo(() => {\n    if (!dateTime) {\n      return \"white\";\n    }\n\n    const days = dateTime.diffNow(\"days\").days;\n    if (days < 30) {\n      return \"green\";\n    } else if (days < 60) {\n      return \"yellow\";\n    }\n\n    return \"red\";\n  }, [dateTime]);\n\n  return dateTime && dateTime > getLocalDateTime() ? (\n    <Tooltip title={tooltipStr}>\n      <Box color={countDownColor}>{countDownStr}</Box>\n    </Tooltip>\n  ) : (\n    children\n  );\n};\n","export const formatPercent = new Intl.NumberFormat(\"en-us\", {\n  style: \"percent\",\n  maximumFractionDigits: 1,\n}).format;\n","import { formatPercent } from \"shared/utility/format-percent\";\n\ninterface PercentProps {\n  value: number;\n}\nexport const Percent = ({ value }: PercentProps) => {\n  return formatPercent(value);\n};\n","import { Box } from \"@mui/material\";\nimport { ReactNode } from \"react\";\n\ninterface CellProps {\n  children?: ReactNode;\n  secondaryValue?: ReactNode;\n  tertiaryValue?: ReactNode;\n  title: string;\n  className?: string;\n}\n\nexport const Value = (props: CellProps) => {\n  const { children, secondaryValue, tertiaryValue, title, className } = props;\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        minWidth: 106,\n        height: 64,\n        padding: \"0px 8px\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"flex-start\",\n        gap: 0.5,\n        flexShrink: 0,\n      }}\n      className={className}\n    >\n      <Box display={\"flex\"} alignItems={\"center\"} gap={0.5}>\n        <Box fontSize={18} fontWeight={700} lineHeight={\"20px\"}>\n          {children ? children : \"?\"}\n        </Box>\n        {!!(secondaryValue ?? tertiaryValue) && (\n          <Box\n            alignSelf={\"flex-end\"}\n            fontSize={12}\n            fontWeight={500}\n            lineHeight={\"16px\"}\n            textTransform={\"uppercase\"}\n            color={\"#888\"}\n          >\n            {secondaryValue ?? tertiaryValue}\n          </Box>\n        )}\n      </Box>\n      <Box fontSize={12} fontWeight={500} lineHeight={\"16px\"} textTransform={\"uppercase\"}>\n        {title}\n      </Box>\n    </Box>\n  );\n};\n","import { Box, Divider, Stack, Typography } from \"@mui/material\";\nimport { DateTime } from \"luxon\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { Duration } from \"shared/components/formatters/duration\";\nimport { Percent } from \"shared/components/formatters/percent\";\nimport { BonusOutcomes } from \"shared/utility/min-max-avg\";\nimport { Value } from \"./value\";\n\nexport const BonusOutcome = (props: { title: string; outcome: BonusOutcomes; payDate: DateTime }) => {\n  const { outcome, title, payDate } = props;\n\n  return (\n    <Box sx={{ border: \"1px solid rgba(255,255,255,0.1)\", borderRadius: 2 }}>\n      <Typography\n        sx={{\n          paddingBottom: 1,\n          paddingLeft: 2,\n          paddingTop: 1,\n          paddingRight: 2,\n          width: \"max-content\",\n        }}\n        variant=\"h5\"\n      >\n        {title}\n      </Typography>\n      <Divider />\n      <Stack padding={1} direction={\"row\"} spacing={0.5} justifyContent={\"center\"}>\n        {!outcome.cash.actual && (\n          <>\n            <Value secondaryValue={<Percent value={outcome.percent.min} />} title={\"min\"}>\n              <Cash value={outcome.cash.min} fallback={0} />\n            </Value>\n            <Value secondaryValue={<Percent value={outcome.percent.avg} />} title={\"avg\"}>\n              <Cash value={outcome.cash.avg} fallback={0} />\n            </Value>\n            <Value secondaryValue={<Percent value={outcome.percent.max} />} title={\"max\"}>\n              <Cash value={outcome.cash.max} fallback={0} />\n            </Value>\n          </>\n        )}\n        <Value\n          title={\"Actual\"}\n          tertiaryValue={outcome.percent.actual && <Percent value={outcome.percent.actual} />}\n          secondaryValue={outcome.cash.actual && <Cash value={outcome.cash.actual} />}\n        >\n          <Duration dateTime={payDate}>\n            <Cash value={outcome.cash.actual} />\n          </Duration>\n        </Value>\n      </Stack>\n    </Box>\n  );\n};\n","import { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { TimeSeries } from \"shared/models/projected-income\";\nimport { store } from \".\";\n\nexport const updateProjectedIncomeDate = (timeSeries: TimeSeries, id: string, date: DateTime) => {\n  store.setState((prev) => {\n    const next = create(prev, (next) => {\n      const account = next.projectedIncome.timeSeries[timeSeries];\n      const idx = account.findIndex((x) => x.id === id);\n      account[idx].date = date.toISO()!;\n    });\n    return next;\n  });\n};\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\nimport UpdateIcon from \"@mui/icons-material/Update\";\nimport { Button, Tooltip } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { ColDef, ICellRendererParams } from \"ag-grid-community\";\nimport { CustomCellRendererProps } from \"ag-grid-react\";\nimport { DateTime } from \"luxon\";\nimport { AccountData } from \"shared/models/account-data\";\nimport { TimeSeries } from \"shared/models/projected-income\";\nimport { updateProjectedIncome } from \"shared/store\";\nimport { removeProjectedIncome } from \"shared/store/remove-projected-income\";\nimport { updateProjectedIncomeDate } from \"shared/store/update-projected-income-date\";\nimport { formatCash } from \"shared/utility/format-cash\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const createAccountColumnConfig = (\n  accountName: TimeSeries,\n  variant: \"number\" | \"cash\" | \"percent\"\n): ColDef<AccountData>[] => [\n  {\n    headerName: \"Date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\n    cellRenderer: (x: ICellRendererParams<unknown, DateTime>) => {\n      return (\n        <Stack direction={\"row\"} alignItems={\"center\"}>\n          {x.valueFormatted}&nbsp;\n          {x.value && x.value > DateTime.local() && (\n            <Tooltip title=\"Future Event\">\n              <UpdateIcon htmlColor=\"yellow\" />\n            </Tooltip>\n          )}\n        </Stack>\n      );\n    },\n    cellEditor: \"agDateCellEditor\",\n    editable: true,\n    valueSetter: (x) => {\n      updateProjectedIncomeDate(accountName, x.data.id, DateTime.fromJSDate(x.newValue));\n      return true;\n    },\n  },\n  {\n    headerName: \"Value\",\n    valueGetter: (x) => x.data?.value,\n    valueFormatter: (x) =>\n      variant === \"number\" ? x.value : variant === \"cash\" ? formatCash(x.value) : (x.value * 100).toFixed(2) + \"%\",\n    type: \"numericColumn\",\n    editable: true,\n    cellEditor: \"agNumberCellEditor\",\n    valueSetter: (x) => {\n      updateProjectedIncome(accountName, x.data.id, +x.newValue);\n      return true;\n    },\n  },\n  {\n    headerName: \"Actions\",\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\n      return (\n        <Button\n          onClick={() => {\n            props.data && removeProjectedIncome(accountName, props.data?.id);\n          }}\n          color=\"error\"\n        >\n          <DeleteForeverIcon />\n        </Button>\n      );\n    },\n  },\n];\n","import { Box, Button, InputAdornment, Paper, Stack, TextField, Tooltip, Typography } from \"@mui/material\";\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo, useState } from \"react\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { TimeSeries } from \"shared/models/projected-income\";\nimport { addProjectedIncome, store } from \"shared/store\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { createAccountColumnConfig } from \"./column-config\";\n\nexport const DataEntry = (props: {\n  timeSeries: TimeSeries;\n  defaultDate: DateTime;\n  variant?: \"number\" | \"cash\" | \"percent\";\n}) => {\n  const { timeSeries, defaultDate, variant = \"number\" } = props;\n  const account = useStore(store, (state) => state.projectedIncome.timeSeries[timeSeries]);\n\n  const [date, setDate] = useState(defaultDate);\n  const [amount, setAmount] = useState<number | null>(null);\n\n  const hasSameDate = useMemo(() => {\n    return !!account?.find((x) => date.hasSame(DateTime.fromISO(x.date), \"day\"));\n  }, [account, date]);\n\n  const onAddEntry = () => {\n    if (amount != null) {\n      addProjectedIncome(date, timeSeries, variant === \"percent\" ? amount / 100 : amount);\n      setAmount(null);\n    }\n  };\n\n  const accountColumnConfig = useMemo(() => {\n    return createAccountColumnConfig(timeSeries, variant);\n  }, [timeSeries, variant]);\n\n  return (\n    <Box display={\"flex\"} flexDirection={\"column\"} height=\"100%\">\n      <Stack spacing={2} flex=\"0 1 auto\">\n        <DatePicker\n          format={shortDate}\n          sx={{ color: \"white\" }}\n          label=\"Date\"\n          value={date}\n          onChange={(value) => {\n            console.log(value);\n            value && setDate(value);\n          }}\n        />\n        <TextField\n          label=\"amount\"\n          value={amount ?? \"\"}\n          type=\"number\"\n          onChange={(event) => (event.target.value === \"\" ? setAmount(null) : setAmount(+event.target.value))}\n          InputProps={{\n            startAdornment: variant !== \"number\" && (\n              <InputAdornment position=\"start\">{variant === \"cash\" ? \"$\" : \"%\"}</InputAdornment>\n            ),\n          }}\n        />\n        <Button disabled={amount === null || !date || hasSameDate} onClick={onAddEntry}>\n          Add Entry\n        </Button>\n      </Stack>\n      <Box sx={{ paddingTop: 2, flex: \"1 1 auto\" }}>\n        <AgGrid\n          reactiveCustomComponents\n          rowData={account ?? []}\n          columnDefs={accountColumnConfig}\n          id={account + \"-history\"}\n          autoSizeStrategy={{\n            type: \"fitGridWidth\",\n          }}\n          stopEditingWhenCellsLoseFocus\n        />\n      </Box>\n    </Box>\n  );\n};\n\nexport interface LayoutProps {\n  title: string;\n  accountName: TimeSeries;\n  defaultDate: DateTime;\n  variant: \"percent\" | \"number\" | \"cash\";\n}\n\nexport const Layout = (props: LayoutProps) => {\n  const { title, accountName, defaultDate, variant } = props;\n  return (\n    <Paper sx={{ padding: 2, height: \"100%\", width: 450, flexShrink: 0 }}>\n      <Box display=\"flex\" flexDirection=\"column\" height=\"100%\">\n        <Box flex=\"0 1 auto\" marginBottom={2}>\n          <Typography sx={{ marginBottom: 2 }} variant=\"h5\">\n            {title}{\" \"}\n            {variant === \"cash\" && (\n              <Tooltip\n                title={\n                  <>\n                    <span>Cash values are used in lieu of Percent values.</span>\n                    <br />\n                    <span>Cash values are considered actual payment values.</span>\n                  </>\n                }\n              >\n                <span>($)</span>\n              </Tooltip>\n            )}\n            {variant === \"percent\" && (\n              <Tooltip title=\"Percentage values are used for predictions.\">\n                <span>(%)</span>\n              </Tooltip>\n            )}\n          </Typography>\n        </Box>\n        <Box flex=\"1 1 auto\">\n          <DataEntry variant={variant} timeSeries={accountName} defaultDate={defaultDate} />\n        </Box>\n      </Box>\n    </Paper>\n  );\n};\n","import { DateTime } from \"luxon\";\nimport { ReactNode } from \"react\";\n\ninterface UntilProps {\n  dateTime?: DateTime;\n  children: ReactNode;\n}\n\nexport const Until = (props: UntilProps) => {\n  const { dateTime, children } = props;\n  return dateTime && DateTime.local() < dateTime && children;\n};\n","import { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { useProjectedPay } from \"shared/hooks/use-projected-pay\";\n\nexport const usePaycheck = (date: DateTime) => {\n  const paychecks = useProjectedPay();\n\n  const paycheck = useMemo(() => {\n    return paychecks.find(({ start }) => start.year === date.year)?.value ?? 0;\n  }, [date.year, paychecks]);\n\n  return paycheck;\n};\n","import ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\nimport { Table, TableBody, TableCell, TableRow } from \"@mui/material\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { IncomePerPeriod } from \"../../../shared/hooks/use-base-income\";\n\ninterface IncomePerPeriodTooltipProps {\n  incomePerPeriod: IncomePerPeriod[];\n  totalIncome: number;\n}\n\nexport const IncomePerPeriodTooltip = (props: IncomePerPeriodTooltipProps) => {\n  const { incomePerPeriod, totalIncome } = props;\n  return (\n    <Table sx={{ width: \"max-content\" }}>\n      <TableBody>\n        {incomePerPeriod.map(({ start, end, value, perPayday, count }, index) => {\n          return (\n            <TableRow key={index}>\n              <TableCell>\n                <Cash value={value} compact={false} />\n              </TableCell>\n              <TableCell>{start.toFormat(shortDate)}</TableCell>\n              <TableCell>\n                <ArrowForwardIcon />\n              </TableCell>\n              <TableCell>{end.toFormat(shortDate)}</TableCell>\n              <TableCell>\n                <Cash value={perPayday} compact={false} /> x {count}\n              </TableCell>\n            </TableRow>\n          );\n        })}\n        <TableRow>\n          <TableCell colSpan={4}>Total:</TableCell>\n          <TableCell>\n            <Cash value={totalIncome} compact={false} />\n          </TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  );\n};\n","import { Box, Divider, Stack, Tooltip, Typography } from \"@mui/material\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { Duration } from \"shared/components/formatters/duration\";\nimport { Percent } from \"shared/components/formatters/percent\";\nimport { Until } from \"shared/components/formatters/until\";\nimport { useBaseIncome } from \"shared/hooks/use-base-income\";\nimport { useDateRanges } from \"shared/hooks/use-dates\";\nimport { useMostFrequentValue } from \"shared/hooks/use-most-frequent-value\";\nimport { useProjectedPay } from \"shared/hooks/use-projected-pay\";\nimport { store } from \"shared/store\";\nimport { findSameYear } from \"shared/utility/find-same-year\";\nimport { usePaycheck } from \"../hooks/use-pay-check\";\nimport { IncomePerPeriodTooltip } from \"./income-per-period\";\nimport { Value } from \"./value\";\n\nexport const MeritOutcome = (props: { title: string; payDate: DateTime }) => {\n  const { title, payDate } = props;\n\n  const dateRanges = useDateRanges(payDate.year);\n  const income = useBaseIncome(dateRanges.base.start, dateRanges.base.end);\n\n  const projectedPay = useProjectedPay();\n  const baseAprToApr = useMemo(() => {\n    const pay = projectedPay.find((x) => {\n      return x.start <= payDate && payDate <= x.end;\n    });\n\n    return (pay?.value ?? 0) * 26;\n  }, [payDate, projectedPay]);\n\n  const meritIncreases = useStore(store, (x) => x.projectedIncome.timeSeries.meritIncreasePct);\n\n  const commonMerit = useMostFrequentValue(meritIncreases);\n  const meritPct = useStore(\n    store,\n    (x) => findSameYear(payDate, x.projectedIncome.timeSeries.meritIncreasePct)?.value ?? commonMerit\n  );\n\n  const equityPct = useStore(store, (x) => payDate && findSameYear(payDate, x.projectedIncome.timeSeries.equityPct));\n  const totalAdjust = (meritPct ?? 0) + (equityPct?.value ?? 0);\n  const paycheck = usePaycheck(payDate);\n\n  return (\n    <Box\n      sx={{\n        border: \"1px solid rgba(255,255,255,0.1)\",\n        borderRadius: 2,\n      }}\n    >\n      <Typography sx={{ paddingBottom: 1, paddingLeft: 2, paddingTop: 1 }} variant=\"h5\">\n        {title}\n      </Typography>\n      <Divider />\n\n      <Stack padding={1} direction={\"row\"} spacing={0.5}>\n        {\n          <Value title={\"Paycheck\"}>\n            <Cash value={paycheck} compact={false} />\n          </Value>\n        }\n        <Tooltip\n          componentsProps={{\n            tooltip: {\n              sx: {\n                maxWidth: \"none\",\n              },\n            },\n          }}\n          title={<IncomePerPeriodTooltip incomePerPeriod={income.incomePerPeriod} totalIncome={income.totalIncome} />}\n        >\n          <div>\n            <Value title={\"Base Pay\"}>\n              <Cash disableTooltip value={income.totalIncome ?? 0} />\n            </Value>\n          </div>\n        </Tooltip>\n\n        <Value title={\"APR to APR\"}>\n          <Cash value={baseAprToApr} />\n        </Value>\n\n        <Value\n          title={\"Actual\"}\n          secondaryValue={\n            <Until dateTime={payDate}>\n              <Percent value={totalAdjust} />\n            </Until>\n          }\n        >\n          <Duration dateTime={payDate}>\n            <Percent value={totalAdjust} />\n          </Duration>\n        </Value>\n      </Stack>\n    </Box>\n  );\n};\n","import { Box, Divider, Stack, Typography } from \"@mui/material\";\nimport { Outcome as TOutcome } from \"shared/utility/min-max-avg\";\nimport { Value } from \"./value\";\nimport { DateTime } from \"luxon\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { Duration } from \"shared/components/formatters/duration\";\nimport { Until } from \"shared/components/formatters/until\";\nimport { ReactNode } from \"react\";\n\nexport const Outcome = (props: { title: ReactNode; outcome: TOutcome; payDate?: DateTime }) => {\n  const { outcome, title, payDate } = props;\n\n  return (\n    <Box\n      sx={{\n        border: \"1px solid rgba(255,255,255,0.1)\",\n        borderRadius: 2,\n      }}\n    >\n      <Typography sx={{ paddingBottom: 1, paddingLeft: 2, paddingTop: 1 }} variant=\"h5\">\n        {title}\n      </Typography>\n      <Divider />\n\n      <Stack padding={1} direction={\"row\"} spacing={0.5}>\n        {!outcome.actual && (\n          <>\n            <Value title={\"min\"}>\n              <Cash value={outcome.min} fallback={0} />\n            </Value>\n            <Value title={\"avg\"}>\n              <Cash value={outcome.avg} fallback={0} />\n            </Value>\n            <Value title={\"max\"}>\n              <Cash value={outcome.max} fallback={0} />\n            </Value>\n          </>\n        )}\n        {payDate && (\n          <Value\n            title={\"Actual\"}\n            secondaryValue={\n              <Until dateTime={payDate}>\n                <Cash value={outcome.actual} />\n              </Until>\n            }\n          >\n            <Duration dateTime={payDate}>\n              <Cash value={outcome.actual} />\n            </Duration>\n          </Value>\n        )}\n      </Stack>\n    </Box>\n  );\n};\n","import { Box, Stack } from \"@mui/system\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useState } from \"react\";\nimport { useDates } from \"shared/hooks/use-dates\";\nimport { store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { useCompanyBonus } from \"../../shared/hooks/use-company-bonus\";\nimport { useMeritBonus } from \"../../shared/hooks/use-merit-bonus\";\nimport { useRetirementBonus } from \"../../shared/hooks/use-retirement-bonus\";\nimport { useTotalIncome } from \"../../shared/hooks/use-total-income\";\nimport { BonusOutcome } from \"./components/bonus-outcome\";\nimport { Layout } from \"./components/data-entry/data-entry\";\nimport { MeritOutcome } from \"./components/merit-increase\";\nimport { Outcome } from \"./components/outcome\";\n\nexport const ProjectedIncome = () => {\n  const [selectedYear, setSelectedYear] = useState(getLocalDateTime().year);\n\n  const oldestYear = useStore(store, (x) => {\n    const first = x.projectedIncome.timeSeries.paycheck[1]?.date;\n    const date = first ? DateTime.fromISO(first) : getLocalDateTime();\n    return date.year;\n  });\n\n  const dates = useDates(selectedYear);\n  const { totalIncome } = useTotalIncome(selectedYear);\n  const meritBonus = useMeritBonus(selectedYear);\n  const juneBonus = useCompanyBonus(selectedYear);\n  const julyBonus = useRetirementBonus(selectedYear);\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" height=\"100%\" gap={2}>\n      <Box flex=\"0 1 auto\">\n        <Stack gap={2} direction={\"row\"} overflow={\"auto\"}>\n          <Outcome\n            title={\n              <Box display=\"flex\" alignItems={\"center\"} gap={2} width={\"100%\"}>\n                <span>Income</span>\n                <DatePicker\n                  sx={{ width: 90, marginLeft: \"auto\", marginRight: 2 }}\n                  label={\"year\"}\n                  views={[\"year\"]}\n                  minDate={getLocalDateTime().set({ year: oldestYear })}\n                  maxDate={getLocalDateTime().plus({ years: 10 })}\n                  defaultValue={getLocalDateTime()}\n                  slotProps={{\n                    textField: {\n                      variant: \"standard\",\n                      label: \"\",\n                    },\n                  }}\n                  onYearChange={(year) => {\n                    setSelectedYear(year.year);\n                  }}\n                />\n              </Box>\n            }\n            outcome={totalIncome}\n            payDate={dates.companyBonus}\n          />\n          <MeritOutcome title=\"Merit Increase\" payDate={dates.meritIncrease} />\n          <BonusOutcome title=\"Merit Bonus\" outcome={meritBonus} payDate={dates.meritBonus} />\n          <BonusOutcome title=\"Company Bonus\" outcome={juneBonus} payDate={dates.companyBonus} />\n          <BonusOutcome title=\"Retirement Bonus\" outcome={julyBonus} payDate={dates.retirementBonus} />\n        </Stack>\n      </Box>\n      <Box flex=\"1 1 auto\">\n        <Box overflow={\"auto\"} width={\"100%\"} height={\"100%\"}>\n          <Box height={\"100%\"} display={\"flex\"} gap={2} flexWrap={\"nowrap\"} flexShrink={0}>\n            <Layout\n              accountName=\"paycheck\"\n              variant=\"cash\"\n              defaultDate={DateTime.fromObject({\n                day: 1,\n                month: 4,\n                year: selectedYear,\n              })}\n              title=\"Income Per Paycheck\"\n            />\n            <Layout\n              title=\"Merit Increase\"\n              accountName=\"meritIncreasePct\"\n              variant=\"percent\"\n              defaultDate={dates.meritIncrease}\n            />\n            <Layout\n              title=\"Equity Increase\"\n              accountName=\"equityPct\"\n              variant=\"percent\"\n              defaultDate={dates.meritIncrease}\n            />\n            <Layout title=\"Merit Bonus\" accountName=\"meritBonusPct\" variant=\"percent\" defaultDate={dates.meritBonus} />\n            <Layout title=\"Merit Bonus\" accountName=\"meritBonus\" variant=\"cash\" defaultDate={dates.meritBonus} />\n            <Layout\n              title=\"Company Bonus Factor\"\n              accountName=\"companyBonusPct\"\n              defaultDate={dates.companyBonus}\n              variant=\"percent\"\n            />\n            <Layout title=\"Company Bonus\" accountName=\"companyBonus\" defaultDate={dates.companyBonus} variant=\"cash\" />\n            <Layout\n              title=\"Retirement Bonus\"\n              accountName=\"retirementBonus\"\n              defaultDate={dates.retirementBonus}\n              variant=\"cash\"\n            />\n          </Box>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n","import { create } from \"mutative\";\nimport { ProjectedWealthConfig } from \"shared/models/projected-wealth\";\nimport { store } from \".\";\n\nexport const setProjectedWealth = (configName: ProjectedWealthConfig, value: number) => {\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      next.projectedWealth[configName] = value;\n    });\n  });\n};\n","import { InputAdornment, TextField } from \"@mui/material\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { useCallback, useState } from \"react\";\nimport { ProjectedWealth } from \"shared/models/projected-wealth\";\nimport { store } from \"shared/store\";\nimport { setProjectedWealth } from \"shared/store/set-projected-wealth\";\n\ninterface ConfigEntryProps {\n  configName: keyof ProjectedWealth;\n  label: string;\n  variant?: \"cash\" | \"percent\";\n}\n\nexport const ConfigEntry = (props: ConfigEntryProps) => {\n  const { configName, label, variant = \"cash\" } = props;\n  const [error, setError] = useState(false);\n  const isPercent = variant === \"percent\";\n\n  const onchange = useCallback(\n    (input: string) => {\n      let value = +input;\n      const isNan = Number.isNaN(value);\n      setError(isNan);\n      if (isNan) {\n        return;\n      }\n\n      if (isPercent) {\n        value /= 100;\n      }\n\n      setProjectedWealth(configName, value);\n    },\n    [configName, isPercent]\n  );\n\n  const value = useStore(store, (x) => x.projectedWealth[configName]);\n  const defaultValue = isPercent ? value * 100 : value;\n\n  return (\n    <TextField\n      error={error}\n      variant=\"outlined\"\n      InputProps={{\n        startAdornment: <InputAdornment position=\"start\">{isPercent ? \"%\" : \"$\"}</InputAdornment>,\n      }}\n      defaultValue={defaultValue.toFixed(isPercent ? 2 : 0)}\n      type=\"numeric\"\n      label={label}\n      onChange={(event) => {\n        onchange(event.target.value);\n      }}\n    />\n  );\n};\n","import { Typography } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { ConfigEntry } from \"./config-entry\";\n\nexport const Config = () => {\n  return (\n    <Stack spacing={2}>\n      <Typography variant=\"h5\">Configuration</Typography>\n      <ConfigEntry configName=\"savingsPerMonth\" label=\"Monthly Saving Rate\" />\n      <ConfigEntry configName=\"retirementContributionPaycheck\" label=\"Retirement Contribution Per Paycheck\" />\n      <Stack direction={\"row\"} spacing={2} width={\"100%\"} sx={{ \"& > *\": { flex: 1 } }}>\n        <ConfigEntry configName=\"socialSecurityLimit\" label=\"Social Security Tax Limit\" />\n        <ConfigEntry configName=\"socialSecurityTaxRate\" label=\"Social Security Tax\" variant=\"percent\" />\n      </Stack>\n      <Stack direction={\"row\"} spacing={2} width={\"100%\"} sx={{ \"& > *\": { flex: 1 } }}>\n        <ConfigEntry configName=\"medicareSupplementalTaxThreshold\" label=\"Medicare Supplemental Threshold\" />\n        <ConfigEntry configName=\"medicareSupplementalTaxRate\" label=\"Medicare Supplemental Tax\" variant=\"percent\" />\n      </Stack>\n    </Stack>\n  );\n};\n","import { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { useCompanyBonus } from \"shared/hooks/use-company-bonus\";\nimport { useDates } from \"shared/hooks/use-dates\";\nimport { useMeritBonus } from \"shared/hooks/use-merit-bonus\";\nimport { useRetirementBonus } from \"shared/hooks/use-retirement-bonus\";\n\nexport const useFutureBonuses = () => {\n  const local = DateTime.local();\n  const year = local.year;\n  const dates = useDates(year);\n  const meritBonus = useMeritBonus(year);\n  const companyBonus = useCompanyBonus(year);\n  const retirementBonus = useRetirementBonus(year);\n\n  const bonuses = useMemo(() => {\n    return (\n      [\n        [dates.meritBonus, meritBonus.cash.actual ?? meritBonus.cash.avg],\n        [dates.companyBonus, companyBonus.cash.actual ?? companyBonus.cash.avg],\n        [dates.retirementBonus, retirementBonus.cash.actual ?? retirementBonus.cash.avg],\n      ] as [DateTime, number][]\n    )\n      .map(([payedOn, amount]) => (local < payedOn ? amount : 0))\n      .reduce((acc, curr) => acc + curr, 0);\n  }, [\n    dates.meritBonus,\n    dates.companyBonus,\n    dates.retirementBonus,\n    meritBonus.cash.actual,\n    meritBonus.cash.avg,\n    companyBonus.cash.actual,\n    companyBonus.cash.avg,\n    retirementBonus.cash.actual,\n    retirementBonus.cash.avg,\n    local,\n  ]);\n\n  return bonuses;\n};\n","import { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { useBaseIncome } from \"shared/hooks/use-base-income\";\nimport { useCompanyBonus } from \"shared/hooks/use-company-bonus\";\nimport { useDateRanges, useDates } from \"shared/hooks/use-dates\";\nimport { useMeritBonus } from \"shared/hooks/use-merit-bonus\";\nimport { findNearestIdxOnOrBefore } from \"shared/utility/find-nearest-on-or-before\";\n\nexport const usePayments = () => {\n  const year = DateTime.local().year;\n  const dateRanges = useDateRanges(year);\n  const dates = useDates(year);\n  const { payPeriods } = useBaseIncome(dateRanges.base.start, dateRanges.base.end);\n\n  const merit = useMeritBonus(year);\n  const companyBonus = useCompanyBonus(year);\n\n  return useMemo(() => {\n    const cumulativePay = payPeriods.map((x) => {\n      return { ...x, cumulative: 0 };\n    });\n\n    const payBeforeMerit = findNearestIdxOnOrBefore(dates.meritBonus, cumulativePay, (x) => x.payedOn);\n\n    cumulativePay.splice(payBeforeMerit + 1, 0, {\n      cumulative: 0,\n      value: merit.cash.actual ?? merit.cash.avg,\n      start: dates.meritBonus,\n      end: dates.meritBonus,\n      payedOn: dates.meritBonus,\n    });\n\n    const payBeforeCompanyBonus = findNearestIdxOnOrBefore(dates.companyBonus, cumulativePay, (x) => x.payedOn);\n\n    cumulativePay.splice(payBeforeCompanyBonus + 1, 0, {\n      cumulative: 0,\n      value: companyBonus.cash.actual ?? companyBonus.cash.avg,\n      start: dates.companyBonus,\n      end: dates.companyBonus,\n      payedOn: dates.companyBonus,\n    });\n\n    cumulativePay.forEach((x, i, arr) => {\n      x.cumulative = i > 0 ? arr[i - 1].cumulative + x.value : x.value;\n    });\n\n    const previousPay = findNearestIdxOnOrBefore(DateTime.local(), payPeriods, (x) => x.payedOn);\n\n    const remainingPayments = payPeriods.length - previousPay;\n\n    return {\n      payments: cumulativePay,\n      nextPaymentIdx: previousPay + 1,\n      numRemaining: remainingPayments,\n      totalBasePayments: payPeriods.length,\n      totalPayments: cumulativePay.length,\n    };\n  }, [\n    companyBonus.cash.actual,\n    companyBonus.cash.avg,\n    dates.companyBonus,\n    dates.meritBonus,\n    merit.cash.actual,\n    merit.cash.avg,\n    payPeriods,\n  ]);\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { usePayments } from \"./use-payments\";\n\nexport const useFutureMedicareTax = () => {\n  const { payments, nextPaymentIdx } = usePayments();\n  const config = useStore(store, (x) => x.projectedWealth);\n\n  return useMemo(() => {\n    const total =\n      config.medicareSupplementalTaxRate *\n      Math.min(0, config.medicareSupplementalTaxThreshold - (payments.at(-1)?.cumulative ?? 0));\n\n    const firstOccurrence = payments.find((x) => x.cumulative >= config.medicareSupplementalTaxThreshold)?.payedOn;\n\n    const remaining = payments\n      .slice(nextPaymentIdx)\n      .filter((x) => x.cumulative >= config.medicareSupplementalTaxThreshold)\n      .reduce((acc, curr) => {\n        return (\n          acc -\n          Math.min(curr.value, curr.cumulative - config.medicareSupplementalTaxThreshold) *\n            config.medicareSupplementalTaxRate\n        );\n      }, 0);\n\n    const perPaycheck = total && (payments.at(-1)?.value ?? 0) * config.medicareSupplementalTaxRate;\n\n    return {\n      total,\n      remaining,\n      perPaycheck,\n      firstOccurrence,\n    };\n  }, [config.medicareSupplementalTaxRate, config.medicareSupplementalTaxThreshold, nextPaymentIdx, payments]);\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { usePayments } from \"./use-payments\";\n\nexport const useFutureRetirementContributions = () => {\n  const { numRemaining } = usePayments();\n  const retirementContribution = useStore(store, (x) => x.projectedWealth.retirementContributionPaycheck);\n\n  return useMemo(() => {\n    return {\n      remaining: numRemaining * retirementContribution,\n      perPaycheck: retirementContribution,\n    };\n  }, [numRemaining, retirementContribution]);\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\n\nexport const useFutureSavings = () => {\n  const config = useStore(store, (x) => x.projectedWealth);\n  return useMemo(() => {\n    const systemYear = getLocalDateTime().year;\n    return {\n      remaining:\n        config.savingsPerMonth *\n        DateTime.fromObject({\n          day: 31,\n          month: 12,\n          year: systemYear,\n        })\n          .endOf(\"day\")\n          .diffNow(\"months\").months,\n      perMonth: config.savingsPerMonth,\n    };\n  }, [config.savingsPerMonth]);\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { usePayments } from \"./use-payments\";\n\nexport const useFutureSocialSecurity = () => {\n  const { payments, nextPaymentIdx } = usePayments();\n  const config = useStore(store, (x) => x.projectedWealth);\n\n  return useMemo(() => {\n    const total =\n      config.socialSecurityTaxRate * Math.max(0, (payments.at(-1)?.cumulative ?? 0) - config.socialSecurityLimit);\n    const firstOccurrence = payments.find((x) => x.cumulative >= config.socialSecurityLimit)?.payedOn;\n\n    const remaining = payments\n      .slice(nextPaymentIdx)\n      .filter((x) => x.cumulative >= config.socialSecurityLimit)\n      .reduce((acc, curr) => {\n        return acc + Math.min(curr.value, curr.cumulative - config.socialSecurityLimit) * config.socialSecurityTaxRate;\n      }, 0);\n\n    const perPaycheck = total && config.socialSecurityTaxRate * (payments.at(-1)?.value ?? 0);\n\n    return {\n      total,\n      remaining,\n      perPaycheck,\n      firstOccurrence,\n    };\n  }, [config.socialSecurityLimit, config.socialSecurityTaxRate, nextPaymentIdx, payments]);\n};\n","import { DateTime } from \"luxon\";\nimport { ReactNode } from \"react\";\n\ninterface BeforeAfterProps {\n  dateTime?: DateTime;\n  before?: ReactNode;\n  after?: ReactNode;\n}\n\nexport const BeforeAfter = (props: BeforeAfterProps) => {\n  const { dateTime, before, after } = props;\n\n  if (!dateTime) {\n    return null;\n  }\n\n  return DateTime.local() < dateTime ? before : after;\n};\n","import { Typography } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { Value } from \"capabilities/projected-income/components/value\";\nimport { useFutureBonuses } from \"capabilities/projected-wealth/hooks/use-future-bonuses\";\nimport { useFutureMedicareTax } from \"capabilities/projected-wealth/hooks/use-future-medicare-tax\";\nimport { useFutureRetirementContributions } from \"capabilities/projected-wealth/hooks/use-future-retirement-contributions\";\nimport { useFutureSavings } from \"capabilities/projected-wealth/hooks/use-future-savings\";\nimport { useFutureSocialSecurity } from \"capabilities/projected-wealth/hooks/use-future-social-security\";\nimport { DateTime } from \"luxon\";\nimport { BeforeAfter } from \"shared/components/formatters/before-after\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { Duration } from \"shared/components/formatters/duration\";\nimport { useCompanyBonus } from \"shared/hooks/use-company-bonus\";\nimport { useDates } from \"shared/hooks/use-dates\";\nimport { useMeritBonus } from \"shared/hooks/use-merit-bonus\";\nimport { useRetirementBonus } from \"shared/hooks/use-retirement-bonus\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { monthDay } from \"shared/utility/format-date\";\n\nconst isFuture = (date: DateTime) => date.diffNow(\"milliseconds\").milliseconds > 0;\n\nexport const FutureEvents = () => {\n  const dates = useDates();\n  const systemYear = getLocalDateTime().year;\n  const savings = useFutureSavings();\n  const retirement = useFutureRetirementContributions();\n  const medicare = useFutureMedicareTax();\n  const socialSecurity = useFutureSocialSecurity();\n  const meritBonus = useMeritBonus(systemYear);\n  const companyBonus = useCompanyBonus(systemYear);\n  const retirementBonus = useRetirementBonus(systemYear);\n  const totalFutureBonuses = useFutureBonuses();\n\n  const total =\n    totalFutureBonuses + savings.remaining + retirement.remaining + socialSecurity.remaining + medicare.remaining;\n\n  return (\n    <>\n      <Typography variant=\"h5\">\n        {systemYear} Remaining Projected Wealth <Cash value={total} />\n      </Typography>\n      <Stack direction={\"row\"} sx={{ \"&& > *\": { minWidth: 210 } }}>\n        {isFuture(dates.meritBonus) && (\n          <Value title={\"merit bonus\"} secondaryValue={<Cash value={meritBonus.cash.actual ?? meritBonus.cash.avg} />}>\n            <Duration dateFormat={monthDay} variant=\"date\" dateTime={dates.meritBonus} />\n          </Value>\n        )}\n        {isFuture(dates.companyBonus) && (\n          <Value\n            title={\"company bonus\"}\n            secondaryValue={<Cash value={companyBonus.cash.actual ?? companyBonus.cash.avg} />}\n          >\n            <Duration variant=\"date\" dateFormat={monthDay} dateTime={dates.companyBonus} />\n          </Value>\n        )}\n        {isFuture(dates.retirementBonus) && (\n          <Value\n            title={\"retirement bonus\"}\n            secondaryValue={<Cash value={retirementBonus.cash.actual ?? retirementBonus.cash.avg} />}\n          >\n            <Duration dateFormat={monthDay} variant=\"date\" dateTime={dates.retirementBonus} />\n          </Value>\n        )}\n      </Stack>\n      <Stack direction={\"row\"} sx={{ \"&& > *\": { minWidth: 210 } }}>\n        {!!socialSecurity.total && (\n          <Value\n            title={\"social security cap\"}\n            secondaryValue={\n              <BeforeAfter\n                dateTime={socialSecurity.firstOccurrence}\n                before={<Cash tooltip=\"Remaining\" value={socialSecurity.remaining} />}\n                after={<Cash tooltip=\"Per Paycheck\" value={socialSecurity.perPaycheck} />}\n              />\n            }\n          >\n            <Duration dateFormat={monthDay} variant=\"date\" dateTime={socialSecurity.firstOccurrence}>\n              <Cash tooltip=\"Remaining\" value={socialSecurity.remaining} />\n            </Duration>\n          </Value>\n        )}\n        {!!medicare.total && (\n          <Value\n            title={\"medicare supplemental tax\"}\n            secondaryValue={\n              <BeforeAfter\n                dateTime={medicare.firstOccurrence}\n                before={<Cash tooltip=\"Total\" value={medicare.remaining} />}\n                after={<Cash tooltip=\"Per Paycheck\" value={medicare.perPaycheck} />}\n              />\n            }\n          >\n            <Duration dateFormat={monthDay} variant=\"date\" dateTime={medicare.firstOccurrence}>\n              <Cash tooltip=\"Remaining\" value={medicare.remaining} />\n            </Duration>\n          </Value>\n        )}\n      </Stack>\n      <Stack direction={\"row\"} sx={{ \"&& > *\": { minWidth: 210 } }}>\n        {!!savings.perMonth && (\n          <Value title={\"Expected savings\"} secondaryValue={<Cash tooltip=\"Per Month\" value={savings.perMonth} />}>\n            <Cash tooltip=\"Total Remaining\" value={savings.remaining} />\n          </Value>\n        )}\n        {!!retirement.perPaycheck && (\n          <Value\n            title={\"retirement contribution\"}\n            secondaryValue={<Cash tooltip=\"Per Paycheck\" value={retirement.perPaycheck} />}\n          >\n            <Cash tooltip=\"Total Remaining\" value={retirement.remaining} />\n          </Value>\n        )}\n      </Stack>\n    </>\n  );\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\n\nexport const useEarliestAccountEntry = () => {\n  const accounts = useStore(store, (x) => x.wealth);\n  return DateTime.fromMillis(\n    Object.values(accounts)\n      .map((x) => {\n        if (x.type === \"account\") {\n          return x.data[0]?.date ? DateTime.fromISO(x.data[0].date) : getLocalDateTime();\n        }\n        return getLocalDateTime();\n      })\n      .reduce((acc, curr) => Math.min(acc, curr?.toMillis() ?? Infinity), getLocalDateTime().toMillis()),\n  );\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { findNearestOnOrBefore } from \"shared/utility/find-nearest-on-or-before\";\nimport { calcEquity, calcLoanBalance } from \"shared/utility/mortgage-calc\";\nimport { useEarliestAccountEntry } from \"./use-earliest-account-entry\";\nimport { useFutureBonuses } from \"./use-future-bonuses\";\nimport { useFutureMedicareTax } from \"./use-future-medicare-tax\";\nimport { useFutureRetirementContributions } from \"./use-future-retirement-contributions\";\nimport { useFutureSavings } from \"./use-future-savings\";\nimport { useFutureSocialSecurity } from \"./use-future-social-security\";\n\nexport interface TimeSeriesWealth {\n  graphDate: Date;\n  date: DateTime;\n  wealth: number;\n  yoyCash?: number;\n  yoyPct?: number;\n}\n\nexport const useTimeSeriesWealth = () => {\n  const localDateTime = getLocalDateTime();\n  const earliest = useEarliestAccountEntry();\n  const accounts = useStore(store, (x) => x.wealth);\n  const bonuses = useFutureBonuses();\n  const savings = useFutureSavings();\n  const ssiTaxValue = useFutureSocialSecurity();\n  const medicareTaxValue = useFutureMedicareTax();\n  const retirementContribution = useFutureRetirementContributions();\n\n  const data = useMemo(() => {\n    if (!earliest.isValid) {\n      return [];\n    }\n\n    const futureWealth =\n      bonuses +\n      savings.remaining +\n      retirementContribution.remaining +\n      ssiTaxValue.remaining +\n      medicareTaxValue.remaining;\n\n    const dates = new Array(localDateTime.year + 2 - earliest.year)\n      .fill(earliest.year)\n      .map((x, i) => DateTime.fromObject({ day: 1, month: 1, year: x + i }).startOf(\"day\"));\n\n    if (!localDateTime.equals(dates[dates.length - 2])) {\n      dates.splice(-1, 0, localDateTime);\n    }\n\n    return dates\n      .map((date, idx, arr) => {\n        const isLast = idx === arr.length - 1;\n        const accountWealth = Object.values(accounts)\n          .map((x) => {\n            if (x.type === \"mortgage\" && x.loan) {\n              const houseValue = findNearestOnOrBefore(date, x.data);\n              const balance = calcLoanBalance(date, x.loan);\n              return calcEquity(x.loan.ownershipPct, houseValue?.value, balance, x.loan.principal);\n            } else if (x.type === \"account\") {\n              const entry = findNearestOnOrBefore(date, x.data);\n              return entry?.value ?? 0;\n            }\n            return 0;\n          })\n          .reduce((acc, curr) => acc + curr, 0);\n\n        return {\n          date,\n          graphDate: date.toJSDate(),\n          wealth: accountWealth + (isLast ? futureWealth : 0),\n        };\n      })\n      .map((x, idx, arr) => {\n        if (idx !== arr.length - 1) {\n          const benchmarkWealth = arr[idx - 1]?.wealth;\n          if (!benchmarkWealth) {\n            return x;\n          }\n          return {\n            ...x,\n            yoyCash: x.wealth - benchmarkWealth,\n            yoyPct: x.wealth / benchmarkWealth - 1,\n          };\n        }\n\n        const benchmarkWealth = arr[idx - 2]?.wealth;\n        if (!benchmarkWealth) {\n          return x;\n        }\n        return {\n          ...x,\n          yoyCash: x.wealth - benchmarkWealth,\n          yoyPct: x.wealth / benchmarkWealth - 1,\n        };\n      });\n  }, [\n    earliest.isValid,\n    earliest.year,\n    bonuses,\n    savings.remaining,\n    retirementContribution.remaining,\n    ssiTaxValue.remaining,\n    medicareTaxValue.remaining,\n    localDateTime,\n    accounts,\n  ]);\n  return data as TimeSeriesWealth[];\n};\n","import { AgCartesianChartOptions, AgLineSeriesOptions } from \"ag-charts-community\";\nimport { AgChartsReact } from \"ag-charts-react\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { useTimeSeriesWealth } from \"../hooks/use-times-series-wealth\";\n\nexport const WealthChart = () => {\n  const data = useTimeSeriesWealth();\n\n  const series = useMemo(() => {\n    return [\n      {\n        type: \"line\",\n        xKey: \"graphDate\",\n        yKey: \"wealth\",\n        yName: \"Wealth\",\n        tooltip: {\n          renderer: ({ datum, yKey, xKey }) => ({\n            content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCash(datum[yKey])}`,\n          }),\n        },\n      },\n      {\n        type: \"line\",\n        xKey: \"graphDate\",\n        yKey: \"yoyCash\",\n        yName: \"YoY ($)\",\n        tooltip: {\n          renderer: ({ datum, yKey, xKey }) => ({\n            content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCash(datum[yKey])}`,\n          }),\n        },\n      },\n    ] as AgLineSeriesOptions[];\n  }, []);\n\n  const options: AgCartesianChartOptions = useMemo(\n    () => ({\n      theme: \"ag-default-dark\",\n      title: {\n        text: `${data[data.length - 1].date.toFormat(shortDate)} Projected wealth ${formatCashShort(\n          (data[data.length - 1]?.wealth ?? 0) as number,\n        )}`,\n      },\n      data,\n      axes: [\n        {\n          type: \"time\",\n          position: \"bottom\",\n          label: {\n            format: \"%Y\",\n          },\n        },\n        {\n          type: \"number\",\n          position: \"left\",\n          nice: false,\n        },\n      ],\n      series,\n    }),\n    [data, series],\n  );\n  return <AgChartsReact options={options} />;\n};\n","import QueryStatsIcon from \"@mui/icons-material/QueryStats\";\nimport UpdateIcon from \"@mui/icons-material/Update\";\nimport { Tooltip } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { ColDef, ICellRendererParams } from \"ag-grid-community\";\nimport { DateTime } from \"luxon\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { formatCash } from \"shared/utility/format-cash\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { formatPercent } from \"shared/utility/format-percent\";\nimport { TimeSeriesWealth } from \"../../hooks/use-times-series-wealth\";\n\nexport const columnConfig: ColDef<TimeSeriesWealth>[] = [\n  {\n    headerName: \"Date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data?.date,\n    cellRenderer: (x: ICellRendererParams<unknown, DateTime>) => {\n      const systemYear = getLocalDateTime().year;\n      return (\n        <Stack direction={\"row\"} alignItems={\"center\"}>\n          {x.valueFormatted}&nbsp;\n          {x.value && x.value > getLocalDateTime() && (\n            <Tooltip title=\"Future Event\">\n              <UpdateIcon htmlColor=\"yellow\" />\n            </Tooltip>\n          )}\n          {x.value &&\n            x.value.equals(\n              DateTime.fromObject({\n                day: 1,\n                month: 1,\n                year: systemYear,\n              })\n            ) && (\n              <Tooltip title=\"Benchmark for current and future entries\">\n                <QueryStatsIcon htmlColor=\"yellow\" />\n              </Tooltip>\n            )}\n        </Stack>\n      );\n    },\n  },\n  {\n    headerName: \"Wealth\",\n    valueGetter: (x) => x.data?.wealth,\n    valueFormatter: (x) => formatCash(x.data?.wealth ?? 0),\n  },\n  {\n    headerName: \"YoY ($)\",\n    valueGetter: (x) => x.data?.yoyCash,\n    valueFormatter: (x) => (x.value != undefined ? formatCash(x.value) : \"\"),\n  },\n  {\n    headerName: \"YoY (%)\",\n    valueGetter: (x) => x.data?.yoyPct,\n    valueFormatter: (x) => (x.value !== undefined ? formatPercent(x.value) : \"\"),\n  },\n];\n","import { useTimeSeriesWealth } from \"capabilities/projected-wealth/hooks/use-times-series-wealth\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { columnConfig } from \"./colum-config\";\n\nexport const WealthTable = () => {\n  const data = useTimeSeriesWealth();\n\n  return (\n    <AgGrid\n      id=\"time-series-wealth\"\n      rowData={data}\n      columnDefs={columnConfig}\n      autoSizeStrategy={{ type: \"fitGridWidth\" }}\n    />\n  );\n};\n","import { Grid, Paper } from \"@mui/material\";\nimport { Config } from \"./components/config\";\nimport { FutureEvents } from \"./components/future-events\";\nimport { WealthChart } from \"./components/wealth-chart\";\nimport { WealthTable } from \"./components/wealth-table\";\n\nexport const ProjectedWealth = () => {\n  return (\n    <Grid container height={\"100%\"} spacing={2}>\n      <Grid item xs={6} height={\"50%\"}>\n        <WealthChart />\n      </Grid>\n      <Grid item xs={6} height={\"50%\"}>\n        <Paper sx={{ padding: 2, height: \"100%\" }}>\n          <Config />\n        </Paper>\n      </Grid>\n      <Grid item xs={6} height={\"50%\"}>\n        <WealthTable />\n      </Grid>\n      <Grid item xs={6} height={\"50%\"}>\n        <Paper sx={{ padding: 2, height: \"100%\" }}>\n          <FutureEvents />\n        </Paper>\n      </Grid>\n    </Grid>\n  );\n};\n","import { LinearProgress } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\n\nexport const CountDown = (props: { timeMs: number }) => {\n  const { timeMs } = props;\n  const [time, setTime] = useState(timeMs);\n\n  useEffect(() => {\n    const intervalMs = 100;\n    const interval = setInterval(() => {\n      setTime((prev) => {\n        const remaining = prev - intervalMs;\n        if (remaining < 0) {\n          clearInterval(interval);\n          return 0;\n        }\n        return remaining;\n      });\n    }, 100);\n    return () => clearInterval(interval);\n  }, [props.timeMs]);\n\n  return <LinearProgress value={(time / timeMs) * 100} variant=\"determinate\" color=\"inherit\" />;\n};\n","import { Box, Button, ButtonProps, Stack } from \"@mui/material\";\nimport { ReactNode, useEffect, useState } from \"react\";\nimport { CountDown } from \"./count-down\";\n\ntype SafetyState = \"inactive\" | \"activating\" | \"active\" | \"confirmed\";\n\ninterface SafetyButtonProps {\n  inactiveLabel: string;\n  activatingLabel: string;\n  activeLabel: string;\n  confirmedLabel: string;\n  icon?: ReactNode;\n  onConfirm: () => void;\n}\n\nexport const SafetyButton = (props: Omit<ButtonProps, \"children\"> & SafetyButtonProps) => {\n  const { inactiveLabel, activatingLabel, activeLabel, confirmedLabel, onConfirm, icon, disabled, ...rest } = props;\n  const [safetyState, setSafetyState] = useState<SafetyState>(\"inactive\");\n\n  useEffect(() => {\n    if (safetyState === \"active\") {\n      setTimeout(() => {\n        setSafetyState((prev) => {\n          return prev === \"active\" ? \"inactive\" : prev;\n        });\n      }, 3200);\n    } else if (safetyState === \"activating\") {\n      setTimeout(() => {\n        setSafetyState(\"active\");\n      }, 1000);\n    } else if (safetyState === \"confirmed\") {\n      setTimeout(() => {\n        setSafetyState(\"inactive\");\n      }, 3200);\n    }\n  }, [safetyState]);\n\n  return (\n    <Box\n      sx={{\n        minWidth: 130,\n      }}\n    >\n      <Button\n        {...rest}\n        sx={{ height: \"100%\", width: \"100%\" }}\n        disabled={disabled || safetyState === \"activating\" || safetyState === \"confirmed\"}\n        size=\"small\"\n        onClick={() => {\n          safetyState === \"inactive\" && setSafetyState(\"activating\");\n          if (safetyState === \"active\") {\n            onConfirm?.();\n            setSafetyState(\"confirmed\");\n          }\n        }}\n      >\n        <Stack>\n          <Stack direction={\"row\"}>\n            {icon}\n            {safetyState === \"inactive\" && inactiveLabel}\n            {safetyState === \"activating\" && activatingLabel}\n            {safetyState === \"active\" && activeLabel}\n            {safetyState === \"confirmed\" && confirmedLabel}\n          </Stack>\n          {safetyState === \"active\" && <CountDown timeMs={2800} />}\n          {safetyState === \"activating\" && <CountDown timeMs={500} />}\n        </Stack>\n      </Button>\n    </Box>\n  );\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { useCallback } from \"react\";\nimport { store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const downloadJson = <T,>(filename: string, storeData: T) => {\n  const data = JSON.stringify(storeData, null, 2);\n  const link = document.createElement(\"a\");\n  link.download = filename;\n  const blob = new Blob([data], { type: \"application/json\" });\n  link.href = window.URL.createObjectURL(blob);\n  link.click();\n};\n\nexport const useExport = () => {\n  const storeData = useStore(store);\n  const onExport = useCallback(() => {\n    downloadJson(`wealth-tracker-${getLocalDateTime().toFormat(shortDate)}.json`, storeData);\n  }, [storeData]);\n\n  return onExport;\n};\n","import { useCallback } from \"react\";\nimport { storeValidator } from \"shared/models/store\";\nimport { store } from \"shared/store\";\n\nfunction selectFile(contentType: string) {\n  return new Promise<File>((resolve) => {\n    const input = document.createElement(\"input\");\n    input.type = \"file\";\n    input.multiple = false;\n    input.accept = contentType;\n\n    input.onchange = () => {\n      const files = Array.from(input.files ?? []);\n      resolve(files[0]);\n    };\n\n    input.click();\n  });\n}\n\nexport const useImport = () => {\n  return useCallback(() => {\n    return new Promise<void>((resolve, reject) => {\n      selectFile(\"application/json\").then((file) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = (readerEvent) => {\n          const content = readerEvent.target?.result?.toString();\n          if (content) {\n            const data = JSON.parse(window.atob(content.split(\",\")[1]));\n            const validation = storeValidator.safeParse(data);\n            validation.success && store.setState(() => data);\n            validation.success ? resolve() : reject(validation.error);\n          }\n        };\n      });\n    });\n  }, []);\n};\n","import { useMemo } from \"react\";\nimport { storeValidator } from \"shared/models/store\";\n\nexport const useStoreDataError = () => {\n  const invalidData = localStorage.getItem(\"store-invalid\");\n  return useMemo(() => {\n    if (!invalidData) {\n      return { hadError: false };\n    }\n    const validated = storeValidator.safeParse(JSON.parse(invalidData));\n    return {\n      hadError: !!invalidData,\n      invalidData: JSON.stringify(invalidData, null, 2),\n      parseError: invalidData && !validated.success ? validated.error : undefined,\n      resetError: () => {\n        localStorage.removeItem(\"store-invalid\");\n      },\n    };\n  }, [invalidData]);\n};\n","import { Box, Table, TableBody, TableCell, TableHead, TableRow } from \"@mui/material\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport { ReactNode } from \"react\";\nimport { ZodError } from \"zod\";\n\ninterface InvalidDataDialogProps {\n  open?: boolean;\n  error?: ZodError;\n  children?: ReactNode;\n}\n\nexport default function InvalidDataDialog(props: InvalidDataDialogProps) {\n  const { open, error, children } = props;\n\n  return (\n    <>\n      <Dialog open={!!open}>\n        <DialogTitle id=\"alert-dialog-title\">{\"Error Loading Data\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            <Box maxHeight={500} overflow={\"auto\"}>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Error Message</TableCell>\n                    <TableCell>Path</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {error?.issues.map((x, idx) => {\n                    return (\n                      <TableRow key={idx}>\n                        <TableCell>{x.message}</TableCell>\n                        <TableCell>{x.path.join(\".\")}</TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            </Box>\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>{children}</DialogActions>\n      </Dialog>\n    </>\n  );\n}\n","import DeleteForever from \"@mui/icons-material/DeleteForever\";\nimport { Box, Button, Stack, Tab, Tabs } from \"@mui/material\";\nimport { NetWealth } from \"capabilities/net-wealth\";\nimport { ProjectedIncome } from \"capabilities/projected-income\";\nimport { ProjectedWealth } from \"capabilities/projected-wealth\";\nimport { useState } from \"react\";\nimport { SafetyButton } from \"shared/components/safety-button\";\nimport { downloadJson, useExport } from \"shared/hooks/use-export\";\nimport { useImport } from \"shared/hooks/use-import\";\nimport { useStoreDataError } from \"shared/hooks/use-store-data-error\";\nimport { resetStore } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport InvalidDataDialog from \"./invalid-data-dialog\";\n\nexport const App = () => {\n  const [tab, setTab] = useState<string>(\"wealth\");\n  const onExport = useExport();\n  const onImport = useImport();\n  const { hadError, parseError, resetError, invalidData } = useStoreDataError();\n  const [error, setError] = useState(parseError);\n  const [isOpen, setIsOpen] = useState(hadError);\n\n  return (\n    <>\n      <InvalidDataDialog open={isOpen} error={error}>\n        {hadError && (\n          <Button\n            onClick={() => {\n              downloadJson(`invalid-data-wealth-tracker-${getLocalDateTime().toFormat(shortDate)}.json`, invalidData);\n              setIsOpen(false);\n            }}\n          >\n            Download Data\n          </Button>\n        )}\n        {hadError && (\n          <Button\n            color=\"error\"\n            onClick={() => {\n              setIsOpen(false);\n              resetError?.();\n            }}\n            autoFocus\n          >\n            Reset\n          </Button>\n        )}\n        {!hadError && (\n          <Button\n            onClick={() => {\n              setIsOpen(false);\n            }}\n            autoFocus\n          >\n            Cancel\n          </Button>\n        )}\n      </InvalidDataDialog>\n      <Stack direction=\"row\">\n        <Tabs value={tab} onChange={(_, value) => setTab(value)}>\n          <Tab value=\"wealth\" label=\"Total Wealth\" />\n          <Tab value=\"projected-income\" label=\"Projected Income\" />\n          <Tab value=\"projected-wealth\" label=\"Projected Wealth\" />\n        </Tabs>\n        <Box marginLeft={\"auto\"} gap={2} display={\"flex\"}>\n          <Button\n            onClick={() =>\n              onImport().catch((err) => {\n                setIsOpen(true);\n                setError(err);\n              })\n            }\n          >\n            Import\n          </Button>\n          <Button onClick={onExport}>Export</Button>\n          <SafetyButton\n            onConfirm={resetStore}\n            inactiveLabel=\"Reset\"\n            activatingLabel=\"Activating\"\n            activeLabel=\"Confirm\"\n            confirmedLabel=\"confirmed\"\n            color=\"error\"\n            icon={<DeleteForever />}\n          />\n        </Box>\n      </Stack>\n      <Box padding={2} height={\"95%\"} width={\"100%\"}>\n        {tab === \"wealth\" && <NetWealth />}\n        {tab === \"projected-income\" && <ProjectedIncome />}\n        {tab === \"projected-wealth\" && <ProjectedWealth />}\n      </Box>\n    </>\n  );\n};\n","import { CssBaseline, ThemeProvider, createTheme } from \"@mui/material\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers\";\nimport { AdapterLuxon } from \"@mui/x-date-pickers/AdapterLuxon\";\nimport \"ag-grid-community/styles/ag-grid.css\";\nimport \"ag-grid-community/styles/ag-theme-quartz.css\";\nimport { App } from \"app/app.tsx\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport \"./index.css\";\n\nconst darkTheme = createTheme({\n  palette: {\n    mode: \"dark\",\n  },\n});\n\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n  <React.StrictMode>\n    <ErrorBoundary\n      fallbackRender={(props) => {\n        return (\n          <>\n            <div style={{ backgroundColor: \"#FFF\" }}>{props.error.message}</div>\n            <div style={{ backgroundColor: \"#FFF\" }}>{props.error.stackTrace}</div>\n          </>\n        );\n      }}\n    >\n      <LocalizationProvider dateAdapter={AdapterLuxon}>\n        <ThemeProvider theme={darkTheme}>\n          <CssBaseline />\n          <App />\n        </ThemeProvider>\n      </LocalizationProvider>\n    </ErrorBoundary>\n  </React.StrictMode>,\n);\n"],"names":["sortByDate","select","direction","a","b","toMillis","accountDataValidator","z","object","date","string","value","number","id","accountValidator","type","literal","data","array","loanValidator","principal","ratePct","paymentsPerYear","payment","firstPaymentDate","ownershipPct","mortgageValidator","loan","optional","wealth","record","union","projectedIncome","timeSeries","paycheck","meritIncreasePct","equityPct","meritBonusPct","meritBonus","companyBonusPct","companyBonus","retirementBonus","projectedWealth","socialSecurityLimit","socialSecurityTaxRate","medicareSupplementalTaxThreshold","medicareSupplementalTaxRate","savingsPerMonth","retirementContributionPaycheck","getDefaultStore","storeValidator","createStore","validator","defaultValue","key","invalidData","localData","localStorage","getItem","JSON","parse","safeParse","success","log","error","setItem","stringify","store","CreateStore","subscribe","current","state","AddAccountEntry","accountName","amount","setState","create","prev","next","push","startOf","toString","uuid","sort","DateTime","fromISO","x","addProjectedIncome","concat","removeAccount","removeAccountEntry","idxToRemove","findIndex","splice","removeProjectedIncome","resetStore","setLoan","updateAccountDate","account","idx","toISO","updateAccountName","currentAccountName","newAccountName","updateAccountValue","updateProjectedIncome","NewAccount","forwardRef","props","ref","open","setOpen","useState","nameRef","useRef","setError","accountType","setAccountType","undefined","marginLeft","target","children","AgGrid","rest","height","getLocalDateTime","local","shortDate","monthDay","DeleteAccount","padding","width","RenameAccount","nextAccountName","setNextAccountName","event","formatCashShort","Intl","NumberFormat","style","currency","notation","maximumFractionDigits","format","formatCash","createAccountColumnConfig","headerName","valueFormatter","toFormat","valueGetter","cellEditor","editable","valueSetter","fromJSDate","newValue","cellRenderer","DeleteForeverIcon","useMissingYears","useMemo","years","Object","entries","groupBy","year","map","find","janFirst","fromObject","day","month","diff","days","lookup","fromEntries","missing","i","length","AccountTab","useStore","setDate","inputRef","missingYears","hasSameDate","hasSame","onAddEntry","accountColumnConfig","join","color","startAdornment","findNearestOnOrBefore","findNearestIdxOnOrBefore","selector","getGraphDates","accounts","Set","flatMap","calcLoanBalance","rate","monthlyPayment","annualizedRate","periods","months","totalRate","balance","calcEquity","houseValue","loanBalance","AddEntry","Stack","reduce","acc","curr","convertPct","min","datetime","offset","AddLoan","textField","parsed","issues","path","mortgageColumnConfig","toFixed","equity","MortgageTab","allAccounts","mortgageData","values","AccountTabs","firstAccount","keys","setAccount","useEffect","_","getMortgageValue","mortgage","entry","getAccountValue","getGraphValue","useGraphData","dates","graphData","toJSDate","total","forEach","arr","firstNonZero","slice","WealthChart","series","stacked","xKey","yKey","yName","tooltip","renderer","datum","content","toISODate","options","theme","title","text","axes","position","label","NetWealth","useDates","meritIncrease","useDateRanges","base","start","end","endOf","findSameYear","minMaxAvg","max","avg","index","Math","Infinity","outcomeFromSingle","actual","actualizedOutcome","outcome","scaleOutcome","AddOutcome","outcomes","everyActualDefined","every","aPayday","DateRangesOverlap","getPayPeriods","anyPayday","abs","daysOffset","startPayDay","plus","numPayDays","weeks","payedOn","useMostFrequentValue","valueByDateRange","toSorted","minus","systemYear","useProjectedPay","baseIncome","meritPct","payPerPeriod","mostRecentPay","startDate","multiplier","unshift","round","startIdx","useBaseIncome","endDate","pay","payPeriods","sum","filter","_pay","payPeriod","__pay","businessDays","differenceInBusinessDays","millisecond","totalIncome","incomePerPeriod","reduceRight","perPayday","count","useCompanyBonus","dateRanges","mostRecentBonus","mostRecentPercent","meritFactor","cash","projectedActual","percent","useMeritBonus","ranges","bonusAmount","bonusPercent","frequentMeritBonusPercent","meritOutcome","useRetirementBonus","juneBonus","eligibleIncome","useTotalIncome","julyBonus","taxableIncome","Cash","fallback","disableTooltip","compact","formatted","Duration","dateTime","variant","dateFormat","countDownStr","diffNow","tooltipStr","countDownColor","formatPercent","Percent","Value","secondaryValue","tertiaryValue","className","display","minWidth","flexDirection","justifyContent","alignItems","gap","flexShrink","BonusOutcome","payDate","border","borderRadius","paddingBottom","paddingLeft","paddingTop","paddingRight","updateProjectedIncomeDate","valueFormatted","UpdateIcon","DataEntry","defaultDate","setAmount","console","flex","Layout","marginBottom","Until","usePaycheck","paychecks","IncomePerPeriodTooltip","ArrowForwardIcon","MeritOutcome","income","projectedPay","baseAprToApr","meritIncreases","commonMerit","totalAdjust","sx","maxWidth","Outcome","ProjectedIncome","selectedYear","setSelectedYear","oldestYear","first","Box","marginRight","set","setProjectedWealth","configName","ConfigEntry","isPercent","onchange","useCallback","input","isNan","Number","isNaN","Config","useFutureBonuses","bonuses","usePayments","merit","cumulativePay","cumulative","payBeforeMerit","payBeforeCompanyBonus","previousPay","remainingPayments","payments","nextPaymentIdx","numRemaining","totalBasePayments","totalPayments","useFutureMedicareTax","config","at","firstOccurrence","remaining","perPaycheck","useFutureRetirementContributions","retirementContribution","useFutureSavings","perMonth","useFutureSocialSecurity","BeforeAfter","before","after","isFuture","milliseconds","FutureEvents","savings","retirement","medicare","socialSecurity","useEarliestAccountEntry","fromMillis","useTimeSeriesWealth","localDateTime","earliest","ssiTaxValue","medicareTaxValue","isValid","futureWealth","Array","fill","equals","isLast","accountWealth","graphDate","benchmarkWealth","yoyCash","yoyPct","nice","columnConfig","QueryStatsIcon","WealthTable","ProjectedWealth","Grid","CountDown","timeMs","time","setTime","interval","setInterval","intervalMs","clearInterval","SafetyButton","inactiveLabel","activatingLabel","activeLabel","confirmedLabel","onConfirm","icon","disabled","safetyState","setSafetyState","setTimeout","downloadJson","filename","storeData","link","document","createElement","download","blob","Blob","href","window","URL","createObjectURL","click","useExport","onExport","selectFile","contentType","Promise","multiple","accept","files","from","useImport","resolve","reject","then","reader","FileReader","readAsDataURL","file","onload","readerEvent","result","atob","split","validation","useStoreDataError","hadError","validated","parseError","resetError","removeItem","InvalidDataDialog","message","App","tab","setTab","onImport","isOpen","setIsOpen","catch","err","DeleteForever","darkTheme","createTheme","palette","mode","ReactDOM","createRoot","getElementById","render","backgroundColor","stackTrace","AdapterLuxon"],"mappings":"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"}