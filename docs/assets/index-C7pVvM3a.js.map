{"version":3,"file":"index-C7pVvM3a.js","sources":["../../src/shared/utility/sort-by-date.ts","../../src/shared/models/store/version-0/loan.ts","../../src/shared/models/store/version-3/account-data.ts","../../src/shared/models/store/version-0/account-data.ts","../../src/shared/models/store/version-0/account.ts","../../src/shared/models/store/version-0/mortgage.ts","../../src/shared/models/store/version-0/net-wealth.ts","../../src/shared/models/store/version-0/projected-income.ts","../../src/shared/models/store/version-2/projected-wealth.ts","../../src/shared/models/store/version-0/projected-wealth.ts","../../src/shared/models/store/version-1/store.ts","../../src/shared/models/store/version-2/store.ts","../../src/shared/models/store/version-3/mortgage.ts","../../src/shared/models/store/version-3/projected-income.ts","../../src/shared/models/store/version-4/projected-wealth.ts","../../src/shared/models/store/version-5/account.ts","../../src/shared/models/store/version-5/get-default.ts","../../src/shared/models/store/version-5/mortgage.ts","../../src/shared/models/store/version-5/net-wealth.ts","../../src/shared/models/store/version-5/store.ts","../../src/shared/models/store/version-0/store.ts","../../src/shared/models/store/version-3/account.ts","../../src/shared/models/store/version-3/net-wealth.ts","../../src/shared/models/store/version-3/projected-wealth.ts","../../src/shared/models/store/version-3/store.ts","../../src/shared/models/store/version-4/store.ts","../../src/shared/store/migrations.ts","../../src/shared/store/store.ts","../../src/shared/store/add-account-entry.ts","../../src/shared/store/add-projected-income.ts","../../src/shared/store/hide-account.ts","../../src/shared/store/remove-account.ts","../../src/shared/store/remove-account-entry.ts","../../src/shared/store/remove-projected-income.ts","../../src/shared/store/reset-store.ts","../../src/shared/store/set-loan.ts","../../src/shared/store/update-account-date.ts","../../src/shared/store/update-account-name.ts","../../src/shared/store/update-account-value.ts","../../src/shared/store/update-projected-income.ts","../../src/capabilities/net-wealth/new-account.tsx","../../src/shared/components/ag-grid/ag-grid.tsx","../../src/shared/utility/current-date.ts","../../src/shared/utility/format-date.ts","../../src/shared/utility/format-cash.ts","../../src/shared/components/formatters/cash.tsx","../../src/capabilities/net-wealth/tab-types/account/column-config.tsx","../../src/capabilities/net-wealth/tab-types/account/hooks/useMissingYears.ts","../../src/shared/components/confirm-dialog.tsx","../../src/capabilities/net-wealth/tab-types/account/settings.tsx","../../src/capabilities/net-wealth/tab-types/account/account.tsx","../../src/shared/utility/find-nearest-on-or-before.ts","../../src/shared/utility/get-graph-dates.ts","../../src/shared/utility/mortgage-calc.ts","../../src/capabilities/net-wealth/tab-types/mortgage/add-entry.tsx","../../src/capabilities/net-wealth/tab-types/mortgage/column-config.tsx","../../src/capabilities/net-wealth/tab-types/mortgage/settings.tsx","../../src/capabilities/net-wealth/tab-types/mortgage/mortgage.tsx","../../src/capabilities/net-wealth/account-tabs.tsx","../../src/shared/hooks/use-earliest-account-entry.ts","../../src/shared/utility/get-graph-value.ts","../../src/capabilities/net-wealth/wealth-chart/use-graph-data.ts","../../src/capabilities/net-wealth/wealth-chart/wealth-chart.tsx","../../src/capabilities/net-wealth/net-wealth.tsx","../../src/shared/components/card.tsx","../../src/shared/components/formatters/cash-range.tsx","../../src/shared/utility/format-percent.ts","../../src/shared/components/formatters/percent.tsx","../../src/shared/components/formatters/percent-range.tsx","../../src/shared/components/formatters/value.tsx","../../src/shared/components/formatters/cluster-value.tsx","../../src/shared/utility/to-human.ts","../../src/shared/components/formatters/countdown.tsx","../../src/shared/store/scenario-store.ts","../../src/shared/utility/ckmeans/make-matrix.ts","../../src/shared/utility/ckmeans/numeric-sort.ts","../../src/shared/utility/ckmeans/unique-count-sorted.ts","../../src/shared/utility/ckmeans/ckmeans.ts","../../src/shared/utility/ckmeans/collapse.ts","../../src/shared/utility/cluster-helpers.ts","../../src/shared/hooks/use-clusters.ts","../../src/shared/utility/find-same-year.ts","../../src/shared/hooks/use-dates.ts","../../src/shared/models/payment-periods.ts","../../src/shared/constants.ts","../../src/capabilities/projected-income/spark-chart.tsx","../../src/shared/store/update-projected-income-date.ts","../../src/capabilities/projected-income/data-entry/column-config.tsx","../../src/capabilities/projected-income/data-entry/data-entry.tsx","../../src/capabilities/projected-income/income-chart.tsx","../../src/capabilities/projected-income/income-per-period.tsx","../../src/capabilities/projected-income/use-has-merit-pairs.ts","../../src/capabilities/projected-income/projected-income.tsx","../../src/shared/utility/is-future.ts","../../src/capabilities/projected-wealth/hooks/use-future-mortgage-equity.ts","../../src/capabilities/projected-wealth/hooks/use-future-retirement-contributions.ts","../../src/capabilities/projected-wealth/hooks/use-future-savings.ts","../../src/capabilities/projected-wealth/hooks/use-future-social-security.ts","../../src/capabilities/projected-wealth/hooks/use-future-totals.tsx","../../src/capabilities/projected-wealth/future-events.tsx","../../src/capabilities/projected-wealth/hooks/use-times-series-wealth.ts","../../src/capabilities/projected-wealth/wealth-chart.tsx","../../src/capabilities/projected-wealth/wealth-table/colum-config.tsx","../../src/capabilities/projected-wealth/wealth-table/wealth-table.tsx","../../src/capabilities/projected-wealth/projected-wealth.tsx","../../src/shared/store/set-projected-wealth.ts","../../src/app/config/config-entry.tsx","../../src/app/config/config.tsx","../../src/app/config/scenario-explorer.tsx","../../src/app/invalid-data-dialog.tsx","../../src/shared/hooks/use-export.tsx","../../src/shared/hooks/use-import.tsx","../../src/shared/hooks/use-store-data-error.ts","../../src/app/config/system.tsx","../../src/app/config/config-modal.tsx","../../src/app/app.tsx","../../src/shared/utility/a-payday.ts","../../src/shared/web-worker/merit-sequence.ts","../../src/shared/web-worker/entry.ts","../../src/main.tsx"],"sourcesContent":["import { DateTime } from \"luxon\";\n\nexport const sortByDate =\n  <T>(select: (data: T) => DateTime, direction: \"asc\" | \"desc\") =>\n  (a: T, b: T) =>\n    direction === \"asc\" ? select(a).toMillis() - select(b).toMillis() : select(b).toMillis() - select(a).toMillis();\n","import { z } from \"zod\";\n\nexport const loanValidator = z.object({\n  principal: z.number(),\n  ratePct: z.number(),\n  paymentsPerYear: z.number(),\n  payment: z.number(),\n  firstPaymentDate: z.string(),\n  ownershipPct: z.number(),\n});\n\nexport type Loan = z.infer<typeof loanValidator>;\n","import { z } from \"zod\";\n\nexport const accountDataValidator = z.object({\n  date: z.string(),\n  value: z.number(),\n});\n\nexport type AccountData = z.infer<typeof accountDataValidator>;\n","import { z } from \"zod\";\n\nexport const accountDataValidator = z.object({\n  date: z.string(),\n  value: z.number(),\n  id: z.string(),\n});\n\nexport type AccountData = z.infer<typeof accountDataValidator>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const accountValidator = z.object({\n  type: z.literal(\"account\"),\n  data: z.array(accountDataValidator),\n});\n\nexport type Account = z.infer<typeof accountValidator>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\nimport { loanValidator } from \"./loan\";\n\nexport const mortgageValidator = z.object({\n  type: z.literal(\"mortgage\"),\n  loan: loanValidator.optional(),\n  data: z.array(accountDataValidator),\n});\n\nexport type Mortgage = z.infer<typeof mortgageValidator>;\n","import { z } from \"zod\";\nimport { accountValidator } from \"./account\";\nimport { mortgageValidator } from \"./mortgage\";\n\nexport const wealth = z.record(z.union([accountValidator, mortgageValidator]));\n\nexport type Wealth = z.infer<typeof wealth>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const projectedIncome = z.object({\n  timeSeries: z.object({\n    paycheck: z.array(accountDataValidator),\n    meritIncreasePct: z.array(accountDataValidator),\n    equityPct: z.array(accountDataValidator),\n    meritBonusPct: z.array(accountDataValidator),\n    meritBonus: z.array(accountDataValidator),\n    companyBonusPct: z.array(accountDataValidator),\n    companyBonus: z.array(accountDataValidator),\n    retirementBonus: z.array(accountDataValidator),\n  }),\n});\n\nexport type ProjectedIncome = z.infer<typeof projectedIncome>;\nexport type TimeSeries = keyof ProjectedIncome[\"timeSeries\"];\n","import { z } from \"zod\";\n\nexport const projectedWealth = z.object({\n  socialSecurityLimit: z.number(),\n  socialSecurityTaxRate: z.number(),\n  medicareSupplementalTaxThreshold: z.number(),\n  medicareSupplementalTaxRate: z.number(),\n  savingsPerMonth: z.number(),\n  retirementContributionPaycheck: z.number(),\n  bonusWitholdingsRate: z.number(),\n});\n\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\nexport type ProjectedWealthKeys = keyof ProjectedWealth;\n","import { z } from \"zod\";\n\nexport const projectedWealth = z.object({\n  socialSecurityLimit: z.number(),\n  socialSecurityTaxRate: z.number(),\n  medicareSupplementalTaxThreshold: z.number(),\n  medicareSupplementalTaxRate: z.number(),\n  savingsPerMonth: z.number(),\n  retirementContributionPaycheck: z.number(),\n});\n\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\nexport type ProjectedWealthKeys = keyof ProjectedWealth;\n","import { z } from \"zod\";\nimport { wealth } from \"../version-0/net-wealth\";\nimport { projectedIncome } from \"../version-0/projected-income\";\nimport { projectedWealth } from \"../version-0/projected-wealth\";\n\nexport const storeValidator = z.object({\n  version: z.literal(1),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { z } from \"zod\";\nimport { projectedIncome, wealth } from \"../version-1\";\nimport { projectedWealth } from \"./projected-wealth\";\n\nexport const storeValidator = z.object({\n  version: z.literal(2),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { z } from \"zod\";\nimport { loanValidator } from \"../version-2\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const mortgageValidator = z.object({\n  type: z.literal(\"mortgage\"),\n  loan: loanValidator.optional(),\n  data: z.array(accountDataValidator),\n});\n\nexport type Mortgage = z.infer<typeof mortgageValidator>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const projectedIncome = z.object({\n  timeSeries: z.object({\n    paycheck: z.array(accountDataValidator),\n    meritIncreasePct: z.array(accountDataValidator),\n    equityPct: z.array(accountDataValidator),\n    meritBonusPct: z.array(accountDataValidator),\n    meritBonus: z.array(accountDataValidator),\n    companyBonusPct: z.array(accountDataValidator),\n    companyBonus: z.array(accountDataValidator),\n    retirementBonus: z.array(accountDataValidator),\n  }),\n});\n\nexport type ProjectedIncome = z.infer<typeof projectedIncome>;\nexport type TimeSeries = keyof ProjectedIncome[\"timeSeries\"];\n","import { z } from \"zod\";\n\nexport const projectedWealth = z.object({\n  socialSecurityLimit: z.number(),\n  socialSecurityTaxRate: z.number(),\n  medicareSupplementalTaxThreshold: z.number(),\n  medicareSupplementalTaxRate: z.number(),\n  savingsPerMonth: z.number(),\n  retirementContributionPaycheck: z.number(),\n  bonusWithholdingsRate: z.number(),\n});\n\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\nexport type ProjectedWealthKeys = keyof ProjectedWealth;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"../version-3/account-data\";\n\nexport const accountValidator = z.object({\n  type: z.literal(\"account\"),\n  data: z.array(accountDataValidator),\n  hidden: z.boolean().default(false),\n});\n\nexport type Account = z.infer<typeof accountValidator>;\n","import { Store } from \"./store\";\n\nexport const getDefaultStore = (): Store => ({\n  version: 5,\n  projectedIncome: {\n    timeSeries: {\n      paycheck: [],\n      meritBonusPct: [],\n      companyBonusPct: [\n        {\n          date: \"2014-06-15T00:00:00.000-07:00\",\n          value: 0.248,\n        },\n        {\n          date: \"2015-06-15T00:00:00.000-07:00\",\n          value: 0.248,\n        },\n        {\n          date: \"2016-06-15T00:00:00.000-07:00\",\n          value: 0.204,\n        },\n        {\n          date: \"2017-06-15T00:00:00.000-07:00\",\n          value: 0.22,\n        },\n        {\n          date: \"2018-06-15T00:00:00.000-07:00\",\n          value: 0.26,\n        },\n        {\n          date: \"2019-06-15T00:00:00.000-07:00\",\n          value: 0.242,\n        },\n        {\n          date: \"2020-06-15T00:00:00.000-07:00\",\n          value: 0.219,\n        },\n        {\n          date: \"2021-06-15T00:00:00.000-07:00\",\n          value: 0.254,\n        },\n        {\n          date: \"2022-06-15T00:00:00.000-07:00\",\n          value: 0.272,\n        },\n        {\n          date: \"2023-06-15T00:00:00.000-07:00\",\n          value: 0.168,\n        },\n        {\n          date: \"2024-06-15T00:00:00.000-07:00\",\n          value: 0.2075,\n        },\n      ],\n      meritBonus: [],\n      companyBonus: [],\n      retirementBonus: [],\n      equityPct: [],\n      meritIncreasePct: [],\n    },\n  },\n  wealth: {},\n  projectedWealth: {\n    medicareSupplementalTaxThreshold: 200_000,\n    socialSecurityLimit: 168_600,\n    socialSecurityTaxRate: 0.062,\n    medicareSupplementalTaxRate: 0.009,\n    savingsPerMonth: 0,\n    retirementContributionPaycheck: 0,\n    bonusWithholdingsRate: 0,\n  },\n});\n","import { z } from \"zod\";\nimport { loanValidator } from \"../version-2\";\nimport { accountDataValidator } from \"../version-3/account-data\";\n\nexport const mortgageValidator = z.object({\n  type: z.literal(\"mortgage\"),\n  loan: loanValidator.optional(),\n  data: z.array(accountDataValidator),\n  hidden: z.boolean().default(false),\n});\n\nexport type Mortgage = z.infer<typeof mortgageValidator>;\n","import { z } from \"zod\";\nimport { accountValidator } from \"./account\";\nimport { mortgageValidator } from \"./mortgage\";\n\nexport const wealth = z.record(z.union([accountValidator, mortgageValidator]));\n\nexport type Wealth = z.infer<typeof wealth>;\n","import { z } from \"zod\";\nimport { projectedIncome } from \"../version-3/projected-income\";\nimport { projectedWealth } from \"../version-4/projected-wealth\";\nimport { wealth } from \"./net-wealth\";\n\nexport const storeValidator = z.object({\n  version: z.literal(5),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { z } from \"zod\";\nimport { wealth } from \"./net-wealth\";\nimport { projectedIncome } from \"./projected-income\";\nimport { projectedWealth } from \"./projected-wealth\";\n\nexport const storeValidator = z.object({\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const accountValidator = z.object({\n  type: z.literal(\"account\"),\n  data: z.array(accountDataValidator),\n});\n\nexport type Account = z.infer<typeof accountValidator>;\n","import { z } from \"zod\";\nimport { accountValidator } from \"./account\";\nimport { mortgageValidator } from \"./mortgage\";\n\nexport const wealth = z.record(z.union([accountValidator, mortgageValidator]));\n\nexport type Wealth = z.infer<typeof wealth>;\n","import { z } from \"zod\";\n\nexport const projectedWealth = z.object({\n  socialSecurityLimit: z.number(),\n  socialSecurityTaxRate: z.number(),\n  medicareSupplementalTaxThreshold: z.number(),\n  medicareSupplementalTaxRate: z.number(),\n  savingsPerMonth: z.number(),\n  retirementContributionPaycheck: z.number(),\n  bonusWitholdingsRate: z.number(),\n});\n\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\nexport type ProjectedWealthKeys = keyof ProjectedWealth;\n","import { z } from \"zod\";\nimport { wealth } from \"./net-wealth\";\nimport { projectedIncome } from \"./projected-income\";\nimport { projectedWealth } from \"./projected-wealth\";\n\nexport const storeValidator = z.object({\n  version: z.literal(3),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { z } from \"zod\";\nimport { wealth } from \"../version-3/net-wealth\";\nimport { projectedIncome } from \"../version-3/projected-income\";\nimport { projectedWealth } from \"./projected-wealth\";\n\nexport const storeValidator = z.object({\n  version: z.literal(4),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { storeValidator } from \"shared/models/store/current\";\nimport { storeValidator as storeV0Validator } from \"shared/models/store/version-0\";\nimport { Store as StoreV1, storeValidator as storeV1Validator } from \"shared/models/store/version-1\";\nimport { Store as StoreV2, storeValidator as storeV2Validator } from \"shared/models/store/version-2\";\nimport { Store as StoreV3, storeValidator as storeV3Validator } from \"shared/models/store/version-3\";\nimport { Store as StoreV4, storeValidator as storeV4Validator } from \"shared/models/store/version-4\";\nimport { Store as StoreV5 } from \"shared/models/store/version-5\";\n\nexport const migration = (data: unknown) => {\n  if (data === null || data === undefined) {\n    throw new Error(\"parsed data is null or undefined\");\n  } else if (typeof data !== \"object\") {\n    throw new Error(\"Parsed data is not an object\");\n  }\n\n  if (!(\"version\" in data)) {\n    storeV0Validator.parse(data);\n    (data as StoreV1).version = 1;\n  }\n\n  if (\"version\" in data) {\n    if (data.version === 1) {\n      storeV1Validator.parse(data);\n      (data as StoreV2).version = 2;\n      (data as StoreV2).projectedWealth.bonusWitholdingsRate = 0;\n    }\n    if (data.version === 2) {\n      storeV2Validator.parse(data);\n      (data as StoreV3).version = 3;\n    }\n    if (data.version === 3) {\n      storeV3Validator.parse(data);\n      (data as StoreV4).version = 4;\n      (data as StoreV4).projectedWealth.bonusWithholdingsRate = (data as StoreV3).projectedWealth.bonusWitholdingsRate;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      delete (data as any).projectedWealth.bonusWitholdingsRate;\n    }\n    if (data.version === 4) {\n      storeV4Validator.parse(data);\n      (data as StoreV5).version = 5;\n      const keys = Object.keys((data as StoreV5).wealth);\n      for (let i = 0; i < keys.length; i++) {\n        (data as StoreV5).wealth[keys[i]].hidden = false;\n      }\n    }\n  }\n\n  const next = storeValidator.parse(data);\n  console.log(next);\n  return next;\n};\n","import { Store as CreateStore } from \"@tanstack/store\";\nimport { ZodSchema } from \"zod\";\nimport { Store, getDefaultStore, storeValidator } from \"../models/store/current\";\nimport { migration } from \"./migrations\";\n\nconst createStore = <T extends object>(validator: ZodSchema, defaultValue: T) => {\n  const key = \"store\";\n  const invalidData = \"store-invalid\";\n  const localData = localStorage.getItem(key);\n  const data = localData ? JSON.parse(localData) : defaultValue;\n  const parse = validator.safeParse(data);\n\n  if (!parse.success) {\n    try {\n      migration(data);\n      localStorage.setItem(key, JSON.stringify(data));\n    } catch (err) {\n      console.log(\"error\", err);\n      console.log(\"invalid data\", data);\n      localStorage.setItem(invalidData, JSON.stringify(data));\n      localStorage.setItem(key, JSON.stringify(defaultValue));\n    }\n  }\n\n  const store = new CreateStore<T>(data);\n  store.subscribe(() => {\n    const current = localStorage.getItem(key);\n    current && localStorage.setItem(`${key}-previous`, current);\n    localStorage.setItem(key, JSON.stringify(store.state));\n  });\n\n  return store;\n};\n\nexport const store = createStore<Store>(storeValidator, getDefaultStore());\n","import { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { Account } from \"shared/models/store/current\";\nimport { sortByDate } from \"../utility/sort-by-date\";\nimport { store } from \"./store\";\n\nexport const addAccountEntry = (accountName: string, date: DateTime<true>, amount: number) => {\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      (next.wealth[accountName] as Account).data.push({\n        date: date.startOf(\"day\").toString(),\n        value: amount,\n      });\n      next.wealth[accountName].data.sort(sortByDate((x) => DateTime.fromISO(x.date), \"asc\"));\n    });\n  });\n};\n","import { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { TimeSeries } from \"shared/models/store/current\";\nimport { sortByDate } from \"shared/utility/sort-by-date\";\nimport { store } from \"./store\";\n\nexport const addProjectedIncome = (date: DateTime, timeSeries: TimeSeries, value: number) => {\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      next.projectedIncome.timeSeries[timeSeries] = next.projectedIncome.timeSeries[timeSeries]\n        .concat({\n          date: date.startOf(\"day\").toString(),\n          value,\n        })\n        .sort(sortByDate((x) => DateTime.fromISO(x.date), \"asc\"));\n    });\n  });\n};\n","import { create } from \"mutative\";\nimport { store } from \"./store\";\n\nexport const hideAccount = (accountName: string) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      next.wealth[accountName].hidden = true;\n    });\n  });\n","import { create } from \"mutative\";\nimport { store } from \"./store\";\n\nexport const removeAccount = (accountName: string) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      delete next.wealth[accountName];\n    });\n  });\n","import { create } from \"mutative\";\nimport { AccountData } from \"shared/models/store/current\";\nimport { store } from \"./store\";\n\nexport const removeAccountEntry = (accountName: string, data: AccountData) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      const idx = prev.wealth[accountName].data.findIndex((x) => x === data);\n      if (idx < 0) {\n        throw new Error(\"failed to find data\");\n      }\n\n      next.wealth[accountName].data.splice(idx, 1);\n      return next;\n    });\n  });\n","import { create } from \"mutative\";\nimport { AccountData, TimeSeries } from \"shared/models/store/current\";\nimport { store } from \".\";\n\nexport const removeProjectedIncome = (accountName: TimeSeries, data: AccountData) => {\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      const idx = prev.projectedIncome.timeSeries[accountName].findIndex((x) => x === data);\n      if (idx < 0) {\n        throw new Error(\"failed to find data\");\n      }\n\n      next.projectedIncome.timeSeries[accountName].splice(idx, 1);\n    });\n  });\n};\n","import { getDefaultStore } from \"shared/models/store/current\";\nimport { store } from \"./store\";\n\nexport const resetStore = () => store.setState(() => getDefaultStore());\n","import { create } from \"mutative\";\nimport { Loan, Mortgage } from \"shared/models/store/current\";\nimport { store } from \"./store\";\n\nexport const setLoan = (accountName: string, loan: Loan) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      if (next.wealth[accountName].type === \"mortgage\") {\n        (next.wealth[accountName] as Mortgage).loan = loan;\n      }\n    });\n  });\n","import { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { AccountData } from \"shared/models/store/current\";\nimport { store } from \".\";\n\nexport const updateAccountDate = (accountName: string, data: AccountData, date: DateTime) => {\n  store.setState((prev) => {\n    const next = create(prev, (next) => {\n      const idx = prev.wealth[accountName]?.data.findIndex((x) => x === data);\n      if (idx < 0) {\n        throw new Error(\"failed to find data\");\n      }\n\n      next.wealth[accountName].data[idx].date = date.toISO()!;\n    });\n    return next;\n  });\n};\n","import { create } from \"mutative\";\nimport { store } from \"./store\";\n\nexport const updateAccountName = (currentAccountName: string, newAccountName: string) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      next.wealth[newAccountName] = next.wealth[currentAccountName];\n      delete next.wealth[currentAccountName];\n    });\n  });\n","import { create } from \"mutative\";\nimport { AccountData } from \"shared/models/store/current\";\nimport { store } from \".\";\n\nexport const updateAccountValue = (accountName: string, data: AccountData, value: number) => {\n  store.setState((prev) => {\n    const next = create(prev, (next) => {\n      const idx = prev.wealth[accountName]?.data.findIndex((x) => x === data);\n      if (idx < 0) {\n        throw new Error(\"failed to find data\");\n      }\n\n      next.wealth[accountName].data[idx].value = value;\n    });\n    return next;\n  });\n};\n","import { create } from \"mutative\";\nimport { AccountData, TimeSeries } from \"shared/models/store/current\";\nimport { store } from \".\";\n\nexport const updateProjectedIncome = (timeSeries: TimeSeries, data: AccountData, value: number) => {\n  store.setState((prev) => {\n    const next = create(prev, (next) => {\n      const idx = prev.projectedIncome.timeSeries[timeSeries].findIndex((x) => x === data);\n      if (idx < 0) {\n        throw new Error(\"failed to find data\");\n      }\n      next.projectedIncome.timeSeries[timeSeries][idx].value = value;\n    });\n    return next;\n  });\n};\n","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, MenuItem, Stack, TextField } from \"@mui/material\";\nimport { create } from \"mutative\";\nimport { ReactNode, forwardRef, useRef, useState } from \"react\";\nimport { store } from \"shared/store\";\n\ntype AssetType = \"account\" | \"mortgage\";\nexport const NewAccount = forwardRef<HTMLButtonElement, { children?: ReactNode }>(function NewAccount(props, ref) {\n  const [open, setOpen] = useState(false);\n  const nameRef = useRef<HTMLInputElement>(null);\n  const [error, setError] = useState(false);\n  const [accountType, setAccountType] = useState<AssetType>();\n\n  return (\n    <>\n      <Button\n        ref={ref}\n        variant=\"outlined\"\n        onClick={() => {\n          setOpen(true);\n          setError(false);\n          setAccountType(undefined);\n        }}\n        sx={{ marginTop: 3 }}\n      >\n        add account\n      </Button>\n\n      <Dialog open={open} onClose={() => setOpen(false)}>\n        <DialogTitle>Add New Account</DialogTitle>\n        <DialogContent>\n          <Stack spacing={2} margin={2}>\n            <TextField\n              select\n              color={error ? \"error\" : \"primary\"}\n              onChange={(value) => {\n                setError(false);\n                setAccountType(value.target.value as AssetType);\n              }}\n              label=\"Type\"\n            >\n              <MenuItem value=\"mortgage\">Mortgage</MenuItem>\n              <MenuItem value=\"account\">Generic Account</MenuItem>\n            </TextField>\n\n            <TextField\n              placeholder=\"Name\"\n              onChange={() => {\n                setError(false);\n              }}\n              error={error}\n              inputRef={nameRef}\n            />\n          </Stack>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            disabled={error}\n            onClick={() => {\n              store.setState((prev) => {\n                return create(prev, (next) => {\n                  if (!nameRef.current?.value || !accountType || prev.wealth[nameRef.current.value]) {\n                    setError(true);\n                    return;\n                  }\n\n                  next.wealth[nameRef.current.value] = {\n                    type: accountType,\n                    data: [],\n                    hidden: false,\n                  };\n\n                  setOpen(false);\n                });\n              });\n            }}\n          >\n            Add\n          </Button>\n        </DialogActions>\n      </Dialog>\n      {props?.children}\n    </>\n  );\n});\n","import { AgGridReact, AgGridReactProps } from \"ag-grid-react\";\n\nimport { themeQuartz } from \"ag-grid-community\";\n\n// to use myTheme in an application, pass it to the theme grid option\nconst myTheme = themeQuartz.withParams({\n  backgroundColor: \"#1f2836\",\n  browserColorScheme: \"dark\",\n  chromeBackgroundColor: {\n    ref: \"foregroundColor\",\n    mix: 0.07,\n    onto: \"backgroundColor\",\n  },\n  foregroundColor: \"#FFF\",\n  headerFontSize: 14,\n});\n\nexport const AgGrid = (props: AgGridReactProps & { id: string }) => {\n  const { id, ...rest } = props;\n  return (\n    <div id={id} style={{ height: \"100%\" }}>\n      <AgGridReact {...rest} theme={myTheme} suppressMovableColumns />\n    </div>\n  );\n};\n","import { DateTime } from \"luxon\";\n\nexport const getLocalDateTime = () => {\n  const date = DateTime.local();\n  return date;\n};\n","export const shortDate = \"yyyy-MM-dd\";\n\nexport const monthDay = \"MMM dd\";\n","export const formatCashShort = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  notation: \"compact\",\n  maximumFractionDigits: 0,\n  minimumSignificantDigits: 3,\n  maximumSignificantDigits: 3,\n}).format;\n\nexport const formatCash = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  maximumFractionDigits: 0,\n}).format;\n","import { Tooltip } from \"@mui/material\";\nimport { useMemo } from \"react\";\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\n\ninterface CashProps {\n  value?: number;\n  fallback?: number;\n  disableTooltip?: boolean;\n  compact?: boolean;\n  tooltip?: string;\n  placement?:\n    | \"top\"\n    | \"right\"\n    | \"bottom\"\n    | \"left\"\n    | \"bottom-end\"\n    | \"bottom-start\"\n    | \"left-end\"\n    | \"left-start\"\n    | \"right-end\"\n    | \"right-start\"\n    | \"top-end\"\n    | \"top-start\"\n    | undefined;\n}\nexport const Cash = ({ value, fallback, disableTooltip, compact = true, tooltip, placement }: CashProps) => {\n  const formatted = useMemo(() => {\n    if (value === undefined) {\n      return fallback;\n    }\n    return compact ? formatCashShort(value) : formatCash(value);\n  }, [compact, fallback, value]);\n\n  return (\n    <Tooltip\n      placement={placement}\n      disableHoverListener={disableTooltip || !compact || !value}\n      title={[tooltip, formatCash(value!)].join(\" \")}\n    >\n      <span>{formatted}</span>\n    </Tooltip>\n  );\n};\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\nimport { Button } from \"@mui/material\";\nimport { ColDef } from \"ag-grid-community\";\nimport { CustomCellRendererProps } from \"ag-grid-react\";\nimport { DateTime } from \"luxon\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { AccountData } from \"shared/models/store/current\";\nimport { updateAccountDate, updateAccountValue } from \"shared/store\";\nimport { removeAccountEntry } from \"shared/store/remove-account-entry\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const createAccountColumnConfig = (accountName: string): ColDef<AccountData>[] => [\n  {\n    headerName: \"Date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\n    cellEditor: \"agDateCellEditor\",\n    editable: true,\n    valueSetter: (x) => {\n      const date = DateTime.fromJSDate(x.newValue);\n      if (date.isValid) {\n        updateAccountDate(accountName, x.data, date);\n      }\n      return date.isValid;\n    },\n  },\n  {\n    headerName: \"Value\",\n    valueGetter: (x) => x.data?.value,\n    valueSetter: (x) => {\n      updateAccountValue(accountName, x.data, +x.newValue);\n      return true;\n    },\n    cellRenderer: (x: CustomCellRendererProps<AccountData>) => <Cash value={x.value} placement=\"left\" />,\n    editable: true,\n    cellEditor: \"agNumberCellEditor\",\n    type: \"numericColumn\",\n  },\n  {\n    cellStyle: () => ({ display: \"inline-flex\", padding: \"0px\" }),\n    sortable: false,\n    headerName: \"\",\n    width: 80,\n    colId: \"actions\",\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\n      return (\n        <Button\n          onClick={() => {\n            props.data && removeAccountEntry(accountName, props.data);\n          }}\n          color=\"error\"\n          fullWidth\n        >\n          <DeleteForeverIcon />\n        </Button>\n      );\n    },\n  },\n];\n","import { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { Account } from \"shared/models/store/current\";\n\nexport const useMissingYears = (account: Account) => {\n  return useMemo(() => {\n    const years = Object.entries(Object.groupBy(account.data, (x) => DateTime.fromISO(x.date).year))\n      .map(\n        ([year, entries]) =>\n          [\n            +year,\n            !!entries?.find((x) => {\n              const date = DateTime.fromISO(x.date);\n              const janFirst = DateTime.fromObject({\n                day: 1,\n                month: 1,\n                year: +year,\n              });\n              return date.diff(janFirst, [\"days\", \"hours\"]).days == 0;\n            }),\n          ] as [number, boolean]\n      )\n      .sort(([a], [b]) => {\n        return a - b;\n      });\n\n    const lookup = Object.fromEntries(years);\n    const missing = [];\n    for (let i = years[0]?.[0] ?? 0; i <= years[years.length - 1]?.[0]; i++) {\n      if (!lookup[i]) {\n        missing.push(i);\n      }\n    }\n    return missing;\n  }, [account.data]);\n};\n","import { Button, Dialog, DialogActions, DialogTitle } from \"@mui/material\";\nimport { ReactElement, useState } from \"react\";\n\ninterface ConfirmDialogProps {\n  onConfirm?: () => void;\n  title: string;\n  children: ReactElement;\n}\nexport const ConfirmDialog = (props: ConfirmDialogProps) => {\n  const { onConfirm, title, children } = props;\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <>\n      <div onClick={() => setIsOpen(true)}>{children}</div>\n      <Dialog open={isOpen} onClose={() => setIsOpen(false)}>\n        <DialogTitle sx={{ minWidth: 300, display: \"flex\", justifyContent: \"center\" }}>{title}</DialogTitle>\n        <DialogActions>\n          <Button sx={{ marginRight: \"auto\" }} onClick={() => setIsOpen(false)}>\n            Cancel\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"error\"\n            onClick={() => {\n              onConfirm?.();\n              setIsOpen(false);\n            }}\n          >\n            Confirm\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n","import Close from \"@mui/icons-material/Close\";\nimport SettingsIcon from \"@mui/icons-material/Settings\";\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  IconButton,\n  Stack,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport { useState } from \"react\";\nimport { ConfirmDialog } from \"shared/components/confirm-dialog\";\nimport { hideAccount, removeAccount, updateAccountName } from \"shared/store\";\n\ninterface AccountSettingsProps {\n  accountName: string;\n}\n\nexport const AccountSettings = (props: AccountSettingsProps) => {\n  const { accountName } = props;\n  const [nextAccountName, setNextAccountName] = useState<string>(accountName);\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    <>\n      <IconButton onClick={() => setIsOpen(true)}>\n        <SettingsIcon />\n      </IconButton>\n      <Dialog open={isOpen} onClose={() => setIsOpen(false)}>\n        <DialogTitle>\n          <Stack direction={\"row\"} width=\"100%\" alignItems={\"center\"} justify-content={\"space-between\"}>\n            <Typography variant=\"h6\">{accountName} Settings</Typography>\n            <IconButton onClick={() => setIsOpen(false)}>\n              <Close />\n            </IconButton>\n          </Stack>\n        </DialogTitle>\n        <DialogContent>\n          <Stack spacing={1} marginTop={1}>\n            <TextField\n              label=\"Account Name\"\n              value={nextAccountName}\n              onChange={(event) => setNextAccountName(event.target.value)}\n              placeholder=\"\"\n            />\n          </Stack>\n        </DialogContent>\n        <DialogActions>\n          <ConfirmDialog\n            onConfirm={() => {\n              removeAccount(accountName);\n              setIsOpen(false);\n            }}\n            title={`Confirm Deleting ${accountName} Account`}\n          >\n            <Button color=\"error\">Delete Account</Button>\n          </ConfirmDialog>\n          <ConfirmDialog\n            onConfirm={() => {\n              hideAccount(accountName);\n              setIsOpen(false);\n            }}\n            title={`Confirm Hiding ${accountName} Account`}\n          >\n            <Button sx={{ marginRight: 10 }} color=\"error\">\n              Hide Account\n            </Button>\n          </ConfirmDialog>\n          <Button\n            disabled={!nextAccountName}\n            onClick={() => {\n              setIsOpen(false);\n            }}\n          >\n            Cancel\n          </Button>\n          <Button\n            disabled={!nextAccountName}\n            onClick={() => {\n              accountName != nextAccountName && updateAccountName(accountName, nextAccountName);\n              setIsOpen(false);\n            }}\n          >\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n","import { Alert, Box, Button, InputAdornment, Paper, Stack, TextField, Typography } from \"@mui/material\";\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo, useState } from \"react\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { Account } from \"shared/models/store/current\";\nimport { addAccountEntry, store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { createAccountColumnConfig } from \"./column-config\";\nimport { useMissingYears } from \"./hooks/useMissingYears\";\nimport { AccountSettings } from \"./settings\";\n\nexport const AccountTab = (props: { accountName: string }) => {\n  const { accountName } = props;\n  const account = useStore(store, (state) => state.wealth[accountName]) as Account;\n  const [date, setDate] = useState(getLocalDateTime());\n  const [amount, setAmount] = useState<number | null>(null);\n\n  const missingYears = useMissingYears(account);\n  const hasSameDate = useMemo(() => {\n    return !!account?.data?.find((x) => date.hasSame(DateTime.fromISO(x.date), \"day\"));\n  }, [account?.data, date]);\n\n  const onAddEntry = () => {\n    if (amount != null) {\n      addAccountEntry(accountName, date, amount);\n      setAmount(null);\n    }\n  };\n\n  const accountColumnConfig = useMemo(() => {\n    return createAccountColumnConfig(accountName);\n  }, [accountName]);\n\n  return (\n    <Stack height=\"100%\" spacing={2}>\n      <Stack direction={\"row\"}>\n        <Typography variant=\"h5\">{accountName}</Typography>\n        <Box sx={{ marginLeft: \"auto\" }}>\n          <AccountSettings key={accountName} accountName={accountName} />\n        </Box>\n      </Stack>\n      {missingYears.length > 0 && (\n        <Paper elevation={3}>\n          <Alert severity=\"warning\">Ensure an entry for Jan 1st for {missingYears.join(\", \")}</Alert>\n        </Paper>\n      )}\n\n      <DatePicker\n        format={shortDate}\n        sx={{ color: \"white\" }}\n        label=\"Date\"\n        defaultValue={date}\n        onChange={(value) => value && setDate(value)}\n        disableFuture\n      />\n      <TextField\n        label=\"amount\"\n        value={amount ?? \"\"}\n        type=\"number\"\n        onChange={(event) => (event.target.value === \"\" ? setAmount(null) : setAmount(+event.target.value))}\n        slotProps={{\n          input: {\n            startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n          },\n        }}\n        placeholder=\"0\"\n      />\n      <Button disabled={amount === null || !date || hasSameDate} onClick={onAddEntry}>\n        Add Entry\n      </Button>\n\n      <AgGrid\n        rowData={account.data}\n        columnDefs={accountColumnConfig}\n        id={account + \"-history\"}\n        autoSizeStrategy={{ type: \"fitGridWidth\" }}\n        onRowDataUpdated={(x) => x.api.sizeColumnsToFit()}\n        stopEditingWhenCellsLoseFocus\n      />\n    </Stack>\n  );\n};\n","import { DateTime } from \"luxon\";\nimport { AccountData } from \"shared/models/store/current\";\n\nexport const findNearestOnOrBefore = (date: DateTime, data: AccountData[]) => {\n  return data.find((x, idx, array) => {\n    if (idx == 0 && DateTime.fromISO(x.date).startOf(\"day\") >= date) {\n      return true;\n    }\n\n    if (\n      idx < array.length - 1 &&\n      DateTime.fromISO(x.date).startOf(\"day\") <= date &&\n      DateTime.fromISO(data[idx + 1].date).startOf(\"day\") > date\n    ) {\n      return true;\n    }\n\n    if (idx === array.length - 1) {\n      return true;\n    }\n  });\n};\n\nexport const findNearestIdxOnOrBefore = <T>(date: DateTime, data: T[], selector: (data: T) => DateTime) => {\n  return data.findIndex((x, idx, array) => {\n    if (idx == 0 && selector(x) >= date) {\n      return true;\n    }\n\n    if (idx < array.length - 1 && selector(x) <= date && selector(data[idx + 1]) > date) {\n      return true;\n    }\n\n    if (idx === array.length - 1) {\n      return true;\n    }\n  });\n};\n","import { DateTime } from \"luxon\";\nimport { Account, Mortgage } from \"shared/models/store/current\";\n\nexport const getGraphDates = (accounts: (Account | Mortgage)[]) => {\n  return [\n    ...new Set(\n      accounts.flatMap((x) => {\n        return x.data.map((x) => DateTime.fromISO(x.date).startOf(\"day\").toISO());\n      })\n    ),\n  ]\n    .map((x) => DateTime.fromISO(x!))\n    .sort((a, b) => a.toMillis() - b.toMillis()) as DateTime<true>[];\n};\n","import { DateTime } from \"luxon\";\nimport { Loan } from \"shared/models/store/current\";\n\nexport const calcLoanBalance = (date: DateTime, loan: Loan) => {\n  const { firstPaymentDate, paymentsPerYear, principal: principal, ratePct: rate, payment: monthlyPayment } = loan;\n  const annualizedRate = rate / paymentsPerYear;\n  const periods = date.diff(DateTime.fromISO(firstPaymentDate), \"months\").months;\n  const totalRate = (1 + annualizedRate) ** periods;\n  const balance = principal * totalRate - (monthlyPayment / annualizedRate) * (totalRate - 1);\n\n  return balance;\n};\n\nexport const calcEquity = (\n  ownershipPct: number,\n  houseValue: number | undefined,\n  loanBalance: number,\n  principal: number\n) => {\n  return houseValue ? houseValue * ownershipPct - loanBalance : principal - loanBalance;\n};\n","import { Button, InputAdornment, TextField } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo, useState } from \"react\";\nimport { addAccountEntry, store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\n\nexport const AddEntry = (props: { accountName: string }) => {\n  const { accountName } = props;\n  const [date, setDate] = useState<DateTime>(getLocalDateTime());\n  const [amount, setAmount] = useState<number | null>(null);\n\n  const onAddEntry = () => {\n    if (date != undefined && amount != null) {\n      addAccountEntry(accountName, date, amount);\n      setAmount(null);\n    }\n  };\n\n  const account = useStore(store, (state) => state.wealth[accountName]);\n  const hasSameDate = useMemo(() => {\n    return !!account?.data?.find((x) => date?.hasSame(DateTime.fromISO(x.date), \"day\"));\n  }, [account?.data, date]);\n\n  return (\n    <Stack spacing={2}>\n      <DatePicker\n        value={date}\n        onChange={(date: DateTime | null) => {\n          date && setDate(date);\n        }}\n        disableFuture\n      />\n      <TextField\n        label=\"amount\"\n        value={amount ?? \"\"}\n        type=\"number\"\n        onChange={(event) => (event.target.value === \"\" ? setAmount(null) : setAmount(+event.target.value))}\n        slotProps={{\n          input: {\n            startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n          },\n        }}\n        placeholder=\"0\"\n      />\n      <Button disabled={amount === null || !date || hasSameDate} onClick={onAddEntry}>\n        Add Home Value\n      </Button>\n    </Stack>\n  );\n};\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\nimport { Button } from \"@mui/material\";\nimport { ColDef } from \"ag-grid-community\";\nimport { CustomCellRendererProps } from \"ag-grid-react\";\nimport { DateTime } from \"luxon\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { AccountData } from \"shared/models/store/current\";\nimport { removeAccountEntry, updateAccountDate, updateAccountValue } from \"shared/store\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const createAccountColumnConfig = (accountName: string): ColDef<AccountData>[] => [\n  {\n    cellEditor: \"agDateCellEditor\",\n    editable: true,\n    headerName: \"Date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\n    valueSetter: (x) => {\n      const date = DateTime.fromJSDate(x.newValue);\n      if (date.isValid) {\n        updateAccountDate(accountName, x.data, date);\n      }\n      return date.isValid;\n    },\n  },\n  {\n    editable: true,\n    cellEditor: \"agNumberCellEditor\",\n    headerName: \"Home Value\",\n    cellRenderer: (x: CustomCellRendererProps<AccountData>) => <Cash value={x.value} placement=\"left\" />,\n    valueGetter: (x) => x.data?.value,\n    type: \"numericColumn\",\n    valueSetter: (x) => {\n      updateAccountValue(accountName, x.data, +x.newValue);\n      return true;\n    },\n  },\n  {\n    cellStyle: () => ({ display: \"inline-flex\", padding: \"0px\" }),\n    headerName: \"\",\n    width: 80,\n    sortable: false,\n    colId: \"actions\",\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\n      return (\n        <Button\n          onClick={() => {\n            props.data && removeAccountEntry(accountName, props.data);\n          }}\n          color=\"error\"\n          fullWidth\n        >\n          <DeleteForeverIcon />\n        </Button>\n      );\n    },\n  },\n];\n\ntype House = {\n  date: DateTime;\n  balance: number;\n  equity: number;\n};\n\nexport const mortgageColumnConfig: ColDef<House>[] = [\n  {\n    headerName: \"Date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data?.date,\n  },\n  {\n    headerName: \"Loan Balance\",\n    valueGetter: (x) => x.data?.balance.toFixed(2),\n    cellRenderer: (x: CustomCellRendererProps<House>) => <Cash value={x.value} placement=\"left\" />,\n    type: \"numericColumn\",\n  },\n  {\n    headerName: \"Equity\",\n    valueGetter: (x) => x.data?.equity.toFixed(2),\n    cellRenderer: (x: CustomCellRendererProps<House>) => <Cash value={x.value} placement=\"left\" />,\n    type: \"numericColumn\",\n  },\n];\n","import Close from \"@mui/icons-material/Close\";\nimport SettingsIcon from \"@mui/icons-material/Settings\";\nimport {\n  Box,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  IconButton,\n  Stack,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useRef, useState } from \"react\";\nimport { ConfirmDialog } from \"shared/components/confirm-dialog\";\nimport { Loan } from \"shared/models/store/version-1\";\nimport { hideAccount, removeAccount, setLoan, store, updateAccountName } from \"shared/store\";\nimport { ZodIssue, z } from \"zod\";\n\nconst convertPct = (value: number) => {\n  return value > 1 ? value / 100 : value;\n};\n\nconst validator: z.ZodType<Loan> = z.object({\n  principal: z.number().min(0),\n  ratePct: z.number().min(0),\n  paymentsPerYear: z.number().min(0),\n  payment: z.number().min(0),\n  firstPaymentDate: z.string().datetime({ offset: true }),\n  ownershipPct: z.number().min(0),\n});\n\ninterface AccountSettingsProps {\n  accountName: string;\n}\n\nexport const AccountSettings = (props: AccountSettingsProps) => {\n  const { accountName } = props;\n  const [nextAccountName, setNextAccountName] = useState<string>(accountName);\n  const loan = useStore(store, (x) => {\n    const account = x.wealth[accountName];\n    if (\"loan\" in account) {\n      return account.loan;\n    }\n  });\n\n  const ref = useRef<Partial<Loan>>(loan ?? {});\n  const [error, setError] = useState<Partial<Record<keyof Loan, ZodIssue>>>({});\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleClose = () => {\n    setError({});\n    ref.current = loan ?? {};\n    setIsOpen(false);\n  };\n\n  return (\n    <>\n      <IconButton onClick={() => setIsOpen(true)}>\n        <SettingsIcon />\n      </IconButton>\n      <Dialog open={isOpen} onClose={handleClose}>\n        <DialogTitle sx={{ width: \"100%\" }}>\n          <Box display={\"flex\"} width=\"100%\" alignItems={\"center\"} sx={{ justifyContent: \"space-between\" }}>\n            <Typography variant=\"h6\">{accountName} Settings</Typography>\n            <IconButton sx={{ marginLeft: \"auto\" }} onClick={handleClose}>\n              <Close />\n            </IconButton>\n          </Box>\n        </DialogTitle>\n        <DialogContent>\n          <Stack spacing={2} marginTop={1}>\n            <TextField\n              label=\"Account Name\"\n              value={nextAccountName}\n              onChange={(event) => setNextAccountName(event.target.value)}\n              placeholder=\"\"\n            />\n            <DatePicker\n              defaultValue={ref.current?.firstPaymentDate ? DateTime.fromISO(ref.current.firstPaymentDate) : null}\n              label=\"First Payment\"\n              slotProps={{\n                textField: {\n                  error: !!error.firstPaymentDate,\n                },\n              }}\n              onChange={(value: DateTime | null) => {\n                if (value) {\n                  ref.current.firstPaymentDate = value.startOf(\"day\").toISO()!;\n                }\n              }}\n            />\n            <TextField\n              error={!!error.principal}\n              defaultValue={loan?.principal}\n              onChange={(event) => {\n                ref.current.principal = +event.target.value;\n              }}\n              variant=\"outlined\"\n              label=\"Principal\"\n              type=\"number\"\n            />\n            <TextField\n              error={!!error.ratePct}\n              defaultValue={(loan?.ratePct ?? 0) * 100}\n              onChange={(event) => {\n                ref.current.ratePct = convertPct(+event.target.value);\n              }}\n              variant=\"outlined\"\n              label=\"Rate (%)\"\n              type=\"number\"\n            />\n            <TextField\n              error={!!error.paymentsPerYear}\n              defaultValue={loan?.paymentsPerYear}\n              onChange={(event) => {\n                ref.current.paymentsPerYear = +event.target.value;\n              }}\n              variant=\"outlined\"\n              label=\"Payments Per Year\"\n              type=\"number\"\n            />\n            <TextField\n              defaultValue={loan?.payment}\n              error={!!error.payment}\n              onChange={(event) => {\n                ref.current.payment = +event.target.value;\n              }}\n              variant=\"outlined\"\n              label=\"Payment\"\n              type=\"number\"\n            />\n            <TextField\n              defaultValue={loan?.ownershipPct}\n              error={!!error.ownershipPct}\n              onChange={(event) => {\n                ref.current.ownershipPct = convertPct(+event.target.value);\n              }}\n              variant=\"outlined\"\n              label=\"Ownership (%)\"\n              type=\"number\"\n            />\n          </Stack>\n        </DialogContent>\n        <DialogActions>\n          <ConfirmDialog\n            onConfirm={() => {\n              removeAccount(accountName);\n              setIsOpen(false);\n            }}\n            title={`Confirm Deleting ${accountName} Mortgage`}\n          >\n            <Button color=\"error\">Delete Account</Button>\n          </ConfirmDialog>\n          <ConfirmDialog\n            onConfirm={() => {\n              hideAccount(accountName);\n              setIsOpen(false);\n            }}\n            title={`Confirm Hiding ${accountName} Account`}\n          >\n            <Button sx={{ marginRight: 10 }} color=\"error\">\n              Hide Account\n            </Button>\n          </ConfirmDialog>\n          <Button disabled={!nextAccountName} onClick={handleClose}>\n            Cancel\n          </Button>\n          <Button\n            disabled={!nextAccountName}\n            onClick={() => {\n              const parsed = validator.safeParse(ref.current);\n              if (parsed.success) {\n                accountName != nextAccountName && updateAccountName(accountName, nextAccountName);\n                setLoan(accountName, parsed.data);\n                handleClose();\n              } else {\n                const issues = Object.groupBy(parsed.error.issues, (x) => x.path.join(\"\"));\n                setError(issues);\n              }\n            }}\n          >\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n","import { Typography } from \"@mui/material\";\nimport { Box, Stack } from \"@mui/system\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { useMemo } from \"react\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { Mortgage } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\nimport { findNearestOnOrBefore } from \"shared/utility/find-nearest-on-or-before\";\nimport { getGraphDates } from \"shared/utility/get-graph-dates\";\nimport { calcEquity, calcLoanBalance } from \"shared/utility/mortgage-calc\";\nimport { AddEntry } from \"./add-entry\";\nimport { createAccountColumnConfig, mortgageColumnConfig } from \"./column-config\";\nimport { AccountSettings } from \"./settings\";\n\nexport const MortgageTab = (props: { accountName: string }) => {\n  const { accountName } = props;\n\n  const account = useStore(store, (state) => state.wealth[accountName]) as Mortgage;\n\n  const allAccounts = useStore(store, (x) => x.wealth);\n\n  const accountColumnConfig = useMemo(() => {\n    return createAccountColumnConfig(accountName);\n  }, [accountName]);\n\n  const mortgageData = useMemo(() => {\n    if (!account?.loan) {\n      return [];\n    }\n\n    return getGraphDates(Object.values(allAccounts)).map((date) => {\n      const loanBalance = calcLoanBalance(date, account.loan!);\n      return {\n        date,\n        balance: loanBalance,\n        equity: calcEquity(\n          account.loan!.ownershipPct,\n          findNearestOnOrBefore(date, account.data)?.value,\n          loanBalance,\n          account.loan!.principal\n        ),\n      };\n    });\n  }, [account, allAccounts]);\n\n  return (\n    <Stack height=\"100%\" spacing={2}>\n      <Stack direction={\"row\"}>\n        <Typography variant=\"h5\">{accountName}</Typography>\n        <Box sx={{ marginLeft: \"auto\" }}>\n          <AccountSettings key={accountName} accountName={accountName} />\n        </Box>\n      </Stack>\n      <AddEntry accountName={accountName} />\n      <AgGrid\n        rowData={account?.data ?? []}\n        columnDefs={accountColumnConfig}\n        id={account + \"-history\"}\n        autoSizeStrategy={{ type: \"fitGridWidth\" }}\n      />\n\n      <AgGrid\n        rowData={mortgageData}\n        columnDefs={mortgageColumnConfig}\n        id={account + \"-history\"}\n        autoSizeStrategy={{ type: \"fitGridWidth\" }}\n      />\n    </Stack>\n  );\n};\n","import { Box, Tab, Tabs } from \"@mui/material\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { useEffect, useState } from \"react\";\nimport { store } from \"shared/store\";\nimport { NewAccount } from \"./new-account\";\nimport { AccountTab } from \"./tab-types/account/account\";\nimport { MortgageTab } from \"./tab-types/mortgage\";\n\nexport const AccountTabs = () => {\n  const accounts = useStore(store, (x) => x.wealth);\n  const firstAccount = Object.keys(accounts)?.[0];\n  const [account, setAccount] = useState<string>(firstAccount);\n\n  useEffect(() => {\n    if (!accounts[account]) {\n      setAccount(Object.keys(accounts)?.[0] ?? \"\");\n    }\n  }, [account, accounts]);\n\n  return (\n    <Box display=\"flex\" width=\"100%\" height=\"100%\" gap={2}>\n      <Box display={\"flex\"} flexDirection={\"column\"} flex={\"0 1 auto\"}>\n        <Tabs\n          orientation=\"vertical\"\n          value={account}\n          onChange={(_, value) => {\n            setAccount(value as string);\n          }}\n        >\n          {Object.entries(accounts)\n            .filter(([, data]) => !data.hidden)\n            .map(([account]) => {\n              return <Tab key={account} value={account} label={account} />;\n            })}\n          <Tab component={NewAccount} />\n        </Tabs>\n      </Box>\n      <Box flex={\"1 1 auto\"} overflow={\"auto\"}>\n        {accounts[account]?.type === \"account\" && <AccountTab accountName={account} />}\n        {accounts[account]?.type === \"mortgage\" && <MortgageTab accountName={account} />}\n      </Box>\n    </Box>\n  );\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\n\nexport const useEarliestAccountEntry = () => {\n  const accounts = useStore(store, (x) => x.wealth);\n  return DateTime.fromMillis(\n    Object.values(accounts)\n      .map((x) => {\n        if (x.type === \"account\") {\n          return x.data[0]?.date ? DateTime.fromISO(x.data[0].date) : getLocalDateTime();\n        }\n        return getLocalDateTime();\n      })\n      .reduce((acc, curr) => Math.min(acc, curr?.toMillis() ?? Infinity), getLocalDateTime().toMillis())\n  );\n};\n","import { DateTime } from \"luxon\";\nimport { Account, Mortgage } from \"shared/models/store/current\";\nimport { findNearestOnOrBefore } from \"./find-nearest-on-or-before\";\nimport { calcEquity, calcLoanBalance } from \"./mortgage-calc\";\n\nconst getMortgageValue = (date: DateTime, mortgage: Mortgage) => {\n  if (!mortgage.loan) {\n    return 0;\n  }\n  const entry = findNearestOnOrBefore(date, mortgage.data);\n  if (entry?.date && mortgage.data[0] === entry && DateTime.fromISO(entry.date).startOf(\"day\") > date) {\n    return 0;\n  }\n  const { ownershipPct, principal } = mortgage.loan;\n  const balance = calcLoanBalance(date, mortgage.loan);\n  return calcEquity(ownershipPct, entry?.value, balance, principal);\n};\n\nconst getAccountValue = (date: DateTime, account: Account) => {\n  const entry = findNearestOnOrBefore(date, account.data);\n  if (entry?.date && account.data[0] === entry && DateTime.fromISO(entry.date).startOf(\"day\") > date) {\n    return 0;\n  }\n  return entry?.value;\n};\n\nexport const getGraphValue = (date: DateTime, account: Account | Mortgage) => {\n  switch (account.type) {\n    case \"account\":\n      return getAccountValue(date, account);\n    case \"mortgage\":\n      return getMortgageValue(date, account);\n  }\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { getGraphDates } from \"shared/utility/get-graph-dates\";\nimport { getGraphValue } from \"shared/utility/get-graph-value\";\n\nexport const useGraphData = () => {\n  const wealth = useStore(store, (x) => x.wealth);\n\n  return useMemo(() => {\n    const dates = getGraphDates(Object.values(wealth));\n    const accounts = Object.entries(wealth);\n    const graphData = dates.map((date) => {\n      return accounts.reduce(\n        (acc, [accountName, account]) => {\n          const value = getGraphValue(date, account);\n\n          if (value) {\n            acc[accountName] = value;\n            acc[\"total\"] = (acc[\"total\"] as number) + value;\n          } else {\n            acc[accountName] = null;\n          }\n\n          acc[\"date\"] = date.toJSDate();\n          return acc;\n        },\n        { total: 0 } as Record<string, number | Date | null>\n      );\n    });\n\n    graphData.forEach((x, idx, arr) => {\n      if (idx < arr.length - 1) {\n        Object.keys(x).forEach((key) => {\n          if (x[key] === null && arr[idx + 1][key] !== null) {\n            x[key] = 0;\n          }\n        });\n      }\n    });\n\n    const firstNonZero = graphData.findIndex((x) => (x[\"total\"] as number) > 0);\n    return graphData.slice(firstNonZero);\n  }, [wealth]);\n};\n","import { Box } from \"@mui/system\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { AgAreaSeriesOptions, AgCartesianChartOptions, AgLineSeriesOptions, time } from \"ag-charts-community\";\nimport { AgCharts } from \"ag-charts-react\";\nimport { DateTime } from \"luxon\";\nimport { useMemo, useState } from \"react\";\nimport { useEarliestAccountEntry } from \"shared/hooks/use-earliest-account-entry\";\nimport { store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { formatCashShort } from \"shared/utility/format-cash\";\nimport { useGraphData } from \"./use-graph-data\";\n\nexport const WealthChart = () => {\n  const wealth = useStore(store, (x) => x.wealth);\n  const data = useGraphData();\n  const initialFromDate = useEarliestAccountEntry().startOf(\"year\");\n  const intialToDate = getLocalDateTime().endOf(\"year\");\n  const [fromDate, setFromDate] = useState<DateTime>(getLocalDateTime().plus({ year: -1 }));\n  const [toDate, setToDate] = useState<DateTime>(intialToDate);\n\n  const filteredData = useMemo(() => {\n    return data.filter((x) => {\n      const year = (x[\"date\"] as Date).getFullYear();\n      return year >= fromDate.year && year <= toDate.year;\n    });\n  }, [data, fromDate.year, toDate.year]);\n\n  const series = useMemo(() => {\n    return [\n      ...Object.entries(wealth).map(([x, data]) => {\n        return {\n          stacked: true,\n          type: \"area\",\n          xKey: \"date\",\n          yKey: x,\n          yName: `${x}${data.hidden ? \" (hidden)\" : \"\"}`,\n          tooltip: {\n            renderer: ({ datum, yKey, xKey }) => ({\n              content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCashShort(datum[yKey])}`,\n            }),\n          },\n        } as AgAreaSeriesOptions;\n      }),\n      {\n        type: \"line\",\n        xKey: \"date\",\n        yKey: \"total\",\n        yName: \"Total\",\n        tooltip: {\n          renderer: ({ datum, yKey, xKey }) => ({\n            content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCashShort(datum[yKey])}`,\n          }),\n        },\n      } as AgLineSeriesOptions,\n    ];\n  }, [wealth]);\n\n  const options: AgCartesianChartOptions = useMemo(\n    () => ({\n      theme: \"ag-default-dark\",\n      title: {\n        text: `Total Wealth ${formatCashShort((data[data.length - 1]?.total ?? 0) as number)}`,\n      },\n      data: filteredData,\n      axes: [\n        {\n          type: \"time\",\n          position: \"bottom\",\n          label: {\n            format: \"%Y\",\n          },\n          nice: false,\n          interval: {\n            step: time.year.every(1, { snapTo: \"start\" }),\n          },\n        },\n        {\n          type: \"number\",\n          position: \"left\",\n        },\n      ],\n      series,\n    }),\n    [data, filteredData, series]\n  );\n  return (\n    <Box position={\"relative\"} height=\"100%\" width=\"100%\">\n      <AgCharts options={options} css={{ height: \"100%\", width: \"100%\" }} />\n      <Box position={\"absolute\"} top={16} right={16} zIndex={100} width={250} display={\"flex\"} gap={2}>\n        <DatePicker\n          sx={{ backgroundColor: \"#121212\" }}\n          views={[\"year\"]}\n          label=\"From\"\n          minDate={initialFromDate}\n          maxDate={intialToDate}\n          value={fromDate}\n          onChange={(value) => {\n            value && setFromDate(value);\n          }}\n        />\n        <DatePicker\n          label=\"To\"\n          sx={{ backgroundColor: \"#121212\" }}\n          views={[\"year\"]}\n          value={toDate}\n          minDate={initialFromDate}\n          maxDate={intialToDate}\n          onChange={(value) => {\n            value && setToDate(value);\n          }}\n        />\n      </Box>\n    </Box>\n  );\n};\n","import { Box } from \"@mui/material\";\nimport { AccountTabs } from \"./account-tabs\";\nimport { WealthChart } from \"./wealth-chart\";\n\nexport const NetWealth = () => {\n  return (\n    <Box display={\"flex\"} height=\"100%\" width={\"100%\"} overflow={\"hidden\"} gap={2}>\n      <Box flex=\"0 1 auto\">\n        <Box\n          width={650}\n          height={\"100%\"}\n          sx={{\n            padding: 2,\n            border: \"1px solid rgba(255,255,255,0.1)\",\n            borderRadius: 2,\n            minWidth: 480,\n            backgroundColor: \"#121212\",\n            boxShadow: \"2px 3px 9px 1px #12121252\",\n          }}\n        >\n          <AccountTabs />\n        </Box>\n      </Box>\n      <Box flex=\"1 1 auto\" overflow={\"hidden\"} width=\"100%\" height={\"100%\"}>\n        <WealthChart />\n      </Box>\n    </Box>\n  );\n};\n","import { Box, Divider, Stack, Typography } from \"@mui/material\";\nimport { ReactNode } from \"react\";\n\nexport const Card = (props: { title: ReactNode; children?: ReactNode }) => {\n  const { title, children } = props;\n\n  return (\n    <Box\n      sx={{\n        border: \"1px solid rgba(255,255,255,0.1)\",\n        borderRadius: 2,\n        minWidth: 0,\n        backgroundColor: \"#121212\",\n        boxShadow: \"2px 3px 9px 1px #12121252\",\n\n        minHeight: \"max-content\",\n      }}\n    >\n      <Typography sx={{ paddingBottom: 1, paddingLeft: 2, paddingTop: 1, display: \"flex\" }} variant=\"h5\">\n        {title}\n      </Typography>\n\n      {children && (\n        <>\n          <Divider />\n          <Stack\n            padding={1}\n            direction={\"row\"}\n            spacing={0.5}\n            width={\"100%\"}\n            minHeight={80}\n            justifyContent={\"space-between\"}\n          >\n            {children}\n          </Stack>\n        </>\n      )}\n    </Box>\n  );\n};\n","import { Box } from \"@mui/system\";\nimport { useMemo } from \"react\";\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\nimport { Cash } from \"./cash\";\n\ninterface CashProps {\n  min?: number;\n  max?: number;\n  fallback?: number;\n  disableTooltip?: boolean;\n  compact?: boolean;\n  tooltip?: string;\n\n  placement?:\n    | \"top\"\n    | \"right\"\n    | \"bottom\"\n    | \"left\"\n    | \"bottom-end\"\n    | \"bottom-start\"\n    | \"left-end\"\n    | \"left-start\"\n    | \"right-end\"\n    | \"right-start\"\n    | \"top-end\"\n    | \"top-start\"\n    | undefined;\n}\nexport const CashRange = ({ min, max, fallback, disableTooltip, compact = true }: CashProps) => {\n  const showRange = useMemo(() => {\n    const minFormatted = compact ? formatCashShort(min ?? 0) : formatCash(min ?? 0);\n    const maxFormatted = compact ? formatCashShort(max ?? 0) : formatCash(max ?? 0);\n    return minFormatted !== maxFormatted;\n  }, [compact, max, min]);\n\n  return (\n    <Box>\n      {!showRange && (\n        <Cash\n          fallback={fallback}\n          value={max}\n          tooltip={min != max ? `${formatCash(min ?? 0)} - ` : undefined}\n          disableTooltip={disableTooltip}\n          compact={compact}\n        />\n      )}\n      {showRange && (\n        <>\n          <Cash value={min} fallback={fallback} disableTooltip={disableTooltip} compact={compact} />\n          <span> - </span>\n          <Cash value={max} fallback={fallback} disableTooltip={disableTooltip} compact={compact} />\n        </>\n      )}\n    </Box>\n  );\n};\n","export const formatPercent = new Intl.NumberFormat(\"en-us\", {\n  style: \"percent\",\n  maximumFractionDigits: 1,\n}).format;\n\nexport const formatPercentKatex = (value: number) =>\n  new Intl.NumberFormat(\"en-us\", {\n    style: \"percent\",\n    maximumFractionDigits: 1,\n  })\n    .format(value)\n    .replace(\"%\", \"\\\\%\");\n","import { Box } from \"@mui/system\";\nimport { ReactNode } from \"react\";\nimport { formatPercent } from \"shared/utility/format-percent\";\n\ninterface PercentProps {\n  value?: number;\n  probability?: number;\n  fallback?: ReactNode;\n}\n\nconst getColor = (probability?: number) => {\n  if (!probability) {\n    return \"inherit\";\n  }\n  if (probability >= 0.5) {\n    return \"green\";\n  }\n  if (probability >= 0.25) {\n    return \"orange\";\n  }\n  return \"rgb(244, 67, 54)\";\n};\n\nexport const Percent = ({ value, probability, fallback }: PercentProps) => {\n  return <Box color={getColor(probability)}>{value != undefined ? formatPercent(value) : fallback}</Box>;\n};\n","import { Box } from \"@mui/system\";\nimport { Percent } from \"./percent\";\n\ninterface PercentProps {\n  min?: number;\n  max?: number;\n  fallback?: number;\n}\n\nexport const PercentRange = ({ min, max, fallback }: PercentProps) => {\n  return (\n    <Box>\n      {(max ?? 0) / (min ?? 1) <= 1.005 && <Percent fallback={fallback} value={max} />}\n      {(max ?? 0) / (min ?? 1) > 1.005 && (\n        <>\n          <Percent value={min} fallback={fallback} />\n          <span> - </span>\n          <Percent value={max} fallback={fallback} />\n        </>\n      )}\n    </Box>\n  );\n};\n","import { Box } from \"@mui/material\";\nimport { ReactNode } from \"react\";\n\ninterface CellProps {\n  children?: ReactNode;\n  secondaryValue?: ReactNode;\n  tertiaryValue?: ReactNode;\n  title: ReactNode;\n  className?: string;\n}\n\nexport const Value = (props: CellProps) => {\n  const { children, secondaryValue, tertiaryValue, title, className } = props;\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        minWidth: 145,\n        height: 64,\n        padding: \"0px 8px\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"flex-start\",\n        gap: 0.5,\n        flexShrink: 0,\n      }}\n      className={className}\n    >\n      <Box display={\"flex\"} alignItems={\"center\"} gap={0.5}>\n        <Box fontSize={18} fontWeight={700} lineHeight={\"20px\"}>\n          {children ? children : \"?\"}\n        </Box>\n        {!!(secondaryValue ?? tertiaryValue) && (\n          <Box\n            alignSelf={\"flex-end\"}\n            fontSize={12}\n            fontWeight={500}\n            lineHeight={\"16px\"}\n            textTransform={\"uppercase\"}\n            color={\"#888\"}\n          >\n            {secondaryValue ?? tertiaryValue}\n          </Box>\n        )}\n      </Box>\n      <Box fontSize={12} fontWeight={500} lineHeight={\"16px\"} textTransform={\"uppercase\"}>\n        {title}\n      </Box>\n    </Box>\n  );\n};\n","import { Box } from \"@mui/material\";\nimport { DateTime } from \"luxon\";\nimport { CashRange } from \"shared/components/formatters/cash-range\";\nimport { Percent } from \"shared/components/formatters/percent\";\nimport { PercentRange } from \"shared/components/formatters/percent-range\";\nimport { Value } from \"shared/components/formatters/value\";\nimport { Cluster } from \"shared/hooks/use-clusters\";\n\ninterface ClusterValueProps extends Cluster {\n  compact?: boolean;\n  className?: string;\n}\n\nexport const ClusterValue = (props: ClusterValueProps) => {\n  const { min, max, probability, title, compact, className } = props;\n  return (\n    <Value\n      className={className}\n      title={\n        <Box display={\"flex\"} gap={1}>\n          <span>{title}</span>\n          {probability < 1 && probability >= 0 && <Percent probability={probability} value={probability} />}\n        </Box>\n      }\n    >\n      {min < 1 && min > 0 && <PercentRange min={min} max={max} />}\n      {min > 1 && <CashRange compact={compact} min={min} max={max} />}\n      {min === 0 && 0}\n    </Value>\n  );\n};\n\nexport const ClusterValues = (props: { clusters?: Cluster[]; eventDate?: DateTime; compact?: boolean }) => {\n  const { clusters, eventDate, compact = true } = props;\n  return clusters?.map((x, i, arr) => {\n    const title = arr.length === 1 && (eventDate?.diffNow().toMillis() ?? -1) > 0 ? \"Expected\" : x.title;\n    return <ClusterValue {...x} title={title} compact={compact} key={i} />;\n  });\n};\n","import { Duration, DurationUnit } from \"luxon\";\n\nexport function toHuman(dur: Duration, smallestUnit: DurationUnit = \"seconds\"): string {\n  const units = [\"years\", \"months\", \"days\", \"hours\", \"minutes\", \"seconds\", \"milliseconds\"] as DurationUnit[];\n  const smallestIdx = units.indexOf(smallestUnit);\n  const entries = Object.entries(\n    dur\n      .shiftTo(...units)\n      .normalize()\n      .toObject()\n  ).filter(([, amount], idx) => amount > 0 && idx <= smallestIdx);\n  const dur2 = Duration.fromObject(entries.length === 0 ? { [smallestUnit]: 0 } : Object.fromEntries(entries));\n  return dur2.toHuman().replaceAll(\",\", \"\");\n}\n","import { Box, Tooltip } from \"@mui/material\";\nimport { DateTime } from \"luxon\";\nimport { ReactNode, useMemo } from \"react\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { toHuman } from \"shared/utility/to-human\";\n\ninterface DurationProps {\n  dateTime?: DateTime;\n  children?: ReactNode;\n  variant?: \"countdown\" | \"date\";\n  dateFormat?: string;\n}\nexport const CountDown = (props: DurationProps) => {\n  const { dateTime, children, variant = \"countdown\", dateFormat = shortDate } = props;\n\n  const countDownStr = useMemo(() => {\n    if (!dateTime) {\n      return \"??\";\n    }\n    if (variant === \"countdown\") {\n      const diff = dateTime?.diff(getLocalDateTime(), [\"years\", \"months\", \"days\", \"hours\"]);\n\n      return toHuman(diff, \"days\");\n    }\n\n    return dateTime?.toFormat(dateFormat);\n  }, [dateFormat, dateTime, variant]);\n\n  const tooltipStr = useMemo(() => {\n    if (!dateTime) {\n      return \"??\";\n    }\n\n    if (variant === \"countdown\") {\n      return dateTime?.toFormat(dateFormat);\n    }\n    const diff = dateTime?.diff(getLocalDateTime(), [\"years\", \"months\", \"days\", \"hours\"]);\n\n    return toHuman(diff, \"days\");\n  }, [dateFormat, dateTime, variant]);\n\n  const countDownColor = useMemo(() => {\n    if (!dateTime) {\n      return \"white\";\n    }\n\n    const days = dateTime.diffNow(\"days\").days;\n    if (days < 30) {\n      return \"green\";\n    } else if (days <= 60) {\n      return \"orange\";\n    }\n\n    return \"rgb(244, 67, 54)\";\n  }, [dateTime]);\n\n  return dateTime && dateTime > getLocalDateTime() ? (\n    <Tooltip title={tooltipStr}>\n      <Box color={countDownColor}>{countDownStr}</Box>\n    </Tooltip>\n  ) : (\n    children\n  );\n};\n","import { Store } from \"@tanstack/store\";\nimport { Scenario } from \"shared/models/scenario\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\n\ninterface ScenarioStore {\n  scenarios: Partial<Record<number, Scenario[]>>;\n  loading: boolean;\n  minYear: number;\n  maxYear: number;\n}\n\nconst year = getLocalDateTime().year;\nexport const scenarioStore = new Store<ScenarioStore>({\n  loading: true,\n  maxYear: year,\n  minYear: year,\n  scenarios: {},\n});\n","export function makeMatrix(columns: number, rows: number) {\n  const matrix = [];\n  for (let i = 0; i < columns; i++) {\n    const column = [];\n    for (let j = 0; j < rows; j++) {\n      column.push(0);\n    }\n    matrix.push(column);\n  }\n  return matrix;\n}\n","export function numericSort<T>(x: T[], selector: (data: T) => number) {\n  return x.toSorted(function (a, b) {\n    return selector(a) - selector(b);\n  });\n}\n","export function uniqueCountSorted<T>(x: T[], selector: (x: T) => number) {\n  let uniqueValueCount = 0,\n    lastSeenValue;\n  for (let i = 0; i < x.length; i++) {\n    const value = selector(x[i]);\n    if (i === 0 || value !== lastSeenValue) {\n      lastSeenValue = value;\n      uniqueValueCount++;\n    }\n  }\n  return uniqueValueCount;\n}\n","import { makeMatrix } from \"./make-matrix\";\nimport { numericSort } from \"./numeric-sort\";\nimport { uniqueCountSorted } from \"./unique-count-sorted\";\n\n/**\n * Generates incrementally computed values based on the sums and sums of\n * squares for the data array\n *\n * @private\n * @param {number} j\n * @param {number} i\n * @param {Array<number>} sums\n * @param {Array<number>} sumsOfSquares\n * @return {number}\n * @example\n * ssq(0, 1, [-1, 0, 2], [1, 1, 5]);\n */\nfunction ssq(j: number, i: number, sums: number[], sumsOfSquares: number[]) {\n  let sji; // s(j, i)\n  if (j > 0) {\n    const muji = (sums[i] - sums[j - 1]) / (i - j + 1); // mu(j, i)\n    sji = sumsOfSquares[i] - sumsOfSquares[j - 1] - (i - j + 1) * muji * muji;\n  } else {\n    sji = sumsOfSquares[i] - (sums[i] * sums[i]) / (i + 1);\n  }\n  if (sji < 0) {\n    return 0;\n  }\n  return sji;\n}\n\n/**\n * Function that recursively divides and conquers computations\n * for cluster j\n *\n * @private\n * @param {number} iMin Minimum index in cluster to be computed\n * @param {number} iMax Maximum index in cluster to be computed\n * @param {number} cluster Index of the cluster currently being computed\n * @param {Array<Array<number>>} matrix\n * @param {Array<Array<number>>} backtrackMatrix\n * @param {Array<number>} sums\n * @param {Array<number>} sumsOfSquares\n */\nfunction fillMatrixColumn(\n  iMin: number,\n  iMax: number,\n  cluster: number,\n  matrix: number[][],\n  backtrackMatrix: number[][],\n  sums: number[],\n  sumsOfSquares: number[]\n) {\n  if (iMin > iMax) {\n    return;\n  }\n\n  // Start at midpoint between iMin and iMax\n  const i = Math.floor((iMin + iMax) / 2);\n\n  matrix[cluster][i] = matrix[cluster - 1][i - 1];\n  backtrackMatrix[cluster][i] = i;\n\n  let jlow = cluster; // the lower end for j\n\n  if (iMin > cluster) {\n    jlow = Math.max(jlow, backtrackMatrix[cluster][iMin - 1] || 0);\n  }\n  jlow = Math.max(jlow, backtrackMatrix[cluster - 1][i] || 0);\n\n  let jhigh = i - 1; // the upper end for j\n  if (iMax < matrix[0].length - 1) {\n    jhigh = Math.min(jhigh, backtrackMatrix[cluster][iMax + 1] || 0);\n  }\n\n  let sji;\n  let sjlowi;\n  let ssqjlow;\n  let ssqj;\n  for (let j = jhigh; j >= jlow; --j) {\n    sji = ssq(j, i, sums, sumsOfSquares);\n\n    if (sji + matrix[cluster - 1][jlow - 1] >= matrix[cluster][i]) {\n      break;\n    }\n\n    // Examine the lower bound of the cluster border\n    sjlowi = ssq(jlow, i, sums, sumsOfSquares);\n\n    ssqjlow = sjlowi + matrix[cluster - 1][jlow - 1];\n\n    if (ssqjlow < matrix[cluster][i]) {\n      // Shrink the lower bound\n      matrix[cluster][i] = ssqjlow;\n      backtrackMatrix[cluster][i] = jlow;\n    }\n    jlow++;\n\n    ssqj = sji + matrix[cluster - 1][j - 1];\n    if (ssqj < matrix[cluster][i]) {\n      matrix[cluster][i] = ssqj;\n      backtrackMatrix[cluster][i] = j;\n    }\n  }\n\n  fillMatrixColumn(iMin, i - 1, cluster, matrix, backtrackMatrix, sums, sumsOfSquares);\n  fillMatrixColumn(i + 1, iMax, cluster, matrix, backtrackMatrix, sums, sumsOfSquares);\n}\n\n/**\n * Initializes the main matrices used in Ckmeans and kicks\n * off the divide and conquer cluster computation strategy\n *\n * @private\n * @param {Array<number>} data sorted array of values\n * @param {Array<Array<number>>} matrix\n * @param {Array<Array<number>>} backtrackMatrix\n */\nfunction fillMatrices<T>(data: T[], matrix: number[][], backtrackMatrix: number[][], selector: (x: T) => number) {\n  const nValues = matrix[0].length;\n\n  // Shift values by the median to improve numeric stability\n  const shift = selector(data[Math.floor(nValues / 2)]);\n\n  // Cumulative sum and cumulative sum of squares for all values in data array\n  const sums: number[] = [];\n  const sumsOfSquares: number[] = [];\n\n  // Initialize first column in matrix & backtrackMatrix\n  for (let i = 0, shiftedValue; i < nValues; ++i) {\n    shiftedValue = selector(data[i]) - shift;\n    if (i === 0) {\n      sums.push(shiftedValue);\n      sumsOfSquares.push(shiftedValue * shiftedValue);\n    } else {\n      sums.push(sums[i - 1] + shiftedValue);\n      sumsOfSquares.push(sumsOfSquares[i - 1] + shiftedValue * shiftedValue);\n    }\n\n    // Initialize for cluster = 0\n    matrix[0][i] = ssq(0, i, sums, sumsOfSquares);\n    backtrackMatrix[0][i] = 0;\n  }\n\n  // Initialize the rest of the columns\n  let iMin;\n  for (let cluster = 1; cluster < matrix.length; ++cluster) {\n    if (cluster < matrix.length - 1) {\n      iMin = cluster;\n    } else {\n      // No need to compute matrix[K-1][0] ... matrix[K-1][N-2]\n      iMin = nValues - 1;\n    }\n\n    fillMatrixColumn(iMin, nValues - 1, cluster, matrix, backtrackMatrix, sums, sumsOfSquares);\n  }\n}\n\n/**\n * Ckmeans clustering is an improvement on heuristic-based clustering\n * approaches like Jenks. The algorithm was developed in\n * [Haizhou Wang and Mingzhou Song](http://journal.r-project.org/archive/2011-2/RJournal_2011-2_Wang+Song.pdf)\n * as a [dynamic programming](https://en.wikipedia.org/wiki/Dynamic_programming) approach\n * to the problem of clustering numeric data into groups with the least\n * within-group sum-of-squared-deviations.\n *\n * Minimizing the difference within groups - what Wang & Song refer to as\n * `withinss`, or within sum-of-squares, means that groups are optimally\n * homogenous within and the data is split into representative groups.\n * This is very useful for visualization, where you may want to represent\n * a continuous variable in discrete color or style groups. This function\n * can provide groups that emphasize differences between data.\n *\n * Being a dynamic approach, this algorithm is based on two matrices that\n * store incrementally-computed values for squared deviations and backtracking\n * indexes.\n *\n * This implementation is based on Ckmeans 3.4.6, which introduced a new divide\n * and conquer approach that improved runtime from O(kn^2) to O(kn log(n)).\n *\n * Unlike the [original implementation](https://cran.r-project.org/web/packages/Ckmeans.1d.dp/index.html),\n * this implementation does not include any code to automatically determine\n * the optimal number of clusters: this information needs to be explicitly\n * provided.\n *\n * ### References\n * _Ckmeans.1d.dp: Optimal k-means Clustering in One Dimension by Dynamic\n * Programming_ Haizhou Wang and Mingzhou Song ISSN 2073-4859\n *\n * from The R Journal Vol. 3/2, December 2011\n * @param {Array<number>} data input data, as an array of number values\n * @param {number} nClusters number of desired classes. This cannot be\n * greater than the number of values in the data array.\n * @returns {Array<Array<number>>} clustered input\n * @throws {Error} if the number of requested clusters is higher than the size of the data\n * @example\n * ckmeans([-1, 2, -1, 2, 4, 5, 6, -1, 2, -1], 3);\n * // The input, clustered into groups of similar numbers.\n * //= [[-1, -1, -1, -1], [2, 2, 2], [4, 5, 6]]);\n */\nexport function ckmeans<T>(data: T[], nClusters: number, selector: (x: T) => number) {\n  if (nClusters === 0) {\n    return [];\n  }\n  if (nClusters > data.length) {\n    throw new Error(\"cannot generate more classes than there are data values\");\n  }\n\n  const sorted = numericSort(data, selector);\n  // we'll use this as the maximum number of clusters\n  const uniqueCount = uniqueCountSorted(sorted, selector);\n\n  // if all of the input values are identical, there's one cluster\n  // with all of the input in it.\n  if (uniqueCount === 1) {\n    return [sorted];\n  }\n\n  // named 'S' originally\n  const matrix = makeMatrix(nClusters, sorted.length);\n  // named 'J' originally\n  const backtrackMatrix = makeMatrix(nClusters, sorted.length);\n\n  // This is a dynamic programming way to solve the problem of minimizing\n  // within-cluster sum of squares. It's similar to linear regression\n  // in this way, and this calculation incrementally computes the\n  // sum of squares that are later read.\n  fillMatrices(sorted, matrix, backtrackMatrix, selector);\n\n  // The real work of Ckmeans clustering happens in the matrix generation:\n  // the generated matrices encode all possible clustering combinations, and\n  // once they're generated we can solve for the best clustering groups\n  // very quickly.\n  const clusters = [];\n  let clusterRight = backtrackMatrix[0].length - 1;\n\n  // Backtrack the clusters from the dynamic programming matrix. This\n  // starts at the bottom-right corner of the matrix (if the top-left is 0, 0),\n  // and moves the cluster target with the loop.\n  for (let cluster = backtrackMatrix.length - 1; cluster >= 0; cluster--) {\n    const clusterLeft = backtrackMatrix[cluster][clusterRight];\n\n    // fill the cluster from the sorted input by taking a slice of the\n    // array. the backtrack matrix makes this easy - it stores the\n    // indexes where the cluster should start and end.\n    clusters[cluster] = sorted.slice(clusterLeft, clusterRight + 1);\n\n    if (cluster > 0) {\n      clusterRight = clusterLeft - 1;\n    }\n  }\n\n  return clusters;\n}\n","const areSetsEqual = <T>(a: Set<T>, b: Set<T>) =>\n  [...a].every((value) => b.has(value)) && [...b].every((value) => a.has(value));\n\nexport const collapseClusters = <T>(data: T[][], selector: (data: T) => number) => {\n  const sets = data.map((x) => new Set(x.map((y) => selector(y))));\n  const result: T[][] = [];\n  for (let i = 0; i < sets.length; i++) {\n    const curr = data[i].slice();\n    for (let j = i + 1; j < sets.length; j++) {\n      if (areSetsEqual(sets[i], sets[j])) {\n        curr.push(...data[j]);\n        sets.splice(j, 1);\n        data.splice(j, 1);\n      }\n    }\n    result.push(curr);\n  }\n  return result;\n};\n","import { Cluster } from \"shared/hooks/use-clusters\";\n\nexport const scaleCluster = (cluster: Cluster | undefined, factor: number) => {\n  if (!cluster) {\n    return undefined;\n  }\n  return { ...cluster, min: cluster.min * factor, max: cluster.max * factor, median: cluster.median * factor };\n};\n\nexport const scaleClusters = (clusters: Cluster[] | undefined, factor: number): Cluster[] | undefined => {\n  return clusters?.filter((x) => x).map((x) => scaleCluster(x, factor)!);\n};\n\nexport const findMostMostLikely = (cluster: Cluster[]) => {\n  if (cluster.length === 0) {\n    return;\n  }\n  const mostLikely = cluster.reduce((acc, curr) => {\n    return curr.probability > acc.probability ? curr : acc;\n  });\n  return mostLikely;\n};\n\nexport const clusterTitle = (index: number, length: number) => {\n  if (length === 1) {\n    return \"Actual\";\n  } else if (length == 2) {\n    return [\"Low\", \"High\"][index];\n  } else {\n    return [\"Low\", \"Med\", \"High\"][index];\n  }\n};\n\nexport const getClusterCount = <T>(values: T[], selector: (x: T) => number) => {\n  const uniqeValues = new Set(values.map((x) => selector(x))).size;\n\n  if (uniqeValues < 3) {\n    return uniqeValues;\n  } else if (uniqeValues === 4) {\n    return 2;\n  }\n  return 3;\n};\n\nexport const SumClusters = (clusters: Cluster[][]) => {\n  if (clusters.length == 0) {\n    return [];\n  }\n\n  const numClusters = clusters.reduce((acc, curr) => Math.max(acc, curr.length), 0);\n  const expandedClusters = clusters\n    .filter((x) => x.length > 0)\n    .map((cluster) => {\n      if (cluster.length === 1) {\n        return new Array(numClusters).fill(cluster[0]) as Cluster[];\n      }\n      if (cluster.length === 2 && numClusters === 3) {\n        const min = cluster[0];\n        const max = cluster[1];\n        return [\n          min,\n          {\n            min: (min.min + max.min) / 2,\n            max: (min.max + max.max) / 2,\n            median: (min.median + max.median) / 2,\n            probability: (min.probability + max.probability) / 2,\n            title: \"Med\",\n          },\n          max,\n        ].map((x, _i, arr) => {\n          const probability = x.probability / arr.reduce((acc, curr) => acc + curr.probability, 0);\n          return { ...x, probability };\n        }) as Cluster[];\n      }\n      return cluster;\n    });\n\n  return expandedClusters\n    .reduce((acc, curr) => {\n      return curr.map((x, i) => ({\n        min: x.min + acc[i].min,\n        max: x.max + acc[i].max,\n        median: x.median + acc[i].median,\n        probability: x.probability + acc[i].probability,\n        title: x.title,\n      }));\n    })\n    .map((x, _i, arr) => {\n      const probability = x.probability / arr.reduce((acc, curr) => acc + curr.probability, 0);\n      return { ...x, probability };\n    })\n    .map((x, i, arr) => {\n      return { ...x, title: clusterTitle(i, arr.length) };\n    });\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { useMemo } from \"react\";\nimport { Scenario } from \"shared/models/scenario\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\nimport { ckmeans } from \"shared/utility/ckmeans\";\nimport { clusterTitle, getClusterCount } from \"shared/utility/cluster-helpers\";\nimport { max, median, min, sumSimple } from \"simple-statistics\";\n\nexport interface Cluster {\n  min: number;\n  max: number;\n  median: number;\n  probability: number;\n  title: string;\n}\n\nconst clusters = <T extends Scenario>(values: T[] | undefined, selector: (x: T) => number): Cluster[] => {\n  if (!values || values.length === 0) {\n    return [];\n  }\n\n  const totalWeight = sumSimple(values.map((x) => x.weight));\n  const clusterCount = getClusterCount(values, selector);\n  const clusters = ckmeans(values, clusterCount, selector);\n\n  const result = clusters.map((x, i, arr) => {\n    return {\n      min: min(x.map((x) => selector(x))),\n      max: max(x.map((x) => selector(x))),\n      median: median(x.map((x) => selector(x))),\n      probability: sumSimple(x.map((x) => x.weight)) / totalWeight,\n      title: clusterTitle(i, arr.length),\n    };\n  });\n\n  return result;\n};\n\nexport const useClusters = (year: number) => {\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios[year]);\n\n  return useMemo(() => {\n    if (scenarios?.length === 0) {\n      return {\n        totalPay: [],\n        meritBonus: [],\n        retirementBonus: [],\n        companyBonus: [],\n        pay: [],\n        meritIncrease: [],\n        scenarios,\n        taxablePay: [],\n      };\n    }\n    return {\n      totalPay: clusters(scenarios, (x) => x.totalPay),\n      meritBonus: clusters(scenarios, (x) => x.meritBonus),\n      retirementBonus: clusters(scenarios, (x) => x.retirementBonus),\n      companyBonus: clusters(scenarios, (x) => x.companyBonus),\n      pay: clusters(scenarios, (x) => x.pay.at(-1)?.value ?? 0),\n      meritIncrease: clusters(scenarios, (x) => x.meritIncreasePct + x.equityIncreasePct),\n      taxablePay: clusters(scenarios, (x) => x.taxablePay),\n      scenarios,\n    };\n  }, [scenarios]);\n};\n\nexport const useTotalPayClusters = () => {\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios);\n  return useMemo(() => {\n    const allScenarios = Object.entries(scenarios);\n    if (allScenarios.length === 0) {\n      return [];\n    }\n\n    return allScenarios.map(([year, scenarios]) => {\n      return [year, clusters(scenarios, (x) => x.totalPay)];\n    }) as [string, Cluster[]][];\n  }, [scenarios]);\n};\n","import { DateTime } from \"luxon\";\nimport { AccountData } from \"shared/models/store/current\";\n\nexport function findSameYear(year: number, data: AccountData[]): AccountData | undefined;\nexport function findSameYear(date: DateTime, data: AccountData[]): AccountData | undefined;\nexport function findSameYear(date: DateTime | number, data: AccountData[]): AccountData | undefined {\n  const year = typeof date === \"number\" ? date : date.year;\n  return data.find((x) => {\n    return DateTime.fromISO(x.date).year === year;\n  });\n}\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { AccountData } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\nimport { findSameYear } from \"shared/utility/find-same-year\";\n\nconst useRealDate = (year: number | undefined, data: AccountData[]) => {\n  return useMemo(() => {\n    if (!year) {\n      return undefined;\n    }\n    const meritBonus = findSameYear(year, data);\n    if (!meritBonus) {\n      return undefined;\n    }\n\n    return DateTime.fromISO(meritBonus.date);\n  }, [data, year]);\n};\n\nexport const useDates = (year?: number) => {\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\n  const meritBonusDate = useRealDate(year, timeSeries.meritBonus);\n  const companyBonusDate = useRealDate(year, timeSeries.companyBonus);\n  const retirementBonusDate = useRealDate(year, timeSeries.retirementBonus);\n\n  return useMemo(() => {\n    return {\n      meritIncrease: DateTime.fromObject({ month: 4, day: 1, year }),\n      meritBonus: meritBonusDate ?? DateTime.fromObject({ month: 4, day: 15, year }),\n      companyBonus: companyBonusDate ?? DateTime.fromObject({ month: 6, day: 15, year }),\n      retirementBonus: retirementBonusDate ?? DateTime.fromObject({ month: 7, day: 15, year }),\n    };\n  }, [companyBonusDate, meritBonusDate, retirementBonusDate, year]);\n};\n\nexport const useDateRanges = (year: number) => {\n  return useMemo(\n    () => ({\n      base: {\n        start: DateTime.fromObject({ month: 1, day: 1, year }),\n        end: DateTime.fromObject({ month: 12, day: 31, year }).endOf(\"day\"),\n      },\n      meritBonus: {\n        start: DateTime.fromObject({ month: 1, day: 1, year: year - 1 }),\n        end: DateTime.fromObject({ month: 12, day: 31, year: year - 1 }).endOf(\"day\"),\n      },\n      companyBonus: {\n        start: DateTime.fromObject({ day: 1, month: 4, year: year - 1 }),\n        end: DateTime.fromObject({ day: 31, month: 3, year }).endOf(\"day\"),\n      },\n      retirementBonus: {\n        start: DateTime.fromObject({ day: 1, month: 7, year: year - 1 }),\n        end: DateTime.fromObject({ day: 30, month: 6, year }).endOf(\"day\"),\n      },\n    }),\n    [year]\n  );\n};\n","export interface PaymentPeriod {\n  start: string;\n  end: string;\n  payedOn: string;\n  value: number;\n  cumulative: number;\n  type: PaymentType;\n}\n\nexport const PaymentTypes = {\n  regular: \"regular\",\n  bonus: \"taxable bonus\",\n  nonTaxableBonus: \"non-taxable bonus\",\n} as const;\n\nexport type PaymentType = (typeof PaymentTypes)[keyof typeof PaymentTypes];\n","export const MAX_NUM_ENTRIES = 10;\n","import InsertChartIcon from \"@mui/icons-material/InsertChart\";\nimport { Tooltip } from \"@mui/material\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { AgCartesianChartOptions, AgColorType } from \"ag-charts-community\";\nimport { AgCharts } from \"ag-charts-react\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { TimeSeries } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\nimport { ckmeans, collapseClusters } from \"shared/utility/ckmeans\";\nimport { formatCash } from \"shared/utility/format-cash\";\nimport { formatPercent } from \"shared/utility/format-percent\";\nimport { sortByDate } from \"shared/utility/sort-by-date\";\n\nconst getColor = (probability?: number) => {\n  if (!probability) {\n    return \"inherit\";\n  }\n  if (probability >= 0.5) {\n    return \"green\";\n  }\n  if (probability >= 0.25) {\n    return \"orange\";\n  }\n  return \"rgb(244, 67, 54)\";\n};\n\nexport const SparkChart = (props: { accountName: TimeSeries; variant: \"cash\" | \"percent\" | \"number\" }) => {\n  const { accountName, variant } = props;\n  const account = useStore(store, (x) => x.projectedIncome.timeSeries[accountName]);\n\n  const ckData = useMemo(() => {\n    const data = account.map((x) => ({ ...x, date: DateTime.fromISO(x.date).toJSDate() }));\n    const selector = (x: { date: Date; value: number }) => x.value;\n    const maxClusters = Math.min(data.length, 3);\n    const ck = collapseClusters(ckmeans(data, maxClusters, selector), selector)\n      .map((x) => {\n        return x.map((y, i, subArr) => ({\n          ...y,\n          cluster: subArr.length / data.length,\n          color: getColor(subArr.length / data.length) as AgColorType,\n        }));\n      })\n      .flat()\n      .sort(sortByDate((x) => DateTime.fromJSDate(x.date), \"asc\"));\n    return ck;\n  }, [account]);\n\n  const options = useMemo((): AgCartesianChartOptions => {\n    return {\n      data: ckData,\n      theme: \"ag-default-dark\",\n      series: [\n        {\n          type: \"line\",\n          yKey: \"value\",\n          xKey: \"date\",\n          stroke: \"white\",\n          marker: {\n            itemStyler: (params) => {\n              const fill = variant === \"percent\" ? \"#FFF\" : params.datum.color;\n              return {\n                fill,\n                size: 10,\n              };\n            },\n          },\n        },\n      ],\n      axes: [\n        {\n          type: \"number\",\n          position: \"left\",\n\n          nice: true,\n          interval: {\n            maxSpacing: 45,\n          },\n          label: {\n            formatter: (params) => {\n              return variant === \"percent\" ? formatPercent(params.value) : formatCash(params.value);\n            },\n          },\n        },\n        {\n          nice: false,\n          type: \"time\",\n          position: \"bottom\",\n          label: {\n            format: \"%Y\",\n          },\n        },\n      ],\n    };\n  }, [ckData, variant]);\n\n  const isDisabled = account.length === 0;\n\n  return (\n    <Tooltip\n      disableHoverListener={isDisabled}\n      disableFocusListener={isDisabled}\n      disableTouchListener={isDisabled}\n      slotProps={{\n        tooltip: {\n          sx: {\n            maxWidth: \"unset\",\n          },\n        },\n      }}\n      title={<AgCharts options={options} css={{ width: 750, height: 375 }} />}\n    >\n      <InsertChartIcon color={isDisabled ? \"disabled\" : undefined} />\n    </Tooltip>\n  );\n};\n","import { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { AccountData, TimeSeries } from \"shared/models/store/current\";\nimport { store } from \".\";\n\nexport const updateProjectedIncomeDate = (timeSeries: TimeSeries, data: AccountData, date: DateTime) => {\n  store.setState((prev) => {\n    const next = create(prev, (next) => {\n      const idx = prev.projectedIncome.timeSeries[timeSeries].findIndex((x) => x === data);\n      if (idx < 0) {\n        throw new Error(\"failed to find data\");\n      }\n\n      next.projectedIncome.timeSeries[timeSeries][idx].date = date.toISO()!;\n    });\n    return next;\n  });\n};\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\nimport UpdateIcon from \"@mui/icons-material/Update\";\nimport { Button, Tooltip } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { ColDef, ICellRendererParams } from \"ag-grid-community\";\nimport { CustomCellRendererProps } from \"ag-grid-react\";\nimport { DateTime } from \"luxon\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { Percent } from \"shared/components/formatters/percent\";\nimport { AccountData, TimeSeries } from \"shared/models/store/current\";\nimport { updateProjectedIncome } from \"shared/store\";\nimport { removeProjectedIncome } from \"shared/store/remove-projected-income\";\nimport { updateProjectedIncomeDate } from \"shared/store/update-projected-income-date\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const createAccountColumnConfig = (\n  accountName: TimeSeries,\n  variant: \"number\" | \"cash\" | \"percent\",\n  dateVariant: \"date\" | \"year\"\n): ColDef<AccountData>[] => [\n  {\n    headerName: dateVariant === \"date\" ? \"Date\" : \"Year\",\n    colId: \"date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(dateVariant === \"date\" ? shortDate : \"yyyy\"),\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\n    tooltipValueGetter: (x) => (dateVariant === \"year\" ? x.value?.toFormat(shortDate) : undefined),\n    cellRenderer: (x: ICellRendererParams<unknown, DateTime>) => {\n      return (\n        <Stack direction={\"row\"} alignItems={\"center\"}>\n          {x.valueFormatted}&nbsp;\n          {x.value && x.value > DateTime.local() && (\n            <Tooltip title=\"Future Event\">\n              <UpdateIcon htmlColor=\"orange\" />\n            </Tooltip>\n          )}\n        </Stack>\n      );\n    },\n    cellEditor: dateVariant === \"date\" ? \"agDateCellEditor\" : \"agNumberCellEditor\",\n    editable: true,\n    valueSetter: (x) => {\n      const date =\n        dateVariant === \"date\"\n          ? DateTime.fromJSDate(x.newValue)\n          : DateTime.fromISO(x.data.date).set({ year: x.newValue });\n\n      if (date.isValid) {\n        updateProjectedIncomeDate(accountName, x.data, date);\n      }\n      return date.isValid;\n    },\n  },\n  {\n    headerName: \"Value\",\n    valueGetter: (x) => x.data?.value,\n    cellRenderer: (x: CustomCellRendererProps<AccountData>) =>\n      variant === \"cash\" ? <Cash compact={false} value={x.value} /> : <Percent value={x.value} />,\n    type: \"numericColumn\",\n    editable: true,\n    cellEditor: \"agNumberCellEditor\",\n    valueSetter: (x) => {\n      updateProjectedIncome(accountName, x.data, +x.newValue);\n      return true;\n    },\n  },\n  {\n    cellStyle: () => ({ display: \"inline-flex\", padding: \"0px\" }),\n    sortable: false,\n    headerName: \"\",\n    width: 80,\n    colId: \"actions\",\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\n      return (\n        <Button\n          onClick={() => {\n            props.data && removeProjectedIncome(accountName, props.data);\n          }}\n          color=\"error\"\n          fullWidth\n        >\n          <DeleteForeverIcon />\n        </Button>\n      );\n    },\n  },\n];\n","import { Box, Button, InputAdornment, Paper, Stack, TextField, Tooltip, Typography } from \"@mui/material\";\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo, useState } from \"react\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { MAX_NUM_ENTRIES } from \"shared/constants\";\nimport { TimeSeries } from \"shared/models/store/current\";\nimport { addProjectedIncome, store } from \"shared/store\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { SparkChart } from \"../spark-chart\";\nimport { createAccountColumnConfig } from \"./column-config\";\n\nconst disabledStyle = {\n  color: \"grey\",\n};\n\nconst DataEntry = (props: {\n  timeSeries: TimeSeries;\n  defaultDate: DateTime;\n  variant?: \"number\" | \"cash\" | \"percent\";\n  dateVariant?: \"date\" | \"year\";\n}) => {\n  const { timeSeries, defaultDate, variant = \"number\", dateVariant = \"date\" } = props;\n  const account = useStore(store, (state) => state.projectedIncome.timeSeries[timeSeries]);\n\n  const [date, setDate] = useState(defaultDate);\n  const [amount, setAmount] = useState<number | null>(null);\n\n  const hasSameDate = useMemo(() => {\n    return !!account?.find((x) => date.hasSame(DateTime.fromISO(x.date), \"day\"));\n  }, [account, date]);\n\n  const onAddEntry = () => {\n    if (amount != null) {\n      addProjectedIncome(date, timeSeries, variant === \"percent\" ? amount / 100 : amount);\n      setAmount(null);\n    }\n  };\n\n  const accountColumnConfig = useMemo(() => {\n    return createAccountColumnConfig(timeSeries, variant, dateVariant);\n  }, [timeSeries, variant, dateVariant]);\n\n  return (\n    <Box display={\"flex\"} flexDirection={\"column\"} height=\"100%\">\n      <Stack spacing={2} flex=\"0 1 auto\">\n        <DatePicker\n          format={dateVariant === \"year\" ? \"yyyy\" : shortDate}\n          views={dateVariant === \"year\" ? [\"year\"] : undefined}\n          sx={{ color: \"white\" }}\n          label={dateVariant === \"date\" ? \"Date\" : \"Year\"}\n          value={date}\n          onChange={(value) => {\n            console.log(value);\n            value && setDate(value);\n          }}\n        />\n        <TextField\n          label=\"Amount\"\n          value={amount ?? \"\"}\n          placeholder=\"0\"\n          type=\"number\"\n          onChange={(event) => (event.target.value === \"\" ? setAmount(null) : setAmount(+event.target.value))}\n          slotProps={{\n            input: {\n              startAdornment: variant !== \"number\" && (\n                <InputAdornment position=\"start\">{variant === \"cash\" ? \"$\" : \"%\"}</InputAdornment>\n              ),\n            },\n          }}\n        />\n        <Button disabled={amount === null || !date || hasSameDate} onClick={onAddEntry}>\n          Add Entry\n        </Button>\n      </Stack>\n      <Box sx={{ paddingTop: 2, flex: \"1 1 auto\" }}>\n        <AgGrid\n          reactiveCustomComponents\n          rowData={account ?? []}\n          columnDefs={accountColumnConfig}\n          id={account + \"-history\"}\n          autoSizeStrategy={{\n            type: \"fitGridWidth\",\n          }}\n          stopEditingWhenCellsLoseFocus\n          getRowStyle={(x) => {\n            return x.rowIndex >= MAX_NUM_ENTRIES ? disabledStyle : undefined;\n          }}\n        />\n      </Box>\n    </Box>\n  );\n};\n\ninterface LayoutProps {\n  title: string;\n  accountName: TimeSeries;\n  defaultDate: DateTime;\n  variant: \"percent\" | \"number\" | \"cash\";\n  dateVariant?: \"date\" | \"year\";\n}\n\nexport const Layout = (props: LayoutProps) => {\n  const { title, accountName, defaultDate, variant, dateVariant = \"date\" } = props;\n  return (\n    <Paper sx={{ padding: 2, height: \"100%\", width: 450, flexShrink: 0 }}>\n      <Box display=\"flex\" flexDirection=\"column\" height=\"100%\">\n        <Box flex=\"0 1 auto\" marginBottom={4} display={\"flex\"} alignItems={\"center\"} justifyContent={\"space-between\"}>\n          <Typography variant=\"h5\">\n            {title}{\" \"}\n            {variant === \"cash\" && (\n              <Tooltip\n                title={\n                  <>\n                    <span>Cash values are used in lieu of Percent values.</span>\n                    <br />\n                    <span>Cash values are considered actual payment values.</span>\n                  </>\n                }\n              >\n                <span>($)</span>\n              </Tooltip>\n            )}\n            {variant === \"percent\" && (\n              <Tooltip title=\"Percentage values are used for predictions.\">\n                <span>(%)</span>\n              </Tooltip>\n            )}\n          </Typography>\n          <SparkChart accountName={accountName} variant={variant} />\n        </Box>\n        <Box flex=\"1 1 auto\">\n          <DataEntry variant={variant} timeSeries={accountName} defaultDate={defaultDate} dateVariant={dateVariant} />\n        </Box>\n      </Box>\n    </Paper>\n  );\n};\n","import InsertChartIcon from \"@mui/icons-material/InsertChart\";\nimport { Tooltip } from \"@mui/material\";\nimport { AgCartesianChartOptions, AgLineSeriesOptions } from \"ag-charts-community\";\nimport { AgCharts } from \"ag-charts-react\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { useTotalPayClusters } from \"shared/hooks/use-clusters\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\nimport { formatPercent } from \"shared/utility/format-percent\";\n\nconst getColor = (probability?: number) => {\n  if (!probability) {\n    return \"inherit\";\n  }\n  if (probability >= 0.5) {\n    return \"green\";\n  }\n  if (probability >= 0.25) {\n    return \"orange\";\n  }\n  return \"rgb(244, 67, 54)\";\n};\n\nexport const IncomeChart = () => {\n  const clusters = useTotalPayClusters();\n  const history = useMemo(() => {\n    return clusters\n      .filter(([year]) => +year <= getLocalDateTime().year)\n      .map(([year, x]) => ({\n        totalPay: x[0]?.median ?? 0,\n        date: DateTime.fromObject({ year: +year, month: 1, day: 1 }).toJSDate(),\n      }));\n  }, [clusters]);\n\n  const future = useMemo(() => {\n    return clusters\n      .filter(([year]) => +year >= getLocalDateTime().year)\n      .map(([year, x]) => {\n        const data = Object.fromEntries(\n          x?.flatMap((x) => {\n            const title = x.title.toLocaleLowerCase();\n            return [\n              [title, x.median],\n              [title + \"Probability\", x.probability],\n            ];\n          })\n        );\n        return {\n          ...data,\n          date: DateTime.fromObject({ year: +year, month: 1, day: 1 }).toJSDate(),\n        };\n      });\n  }, [clusters]);\n\n  const isDisabled = future.length + history.length === 0;\n\n  const series = useMemo(() => {\n    return [\n      {\n        type: \"line\",\n        xKey: \"date\",\n        yKey: \"totalPay\",\n        data: history,\n        yName: \"Income\",\n\n        tooltip: {\n          renderer: ({ datum, yKey, xKey }) => ({\n            content: `${DateTime.fromJSDate(datum[xKey]).year} ${formatCashShort(datum[yKey])}`,\n          }),\n        },\n      },\n      {\n        type: \"line\",\n        xKey: \"date\",\n        yKey: \"low\",\n        data: future,\n        yName: \"Low\",\n        stroke: \"grey\",\n        marker: {\n          itemStyler: (params) => {\n            const color = getColor(params.datum.lowProbability);\n            return {\n              fill: color,\n              stroke: color,\n            };\n          },\n        },\n        tooltip: {\n          renderer: ({ datum, yKey, xKey }) => ({\n            content: `${DateTime.fromJSDate(datum[xKey]).year} ${formatCashShort(datum[yKey])} ${formatPercent(datum.lowProbability)}`,\n          }),\n        },\n      },\n      {\n        marker: {\n          itemStyler: (params) => {\n            const color = getColor(params.datum.medProbability);\n            return {\n              fill: color,\n            };\n          },\n        },\n        type: \"line\",\n        stroke: \"grey\",\n        xKey: \"date\",\n        yKey: \"med\",\n        data: future,\n        yName: \"Medium\",\n        tooltip: {\n          renderer: ({ datum, yKey, xKey }) => ({\n            content: `${DateTime.fromJSDate(datum[xKey]).year} ${formatCashShort(datum[yKey])} ${formatPercent(datum.medProbability)}`,\n          }),\n        },\n      },\n      {\n        stroke: \"grey\",\n        marker: {\n          itemStyler: (params) => {\n            const color = getColor(params.datum.highProbability);\n            return {\n              fill: color,\n              stroke: color,\n            };\n          },\n        },\n        type: \"line\",\n        xKey: \"date\",\n        yKey: \"high\",\n        data: future,\n        yName: \"High\",\n        tooltip: {\n          renderer: ({ datum, yKey, xKey }) => ({\n            content: `${DateTime.fromJSDate(datum[xKey]).year} ${formatCashShort(datum[yKey])} ${formatPercent(datum.highProbability)}`,\n          }),\n        },\n      },\n    ] as AgLineSeriesOptions[];\n  }, [future, history]);\n\n  const options: AgCartesianChartOptions = useMemo(\n    () => ({\n      theme: \"ag-default-dark\",\n      title: {\n        text: `Income`,\n      },\n\n      axes: [\n        {\n          type: \"time\",\n          position: \"bottom\",\n          label: {\n            format: \"%Y\",\n          },\n          nice: false,\n        },\n        {\n          type: \"number\",\n          position: \"left\",\n          nice: true,\n          interval: {\n            maxSpacing: 45,\n          },\n          label: {\n            formatter: (params) => {\n              return formatCash(params.value);\n            },\n          },\n        },\n      ],\n      series,\n    }),\n    [series]\n  );\n  return (\n    <Tooltip\n      disableHoverListener={isDisabled}\n      disableFocusListener={isDisabled}\n      disableTouchListener={isDisabled}\n      slotProps={{\n        tooltip: {\n          sx: {\n            maxWidth: \"unset\",\n          },\n        },\n      }}\n      title={<AgCharts options={options} css={{ height: 375, width: 750 }} />}\n    >\n      <InsertChartIcon color={isDisabled ? \"disabled\" : undefined} />\n    </Tooltip>\n  );\n};\n","import ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\nimport { Table, TableBody, TableCell, TableRow } from \"@mui/material\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { IncomePerPeriod } from \"shared/models/IncomePerPeriod\";\nimport { shortDate } from \"shared/utility/format-date\";\n\ninterface IncomePerPeriodTooltipProps {\n  incomePerPeriod: IncomePerPeriod[];\n}\n\nexport const IncomePerPeriodTooltip = (props: IncomePerPeriodTooltipProps) => {\n  const { incomePerPeriod } = props;\n  return (\n    <Table sx={{ width: \"max-content\" }}>\n      <TableBody>\n        {incomePerPeriod.map(({ start, end, value, perPayday, count }, index) => {\n          return (\n            <TableRow key={index}>\n              <TableCell>\n                <Cash value={value} compact={false} />\n              </TableCell>\n              <TableCell>{start.toFormat(shortDate)}</TableCell>\n              <TableCell>\n                <ArrowForwardIcon />\n              </TableCell>\n              <TableCell>{end.toFormat(shortDate)}</TableCell>\n              <TableCell>\n                <Cash value={perPayday} compact={false} /> x {count}\n              </TableCell>\n            </TableRow>\n          );\n        })}\n        <TableRow>\n          <TableCell colSpan={4}>Total:</TableCell>\n          <TableCell>\n            <Cash value={incomePerPeriod.reduce((acc, curr) => curr.value + acc, 0)} compact={false} />\n          </TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  );\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { findSameYear } from \"shared/utility/find-same-year\";\n\nexport const useHasMeritPairs = () => {\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\n  return useMemo(() => {\n    return (\n      timeSeries.meritIncreasePct.every((x) => {\n        return !!findSameYear(DateTime.fromISO(x.date).year, timeSeries.meritBonusPct);\n      }) &&\n      timeSeries.meritBonusPct.every((x) => {\n        return !!findSameYear(DateTime.fromISO(x.date).year, timeSeries.meritIncreasePct);\n      })\n    );\n  }, [timeSeries.meritBonusPct, timeSeries.meritIncreasePct]);\n};\n","import { Alert, CircularProgress, Tooltip } from \"@mui/material\";\nimport { Box, Stack } from \"@mui/system\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo, useState } from \"react\";\nimport { Card } from \"shared/components/card\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { ClusterValue, ClusterValues } from \"shared/components/formatters/cluster-value\";\nimport { CountDown } from \"shared/components/formatters/countdown\";\nimport { Value } from \"shared/components/formatters/value\";\nimport { useClusters } from \"shared/hooks/use-clusters\";\nimport { useDateRanges, useDates } from \"shared/hooks/use-dates\";\nimport { IncomePerPeriod } from \"shared/models/IncomePerPeriod\";\nimport { PaymentTypes } from \"shared/models/payment-periods\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { monthDay } from \"shared/utility/format-date\";\nimport { Layout } from \"./data-entry/data-entry\";\nimport { IncomeChart } from \"./income-chart\";\nimport { IncomePerPeriodTooltip } from \"./income-per-period\";\nimport { useHasMeritPairs } from \"./use-has-merit-pairs\";\n\nexport const ProjectedIncome = () => {\n  const [selectedYear, setSelectedYear] = useState(getLocalDateTime().year);\n\n  const hasMissingPairs = useHasMeritPairs();\n  const clusters = useClusters(selectedYear);\n  const dates = useDates(selectedYear);\n  const dateRanges = useDateRanges(selectedYear);\n\n  const basePay = useMemo(() => {\n    if (clusters.pay.length !== 1) {\n      return;\n    }\n    return clusters.scenarios?.[0].basePay;\n  }, [clusters.pay.length, clusters.scenarios]);\n\n  const aprToApr = useMemo(() => {\n    if (clusters.pay.length !== 1) {\n      return;\n    }\n    return clusters.scenarios?.[0].aprToApr;\n  }, [clusters.pay.length, clusters.scenarios]);\n\n  const paychecks = useMemo(() => {\n    if (clusters.pay.length !== 1) {\n      return;\n    }\n\n    const payPeriods =\n      clusters.scenarios?.[0].payments\n        .filter((x) => x.type === PaymentTypes.regular)\n        .filter((x) => {\n          const payedOn = DateTime.fromISO(x.payedOn);\n          return payedOn >= dateRanges.base.start && payedOn <= dateRanges.base.end;\n        }) ?? [];\n\n    return payPeriods\n      .reduceRight(\n        (acc, curr) => {\n          if (acc[0]?.[0]?.value === curr.value) {\n            acc[0].unshift(curr);\n          } else {\n            acc.unshift([curr]);\n          }\n\n          return acc;\n        },\n        [] as (typeof payPeriods)[]\n      )\n      .reduce((acc, curr) => {\n        acc.push({\n          start: DateTime.fromISO(curr[0].payedOn),\n          end: DateTime.fromISO(curr[curr.length - 1].payedOn),\n          value: curr.reduce((acc, curr) => acc + curr.value, 0),\n          perPayday: curr[0].value,\n          count: curr.length,\n          type: curr[0].type,\n        });\n\n        return acc;\n      }, [] as IncomePerPeriod[]);\n  }, [clusters.pay.length, clusters.scenarios, dateRanges.base.end, dateRanges.base.start]);\n\n  const scenarios = useStore(scenarioStore);\n\n  return (\n    <Box display=\"flex\" flexDirection=\"row\" height=\"100%\" width={\"100%\"}>\n      <Box flex=\"0 1 auto\" maxWidth={500} height=\"100%\">\n        <Stack gap={2} direction={\"column\"} overflow={\"auto\"} height=\"100%\" paddingRight={1} minWidth={500}>\n          {!hasMissingPairs && (\n            <Alert severity=\"error\">Every Merit Increase must have a paired Merit Bonus percent</Alert>\n          )}\n          <Card\n            title={\n              <Box display=\"flex\" alignItems={\"center\"} gap={2} width={\"100%\"}>\n                <span>Income</span>\n                <CountDown dateTime={dates.companyBonus} variant=\"date\" dateFormat={monthDay} />\n                <IncomeChart />\n                <Box sx={{ display: \"flex\", marginLeft: \"auto\", alignItems: \"center\", flexWrap: \"wrap\" }}>\n                  {scenarios.loading && <CircularProgress style={{ width: 20, height: 20 }} />}\n                </Box>\n                <DatePicker\n                  sx={{ width: 90, marginRight: 2 }}\n                  label={\"year\"}\n                  views={[\"year\"]}\n                  minDate={getLocalDateTime().set({ year: scenarios.minYear })}\n                  maxDate={getLocalDateTime().set({ year: scenarios.maxYear })}\n                  defaultValue={getLocalDateTime()}\n                  slotProps={{\n                    textField: {\n                      variant: \"standard\",\n                      label: \"\",\n                    },\n                  }}\n                  onChange={(value) => {\n                    setSelectedYear(value?.year ?? getLocalDateTime().year);\n                  }}\n                />\n              </Box>\n            }\n          >\n            <ClusterValues clusters={clusters.totalPay} eventDate={dates.companyBonus} />\n          </Card>\n          <Card\n            title={\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\n                <span>Paycheck</span>\n                <CountDown dateTime={dates.meritIncrease} variant=\"date\" dateFormat={monthDay} />\n              </Box>\n            }\n          >\n            {!basePay && <ClusterValues clusters={clusters.pay} eventDate={dates.meritIncrease} compact={false} />}\n            {basePay && (\n              <>\n                <ClusterValue {...clusters.pay[0]} title={\"Paycheck\"} compact={false} />\n                <Tooltip\n                  placement=\"bottom\"\n                  componentsProps={{\n                    tooltip: {\n                      sx: {\n                        maxWidth: \"none\",\n                      },\n                    },\n                  }}\n                  title={paychecks && <IncomePerPeriodTooltip incomePerPeriod={paychecks} />}\n                >\n                  <div>\n                    <Value title={\"Base Pay\"}>\n                      <Cash disableTooltip value={basePay} />\n                    </Value>\n                  </div>\n                </Tooltip>\n                <Value title={\"APR to APR\"}>\n                  <Cash value={aprToApr} />\n                </Value>\n              </>\n            )}\n          </Card>\n          <Card\n            title={\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\n                <span>Merit Increase</span>\n                <CountDown dateTime={dates.meritIncrease} variant=\"date\" dateFormat={monthDay} />\n              </Box>\n            }\n          >\n            <ClusterValues clusters={clusters.meritIncrease} eventDate={dates.meritIncrease} />\n          </Card>\n\n          <Card\n            title={\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\n                <span>Merit Bonus</span>\n                <CountDown dateTime={dates.meritBonus} variant=\"date\" dateFormat={monthDay} />\n              </Box>\n            }\n          >\n            <ClusterValues clusters={clusters.meritBonus} eventDate={dates.meritBonus} />\n          </Card>\n          <Card\n            title={\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\n                <span>Company Bonus</span>\n                <CountDown dateTime={dates.companyBonus} variant=\"date\" dateFormat={monthDay} />\n              </Box>\n            }\n          >\n            <ClusterValues clusters={clusters.companyBonus} eventDate={dates.companyBonus} />\n          </Card>\n          <Card\n            title={\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\n                <span>Retirement Bonus</span>\n                <CountDown dateTime={dates.retirementBonus} variant=\"date\" dateFormat={monthDay} />\n              </Box>\n            }\n          >\n            <ClusterValues clusters={clusters.retirementBonus} eventDate={dates.retirementBonus} />\n          </Card>\n        </Stack>\n      </Box>\n      <Box flex=\"1 1 auto\" overflow={\"auto\"} paddingBottom={2} paddingLeft={1}>\n        <Box display={\"flex\"} height={\"100%\"} width={\"100%\"} gap={2}>\n          <Layout\n            dateVariant=\"year\"\n            accountName=\"paycheck\"\n            variant=\"cash\"\n            defaultDate={DateTime.fromObject({\n              day: 1,\n              month: 4,\n              year: selectedYear,\n            })}\n            title=\"Income Per Paycheck\"\n          />\n          <Layout\n            title=\"Merit Increase\"\n            accountName=\"meritIncreasePct\"\n            variant=\"percent\"\n            defaultDate={dates.meritIncrease}\n            dateVariant=\"year\"\n          />\n          <Layout\n            title=\"Equity Increase\"\n            accountName=\"equityPct\"\n            variant=\"percent\"\n            defaultDate={dates.meritIncrease}\n            dateVariant=\"year\"\n          />\n          <Layout\n            title=\"Merit Bonus\"\n            accountName=\"meritBonusPct\"\n            variant=\"percent\"\n            defaultDate={dates.meritBonus}\n            dateVariant=\"year\"\n          />\n          <Layout title=\"Merit Bonus\" accountName=\"meritBonus\" variant=\"cash\" defaultDate={dates.meritBonus} />\n          <Layout\n            title=\"Company Bonus Factor\"\n            accountName=\"companyBonusPct\"\n            defaultDate={dates.companyBonus}\n            variant=\"percent\"\n            dateVariant=\"year\"\n          />\n          <Layout title=\"Company Bonus\" accountName=\"companyBonus\" defaultDate={dates.companyBonus} variant=\"cash\" />\n          <Layout\n            title=\"Retirement Bonus\"\n            accountName=\"retirementBonus\"\n            defaultDate={dates.retirementBonus}\n            variant=\"cash\"\n          />\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n","import { DateTime } from \"luxon\";\n\nexport const isFuture = (date: DateTime) => date.diffNow(\"milliseconds\").milliseconds > 0;\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { Mortgage } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { calcLoanBalance } from \"shared/utility/mortgage-calc\";\n\nexport const useFutureMortgageEquity = (year: number) => {\n  const accounts = useStore(store, (x) => x.wealth);\n\n  return useMemo(() => {\n    const mortgages = Object.values(accounts).filter((x) => x.type === \"mortgage\") as Mortgage[];\n    return mortgages\n      .map((x) => {\n        if (!x.loan) {\n          return 0;\n        }\n\n        const startDate =\n          getLocalDateTime() < DateTime.fromObject({ month: 1, day: 1, year })\n            ? DateTime.fromObject({ month: 1, day: 1, year })\n            : getLocalDateTime().endOf(\"month\");\n\n        return calcLoanBalance(startDate, x.loan) - calcLoanBalance(startDate.endOf(\"year\"), x.loan);\n      })\n      .reduce((acc, curr) => acc + curr, 0);\n  }, [accounts, year]);\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\n\nexport const useFutureRetirementContributions = (year: number) => {\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios[year]);\n  const retirementContribution = useStore(store, (x) => x.projectedWealth.retirementContributionPaycheck);\n\n  return useMemo(() => {\n    return {\n      remaining: Math.min(scenarios?.at(0)?.remainingRegularPayments ?? 0, 26) * retirementContribution,\n      perPaycheck: retirementContribution,\n    };\n  }, [retirementContribution, scenarios]);\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { useMemo } from \"react\";\nimport { useDateRanges } from \"shared/hooks/use-dates\";\nimport { store } from \"shared/store\";\n\nexport const useFutureSavings = (year: number) => {\n  const config = useStore(store, (x) => x.projectedWealth);\n  const dateRanges = useDateRanges(year);\n  return useMemo(() => {\n    return {\n      remaining: config.savingsPerMonth * Math.min(Math.max(0, dateRanges.base.end.diffNow(\"months\").months), 12),\n      perMonth: config.savingsPerMonth,\n    };\n  }, [config.savingsPerMonth, dateRanges.base]);\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\nimport { isFuture } from \"shared/utility/is-future\";\n\ninterface ThresholdTaxData {\n  total: number;\n  firstOccurrence: DateTime;\n  remaining: number;\n  perPaycheck: number;\n}\n\nexport const useFutureSocialSecurity = (year: number): ThresholdTax => {\n  const config = useStore(store, (x) => x.projectedWealth);\n  return useThresholdTax(year, config.socialSecurityLimit, config.socialSecurityTaxRate);\n};\n\nexport const useFutureMedicareTax = (year: number): ThresholdTax => {\n  const config = useStore(store, (x) => x.projectedWealth);\n  const taxes = useThresholdTax(year, config.medicareSupplementalTaxThreshold, -1 * config.medicareSupplementalTaxRate);\n  return useMemo(() => {\n    return {\n      min: taxes.max,\n      max: taxes.min,\n    };\n  }, [taxes]);\n};\n\nexport type ThresholdTax = Partial<Record<\"min\" | \"max\", ThresholdTaxData>>;\n\nconst useThresholdTax = (year: number, threshold: number, taxRate: number): ThresholdTax => {\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios[year]);\n\n  const data = useMemo(\n    () =>\n      (\n        (scenarios ?? [])\n          .map((x) => {\n            const total = taxRate * Math.max(0, (x.payments.at(-1)?.cumulative ?? 0) - threshold);\n            const firstOccurrence = x.payments.find((x) => x.cumulative > threshold)?.payedOn;\n            const remaining = x.payments\n              .slice(x.currentPaymentIdx)\n              .filter((x) => x.cumulative >= threshold && isFuture(DateTime.fromISO(x.payedOn)))\n              .reduce((acc, curr) => {\n                return acc + Math.min(curr.value, curr.cumulative - threshold) * taxRate;\n              }, 0);\n            const perPaycheck = total && taxRate * (x.payments.at(-1)?.value ?? 0);\n\n            return {\n              total,\n              firstOccurrence: firstOccurrence ? DateTime.fromISO(firstOccurrence) : undefined,\n              remaining,\n              perPaycheck,\n            };\n          })\n          .filter((x) => x.firstOccurrence) as ThresholdTaxData[]\n      ).reduce(\n        (acc, curr, i) => {\n          if (i == 0) {\n            return { min: curr, max: curr };\n          } else {\n            if (curr.total < acc.min!.total) {\n              acc.min = curr;\n            }\n            if (curr.total > acc.max!.total) {\n              acc.max = curr;\n            }\n          }\n          return acc;\n        },\n        {} as Partial<Record<\"min\" | \"max\", ThresholdTaxData>>\n      ),\n    [threshold, taxRate, scenarios]\n  );\n\n  return data;\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { useDates } from \"shared/hooks/use-dates\";\nimport { Scenario } from \"shared/models/scenario\";\nimport { store } from \"shared/store\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\nimport { clusterTitle, getClusterCount } from \"shared/utility/cluster-helpers\";\nimport { isFuture } from \"shared/utility/is-future\";\nimport { ckmeans, median, sumSimple } from \"simple-statistics\";\nimport { useFutureMortgageEquity } from \"./use-future-mortgage-equity\";\nimport { useFutureRetirementContributions } from \"./use-future-retirement-contributions\";\nimport { useFutureSavings } from \"./use-future-savings\";\n\nconst thresholdTaxRemaining = (taxRate: number, threshold: number, scenario: Scenario) => {\n  const remaining = scenario.payments\n    .slice(scenario.currentPaymentIdx)\n    .filter((x) => x.cumulative >= threshold && isFuture(DateTime.fromISO(x.payedOn)))\n    .reduce((acc, curr) => {\n      return acc + Math.min(curr.value, curr.cumulative - threshold) * taxRate;\n    }, 0);\n  return remaining;\n};\n\nexport const useFutureTotals = (\n  year: number,\n  options: { excludeHomeEquity: boolean } = { excludeHomeEquity: false }\n) => {\n  const { excludeHomeEquity } = options;\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios[year]);\n  const bonusTakeHomeFactor = useStore(store, (x) => 1 - x.projectedWealth.bonusWithholdingsRate);\n  const savings = useFutureSavings(year);\n  const homeEquity = useFutureMortgageEquity(year);\n  const retirement = useFutureRetirementContributions(year);\n  const config = useStore(store, (x) => x.projectedWealth);\n\n  const dates = useDates(year);\n  const rawClusters = useMemo(() => {\n    const totals = scenarios\n      ?.map((x) => {\n        const futureBonuses = [\n          isFuture(dates.meritBonus) && x.meritBonus * bonusTakeHomeFactor,\n          isFuture(dates.companyBonus) && x.companyBonus * bonusTakeHomeFactor,\n          isFuture(dates.retirementBonus) && x.retirementBonus,\n          thresholdTaxRemaining(config.socialSecurityTaxRate, config.socialSecurityLimit, x),\n          thresholdTaxRemaining(-1 * config.medicareSupplementalTaxRate, config.medicareSupplementalTaxThreshold, x),\n        ].filter((x) => x) as number[];\n        return sumSimple(futureBonuses);\n      })\n      .map((y) => y + savings.remaining + retirement.remaining + (excludeHomeEquity ? 0 : homeEquity));\n\n    if (!totals || totals.length === 0) {\n      return [[savings.remaining + retirement.remaining]];\n    }\n    const clusters = ckmeans(\n      totals,\n      getClusterCount(totals, (x) => x)\n    );\n    return clusters;\n  }, [\n    bonusTakeHomeFactor,\n    config.medicareSupplementalTaxRate,\n    config.medicareSupplementalTaxThreshold,\n    config.socialSecurityLimit,\n    config.socialSecurityTaxRate,\n    dates.companyBonus,\n    dates.meritBonus,\n    dates.retirementBonus,\n    excludeHomeEquity,\n    homeEquity,\n    retirement.remaining,\n    savings.remaining,\n    scenarios,\n  ]);\n\n  return useMemo(() => {\n    const numValues = rawClusters.flat().length;\n    return rawClusters.map((x, i, arr) => {\n      return {\n        min: Math.min(...x),\n        max: Math.max(...x),\n        median: median(x),\n        probability: x.length / numValues,\n        title: clusterTitle(i, arr.length),\n      };\n    });\n  }, [rawClusters]);\n};\n","import { Box, Stack } from \"@mui/system\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { Card } from \"shared/components/card\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { ClusterValues } from \"shared/components/formatters/cluster-value\";\nimport { CountDown } from \"shared/components/formatters/countdown\";\nimport { Value } from \"shared/components/formatters/value\";\nimport { Cluster, useClusters } from \"shared/hooks/use-clusters\";\nimport { useDates } from \"shared/hooks/use-dates\";\nimport { store } from \"shared/store\";\nimport { scaleClusters } from \"shared/utility/cluster-helpers\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { monthDay } from \"shared/utility/format-date\";\nimport { isFuture } from \"shared/utility/is-future\";\nimport { useFutureMortgageEquity } from \"./hooks/use-future-mortgage-equity\";\nimport { useFutureRetirementContributions } from \"./hooks/use-future-retirement-contributions\";\nimport { useFutureSavings } from \"./hooks/use-future-savings\";\nimport { ThresholdTax, useFutureMedicareTax, useFutureSocialSecurity } from \"./hooks/use-future-social-security\";\nimport { useFutureTotals } from \"./hooks/use-future-totals\";\n\nexport const FutureEvents = (props: { year: number; onChange: (year: number) => void }) => {\n  const { year, onChange } = props;\n  const dates = useDates(year);\n\n  const savings = useFutureSavings(year);\n  const retirement = useFutureRetirementContributions(year);\n  const medicare = useFutureMedicareTax(year);\n  const socialSecurity = useFutureSocialSecurity(year);\n  const clusters = useClusters(year);\n  const bonusTakeHomeFactor = useStore(store, (x) => 1 - x.projectedWealth.bonusWithholdingsRate);\n  const total = useFutureTotals(year);\n  const equity = useFutureMortgageEquity(year);\n\n  return (\n    <>\n      <Stack spacing={2} width={550} paddingRight={1}>\n        <Card\n          title={\n            <>\n              <span>Remaining Projected Wealth</span>\n              <DatePicker\n                sx={{ width: 90, marginRight: 2, marginLeft: \"auto\" }}\n                label={\"year\"}\n                views={[\"year\"]}\n                minDate={getLocalDateTime()}\n                maxDate={getLocalDateTime().plus({ years: 1 })}\n                value={getLocalDateTime().set({ year })}\n                slotProps={{\n                  textField: {\n                    variant: \"standard\",\n                    label: \"\",\n                  },\n                }}\n                onYearChange={(year) => {\n                  onChange(year.year);\n                }}\n              />\n            </>\n          }\n        >\n          <ClusterValues clusters={total} eventDate={dates.companyBonus} />\n        </Card>\n        {isFuture(dates.meritBonus) && clusters.meritBonus.length > 0 && (\n          <ClusterCard\n            title=\"Merit Bonus\"\n            date={dates.meritBonus}\n            cluster={scaleClusters(clusters.meritBonus, bonusTakeHomeFactor)}\n          />\n        )}\n        {isFuture(dates.companyBonus) && clusters.companyBonus.length > 0 && (\n          <ClusterCard\n            title=\"Company Bonus\"\n            date={dates.companyBonus}\n            cluster={scaleClusters(clusters.companyBonus, bonusTakeHomeFactor)}\n          />\n        )}\n        {isFuture(dates.retirementBonus) && clusters.retirementBonus.length > 0 && (\n          <ClusterCard title=\"Retirement Bonus\" date={dates.retirementBonus} cluster={clusters.retirementBonus} />\n        )}\n        {!!socialSecurity.min && <ThresholdTaxCard thresholdTax={socialSecurity} title={\"Social Security Limit\"} />}\n        {!!medicare.min && <ThresholdTaxCard thresholdTax={medicare} title={\"Medicare Supplemental Tax\"} />}\n\n        {(!!savings.perMonth || !!retirement.perPaycheck || !!equity) && (\n          <Card title={\"Savings & Retirement\"}>\n            {!!savings.perMonth && (\n              <Value title={\"savings\"} secondaryValue={<Cash tooltip=\"Per Month\" value={savings.perMonth} />}>\n                <Cash tooltip=\"Total Remaining\" value={savings.remaining} />\n              </Value>\n            )}\n            {!!retirement.perPaycheck && (\n              <Value\n                title={\"retirement\"}\n                secondaryValue={<Cash tooltip=\"Per Paycheck\" value={retirement.perPaycheck} />}\n              >\n                <Cash tooltip=\"Total Remaining\" value={retirement.remaining} />\n              </Value>\n            )}\n            {!!equity && (\n              <Value title={\"Home Equity\"}>\n                <Cash tooltip=\"Total Remaining\" value={equity} />\n              </Value>\n            )}\n          </Card>\n        )}\n      </Stack>\n    </>\n  );\n};\n\nconst ThresholdTaxCard = (props: { thresholdTax: ThresholdTax; title: string }) => {\n  const { thresholdTax, title } = props;\n  return (\n    <Card\n      title={\n        <Box display={\"flex\"} width={\"max-content\"} gap={1} marginRight={2}>\n          <span>{title}</span>\n\n          <CountDown dateFormat={monthDay} variant=\"date\" dateTime={thresholdTax.max?.firstOccurrence} />\n          {thresholdTax.min &&\n            thresholdTax.max &&\n            !thresholdTax.min.firstOccurrence.equals(thresholdTax.max.firstOccurrence) && (\n              <>\n                <span>or</span>\n                <CountDown dateFormat={monthDay} variant=\"date\" dateTime={thresholdTax.min.firstOccurrence} />\n              </>\n            )}\n        </Box>\n      }\n    >\n      {thresholdTax.max && thresholdTax.max.total === thresholdTax.min?.total && (\n        <Value title={\"Remaining\"}>\n          <Cash value={thresholdTax.max?.remaining} compact={false} />\n        </Value>\n      )}\n      {thresholdTax.max && thresholdTax.max.total !== thresholdTax.min?.total && (\n        <>\n          <Value title={thresholdTax.max.firstOccurrence > getLocalDateTime() ? \"Early\" : \"Low\"}>\n            <Cash value={thresholdTax.max?.remaining} compact={false} />\n          </Value>\n          <Value title={thresholdTax.max.firstOccurrence > getLocalDateTime() ? \"Late\" : \"High\"}>\n            <Cash value={thresholdTax.min?.total} compact={false} />\n          </Value>\n        </>\n      )}\n      <Value title={\"Per Paycheck\"}>\n        <Cash value={thresholdTax.max?.perPaycheck} compact={false} />\n      </Value>\n    </Card>\n  );\n};\n\nconst ClusterCard = (props: { date: DateTime; cluster?: Cluster[]; title: string }) => {\n  const { date, cluster, title } = props;\n  return (\n    <Card\n      title={\n        <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\n          <span>{title}</span>\n          <CountDown variant=\"date\" dateFormat={monthDay} dateTime={date} />\n        </Box>\n      }\n    >\n      <ClusterValues clusters={cluster} eventDate={date} />\n    </Card>\n  );\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { findMostMostLikely } from \"shared/utility/cluster-helpers\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { findNearestIdxOnOrBefore, findNearestOnOrBefore } from \"shared/utility/find-nearest-on-or-before\";\nimport { calcEquity, calcLoanBalance } from \"shared/utility/mortgage-calc\";\nimport { useEarliestAccountEntry } from \"../../../shared/hooks/use-earliest-account-entry\";\nimport { useFutureTotals } from \"./use-future-totals\";\n\nexport interface TimeSeriesWealth {\n  graphDate: Date;\n  date: DateTime;\n  wealth: number;\n  yoyCash?: number;\n  yoyPct?: number;\n}\n\nconst useFuturesWealth = () => {\n  const year = getLocalDateTime().year;\n  const totals = useFutureTotals(year, { excludeHomeEquity: true });\n  const totalsPlusOne = useFutureTotals(year + 1, { excludeHomeEquity: true });\n\n  return {\n    [year + 1]: findMostMostLikely(totals)?.median ?? 0,\n    [year + 2]: (findMostMostLikely(totals)?.median ?? 0) + (findMostMostLikely(totalsPlusOne)?.median ?? 0),\n  };\n};\n\nexport const useTimeSeriesWealth = (year: number) => {\n  const localDateTime = getLocalDateTime().startOf(\"day\");\n  const earliest = useEarliestAccountEntry();\n  const accounts = useStore(store, (x) => x.wealth);\n  const futuresWealth = useFuturesWealth();\n\n  const data = useMemo(() => {\n    if (!earliest.isValid) {\n      return [];\n    }\n\n    const dates = new Array(year + 2 - earliest.year)\n      .fill(earliest.year)\n      .map((x, i) => DateTime.fromObject({ day: 1, month: 1, year: x + i }).startOf(\"day\"));\n\n    const idx = findNearestIdxOnOrBefore(localDateTime, dates, (x) => x);\n    if (!dates.some((x) => x.equals(localDateTime))) {\n      dates.splice(idx + 1, 0, localDateTime);\n    }\n\n    const futureBenchmarkIdx = idx;\n\n    return dates\n      .map((date) => {\n        const accountsWealth = Object.values(accounts).map((x) => {\n          if (x.type === \"mortgage\" && x.loan) {\n            const houseValue = findNearestOnOrBefore(date, x.data);\n            const balance = calcLoanBalance(date, x.loan);\n            return calcEquity(x.loan.ownershipPct, houseValue?.value, balance, x.loan.principal);\n          } else if (x.type === \"account\") {\n            const entry = findNearestOnOrBefore(date, x.data);\n            return entry?.value ?? 0;\n          }\n          return 0;\n        });\n\n        const accountWealth = accountsWealth.reduce((acc, curr) => acc + curr, 0);\n        const futureWealth = futuresWealth[date.year] ?? 0;\n\n        return {\n          date,\n          graphDate: date.toJSDate(),\n          wealth: accountWealth + futureWealth,\n        };\n      })\n      .map((x, idx, arr) => {\n        if (x.date <= localDateTime || x.date.year === localDateTime.year + 2) {\n          const benchmarkWealth = arr[idx - 1]?.wealth;\n          if (!benchmarkWealth) {\n            return x;\n          }\n          return {\n            ...x,\n            yoyCash: x.wealth - benchmarkWealth,\n            yoyPct: x.wealth / benchmarkWealth - 1,\n          };\n        }\n\n        const benchmarkWealth = arr[futureBenchmarkIdx]?.wealth;\n        if (!benchmarkWealth) {\n          return x;\n        }\n        return {\n          ...x,\n          yoyCash: x.wealth - benchmarkWealth,\n          yoyPct: x.wealth / benchmarkWealth - 1,\n        };\n      });\n  }, [earliest.isValid, earliest.year, year, localDateTime, accounts, futuresWealth]);\n  return data as TimeSeriesWealth[];\n};\n","import { AgCartesianChartOptions, AgLineSeriesOptions } from \"ag-charts-community\";\nimport { AgCharts } from \"ag-charts-react\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { TimeSeriesWealth, useTimeSeriesWealth } from \"./hooks/use-times-series-wealth\";\n\ninterface MarkerParams<T> {\n  fill: string;\n  fillOpacity: number;\n  highlighted: boolean;\n  seriesId: string;\n  size: number;\n  stroke: string;\n  strokeOpacity: number;\n  strokeWidth: number;\n  xKey: string;\n  yKey: string;\n  datum: T;\n}\n\nexport const WealthChart = (props: { titleYear: number }) => {\n  const dataYear = getLocalDateTime().year + 1;\n  const { titleYear } = props;\n  const data = useTimeSeriesWealth(dataYear);\n  const offsetIdx = getLocalDateTime().year - titleYear + 1;\n\n  const series = useMemo(() => {\n    return [\n      {\n        type: \"line\",\n        xKey: \"graphDate\",\n        yKey: \"wealth\",\n        yName: \"Wealth\",\n        tooltip: {\n          renderer: ({ datum, yKey, xKey }) => ({\n            content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCash(datum[yKey])}`,\n          }),\n        },\n        marker: {\n          itemStyler: (params: MarkerParams<TimeSeriesWealth>) => {\n            if (params.datum.date.year === DateTime.local().plus({ years: 1 }).year) {\n              return {\n                fill: \"orange\",\n              };\n            } else if (params.datum.date.year === DateTime.local().plus({ years: 2 }).year) {\n              return {\n                fill: \"rgb(244, 67, 54)\",\n              };\n            } else if (params.datum.date.hasSame(DateTime.local(), \"day\")) {\n              return {\n                fill: \"lightgrey\",\n              };\n            }\n          },\n        },\n      },\n      {\n        type: \"line\",\n        xKey: \"graphDate\",\n        yKey: \"yoyCash\",\n        yName: \"YoY ($)\",\n        stroke: \"grey\",\n\n        tooltip: {\n          renderer: ({ datum, yKey, xKey }) => ({\n            content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCash(datum[yKey])}`,\n          }),\n        },\n        marker: {\n          fill: \"grey\",\n          itemStyler: (params: MarkerParams<TimeSeriesWealth>) => {\n            if (params.datum.date.year === DateTime.local().plus({ years: 1 }).year) {\n              return {\n                fill: \"orange\",\n              };\n            } else if (params.datum.date.year === DateTime.local().plus({ years: 2 }).year) {\n              return {\n                fill: \"rgb(244, 67, 54)\",\n              };\n            } else if (params.datum.date.hasSame(DateTime.local(), \"day\")) {\n              return {\n                fill: \"lightgrey\",\n              };\n            }\n          },\n        },\n      },\n    ] as AgLineSeriesOptions[];\n  }, []);\n\n  const options: AgCartesianChartOptions = useMemo(\n    () => ({\n      theme: \"ag-default-dark\",\n      title: {\n        text: `${data[data.length - 1 - offsetIdx].date.toFormat(shortDate)} Projected wealth ${formatCashShort(\n          (data[data.length - 1 - offsetIdx]?.wealth ?? 0) as number\n        )}`,\n      },\n      data,\n      axes: [\n        {\n          type: \"time\",\n          position: \"bottom\",\n          label: {\n            format: \"%Y\",\n          },\n        },\n        {\n          type: \"number\",\n          position: \"left\",\n          nice: false,\n        },\n      ],\n      series,\n    }),\n    [data, series, offsetIdx]\n  );\n  return <AgCharts options={options} css={{ height: \"100%\", width: \"100%\" }} />;\n};\n","import QueryStatsIcon from \"@mui/icons-material/QueryStats\";\nimport TodayIcon from \"@mui/icons-material/Today\";\nimport UpdateIcon from \"@mui/icons-material/Update\";\nimport { Tooltip } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { ColDef, ICellRendererParams } from \"ag-grid-community\";\nimport { DateTime } from \"luxon\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { Percent } from \"shared/components/formatters/percent\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { TimeSeriesWealth } from \"../hooks/use-times-series-wealth\";\n\nexport const columnConfig: ColDef<TimeSeriesWealth>[] = [\n  {\n    headerName: \"Date\",\n    colId: \"date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data?.date,\n    cellRenderer: (x: ICellRendererParams<unknown, DateTime>) => {\n      const localDateTime = getLocalDateTime().startOf(\"day\");\n      const systemYear = localDateTime.year;\n      return (\n        <Stack direction={\"row\"} alignItems={\"center\"}>\n          {x.valueFormatted}&nbsp;\n          {x.value && x.value.equals(localDateTime) && (\n            <Tooltip title=\"Today\">\n              <TodayIcon htmlColor=\"orange\" />\n            </Tooltip>\n          )}\n          {x.value &&\n            x.value.equals(\n              DateTime.fromObject({\n                day: 1,\n                month: 1,\n                year: systemYear,\n              })\n            ) && (\n              <Tooltip\n                title={`Benchmark for ${localDateTime.toFormat(shortDate)} & ${localDateTime.set({ day: 1, month: 1 }).plus({ years: 1 }).toFormat(shortDate)} `}\n              >\n                <QueryStatsIcon htmlColor=\"orange\" />\n              </Tooltip>\n            )}\n          {x.value &&\n            x.value.equals(\n              DateTime.fromObject({\n                day: 1,\n                month: 1,\n                year: systemYear + 1,\n              })\n            ) && (\n              <Tooltip\n                title={`Benchmark for ${localDateTime.set({ day: 1, month: 1 }).plus({ years: 2 }).toFormat(shortDate)} `}\n              >\n                <QueryStatsIcon htmlColor=\"rgb(244, 67, 54)\" />\n              </Tooltip>\n            )}\n          {x.value && x.value > localDateTime && (\n            <Tooltip title=\"Future Event\">\n              <UpdateIcon htmlColor={x.value.year - systemYear > 1 ? \"rgb(244, 67, 54)\" : \"orange\"} />\n            </Tooltip>\n          )}\n        </Stack>\n      );\n    },\n  },\n  {\n    type: \"numericColumn\",\n    headerName: \"Wealth\",\n    colId: \"wealth\",\n    valueGetter: (x) => x.data?.wealth,\n    cellRenderer: (x: ICellRendererParams<unknown, number>) => {\n      return x.value && <Cash value={x.value} placement=\"left\" />;\n    },\n  },\n  {\n    colId: \"yoy-cash\",\n    type: \"numericColumn\",\n    headerName: \"YoY ($)\",\n    valueGetter: (x) => x.data?.yoyCash,\n    cellRenderer: (x: ICellRendererParams<unknown, number>) => {\n      return x.value && <Cash value={x.value} placement=\"left\" />;\n    },\n  },\n  {\n    colId: \"yoy-percent\",\n    type: \"numericColumn\",\n    headerName: \"YoY (%)\",\n    valueGetter: (x) => x.data?.yoyPct,\n    cellRenderer: (x: ICellRendererParams<unknown, number>) => {\n      return x.value && <Percent value={x.value} />;\n    },\n    minWidth: 60,\n  },\n];\n","import { Box } from \"@mui/system\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { useTimeSeriesWealth } from \"../hooks/use-times-series-wealth\";\nimport { columnConfig } from \"./colum-config\";\n\nexport const WealthTable = () => {\n  const dataYear = getLocalDateTime().year + 1;\n  const data = useTimeSeriesWealth(dataYear);\n\n  return (\n    <Box height={\"100%\"} width={\"100%\"}>\n      <AgGrid\n        id=\"time-series-wealth\"\n        rowData={data}\n        columnDefs={columnConfig}\n        autoSizeStrategy={{ type: \"fitGridWidth\" }}\n        onRowDataUpdated={(e) => e.api.sizeColumnsToFit()}\n      />\n    </Box>\n  );\n};\n","import { Box, Stack } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { FutureEvents } from \"./future-events\";\nimport { WealthChart } from \"./wealth-chart\";\nimport { WealthTable } from \"./wealth-table\";\n\nexport const ProjectedWealth = () => {\n  const localTime = getLocalDateTime();\n  const [year, setYear] = useState(localTime.year);\n\n  return (\n    <Box display=\"flex\" flexDirection=\"row\" height=\"100%\" width={\"100%\"} gap={1}>\n      <Box flex=\"0 1 auto\" height={\"100%\"} overflow={\"auto\"}>\n        <FutureEvents onChange={setYear} year={year} />\n      </Box>\n      <Box flex=\"1 1 auto\" overflow={\"auto\"}>\n        <Stack spacing={2} height={\"100%\"} width={\"100%\"}>\n          <WealthChart titleYear={year} />\n          <WealthTable />\n        </Stack>\n      </Box>\n    </Box>\n  );\n};\n","import { create } from \"mutative\";\nimport { ProjectedWealthKeys } from \"shared/models/store/current\";\nimport { store } from \".\";\n\nexport const setProjectedWealth = (configName: ProjectedWealthKeys, value: number) => {\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      next.projectedWealth[configName] = value;\n    });\n  });\n};\n","import { InputAdornment, TextField } from \"@mui/material\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { useCallback, useState } from \"react\";\nimport { ProjectedWealthKeys } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\nimport { setProjectedWealth } from \"shared/store/set-projected-wealth\";\n\ninterface ConfigEntryProps {\n  configName: ProjectedWealthKeys;\n  label: string;\n  variant?: \"cash\" | \"percent\";\n}\n\nexport const ConfigEntry = (props: ConfigEntryProps) => {\n  const { configName, label, variant = \"cash\" } = props;\n  const [error, setError] = useState(false);\n  const isPercent = variant === \"percent\";\n\n  const onchange = useCallback(\n    (input: string) => {\n      let value = +input;\n      const isNan = Number.isNaN(value);\n      setError(isNan);\n      if (isNan) {\n        return;\n      }\n\n      if (isPercent) {\n        value /= 100;\n      }\n\n      setProjectedWealth(configName, value);\n    },\n    [configName, isPercent]\n  );\n\n  const value = useStore(store, (x) => x.projectedWealth[configName]);\n  const defaultValue = isPercent ? value * 100 : value;\n\n  return (\n    <TextField\n      error={error}\n      variant=\"outlined\"\n      slotProps={{\n        input: {\n          startAdornment: <InputAdornment position=\"start\">{isPercent ? \"%\" : \"$\"}</InputAdornment>,\n        },\n      }}\n      defaultValue={defaultValue.toFixed(isPercent ? 2 : 0)}\n      type=\"numeric\"\n      label={label}\n      onChange={(event) => {\n        onchange(event.target.value);\n      }}\n    />\n  );\n};\n","import { Card, CardContent, CardHeader } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { ConfigEntry } from \"./config-entry\";\n\nexport const Config = () => {\n  return (\n    <Card>\n      <CardHeader title=\"Configuration\" />\n      <CardContent>\n        <Stack spacing={2}>\n          <ConfigEntry configName=\"savingsPerMonth\" label=\"Monthly Saving Rate\" />\n          <ConfigEntry configName=\"retirementContributionPaycheck\" label=\"Retirement Contribution Per Paycheck\" />\n          <ConfigEntry configName=\"bonusWithholdingsRate\" label=\"Bonus Withholdings Rate\" variant=\"percent\" />\n          <Stack direction={\"row\"} spacing={2} width={\"100%\"} sx={{ \"& > *\": { flex: 1 } }}>\n            <ConfigEntry configName=\"socialSecurityLimit\" label=\"Social Security Tax Limit\" />\n            <ConfigEntry configName=\"socialSecurityTaxRate\" label=\"Social Security Tax\" variant=\"percent\" />\n          </Stack>\n          <Stack direction={\"row\"} spacing={2} width={\"100%\"} sx={{ \"& > *\": { flex: 1 } }}>\n            <ConfigEntry configName=\"medicareSupplementalTaxThreshold\" label=\"Medicare Supplemental Threshold\" />\n            <ConfigEntry configName=\"medicareSupplementalTaxRate\" label=\"Medicare Supplemental Tax\" variant=\"percent\" />\n          </Stack>\n        </Stack>\n      </CardContent>\n    </Card>\n  );\n};\n","import Close from \"@mui/icons-material/Close\";\nimport { Box, Button, IconButton, MenuItem, Modal, Paper, Select, Stack, Typography } from \"@mui/material\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { SimpleTreeView } from \"@mui/x-tree-view/SimpleTreeView\";\nimport { TreeItem } from \"@mui/x-tree-view/TreeItem\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useState } from \"react\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { Percent } from \"shared/components/formatters/percent\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { formatCash } from \"shared/utility/format-cash\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { formatPercent } from \"shared/utility/format-percent\";\n\nexport const ScenarioExplorer = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [year, setYear] = useState(getLocalDateTime().year);\n  const [scenarioIndex, setScenarioIndex] = useState(0);\n  const scenarioData = useStore(scenarioStore);\n  const scenarios = scenarioData.scenarios[year];\n  const scenario = scenarios?.[scenarioIndex];\n  if (!scenario) {\n    return null;\n  }\n  return (\n    <>\n      <Button onClick={() => setIsOpen(true)}>Scenario Explorer</Button>\n      <Modal open={isOpen}>\n        <Paper sx={{ position: \"absolute\", top: 24, bottom: 24, right: 24, left: 24, padding: 2, overflow: \"auto\" }}>\n          <IconButton onClick={() => setIsOpen(false)} sx={{ position: \"absolute\", top: 8, right: 8 }}>\n            <Close />\n          </IconButton>\n          <Stack spacing={2}>\n            <Stack direction={\"row\"} alignItems={\"center\"} spacing={2}>\n              <Typography variant=\"h5\">Scenario Explorer</Typography>\n              <DatePicker\n                sx={{ width: 90, marginRight: 2 }}\n                label={\"year\"}\n                views={[\"year\"]}\n                minDate={getLocalDateTime().set({ year: scenarioData?.minYear })}\n                maxDate={getLocalDateTime().set({ year: scenarioData?.maxYear })}\n                defaultValue={getLocalDateTime()}\n                slotProps={{\n                  textField: {\n                    variant: \"standard\",\n                    label: \"\",\n                  },\n                }}\n                onYearChange={(year) => {\n                  setYear(year.year);\n                }}\n              />\n              <Select variant=\"standard\" onChange={(event) => setScenarioIndex(+event.target.value)} defaultValue={\"0\"}>\n                {scenarios?.map((x, i) => (\n                  <MenuItem key={i} value={i}>\n                    {x.weight} {formatCash(x.totalPay)}\n                  </MenuItem>\n                ))}\n              </Select>\n            </Stack>\n\n            <Paper elevation={5} sx={{ padding: 2 }}>\n              <SimpleTreeView\n                defaultExpandedItems={[\n                  \"_TotalPay\",\n                  \"totalMerit\",\n                  \"pay\",\n                  \"meritBonus\",\n                  \"companyBonus\",\n                  \"lastThreeMeritBonusFactor\",\n                ]}\n              >\n                <TreeItem itemId=\"scenario\" label={<span>Scenario</span>}>\n                  <TreeItem itemId=\"weight\" label={<span>Weight: {scenario.weight}</span>} />\n                  <TreeItem itemId=\"year\" label={<span>Year: {scenario.year}</span>} />\n                </TreeItem>\n                <TreeItem\n                  itemId=\"_TotalPay\"\n                  label={\n                    <Stack direction={\"row\"} spacing={1}>\n                      <span>Total Pay: </span>\n                      <Cash value={scenario.totalPay} compact={false} />\n                    </Stack>\n                  }\n                >\n                  <TreeItem\n                    itemId=\"aprToApr\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Apr To Apr: </span>\n                        <Cash value={scenario.aprToApr} compact={false} />\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"basePay\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Base Pay: </span>\n                        <Cash value={scenario.basePay} compact={false} />\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"taxablePay\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Taxable Pay: </span>\n                        <Cash value={scenario.taxablePay} compact={false} />\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"totalPay\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Total Pay: </span>\n                        <Cash value={scenario.totalPay} compact={false} />\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"totalMerit\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Total Merit Increase: </span>\n                        <Percent value={scenario.meritIncreasePct + scenario.equityIncreasePct} />\n                      </Stack>\n                    }\n                  >\n                    <TreeItem\n                      itemId=\"meritIncreasePct\"\n                      label={\n                        <Stack direction={\"row\"} spacing={1}>\n                          <span>Merit Increase: </span>\n                          <Percent value={scenario.meritIncreasePct} />\n                        </Stack>\n                      }\n                    />\n                    <TreeItem\n                      itemId=\"equityIncreasePct\"\n                      label={\n                        <Stack direction={\"row\"} spacing={1}>\n                          <span>Equity Increase: </span>\n                          <Percent value={scenario.equityIncreasePct} />\n                        </Stack>\n                      }\n                    />\n                  </TreeItem>\n\n                  <TreeItem\n                    itemId=\"currentPaymentIdx\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Current Payment Index: </span>\n                        <span>{scenario.currentPaymentIdx}</span>\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"remainingPayments\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Remaining Regular Payments: </span>\n                        <span>{scenario.remainingRegularPayments}</span>\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"current_payment\"\n                    label={\n                      <Stack direction={\"row\"} spacing={2}>\n                        <Box>Current Payment: </Box>\n                        <Box>\n                          {DateTime.fromISO(scenario.payments[scenario.currentPaymentIdx].payedOn).toFormat(shortDate)}\n                        </Box>\n                        <Box width={70} textAlign={\"right\"}>\n                          {formatCash(scenario.payments[scenario.currentPaymentIdx].value)}\n                        </Box>\n                        <Box width={70} textAlign={\"right\"}>\n                          {formatCash(scenario.payments[scenario.currentPaymentIdx].cumulative)}\n                        </Box>\n                        <Box> {scenario.payments[scenario.currentPaymentIdx].type}</Box>\n                      </Stack>\n                    }\n                  ></TreeItem>\n                  <TreeItem itemId=\"payments\" label={\"Payments Considered\"}>\n                    {scenario.payments.toReversed().map((x, i, arr) => (\n                      <TreeItem\n                        key={i}\n                        itemId={`payments-${i}`}\n                        label={\n                          <Stack\n                            sx={{\n                              backgroundColor:\n                                scenario.currentPaymentIdx == arr.length - 1 - i ? \"rgba(0,255,0,.15)\" : undefined,\n                            }}\n                            direction={\"row\"}\n                            spacing={2}\n                          >\n                            <Box>{arr.length - 1 - i}</Box>\n                            <Box>{DateTime.fromISO(x.payedOn).toFormat(shortDate)}</Box>\n                            <Box width={70} textAlign={\"right\"}>\n                              {formatCash(x.value)}\n                            </Box>\n                            <Box width={70} textAlign={\"right\"}>\n                              {formatCash(x.cumulative)}\n                            </Box>\n                            <Box> {x.type}</Box>\n                          </Stack>\n                        }\n                      />\n                    ))}\n                  </TreeItem>\n                  <TreeItem itemId=\"pay\" label={\"Pay\"}>\n                    {scenario.pay.toReversed().map((x, i) => (\n                      <TreeItem key={i} itemId={`$pay-${i}`} label={`${DateTime.fromISO(x.date).year} ${x.value}`} />\n                    ))}\n                  </TreeItem>\n                </TreeItem>\n\n                <TreeItem\n                  itemId=\"meritBonus\"\n                  label={\n                    <Stack direction={\"row\"} spacing={1}>\n                      <span>Merit Bonus: </span>\n                      <Cash value={scenario.meritBonus} compact={false} />\n                    </Stack>\n                  }\n                >\n                  <TreeItem\n                    itemId=\"mertiBonusPct\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Merit Bonus Percent: </span>\n                        <Percent value={scenario.meritBonusPct} />\n                      </Stack>\n                    }\n                  />\n                </TreeItem>\n                <TreeItem\n                  itemId=\"companyBonus\"\n                  label={\n                    <Stack direction={\"row\"} spacing={1}>\n                      <span>Company Bonus:</span>\n                      <Cash value={scenario.companyBonus} compact={false} />\n                    </Stack>\n                  }\n                >\n                  <TreeItem\n                    itemId=\"companyBonusFactor.value\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Company Bonus Factor:</span>\n                        <Percent value={scenario.companyBonusFactor} />\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"companyBonusPct.value\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Company Bonus Percent:</span>\n                        <Percent value={scenario.companyBonusPct} />\n                      </Stack>\n                    }\n                  />\n                  <TreeItem\n                    itemId=\"lastThreeMeritBonusFactor\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Last Three Merit Bonus Percent:</span>\n                        <Percent value={scenario.lastThreeMeritBonusFactor} />\n                      </Stack>\n                    }\n                  >\n                    {scenario.lastThreeMeritBonuses.toReversed().map((x, i) => (\n                      <TreeItem\n                        key={`${i}${x}`}\n                        itemId={`lastThreeMeritBonuses${i}`}\n                        label={`${year - i} ${formatPercent(x)}`}\n                      />\n                    ))}\n                  </TreeItem>\n                </TreeItem>\n                <TreeItem\n                  itemId=\"retirementBonus\"\n                  label={\n                    <Stack direction={\"row\"} spacing={1}>\n                      <span>Retirement Bonus:</span>\n                      <Cash value={scenario.retirementBonus} compact={false} />\n                    </Stack>\n                  }\n                >\n                  <TreeItem\n                    itemId=\"retirementBonusPct\"\n                    label={\n                      <Stack direction={\"row\"} spacing={1}>\n                        <span>Retirement Bonus Percent:</span>\n                        <Percent value={scenario.retirementBonusPct} />\n                      </Stack>\n                    }\n                  />\n                </TreeItem>\n              </SimpleTreeView>\n            </Paper>\n          </Stack>\n        </Paper>\n      </Modal>\n    </>\n  );\n};\n","import { Box, Table, TableBody, TableCell, TableHead, TableRow } from \"@mui/material\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport { ReactNode } from \"react\";\nimport { ZodError } from \"zod\";\n\ninterface InvalidDataDialogProps {\n  open?: boolean;\n  error?: ZodError;\n  children?: ReactNode;\n}\n\nexport default function InvalidDataDialog(props: InvalidDataDialogProps) {\n  const { open, error, children } = props;\n\n  return (\n    <>\n      <Dialog open={!!open}>\n        <DialogTitle id=\"alert-dialog-title\">{\"Error Loading Data\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            <Box maxHeight={500} overflow={\"auto\"}>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Error Message</TableCell>\n                    <TableCell>Path</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {error?.issues.map((x, idx) => {\n                    return (\n                      <TableRow key={idx}>\n                        <TableCell>{x.message}</TableCell>\n                        <TableCell>{x.path.join(\".\")}</TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            </Box>\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>{children}</DialogActions>\n      </Dialog>\n    </>\n  );\n}\n","import { useStore } from \"@tanstack/react-store\";\nimport { useCallback } from \"react\";\nimport { store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const downloadJson = <T,>(filename: string, storeData: T) => {\n  const data = JSON.stringify(storeData, null, 2);\n  const link = document.createElement(\"a\");\n  link.download = filename;\n  const blob = new Blob([data], { type: \"application/json\" });\n  link.href = window.URL.createObjectURL(blob);\n  link.click();\n};\n\nexport const useExport = () => {\n  const storeData = useStore(store);\n  const onExport = useCallback(() => {\n    downloadJson(`wealth-tracker-${getLocalDateTime().toFormat(shortDate)}.json`, storeData);\n  }, [storeData]);\n\n  return onExport;\n};\n","import { useCallback } from \"react\";\nimport { storeValidator } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\nimport { migration } from \"shared/store/migrations\";\n\nfunction selectFile(contentType: string) {\n  return new Promise<File>((resolve) => {\n    const input = document.createElement(\"input\");\n    input.type = \"file\";\n    input.multiple = false;\n    input.accept = contentType;\n\n    input.onchange = () => {\n      const files = Array.from(input.files ?? []);\n      resolve(files[0]);\n    };\n\n    input.click();\n  });\n}\n\nexport const useImport = () => {\n  return useCallback(() => {\n    return new Promise<void>((resolve, reject) => {\n      selectFile(\"application/json\").then((file) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = (readerEvent) => {\n          const content = readerEvent.target?.result?.toString();\n          if (content) {\n            const data = JSON.parse(window.atob(content.split(\",\")[1]));\n            const validation = storeValidator.safeParse(data);\n            if (validation.success) {\n              store.setState(() => data);\n              resolve();\n            } else {\n              try {\n                migration(data);\n                store.setState(() => data);\n                resolve();\n              } catch (err) {\n                console.log(\"error\", err);\n                console.log(\"invalid data\", data);\n                reject(err);\n              }\n            }\n          }\n        };\n      });\n    });\n  }, []);\n};\n","import { useMemo } from \"react\";\nimport { storeValidator } from \"shared/models/store/current\";\n\nexport const useStoreDataError = () => {\n  const invalidData = localStorage.getItem(\"store-invalid\");\n  return useMemo(() => {\n    if (!invalidData) {\n      return { hadError: false };\n    }\n    const jsonInvalidData = JSON.parse(invalidData);\n    const validated = storeValidator.safeParse(jsonInvalidData);\n    return {\n      hadError: !!invalidData,\n      invalidData: jsonInvalidData,\n      parseError: invalidData && !validated.success ? validated.error : undefined,\n      resetError: () => {\n        localStorage.removeItem(\"store-invalid\");\n      },\n    };\n  }, [invalidData]);\n};\n","import DeleteForever from \"@mui/icons-material/DeleteForever\";\nimport { Button, Card, CardActions, CardContent, CardHeader, Stack, Typography } from \"@mui/material\";\nimport InvalidDataDialog from \"app/invalid-data-dialog\";\nimport { useState } from \"react\";\nimport { ConfirmDialog } from \"shared/components/confirm-dialog\";\nimport { downloadJson, useExport } from \"shared/hooks/use-export\";\nimport { useImport } from \"shared/hooks/use-import\";\nimport { useStoreDataError } from \"shared/hooks/use-store-data-error\";\nimport { resetStore } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const System = () => {\n  const onExport = useExport();\n  const onImport = useImport();\n  const { hadError, parseError, resetError, invalidData } = useStoreDataError();\n  const [error, setError] = useState(parseError);\n  const [isOpen, setIsOpen] = useState(hadError);\n\n  return (\n    <>\n      <Stack spacing={2}>\n        <Card>\n          <CardHeader title={\"System\"} />\n          <CardContent>\n            <Typography variant=\"body2\">Built On {BUILD_DATE}</Typography>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader title={\"Data\"} />\n\n          <CardActions>\n            <Button\n              onClick={() =>\n                onImport().catch((err) => {\n                  setIsOpen(true);\n                  setError(err);\n                })\n              }\n            >\n              Import\n            </Button>\n            <Button onClick={onExport}>Export</Button>\n            <ConfirmDialog title=\"Reset Everything\" onConfirm={resetStore}>\n              <Button color=\"error\">\n                <DeleteForever />\n                Reset\n              </Button>\n            </ConfirmDialog>\n          </CardActions>\n        </Card>\n      </Stack>\n      <InvalidDataDialog open={isOpen} error={error}>\n        {hadError && (\n          <>\n            <Button\n              color=\"error\"\n              onClick={() => {\n                setIsOpen(false);\n                resetError?.();\n                resetStore();\n              }}\n            >\n              Reset\n            </Button>\n            <Button\n              onClick={() => {\n                downloadJson(`invalid-data-wealth-tracker-${getLocalDateTime().toFormat(shortDate)}.json`, invalidData);\n              }}\n            >\n              Download Data\n            </Button>\n\n            <Button\n              onClick={() => {\n                setIsOpen(false);\n                resetError?.();\n              }}\n            >\n              Ignore\n            </Button>\n          </>\n        )}\n        {!hadError && (\n          <Button\n            onClick={() => {\n              setIsOpen(false);\n            }}\n          >\n            Cancel\n          </Button>\n        )}\n      </InvalidDataDialog>\n    </>\n  );\n};\n","import CloseIcon from \"@mui/icons-material/Close\";\nimport SettingsIcon from \"@mui/icons-material/Settings\";\nimport { Box, Button, Dialog, DialogContent, DialogTitle, IconButton, Tab, Tabs } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { Config } from \"./config\";\nimport { ScenarioExplorer } from \"./scenario-explorer\";\nimport { System } from \"./system\";\n\nexport const ConfigModal = () => {\n  const [tab, setTab] = useState(\"system\");\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <>\n      <Button onClick={() => setIsOpen(true)}>\n        <SettingsIcon />\n      </Button>\n      <Dialog maxWidth={false} open={isOpen} onClose={() => setIsOpen(false)}>\n        <DialogTitle sx={{ display: \"flex\" }}>\n          <Tabs value={tab} onChange={(_, value) => setTab(value)}>\n            <Tab value=\"projected-Income\" label=\"Projected Income\" />\n            <Tab value=\"projected-wealth\" label=\"Projected Wealth\" />\n            <Tab value=\"system\" label=\"System\" />\n          </Tabs>\n          <IconButton sx={{ height: \"min-content\", marginLeft: \"auto\" }} onClick={() => setIsOpen(false)}>\n            <CloseIcon />\n          </IconButton>\n        </DialogTitle>\n        <DialogContent>\n          <Box width={600} height={450}>\n            {tab === \"projected-Income\" && <ScenarioExplorer />}\n            {tab === \"projected-wealth\" && <Config />}\n            {tab === \"system\" && <System />}\n          </Box>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n};\n","import { Box, Stack, Tab, Tabs } from \"@mui/material\";\nimport { NetWealth } from \"capabilities/net-wealth\";\nimport { ProjectedIncome } from \"capabilities/projected-income\";\nimport { ProjectedWealth } from \"capabilities/projected-wealth\";\nimport { useState } from \"react\";\nimport { ConfigModal } from \"./config/config-modal\";\n\nexport const App = () => {\n  const [tab, setTab] = useState<string>(\"wealth\");\n\n  return (\n    <Box padding={2} paddingTop={0} display={\"flex\"} flexDirection={\"column\"} height=\"100%\" gap={2}>\n      <Box flex=\"0 1 auto\">\n        <Stack direction=\"row\">\n          <Tabs value={tab} onChange={(_, value) => setTab(value)}>\n            <Tab value=\"wealth\" label=\"Total Wealth\" />\n            <Tab value=\"projected-income\" label=\"Projected Income\" />\n            <Tab value=\"projected-wealth\" label=\"Projected Wealth\" />\n          </Tabs>\n          <Box marginLeft={\"auto\"} gap={2} display={\"flex\"}>\n            <ConfigModal />\n          </Box>\n        </Stack>\n      </Box>\n      <Box flex=\"1 1 auto\" height={\"100%\"} width={\"100%\"} overflow=\"hidden\">\n        {tab === \"wealth\" && <NetWealth />}\n        {tab === \"projected-income\" && <ProjectedIncome />}\n        {tab === \"projected-wealth\" && <ProjectedWealth />}\n      </Box>\n    </Box>\n  );\n};\n","import { DateTime } from \"luxon\";\n\nexport const aPayday = DateTime.fromObject({ month: 12, day: 1, year: 2023 });\n","import { DateTime } from \"luxon\";\nimport { MAX_NUM_ENTRIES } from \"shared/constants\";\nimport { AccountData, ProjectedIncome } from \"shared/models/store/current\";\nimport { findSameYear } from \"shared/utility/find-same-year\";\nimport { getPayments } from \"shared/utility/get-payments\";\nimport { valueByDateRange } from \"shared/utility/get-values-by-date-range\";\n\nexport const getScenarioSize = (year: number, projectedIncome: ProjectedIncome) => {\n  const meritSequence = getMeritSequence(year, projectedIncome);\n  const companyBonusFactor = findSameYear(year, projectedIncome.timeSeries.companyBonusPct);\n  const companyBonusPcts = companyBonusFactor\n    ? [companyBonusFactor.value]\n    : projectedIncome.timeSeries.companyBonusPct.slice(-1 * MAX_NUM_ENTRIES).map((x) => x.value);\n\n  const companyBonusPctWeights = Object.entries(Object.groupBy(companyBonusPcts, (x) => x)).map(([, values]) => {\n    return {\n      weight: values!.length,\n      value: values!.at(0)!,\n    };\n  });\n\n  return meritSequence.slice(-1 * MAX_NUM_ENTRIES).length * companyBonusPctWeights.length;\n};\n\nconst getMeritPairs = (year: number, projectedIncome: ProjectedIncome) => {\n  const timeSeries = projectedIncome.timeSeries;\n  const meritBonusPct = findSameYear(year, timeSeries.meritBonusPct);\n  const meritIncreasePct = findSameYear(year, timeSeries.meritIncreasePct);\n\n  const allMeritPairs = timeSeries.meritIncreasePct.map((x) => {\n    const meritBonusPctPair = findSameYear(DateTime.fromISO(x.date).year, timeSeries.meritBonusPct);\n    return {\n      meritIncreasePct: x.value,\n      meritBonusPct: meritBonusPctPair?.value ?? 0,\n    };\n  });\n\n  return allMeritPairs\n    .filter((x) => (meritBonusPct ? x.meritBonusPct === meritBonusPct.value : true))\n    .filter((x) => (meritIncreasePct ? x.meritIncreasePct === meritIncreasePct?.value : true))\n    .slice(-1 * MAX_NUM_ENTRIES);\n};\n\nexport const getMeritSequence = (year: number, projectedIncome: ProjectedIncome) => {\n  const timeSeries = projectedIncome.timeSeries;\n  const meritPairs = getMeritPairs(year, projectedIncome);\n\n  const pay = timeSeries.paycheck.filter((x) => DateTime.fromISO(x.date).year > year - 3);\n  const mostRecentPay = pay.at(-1) ?? timeSeries.paycheck.at(-1);\n\n  if (!mostRecentPay) {\n    return [];\n  }\n\n  const yearsToGenerate = Math.max(year - DateTime.fromISO(mostRecentPay.date).year, 1);\n\n  let meritSequence = meritPairs.slice().map((x) => [x]);\n  for (let i = 0; i < yearsToGenerate - 1; i++) {\n    meritSequence = meritSequence.flatMap((x) => {\n      return meritPairs.map((merit) => {\n        return x.slice().concat(merit);\n      });\n    });\n  }\n\n  const groups = Object.entries(Object.groupBy(meritSequence, (x) => JSON.stringify(x))).map(([, values]) => {\n    return {\n      weight: values!.length,\n      values: values!.at(0)!,\n    };\n  });\n\n  return groups;\n};\n\nexport const getEmptyMeritSequence = (year: number, projectedIncome: ProjectedIncome, pay: AccountData[]) => {\n  const timeSeries = projectedIncome.timeSeries;\n  const equityIncreasePct = findSameYear(year, timeSeries.equityPct)?.value ?? 0;\n  const meritIncreasePct = findSameYear(year, timeSeries.meritIncreasePct)?.value ?? 0;\n  const meritBonusPct = findSameYear(year, timeSeries.meritBonusPct)?.value ?? 0;\n  const meritBonuses = pay.map(\n    (x) => findSameYear(DateTime.fromISO(x.date).year, timeSeries.meritBonusPct)?.value ?? 0\n  );\n\n  const lastThreeMeritBonuses = meritBonuses.slice(-3);\n  const lastThreeMeritBonusFactor = meritBonuses.slice(-3).reduce((acc, curr) => acc + curr, 0);\n  const payments = getPayments(\n    DateTime.fromObject({ day: 1, month: 1, year: year - 1 }),\n    DateTime.fromObject({ day: 31, month: 12, year: year }).endOf(\"day\"),\n    valueByDateRange(pay)\n  );\n\n  return [\n    {\n      year,\n      pay: pay.slice(),\n      lastThreeMeritBonusFactor,\n      lastThreeMeritBonuses,\n      meritBonusPct,\n      meritIncreasePct,\n      payments,\n      equityIncreasePct,\n      retirementBonusPct: 0.15,\n      weight: 1,\n    },\n  ];\n};\n","import { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { Scenario } from \"shared/models/scenario\";\nimport { store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { scenarioStore } from \"../store/scenario-store\";\nimport { getScenarioSize } from \"./merit-sequence\";\n\nconst currentYear = getLocalDateTime().year;\nconst maxYear = (() => {\n  const projectedIncome = store.state.projectedIncome;\n  for (let i = currentYear; i <= currentYear + 5; i++) {\n    const size = getScenarioSize(i, projectedIncome);\n    if (size > 2499 || size === 0) {\n      return Math.max(currentYear, i - 1);\n    }\n  }\n  return currentYear + 5;\n})();\n\nconst workers = [\n  new Worker(new URL(\"worker.js\", import.meta.url), { type: \"module\", name: \"1\" }),\n  new Worker(new URL(\"worker.js\", import.meta.url), { type: \"module\", name: \"2\" }),\n  new Worker(new URL(\"worker.js\", import.meta.url), { type: \"module\", name: \"3\" }),\n  new Worker(new URL(\"worker.js\", import.meta.url), { type: \"module\", name: \"4\" }),\n];\n\nworkers.map(\n  (x) =>\n    (x.onmessage = (event: MessageEvent<{ year: number; scenarios: Scenario[] }>) => {\n      scenarioStore.setState((prev) => {\n        return create(prev, (x) => {\n          x.scenarios[event.data.year] = event.data.scenarios;\n\n          const range = Object.keys(x.scenarios)\n            .map((x) => +x)\n            .filter((x, i, arr) => {\n              return i === 0 ? true : x - arr[i - 1] === 1;\n            });\n          const min = range[0];\n          const max = range.at(-1);\n\n          x.loading = max !== maxYear;\n          x.maxYear = max!;\n          x.minYear = min;\n        });\n      });\n    })\n);\n\nconst loadAllScenarios = () => {\n  const projectedIncome = store.state.projectedIncome;\n  const first = projectedIncome.timeSeries.paycheck[1]?.date;\n  const date = first ? DateTime.fromISO(first) : getLocalDateTime();\n  const oldestYear = date.year;\n\n  workers[0].postMessage({ year: currentYear, projectedIncome });\n\n  let workerIdx = 1;\n  for (let i = oldestYear; i < currentYear; i++) {\n    const idx = workerIdx++ % workers.length;\n    workers[idx].postMessage({ year: i, projectedIncome });\n  }\n\n  for (let i = currentYear + 1; i <= maxYear; i++) {\n    const idx = workerIdx++ % workers.length;\n    workers[idx].postMessage({ year: i, projectedIncome });\n  }\n};\nloadAllScenarios();\n\nlet priorProjectedIncome = store.state.projectedIncome;\nstore.subscribe(() => {\n  if (priorProjectedIncome === store.state.projectedIncome) {\n    return;\n  }\n  scenarioStore.setState(() => ({ loading: false, scenarios: {}, maxYear: currentYear, minYear: currentYear }));\n  priorProjectedIncome = store.state.projectedIncome;\n  loadAllScenarios();\n});\n","import { CssBaseline, ThemeProvider, createTheme } from \"@mui/material\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers\";\nimport { AdapterLuxon } from \"@mui/x-date-pickers/AdapterLuxon\";\nimport { App } from \"app/app.tsx\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport \"shared/web-worker/entry\";\nimport \"./index.css\";\n\nimport { AllCommunityModule, ModuleRegistry } from \"ag-grid-community\";\nModuleRegistry.registerModules([AllCommunityModule]);\n\nconst darkTheme = createTheme({\n  palette: {\n    mode: \"dark\",\n  },\n});\n\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n  <React.StrictMode>\n    <ErrorBoundary\n      fallbackRender={(props) => {\n        return (\n          <>\n            <div style={{ backgroundColor: \"#FFF\" }}>{props.error.message}</div>\n            <div style={{ backgroundColor: \"#FFF\" }}>{props.error.stackTrace}</div>\n          </>\n        );\n      }}\n    >\n      <LocalizationProvider dateAdapter={AdapterLuxon}>\n        <ThemeProvider theme={darkTheme}>\n          <CssBaseline />\n          <App />\n        </ThemeProvider>\n      </LocalizationProvider>\n    </ErrorBoundary>\n  </React.StrictMode>\n);\n"],"names":["sortByDate","select","direction","a","b","toMillis","loanValidator","z","object","principal","number","ratePct","paymentsPerYear","payment","firstPaymentDate","string","ownershipPct","accountDataValidator","date","value","id","accountValidator","type","literal","data","array","mortgageValidator","loan","optional","wealth","record","union","projectedIncome","timeSeries","paycheck","meritIncreasePct","equityPct","meritBonusPct","meritBonus","companyBonusPct","companyBonus","retirementBonus","projectedWealth","socialSecurityLimit","socialSecurityTaxRate","medicareSupplementalTaxThreshold","medicareSupplementalTaxRate","savingsPerMonth","retirementContributionPaycheck","bonusWitholdingsRate","storeValidator","version","bonusWithholdingsRate","hidden","boolean","default","getDefaultStore","migration","Error","storeV0Validator","parse","storeV1Validator","storeV2Validator","storeV3Validator","storeV4Validator","keys","Object","i","length","next","console","log","createStore","validator","defaultValue","key","invalidData","localData","localStorage","getItem","JSON","safeParse","success","setItem","stringify","err","store","CreateStore","subscribe","current","state","addAccountEntry","accountName","amount","setState","create","prev","push","startOf","toString","sort","DateTime","fromISO","x","addProjectedIncome","concat","hideAccount","removeAccount","removeAccountEntry","idx","findIndex","splice","removeProjectedIncome","resetStore","setLoan","updateAccountDate","toISO","updateAccountName","currentAccountName","newAccountName","updateAccountValue","updateProjectedIncome","NewAccount","forwardRef","props","ref","open","setOpen","useState","nameRef","useRef","error","setError","accountType","setAccountType","undefined","marginTop","target","children","myTheme","themeQuartz","withParams","backgroundColor","browserColorScheme","chromeBackgroundColor","mix","onto","foregroundColor","headerFontSize","AgGrid","rest","height","getLocalDateTime","local","shortDate","monthDay","formatCashShort","Intl","NumberFormat","style","currency","notation","maximumFractionDigits","minimumSignificantDigits","maximumSignificantDigits","format","formatCash","Cash","fallback","disableTooltip","compact","tooltip","placement","formatted","useMemo","join","createAccountColumnConfig","headerName","valueFormatter","toFormat","valueGetter","cellEditor","editable","valueSetter","fromJSDate","newValue","isValid","cellRenderer","cellStyle","display","padding","sortable","width","colId","DeleteForeverIcon","useMissingYears","account","years","entries","groupBy","year","map","find","janFirst","fromObject","day","month","diff","days","lookup","fromEntries","missing","ConfirmDialog","onConfirm","title","isOpen","setIsOpen","minWidth","justifyContent","marginRight","AccountSettings","nextAccountName","setNextAccountName","Close","event","AccountTab","useStore","setDate","setAmount","missingYears","hasSameDate","hasSame","onAddEntry","accountColumnConfig","marginLeft","color","input","startAdornment","api","sizeColumnsToFit","findNearestOnOrBefore","findNearestIdxOnOrBefore","selector","getGraphDates","accounts","Set","flatMap","calcLoanBalance","rate","monthlyPayment","annualizedRate","periods","months","totalRate","balance","calcEquity","houseValue","loanBalance","AddEntry","Stack","mortgageColumnConfig","toFixed","equity","convertPct","min","datetime","offset","handleClose","textField","parsed","issues","path","MortgageTab","allAccounts","mortgageData","values","Box","AccountTabs","firstAccount","setAccount","useEffect","_","filter","useEarliestAccountEntry","fromMillis","reduce","acc","curr","Math","Infinity","getMortgageValue","mortgage","entry","getAccountValue","getGraphValue","useGraphData","dates","graphData","toJSDate","total","forEach","arr","firstNonZero","slice","_ref","name","styles","WealthChart","initialFromDate","intialToDate","endOf","fromDate","setFromDate","plus","toDate","setToDate","filteredData","getFullYear","series","stacked","xKey","yKey","yName","renderer","datum","content","toISODate","options","theme","text","axes","position","label","nice","interval","step","time","every","snapTo","NetWealth","border","borderRadius","boxShadow","Card","minHeight","paddingBottom","paddingLeft","paddingTop","CashRange","max","showRange","minFormatted","maxFormatted","formatPercent","getColor","probability","Percent","PercentRange","Value","secondaryValue","tertiaryValue","className","flexDirection","alignItems","gap","flexShrink","ClusterValue","ClusterValues","clusters","eventDate","diffNow","toHuman","dur","smallestUnit","units","smallestIdx","indexOf","shiftTo","normalize","toObject","Duration","replaceAll","CountDown","dateTime","variant","dateFormat","countDownStr","tooltipStr","countDownColor","scenarioStore","Store","loading","maxYear","minYear","scenarios","makeMatrix","columns","rows","matrix","column","j","numericSort","toSorted","uniqueCountSorted","uniqueValueCount","lastSeenValue","ssq","sums","sumsOfSquares","sji","muji","fillMatrixColumn","iMin","iMax","cluster","backtrackMatrix","floor","jlow","jhigh","sjlowi","ssqjlow","ssqj","fillMatrices","nValues","shift","shiftedValue","ckmeans","nClusters","sorted","clusterRight","clusterLeft","areSetsEqual","has","collapseClusters","sets","y","result","scaleCluster","factor","median","scaleClusters","findMostMostLikely","clusterTitle","index","getClusterCount","uniqeValues","size","totalWeight","sumSimple","weight","clusterCount","useClusters","totalPay","pay","meritIncrease","taxablePay","at","equityIncreasePct","useTotalPayClusters","allScenarios","findSameYear","useRealDate","useDates","meritBonusDate","companyBonusDate","retirementBonusDate","useDateRanges","base","start","end","PaymentTypes","regular","MAX_NUM_ENTRIES","SparkChart","ckData","maxClusters","ck","subArr","flat","stroke","marker","itemStyler","params","fill","maxSpacing","formatter","isDisabled","sx","maxWidth","updateProjectedIncomeDate","dateVariant","tooltipValueGetter","valueFormatted","set","disabledStyle","DataEntry","defaultDate","flex","rowIndex","Layout","IncomeChart","history","future","toLocaleLowerCase","lowProbability","medProbability","highProbability","IncomePerPeriodTooltip","incomePerPeriod","perPayday","count","useHasMeritPairs","ProjectedIncome","selectedYear","setSelectedYear","hasMissingPairs","dateRanges","basePay","aprToApr","paychecks","payments","payedOn","reduceRight","unshift","flexWrap","isFuture","milliseconds","useFutureMortgageEquity","startDate","useFutureRetirementContributions","retirementContribution","remaining","remainingRegularPayments","perPaycheck","useFutureSavings","config","perMonth","useFutureSocialSecurity","useThresholdTax","useFutureMedicareTax","taxes","threshold","taxRate","cumulative","firstOccurrence","currentPaymentIdx","thresholdTaxRemaining","scenario","useFutureTotals","excludeHomeEquity","bonusTakeHomeFactor","savings","homeEquity","retirement","rawClusters","totals","futureBonuses","numValues","FutureEvents","onChange","medicare","socialSecurity","ThresholdTaxCard","thresholdTax","equals","ClusterCard","useFuturesWealth","totalsPlusOne","useTimeSeriesWealth","localDateTime","earliest","futuresWealth","Array","some","futureBenchmarkIdx","accountWealth","futureWealth","graphDate","benchmarkWealth","yoyCash","yoyPct","dataYear","titleYear","offsetIdx","columnConfig","systemYear","WealthTable","e","ProjectedWealth","localTime","setYear","setProjectedWealth","configName","ConfigEntry","isPercent","onchange","useCallback","isNan","Number","isNaN","Config","ScenarioExplorer","scenarioIndex","setScenarioIndex","scenarioData","top","bottom","right","left","overflow","toReversed","companyBonusFactor","lastThreeMeritBonusFactor","lastThreeMeritBonuses","retirementBonusPct","InvalidDataDialog","message","downloadJson","filename","storeData","link","document","createElement","download","blob","Blob","href","window","URL","createObjectURL","click","useExport","onExport","selectFile","contentType","Promise","multiple","accept","files","from","useImport","resolve","reject","then","reader","FileReader","readAsDataURL","file","onload","readerEvent","atob","split","useStoreDataError","hadError","jsonInvalidData","validated","parseError","resetError","removeItem","System","onImport","BUILD_DATE","catch","ConfigModal","tab","setTab","App","getScenarioSize","meritSequence","getMeritSequence","companyBonusPcts","companyBonusPctWeights","getMeritPairs","allMeritPairs","meritBonusPctPair","meritPairs","mostRecentPay","yearsToGenerate","merit","groups","currentYear","workers","Worker","onmessage","range","loadAllScenarios","first","oldestYear","postMessage","workerIdx","priorProjectedIncome","ModuleRegistry","registerModules","AllCommunityModule","darkTheme","createTheme","palette","mode","ReactDOM","createRoot","getElementById","render","stackTrace","AdapterLuxon"],"mappings":"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"}