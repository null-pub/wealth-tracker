{"version":3,"file":"index-CC4pZ7pG.js","sources":["../../src/shared/utility/sort-by-date.ts","../../src/shared/models/store/version-0/account-data.ts","../../src/shared/models/store/version-0/account.ts","../../src/shared/models/store/version-0/loan.ts","../../src/shared/models/store/version-0/mortgage.ts","../../src/shared/models/store/version-0/net-wealth.ts","../../src/shared/models/store/version-0/projected-income.ts","../../src/shared/models/store/current/get-default.ts","../../src/shared/models/store/current/projected-wealth.ts","../../src/shared/models/store/version-0/projected-wealth.ts","../../src/shared/models/store/version-1/store.ts","../../src/shared/models/store/current/store.ts","../../src/shared/models/store/version-0/store.ts","../../src/shared/store/migrations.ts","../../src/shared/store/store.ts","../../src/shared/store/add-account-entry.ts","../../src/shared/store/add-projected-income.ts","../../src/shared/store/remove-account.ts","../../src/shared/store/remove-account-entry.ts","../../src/shared/store/remove-projected-income.ts","../../src/shared/store/reset-store.ts","../../src/shared/store/set-loan.ts","../../src/shared/store/update-account-date.ts","../../src/shared/store/update-account-name.ts","../../src/shared/store/update-account-value.ts","../../src/shared/store/update-projected-income.ts","../../src/capabilities/net-wealth/components/new-account/new-account.tsx","../../src/shared/components/ag-grid/ag-grid.tsx","../../src/shared/utility/current-date.ts","../../src/shared/utility/format-date.ts","../../src/capabilities/net-wealth/components/tab-types/components/delete-account.tsx","../../src/capabilities/net-wealth/components/tab-types/components/update-account.tsx","../../src/shared/utility/format-cash.ts","../../src/shared/components/formatters/cash.tsx","../../src/capabilities/net-wealth/components/tab-types/account/column-config.tsx","../../src/capabilities/net-wealth/components/tab-types/account/hooks/useMissingYears.ts","../../src/capabilities/net-wealth/components/tab-types/account/account.tsx","../../src/shared/utility/find-nearest-on-or-before.ts","../../src/shared/utility/get-graph-dates.ts","../../src/shared/utility/mortgage-calc.ts","../../src/capabilities/net-wealth/components/tab-types/mortgage/add-entry.tsx","../../src/capabilities/net-wealth/components/tab-types/mortgage/add-loan.tsx","../../src/capabilities/net-wealth/components/tab-types/mortgage/column-config.tsx","../../src/capabilities/net-wealth/components/tab-types/mortgage/mortgage.tsx","../../src/capabilities/net-wealth/components/account-tabs/account-tabs.tsx","../../src/shared/utility/get-graph-value.ts","../../src/capabilities/net-wealth/components/wealth-chart/use-graph-data.ts","../../src/capabilities/net-wealth/components/wealth-chart/wealth-chart.tsx","../../src/capabilities/net-wealth/net-wealth.tsx","../../src/shared/components/card.tsx","../../src/capabilities/projected-income/components/value.tsx","../../src/shared/components/formatters/cash-range.tsx","../../src/shared/utility/format-percent.ts","../../src/shared/components/formatters/percent.tsx","../../src/shared/components/formatters/percent-range.tsx","../../src/shared/components/formatters/cluster-value.tsx","../../src/shared/components/formatters/countdown.tsx","../../src/shared/utility/find-same-year.ts","../../src/shared/hooks/use-dates.ts","../../src/shared/store/scenario-store.ts","../../src/shared/store/update-projected-income-date.ts","../../src/capabilities/projected-income/components/data-entry/column-config.tsx","../../src/capabilities/projected-income/components/data-entry/data-entry.tsx","../../src/capabilities/projected-income/components/income-per-period.tsx","../../src/capabilities/projected-income/hooks/use-gradient.ts","../../src/capabilities/projected-income/hooks/use-has-merit-pairs.ts","../../src/capabilities/projected-income/projected-income.tsx","../../src/capabilities/projected-wealth/hooks/use-future-retirement-contributions.ts","../../src/capabilities/projected-wealth/hooks/use-future-savings.ts","../../src/capabilities/projected-wealth/hooks/use-future-social-security.ts","../../src/shared/utility/cluster-helpers.ts","../../src/capabilities/projected-wealth/components/future-events/future-events.tsx","../../src/capabilities/projected-wealth/hooks/use-earliest-account-entry.ts","../../src/capabilities/projected-wealth/hooks/use-future-bonuses.ts","../../src/capabilities/projected-wealth/hooks/use-times-series-wealth.ts","../../src/capabilities/projected-wealth/components/wealth-chart.tsx","../../src/capabilities/projected-wealth/components/wealth-table/colum-config.tsx","../../src/capabilities/projected-wealth/components/wealth-table/wealth-table.tsx","../../src/capabilities/projected-wealth/projected-wealth.tsx","../../src/shared/components/safety-button/count-down.tsx","../../src/shared/components/safety-button/safety-button.tsx","../../src/shared/hooks/use-export.tsx","../../src/shared/hooks/use-import.tsx","../../src/shared/hooks/use-store-data-error.ts","../../src/shared/store/set-projected-wealth.ts","../../src/app/config/config-entry.tsx","../../src/app/config/config.tsx","../../src/app/invalid-data-dialog.tsx","../../src/app/app.tsx","../../src/shared/utility/a-payday.ts","../../src/shared/web-worker/merit-sequence.ts","../../src/shared/web-worker/entry.ts","../../src/main.tsx"],"sourcesContent":["import { DateTime } from \"luxon\";\n\nexport const sortByDate =\n  <T>(select: (data: T) => DateTime, direction: \"asc\" | \"desc\") =>\n  (a: T, b: T) =>\n    direction === \"asc\" ? select(a).toMillis() - select(b).toMillis() : select(b).toMillis() - select(a).toMillis();\n","import { z } from \"zod\";\n\nexport const accountDataValidator = z.object({\n  date: z.string(),\n  value: z.number(),\n  id: z.string(),\n});\n\nexport type AccountData = z.infer<typeof accountDataValidator>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const accountValidator = z.object({\n  type: z.literal(\"account\"),\n  data: z.array(accountDataValidator),\n});\n\nexport type Account = z.infer<typeof accountValidator>;\n","import { z } from \"zod\";\n\nexport const loanValidator = z.object({\n  principal: z.number(),\n  ratePct: z.number(),\n  paymentsPerYear: z.number(),\n  payment: z.number(),\n  firstPaymentDate: z.string(),\n  ownershipPct: z.number(),\n});\n\nexport type Loan = z.infer<typeof loanValidator>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\nimport { loanValidator } from \"./loan\";\n\nexport const mortgageValidator = z.object({\n  type: z.literal(\"mortgage\"),\n  loan: loanValidator.optional(),\n  data: z.array(accountDataValidator),\n});\n\nexport type Mortgage = z.infer<typeof mortgageValidator>;\n","import { z } from \"zod\";\nimport { accountValidator } from \"./account\";\nimport { mortgageValidator } from \"./mortgage\";\n\nexport const wealth = z.record(z.union([accountValidator, mortgageValidator]));\n\nexport type Wealth = z.infer<typeof wealth>;\n","import { z } from \"zod\";\nimport { accountDataValidator } from \"./account-data\";\n\nexport const projectedIncome = z.object({\n  timeSeries: z.object({\n    paycheck: z.array(accountDataValidator),\n    meritIncreasePct: z.array(accountDataValidator),\n    equityPct: z.array(accountDataValidator),\n    meritBonusPct: z.array(accountDataValidator),\n    meritBonus: z.array(accountDataValidator),\n    companyBonusPct: z.array(accountDataValidator),\n    companyBonus: z.array(accountDataValidator),\n    retirementBonus: z.array(accountDataValidator),\n  }),\n});\n\nexport type ProjectedIncome = z.infer<typeof projectedIncome>;\nexport type TimeSeries = keyof ProjectedIncome[\"timeSeries\"];\n","import { Store } from \"./store\";\n\nexport const getDefaultStore = (): Store => ({\n  version: 2,\n  projectedIncome: {\n    timeSeries: {\n      paycheck: [],\n      meritBonusPct: [],\n      companyBonusPct: [\n        {\n          date: \"2020-06-15T00:00:00.000-07:00\",\n          value: 0.182,\n          id: \"a52883a7-008b-4b5d-83f7-48bb72a90f27\",\n        },\n        {\n          date: \"2021-06-15T00:00:00.000-07:00\",\n          value: 0.254,\n          id: \"ec5a9913-d2ea-45cf-bbe4-4a28bc3a02eb\",\n        },\n        {\n          date: \"2022-06-15T00:00:00.000-07:00\",\n          value: 0.272,\n          id: \"45f44fc7-544a-4652-87fa-49d70eaa412d\",\n        },\n        {\n          date: \"2023-06-15T00:00:00.000-07:00\",\n          value: 0.168,\n          id: \"97af5146-6a4d-466d-8b9e-96552fc70639\",\n        },\n      ],\n      meritBonus: [],\n      companyBonus: [],\n      retirementBonus: [],\n      equityPct: [],\n      meritIncreasePct: [],\n    },\n  },\n  wealth: {},\n  projectedWealth: {\n    medicareSupplementalTaxThreshold: 200_000,\n    socialSecurityLimit: 168_600,\n    socialSecurityTaxRate: 0.062,\n    medicareSupplementalTaxRate: 0.009,\n    savingsPerMonth: 0,\n    retirementContributionPaycheck: 0,\n    bonusWitholdingsRate: 0,\n  },\n});\n","import { z } from \"zod\";\n\nexport const projectedWealth = z.object({\n  socialSecurityLimit: z.number(),\n  socialSecurityTaxRate: z.number(),\n  medicareSupplementalTaxThreshold: z.number(),\n  medicareSupplementalTaxRate: z.number(),\n  savingsPerMonth: z.number(),\n  retirementContributionPaycheck: z.number(),\n  bonusWitholdingsRate: z.number(),\n});\n\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\nexport type ProjectedWealthKeys = keyof ProjectedWealth;\n","import { z } from \"zod\";\n\nexport const projectedWealth = z.object({\n  socialSecurityLimit: z.number(),\n  socialSecurityTaxRate: z.number(),\n  medicareSupplementalTaxThreshold: z.number(),\n  medicareSupplementalTaxRate: z.number(),\n  savingsPerMonth: z.number(),\n  retirementContributionPaycheck: z.number(),\n});\n\nexport type ProjectedWealth = z.infer<typeof projectedWealth>;\nexport type ProjectedWealthKeys = keyof ProjectedWealth;\n","import { z } from \"zod\";\nimport { wealth } from \"../version-0/net-wealth\";\nimport { projectedIncome } from \"../version-0/projected-income\";\nimport { projectedWealth } from \"../version-0/projected-wealth\";\n\nexport const storeValidator = z.object({\n  version: z.literal(1),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { z } from \"zod\";\nimport { projectedIncome, wealth } from \"../version-1\";\nimport { projectedWealth } from \"./projected-wealth\";\n\nexport const storeValidator = z.object({\n  version: z.literal(2),\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { z } from \"zod\";\nimport { wealth } from \"./net-wealth\";\nimport { projectedIncome } from \"./projected-income\";\nimport { projectedWealth } from \"./projected-wealth\";\n\nexport const storeValidator = z.object({\n  wealth: wealth,\n  projectedIncome: projectedIncome,\n  projectedWealth: projectedWealth,\n});\n\nexport type Store = z.infer<typeof storeValidator>;\n","import { Store, storeValidator } from \"shared/models/store/current\";\nimport { storeValidator as storeV0Validator } from \"shared/models/store/version-0\";\nimport { Store as StoreV1, storeValidator as storeV1Validator } from \"shared/models/store/version-1\";\n\nexport const migration = (data: unknown) => {\n  if (data === null || data === undefined) {\n    throw new Error(\"parsed data is null or undefined\");\n  } else if (typeof data !== \"object\") {\n    throw new Error(\"Parsed data is not an object\");\n  }\n\n  if (!(\"version\" in data)) {\n    storeV0Validator.parse(data);\n    (data as StoreV1).version = 1;\n  }\n\n  if (\"version\" in data) {\n    if (data.version === 1) {\n      storeV1Validator.parse(data);\n      (data as Store).version = 2;\n      (data as Store).projectedWealth.bonusWitholdingsRate = 0;\n    }\n  }\n\n  return storeValidator.parse(data);\n};\n","import { Store as CreateStore } from \"@tanstack/store\";\nimport { ZodSchema } from \"zod\";\nimport { Store, getDefaultStore, storeValidator } from \"../models/store/current\";\nimport { migration } from \"./migrations\";\n\nconst createStore = <T extends object>(validator: ZodSchema, defaultValue: T) => {\n  const key = \"store\";\n  const invalidData = \"store-invalid\";\n  const localData = localStorage.getItem(key);\n  const data = localData ? JSON.parse(localData) : defaultValue;\n  const parse = validator.safeParse(data);\n\n  if (!parse.success) {\n    try {\n      migration(data);\n      localStorage.setItem(key, JSON.stringify(data));\n    } catch (err) {\n      console.log(\"error\", err);\n      console.log(\"invalid data\", data);\n      localStorage.setItem(invalidData, JSON.stringify(data));\n      localStorage.setItem(key, JSON.stringify(defaultValue));\n    }\n  }\n\n  const store = new CreateStore<T>(data);\n  store.subscribe(() => {\n    const current = localStorage.getItem(key);\n    current && localStorage.setItem(`${key}-previous`, current);\n    localStorage.setItem(key, JSON.stringify(store.state));\n  });\n\n  return store;\n};\n\nexport const store = createStore<Store>(storeValidator, getDefaultStore());\n","import { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { Account } from \"shared/models/store/current\";\nimport { v4 as uuid } from \"uuid\";\nimport { sortByDate } from \"../utility/sort-by-date\";\nimport { store } from \"./store\";\n\nexport const AddAccountEntry = (accountName: string, date: DateTime<true>, amount: number) => {\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      (next.wealth[accountName] as Account).data.push({\n        date: date.startOf(\"day\").toString(),\n        value: amount,\n        id: uuid(),\n      });\n      next.wealth[accountName].data.sort(sortByDate((x) => DateTime.fromISO(x.date), \"asc\"));\n    });\n  });\n};\n","import { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { TimeSeries } from \"shared/models/store/current\";\nimport { sortByDate } from \"shared/utility/sort-by-date\";\nimport { v4 as uuid } from \"uuid\";\nimport { store } from \"./store\";\n\nexport const addProjectedIncome = (date: DateTime, timeSeries: TimeSeries, value: number) => {\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      next.projectedIncome.timeSeries[timeSeries] = next.projectedIncome.timeSeries[timeSeries]\n        .concat({\n          date: date.startOf(\"day\").toString(),\n          value,\n          id: uuid(),\n        })\n        .sort(sortByDate((x) => DateTime.fromISO(x.date), \"asc\"));\n    });\n  });\n};\n","import { create } from \"mutative\";\nimport { store } from \"./store\";\n\nexport const removeAccount = (accountName: string) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      delete next.wealth[accountName];\n    });\n  });\n","import { create } from \"mutative\";\nimport { store } from \"./store\";\n\nexport const removeAccountEntry = (accountName: string, id: string) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      const idxToRemove = next.wealth[accountName].data.findIndex((x) => x.id === id);\n      next.wealth[accountName].data.splice(idxToRemove, 1);\n      return next;\n    });\n  });\n","import { create } from \"mutative\";\nimport { TimeSeries } from \"shared/models/store/current\";\nimport { store } from \".\";\n\nexport const removeProjectedIncome = (accountName: TimeSeries, id: string) => {\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      const idxToRemove = next.projectedIncome.timeSeries[accountName].findIndex((x) => x.id === id);\n      next.projectedIncome.timeSeries[accountName].splice(idxToRemove, 1);\n    });\n  });\n};\n","import { getDefaultStore } from \"shared/models/store/current\";\nimport { store } from \"./store\";\n\nexport const resetStore = () => store.setState(() => getDefaultStore());\n","import { create } from \"mutative\";\nimport { Loan, Mortgage } from \"shared/models/store/current\";\nimport { store } from \"./store\";\n\nexport const setLoan = (accountName: string, loan: Loan) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      if (next.wealth[accountName].type === \"mortgage\") {\n        (next.wealth[accountName] as Mortgage).loan = loan;\n      }\n    });\n  });\n","import { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { store } from \".\";\n\nexport const updateAccountDate = (accountName: string, id: string, date: DateTime) => {\n  store.setState((prev) => {\n    const next = create(prev, (next) => {\n      const account = next.wealth[accountName];\n      const idx = account?.data.findIndex((x) => x.id === id);\n      if (idx >= 0) {\n        account.data[idx].date = date.toISO()!;\n      }\n    });\n    return next;\n  });\n};\n","import { create } from \"mutative\";\nimport { store } from \"./store\";\n\nexport const updateAccountName = (currentAccountName: string, newAccountName: string) =>\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      next.wealth[newAccountName] = next.wealth[currentAccountName];\n      delete next.wealth[currentAccountName];\n    });\n  });\n","import { create } from \"mutative\";\nimport { store } from \".\";\n\nexport const updateAccountValue = (accountName: string, id: string, value: number) => {\n  store.setState((prev) => {\n    const next = create(prev, (next) => {\n      const account = next.wealth[accountName];\n      const idx = account?.data.findIndex((x) => x.id === id);\n      if (idx >= 0) {\n        account.data[idx].value = value;\n      }\n    });\n    return next;\n  });\n};\n","import { create } from \"mutative\";\nimport { TimeSeries } from \"shared/models/store/current\";\nimport { store } from \".\";\n\nexport const updateProjectedIncome = (timeSeries: TimeSeries, id: string, value: number) => {\n  store.setState((prev) => {\n    const next = create(prev, (next) => {\n      const account = next.projectedIncome.timeSeries[timeSeries];\n      const idx = account.findIndex((x) => x.id === id);\n      account[idx].value = value;\n    });\n    return next;\n  });\n};\n","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, MenuItem, Stack, TextField } from \"@mui/material\";\nimport { create } from \"mutative\";\nimport { ReactNode, forwardRef, useRef, useState } from \"react\";\nimport { store } from \"shared/store\";\n\ntype AssetType = \"account\" | \"mortgage\";\nexport const NewAccount = forwardRef<HTMLButtonElement, { children?: ReactNode }>((props, ref) => {\n  const [open, setOpen] = useState(false);\n  const nameRef = useRef<HTMLInputElement>(null);\n  const [error, setError] = useState(false);\n  const [accountType, setAccountType] = useState<AssetType>();\n\n  return (\n    <>\n      <Button\n        ref={ref}\n        variant=\"outlined\"\n        onClick={() => {\n          setOpen(true);\n          setError(false);\n          setAccountType(undefined);\n        }}\n        sx={{ marginLeft: \"auto\" }}\n      >\n        add account\n      </Button>\n\n      <Dialog open={open} onClose={() => setOpen(false)}>\n        <DialogTitle>Add New Account</DialogTitle>\n        <DialogContent>\n          <Stack spacing={2} margin={2}>\n            <TextField\n              select\n              color={error ? \"error\" : \"primary\"}\n              onChange={(value) => {\n                setError(false);\n                setAccountType(value.target.value as AssetType);\n              }}\n              label=\"Type\"\n            >\n              <MenuItem value=\"mortgage\">Mortgage</MenuItem>\n              <MenuItem value=\"account\">Generic Account</MenuItem>\n            </TextField>\n\n            <TextField\n              placeholder=\"Name\"\n              onChange={() => {\n                setError(false);\n              }}\n              error={error}\n              inputRef={nameRef}\n            />\n          </Stack>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            disabled={error}\n            onClick={() => {\n              store.setState((prev) => {\n                return create(prev, (next) => {\n                  if (!nameRef.current?.value || !accountType || prev.wealth[nameRef.current.value]) {\n                    setError(true);\n                    return;\n                  }\n\n                  next.wealth[nameRef.current.value] = {\n                    type: accountType,\n                    data: [],\n                  };\n\n                  setOpen(false);\n                });\n              });\n            }}\n          >\n            Add\n          </Button>\n        </DialogActions>\n      </Dialog>\n      {props?.children}\n    </>\n  );\n});\n","import { AgGridReact, AgGridReactProps } from \"ag-grid-react\";\n\nexport const AgGrid = (props: AgGridReactProps & { id: string }) => {\n  const { id, ...rest } = props;\n  return (\n    <div id={id} className=\"ag-theme-quartz-dark\" style={{ height: \"100%\" }}>\n      <AgGridReact {...rest} suppressMovableColumns />\n    </div>\n  );\n};\n","import { DateTime } from \"luxon\";\n\nexport const getLocalDateTime = () => DateTime.local();\n","export const shortDate = \"yyyy-MM-dd\";\n\nexport const monthDay = \"MMM dd\";\n","import { Button, Paper } from \"@mui/material\";\nimport { removeAccount } from \"shared/store\";\n\nexport const DeleteAccount = (props: { accountName: string }) => {\n  const { accountName } = props;\n\n  return (\n    <Paper elevation={3} sx={{ padding: 2, width: \"100%\" }}>\n      <Button\n        onClick={() => {\n          removeAccount(accountName);\n        }}\n        color=\"error\"\n      >\n        Delete Account\n      </Button>\n    </Paper>\n  );\n};\n","import { Button, Paper, Stack, TextField } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { updateAccountName } from \"shared/store/update-account-name\";\n\nexport const RenameAccount = (props: { accountName: string }) => {\n  const { accountName } = props;\n  const [nextAccountName, setNextAccountName] = useState<string>(accountName);\n\n  return (\n    <Paper elevation={3} sx={{ padding: 2 }}>\n      <Stack spacing={1}>\n        <TextField\n          label=\"Account Name\"\n          value={nextAccountName}\n          onChange={(event) => setNextAccountName(event.target.value)}\n          placeholder=\"\"\n        />\n        <Button\n          disabled={!nextAccountName}\n          onClick={() => {\n            updateAccountName(accountName, nextAccountName);\n          }}\n        >\n          Update Name\n        </Button>\n      </Stack>\n    </Paper>\n  );\n};\n","export const formatCashShort = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  notation: \"compact\",\n  maximumFractionDigits: 0,\n}).format;\n\nexport const formatCash = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  maximumFractionDigits: 0,\n}).format;\n","import { Tooltip } from \"@mui/material\";\nimport { useMemo } from \"react\";\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\n\ninterface CashProps {\n  value?: number;\n  fallback?: number;\n  disableTooltip?: boolean;\n  compact?: boolean;\n  tooltip?: string;\n  placement?:\n    | \"top\"\n    | \"right\"\n    | \"bottom\"\n    | \"left\"\n    | \"bottom-end\"\n    | \"bottom-start\"\n    | \"left-end\"\n    | \"left-start\"\n    | \"right-end\"\n    | \"right-start\"\n    | \"top-end\"\n    | \"top-start\"\n    | undefined;\n}\nexport const Cash = ({ value, fallback, disableTooltip, compact = true, tooltip, placement }: CashProps) => {\n  const formatted = useMemo(() => {\n    if (value === undefined) {\n      return fallback;\n    }\n    return compact ? formatCashShort(value) : formatCash(value);\n  }, [compact, fallback, value]);\n\n  return (\n    <Tooltip\n      placement={placement}\n      disableHoverListener={disableTooltip || !compact || !value}\n      title={[tooltip, formatCash(value!)].join(\" \")}\n    >\n      <span>{formatted}</span>\n    </Tooltip>\n  );\n};\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\nimport { Button } from \"@mui/material\";\nimport { ColDef } from \"ag-grid-community\";\nimport { CustomCellRendererProps } from \"ag-grid-react\";\nimport { DateTime } from \"luxon\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { AccountData } from \"shared/models/store/current\";\nimport { updateAccountDate, updateAccountValue } from \"shared/store\";\nimport { removeAccountEntry } from \"shared/store/remove-account-entry\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const createAccountColumnConfig = (accountName: string): ColDef<AccountData>[] => [\n  {\n    headerName: \"Date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\n    cellEditor: \"agDateCellEditor\",\n    editable: true,\n    valueSetter: (x) => {\n      const date = DateTime.fromJSDate(x.newValue);\n      if (date.isValid) {\n        updateAccountDate(accountName, x.data.id, date);\n      }\n      return date.isValid;\n    },\n  },\n  {\n    headerName: \"Value\",\n    valueGetter: (x) => x.data?.value,\n    valueSetter: (x) => {\n      updateAccountValue(accountName, x.data.id, +x.newValue);\n      return true;\n    },\n    cellRenderer: (x: CustomCellRendererProps<AccountData>) => <Cash value={x.value} placement=\"left\" />,\n    editable: true,\n    cellEditor: \"agNumberCellEditor\",\n    type: \"numericColumn\",\n  },\n  {\n    cellStyle: () => ({ display: \"inline-flex\", padding: \"0px\" }),\n    sortable: false,\n    headerName: \"\",\n    width: 80,\n    colId: \"actions\",\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\n      return (\n        <Button\n          onClick={() => {\n            props.data && removeAccountEntry(accountName, props.data.id);\n          }}\n          color=\"error\"\n          fullWidth\n        >\n          <DeleteForeverIcon />\n        </Button>\n      );\n    },\n  },\n];\n","import { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { Account } from \"shared/models/store/current\";\n\nexport const useMissingYears = (account: Account) => {\n  return useMemo(() => {\n    const years = Object.entries(Object.groupBy(account.data, (x) => DateTime.fromISO(x.date).year))\n      .map(\n        ([year, entries]) =>\n          [\n            +year,\n            !!entries?.find((x) => {\n              const date = DateTime.fromISO(x.date);\n              const janFirst = DateTime.fromObject({\n                day: 1,\n                month: 1,\n                year: +year,\n              });\n              return date.diff(janFirst, [\"days\", \"hours\"]).days == 0;\n            }),\n          ] as [number, boolean]\n      )\n      .sort(([a], [b]) => {\n        return a - b;\n      });\n\n    const lookup = Object.fromEntries(years);\n    const missing = [];\n    for (let i = years[0]?.[0] ?? 0; i <= years[years.length - 1]?.[0]; i++) {\n      if (!lookup[i]) {\n        missing.push(i);\n      }\n    }\n    return missing;\n  }, [account.data]);\n};\n","import { Alert, Button, InputAdornment, Paper, Stack, TextField } from \"@mui/material\";\nimport Grid from \"@mui/system/Unstable_Grid\";\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo, useRef, useState } from \"react\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { Account } from \"shared/models/store/current\";\nimport { AddAccountEntry, store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { DeleteAccount } from \"../components/delete-account\";\nimport { RenameAccount } from \"../components/update-account\";\nimport { createAccountColumnConfig } from \"./column-config\";\nimport { useMissingYears } from \"./hooks/useMissingYears\";\n\nexport const AccountTab = (props: { accountName: string }) => {\n  const { accountName } = props;\n  const account = useStore(store, (state) => state.wealth[accountName]) as Account;\n  const [date, setDate] = useState(getLocalDateTime());\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const missingYears = useMissingYears(account);\n  const hasSameDate = useMemo(() => {\n    return !!account?.data?.find((x) => date.hasSame(DateTime.fromISO(x.date), \"day\"));\n  }, [account?.data, date]);\n\n  const onAddEntry = () => {\n    inputRef.current && AddAccountEntry(accountName, date, +inputRef.current?.value);\n  };\n\n  const accountColumnConfig = useMemo(() => {\n    return createAccountColumnConfig(accountName);\n  }, [accountName]);\n\n  return (\n    <Grid container height=\"100%\" width={\"100%\"} padding={1} spacing={2}>\n      <Grid lg={3} xl={3}>\n        <AgGrid\n          key={accountName}\n          reactiveCustomComponents\n          rowData={account?.data ?? []}\n          columnDefs={accountColumnConfig}\n          id={account + \"-history\"}\n          autoSizeStrategy={{ type: \"fitGridWidth\" }}\n          stopEditingWhenCellsLoseFocus\n        />\n      </Grid>\n      <Grid xl={9} lg={8}>\n        <div>\n          <Grid container spacing={2}>\n            {missingYears.length > 0 && (\n              <Grid xs={12}>\n                <Paper elevation={3}>\n                  <Alert severity=\"warning\">Ensure an entry for Jan 1st for each year {missingYears.join(\", \")}</Alert>\n                </Paper>\n              </Grid>\n            )}\n            <Grid xl={2} lg={3}>\n              <Paper elevation={3} sx={{ padding: 2 }}>\n                <Stack spacing={1}>\n                  <DatePicker\n                    format={shortDate}\n                    sx={{ color: \"white\" }}\n                    label=\"Date\"\n                    defaultValue={date}\n                    onChange={(value) => value && setDate(value)}\n                  />\n                  <TextField\n                    label=\"amount\"\n                    type=\"number\"\n                    defaultValue={0}\n                    inputRef={inputRef}\n                    InputProps={{\n                      startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n                    }}\n                    placeholder=\"0\"\n                  />\n                  <Button disabled={!date || hasSameDate} onClick={onAddEntry}>\n                    Add Entry\n                  </Button>\n                </Stack>\n              </Paper>\n            </Grid>\n            <Grid xl={8} lg={0}></Grid>\n            <Grid xl={2} lg={4}>\n              <Stack spacing={2}>\n                <DeleteAccount accountName={accountName} />\n                <RenameAccount key={accountName} accountName={accountName} />\n              </Stack>\n            </Grid>\n          </Grid>\n        </div>\n      </Grid>\n    </Grid>\n  );\n};\n","import { DateTime } from \"luxon\";\nimport { AccountData } from \"shared/models/store/current\";\n\nexport const findNearestOnOrBefore = (date: DateTime, data: AccountData[]) => {\n  return data.find((x, idx, array) => {\n    if (idx == 0 && DateTime.fromISO(x.date).startOf(\"day\") >= date) {\n      return true;\n    }\n\n    if (\n      idx < array.length - 1 &&\n      DateTime.fromISO(x.date).startOf(\"day\") <= date &&\n      DateTime.fromISO(data[idx + 1].date).startOf(\"day\") > date\n    ) {\n      return true;\n    }\n\n    if (idx === array.length - 1) {\n      return true;\n    }\n  });\n};\n\nexport const findNearestIdxOnOrBefore = <T>(date: DateTime, data: T[], selector: (data: T) => DateTime) => {\n  return data.findIndex((x, idx, array) => {\n    if (idx == 0 && selector(x) >= date) {\n      return true;\n    }\n\n    if (idx < array.length - 1 && selector(x) <= date && selector(data[idx + 1]) > date) {\n      return true;\n    }\n\n    if (idx === array.length - 1) {\n      return true;\n    }\n  });\n};\n","import { DateTime } from \"luxon\";\nimport { Account, Mortgage } from \"shared/models/store/current\";\n\nexport const getGraphDates = (accounts: (Account | Mortgage)[]) => {\n  return [\n    ...new Set(\n      accounts.flatMap((x) => {\n        return x.data.map((x) => DateTime.fromISO(x.date).startOf(\"day\").toISO());\n      })\n    ),\n  ]\n    .map((x) => DateTime.fromISO(x!))\n    .sort((a, b) => a.toMillis() - b.toMillis()) as DateTime<true>[];\n};\n","import { DateTime } from \"luxon\";\nimport { Loan } from \"shared/models/store/current\";\n\nexport const calcLoanBalance = (date: DateTime, loan: Loan) => {\n  const { firstPaymentDate, paymentsPerYear, principal: principal, ratePct: rate, payment: monthlyPayment } = loan;\n  const annualizedRate = rate / paymentsPerYear;\n  const periods = date.diff(DateTime.fromISO(firstPaymentDate), \"months\").months;\n  const totalRate = (1 + annualizedRate) ** periods;\n  const balance = principal * totalRate - (monthlyPayment / annualizedRate) * (totalRate - 1);\n\n  return balance;\n};\n\nexport const calcEquity = (\n  ownershipPct: number,\n  houseValue: number | undefined,\n  loanBalance: number,\n  principal: number\n) => {\n  return houseValue ? houseValue * ownershipPct - loanBalance : principal - loanBalance;\n};\n","import { Button, Paper, TextField } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { DateTime } from \"luxon\";\nimport { useRef } from \"react\";\nimport { AddAccountEntry } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\n\nexport const AddEntry = (props: { accountName: string }) => {\n  const { accountName } = props;\n  const ref = useRef<{ date?: DateTime; value?: number }>({\n    date: getLocalDateTime(),\n    value: 0,\n  });\n  const onAddEntry = () => {\n    const { date, value } = ref.current;\n    if (!date || !value) {\n      return;\n    }\n    AddAccountEntry(accountName, date, value);\n  };\n  return (\n    <Paper elevation={3} sx={{ padding: 2 }}>\n      <Stack spacing={1}>\n        <DatePicker\n          defaultValue={getLocalDateTime()}\n          onChange={(date: DateTime | null) => {\n            if (date) {\n              ref.current.date = date;\n            }\n          }}\n        />\n        <TextField\n          label=\"Home value\"\n          type=\"numeric\"\n          onChange={(event) => {\n            ref.current.value = +event.target.value;\n          }}\n        />\n        <Button onClick={onAddEntry}>Add Home Value</Button>\n      </Stack>\n    </Paper>\n  );\n};\n","import { Button, Paper, Stack, TextField } from \"@mui/material\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useRef, useState } from \"react\";\nimport { Loan } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\nimport { setLoan } from \"shared/store/set-loan\";\nimport { ZodIssue, z } from \"zod\";\n\nconst convertPct = (value: number) => {\n  return value > 1 ? value / 100 : value;\n};\n\nconst validator: z.ZodType<Loan> = z.object({\n  principal: z.number().min(0),\n  ratePct: z.number().min(0),\n  paymentsPerYear: z.number().min(0),\n  payment: z.number().min(0),\n  firstPaymentDate: z.string().datetime({ offset: true }),\n  ownershipPct: z.number().min(0),\n});\n\nexport const AddLoan = (props: { accountName: string }) => {\n  const { accountName } = props;\n\n  const loan = useStore(store, (x) => {\n    const account = x.wealth[accountName];\n    if (\"loan\" in account) {\n      return account.loan;\n    }\n  });\n\n  const ref = useRef<Partial<Loan>>(loan ?? {});\n  const [error, setError] = useState<Partial<Record<keyof Loan, ZodIssue>>>({});\n\n  return (\n    <Paper elevation={3} sx={{ padding: 2 }}>\n      <Stack spacing={1}>\n        <DatePicker\n          defaultValue={ref.current?.firstPaymentDate ? DateTime.fromISO(ref.current.firstPaymentDate) : null}\n          label=\"First Payment\"\n          slotProps={{\n            textField: {\n              error: !!error.firstPaymentDate,\n            },\n          }}\n          onChange={(value: DateTime | null) => {\n            if (value) {\n              ref.current.firstPaymentDate = value.startOf(\"day\").toISO()!;\n            }\n          }}\n        />\n        <TextField\n          error={!!error.principal}\n          defaultValue={loan?.principal}\n          onChange={(event) => {\n            ref.current.principal = +event.target.value;\n          }}\n          variant=\"outlined\"\n          label=\"Principal\"\n          type=\"number\"\n        />\n        <TextField\n          error={!!error.ratePct}\n          defaultValue={loan?.ratePct}\n          onChange={(event) => {\n            ref.current.ratePct = convertPct(+event.target.value);\n          }}\n          variant=\"outlined\"\n          label=\"Rate\"\n          type=\"number\"\n        />\n        <TextField\n          error={!!error.paymentsPerYear}\n          defaultValue={loan?.paymentsPerYear}\n          onChange={(event) => {\n            ref.current.paymentsPerYear = +event.target.value;\n          }}\n          variant=\"outlined\"\n          label=\"Payments Per Year\"\n          type=\"number\"\n        />\n        <TextField\n          defaultValue={loan?.payment}\n          error={!!error.payment}\n          onChange={(event) => {\n            ref.current.payment = +event.target.value;\n          }}\n          variant=\"outlined\"\n          label=\"Payment\"\n          type=\"number\"\n        />\n        <TextField\n          defaultValue={loan?.ownershipPct}\n          error={!!error.ownershipPct}\n          onChange={(event) => {\n            ref.current.ownershipPct = convertPct(+event.target.value);\n          }}\n          variant=\"outlined\"\n          label=\"Ownership (%)\"\n          type=\"number\"\n        />\n        <Button\n          onClick={() => {\n            const parsed = validator.safeParse(ref.current);\n            if (parsed.success) {\n              setError({});\n              setLoan(accountName, parsed.data);\n            } else {\n              const issues = Object.groupBy(parsed.error.issues, (x) => x.path.join(\"\"));\n              setError(issues);\n            }\n          }}\n        >\n          Set Loan\n        </Button>\n      </Stack>\n    </Paper>\n  );\n};\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\nimport { Button } from \"@mui/material\";\nimport { ColDef } from \"ag-grid-community\";\nimport { CustomCellRendererProps } from \"ag-grid-react\";\nimport { DateTime } from \"luxon\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { AccountData } from \"shared/models/store/current\";\nimport { removeAccountEntry } from \"shared/store\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const createAccountColumnConfig = (accountName: string): ColDef<AccountData>[] => [\n  {\n    headerName: \"Date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\n  },\n  {\n    headerName: \"Home Value\",\n    cellRenderer: (x: CustomCellRendererProps<AccountData>) => <Cash value={x.value} placement=\"left\" />,\n    valueGetter: (x) => x.data?.value,\n    type: \"numericColumn\",\n  },\n  {\n    cellStyle: () => ({ display: \"inline-flex\", padding: \"0px\" }),\n    headerName: \"\",\n    width: 80,\n    sortable: false,\n    colId: \"actions\",\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\n      return (\n        <Button\n          onClick={() => {\n            props.data && removeAccountEntry(accountName, props.data?.id);\n          }}\n          color=\"error\"\n          fullWidth\n        >\n          <DeleteForeverIcon />\n        </Button>\n      );\n    },\n  },\n];\n\ntype House = {\n  date: DateTime;\n  balance: number;\n  equity: number;\n};\n\nexport const mortgageColumnConfig: ColDef<House>[] = [\n  {\n    headerName: \"Date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data?.date,\n  },\n  {\n    headerName: \"Loan Balance\",\n    valueGetter: (x) => x.data?.balance.toFixed(2),\n    cellRenderer: (x: CustomCellRendererProps<House>) => <Cash value={x.value} placement=\"left\" />,\n    type: \"numericColumn\",\n  },\n  {\n    headerName: \"Equity\",\n    valueGetter: (x) => x.data?.equity.toFixed(2),\n    cellRenderer: (x: CustomCellRendererProps<House>) => <Cash value={x.value} placement=\"left\" />,\n    type: \"numericColumn\",\n  },\n];\n","import { Stack } from \"@mui/system\";\nimport Grid from \"@mui/system/Unstable_Grid\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { useMemo } from \"react\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { Mortgage } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\n\nimport { findNearestOnOrBefore } from \"shared/utility/find-nearest-on-or-before\";\nimport { getGraphDates } from \"shared/utility/get-graph-dates\";\nimport { calcEquity, calcLoanBalance } from \"shared/utility/mortgage-calc\";\nimport { DeleteAccount } from \"../components/delete-account\";\nimport { RenameAccount } from \"../components/update-account\";\nimport { AddEntry } from \"./add-entry\";\nimport { AddLoan } from \"./add-loan\";\nimport { createAccountColumnConfig, mortgageColumnConfig } from \"./column-config\";\n\nexport const MortgageTab = (props: { accountName: string }) => {\n  const { accountName } = props;\n\n  const account = useStore(store, (state) => state.wealth[accountName]) as Mortgage;\n\n  const allAccounts = useStore(store, (x) => x.wealth);\n\n  const accountColumnConfig = useMemo(() => {\n    return createAccountColumnConfig(accountName);\n  }, [accountName]);\n\n  const mortgageData = useMemo(() => {\n    if (!account?.loan) {\n      return [];\n    }\n\n    return getGraphDates(Object.values(allAccounts)).map((date) => {\n      const loanBalance = calcLoanBalance(date, account.loan!);\n      return {\n        date,\n        balance: loanBalance,\n        equity: calcEquity(\n          account.loan!.ownershipPct,\n          findNearestOnOrBefore(date, account.data)?.value,\n          loanBalance,\n          account.loan!.principal\n        ),\n      };\n    });\n  }, [account, allAccounts]);\n\n  return (\n    <Grid container height=\"100%\" width={\"100%\"} padding={1} spacing={2}>\n      <Grid lg={3}>\n        <AgGrid\n          reactiveCustomComponents\n          rowData={account?.data ?? []}\n          columnDefs={accountColumnConfig}\n          id={account + \"-history\"}\n          autoSizeStrategy={{ type: \"fitGridWidth\" }}\n        />\n      </Grid>\n      <Grid lg={3}>\n        <AgGrid\n          rowData={mortgageData}\n          columnDefs={mortgageColumnConfig}\n          id={account + \"-history\"}\n          autoSizeStrategy={{ type: \"fitGridWidth\" }}\n        />\n      </Grid>\n      <Grid lg={6}>\n        <div>\n          <Grid container spacing={2}>\n            <Grid xl={3}>\n              <AddLoan accountName={accountName} />\n            </Grid>\n            <Grid xl={3}>\n              <AddEntry accountName={accountName} />\n            </Grid>\n            <Grid xl={0}></Grid>\n            <Grid xl={3}>\n              <Stack spacing={2}>\n                <DeleteAccount accountName={accountName} />\n                <RenameAccount key={accountName} accountName={accountName} />\n              </Stack>\n            </Grid>\n          </Grid>\n        </div>\n      </Grid>\n    </Grid>\n  );\n};\n","import { Box, Tab, Tabs } from \"@mui/material\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { useEffect, useState } from \"react\";\nimport { store } from \"shared/store\";\nimport { NewAccount } from \"../new-account\";\nimport { AccountTab } from \"../tab-types/account/account\";\nimport { MortgageTab } from \"../tab-types/mortgage\";\n\nexport const AccountTabs = () => {\n  const accounts = useStore(store, (x) => x.wealth);\n  const firstAccount = Object.keys(accounts)?.[0];\n  const [account, setAccount] = useState<string>(firstAccount);\n\n  useEffect(() => {\n    if (!accounts[account]) {\n      setAccount(Object.keys(accounts)?.[0] ?? \"\");\n    }\n  }, [account, accounts]);\n\n  return (\n    <Box display=\"flex\" flexDirection={\"column\"} width=\"100%\" height=\"100%\">\n      <Box display={\"flex\"} flex={\"0 1 auto\"}>\n        {Object.keys(accounts).length > 0 && (\n          <Tabs\n            value={account}\n            onChange={(_, value) => {\n              setAccount(value as string);\n            }}\n          >\n            {Object.keys(accounts).map((account) => {\n              return <Tab key={account} value={account} label={account} />;\n            })}\n          </Tabs>\n        )}\n        <Tab component={NewAccount} />\n      </Box>\n      <Box flex={\"1 1 auto\"}>\n        {accounts[account]?.type === \"account\" && <AccountTab accountName={account} />}\n        {accounts[account]?.type === \"mortgage\" && <MortgageTab accountName={account} />}\n      </Box>\n    </Box>\n  );\n};\n","import { DateTime } from \"luxon\";\nimport { Account, Mortgage } from \"shared/models/store/current\";\nimport { findNearestOnOrBefore } from \"./find-nearest-on-or-before\";\nimport { calcEquity, calcLoanBalance } from \"./mortgage-calc\";\n\nconst getMortgageValue = (date: DateTime, mortgage: Mortgage) => {\n  if (!mortgage.loan) {\n    return 0;\n  }\n  const entry = findNearestOnOrBefore(date, mortgage.data);\n  if (entry?.date && mortgage.data[0] === entry && DateTime.fromISO(entry.date).startOf(\"day\") > date) {\n    return 0;\n  }\n  const { ownershipPct, principal } = mortgage.loan;\n  const balance = calcLoanBalance(date, mortgage.loan);\n  return calcEquity(ownershipPct, entry?.value, balance, principal);\n};\n\nconst getAccountValue = (date: DateTime, account: Account) => {\n  const entry = findNearestOnOrBefore(date, account.data);\n  if (entry?.date && account.data[0] === entry && DateTime.fromISO(entry.date).startOf(\"day\") > date) {\n    return 0;\n  }\n  return entry?.value;\n};\n\nexport const getGraphValue = (date: DateTime, account: Account | Mortgage) => {\n  switch (account.type) {\n    case \"account\":\n      return getAccountValue(date, account);\n    case \"mortgage\":\n      return getMortgageValue(date, account);\n  }\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { getGraphDates } from \"shared/utility/get-graph-dates\";\nimport { getGraphValue } from \"shared/utility/get-graph-value\";\n\nexport const useGraphData = () => {\n  const wealth = useStore(store, (x) => x.wealth);\n\n  return useMemo(() => {\n    const dates = getGraphDates(Object.values(wealth));\n    const accounts = Object.entries(wealth);\n    const graphData = dates.map((date) => {\n      return accounts.reduce(\n        (acc, [accountName, account]) => {\n          const value = getGraphValue(date, account);\n\n          if (value) {\n            acc[accountName] = value;\n            acc[\"total\"] = (acc[\"total\"] as number) + value;\n          } else {\n            acc[accountName] = null;\n          }\n\n          acc[\"date\"] = date.toJSDate();\n          return acc;\n        },\n        { total: 0 } as Record<string, number | Date | null>\n      );\n    });\n\n    graphData.forEach((x, idx, arr) => {\n      if (idx < arr.length - 1) {\n        Object.keys(x).forEach((key) => {\n          if (x[key] === null && arr[idx + 1][key] !== null) {\n            x[key] = 0;\n          }\n        });\n      }\n    });\n\n    const firstNonZero = graphData.findIndex((x) => (x[\"total\"] as number) > 0);\n    return graphData.slice(firstNonZero);\n  }, [wealth]);\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { AgAreaSeriesOptions, AgCartesianChartOptions, AgLineSeriesOptions } from \"ag-charts-community\";\nimport { AgChartsReact } from \"ag-charts-react\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { formatCashShort } from \"shared/utility/format-cash\";\nimport { useGraphData } from \"./use-graph-data\";\n\nexport const WealthChart = () => {\n  const wealth = useStore(store, (x) => x.wealth);\n  const data = useGraphData();\n\n  const series = useMemo(() => {\n    return [\n      ...Object.keys(wealth).map((x) => {\n        return {\n          stacked: true,\n          type: \"area\",\n          xKey: \"date\",\n          yKey: x,\n          yName: x,\n          tooltip: {\n            renderer: ({ datum, yKey, xKey }) => ({\n              content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCashShort(datum[yKey])}`,\n            }),\n          },\n        } as AgAreaSeriesOptions;\n      }),\n      {\n        type: \"line\",\n        xKey: \"date\",\n        yKey: \"total\",\n        yName: \"Total\",\n        tooltip: {\n          renderer: ({ datum, yKey, xKey }) => ({\n            content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCashShort(datum[yKey])}`,\n          }),\n        },\n      } as AgLineSeriesOptions,\n    ];\n  }, [wealth]);\n\n  const options: AgCartesianChartOptions = useMemo(\n    () => ({\n      theme: \"ag-default-dark\",\n      title: {\n        text: `Total Wealth ${formatCashShort((data[data.length - 1]?.total ?? 0) as number)}`,\n      },\n      data,\n      axes: [\n        {\n          type: \"time\",\n          position: \"bottom\",\n          label: {\n            format: \"%Y\",\n          },\n        },\n        {\n          type: \"number\",\n          position: \"left\",\n        },\n      ],\n      series,\n    }),\n    [data, series]\n  );\n  return <AgChartsReact options={options} />;\n};\n","import Grid from \"@mui/system/Unstable_Grid\";\nimport { AccountTabs } from \"./components/account-tabs\";\nimport { WealthChart } from \"./components/wealth-chart\";\n\nexport const NetWealth = () => {\n  return (\n    <Grid container height={\"100%\"} width=\"100%\" spacing={1}>\n      <Grid xs={12} height=\"50%\">\n        <WealthChart />\n      </Grid>\n      <Grid xs={12} height=\"50%\">\n        <AccountTabs />\n      </Grid>\n    </Grid>\n  );\n};\n","import { Box, Divider, Stack, Typography } from \"@mui/material\";\nimport { ReactNode } from \"react\";\n\nexport const Card = (props: { title: ReactNode; children?: ReactNode }) => {\n  const { title, children } = props;\n\n  return (\n    <Box\n      sx={{\n        border: \"1px solid rgba(255,255,255,0.1)\",\n        borderRadius: 2,\n        minWidth: 480,\n      }}\n    >\n      <Typography sx={{ paddingBottom: 1, paddingLeft: 2, paddingTop: 1, display: \"flex\" }} variant=\"h5\">\n        {title}\n      </Typography>\n\n      {children && (\n        <>\n          <Divider />\n          <Stack padding={1} direction={\"row\"} spacing={0.5} width={\"max-content\"} minHeight={80}>\n            {children}\n          </Stack>\n        </>\n      )}\n    </Box>\n  );\n};\n","import { Box } from \"@mui/material\";\nimport { ReactNode } from \"react\";\n\ninterface CellProps {\n  children?: ReactNode;\n  secondaryValue?: ReactNode;\n  tertiaryValue?: ReactNode;\n  title: ReactNode;\n  className?: string;\n}\n\nexport const Value = (props: CellProps) => {\n  const { children, secondaryValue, tertiaryValue, title, className } = props;\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        minWidth: 106,\n        height: 64,\n        padding: \"0px 8px\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"flex-start\",\n        gap: 0.5,\n        flexShrink: 0,\n      }}\n      className={className}\n    >\n      <Box display={\"flex\"} alignItems={\"center\"} gap={0.5}>\n        <Box fontSize={18} fontWeight={700} lineHeight={\"20px\"}>\n          {children ? children : \"?\"}\n        </Box>\n        {!!(secondaryValue ?? tertiaryValue) && (\n          <Box\n            alignSelf={\"flex-end\"}\n            fontSize={12}\n            fontWeight={500}\n            lineHeight={\"16px\"}\n            textTransform={\"uppercase\"}\n            color={\"#888\"}\n          >\n            {secondaryValue ?? tertiaryValue}\n          </Box>\n        )}\n      </Box>\n      <Box fontSize={12} fontWeight={500} lineHeight={\"16px\"} textTransform={\"uppercase\"}>\n        {title}\n      </Box>\n    </Box>\n  );\n};\n","import { Box } from \"@mui/system\";\nimport { useMemo } from \"react\";\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\nimport { Cash } from \"./cash\";\n\ninterface CashProps {\n  min?: number;\n  max?: number;\n  fallback?: number;\n  disableTooltip?: boolean;\n  compact?: boolean;\n  tooltip?: string;\n\n  placement?:\n    | \"top\"\n    | \"right\"\n    | \"bottom\"\n    | \"left\"\n    | \"bottom-end\"\n    | \"bottom-start\"\n    | \"left-end\"\n    | \"left-start\"\n    | \"right-end\"\n    | \"right-start\"\n    | \"top-end\"\n    | \"top-start\"\n    | undefined;\n}\nexport const CashRange = ({ min, max, fallback, disableTooltip, compact = true }: CashProps) => {\n  const showRange = useMemo(() => {\n    const minFormatted = compact ? formatCashShort(min ?? 0) : formatCash(min ?? 0);\n    const maxFormatted = compact ? formatCashShort(max ?? 0) : formatCash(max ?? 0);\n    return minFormatted !== maxFormatted;\n  }, [compact, max, min]);\n\n  return (\n    <Box>\n      {!showRange && (\n        <Cash\n          fallback={fallback}\n          value={max}\n          tooltip={min != max ? `${formatCash(min ?? 0)} - ` : undefined}\n          disableTooltip={disableTooltip}\n          compact={compact}\n        />\n      )}\n      {showRange && (\n        <>\n          <Cash value={min} fallback={fallback} disableTooltip={disableTooltip} compact={compact} />\n          <span> - </span>\n          <Cash value={max} fallback={fallback} disableTooltip={disableTooltip} compact={compact} />\n        </>\n      )}\n    </Box>\n  );\n};\n","export const formatPercent = new Intl.NumberFormat(\"en-us\", {\n  style: \"percent\",\n  maximumFractionDigits: 1,\n}).format;\n","import { Box } from \"@mui/system\";\nimport { ReactNode } from \"react\";\nimport { formatPercent } from \"shared/utility/format-percent\";\n\ninterface PercentProps {\n  value?: number;\n  probability?: number;\n  fallback?: ReactNode;\n}\n\nconst getColor = (probability?: number) => {\n  if (!probability) {\n    return \"inherit\";\n  }\n  if (probability >= 0.5) {\n    return \"green\";\n  }\n  if (probability >= 0.25) {\n    return \"yellow\";\n  }\n  return \"red\";\n};\n\nexport const Percent = ({ value, probability, fallback }: PercentProps) => {\n  return <Box color={getColor(probability)}>{value ? formatPercent(value) : fallback}</Box>;\n};\n","import { Box } from \"@mui/system\";\nimport { Percent } from \"./percent\";\n\ninterface PercentProps {\n  min?: number;\n  max?: number;\n  fallback?: number;\n}\n\nexport const PercentRange = ({ min, max, fallback }: PercentProps) => {\n  return (\n    <Box>\n      {(max ?? 0) / (min ?? 1) <= 1.005 && <Percent fallback={fallback} value={max} />}\n      {(max ?? 0) / (min ?? 1) > 1.005 && (\n        <>\n          <Percent value={min} fallback={fallback} />\n          <span> - </span>\n          <Percent value={max} fallback={fallback} />\n        </>\n      )}\n    </Box>\n  );\n};\n","import { Box } from \"@mui/material\";\nimport { Value } from \"capabilities/projected-income/components/value\";\nimport { Cluster } from \"capabilities/projected-income/hooks/use-gradient\";\nimport { DateTime } from \"luxon\";\nimport { CashRange } from \"shared/components/formatters/cash-range\";\nimport { Percent } from \"shared/components/formatters/percent\";\nimport { PercentRange } from \"shared/components/formatters/percent-range\";\n\ninterface ClusterValueProps extends Cluster {\n  compact?: boolean;\n}\n\nexport const ClusterValue = (props: ClusterValueProps) => {\n  const { min, max, probability, title, compact } = props;\n  return (\n    <Value\n      title={\n        <Box display={\"flex\"} gap={1}>\n          <span>{title}</span>\n          {probability < 1 && <Percent probability={probability} value={probability} />}\n        </Box>\n      }\n    >\n      {min < 1 && min > 0 && <PercentRange min={min} max={max} />}\n      {min > 1 && <CashRange compact={compact} min={min} max={max} />}\n      {min === 0 && 0}\n    </Value>\n  );\n};\n\nexport const ClusterValues = (props: { clusters?: Cluster[]; eventDate?: DateTime; compact?: boolean }) => {\n  const { clusters, eventDate, compact = true } = props;\n  return clusters?.map((x, i, arr) => {\n    const title = arr.length === 1 && (eventDate?.diffNow().toMillis() ?? -1) > 0 ? \"Expected\" : x.title;\n    return <ClusterValue {...x} title={title} compact={compact} key={i} />;\n  });\n};\n","import { Box, Tooltip } from \"@mui/material\";\nimport { DateTime } from \"luxon\";\nimport { ReactNode, useMemo } from \"react\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\n\ninterface DurationProps {\n  dateTime?: DateTime;\n  children?: ReactNode;\n  variant?: \"countdown\" | \"date\";\n  dateFormat?: string;\n}\nexport const CountDown = (props: DurationProps) => {\n  const { dateTime, children, variant = \"countdown\", dateFormat = shortDate } = props;\n\n  const countDownStr = useMemo(() => {\n    if (!dateTime) {\n      return \"??\";\n    }\n    if (variant === \"countdown\") {\n      const diff = dateTime?.diff(getLocalDateTime(), [\"years\", \"months\", \"days\", \"hours\"]);\n      const format = `${diff.years > 0 ? \"y 'year' \" : \"\"}${diff.months > 0 ? \"M 'months' \" : \"\"}${\n        diff.days > 0 && diff.months == 0 ? \"d 'days'\" : \"\"\n      }${diff.hours > 0 && diff.days == 0 ? \"h 'hours'\" : \"\"}`;\n\n      return diff?.toFormat(format);\n    }\n\n    return dateTime?.toFormat(dateFormat);\n  }, [dateFormat, dateTime, variant]);\n\n  const tooltipStr = useMemo(() => {\n    if (variant === \"countdown\") {\n      return dateTime?.toFormat(dateFormat);\n    }\n\n    return dateTime?.diffNow([\"months\", \"days\", \"hours\"]).toFormat(\"d 'days'\");\n  }, [dateFormat, dateTime, variant]);\n\n  const countDownColor = useMemo(() => {\n    if (!dateTime) {\n      return \"white\";\n    }\n\n    const days = dateTime.diffNow(\"days\").days;\n    if (days < 30) {\n      return \"green\";\n    } else if (days < 60) {\n      return \"yellow\";\n    }\n\n    return \"red\";\n  }, [dateTime]);\n\n  return dateTime && dateTime > getLocalDateTime() ? (\n    <Tooltip title={tooltipStr}>\n      <Box color={countDownColor}>{countDownStr}</Box>\n    </Tooltip>\n  ) : (\n    children\n  );\n};\n","import { DateTime } from \"luxon\";\nimport { AccountData } from \"shared/models/store/current\";\n\nexport function findSameYear(year: number, data: AccountData[]): AccountData | undefined;\nexport function findSameYear(date: DateTime, data: AccountData[]): AccountData | undefined;\nexport function findSameYear(date: DateTime | number, data: AccountData[]): AccountData | undefined {\n  const year = typeof date === \"number\" ? date : date.year;\n  return data.find((x) => {\n    return DateTime.fromISO(x.date).year === year;\n  });\n}\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { AccountData } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\nimport { findSameYear } from \"shared/utility/find-same-year\";\n\nconst useRealDate = (year: number | undefined, data: AccountData[]) => {\n  return useMemo(() => {\n    if (!year) {\n      return undefined;\n    }\n    const meritBonus = findSameYear(year, data);\n    if (!meritBonus) {\n      return undefined;\n    }\n\n    return DateTime.fromISO(meritBonus.date);\n  }, [data, year]);\n};\n\nexport const useDates = (year?: number) => {\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\n  const meritBonusDate = useRealDate(year, timeSeries.meritBonus);\n  const companyBonusDate = useRealDate(year, timeSeries.companyBonus);\n\n  return useMemo(() => {\n    return {\n      meritIncrease: DateTime.fromObject({ month: 4, day: 1, year }),\n      meritBonus: meritBonusDate ?? DateTime.fromObject({ month: 4, day: 15, year }),\n      companyBonus: companyBonusDate ?? DateTime.fromObject({ month: 6, day: 15, year }),\n      retirementBonus: DateTime.fromObject({ month: 7, day: 15, year }),\n    };\n  }, [companyBonusDate, meritBonusDate, year]);\n};\n\nexport const useDateRanges = (year: number) => {\n  return useMemo(\n    () => ({\n      base: {\n        start: DateTime.fromObject({ month: 1, day: 1, year }),\n        end: DateTime.fromObject({ month: 12, day: 31, year }).endOf(\"day\"),\n      },\n      meritBonus: {\n        start: DateTime.fromObject({ month: 1, day: 1, year: year - 1 }),\n        end: DateTime.fromObject({ month: 12, day: 31, year: year - 1 }).endOf(\"day\"),\n      },\n      companyBonus: {\n        start: DateTime.fromObject({ day: 1, month: 4, year: year - 1 }),\n        end: DateTime.fromObject({ day: 31, month: 3, year }).endOf(\"day\"),\n      },\n      retirementBonus: {\n        start: DateTime.fromObject({ day: 1, month: 7, year: year - 1 }),\n        end: DateTime.fromObject({ day: 30, month: 6, year }).endOf(\"day\"),\n      },\n    }),\n    [year]\n  );\n};\n","import { Store } from \"@tanstack/store\";\nimport { Scenario } from \"shared/models/scenario\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\n\nexport interface ScenarioStore {\n  scenarios: Partial<Record<number, Scenario[]>>;\n  loading: boolean;\n  minYear: number;\n  maxYear: number;\n}\n\nconst year = getLocalDateTime().year;\nexport const scenarioStore = new Store<ScenarioStore>({\n  loading: true,\n  maxYear: year,\n  minYear: year,\n  scenarios: {},\n});\n","import { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { TimeSeries } from \"shared/models/store/current\";\nimport { store } from \".\";\n\nexport const updateProjectedIncomeDate = (timeSeries: TimeSeries, id: string, date: DateTime) => {\n  store.setState((prev) => {\n    const next = create(prev, (next) => {\n      const account = next.projectedIncome.timeSeries[timeSeries];\n      const idx = account.findIndex((x) => x.id === id);\n      account[idx].date = date.toISO()!;\n    });\n    return next;\n  });\n};\n","import DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\nimport UpdateIcon from \"@mui/icons-material/Update\";\nimport { Button, Tooltip } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { ColDef, ICellRendererParams } from \"ag-grid-community\";\nimport { CustomCellRendererProps } from \"ag-grid-react\";\nimport { DateTime } from \"luxon\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { Percent } from \"shared/components/formatters/percent\";\nimport { AccountData, TimeSeries } from \"shared/models/store/current\";\nimport { updateProjectedIncome } from \"shared/store\";\nimport { removeProjectedIncome } from \"shared/store/remove-projected-income\";\nimport { updateProjectedIncomeDate } from \"shared/store/update-projected-income-date\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const createAccountColumnConfig = (\n  accountName: TimeSeries,\n  variant: \"number\" | \"cash\" | \"percent\"\n): ColDef<AccountData>[] => [\n  {\n    headerName: \"Date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data && DateTime.fromISO(x.data.date),\n    cellRenderer: (x: ICellRendererParams<unknown, DateTime>) => {\n      return (\n        <Stack direction={\"row\"} alignItems={\"center\"}>\n          {x.valueFormatted}&nbsp;\n          {x.value && x.value > DateTime.local() && (\n            <Tooltip title=\"Future Event\">\n              <UpdateIcon htmlColor=\"yellow\" />\n            </Tooltip>\n          )}\n        </Stack>\n      );\n    },\n    cellEditor: \"agDateCellEditor\",\n    editable: true,\n    valueSetter: (x) => {\n      const date = DateTime.fromJSDate(x.newValue);\n      if (date.isValid) {\n        updateProjectedIncomeDate(accountName, x.data.id, DateTime.fromJSDate(x.newValue));\n      }\n      return date.isValid;\n    },\n  },\n  {\n    headerName: \"Value\",\n    valueGetter: (x) => x.data?.value,\n    cellRenderer: (x: CustomCellRendererProps<AccountData>) =>\n      variant === \"cash\" ? <Cash compact={false} value={x.value} /> : <Percent value={x.value} />,\n    type: \"numericColumn\",\n    editable: true,\n    cellEditor: \"agNumberCellEditor\",\n    valueSetter: (x) => {\n      updateProjectedIncome(accountName, x.data.id, +x.newValue);\n      return true;\n    },\n  },\n  {\n    cellStyle: () => ({ display: \"inline-flex\", padding: \"0px\" }),\n    sortable: false,\n    headerName: \"\",\n    width: 80,\n    colId: \"actions\",\n    cellRenderer: (props: CustomCellRendererProps<AccountData>) => {\n      return (\n        <Button\n          onClick={() => {\n            props.data && removeProjectedIncome(accountName, props.data?.id);\n          }}\n          color=\"error\"\n          fullWidth\n        >\n          <DeleteForeverIcon />\n        </Button>\n      );\n    },\n  },\n];\n","import { Box, Button, InputAdornment, Paper, Stack, TextField, Tooltip, Typography } from \"@mui/material\";\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo, useState } from \"react\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { TimeSeries } from \"shared/models/store/current\";\nimport { addProjectedIncome, store } from \"shared/store\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { createAccountColumnConfig } from \"./column-config\";\n\nconst DataEntry = (props: {\n  timeSeries: TimeSeries;\n  defaultDate: DateTime;\n  variant?: \"number\" | \"cash\" | \"percent\";\n}) => {\n  const { timeSeries, defaultDate, variant = \"number\" } = props;\n  const account = useStore(store, (state) => state.projectedIncome.timeSeries[timeSeries]);\n\n  const [date, setDate] = useState(defaultDate);\n  const [amount, setAmount] = useState<number | null>(null);\n\n  const hasSameDate = useMemo(() => {\n    return !!account?.find((x) => date.hasSame(DateTime.fromISO(x.date), \"day\"));\n  }, [account, date]);\n\n  const onAddEntry = () => {\n    if (amount != null) {\n      addProjectedIncome(date, timeSeries, variant === \"percent\" ? amount / 100 : amount);\n      setAmount(null);\n    }\n  };\n\n  const accountColumnConfig = useMemo(() => {\n    return createAccountColumnConfig(timeSeries, variant);\n  }, [timeSeries, variant]);\n\n  return (\n    <Box display={\"flex\"} flexDirection={\"column\"} height=\"100%\">\n      <Stack spacing={2} flex=\"0 1 auto\">\n        <DatePicker\n          format={shortDate}\n          sx={{ color: \"white\" }}\n          label=\"Date\"\n          value={date}\n          onChange={(value) => {\n            console.log(value);\n            value && setDate(value);\n          }}\n        />\n        <TextField\n          label=\"amount\"\n          value={amount ?? \"\"}\n          type=\"number\"\n          onChange={(event) => (event.target.value === \"\" ? setAmount(null) : setAmount(+event.target.value))}\n          InputProps={{\n            startAdornment: variant !== \"number\" && (\n              <InputAdornment position=\"start\">{variant === \"cash\" ? \"$\" : \"%\"}</InputAdornment>\n            ),\n          }}\n        />\n        <Button disabled={amount === null || !date || hasSameDate} onClick={onAddEntry}>\n          Add Entry\n        </Button>\n      </Stack>\n      <Box sx={{ paddingTop: 2, flex: \"1 1 auto\" }}>\n        <AgGrid\n          reactiveCustomComponents\n          rowData={account ?? []}\n          columnDefs={accountColumnConfig}\n          id={account + \"-history\"}\n          autoSizeStrategy={{\n            type: \"fitGridWidth\",\n          }}\n          stopEditingWhenCellsLoseFocus\n        />\n      </Box>\n    </Box>\n  );\n};\n\ninterface LayoutProps {\n  title: string;\n  accountName: TimeSeries;\n  defaultDate: DateTime;\n  variant: \"percent\" | \"number\" | \"cash\";\n}\n\nexport const Layout = (props: LayoutProps) => {\n  const { title, accountName, defaultDate, variant } = props;\n  return (\n    <Paper sx={{ padding: 2, height: \"100%\", width: 450, flexShrink: 0 }}>\n      <Box display=\"flex\" flexDirection=\"column\" height=\"100%\">\n        <Box flex=\"0 1 auto\" marginBottom={2}>\n          <Typography sx={{ marginBottom: 2 }} variant=\"h5\">\n            {title}{\" \"}\n            {variant === \"cash\" && (\n              <Tooltip\n                title={\n                  <>\n                    <span>Cash values are used in lieu of Percent values.</span>\n                    <br />\n                    <span>Cash values are considered actual payment values.</span>\n                  </>\n                }\n              >\n                <span>($)</span>\n              </Tooltip>\n            )}\n            {variant === \"percent\" && (\n              <Tooltip title=\"Percentage values are used for predictions.\">\n                <span>(%)</span>\n              </Tooltip>\n            )}\n          </Typography>\n        </Box>\n        <Box flex=\"1 1 auto\">\n          <DataEntry variant={variant} timeSeries={accountName} defaultDate={defaultDate} />\n        </Box>\n      </Box>\n    </Paper>\n  );\n};\n","import ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\nimport { Table, TableBody, TableCell, TableRow } from \"@mui/material\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { IncomePerPeriod } from \"shared/models/IncomePerPeriod\";\nimport { shortDate } from \"shared/utility/format-date\";\n\ninterface IncomePerPeriodTooltipProps {\n  incomePerPeriod: IncomePerPeriod[];\n}\n\nexport const IncomePerPeriodTooltip = (props: IncomePerPeriodTooltipProps) => {\n  const { incomePerPeriod } = props;\n  return (\n    <Table sx={{ width: \"max-content\" }}>\n      <TableBody>\n        {incomePerPeriod.map(({ start, end, value, perPayday, count }, index) => {\n          return (\n            <TableRow key={index}>\n              <TableCell>\n                <Cash value={value} compact={false} />\n              </TableCell>\n              <TableCell>{start.toFormat(shortDate)}</TableCell>\n              <TableCell>\n                <ArrowForwardIcon />\n              </TableCell>\n              <TableCell>{end.toFormat(shortDate)}</TableCell>\n              <TableCell>\n                <Cash value={perPayday} compact={false} /> x {count}\n              </TableCell>\n            </TableRow>\n          );\n        })}\n        <TableRow>\n          <TableCell colSpan={4}>Total:</TableCell>\n          <TableCell>\n            <Cash value={incomePerPeriod.reduce((acc, curr) => curr.value + acc, 0)} compact={false} />\n          </TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  );\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { useMemo } from \"react\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\nimport { ckmeans, median } from \"simple-statistics\";\n\nconst clusterTitle = (index: number, length: number) => {\n  if (length === 1) {\n    return \"Actual\";\n  } else if (length == 2) {\n    return [\"Low\", \"High\"][index];\n  } else {\n    return [\"Low\", \"Med\", \"High\"][index];\n  }\n};\n\nexport interface Cluster {\n  min: number;\n  max: number;\n  median: number;\n  probability: number;\n  title: string;\n}\n\nconst clusters = (values?: number[]): Cluster[] => {\n  if (!values) {\n    return [];\n  }\n  return ckmeans(values, Math.min(3, values.length)).map((x, i, arr) => {\n    return {\n      min: Math.min(...x),\n      max: Math.max(...x),\n      median: median(x),\n      probability: x.length / values.length,\n      title: clusterTitle(i, arr.length),\n    };\n  });\n};\n\nexport const useClusters = (year: number) => {\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios[year]);\n\n  return useMemo(() => {\n    if (scenarios?.length === 0) {\n      return {\n        totalPay: [],\n        meritBonus: [],\n        retirementBonus: [],\n        companyBonus: [],\n        pay: [],\n        meritIncrease: [],\n        scenarios,\n        taxablePay: [],\n      };\n    }\n    return {\n      totalPay: clusters(scenarios?.map((x) => x.totalPay)),\n      meritBonus: clusters(scenarios?.map((x) => x.meritBonus)),\n      retirementBonus: clusters(scenarios?.map((x) => x.retirementBonus)),\n      companyBonus: clusters(scenarios?.map((x) => x.companyBonus)),\n      pay: clusters(scenarios?.map((x) => x.pay.at(-1)?.value ?? 0)),\n      meritIncrease: clusters(scenarios?.map((x) => x.meritIncreasePct + x.equityIncreasePct)),\n      taxablePay: clusters(scenarios?.map((x) => x.taxablePay)),\n      scenarios,\n    };\n  }, [scenarios]);\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { findSameYear } from \"shared/utility/find-same-year\";\n\nexport const useHasMeritPairs = () => {\n  const timeSeries = useStore(store, (x) => x.projectedIncome.timeSeries);\n  return useMemo(() => {\n    return (\n      timeSeries.meritIncreasePct.every((x) => {\n        return !!findSameYear(DateTime.fromISO(x.date).year, timeSeries.meritBonusPct);\n      }) &&\n      timeSeries.meritBonusPct.every((x) => {\n        return !!findSameYear(DateTime.fromISO(x.date).year, timeSeries.meritIncreasePct);\n      })\n    );\n  }, [timeSeries.meritBonusPct, timeSeries.meritIncreasePct]);\n};\n","import { Alert, CircularProgress, Tooltip } from \"@mui/material\";\nimport { Box, Stack } from \"@mui/system\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo, useState } from \"react\";\nimport { Card } from \"shared/components/card\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { ClusterValues } from \"shared/components/formatters/cluster-value\";\nimport { CountDown } from \"shared/components/formatters/countdown\";\nimport { useDateRanges, useDates } from \"shared/hooks/use-dates\";\nimport { IncomePerPeriod } from \"shared/models/IncomePerPeriod\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { Layout } from \"./components/data-entry/data-entry\";\nimport { IncomePerPeriodTooltip } from \"./components/income-per-period\";\nimport { Value } from \"./components/value\";\nimport { useClusters } from \"./hooks/use-gradient\";\nimport { useHasMeritPairs } from \"./hooks/use-has-merit-pairs\";\n\nexport const ProjectedIncome = () => {\n  const [selectedYear, setSelectedYear] = useState(getLocalDateTime().year);\n\n  const hasMissingPairs = useHasMeritPairs();\n  const clusters = useClusters(selectedYear);\n  const dates = useDates(selectedYear);\n  const dateRanges = useDateRanges(selectedYear);\n\n  const basePay = useMemo(() => {\n    if (clusters.pay.length !== 1) {\n      return;\n    }\n    return clusters.scenarios?.[0].basePay;\n  }, [clusters.pay.length, clusters.scenarios]);\n\n  const aprToApr = useMemo(() => {\n    if (clusters.pay.length !== 1) {\n      return;\n    }\n    return clusters.scenarios?.[0].aprToApr;\n  }, [clusters.pay.length, clusters.scenarios]);\n\n  const paychecks = useMemo(() => {\n    if (clusters.pay.length !== 1) {\n      return;\n    }\n\n    const payPeriods =\n      clusters.scenarios?.[0].payments.filter((x) => {\n        const payedOn = DateTime.fromISO(x.payedOn);\n        return payedOn >= dateRanges.base.start && payedOn <= dateRanges.base.end;\n      }) ?? [];\n\n    return payPeriods\n      .reduceRight(\n        (acc, curr) => {\n          if (acc[0]?.[0]?.value === curr.value) {\n            acc[0].unshift(curr);\n          } else {\n            acc.unshift([curr]);\n          }\n\n          return acc;\n        },\n        [] as (typeof payPeriods)[]\n      )\n      .reduce((acc, curr) => {\n        acc.push({\n          start: DateTime.fromISO(curr[0].payedOn),\n          end: DateTime.fromISO(curr[curr.length - 1].payedOn),\n          value: curr.reduce((acc, curr) => acc + curr.value, 0),\n          perPayday: curr[0].value,\n          count: curr.length,\n        });\n        return acc;\n      }, [] as IncomePerPeriod[]);\n  }, [clusters.pay.length, clusters.scenarios, dateRanges.base.end, dateRanges.base.start]);\n\n  const scenarios = useStore(scenarioStore);\n\n  return (\n    <Box display=\"flex\" flexDirection=\"row\" height=\"100%\" width={\"100%\"}>\n      <Box flex=\"0 1 auto\">\n        <Stack gap={2} direction={\"column\"} overflow={\"auto\"} height=\"100%\" paddingRight={1}>\n          <Card\n            title={\n              <Box display=\"flex\" alignItems={\"center\"} gap={2} width={\"100%\"}>\n                <span>Income</span>\n                <CountDown dateTime={dates.companyBonus} />\n                <Box sx={{ display: \"flex\", marginLeft: \"auto\", alignItems: \"center\", flexWrap: \"wrap\" }}>\n                  {scenarios.loading && <CircularProgress style={{ width: 20, height: 20 }} />}\n                </Box>\n                <DatePicker\n                  sx={{ width: 90, marginRight: 2 }}\n                  label={\"year\"}\n                  views={[\"year\"]}\n                  minDate={getLocalDateTime().set({ year: scenarios.minYear })}\n                  maxDate={getLocalDateTime().set({ year: scenarios.maxYear })}\n                  defaultValue={getLocalDateTime()}\n                  slotProps={{\n                    textField: {\n                      variant: \"standard\",\n                      label: \"\",\n                    },\n                  }}\n                  onYearChange={(year) => {\n                    setSelectedYear(year.year);\n                  }}\n                />\n              </Box>\n            }\n          >\n            <ClusterValues clusters={clusters.totalPay} eventDate={dates.companyBonus} />\n          </Card>\n          <Card\n            title={\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\n                <span>Paycheck</span>\n                <CountDown dateTime={dates.meritIncrease} />\n              </Box>\n            }\n          >\n            <ClusterValues clusters={clusters.pay} eventDate={dates.meritIncrease} compact={false} />\n            {basePay && (\n              <Tooltip\n                componentsProps={{\n                  tooltip: {\n                    sx: {\n                      maxWidth: \"none\",\n                    },\n                  },\n                }}\n                title={paychecks && <IncomePerPeriodTooltip incomePerPeriod={paychecks} />}\n              >\n                <div>\n                  <Value title={\"Base Pay\"}>\n                    <Cash disableTooltip value={basePay} />\n                  </Value>\n                </div>\n              </Tooltip>\n            )}\n            {aprToApr && (\n              <Value title={\"APR to APR\"}>\n                <Cash value={aprToApr} />\n              </Value>\n            )}\n          </Card>\n          <Card\n            title={\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\n                <span>Merit Increase</span>\n                <CountDown dateTime={dates.meritIncrease} />\n              </Box>\n            }\n          >\n            <ClusterValues clusters={clusters.meritIncrease} eventDate={dates.meritIncrease} />\n          </Card>\n\n          <Card\n            title={\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\n                <span>Merit Bonus</span>\n                <CountDown dateTime={dates.meritBonus} />\n              </Box>\n            }\n          >\n            <ClusterValues clusters={clusters.meritBonus} eventDate={dates.meritBonus} />\n          </Card>\n          <Card\n            title={\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\n                <span>Company Bonus</span>\n                <CountDown dateTime={dates.companyBonus} />\n              </Box>\n            }\n          >\n            <ClusterValues clusters={clusters.companyBonus} eventDate={dates.companyBonus} />\n          </Card>\n          <Card\n            title={\n              <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\n                <span>Retirement Bonus</span>\n                <CountDown dateTime={dates.retirementBonus} />\n              </Box>\n            }\n          >\n            <ClusterValues clusters={clusters.retirementBonus} eventDate={dates.retirementBonus} />\n          </Card>\n          {!hasMissingPairs && (\n            <Alert severity=\"error\">Every Merit Increase must have a paired Merit Bonus percent</Alert>\n          )}\n        </Stack>\n      </Box>\n      <Box flex=\"1 1 auto\" overflow={\"auto\"} paddingBottom={2} paddingLeft={1}>\n        <Box display={\"flex\"} height={\"100%\"} width={\"100%\"} gap={2}>\n          <Layout\n            accountName=\"paycheck\"\n            variant=\"cash\"\n            defaultDate={DateTime.fromObject({\n              day: 1,\n              month: 4,\n              year: selectedYear,\n            })}\n            title=\"Income Per Paycheck\"\n          />\n          <Layout\n            title=\"Merit Increase\"\n            accountName=\"meritIncreasePct\"\n            variant=\"percent\"\n            defaultDate={dates.meritIncrease}\n          />\n          <Layout title=\"Equity Increase\" accountName=\"equityPct\" variant=\"percent\" defaultDate={dates.meritIncrease} />\n          <Layout title=\"Merit Bonus\" accountName=\"meritBonusPct\" variant=\"percent\" defaultDate={dates.meritBonus} />\n          <Layout title=\"Merit Bonus\" accountName=\"meritBonus\" variant=\"cash\" defaultDate={dates.meritBonus} />\n          <Layout\n            title=\"Company Bonus Factor\"\n            accountName=\"companyBonusPct\"\n            defaultDate={dates.companyBonus}\n            variant=\"percent\"\n          />\n          <Layout title=\"Company Bonus\" accountName=\"companyBonus\" defaultDate={dates.companyBonus} variant=\"cash\" />\n          <Layout\n            title=\"Retirement Bonus\"\n            accountName=\"retirementBonus\"\n            defaultDate={dates.retirementBonus}\n            variant=\"cash\"\n          />\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\n\nexport const useFutureRetirementContributions = () => {\n  const currentYear = getLocalDateTime().year;\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios[currentYear]);\n  const retirementContribution = useStore(store, (x) => x.projectedWealth.retirementContributionPaycheck);\n\n  return useMemo(() => {\n    return {\n      remaining: (scenarios?.[0].remainingPayments ?? 0) * retirementContribution,\n      perPaycheck: retirementContribution,\n    };\n  }, [retirementContribution, scenarios]);\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\n\nexport const useFutureSavings = () => {\n  const config = useStore(store, (x) => x.projectedWealth);\n  return useMemo(() => {\n    const systemYear = getLocalDateTime().year;\n    return {\n      remaining:\n        config.savingsPerMonth *\n        DateTime.fromObject({\n          day: 31,\n          month: 12,\n          year: systemYear,\n        })\n          .endOf(\"day\")\n          .diffNow(\"months\").months,\n      perMonth: config.savingsPerMonth,\n    };\n  }, [config.savingsPerMonth]);\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { scenarioStore } from \"shared/store/scenario-store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\n\ninterface ThresholdTaxData {\n  total: number;\n  firstOccurrence: DateTime;\n  remaining: number;\n  perPaycheck: number;\n}\n\nexport const useFutureSocialSecurity = (): TresholdTax => {\n  const config = useStore(store, (x) => x.projectedWealth);\n  return useThresholdTax(config.socialSecurityLimit, config.socialSecurityTaxRate);\n};\n\nexport const useFutureMedicareTax = (): TresholdTax => {\n  const config = useStore(store, (x) => x.projectedWealth);\n  return useThresholdTax(config.medicareSupplementalTaxThreshold, -1 * config.medicareSupplementalTaxRate);\n};\n\nexport type TresholdTax = Partial<Record<\"min\" | \"max\", ThresholdTaxData>>;\n\nconst useThresholdTax = (threshold: number, taxRate: number): TresholdTax => {\n  const currentYear = getLocalDateTime().year;\n  const scenarios = useStore(scenarioStore, (x) => x.scenarios[currentYear]);\n\n  const data = useMemo(\n    () =>\n      (\n        (scenarios ?? [])\n          .map((x) => {\n            const total = taxRate * Math.max(0, (x.payments.at(-1)?.cumulative ?? 0) - threshold);\n            const firstOccurrence = x.payments.find((x) => x.cumulative > threshold)?.payedOn;\n            const remaining = x.payments\n              .slice(x.currentPaymentIdx)\n              .filter((x) => x.cumulative >= threshold)\n              .reduce((acc, curr) => {\n                return acc + Math.min(curr.value, curr.cumulative - threshold) * taxRate;\n              }, 0);\n            const perPaycheck = total && taxRate * (x.payments.at(-1)?.value ?? 0);\n\n            return {\n              total,\n              firstOccurrence: firstOccurrence ? DateTime.fromISO(firstOccurrence) : undefined,\n              remaining,\n              perPaycheck,\n            };\n          })\n          .filter((x) => x.firstOccurrence) as ThresholdTaxData[]\n      ).reduce(\n        (acc, curr, i) => {\n          if (i == 0) {\n            return { min: curr, max: curr };\n          } else {\n            if (curr.total < acc.min!.total) {\n              acc.min = curr;\n            }\n            if (curr.total > acc.max!.total) {\n              acc.max = curr;\n            }\n          }\n          return acc;\n        },\n        {} as Partial<Record<\"min\" | \"max\", ThresholdTaxData>>\n      ),\n    [threshold, taxRate, scenarios]\n  );\n\n  return data;\n};\n","import { Cluster } from \"capabilities/projected-income/hooks/use-gradient\";\n\nexport const scaleCluster = (cluster: Cluster | undefined, factor: number) => {\n  if (!cluster) {\n    return undefined;\n  }\n  return { ...cluster, min: cluster.min * factor, max: cluster.max * factor, median: cluster.median * factor };\n};\n\nexport const scaleClusters = (clusters: Cluster[] | undefined, factor: number): Cluster[] | undefined => {\n  return clusters?.filter((x) => x).map((x) => scaleCluster(x, factor)!);\n};\n\nexport const findMostMostLikely = (cluster: Cluster[]) => {\n  if (cluster.length === 0) {\n    return;\n  }\n  const mostLikely = cluster.reduce((acc, curr) => {\n    return acc.probability > curr.probability ? acc : curr;\n  });\n  return mostLikely;\n};\n\nexport const ExpectedValue = (Clusers: Cluster[][]) => {\n  if (Clusers.length == 0) {\n    return [];\n  }\n\n  return [\n    Clusers.reduce(\n      (acc, curr) => {\n        if (curr.length === 0) {\n          return acc;\n        }\n        const mostLikely = findMostMostLikely(curr);\n\n        acc.max += mostLikely?.max ?? 0;\n        acc.min += mostLikely?.min ?? 0;\n        acc.median += mostLikely?.median ?? 0;\n        return acc;\n      },\n      { min: 0, max: 0, median: 0, title: \"Actual\", probability: 0 }\n    ),\n  ];\n};\n","import { Box, Stack } from \"@mui/system\";\r\nimport { useStore } from \"@tanstack/react-store\";\r\nimport { Value } from \"capabilities/projected-income/components/value\";\r\nimport { Cluster, useClusters } from \"capabilities/projected-income/hooks/use-gradient\";\r\nimport { useFutureRetirementContributions } from \"capabilities/projected-wealth/hooks/use-future-retirement-contributions\";\r\nimport { useFutureSavings } from \"capabilities/projected-wealth/hooks/use-future-savings\";\r\nimport {\r\n  TresholdTax,\r\n  useFutureMedicareTax,\r\n  useFutureSocialSecurity,\r\n} from \"capabilities/projected-wealth/hooks/use-future-social-security\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useMemo } from \"react\";\r\nimport { Card } from \"shared/components/card\";\r\nimport { Cash } from \"shared/components/formatters/cash\";\r\nimport { ClusterValues } from \"shared/components/formatters/cluster-value\";\r\nimport { CountDown } from \"shared/components/formatters/countdown\";\r\nimport { useDates } from \"shared/hooks/use-dates\";\r\nimport { store } from \"shared/store\";\r\nimport { ExpectedValue, scaleClusters } from \"shared/utility/cluster-helpers\";\r\nimport { getLocalDateTime } from \"shared/utility/current-date\";\r\nimport { monthDay } from \"shared/utility/format-date\";\r\n\r\nconst isFuture = (date: DateTime) => date.diffNow(\"milliseconds\").milliseconds > 0;\r\n\r\nexport const FutureEvents = () => {\r\n  const year = getLocalDateTime().year;\r\n  const dates = useDates(year);\r\n\r\n  const savings = useFutureSavings();\r\n  const retirement = useFutureRetirementContributions();\r\n  const medicare = useFutureMedicareTax();\r\n  const socialSecurity = useFutureSocialSecurity();\r\n  const clusters = useClusters(year);\r\n  const bonusTakehomeFactor = useStore(store, (x) => 1 - x.projectedWealth.bonusWitholdingsRate);\r\n\r\n  const total = useMemo(() => {\r\n    const remaining = [\r\n      isFuture(dates.meritBonus) && scaleClusters(clusters.meritBonus, bonusTakehomeFactor),\r\n      isFuture(dates.companyBonus) && scaleClusters(clusters.companyBonus, bonusTakehomeFactor),\r\n      isFuture(dates.retirementBonus) && clusters.retirementBonus,\r\n      [{ min: savings.remaining, max: savings.remaining, probability: 1, median: 1 }],\r\n      [{ min: retirement.remaining, max: retirement.remaining, probability: 1, median: 1 }],\r\n      [{ min: socialSecurity.min?.remaining ?? 0, max: socialSecurity.max?.remaining ?? 0, probability: 1, median: 1 }],\r\n      [{ min: medicare.min?.remaining, max: medicare.max?.remaining, probability: 1, median: 1 }],\r\n    ].filter((x) => x !== false) as Cluster[][];\r\n\r\n    return ExpectedValue(remaining);\r\n  }, [\r\n    bonusTakehomeFactor,\r\n    clusters.companyBonus,\r\n    clusters.meritBonus,\r\n    clusters.retirementBonus,\r\n    dates.companyBonus,\r\n    dates.meritBonus,\r\n    dates.retirementBonus,\r\n    medicare.max?.remaining,\r\n    medicare.min?.remaining,\r\n    retirement.remaining,\r\n    savings.remaining,\r\n    socialSecurity.max?.remaining,\r\n    socialSecurity.min?.remaining,\r\n  ]);\r\n\r\n  return (\r\n    <>\r\n      <Stack spacing={2}>\r\n        <Card title={`${year} Remaining Projected Wealth`}>\r\n          <ClusterValues clusters={total} eventDate={dates.companyBonus} />\r\n        </Card>\r\n        {isFuture(dates.meritBonus) && (\r\n          <ClusterCard\r\n            title=\"Merit Bonus\"\r\n            date={dates.meritBonus}\r\n            cluster={scaleClusters(clusters.meritBonus, bonusTakehomeFactor)}\r\n          />\r\n        )}\r\n        {isFuture(dates.companyBonus) && (\r\n          <ClusterCard\r\n            title=\"Company Bonus\"\r\n            date={dates.companyBonus}\r\n            cluster={scaleClusters(clusters.companyBonus, bonusTakehomeFactor)}\r\n          />\r\n        )}\r\n        {isFuture(dates.retirementBonus) && (\r\n          <ClusterCard title=\"Retirement Bonus\" date={dates.retirementBonus} cluster={clusters.retirementBonus} />\r\n        )}\r\n        {!!socialSecurity.min && <ThresholdTaxCard thresholdTax={socialSecurity} />}\r\n        {!!medicare.min && <ThresholdTaxCard thresholdTax={medicare} />}\r\n\r\n        <Card title={\"Savings & Retirement\"}>\r\n          {!!savings.perMonth && (\r\n            <Value title={\"Expected savings\"} secondaryValue={<Cash tooltip=\"Per Month\" value={savings.perMonth} />}>\r\n              <Cash tooltip=\"Total Remaining\" value={savings.remaining} />\r\n            </Value>\r\n          )}\r\n          {!!retirement.perPaycheck && (\r\n            <Value\r\n              title={\"retirement contribution\"}\r\n              secondaryValue={<Cash tooltip=\"Per Paycheck\" value={retirement.perPaycheck} />}\r\n            >\r\n              <Cash tooltip=\"Total Remaining\" value={retirement.remaining} />\r\n            </Value>\r\n          )}\r\n        </Card>\r\n      </Stack>\r\n    </>\r\n  );\r\n};\r\n\r\nconst ThresholdTaxCard = (props: { thresholdTax: TresholdTax }) => {\r\n  const { thresholdTax } = props;\r\n  return (\r\n    <Card\r\n      title={\r\n        <Box display={\"flex\"} width={\"max-content\"} gap={1} marginRight={2}>\r\n          <span>Social Security Limit</span>\r\n\r\n          <CountDown dateFormat={monthDay} variant=\"date\" dateTime={thresholdTax.max?.firstOccurrence} />\r\n          {thresholdTax.min &&\r\n            thresholdTax.max &&\r\n            !thresholdTax.min.firstOccurrence.equals(thresholdTax.max.firstOccurrence) && (\r\n              <>\r\n                <span>or</span>\r\n                <CountDown dateFormat={monthDay} variant=\"date\" dateTime={thresholdTax.min.firstOccurrence} />\r\n              </>\r\n            )}\r\n        </Box>\r\n      }\r\n    >\r\n      {thresholdTax.max && thresholdTax.max.total === thresholdTax.min?.total && (\r\n        <Value title={\"Remaining\"}>\r\n          <Cash value={thresholdTax.max?.remaining} compact={false} />\r\n        </Value>\r\n      )}\r\n      {thresholdTax.max && thresholdTax.max.total !== thresholdTax.min?.total && (\r\n        <>\r\n          <Value title={\"Early\"}>\r\n            <Cash value={thresholdTax.max?.remaining} compact={false} />\r\n          </Value>\r\n          <Value title={\"Late\"}>\r\n            <Cash value={thresholdTax.min?.total} compact={false} />\r\n          </Value>\r\n        </>\r\n      )}\r\n      <Value title={\"Per Paycheck\"}>\r\n        <Cash value={thresholdTax.max?.perPaycheck} compact={false} />\r\n      </Value>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst ClusterCard = (props: { date: DateTime; cluster?: Cluster[]; title: string }) => {\r\n  const { date, cluster, title } = props;\r\n  return (\r\n    <Card\r\n      title={\r\n        <Box display={\"flex\"} width={\"max-content\"} gap={2} marginRight={2}>\r\n          <span>{title}</span>\r\n          <CountDown variant=\"date\" dateFormat={monthDay} dateTime={date} />\r\n        </Box>\r\n      }\r\n    >\r\n      <ClusterValues clusters={cluster} eventDate={date} />\r\n    </Card>\r\n  );\r\n};\r\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\n\nexport const useEarliestAccountEntry = () => {\n  const accounts = useStore(store, (x) => x.wealth);\n  return DateTime.fromMillis(\n    Object.values(accounts)\n      .map((x) => {\n        if (x.type === \"account\") {\n          return x.data[0]?.date ? DateTime.fromISO(x.data[0].date) : getLocalDateTime();\n        }\n        return getLocalDateTime();\n      })\n      .reduce((acc, curr) => Math.min(acc, curr?.toMillis() ?? Infinity), getLocalDateTime().toMillis())\n  );\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { useClusters } from \"capabilities/projected-income/hooks/use-gradient\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { useDates } from \"shared/hooks/use-dates\";\nimport { store } from \"shared/store\";\nimport { findMostMostLikely, scaleCluster } from \"shared/utility/cluster-helpers\";\n\nexport const useFutureBonuses = () => {\n  const local = DateTime.local();\n  const year = local.year;\n  const dates = useDates(year);\n  const clusters = useClusters(year);\n  const config = useStore(store, (x) => x.projectedWealth);\n\n  const bonuses = useMemo(() => {\n    return (\n      [\n        [\n          dates.meritBonus,\n          scaleCluster(findMostMostLikely(clusters.meritBonus), 1 - config.bonusWitholdingsRate)?.median ?? 0,\n        ],\n        [\n          dates.companyBonus,\n          scaleCluster(findMostMostLikely(clusters.companyBonus), 1 - config.bonusWitholdingsRate)?.median ?? 0,\n        ],\n        [dates.retirementBonus, findMostMostLikely(clusters.retirementBonus)?.median ?? 0],\n      ] as [DateTime, number][]\n    )\n      .map(([payedOn, amount]) => (local < payedOn ? amount : 0))\n      .reduce((acc, curr) => acc + curr, 0);\n  }, [\n    dates.meritBonus,\n    dates.companyBonus,\n    dates.retirementBonus,\n    clusters.meritBonus,\n    clusters.companyBonus,\n    clusters.retirementBonus,\n    config.bonusWitholdingsRate,\n    local,\n  ]);\n\n  return bonuses;\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { findNearestOnOrBefore } from \"shared/utility/find-nearest-on-or-before\";\nimport { calcEquity, calcLoanBalance } from \"shared/utility/mortgage-calc\";\nimport { useEarliestAccountEntry } from \"./use-earliest-account-entry\";\nimport { useFutureBonuses } from \"./use-future-bonuses\";\nimport { useFutureRetirementContributions } from \"./use-future-retirement-contributions\";\nimport { useFutureSavings } from \"./use-future-savings\";\nimport { useFutureMedicareTax, useFutureSocialSecurity } from \"./use-future-social-security\";\n\nexport interface TimeSeriesWealth {\n  graphDate: Date;\n  date: DateTime;\n  wealth: number;\n  yoyCash?: number;\n  yoyPct?: number;\n}\n\nexport const useTimeSeriesWealth = () => {\n  const localDateTime = getLocalDateTime();\n  const earliest = useEarliestAccountEntry();\n  const accounts = useStore(store, (x) => x.wealth);\n  const bonuses = useFutureBonuses();\n  const savings = useFutureSavings();\n  const ssiTaxValue = useFutureSocialSecurity();\n  const medicareTaxValue = useFutureMedicareTax();\n  const retirementContribution = useFutureRetirementContributions();\n\n  const data = useMemo(() => {\n    if (!earliest.isValid) {\n      return [];\n    }\n\n    const futureWealth =\n      bonuses +\n      savings.remaining +\n      retirementContribution.remaining +\n      (ssiTaxValue.min?.remaining ?? 0) +\n      (medicareTaxValue?.min?.remaining ?? 0);\n\n    const dates = new Array(localDateTime.year + 2 - earliest.year)\n      .fill(earliest.year)\n      .map((x, i) => DateTime.fromObject({ day: 1, month: 1, year: x + i }).startOf(\"day\"));\n\n    if (!localDateTime.equals(dates[dates.length - 2])) {\n      dates.splice(-1, 0, localDateTime);\n    }\n\n    return dates\n      .map((date, idx, arr) => {\n        const isLast = idx === arr.length - 1;\n        const accountsWealth = Object.values(accounts).map((x) => {\n          if (x.type === \"mortgage\" && x.loan) {\n            const houseValue = findNearestOnOrBefore(date, x.data);\n            const balance = calcLoanBalance(date, x.loan);\n            return calcEquity(x.loan.ownershipPct, houseValue?.value, balance, x.loan.principal);\n          } else if (x.type === \"account\") {\n            const entry = findNearestOnOrBefore(date, x.data);\n            return entry?.value ?? 0;\n          }\n          return 0;\n        });\n        const accountWealth = accountsWealth.reduce((acc, curr) => acc + curr, 0);\n\n        return {\n          date,\n          graphDate: date.toJSDate(),\n          wealth: accountWealth + (isLast ? futureWealth : 0),\n        };\n      })\n      .map((x, idx, arr) => {\n        if (idx !== arr.length - 1) {\n          const benchmarkWealth = arr[idx - 1]?.wealth;\n          if (!benchmarkWealth) {\n            return x;\n          }\n          return {\n            ...x,\n            yoyCash: x.wealth - benchmarkWealth,\n            yoyPct: x.wealth / benchmarkWealth - 1,\n          };\n        }\n\n        const benchmarkWealth = arr[idx - 2]?.wealth;\n        if (!benchmarkWealth) {\n          return x;\n        }\n        return {\n          ...x,\n          yoyCash: x.wealth - benchmarkWealth,\n          yoyPct: x.wealth / benchmarkWealth - 1,\n        };\n      });\n  }, [\n    earliest.isValid,\n    earliest.year,\n    bonuses,\n    savings.remaining,\n    retirementContribution.remaining,\n    ssiTaxValue.min,\n    medicareTaxValue.min,\n    localDateTime,\n    accounts,\n  ]);\n  return data as TimeSeriesWealth[];\n};\n","import { AgCartesianChartOptions, AgLineSeriesOptions } from \"ag-charts-community\";\nimport { AgChartsReact } from \"ag-charts-react\";\nimport { DateTime } from \"luxon\";\nimport { useMemo } from \"react\";\nimport { formatCash, formatCashShort } from \"shared/utility/format-cash\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { useTimeSeriesWealth } from \"../hooks/use-times-series-wealth\";\n\nexport const WealthChart = () => {\n  const data = useTimeSeriesWealth();\n\n  const series = useMemo(() => {\n    return [\n      {\n        type: \"line\",\n        xKey: \"graphDate\",\n        yKey: \"wealth\",\n        yName: \"Wealth\",\n        tooltip: {\n          renderer: ({ datum, yKey, xKey }) => ({\n            content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCash(datum[yKey])}`,\n          }),\n        },\n      },\n      {\n        type: \"line\",\n        xKey: \"graphDate\",\n        yKey: \"yoyCash\",\n        yName: \"YoY ($)\",\n        tooltip: {\n          renderer: ({ datum, yKey, xKey }) => ({\n            content: `${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCash(datum[yKey])}`,\n          }),\n        },\n      },\n    ] as AgLineSeriesOptions[];\n  }, []);\n\n  const options: AgCartesianChartOptions = useMemo(\n    () => ({\n      theme: \"ag-default-dark\",\n      title: {\n        text: `${data[data.length - 1].date.toFormat(shortDate)} Projected wealth ${formatCashShort(\n          (data[data.length - 1]?.wealth ?? 0) as number\n        )}`,\n      },\n      data,\n      axes: [\n        {\n          type: \"time\",\n          position: \"bottom\",\n          label: {\n            format: \"%Y\",\n          },\n        },\n        {\n          type: \"number\",\n          position: \"left\",\n          nice: false,\n        },\n      ],\n      series,\n    }),\n    [data, series]\n  );\n  return <AgChartsReact options={options} />;\n};\n","import QueryStatsIcon from \"@mui/icons-material/QueryStats\";\nimport UpdateIcon from \"@mui/icons-material/Update\";\nimport { Tooltip } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport { ColDef, ICellRendererParams } from \"ag-grid-community\";\nimport { DateTime } from \"luxon\";\nimport { Cash } from \"shared/components/formatters/cash\";\nimport { Percent } from \"shared/components/formatters/percent\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { TimeSeriesWealth } from \"../../hooks/use-times-series-wealth\";\n\nexport const columnConfig: ColDef<TimeSeriesWealth>[] = [\n  {\n    headerName: \"Date\",\n    colId: \"date\",\n    sort: \"desc\",\n    valueFormatter: (x) => x.value?.toFormat(shortDate),\n    valueGetter: (x) => x.data?.date,\n    cellRenderer: (x: ICellRendererParams<unknown, DateTime>) => {\n      const systemYear = getLocalDateTime().year;\n      return (\n        <Stack direction={\"row\"} alignItems={\"center\"}>\n          {x.valueFormatted}&nbsp;\n          {x.value && x.value > getLocalDateTime() && (\n            <Tooltip title=\"Future Event\">\n              <UpdateIcon htmlColor=\"yellow\" />\n            </Tooltip>\n          )}\n          {x.value &&\n            x.value.equals(\n              DateTime.fromObject({\n                day: 1,\n                month: 1,\n                year: systemYear,\n              })\n            ) && (\n              <Tooltip title=\"Benchmark for current and future entries\">\n                <QueryStatsIcon htmlColor=\"yellow\" />\n              </Tooltip>\n            )}\n        </Stack>\n      );\n    },\n  },\n  {\n    type: \"numericColumn\",\n    headerName: \"Wealth\",\n    colId: \"wealth\",\n    valueGetter: (x) => x.data?.wealth,\n    cellRenderer: (x: ICellRendererParams<unknown, number>) => {\n      return x.value && <Cash value={x.value} placement=\"left\" />;\n    },\n  },\n  {\n    colId: \"yoy-cash\",\n    type: \"numericColumn\",\n    headerName: \"YoY ($)\",\n    valueGetter: (x) => x.data?.yoyCash,\n    cellRenderer: (x: ICellRendererParams<unknown, number>) => {\n      return x.value && <Cash value={x.value} placement=\"left\" />;\n    },\n  },\n  {\n    colId: \"yoy-percent\",\n    type: \"numericColumn\",\n    headerName: \"YoY (%)\",\n    valueGetter: (x) => x.data?.yoyPct,\n    cellRenderer: (x: ICellRendererParams<unknown, number>) => {\n      return x.value && <Percent value={x.value} />;\n    },\n    minWidth: 60,\n  },\n];\n","import { Box } from \"@mui/system\";\nimport { useTimeSeriesWealth } from \"capabilities/projected-wealth/hooks/use-times-series-wealth\";\nimport { AgGrid } from \"shared/components/ag-grid\";\nimport { columnConfig } from \"./colum-config\";\n\nexport const WealthTable = () => {\n  const data = useTimeSeriesWealth();\n\n  return (\n    <Box height={\"100%\"} width={\"100%\"}>\n      <AgGrid\n        id=\"time-series-wealth\"\n        rowData={data}\n        columnDefs={columnConfig}\n        autoSizeStrategy={{ type: \"fitGridWidth\" }}\n        onRowDataUpdated={(e) => e.api.sizeColumnsToFit()}\n      />\n    </Box>\n  );\n};\n","import { Box, Paper, Stack } from \"@mui/material\";\nimport { FutureEvents } from \"./components/future-events\";\nimport { WealthChart } from \"./components/wealth-chart\";\nimport { WealthTable } from \"./components/wealth-table\";\n\nexport const ProjectedWealth = () => {\n  return (\n    <Box display=\"flex\" flexDirection=\"row\" height=\"100%\" width={\"100%\"} gap={2}>\n      <Box flex=\"0 1 auto\">\n        <Paper sx={{ flex: \"0 1 auto\", padding: 2, height: \"100%\", overflow: \"auto\" }}>\n          <FutureEvents />\n        </Paper>\n      </Box>\n      <Box flex=\"1 1 auto\" overflow={\"auto\"}>\n        <Stack spacing={2} height={\"100%\"} width={\"100%\"}>\n          <WealthChart />\n          <WealthTable />\n        </Stack>\n      </Box>\n    </Box>\n  );\n};\n","import { LinearProgress } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\n\nexport const CountDown = (props: { timeMs: number }) => {\n  const { timeMs } = props;\n  const [time, setTime] = useState(timeMs);\n\n  useEffect(() => {\n    const intervalMs = 100;\n    const interval = setInterval(() => {\n      setTime((prev) => {\n        const remaining = prev - intervalMs;\n        if (remaining < 0) {\n          clearInterval(interval);\n          return 0;\n        }\n        return remaining;\n      });\n    }, 100);\n    return () => clearInterval(interval);\n  }, [props.timeMs]);\n\n  return <LinearProgress value={(time / timeMs) * 100} variant=\"determinate\" color=\"inherit\" />;\n};\n","import { Box, Button, ButtonProps, Stack } from \"@mui/material\";\nimport { ReactNode, useEffect, useState } from \"react\";\nimport { CountDown } from \"./count-down\";\n\ntype SafetyState = \"inactive\" | \"activating\" | \"active\" | \"confirmed\";\n\ninterface SafetyButtonProps {\n  inactiveLabel: string;\n  activatingLabel: string;\n  activeLabel: string;\n  confirmedLabel: string;\n  icon?: ReactNode;\n  onConfirm: () => void;\n}\n\nexport const SafetyButton = (props: Omit<ButtonProps, \"children\"> & SafetyButtonProps) => {\n  const { inactiveLabel, activatingLabel, activeLabel, confirmedLabel, onConfirm, icon, disabled, ...rest } = props;\n  const [safetyState, setSafetyState] = useState<SafetyState>(\"inactive\");\n\n  useEffect(() => {\n    if (safetyState === \"active\") {\n      setTimeout(() => {\n        setSafetyState((prev) => {\n          return prev === \"active\" ? \"inactive\" : prev;\n        });\n      }, 3200);\n    } else if (safetyState === \"activating\") {\n      setTimeout(() => {\n        setSafetyState(\"active\");\n      }, 1000);\n    } else if (safetyState === \"confirmed\") {\n      setTimeout(() => {\n        setSafetyState(\"inactive\");\n      }, 3200);\n    }\n  }, [safetyState]);\n\n  return (\n    <Box\n      sx={{\n        minWidth: 130,\n      }}\n    >\n      <Button\n        {...rest}\n        sx={{ height: \"100%\", width: \"100%\" }}\n        disabled={disabled || safetyState === \"activating\" || safetyState === \"confirmed\"}\n        size=\"small\"\n        onClick={() => {\n          safetyState === \"inactive\" && setSafetyState(\"activating\");\n          if (safetyState === \"active\") {\n            onConfirm?.();\n            setSafetyState(\"confirmed\");\n          }\n        }}\n      >\n        <Stack>\n          <Stack direction={\"row\"}>\n            {icon}\n            {safetyState === \"inactive\" && inactiveLabel}\n            {safetyState === \"activating\" && activatingLabel}\n            {safetyState === \"active\" && activeLabel}\n            {safetyState === \"confirmed\" && confirmedLabel}\n          </Stack>\n          {safetyState === \"active\" && <CountDown timeMs={2800} />}\n          {safetyState === \"activating\" && <CountDown timeMs={500} />}\n        </Stack>\n      </Button>\n    </Box>\n  );\n};\n","import { useStore } from \"@tanstack/react-store\";\nimport { useCallback } from \"react\";\nimport { store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\n\nexport const downloadJson = <T,>(filename: string, storeData: T) => {\n  const data = JSON.stringify(storeData, null, 2);\n  const link = document.createElement(\"a\");\n  link.download = filename;\n  const blob = new Blob([data], { type: \"application/json\" });\n  link.href = window.URL.createObjectURL(blob);\n  link.click();\n};\n\nexport const useExport = () => {\n  const storeData = useStore(store);\n  const onExport = useCallback(() => {\n    downloadJson(`wealth-tracker-${getLocalDateTime().toFormat(shortDate)}.json`, storeData);\n  }, [storeData]);\n\n  return onExport;\n};\n","import { useCallback } from \"react\";\nimport { storeValidator } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\nimport { migration } from \"shared/store/migrations\";\n\nfunction selectFile(contentType: string) {\n  return new Promise<File>((resolve) => {\n    const input = document.createElement(\"input\");\n    input.type = \"file\";\n    input.multiple = false;\n    input.accept = contentType;\n\n    input.onchange = () => {\n      const files = Array.from(input.files ?? []);\n      resolve(files[0]);\n    };\n\n    input.click();\n  });\n}\n\nexport const useImport = () => {\n  return useCallback(() => {\n    return new Promise<void>((resolve, reject) => {\n      selectFile(\"application/json\").then((file) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = (readerEvent) => {\n          const content = readerEvent.target?.result?.toString();\n          if (content) {\n            const data = JSON.parse(window.atob(content.split(\",\")[1]));\n            const validation = storeValidator.safeParse(data);\n            if (validation.success) {\n              store.setState(() => data);\n              resolve();\n            } else {\n              try {\n                migration(data);\n                store.setState(() => data);\n                resolve();\n              } catch (err) {\n                console.log(\"error\", err);\n                console.log(\"invalid data\", data);\n                reject(err);\n              }\n            }\n          }\n        };\n      });\n    });\n  }, []);\n};\n","import { useMemo } from \"react\";\nimport { storeValidator } from \"shared/models/store/current\";\n\nexport const useStoreDataError = () => {\n  const invalidData = localStorage.getItem(\"store-invalid\");\n  return useMemo(() => {\n    if (!invalidData) {\n      return { hadError: false };\n    }\n    const jsonInvalidData = JSON.parse(invalidData);\n    const validated = storeValidator.safeParse(jsonInvalidData);\n    return {\n      hadError: !!invalidData,\n      invalidData: jsonInvalidData,\n      parseError: invalidData && !validated.success ? validated.error : undefined,\n      resetError: () => {\n        localStorage.removeItem(\"store-invalid\");\n      },\n    };\n  }, [invalidData]);\n};\n","import { create } from \"mutative\";\nimport { ProjectedWealthKeys } from \"shared/models/store/current\";\nimport { store } from \".\";\n\nexport const setProjectedWealth = (configName: ProjectedWealthKeys, value: number) => {\n  store.setState((prev) => {\n    return create(prev, (next) => {\n      next.projectedWealth[configName] = value;\n    });\n  });\n};\n","import { InputAdornment, TextField } from \"@mui/material\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { useCallback, useState } from \"react\";\nimport { ProjectedWealthKeys } from \"shared/models/store/current\";\nimport { store } from \"shared/store\";\nimport { setProjectedWealth } from \"shared/store/set-projected-wealth\";\n\ninterface ConfigEntryProps {\n  configName: ProjectedWealthKeys;\n  label: string;\n  variant?: \"cash\" | \"percent\";\n}\n\nexport const ConfigEntry = (props: ConfigEntryProps) => {\n  const { configName, label, variant = \"cash\" } = props;\n  const [error, setError] = useState(false);\n  const isPercent = variant === \"percent\";\n\n  const onchange = useCallback(\n    (input: string) => {\n      let value = +input;\n      const isNan = Number.isNaN(value);\n      setError(isNan);\n      if (isNan) {\n        return;\n      }\n\n      if (isPercent) {\n        value /= 100;\n      }\n\n      setProjectedWealth(configName, value);\n    },\n    [configName, isPercent]\n  );\n\n  const value = useStore(store, (x) => x.projectedWealth[configName]);\n  const defaultValue = isPercent ? value * 100 : value;\n\n  return (\n    <TextField\n      error={error}\n      variant=\"outlined\"\n      InputProps={{\n        startAdornment: <InputAdornment position=\"start\">{isPercent ? \"%\" : \"$\"}</InputAdornment>,\n      }}\n      defaultValue={defaultValue.toFixed(isPercent ? 2 : 0)}\n      type=\"numeric\"\n      label={label}\n      onChange={(event) => {\n        onchange(event.target.value);\n      }}\n    />\n  );\n};\n","import { Stack } from \"@mui/system\";\nimport { ConfigEntry } from \"./config-entry\";\n\nexport const Config = () => {\n  return (\n    <Stack spacing={2}>\n      <ConfigEntry configName=\"savingsPerMonth\" label=\"Monthly Saving Rate\" />\n      <ConfigEntry configName=\"retirementContributionPaycheck\" label=\"Retirement Contribution Per Paycheck\" />\n      <ConfigEntry configName=\"bonusWitholdingsRate\" label=\"Bonus Witholdings Rate\" variant=\"percent\" />\n      <Stack direction={\"row\"} spacing={2} width={\"100%\"} sx={{ \"& > *\": { flex: 1 } }}>\n        <ConfigEntry configName=\"socialSecurityLimit\" label=\"Social Security Tax Limit\" />\n        <ConfigEntry configName=\"socialSecurityTaxRate\" label=\"Social Security Tax\" variant=\"percent\" />\n      </Stack>\n      <Stack direction={\"row\"} spacing={2} width={\"100%\"} sx={{ \"& > *\": { flex: 1 } }}>\n        <ConfigEntry configName=\"medicareSupplementalTaxThreshold\" label=\"Medicare Supplemental Threshold\" />\n        <ConfigEntry configName=\"medicareSupplementalTaxRate\" label=\"Medicare Supplemental Tax\" variant=\"percent\" />\n      </Stack>\n    </Stack>\n  );\n};\n","import { Box, Table, TableBody, TableCell, TableHead, TableRow } from \"@mui/material\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport { ReactNode } from \"react\";\nimport { ZodError } from \"zod\";\n\ninterface InvalidDataDialogProps {\n  open?: boolean;\n  error?: ZodError;\n  children?: ReactNode;\n}\n\nexport default function InvalidDataDialog(props: InvalidDataDialogProps) {\n  const { open, error, children } = props;\n\n  return (\n    <>\n      <Dialog open={!!open}>\n        <DialogTitle id=\"alert-dialog-title\">{\"Error Loading Data\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            <Box maxHeight={500} overflow={\"auto\"}>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Error Message</TableCell>\n                    <TableCell>Path</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {error?.issues.map((x, idx) => {\n                    return (\n                      <TableRow key={idx}>\n                        <TableCell>{x.message}</TableCell>\n                        <TableCell>{x.path.join(\".\")}</TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            </Box>\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>{children}</DialogActions>\n      </Dialog>\n    </>\n  );\n}\n","import CloseIcon from \"@mui/icons-material/Close\";\nimport DeleteForever from \"@mui/icons-material/DeleteForever\";\nimport SettingsIcon from \"@mui/icons-material/Settings\";\nimport { Box, Button, IconButton, Modal, Paper, Stack, Tab, Tabs, Typography } from \"@mui/material\";\nimport { NetWealth } from \"capabilities/net-wealth\";\nimport { ProjectedIncome } from \"capabilities/projected-income\";\nimport { ProjectedWealth } from \"capabilities/projected-wealth\";\nimport { useState } from \"react\";\nimport { SafetyButton } from \"shared/components/safety-button\";\nimport { downloadJson, useExport } from \"shared/hooks/use-export\";\nimport { useImport } from \"shared/hooks/use-import\";\nimport { useStoreDataError } from \"shared/hooks/use-store-data-error\";\nimport { resetStore } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { shortDate } from \"shared/utility/format-date\";\nimport { Config } from \"./config\";\nimport InvalidDataDialog from \"./invalid-data-dialog\";\n\nexport const App = () => {\n  const [tab, setTab] = useState<string>(\"projected-wealth\");\n  const onExport = useExport();\n  const onImport = useImport();\n  const { hadError, parseError, resetError, invalidData } = useStoreDataError();\n  const [error, setError] = useState(parseError);\n  const [isOpen, setIsOpen] = useState(hadError);\n\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n\n  return (\n    <>\n      <Modal open={isSettingsOpen} onClose={() => setIsSettingsOpen(false)}>\n        <Paper\n          sx={{\n            padding: 2,\n            width: 600,\n            top: \"50%\",\n            left: \"50%\",\n            transform: \"translate(-50%, -50%)\",\n            position: \"absolute\",\n          }}\n        >\n          <Stack spacing={2}>\n            <Box display={\"flex\"}>\n              <Typography variant=\"h5\">Configuration</Typography>\n              <IconButton sx={{ marginLeft: \"auto\" }} onClick={() => setIsSettingsOpen(false)}>\n                <CloseIcon />\n              </IconButton>\n            </Box>\n            <Config />\n          </Stack>\n        </Paper>\n      </Modal>\n      <InvalidDataDialog open={isOpen} error={error}>\n        {hadError && (\n          <>\n            <Button\n              color=\"error\"\n              onClick={() => {\n                setIsOpen(false);\n                resetError?.();\n                resetStore();\n              }}\n            >\n              Reset\n            </Button>\n            <Button\n              onClick={() => {\n                downloadJson(`invalid-data-wealth-tracker-${getLocalDateTime().toFormat(shortDate)}.json`, invalidData);\n              }}\n            >\n              Download Data\n            </Button>\n\n            <Button\n              onClick={() => {\n                setIsOpen(false);\n                resetError?.();\n              }}\n            >\n              Ignore\n            </Button>\n          </>\n        )}\n        {!hadError && (\n          <Button\n            onClick={() => {\n              setIsOpen(false);\n            }}\n          >\n            Cancel\n          </Button>\n        )}\n      </InvalidDataDialog>\n      <Stack direction=\"row\">\n        <Tabs value={tab} onChange={(_, value) => setTab(value)}>\n          <Tab value=\"wealth\" label=\"Total Wealth\" />\n          <Tab value=\"projected-income\" label=\"Projected Income\" />\n          <Tab value=\"projected-wealth\" label=\"Projected Wealth\" />\n        </Tabs>\n        <Box marginLeft={\"auto\"} gap={2} display={\"flex\"}>\n          <Button onClick={() => setIsSettingsOpen(true)}>\n            <SettingsIcon />\n          </Button>\n          <Button\n            onClick={() =>\n              onImport().catch((err) => {\n                setIsOpen(true);\n                setError(err);\n              })\n            }\n          >\n            Import\n          </Button>\n          <Button onClick={onExport}>Export</Button>\n          <SafetyButton\n            onConfirm={resetStore}\n            inactiveLabel=\"Reset\"\n            activatingLabel=\"Activating\"\n            activeLabel=\"Confirm\"\n            confirmedLabel=\"confirmed\"\n            color=\"error\"\n            icon={<DeleteForever />}\n          />\n        </Box>\n      </Stack>\n      <Box padding={2} height={\"95%\"} width={\"100%\"}>\n        {tab === \"wealth\" && <NetWealth />}\n        {tab === \"projected-income\" && <ProjectedIncome />}\n        {tab === \"projected-wealth\" && <ProjectedWealth />}\n      </Box>\n    </>\n  );\n};\n","import { DateTime } from \"luxon\";\n\nexport const aPayday = DateTime.fromObject({ month: 12, day: 1, year: 2023 });\n","import { DateTime } from \"luxon\";\nimport { AccountData, ProjectedIncome } from \"shared/models/store/current\";\nimport { findSameYear } from \"shared/utility/find-same-year\";\nimport { getPayments } from \"shared/utility/get-payments\";\nimport { valueByDateRange } from \"shared/utility/get-values-by-date-range\";\n\nexport const getScenarioSize = (year: number, projectedIncome: ProjectedIncome) => {\n  const timeSeries = projectedIncome.timeSeries;\n  const pay = timeSeries.paycheck.filter((x) => DateTime.fromISO(x.date).year > year - 3);\n  const mostRecentPay = pay.at(-1) ?? timeSeries.paycheck.at(-1);\n  if (!mostRecentPay) {\n    return 0;\n  }\n\n  const yearsToGenerate = Math.max(year - DateTime.fromISO(mostRecentPay.date).year, 1);\n  return Math.pow(timeSeries.meritIncreasePct.length, yearsToGenerate) * timeSeries.companyBonus.length;\n};\n\nconst getMeritPairs = (year: number, projectedIncome: ProjectedIncome) => {\n  const timeSeries = projectedIncome.timeSeries;\n  const meritBonusPct = findSameYear(year, timeSeries.meritBonusPct);\n  const meritIncreasePct = findSameYear(year, timeSeries.meritIncreasePct);\n\n  const allMeritPairs = timeSeries.meritIncreasePct.map((x) => {\n    const meritBonusPctPair = findSameYear(DateTime.fromISO(x.date).year, timeSeries.meritBonusPct);\n    return {\n      meritIncreasePct: x.value,\n      meritBonusPct: meritBonusPctPair?.value ?? 0,\n    };\n  });\n\n  return allMeritPairs\n    .filter((x) => (meritBonusPct ? x.meritBonusPct === meritBonusPct.value : true))\n    .filter((x) => (meritIncreasePct ? x.meritIncreasePct === meritIncreasePct?.value : true));\n};\n\nexport const getMeritSequence = (year: number, projectedIncome: ProjectedIncome) => {\n  const timeSeries = projectedIncome.timeSeries;\n  const meritPairs = getMeritPairs(year, projectedIncome);\n\n  const pay = timeSeries.paycheck.filter((x) => DateTime.fromISO(x.date).year > year - 3);\n  const mostRecentPay = pay.at(-1) ?? timeSeries.paycheck.at(-1);\n\n  if (!mostRecentPay) {\n    return [];\n  }\n\n  const yearsToGenerate = Math.max(year - DateTime.fromISO(mostRecentPay.date).year, 1);\n\n  let meritSequence = meritPairs.slice().map((x) => [x]);\n  for (let i = 0; i < yearsToGenerate - 1; i++) {\n    meritSequence = meritSequence.flatMap((x) => {\n      return meritPairs.map((merit) => {\n        return x.slice().concat(merit);\n      });\n    });\n  }\n  return meritSequence;\n};\n\nexport const getEmptyMeritSequence = (year: number, projectedIncome: ProjectedIncome, pay: AccountData[]) => {\n  const timeSeries = projectedIncome.timeSeries;\n  const equityIncreasePct = findSameYear(year, timeSeries.equityPct)?.value ?? 0;\n  const meritIncreasePct = findSameYear(year, timeSeries.meritIncreasePct)?.value ?? 0;\n  const meritBonusPct = findSameYear(year, timeSeries.meritBonusPct)?.value ?? 0;\n  const meritBonuses = pay.map(\n    (x) => findSameYear(DateTime.fromISO(x.date).year, timeSeries.meritBonusPct)?.value ?? 0\n  );\n\n  const lastThreeMeritBonuses = meritBonuses.slice(-3);\n  const lastThreeMeritBonusFactor = meritBonuses.slice(-3).reduce((acc, curr) => acc + curr, 0);\n  const payments = getPayments(\n    DateTime.fromObject({ day: 1, month: 1, year: year - 1 }),\n    DateTime.fromObject({ day: 31, month: 12, year: year }).endOf(\"day\"),\n    valueByDateRange(pay)\n  );\n\n  return [\n    {\n      pay: pay.slice(),\n      lastThreeMeritBonusFactor,\n      lastThreeMeritBonuses,\n      meritBonusPct,\n      meritIncreasePct,\n      payments,\n      equityIncreasePct,\n      retirementBonusPct: 0.15,\n    },\n  ];\n};\n","import { DateTime } from \"luxon\";\nimport { create } from \"mutative\";\nimport { Scenario } from \"shared/models/scenario\";\nimport { store } from \"shared/store\";\nimport { getLocalDateTime } from \"shared/utility/current-date\";\nimport { scenarioStore } from \"../store/scenario-store\";\nimport { getScenarioSize } from \"./merit-sequence\";\n\nconst currentYear = getLocalDateTime().year;\nconst maxYear = (() => {\n  const projectedIncome = store.state.projectedIncome;\n  for (let i = currentYear; i <= currentYear + 10; i++) {\n    if (getScenarioSize(i, projectedIncome) > 2499) {\n      return Math.max(currentYear, i - 1);\n    }\n  }\n  return currentYear + 10;\n})();\n\nconst worker = new Worker(new URL(\"worker.js\", import.meta.url), { type: \"module\" });\nworker.onmessage = (event: MessageEvent<{ year: number; scenarios: Scenario[] }>) => {\n  const isLoading = event.data.year !== maxYear;\n\n  scenarioStore.setState((prev) => {\n    return create(prev, (x) => {\n      x.scenarios[event.data.year] = event.data.scenarios;\n      x.loading = isLoading;\n      x.maxYear = Math.max(event.data.year, x.maxYear);\n      x.minYear = Math.min(event.data.year, x.minYear);\n    });\n  });\n};\n\nconst loadAllScenarios = () => {\n  const projectedIncome = store.state.projectedIncome;\n  const first = projectedIncome.timeSeries.paycheck[1]?.date;\n  const date = first ? DateTime.fromISO(first) : getLocalDateTime();\n  const oldestYear = date.year;\n  worker.postMessage({ year: 2024, projectedIncome });\n  for (let i = oldestYear; i < currentYear; i++) {\n    worker.postMessage({ year: i, projectedIncome });\n  }\n  for (let i = currentYear; i <= maxYear; i++) {\n    worker.postMessage({ year: i, projectedIncome });\n  }\n};\nloadAllScenarios();\n\nlet priorProjectedIncome = store.state.projectedIncome;\nstore.subscribe(() => {\n  if (priorProjectedIncome === store.state.projectedIncome) {\n    return;\n  }\n  scenarioStore.setState(() => ({ loading: false, scenarios: {}, maxYear: currentYear, minYear: currentYear }));\n  priorProjectedIncome = store.state.projectedIncome;\n  loadAllScenarios();\n});\n","import { CssBaseline, ThemeProvider, createTheme } from \"@mui/material\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers\";\nimport { AdapterLuxon } from \"@mui/x-date-pickers/AdapterLuxon\";\nimport \"ag-grid-community/styles/ag-grid.css\";\nimport \"ag-grid-community/styles/ag-theme-quartz.css\";\nimport { App } from \"app/app.tsx\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport \"shared/web-worker/entry\";\nimport \"./index.css\";\n\nconst darkTheme = createTheme({\n  palette: {\n    mode: \"dark\",\n  },\n});\n\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n  <React.StrictMode>\n    <ErrorBoundary\n      fallbackRender={(props) => {\n        return (\n          <>\n            <div style={{ backgroundColor: \"#FFF\" }}>{props.error.message}</div>\n            <div style={{ backgroundColor: \"#FFF\" }}>{props.error.stackTrace}</div>\n          </>\n        );\n      }}\n    >\n      <LocalizationProvider dateAdapter={AdapterLuxon}>\n        <ThemeProvider theme={darkTheme}>\n          <CssBaseline />\n          <App />\n        </ThemeProvider>\n      </LocalizationProvider>\n    </ErrorBoundary>\n  </React.StrictMode>\n);\n"],"names":["sortByDate","select","direction","a","b","toMillis","accountDataValidator","z","object","date","string","value","number","id","accountValidator","type","literal","data","array","loanValidator","principal","ratePct","paymentsPerYear","payment","firstPaymentDate","ownershipPct","mortgageValidator","loan","optional","wealth","record","union","projectedIncome","timeSeries","paycheck","meritIncreasePct","equityPct","meritBonusPct","meritBonus","companyBonusPct","companyBonus","retirementBonus","getDefaultStore","version","projectedWealth","medicareSupplementalTaxThreshold","socialSecurityLimit","socialSecurityTaxRate","medicareSupplementalTaxRate","savingsPerMonth","retirementContributionPaycheck","bonusWitholdingsRate","storeValidator","migration","Error","storeV0Validator","parse","storeV1Validator","createStore","validator","defaultValue","key","invalidData","localData","localStorage","getItem","JSON","safeParse","success","setItem","stringify","err","log","store","CreateStore","subscribe","current","state","AddAccountEntry","accountName","amount","setState","create","prev","next","push","startOf","toString","uuid","sort","DateTime","fromISO","x","addProjectedIncome","concat","removeAccount","removeAccountEntry","idxToRemove","findIndex","splice","removeProjectedIncome","resetStore","setLoan","updateAccountDate","account","idx","toISO","updateAccountName","currentAccountName","newAccountName","updateAccountValue","updateProjectedIncome","NewAccount","forwardRef","props","ref","open","setOpen","useState","nameRef","useRef","error","setError","accountType","setAccountType","undefined","marginLeft","target","children","AgGrid","rest","height","getLocalDateTime","local","shortDate","monthDay","DeleteAccount","padding","width","RenameAccount","nextAccountName","setNextAccountName","event","formatCashShort","Intl","NumberFormat","style","currency","notation","maximumFractionDigits","format","formatCash","Cash","fallback","disableTooltip","compact","tooltip","placement","formatted","useMemo","join","createAccountColumnConfig","headerName","valueFormatter","toFormat","valueGetter","cellEditor","editable","valueSetter","fromJSDate","newValue","isValid","cellRenderer","cellStyle","display","sortable","colId","DeleteForeverIcon","useMissingYears","years","Object","entries","groupBy","year","map","find","janFirst","fromObject","day","month","diff","days","lookup","fromEntries","missing","i","length","AccountTab","useStore","setDate","inputRef","missingYears","hasSameDate","hasSame","onAddEntry","accountColumnConfig","color","startAdornment","findNearestOnOrBefore","getGraphDates","accounts","Set","flatMap","calcLoanBalance","rate","monthlyPayment","annualizedRate","periods","months","totalRate","balance","calcEquity","houseValue","loanBalance","AddEntry","Stack","convertPct","min","datetime","offset","AddLoan","textField","parsed","issues","path","mortgageColumnConfig","toFixed","equity","MortgageTab","allAccounts","mortgageData","values","AccountTabs","firstAccount","keys","setAccount","useEffect","_","getMortgageValue","mortgage","entry","getAccountValue","getGraphValue","useGraphData","dates","graphData","reduce","acc","toJSDate","total","forEach","arr","firstNonZero","slice","WealthChart","series","stacked","xKey","yKey","yName","renderer","datum","content","toISODate","options","theme","title","text","axes","position","label","NetWealth","Card","border","borderRadius","minWidth","paddingBottom","paddingLeft","paddingTop","Value","secondaryValue","tertiaryValue","className","flexDirection","justifyContent","alignItems","gap","flexShrink","CashRange","max","showRange","minFormatted","maxFormatted","Box","formatPercent","getColor","probability","Percent","PercentRange","ClusterValue","ClusterValues","clusters","eventDate","diffNow","CountDown","dateTime","variant","dateFormat","countDownStr","hours","tooltipStr","countDownColor","findSameYear","useRealDate","useDates","meritBonusDate","companyBonusDate","meritIncrease","useDateRanges","base","start","end","endOf","scenarioStore","Store","loading","maxYear","minYear","scenarios","updateProjectedIncomeDate","valueFormatted","UpdateIcon","DataEntry","defaultDate","setAmount","console","flex","Layout","marginBottom","IncomePerPeriodTooltip","incomePerPeriod","perPayday","count","index","ArrowForwardIcon","curr","clusterTitle","ckmeans","Math","median","useClusters","totalPay","pay","taxablePay","at","equityIncreasePct","useHasMeritPairs","every","ProjectedIncome","selectedYear","setSelectedYear","hasMissingPairs","dateRanges","basePay","aprToApr","paychecks","payments","filter","payedOn","reduceRight","unshift","flexWrap","marginRight","set","sx","maxWidth","useFutureRetirementContributions","currentYear","retirementContribution","remaining","remainingPayments","perPaycheck","useFutureSavings","config","systemYear","perMonth","useFutureSocialSecurity","useThresholdTax","useFutureMedicareTax","threshold","taxRate","cumulative","firstOccurrence","currentPaymentIdx","scaleCluster","cluster","factor","scaleClusters","findMostMostLikely","ExpectedValue","Clusers","mostLikely","isFuture","milliseconds","FutureEvents","savings","retirement","medicare","socialSecurity","bonusTakehomeFactor","ThresholdTaxCard","thresholdTax","equals","ClusterCard","useEarliestAccountEntry","fromMillis","Infinity","useFutureBonuses","bonuses","useTimeSeriesWealth","localDateTime","earliest","ssiTaxValue","medicareTaxValue","futureWealth","Array","fill","isLast","accountWealth","graphDate","benchmarkWealth","yoyCash","yoyPct","nice","columnConfig","QueryStatsIcon","WealthTable","e","api","sizeColumnsToFit","ProjectedWealth","overflow","timeMs","time","setTime","interval","setInterval","intervalMs","clearInterval","SafetyButton","inactiveLabel","activatingLabel","activeLabel","confirmedLabel","onConfirm","icon","disabled","safetyState","setSafetyState","setTimeout","downloadJson","filename","storeData","link","document","createElement","download","blob","Blob","href","window","URL","createObjectURL","click","useExport","onExport","useCallback","selectFile","contentType","Promise","input","multiple","accept","onchange","files","from","useImport","resolve","reject","then","reader","FileReader","readAsDataURL","file","onload","readerEvent","result","atob","split","useStoreDataError","hadError","jsonInvalidData","validated","parseError","resetError","removeItem","setProjectedWealth","configName","ConfigEntry","isPercent","isNan","Number","isNaN","Config","InvalidDataDialog","message","App","tab","setTab","onImport","isOpen","setIsOpen","isSettingsOpen","setIsSettingsOpen","top","left","transform","CloseIcon","SettingsIcon","catch","DeleteForever","getScenarioSize","mostRecentPay","yearsToGenerate","pow","worker","Worker","onmessage","isLoading","loadAllScenarios","first","oldestYear","postMessage","priorProjectedIncome","darkTheme","createTheme","palette","mode","ReactDOM","createRoot","getElementById","render","backgroundColor","stackTrace","AdapterLuxon"],"mappings":"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"}