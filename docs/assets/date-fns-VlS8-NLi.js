var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,"name",{value,configurable:!0});function toDate(argument){const argStr=Object.prototype.toString.call(argument);return argument instanceof Date||typeof argument=="object"&&argStr==="[object Date]"?new argument.constructor(+argument):typeof argument=="number"||argStr==="[object Number]"||typeof argument=="string"||argStr==="[object String]"?new Date(argument):new Date(NaN)}__name(toDate,"toDate");function constructFrom(date,value){return date instanceof Date?new date.constructor(value):new Date(value)}__name(constructFrom,"constructFrom");function addDays(date,amount){const _date=toDate(date);return isNaN(amount)?constructFrom(date,NaN):(amount&&_date.setDate(_date.getDate()+amount),_date)}__name(addDays,"addDays");const millisecondsInDay=864e5;function startOfDay(date){const _date=toDate(date);return _date.setHours(0,0,0,0),_date}__name(startOfDay,"startOfDay");function getTimezoneOffsetInMilliseconds(date){const _date=toDate(date),utcDate=new Date(Date.UTC(_date.getFullYear(),_date.getMonth(),_date.getDate(),_date.getHours(),_date.getMinutes(),_date.getSeconds(),_date.getMilliseconds()));return utcDate.setUTCFullYear(_date.getFullYear()),+date-+utcDate}__name(getTimezoneOffsetInMilliseconds,"getTimezoneOffsetInMilliseconds");function differenceInCalendarDays(dateLeft,dateRight){const startOfDayLeft=startOfDay(dateLeft),startOfDayRight=startOfDay(dateRight),timestampLeft=+startOfDayLeft-getTimezoneOffsetInMilliseconds(startOfDayLeft),timestampRight=+startOfDayRight-getTimezoneOffsetInMilliseconds(startOfDayRight);return Math.round((timestampLeft-timestampRight)/millisecondsInDay)}__name(differenceInCalendarDays,"differenceInCalendarDays");function isSameDay(dateLeft,dateRight){const dateLeftStartOfDay=startOfDay(dateLeft),dateRightStartOfDay=startOfDay(dateRight);return+dateLeftStartOfDay==+dateRightStartOfDay}__name(isSameDay,"isSameDay");function isDate(value){return value instanceof Date||typeof value=="object"&&Object.prototype.toString.call(value)==="[object Date]"}__name(isDate,"isDate");function isValid(date){if(!isDate(date)&&typeof date!="number")return!1;const _date=toDate(date);return!isNaN(Number(_date))}__name(isValid,"isValid");function isWeekend(date){const day=toDate(date).getDay();return day===0||day===6}__name(isWeekend,"isWeekend");function differenceInBusinessDays(dateLeft,dateRight){const _dateLeft=toDate(dateLeft);let _dateRight=toDate(dateRight);if(!isValid(_dateLeft)||!isValid(_dateRight))return NaN;const calendarDifference=differenceInCalendarDays(_dateLeft,_dateRight),sign=calendarDifference<0?-1:1,weeks=Math.trunc(calendarDifference/7);let result=weeks*5;for(_dateRight=addDays(_dateRight,weeks*7);!isSameDay(_dateLeft,_dateRight);)result+=isWeekend(_dateRight)?0:sign,_dateRight=addDays(_dateRight,sign);return result===0?0:result}__name(differenceInBusinessDays,"differenceInBusinessDays");export{differenceInBusinessDays as d};
//# sourceMappingURL=date-fns-VlS8-NLi.js.map
