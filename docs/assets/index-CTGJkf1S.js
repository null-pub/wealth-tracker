var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,"name",{value,configurable:!0});import{j as jsxs,b as jsx,F as Fragment,d as jsx$1}from"./@emotion-CZTPRFBj.js";import"./ag-grid-community-Bu5Vi0Ri.js";import{D as Dialog,B as Button,a as DialogTitle,S as Stack,T as TextField,M as MenuItem,b as DialogContent,c as DialogActions,P as Paper,d as Tooltip,e as default_1,G as Grid,A as Alert,f as DatePicker,I as InputAdornment,g as Stack$1,h as Box,i as Tab,j as Tabs,k as Typography,l as Divider,m as Box$1,n as default_1$1,o as TableRow,p as TableCell,q as default_1$2,r as TableBody,s as Table,C as CircularProgress,t as default_1$3,L as LinearProgress,u as DialogContentText,v as TableHead,w as IconButton,x as default_1$4,y as Modal,z as default_1$5,E as createTheme,F as LocalizationProvider,H as AdapterLuxon,J as CssBaseline,K as ThemeProvider}from"./@mui-BFly5LoX.js";import{S as Store,u as useStore}from"./@tanstack-CrH6LG3c.js";import{r as reactExports,a as React}from"./react-B1yKWjgZ.js";import{c as create}from"./mutative-SUdGWNRE.js";import{z}from"./zod-f9fbzKyR.js";import{D as DateTime}from"./luxon-BOQzYXYm.js";import{A as AgGridReact}from"./ag-grid-react-BZBlC_rI.js";import{v as v4}from"./uuid-DmDH2-Ii.js";import{A as AgChartsReact}from"./ag-charts-react-4b2cucqC.js";import{c as ckmeans,m as median}from"./simple-statistics-Cf9J_jgj.js";import{c as client}from"./react-dom-A_5VENys.js";import{E as ErrorBoundary}from"./react-error-boundary-B9Apl3jN.js";import"./hoist-non-react-statics-BI0zVOZ1.js";import"./react-is-BurAzYM9.js";import"./@babel-D2qBTQV_.js";import"./stylis-BvCTCaD4.js";import"./clsx-DvC3wpxN.js";import"./prop-types-CkJzlR31.js";import"./react-transition-group-miU5UcGu.js";import"./dom-helpers-Hfa3ly4k.js";import"./@popperjs-4P2G51Yq.js";import"./use-sync-external-store-DV1g71N1.js";import"./ag-charts-community-DCDJerFf.js";import"./scheduler-Dnx1gCjA.js";__name(function(){const relList=document.createElement("link").relList;if(relList&&relList.supports&&relList.supports("modulepreload"))return;for(const link of document.querySelectorAll('link[rel="modulepreload"]'))processPreload(link);new MutationObserver(mutations=>{for(const mutation of mutations)if(mutation.type==="childList")for(const node of mutation.addedNodes)node.tagName==="LINK"&&node.rel==="modulepreload"&&processPreload(node)}).observe(document,{childList:!0,subtree:!0});function getFetchOpts(link){const fetchOpts={};return link.integrity&&(fetchOpts.integrity=link.integrity),link.referrerPolicy&&(fetchOpts.referrerPolicy=link.referrerPolicy),link.crossOrigin==="use-credentials"?fetchOpts.credentials="include":link.crossOrigin==="anonymous"?fetchOpts.credentials="omit":fetchOpts.credentials="same-origin",fetchOpts}__name(getFetchOpts,"getFetchOpts");function processPreload(link){if(link.ep)return;link.ep=!0;const fetchOpts=getFetchOpts(link);fetch(link.href,fetchOpts)}__name(processPreload,"processPreload")},"polyfill")();const sortByDate=__name((select,direction)=>(a,b)=>direction==="asc"?select(a).toMillis()-select(b).toMillis():select(b).toMillis()-select(a).toMillis(),"sortByDate"),accountDataValidator=z.object({date:z.string(),value:z.number(),id:z.string()}),accountValidator=z.object({type:z.literal("account"),data:z.array(accountDataValidator)}),loanValidator=z.object({principal:z.number(),ratePct:z.number(),paymentsPerYear:z.number(),payment:z.number(),firstPaymentDate:z.string(),ownershipPct:z.number()}),mortgageValidator=z.object({type:z.literal("mortgage"),loan:loanValidator.optional(),data:z.array(accountDataValidator)}),wealth=z.record(z.union([accountValidator,mortgageValidator])),projectedIncome=z.object({timeSeries:z.object({paycheck:z.array(accountDataValidator),meritIncreasePct:z.array(accountDataValidator),equityPct:z.array(accountDataValidator),meritBonusPct:z.array(accountDataValidator),meritBonus:z.array(accountDataValidator),companyBonusPct:z.array(accountDataValidator),companyBonus:z.array(accountDataValidator),retirementBonus:z.array(accountDataValidator)})}),getDefaultStore=__name(()=>({version:2,projectedIncome:{timeSeries:{paycheck:[],meritBonusPct:[],companyBonusPct:[{date:"2020-06-15T00:00:00.000-07:00",value:.182,id:"a52883a7-008b-4b5d-83f7-48bb72a90f27"},{date:"2021-06-15T00:00:00.000-07:00",value:.254,id:"ec5a9913-d2ea-45cf-bbe4-4a28bc3a02eb"},{date:"2022-06-15T00:00:00.000-07:00",value:.272,id:"45f44fc7-544a-4652-87fa-49d70eaa412d"},{date:"2023-06-15T00:00:00.000-07:00",value:.168,id:"97af5146-6a4d-466d-8b9e-96552fc70639"}],meritBonus:[],companyBonus:[],retirementBonus:[],equityPct:[],meritIncreasePct:[]}},wealth:{},projectedWealth:{medicareSupplementalTaxThreshold:2e5,socialSecurityLimit:168600,socialSecurityTaxRate:.062,medicareSupplementalTaxRate:.009,savingsPerMonth:0,retirementContributionPaycheck:0,bonusWitholdingsRate:0}}),"getDefaultStore"),projectedWealth$1=z.object({socialSecurityLimit:z.number(),socialSecurityTaxRate:z.number(),medicareSupplementalTaxThreshold:z.number(),medicareSupplementalTaxRate:z.number(),savingsPerMonth:z.number(),retirementContributionPaycheck:z.number(),bonusWitholdingsRate:z.number()}),projectedWealth=z.object({socialSecurityLimit:z.number(),socialSecurityTaxRate:z.number(),medicareSupplementalTaxThreshold:z.number(),medicareSupplementalTaxRate:z.number(),savingsPerMonth:z.number(),retirementContributionPaycheck:z.number()}),storeValidator$2=z.object({version:z.literal(1),wealth,projectedIncome,projectedWealth}),storeValidator$1=z.object({version:z.literal(2),wealth,projectedIncome,projectedWealth:projectedWealth$1}),storeValidator=z.object({wealth,projectedIncome,projectedWealth}),migration=__name(data=>{if(data==null)throw new Error("parsed data is null or undefined");if(typeof data!="object")throw new Error("Parsed data is not an object");return"version"in data||(storeValidator.parse(data),data.version=1),"version"in data&&data.version===1&&(storeValidator$2.parse(data),data.version=2,data.projectedWealth.bonusWitholdingsRate=0),storeValidator$1.parse(data)},"migration"),createStore=__name((validator2,defaultValue)=>{const key="store",invalidData="store-invalid",localData=localStorage.getItem(key),data=localData?JSON.parse(localData):defaultValue;if(!validator2.safeParse(data).success)try{migration(data),localStorage.setItem(key,JSON.stringify(data))}catch(err){console.log("error",err),console.log("invalid data",data),localStorage.setItem(invalidData,JSON.stringify(data)),localStorage.setItem(key,JSON.stringify(defaultValue))}const store2=new Store(data);return store2.subscribe(()=>{const current=localStorage.getItem(key);current&&localStorage.setItem(`${key}-previous`,current),localStorage.setItem(key,JSON.stringify(store2.state))}),store2},"createStore"),store=createStore(storeValidator$1,getDefaultStore()),AddAccountEntry=__name((accountName,date,amount)=>{store.setState(prev=>create(prev,next=>{next.wealth[accountName].data.push({date:date.startOf("day").toString(),value:amount,id:v4()}),next.wealth[accountName].data.sort(sortByDate(x=>DateTime.fromISO(x.date),"asc"))}))},"AddAccountEntry"),addProjectedIncome=__name((date,timeSeries,value)=>{store.setState(prev=>create(prev,next=>{next.projectedIncome.timeSeries[timeSeries]=next.projectedIncome.timeSeries[timeSeries].concat({date:date.startOf("day").toString(),value,id:v4()}).sort(sortByDate(x=>DateTime.fromISO(x.date),"asc"))}))},"addProjectedIncome"),removeAccount=__name(accountName=>store.setState(prev=>create(prev,next=>{delete next.wealth[accountName]})),"removeAccount"),removeAccountEntry=__name((accountName,id)=>store.setState(prev=>create(prev,next=>{const idxToRemove=next.wealth[accountName].data.findIndex(x=>x.id===id);return next.wealth[accountName].data.splice(idxToRemove,1),next})),"removeAccountEntry"),removeProjectedIncome=__name((accountName,id)=>{store.setState(prev=>create(prev,next=>{const idxToRemove=next.projectedIncome.timeSeries[accountName].findIndex(x=>x.id===id);next.projectedIncome.timeSeries[accountName].splice(idxToRemove,1)}))},"removeProjectedIncome"),resetStore=__name(()=>store.setState(()=>getDefaultStore()),"resetStore"),setLoan=__name((accountName,loan)=>store.setState(prev=>create(prev,next=>{next.wealth[accountName].type==="mortgage"&&(next.wealth[accountName].loan=loan)})),"setLoan"),updateAccountDate=__name((accountName,id,date)=>{store.setState(prev=>create(prev,next2=>{const account=next2.wealth[accountName],idx=account==null?void 0:account.data.findIndex(x=>x.id===id);idx>=0&&(account.data[idx].date=date.toISO())}))},"updateAccountDate"),updateAccountName=__name((currentAccountName,newAccountName)=>store.setState(prev=>create(prev,next=>{next.wealth[newAccountName]=next.wealth[currentAccountName],delete next.wealth[currentAccountName]})),"updateAccountName"),updateAccountValue=__name((accountName,id,value)=>{store.setState(prev=>create(prev,next2=>{const account=next2.wealth[accountName],idx=account==null?void 0:account.data.findIndex(x=>x.id===id);idx>=0&&(account.data[idx].value=value)}))},"updateAccountValue"),updateProjectedIncome=__name((timeSeries,id,value)=>{store.setState(prev=>create(prev,next2=>{const account=next2.projectedIncome.timeSeries[timeSeries],idx=account.findIndex(x=>x.id===id);account[idx].value=value}))},"updateProjectedIncome"),NewAccount=reactExports.forwardRef((props,ref)=>{const[open,setOpen]=reactExports.useState(!1),nameRef=reactExports.useRef(null),[error,setError]=reactExports.useState(!1),[accountType,setAccountType]=reactExports.useState();return jsxs(Fragment,{children:[jsx(Button,{ref,variant:"outlined",onClick:()=>{setOpen(!0),setError(!1),setAccountType(void 0)},sx:{marginLeft:"auto"},children:"add account"}),jsxs(Dialog,{open,onClose:()=>setOpen(!1),children:[jsx(DialogTitle,{children:"Add New Account"}),jsx(DialogContent,{children:jsxs(Stack,{spacing:2,margin:2,children:[jsxs(TextField,{select:!0,color:error?"error":"primary",onChange:value=>{setError(!1),setAccountType(value.target.value)},label:"Type",children:[jsx(MenuItem,{value:"mortgage",children:"Mortgage"}),jsx(MenuItem,{value:"account",children:"Generic Account"})]}),jsx(TextField,{placeholder:"Name",onChange:()=>{setError(!1)},error,inputRef:nameRef})]})}),jsx(DialogActions,{children:jsx(Button,{disabled:error,onClick:()=>{store.setState(prev=>create(prev,next=>{var _a;if(!((_a=nameRef.current)!=null&&_a.value)||!accountType||prev.wealth[nameRef.current.value]){setError(!0);return}next.wealth[nameRef.current.value]={type:accountType,data:[]},setOpen(!1)}))},children:"Add"})})]}),props==null?void 0:props.children]})}),AgGrid=__name(props=>{const{id,...rest}=props;return jsx("div",{id,className:"ag-theme-quartz-dark",style:{height:"100%"},children:jsx(AgGridReact,{...rest,suppressMovableColumns:!0})})},"AgGrid"),getLocalDateTime=__name(()=>DateTime.local(),"getLocalDateTime"),shortDate="yyyy-MM-dd",monthDay="MMM dd",DeleteAccount=__name(props=>{const{accountName}=props;return jsx(Paper,{elevation:3,sx:{padding:2,width:"100%"},children:jsx(Button,{onClick:()=>{removeAccount(accountName)},color:"error",children:"Delete Account"})})},"DeleteAccount"),RenameAccount=__name(props=>{const{accountName}=props,[nextAccountName,setNextAccountName]=reactExports.useState(accountName);return jsx(Paper,{elevation:3,sx:{padding:2},children:jsxs(Stack,{spacing:1,children:[jsx(TextField,{label:"Account Name",value:nextAccountName,onChange:event=>setNextAccountName(event.target.value),placeholder:""}),jsx(Button,{disabled:!nextAccountName,onClick:()=>{updateAccountName(accountName,nextAccountName)},children:"Update Name"})]})})},"RenameAccount"),formatCashShort=new Intl.NumberFormat("en-US",{style:"currency",currency:"USD",notation:"compact",maximumFractionDigits:0}).format,formatCash=new Intl.NumberFormat("en-US",{style:"currency",currency:"USD",maximumFractionDigits:0}).format,Cash=__name(({value,fallback,disableTooltip,compact=!0,tooltip,placement})=>{const formatted=reactExports.useMemo(()=>value===void 0?fallback:compact?formatCashShort(value):formatCash(value),[compact,fallback,value]);return jsx(Tooltip,{placement,disableHoverListener:disableTooltip||!compact||!value,title:[tooltip,formatCash(value)].join(" "),children:jsx("span",{children:formatted})})},"Cash"),createAccountColumnConfig$2=__name(accountName=>[{headerName:"Date",sort:"desc",valueFormatter:x=>{var _a;return(_a=x.value)==null?void 0:_a.toFormat(shortDate)},valueGetter:x=>x.data&&DateTime.fromISO(x.data.date),cellEditor:"agDateCellEditor",editable:!0,valueSetter:x=>{const date=DateTime.fromJSDate(x.newValue);return date.isValid&&updateAccountDate(accountName,x.data.id,date),date.isValid}},{headerName:"Value",valueGetter:x=>{var _a;return(_a=x.data)==null?void 0:_a.value},valueSetter:x=>(updateAccountValue(accountName,x.data.id,+x.newValue),!0),cellRenderer:x=>jsx(Cash,{value:x.value,placement:"left"}),editable:!0,cellEditor:"agNumberCellEditor",type:"numericColumn"},{cellStyle:()=>({display:"inline-flex",padding:"0px"}),sortable:!1,headerName:"",width:80,colId:"actions",cellRenderer:props=>jsx(Button,{onClick:()=>{props.data&&removeAccountEntry(accountName,props.data.id)},color:"error",fullWidth:!0,children:jsx(default_1,{})})}],"createAccountColumnConfig$2"),useMissingYears=__name(account=>reactExports.useMemo(()=>{var _a,_b;const years=Object.entries(Object.groupBy(account.data,x=>DateTime.fromISO(x.date).year)).map(([year2,entries])=>[+year2,!!(entries!=null&&entries.find(x=>{const date=DateTime.fromISO(x.date),janFirst=DateTime.fromObject({day:1,month:1,year:+year2});return date.diff(janFirst,["days","hours"]).days==0}))]).sort(([a],[b])=>a-b),lookup=Object.fromEntries(years),missing=[];for(let i=((_a=years[0])==null?void 0:_a[0])??0;i<=((_b=years[years.length-1])==null?void 0:_b[0]);i++)lookup[i]||missing.push(i);return missing},[account.data]),"useMissingYears"),AccountTab=__name(props=>{const{accountName}=props,account=useStore(store,state=>state.wealth[accountName]),[date,setDate]=reactExports.useState(getLocalDateTime()),inputRef=reactExports.useRef(null),missingYears=useMissingYears(account),hasSameDate=reactExports.useMemo(()=>{var _a;return!!((_a=account==null?void 0:account.data)!=null&&_a.find(x=>date.hasSame(DateTime.fromISO(x.date),"day")))},[account==null?void 0:account.data,date]),onAddEntry=__name(()=>{var _a;inputRef.current&&AddAccountEntry(accountName,date,+((_a=inputRef.current)==null?void 0:_a.value))},"onAddEntry"),accountColumnConfig=reactExports.useMemo(()=>createAccountColumnConfig$2(accountName),[accountName]);return jsxs(Grid,{container:!0,height:"100%",width:"100%",padding:1,spacing:2,children:[jsx(Grid,{lg:3,xl:3,children:jsx(AgGrid,{reactiveCustomComponents:!0,rowData:(account==null?void 0:account.data)??[],columnDefs:accountColumnConfig,id:account+"-history",autoSizeStrategy:{type:"fitGridWidth"},stopEditingWhenCellsLoseFocus:!0},accountName)}),jsx(Grid,{xl:9,lg:8,children:jsx("div",{children:jsxs(Grid,{container:!0,spacing:2,children:[missingYears.length>0&&jsx(Grid,{xs:12,children:jsx(Paper,{elevation:3,children:jsxs(Alert,{severity:"warning",children:["Ensure an entry for Jan 1st for each year ",missingYears.join(", ")]})})}),jsx(Grid,{xl:2,lg:3,children:jsx(Paper,{elevation:3,sx:{padding:2},children:jsxs(Stack,{spacing:1,children:[jsx(DatePicker,{format:shortDate,sx:{color:"white"},label:"Date",defaultValue:date,onChange:value=>value&&setDate(value)}),jsx(TextField,{label:"amount",type:"number",defaultValue:0,inputRef,InputProps:{startAdornment:jsx(InputAdornment,{position:"start",children:"$"})},placeholder:"0"}),jsx(Button,{disabled:!date||hasSameDate,onClick:onAddEntry,children:"Add Entry"})]})})}),jsx(Grid,{xl:8,lg:0}),jsx(Grid,{xl:2,lg:4,children:jsxs(Stack,{spacing:2,children:[jsx(DeleteAccount,{accountName}),jsx(RenameAccount,{accountName},accountName)]})})]})})})]})},"AccountTab"),findNearestOnOrBefore=__name((date,data)=>data.find((x,idx,array)=>{if(idx==0&&DateTime.fromISO(x.date).startOf("day")>=date||idx<array.length-1&&DateTime.fromISO(x.date).startOf("day")<=date&&DateTime.fromISO(data[idx+1].date).startOf("day")>date||idx===array.length-1)return!0}),"findNearestOnOrBefore"),findNearestIdxOnOrBefore=__name((date,data,selector)=>data.findIndex((x,idx,array)=>{if(idx==0&&selector(x)>=date||idx<array.length-1&&selector(x)<=date&&selector(data[idx+1])>date||idx===array.length-1)return!0}),"findNearestIdxOnOrBefore"),getGraphDates=__name(accounts=>[...new Set(accounts.flatMap(x=>x.data.map(x2=>DateTime.fromISO(x2.date).startOf("day").toISO())))].map(x=>DateTime.fromISO(x)).sort((a,b)=>a.toMillis()-b.toMillis()),"getGraphDates"),calcLoanBalance=__name((date,loan)=>{const{firstPaymentDate,paymentsPerYear,principal,ratePct:rate,payment:monthlyPayment}=loan,annualizedRate=rate/paymentsPerYear,periods=date.diff(DateTime.fromISO(firstPaymentDate),"months").months,totalRate=(1+annualizedRate)**periods;return principal*totalRate-monthlyPayment/annualizedRate*(totalRate-1)},"calcLoanBalance"),calcEquity=__name((ownershipPct,houseValue,loanBalance,principal)=>houseValue?houseValue*ownershipPct-loanBalance:principal-loanBalance,"calcEquity"),AddEntry=__name(props=>{const{accountName}=props,ref=reactExports.useRef({date:getLocalDateTime(),value:0}),onAddEntry=__name(()=>{const{date,value}=ref.current;!date||!value||AddAccountEntry(accountName,date,value)},"onAddEntry");return jsx(Paper,{elevation:3,sx:{padding:2},children:jsxs(Stack$1,{spacing:1,children:[jsx(DatePicker,{defaultValue:getLocalDateTime(),onChange:date=>{date&&(ref.current.date=date)}}),jsx(TextField,{label:"Home value",type:"numeric",onChange:event=>{ref.current.value=+event.target.value}}),jsx(Button,{onClick:onAddEntry,children:"Add Home Value"})]})})},"AddEntry"),convertPct=__name(value=>value>1?value/100:value,"convertPct"),validator=z.object({principal:z.number().min(0),ratePct:z.number().min(0),paymentsPerYear:z.number().min(0),payment:z.number().min(0),firstPaymentDate:z.string().datetime({offset:!0}),ownershipPct:z.number().min(0)}),AddLoan=__name(props=>{var _a;const{accountName}=props,loan=useStore(store,x=>{const account=x.wealth[accountName];if("loan"in account)return account.loan}),ref=reactExports.useRef(loan??{}),[error,setError]=reactExports.useState({});return jsx(Paper,{elevation:3,sx:{padding:2},children:jsxs(Stack,{spacing:1,children:[jsx(DatePicker,{defaultValue:(_a=ref.current)!=null&&_a.firstPaymentDate?DateTime.fromISO(ref.current.firstPaymentDate):null,label:"First Payment",slotProps:{textField:{error:!!error.firstPaymentDate}},onChange:value=>{value&&(ref.current.firstPaymentDate=value.startOf("day").toISO())}}),jsx(TextField,{error:!!error.principal,defaultValue:loan==null?void 0:loan.principal,onChange:event=>{ref.current.principal=+event.target.value},variant:"outlined",label:"Principal",type:"number"}),jsx(TextField,{error:!!error.ratePct,defaultValue:loan==null?void 0:loan.ratePct,onChange:event=>{ref.current.ratePct=convertPct(+event.target.value)},variant:"outlined",label:"Rate",type:"number"}),jsx(TextField,{error:!!error.paymentsPerYear,defaultValue:loan==null?void 0:loan.paymentsPerYear,onChange:event=>{ref.current.paymentsPerYear=+event.target.value},variant:"outlined",label:"Payments Per Year",type:"number"}),jsx(TextField,{defaultValue:loan==null?void 0:loan.payment,error:!!error.payment,onChange:event=>{ref.current.payment=+event.target.value},variant:"outlined",label:"Payment",type:"number"}),jsx(TextField,{defaultValue:loan==null?void 0:loan.ownershipPct,error:!!error.ownershipPct,onChange:event=>{ref.current.ownershipPct=convertPct(+event.target.value)},variant:"outlined",label:"Ownership (%)",type:"number"}),jsx(Button,{onClick:()=>{const parsed=validator.safeParse(ref.current);if(parsed.success)setError({}),setLoan(accountName,parsed.data);else{const issues=Object.groupBy(parsed.error.issues,x=>x.path.join(""));setError(issues)}},children:"Set Loan"})]})})},"AddLoan"),createAccountColumnConfig$1=__name(accountName=>[{headerName:"Date",sort:"desc",valueFormatter:x=>{var _a;return(_a=x.value)==null?void 0:_a.toFormat(shortDate)},valueGetter:x=>x.data&&DateTime.fromISO(x.data.date)},{headerName:"Home Value",cellRenderer:x=>jsx(Cash,{value:x.value,placement:"left"}),valueGetter:x=>{var _a;return(_a=x.data)==null?void 0:_a.value},type:"numericColumn"},{cellStyle:()=>({display:"inline-flex",padding:"0px"}),headerName:"",width:80,sortable:!1,colId:"actions",cellRenderer:props=>jsx(Button,{onClick:()=>{var _a;props.data&&removeAccountEntry(accountName,(_a=props.data)==null?void 0:_a.id)},color:"error",fullWidth:!0,children:jsx(default_1,{})})}],"createAccountColumnConfig$1"),mortgageColumnConfig=[{headerName:"Date",sort:"desc",valueFormatter:x=>{var _a;return(_a=x.value)==null?void 0:_a.toFormat(shortDate)},valueGetter:x=>{var _a;return(_a=x.data)==null?void 0:_a.date}},{headerName:"Loan Balance",valueGetter:x=>{var _a;return(_a=x.data)==null?void 0:_a.balance.toFixed(2)},cellRenderer:x=>jsx(Cash,{value:x.value,placement:"left"}),type:"numericColumn"},{headerName:"Equity",valueGetter:x=>{var _a;return(_a=x.data)==null?void 0:_a.equity.toFixed(2)},cellRenderer:x=>jsx(Cash,{value:x.value,placement:"left"}),type:"numericColumn"}],MortgageTab=__name(props=>{const{accountName}=props,account=useStore(store,state=>state.wealth[accountName]),allAccounts=useStore(store,x=>x.wealth),accountColumnConfig=reactExports.useMemo(()=>createAccountColumnConfig$1(accountName),[accountName]),mortgageData=reactExports.useMemo(()=>account!=null&&account.loan?getGraphDates(Object.values(allAccounts)).map(date=>{var _a;const loanBalance=calcLoanBalance(date,account.loan);return{date,balance:loanBalance,equity:calcEquity(account.loan.ownershipPct,(_a=findNearestOnOrBefore(date,account.data))==null?void 0:_a.value,loanBalance,account.loan.principal)}}):[],[account,allAccounts]);return jsxs(Grid,{container:!0,height:"100%",width:"100%",padding:1,spacing:2,children:[jsx(Grid,{lg:3,children:jsx(AgGrid,{reactiveCustomComponents:!0,rowData:(account==null?void 0:account.data)??[],columnDefs:accountColumnConfig,id:account+"-history",autoSizeStrategy:{type:"fitGridWidth"}})}),jsx(Grid,{lg:3,children:jsx(AgGrid,{rowData:mortgageData,columnDefs:mortgageColumnConfig,id:account+"-history",autoSizeStrategy:{type:"fitGridWidth"}})}),jsx(Grid,{lg:6,children:jsx("div",{children:jsxs(Grid,{container:!0,spacing:2,children:[jsx(Grid,{xl:3,children:jsx(AddLoan,{accountName})}),jsx(Grid,{xl:3,children:jsx(AddEntry,{accountName})}),jsx(Grid,{xl:0}),jsx(Grid,{xl:3,children:jsxs(Stack$1,{spacing:2,children:[jsx(DeleteAccount,{accountName}),jsx(RenameAccount,{accountName},accountName)]})})]})})})]})},"MortgageTab"),AccountTabs=__name(()=>{var _a,_b,_c;const accounts=useStore(store,x=>x.wealth),firstAccount=(_a=Object.keys(accounts))==null?void 0:_a[0],[account,setAccount]=reactExports.useState(firstAccount);return reactExports.useEffect(()=>{var _a2;accounts[account]||setAccount(((_a2=Object.keys(accounts))==null?void 0:_a2[0])??"")},[account,accounts]),jsxs(Box,{display:"flex",flexDirection:"column",width:"100%",height:"100%",children:[jsxs(Box,{display:"flex",flex:"0 1 auto",children:[Object.keys(accounts).length>0&&jsx(Tabs,{value:account,onChange:(_,value)=>{setAccount(value)},children:Object.keys(accounts).map(account2=>jsx(Tab,{value:account2,label:account2},account2))}),jsx(Tab,{component:NewAccount})]}),jsxs(Box,{flex:"1 1 auto",children:[((_b=accounts[account])==null?void 0:_b.type)==="account"&&jsx(AccountTab,{accountName:account}),((_c=accounts[account])==null?void 0:_c.type)==="mortgage"&&jsx(MortgageTab,{accountName:account})]})]})},"AccountTabs"),getMortgageValue=__name((date,mortgage)=>{if(!mortgage.loan)return 0;const entry=findNearestOnOrBefore(date,mortgage.data);if(entry!=null&&entry.date&&mortgage.data[0]===entry&&DateTime.fromISO(entry.date).startOf("day")>date)return 0;const{ownershipPct,principal}=mortgage.loan,balance=calcLoanBalance(date,mortgage.loan);return calcEquity(ownershipPct,entry==null?void 0:entry.value,balance,principal)},"getMortgageValue"),getAccountValue=__name((date,account)=>{const entry=findNearestOnOrBefore(date,account.data);return entry!=null&&entry.date&&account.data[0]===entry&&DateTime.fromISO(entry.date).startOf("day")>date?0:entry==null?void 0:entry.value},"getAccountValue"),getGraphValue=__name((date,account)=>{switch(account.type){case"account":return getAccountValue(date,account);case"mortgage":return getMortgageValue(date,account)}},"getGraphValue"),useGraphData=__name(()=>{const wealth2=useStore(store,x=>x.wealth);return reactExports.useMemo(()=>{const dates=getGraphDates(Object.values(wealth2)),accounts=Object.entries(wealth2),graphData=dates.map(date=>accounts.reduce((acc,[accountName,account])=>{const value=getGraphValue(date,account);return value?(acc[accountName]=value,acc.total=acc.total+value):acc[accountName]=null,acc.date=date.toJSDate(),acc},{total:0}));graphData.forEach((x,idx,arr)=>{idx<arr.length-1&&Object.keys(x).forEach(key=>{x[key]===null&&arr[idx+1][key]!==null&&(x[key]=0)})});const firstNonZero=graphData.findIndex(x=>x.total>0);return graphData.slice(firstNonZero)},[wealth2])},"useGraphData"),WealthChart$1=__name(()=>{const wealth2=useStore(store,x=>x.wealth),data=useGraphData(),series=reactExports.useMemo(()=>[...Object.keys(wealth2).map(x=>({stacked:!0,type:"area",xKey:"date",yKey:x,yName:x,tooltip:{renderer:({datum,yKey,xKey})=>({content:`${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCashShort(datum[yKey])}`})}})),{type:"line",xKey:"date",yKey:"total",yName:"Total",tooltip:{renderer:({datum,yKey,xKey})=>({content:`${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCashShort(datum[yKey])}`})}}],[wealth2]),options=reactExports.useMemo(()=>{var _a;return{theme:"ag-default-dark",title:{text:`Total Wealth ${formatCashShort(((_a=data[data.length-1])==null?void 0:_a.total)??0)}`},data,axes:[{type:"time",position:"bottom",label:{format:"%Y"}},{type:"number",position:"left"}],series}},[data,series]);return jsx(AgChartsReact,{options})},"WealthChart$1"),NetWealth=__name(()=>jsxs(Grid,{container:!0,height:"100%",width:"100%",spacing:1,children:[jsx(Grid,{xs:12,height:"50%",children:jsx(WealthChart$1,{})}),jsx(Grid,{xs:12,height:"50%",children:jsx(AccountTabs,{})})]}),"NetWealth"),Card=__name(props=>{const{title,children}=props;return jsxs(Box,{sx:{border:"1px solid rgba(255,255,255,0.1)",borderRadius:2,minWidth:480,backgroundColor:"#121212",boxShadow:"2px 3px 9px 1px #12121252"},children:[jsx(Typography,{sx:{paddingBottom:1,paddingLeft:2,paddingTop:1,display:"flex"},variant:"h5",children:title}),children&&jsxs(Fragment,{children:[jsx(Divider,{}),jsx(Stack,{padding:1,direction:"row",spacing:.5,width:"max-content",minHeight:80,children})]})]})},"Card"),Value=__name(props=>{const{children,secondaryValue,tertiaryValue,title,className}=props;return jsxs(Box,{sx:{display:"flex",minWidth:106,height:64,padding:"0px 8px",flexDirection:"column",justifyContent:"center",alignItems:"flex-start",gap:.5,flexShrink:0},className,children:[jsxs(Box,{display:"flex",alignItems:"center",gap:.5,children:[jsx(Box,{fontSize:18,fontWeight:700,lineHeight:"20px",children:children||"?"}),!!(secondaryValue??tertiaryValue)&&jsx(Box,{alignSelf:"flex-end",fontSize:12,fontWeight:500,lineHeight:"16px",textTransform:"uppercase",color:"#888",children:secondaryValue??tertiaryValue})]}),jsx(Box,{fontSize:12,fontWeight:500,lineHeight:"16px",textTransform:"uppercase",children:title})]})},"Value"),CashRange=__name(({min,max,fallback,disableTooltip,compact=!0})=>{const showRange=reactExports.useMemo(()=>{const minFormatted=compact?formatCashShort(min??0):formatCash(min??0),maxFormatted=compact?formatCashShort(max??0):formatCash(max??0);return minFormatted!==maxFormatted},[compact,max,min]);return jsxs(Box$1,{children:[!showRange&&jsx(Cash,{fallback,value:max,tooltip:min!=max?`${formatCash(min??0)} - `:void 0,disableTooltip,compact}),showRange&&jsxs(Fragment,{children:[jsx(Cash,{value:min,fallback,disableTooltip,compact}),jsx("span",{children:" - "}),jsx(Cash,{value:max,fallback,disableTooltip,compact})]})]})},"CashRange"),formatPercent=new Intl.NumberFormat("en-us",{style:"percent",maximumFractionDigits:1}).format,getColor=__name(probability=>probability?probability>=.5?"green":probability>=.25?"yellow":"red":"inherit","getColor"),Percent=__name(({value,probability,fallback})=>jsx(Box$1,{color:getColor(probability),children:value?formatPercent(value):fallback}),"Percent"),PercentRange=__name(({min,max,fallback})=>jsxs(Box$1,{children:[(max??0)/(min??1)<=1.005&&jsx(Percent,{fallback,value:max}),(max??0)/(min??1)>1.005&&jsxs(Fragment,{children:[jsx(Percent,{value:min,fallback}),jsx("span",{children:" - "}),jsx(Percent,{value:max,fallback})]})]}),"PercentRange"),ClusterValue=__name(props=>{const{min,max,probability,title,compact}=props;return jsxs(Value,{title:jsxs(Box,{display:"flex",gap:1,children:[jsx("span",{children:title}),probability<1&&jsx(Percent,{probability,value:probability})]}),children:[min<1&&min>0&&jsx(PercentRange,{min,max}),min>1&&jsx(CashRange,{compact,min,max}),min===0&&0]})},"ClusterValue"),ClusterValues=__name(props=>{const{clusters:clusters2,eventDate,compact=!0}=props;return clusters2==null?void 0:clusters2.map((x,i,arr)=>{const title=arr.length===1&&((eventDate==null?void 0:eventDate.diffNow().toMillis())??-1)>0?"Expected":x.title;return jsx$1(ClusterValue,{...x,title,compact,key:i})})},"ClusterValues"),CountDown$1=__name(props=>{const{dateTime,children,variant="countdown",dateFormat=shortDate}=props,countDownStr=reactExports.useMemo(()=>{if(!dateTime)return"??";if(variant==="countdown"){const diff=dateTime==null?void 0:dateTime.diff(getLocalDateTime(),["years","months","days","hours"]),format=`${diff.years>0?"y 'year' ":""}${diff.months>0?"M 'months' ":""}${diff.days>0&&diff.months==0?"d 'days'":""}${diff.hours>0&&diff.days==0?"h 'hours'":""}`;return diff==null?void 0:diff.toFormat(format)}return dateTime==null?void 0:dateTime.toFormat(dateFormat)},[dateFormat,dateTime,variant]),tooltipStr=reactExports.useMemo(()=>variant==="countdown"?dateTime==null?void 0:dateTime.toFormat(dateFormat):dateTime==null?void 0:dateTime.diffNow(["months","days","hours"]).toFormat("d 'days'"),[dateFormat,dateTime,variant]),countDownColor=reactExports.useMemo(()=>{if(!dateTime)return"white";const days=dateTime.diffNow("days").days;return days<30?"green":days<60?"yellow":"red"},[dateTime]);return dateTime&&dateTime>getLocalDateTime()?jsx(Tooltip,{title:tooltipStr,children:jsx(Box,{color:countDownColor,children:countDownStr})}):children},"CountDown$1");function findSameYear(date,data){const year2=typeof date=="number"?date:date.year;return data.find(x=>DateTime.fromISO(x.date).year===year2)}__name(findSameYear,"findSameYear");const useRealDate=__name((year2,data)=>reactExports.useMemo(()=>{if(!year2)return;const meritBonus=findSameYear(year2,data);if(meritBonus)return DateTime.fromISO(meritBonus.date)},[data,year2]),"useRealDate"),useDates=__name(year2=>{const timeSeries=useStore(store,x=>x.projectedIncome.timeSeries),meritBonusDate=useRealDate(year2,timeSeries.meritBonus),companyBonusDate=useRealDate(year2,timeSeries.companyBonus);return reactExports.useMemo(()=>({meritIncrease:DateTime.fromObject({month:4,day:1,year:year2}),meritBonus:meritBonusDate??DateTime.fromObject({month:4,day:15,year:year2}),companyBonus:companyBonusDate??DateTime.fromObject({month:6,day:15,year:year2}),retirementBonus:DateTime.fromObject({month:7,day:15,year:year2})}),[companyBonusDate,meritBonusDate,year2])},"useDates"),useDateRanges=__name(year2=>reactExports.useMemo(()=>({base:{start:DateTime.fromObject({month:1,day:1,year:year2}),end:DateTime.fromObject({month:12,day:31,year:year2}).endOf("day")},meritBonus:{start:DateTime.fromObject({month:1,day:1,year:year2-1}),end:DateTime.fromObject({month:12,day:31,year:year2-1}).endOf("day")},companyBonus:{start:DateTime.fromObject({day:1,month:4,year:year2-1}),end:DateTime.fromObject({day:31,month:3,year:year2}).endOf("day")},retirementBonus:{start:DateTime.fromObject({day:1,month:7,year:year2-1}),end:DateTime.fromObject({day:30,month:6,year:year2}).endOf("day")}}),[year2]),"useDateRanges"),year=getLocalDateTime().year,scenarioStore=new Store({loading:!0,maxYear:year,minYear:year,scenarios:{}}),updateProjectedIncomeDate=__name((timeSeries,id,date)=>{store.setState(prev=>create(prev,next2=>{const account=next2.projectedIncome.timeSeries[timeSeries],idx=account.findIndex(x=>x.id===id);account[idx].date=date.toISO()}))},"updateProjectedIncomeDate"),createAccountColumnConfig=__name((accountName,variant)=>[{headerName:"Date",sort:"desc",valueFormatter:x=>{var _a;return(_a=x.value)==null?void 0:_a.toFormat(shortDate)},valueGetter:x=>x.data&&DateTime.fromISO(x.data.date),cellRenderer:x=>jsxs(Stack$1,{direction:"row",alignItems:"center",children:[x.valueFormatted," ",x.value&&x.value>DateTime.local()&&jsx(Tooltip,{title:"Future Event",children:jsx(default_1$1,{htmlColor:"yellow"})})]}),cellEditor:"agDateCellEditor",editable:!0,valueSetter:x=>{const date=DateTime.fromJSDate(x.newValue);return date.isValid&&updateProjectedIncomeDate(accountName,x.data.id,DateTime.fromJSDate(x.newValue)),date.isValid}},{headerName:"Value",valueGetter:x=>{var _a;return(_a=x.data)==null?void 0:_a.value},cellRenderer:x=>variant==="cash"?jsx(Cash,{compact:!1,value:x.value}):jsx(Percent,{value:x.value}),type:"numericColumn",editable:!0,cellEditor:"agNumberCellEditor",valueSetter:x=>(updateProjectedIncome(accountName,x.data.id,+x.newValue),!0)},{cellStyle:()=>({display:"inline-flex",padding:"0px"}),sortable:!1,headerName:"",width:80,colId:"actions",cellRenderer:props=>jsx(Button,{onClick:()=>{var _a;props.data&&removeProjectedIncome(accountName,(_a=props.data)==null?void 0:_a.id)},color:"error",fullWidth:!0,children:jsx(default_1,{})})}],"createAccountColumnConfig"),DataEntry=__name(props=>{const{timeSeries,defaultDate,variant="number"}=props,account=useStore(store,state=>state.projectedIncome.timeSeries[timeSeries]),[date,setDate]=reactExports.useState(defaultDate),[amount,setAmount]=reactExports.useState(null),hasSameDate=reactExports.useMemo(()=>!!(account!=null&&account.find(x=>date.hasSame(DateTime.fromISO(x.date),"day"))),[account,date]),onAddEntry=__name(()=>{amount!=null&&(addProjectedIncome(date,timeSeries,variant==="percent"?amount/100:amount),setAmount(null))},"onAddEntry"),accountColumnConfig=reactExports.useMemo(()=>createAccountColumnConfig(timeSeries,variant),[timeSeries,variant]);return jsxs(Box,{display:"flex",flexDirection:"column",height:"100%",children:[jsxs(Stack,{spacing:2,flex:"0 1 auto",children:[jsx(DatePicker,{format:shortDate,sx:{color:"white"},label:"Date",value:date,onChange:value=>{console.log(value),value&&setDate(value)}}),jsx(TextField,{label:"amount",value:amount??"",type:"number",onChange:event=>event.target.value===""?setAmount(null):setAmount(+event.target.value),InputProps:{startAdornment:variant!=="number"&&jsx(InputAdornment,{position:"start",children:variant==="cash"?"$":"%"})}}),jsx(Button,{disabled:amount===null||!date||hasSameDate,onClick:onAddEntry,children:"Add Entry"})]}),jsx(Box,{sx:{paddingTop:2,flex:"1 1 auto"},children:jsx(AgGrid,{reactiveCustomComponents:!0,rowData:account??[],columnDefs:accountColumnConfig,id:account+"-history",autoSizeStrategy:{type:"fitGridWidth"},stopEditingWhenCellsLoseFocus:!0})})]})},"DataEntry"),Layout=__name(props=>{const{title,accountName,defaultDate,variant}=props;return jsx(Paper,{sx:{padding:2,height:"100%",width:450,flexShrink:0},children:jsxs(Box,{display:"flex",flexDirection:"column",height:"100%",children:[jsx(Box,{flex:"0 1 auto",marginBottom:2,children:jsxs(Typography,{sx:{marginBottom:2},variant:"h5",children:[title," ",variant==="cash"&&jsx(Tooltip,{title:jsxs(Fragment,{children:[jsx("span",{children:"Cash values are used in lieu of Percent values."}),jsx("br",{}),jsx("span",{children:"Cash values are considered actual payment values."})]}),children:jsx("span",{children:"($)"})}),variant==="percent"&&jsx(Tooltip,{title:"Percentage values are used for predictions.",children:jsx("span",{children:"(%)"})})]})}),jsx(Box,{flex:"1 1 auto",children:jsx(DataEntry,{variant,timeSeries:accountName,defaultDate})})]})})},"Layout"),IncomePerPeriodTooltip=__name(props=>{const{incomePerPeriod}=props;return jsx(Table,{sx:{width:"max-content"},children:jsxs(TableBody,{children:[incomePerPeriod.map(({start,end,value,perPayday,count},index)=>jsxs(TableRow,{children:[jsx(TableCell,{children:jsx(Cash,{value,compact:!1})}),jsx(TableCell,{children:start.toFormat(shortDate)}),jsx(TableCell,{children:jsx(default_1$2,{})}),jsx(TableCell,{children:end.toFormat(shortDate)}),jsxs(TableCell,{children:[jsx(Cash,{value:perPayday,compact:!1})," x ",count]})]},index)),jsxs(TableRow,{children:[jsx(TableCell,{colSpan:4,children:"Total:"}),jsx(TableCell,{children:jsx(Cash,{value:incomePerPeriod.reduce((acc,curr)=>curr.value+acc,0),compact:!1})})]})]})})},"IncomePerPeriodTooltip"),clusterTitle=__name((index,length)=>length===1?"Actual":length==2?["Low","High"][index]:["Low","Med","High"][index],"clusterTitle"),clusters=__name(values=>values?ckmeans(values,Math.min(3,values.length)).map((x,i,arr)=>({min:Math.min(...x),max:Math.max(...x),median:median(x),probability:x.length/values.length,title:clusterTitle(i,arr.length)})):[],"clusters"),useClusters=__name(year2=>{const scenarios=useStore(scenarioStore,x=>x.scenarios[year2]);return reactExports.useMemo(()=>(scenarios==null?void 0:scenarios.length)===0?{totalPay:[],meritBonus:[],retirementBonus:[],companyBonus:[],pay:[],meritIncrease:[],scenarios,taxablePay:[]}:{totalPay:clusters(scenarios==null?void 0:scenarios.map(x=>x.totalPay)),meritBonus:clusters(scenarios==null?void 0:scenarios.map(x=>x.meritBonus)),retirementBonus:clusters(scenarios==null?void 0:scenarios.map(x=>x.retirementBonus)),companyBonus:clusters(scenarios==null?void 0:scenarios.map(x=>x.companyBonus)),pay:clusters(scenarios==null?void 0:scenarios.map(x=>{var _a;return((_a=x.pay.at(-1))==null?void 0:_a.value)??0})),meritIncrease:clusters(scenarios==null?void 0:scenarios.map(x=>x.meritIncreasePct+x.equityIncreasePct)),taxablePay:clusters(scenarios==null?void 0:scenarios.map(x=>x.taxablePay)),scenarios},[scenarios])},"useClusters"),useHasMeritPairs=__name(()=>{const timeSeries=useStore(store,x=>x.projectedIncome.timeSeries);return reactExports.useMemo(()=>timeSeries.meritIncreasePct.every(x=>!!findSameYear(DateTime.fromISO(x.date).year,timeSeries.meritBonusPct))&&timeSeries.meritBonusPct.every(x=>!!findSameYear(DateTime.fromISO(x.date).year,timeSeries.meritIncreasePct)),[timeSeries.meritBonusPct,timeSeries.meritIncreasePct])},"useHasMeritPairs"),ProjectedIncome=__name(()=>{const[selectedYear,setSelectedYear]=reactExports.useState(getLocalDateTime().year),hasMissingPairs=useHasMeritPairs(),clusters2=useClusters(selectedYear),dates=useDates(selectedYear),dateRanges=useDateRanges(selectedYear),basePay=reactExports.useMemo(()=>{var _a;if(clusters2.pay.length===1)return(_a=clusters2.scenarios)==null?void 0:_a[0].basePay},[clusters2.pay.length,clusters2.scenarios]),aprToApr=reactExports.useMemo(()=>{var _a;if(clusters2.pay.length===1)return(_a=clusters2.scenarios)==null?void 0:_a[0].aprToApr},[clusters2.pay.length,clusters2.scenarios]),paychecks=reactExports.useMemo(()=>{var _a;return clusters2.pay.length!==1?void 0:(((_a=clusters2.scenarios)==null?void 0:_a[0].payments.filter(x=>{const payedOn=DateTime.fromISO(x.payedOn);return payedOn>=dateRanges.base.start&&payedOn<=dateRanges.base.end}))??[]).reduceRight((acc,curr)=>{var _a2,_b;return((_b=(_a2=acc[0])==null?void 0:_a2[0])==null?void 0:_b.value)===curr.value?acc[0].unshift(curr):acc.unshift([curr]),acc},[]).reduce((acc,curr)=>(acc.push({start:DateTime.fromISO(curr[0].payedOn),end:DateTime.fromISO(curr[curr.length-1].payedOn),value:curr.reduce((acc2,curr2)=>acc2+curr2.value,0),perPayday:curr[0].value,count:curr.length}),acc),[])},[clusters2.pay.length,clusters2.scenarios,dateRanges.base.end,dateRanges.base.start]),scenarios=useStore(scenarioStore);return jsxs(Box$1,{display:"flex",flexDirection:"row",height:"100%",width:"100%",children:[jsx(Box$1,{flex:"0 1 auto",children:jsxs(Stack$1,{gap:2,direction:"column",overflow:"auto",height:"100%",paddingRight:1,children:[jsx(Card,{title:jsxs(Box$1,{display:"flex",alignItems:"center",gap:2,width:"100%",children:[jsx("span",{children:"Income"}),jsx(CountDown$1,{dateTime:dates.companyBonus}),jsx(Box$1,{sx:{display:"flex",marginLeft:"auto",alignItems:"center",flexWrap:"wrap"},children:scenarios.loading&&jsx(CircularProgress,{style:{width:20,height:20}})}),jsx(DatePicker,{sx:{width:90,marginRight:2},label:"year",views:["year"],minDate:getLocalDateTime().set({year:scenarios.minYear}),maxDate:getLocalDateTime().set({year:scenarios.maxYear}),defaultValue:getLocalDateTime(),slotProps:{textField:{variant:"standard",label:""}},onYearChange:year2=>{setSelectedYear(year2.year)}})]}),children:jsx(ClusterValues,{clusters:clusters2.totalPay,eventDate:dates.companyBonus})}),jsxs(Card,{title:jsxs(Box$1,{display:"flex",width:"max-content",gap:2,marginRight:2,children:[jsx("span",{children:"Paycheck"}),jsx(CountDown$1,{dateTime:dates.meritIncrease})]}),children:[jsx(ClusterValues,{clusters:clusters2.pay,eventDate:dates.meritIncrease,compact:!1}),basePay&&jsx(Tooltip,{componentsProps:{tooltip:{sx:{maxWidth:"none"}}},title:paychecks&&jsx(IncomePerPeriodTooltip,{incomePerPeriod:paychecks}),children:jsx("div",{children:jsx(Value,{title:"Base Pay",children:jsx(Cash,{disableTooltip:!0,value:basePay})})})}),aprToApr&&jsx(Value,{title:"APR to APR",children:jsx(Cash,{value:aprToApr})})]}),jsx(Card,{title:jsxs(Box$1,{display:"flex",width:"max-content",gap:2,marginRight:2,children:[jsx("span",{children:"Merit Increase"}),jsx(CountDown$1,{dateTime:dates.meritIncrease})]}),children:jsx(ClusterValues,{clusters:clusters2.meritIncrease,eventDate:dates.meritIncrease})}),jsx(Card,{title:jsxs(Box$1,{display:"flex",width:"max-content",gap:2,marginRight:2,children:[jsx("span",{children:"Merit Bonus"}),jsx(CountDown$1,{dateTime:dates.meritBonus})]}),children:jsx(ClusterValues,{clusters:clusters2.meritBonus,eventDate:dates.meritBonus})}),jsx(Card,{title:jsxs(Box$1,{display:"flex",width:"max-content",gap:2,marginRight:2,children:[jsx("span",{children:"Company Bonus"}),jsx(CountDown$1,{dateTime:dates.companyBonus})]}),children:jsx(ClusterValues,{clusters:clusters2.companyBonus,eventDate:dates.companyBonus})}),jsx(Card,{title:jsxs(Box$1,{display:"flex",width:"max-content",gap:2,marginRight:2,children:[jsx("span",{children:"Retirement Bonus"}),jsx(CountDown$1,{dateTime:dates.retirementBonus})]}),children:jsx(ClusterValues,{clusters:clusters2.retirementBonus,eventDate:dates.retirementBonus})}),!hasMissingPairs&&jsx(Alert,{severity:"error",children:"Every Merit Increase must have a paired Merit Bonus percent"})]})}),jsx(Box$1,{flex:"1 1 auto",overflow:"auto",paddingBottom:2,paddingLeft:1,children:jsxs(Box$1,{display:"flex",height:"100%",width:"100%",gap:2,children:[jsx(Layout,{accountName:"paycheck",variant:"cash",defaultDate:DateTime.fromObject({day:1,month:4,year:selectedYear}),title:"Income Per Paycheck"}),jsx(Layout,{title:"Merit Increase",accountName:"meritIncreasePct",variant:"percent",defaultDate:dates.meritIncrease}),jsx(Layout,{title:"Equity Increase",accountName:"equityPct",variant:"percent",defaultDate:dates.meritIncrease}),jsx(Layout,{title:"Merit Bonus",accountName:"meritBonusPct",variant:"percent",defaultDate:dates.meritBonus}),jsx(Layout,{title:"Merit Bonus",accountName:"meritBonus",variant:"cash",defaultDate:dates.meritBonus}),jsx(Layout,{title:"Company Bonus Factor",accountName:"companyBonusPct",defaultDate:dates.companyBonus,variant:"percent"}),jsx(Layout,{title:"Company Bonus",accountName:"companyBonus",defaultDate:dates.companyBonus,variant:"cash"}),jsx(Layout,{title:"Retirement Bonus",accountName:"retirementBonus",defaultDate:dates.retirementBonus,variant:"cash"})]})})]})},"ProjectedIncome"),useFutureRetirementContributions=__name(year2=>{const scenarios=useStore(scenarioStore,x=>x.scenarios[year2]),retirementContribution=useStore(store,x=>x.projectedWealth.retirementContributionPaycheck);return reactExports.useMemo(()=>{var _a;return{remaining:Math.min(((_a=scenarios==null?void 0:scenarios.at(0))==null?void 0:_a.remainingPayments)??0,26)*retirementContribution,perPaycheck:retirementContribution}},[retirementContribution,scenarios])},"useFutureRetirementContributions"),useFutureSavings=__name(year2=>{const config=useStore(store,x=>x.projectedWealth),dateRanges=useDateRanges(year2);return reactExports.useMemo(()=>({remaining:config.savingsPerMonth*Math.min(Math.max(0,dateRanges.base.end.diffNow("months").months),12),perMonth:config.savingsPerMonth}),[config.savingsPerMonth,dateRanges.base])},"useFutureSavings"),useFutureSocialSecurity=__name(year2=>{const config=useStore(store,x=>x.projectedWealth);return useThresholdTax(year2,config.socialSecurityLimit,config.socialSecurityTaxRate)},"useFutureSocialSecurity"),useFutureMedicareTax=__name(year2=>{const config=useStore(store,x=>x.projectedWealth),taxes=useThresholdTax(year2,config.medicareSupplementalTaxThreshold,-1*config.medicareSupplementalTaxRate);return reactExports.useMemo(()=>({min:taxes.max,max:taxes.min}),[taxes])},"useFutureMedicareTax"),useThresholdTax=__name((year2,threshold,taxRate)=>{const scenarios=useStore(scenarioStore,x=>x.scenarios[year2]);return reactExports.useMemo(()=>(scenarios??[]).map(x=>{var _a,_b,_c;const total=taxRate*Math.max(0,(((_a=x.payments.at(-1))==null?void 0:_a.cumulative)??0)-threshold),firstOccurrence=(_b=x.payments.find(x2=>x2.cumulative>threshold))==null?void 0:_b.payedOn,remaining=x.payments.slice(x.currentPaymentIdx).filter(x2=>x2.cumulative>=threshold).reduce((acc,curr)=>acc+Math.min(curr.value,curr.cumulative-threshold)*taxRate,0),perPaycheck=total&&taxRate*(((_c=x.payments.at(-1))==null?void 0:_c.value)??0);return{total,firstOccurrence:firstOccurrence?DateTime.fromISO(firstOccurrence):void 0,remaining,perPaycheck}}).filter(x=>x.firstOccurrence).reduce((acc,curr,i)=>i==0?{min:curr,max:curr}:(curr.total<acc.min.total&&(acc.min=curr),curr.total>acc.max.total&&(acc.max=curr),acc),{}),[threshold,taxRate,scenarios])},"useThresholdTax"),scaleCluster=__name((cluster,factor)=>{if(cluster)return{...cluster,min:cluster.min*factor,max:cluster.max*factor,median:cluster.median*factor}},"scaleCluster"),scaleClusters=__name((clusters2,factor)=>clusters2==null?void 0:clusters2.filter(x=>x).map(x=>scaleCluster(x,factor)),"scaleClusters"),findMostMostLikely=__name(cluster=>cluster.length===0?void 0:cluster.reduce((acc,curr)=>acc.probability>curr.probability?acc:curr),"findMostMostLikely"),ExpectedValue=__name(Clusers=>Clusers.length==0?[]:[Clusers.reduce((acc,curr)=>{if(curr.length===0)return acc;const mostLikely=findMostMostLikely(curr);return acc.max+=(mostLikely==null?void 0:mostLikely.max)??0,acc.min+=(mostLikely==null?void 0:mostLikely.min)??0,acc.median+=(mostLikely==null?void 0:mostLikely.median)??0,acc},{min:0,max:0,median:0,title:"Actual",probability:0})],"ExpectedValue"),isFuture=__name(date=>date.diffNow("milliseconds").milliseconds>0,"isFuture"),FutureEvents=__name(props=>{var _a,_b,_c,_d;const{year:year2,onChange}=props,dates=useDates(year2),savings=useFutureSavings(year2),retirement=useFutureRetirementContributions(year2),medicare=useFutureMedicareTax(year2),socialSecurity=useFutureSocialSecurity(year2),clusters2=useClusters(year2),bonusTakehomeFactor=useStore(store,x=>1-x.projectedWealth.bonusWitholdingsRate),total=reactExports.useMemo(()=>{var _a2,_b2,_c2,_d2;const remaining=[isFuture(dates.meritBonus)&&scaleClusters(clusters2.meritBonus,bonusTakehomeFactor),isFuture(dates.companyBonus)&&scaleClusters(clusters2.companyBonus,bonusTakehomeFactor),isFuture(dates.retirementBonus)&&clusters2.retirementBonus,[{min:savings.remaining,max:savings.remaining,probability:1,median:1}],[{min:retirement.remaining,max:retirement.remaining,probability:1,median:1}],[{min:((_a2=socialSecurity.min)==null?void 0:_a2.remaining)??0,max:((_b2=socialSecurity.max)==null?void 0:_b2.remaining)??0,probability:1,median:1}],[{min:(_c2=medicare.min)==null?void 0:_c2.remaining,max:(_d2=medicare.max)==null?void 0:_d2.remaining,probability:1,median:1}]].filter(x=>x!==!1);return ExpectedValue(remaining)},[bonusTakehomeFactor,clusters2.companyBonus,clusters2.meritBonus,clusters2.retirementBonus,dates.companyBonus,dates.meritBonus,dates.retirementBonus,(_a=medicare.max)==null?void 0:_a.remaining,(_b=medicare.min)==null?void 0:_b.remaining,retirement.remaining,savings.remaining,(_c=socialSecurity.max)==null?void 0:_c.remaining,(_d=socialSecurity.min)==null?void 0:_d.remaining]);return jsx(Fragment,{children:jsxs(Stack$1,{spacing:2,width:550,paddingRight:1,children:[jsx(Card,{title:jsxs(Fragment,{children:[jsx("span",{children:"Remaining Projected Wealth"}),jsx(DatePicker,{sx:{width:90,marginRight:2,marginLeft:"auto"},label:"year",views:["year"],minDate:getLocalDateTime(),maxDate:getLocalDateTime().plus({years:1}),value:getLocalDateTime().set({year:year2}),slotProps:{textField:{variant:"standard",label:""}},onYearChange:year22=>{onChange(year22.year)}})]}),children:jsx(ClusterValues,{clusters:total,eventDate:dates.companyBonus})}),isFuture(dates.meritBonus)&&jsx(ClusterCard,{title:"Merit Bonus",date:dates.meritBonus,cluster:scaleClusters(clusters2.meritBonus,bonusTakehomeFactor)}),isFuture(dates.companyBonus)&&jsx(ClusterCard,{title:"Company Bonus",date:dates.companyBonus,cluster:scaleClusters(clusters2.companyBonus,bonusTakehomeFactor)}),isFuture(dates.retirementBonus)&&jsx(ClusterCard,{title:"Retirement Bonus",date:dates.retirementBonus,cluster:clusters2.retirementBonus}),!!socialSecurity.min&&jsx(ThresholdTaxCard,{thresholdTax:socialSecurity,title:"Social Security Limit"}),!!medicare.min&&jsx(ThresholdTaxCard,{thresholdTax:medicare,title:"Medicare Supplmental Tax"}),jsxs(Card,{title:"Savings & Retirement",children:[!!savings.perMonth&&jsx(Value,{title:"Expected savings",secondaryValue:jsx(Cash,{tooltip:"Per Month",value:savings.perMonth}),children:jsx(Cash,{tooltip:"Total Remaining",value:savings.remaining})}),!!retirement.perPaycheck&&jsx(Value,{title:"retirement contribution",secondaryValue:jsx(Cash,{tooltip:"Per Paycheck",value:retirement.perPaycheck}),children:jsx(Cash,{tooltip:"Total Remaining",value:retirement.remaining})})]})]})})},"FutureEvents"),ThresholdTaxCard=__name(props=>{var _a,_b,_c,_d,_e,_f,_g;const{thresholdTax,title}=props;return jsxs(Card,{title:jsxs(Box$1,{display:"flex",width:"max-content",gap:1,marginRight:2,children:[jsx("span",{children:title}),jsx(CountDown$1,{dateFormat:monthDay,variant:"date",dateTime:(_a=thresholdTax.max)==null?void 0:_a.firstOccurrence}),thresholdTax.min&&thresholdTax.max&&!thresholdTax.min.firstOccurrence.equals(thresholdTax.max.firstOccurrence)&&jsxs(Fragment,{children:[jsx("span",{children:"or"}),jsx(CountDown$1,{dateFormat:monthDay,variant:"date",dateTime:thresholdTax.min.firstOccurrence})]})]}),children:[thresholdTax.max&&thresholdTax.max.total===((_b=thresholdTax.min)==null?void 0:_b.total)&&jsx(Value,{title:"Remaining",children:jsx(Cash,{value:(_c=thresholdTax.max)==null?void 0:_c.remaining,compact:!1})}),thresholdTax.max&&thresholdTax.max.total!==((_d=thresholdTax.min)==null?void 0:_d.total)&&jsxs(Fragment,{children:[jsx(Value,{title:"Early",children:jsx(Cash,{value:(_e=thresholdTax.max)==null?void 0:_e.remaining,compact:!1})}),jsx(Value,{title:"Late",children:jsx(Cash,{value:(_f=thresholdTax.min)==null?void 0:_f.total,compact:!1})})]}),jsx(Value,{title:"Per Paycheck",children:jsx(Cash,{value:(_g=thresholdTax.max)==null?void 0:_g.perPaycheck,compact:!1})})]})},"ThresholdTaxCard"),ClusterCard=__name(props=>{const{date,cluster,title}=props;return jsx(Card,{title:jsxs(Box$1,{display:"flex",width:"max-content",gap:2,marginRight:2,children:[jsx("span",{children:title}),jsx(CountDown$1,{variant:"date",dateFormat:monthDay,dateTime:date})]}),children:jsx(ClusterValues,{clusters:cluster,eventDate:date})})},"ClusterCard"),useEarliestAccountEntry=__name(()=>{const accounts=useStore(store,x=>x.wealth);return DateTime.fromMillis(Object.values(accounts).map(x=>{var _a;return x.type==="account"&&(_a=x.data[0])!=null&&_a.date?DateTime.fromISO(x.data[0].date):getLocalDateTime()}).reduce((acc,curr)=>Math.min(acc,(curr==null?void 0:curr.toMillis())??1/0),getLocalDateTime().toMillis()))},"useEarliestAccountEntry"),useFutureBonuses=__name(year2=>{const local=DateTime.local(),dates=useDates(year2),clusters2=useClusters(year2),config=useStore(store,x=>x.projectedWealth);return reactExports.useMemo(()=>{var _a,_b,_c;return[[dates.meritBonus,((_a=scaleCluster(findMostMostLikely(clusters2.meritBonus),1-config.bonusWitholdingsRate))==null?void 0:_a.median)??0],[dates.companyBonus,((_b=scaleCluster(findMostMostLikely(clusters2.companyBonus),1-config.bonusWitholdingsRate))==null?void 0:_b.median)??0],[dates.retirementBonus,((_c=findMostMostLikely(clusters2.retirementBonus))==null?void 0:_c.median)??0]].map(([payedOn,amount])=>local<payedOn?amount:0).reduce((acc,curr)=>acc+curr,0)},[dates.meritBonus,dates.companyBonus,dates.retirementBonus,clusters2.meritBonus,clusters2.companyBonus,clusters2.retirementBonus,config.bonusWitholdingsRate,local])},"useFutureBonuses"),useFutureWealth=__name(year2=>{var _a,_b;const bonuses=useFutureBonuses(year2),savings=useFutureSavings(year2),ssiTaxValue=useFutureSocialSecurity(year2),medicareTaxValue=useFutureMedicareTax(year2),retirementContribution=useFutureRetirementContributions(year2);return bonuses+savings.remaining+retirementContribution.remaining+(((_a=ssiTaxValue.min)==null?void 0:_a.remaining)??0)+(((_b=medicareTaxValue==null?void 0:medicareTaxValue.min)==null?void 0:_b.remaining)??0)},"useFutureWealth"),useFuturesWealth=__name(()=>{const year2=getLocalDateTime().year;return{[year2+1]:useFutureWealth(year2),[year2+2]:useFutureWealth(year2+1)+useFutureWealth(year2)}},"useFuturesWealth"),useTimeSeriesWealth=__name(year2=>{const localDateTime=getLocalDateTime(),earliest=useEarliestAccountEntry(),accounts=useStore(store,x=>x.wealth),futuresWealth=useFuturesWealth();return reactExports.useMemo(()=>{if(!earliest.isValid)return[];const dates=new Array(year2+2-earliest.year).fill(earliest.year).map((x,i)=>DateTime.fromObject({day:1,month:1,year:x+i}).startOf("day")),idx=findNearestIdxOnOrBefore(localDateTime,dates,x=>x);dates.some(x=>x.equals(localDateTime.startOf("day")))||dates.splice(idx+1,0,localDateTime);const futureBenchmarkIdx=idx;return dates.map(date=>{const accountWealth=Object.values(accounts).map(x=>{if(x.type==="mortgage"&&x.loan){const houseValue=findNearestOnOrBefore(date,x.data),balance=calcLoanBalance(date,x.loan);return calcEquity(x.loan.ownershipPct,houseValue==null?void 0:houseValue.value,balance,x.loan.principal)}else if(x.type==="account"){const entry=findNearestOnOrBefore(date,x.data);return(entry==null?void 0:entry.value)??0}return 0}).reduce((acc,curr)=>acc+curr,0),futureWealth=futuresWealth[date.year]??0;return{date,graphDate:date.toJSDate(),wealth:accountWealth+futureWealth}}).map((x,idx2,arr)=>{var _a,_b;if(x.date<=localDateTime){const benchmarkWealth2=(_a=arr[idx2-1])==null?void 0:_a.wealth;return benchmarkWealth2?{...x,yoyCash:x.wealth-benchmarkWealth2,yoyPct:x.wealth/benchmarkWealth2-1}:x}const benchmarkWealth=(_b=arr[futureBenchmarkIdx])==null?void 0:_b.wealth;return benchmarkWealth?{...x,yoyCash:x.wealth-benchmarkWealth,yoyPct:x.wealth/benchmarkWealth-1}:x})},[earliest.isValid,earliest.year,year2,localDateTime,accounts,futuresWealth])},"useTimeSeriesWealth"),WealthChart=__name(props=>{const dataYear=getLocalDateTime().year+1,{titleYear}=props,data=useTimeSeriesWealth(dataYear),offsetIdx=getLocalDateTime().year-titleYear+1,series=reactExports.useMemo(()=>[{type:"line",xKey:"graphDate",yKey:"wealth",yName:"Wealth",tooltip:{renderer:({datum,yKey,xKey})=>({content:`${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCash(datum[yKey])}`})}},{type:"line",xKey:"graphDate",yKey:"yoyCash",yName:"YoY ($)",tooltip:{renderer:({datum,yKey,xKey})=>({content:`${DateTime.fromJSDate(datum[xKey]).toISODate()} ${formatCash(datum[yKey])}`})}}],[]),options=reactExports.useMemo(()=>{var _a;return{theme:"ag-default-dark",title:{text:`${data[data.length-1-offsetIdx].date.toFormat(shortDate)} Projected wealth ${formatCashShort(((_a=data[data.length-1-offsetIdx])==null?void 0:_a.wealth)??0)}`},data,axes:[{type:"time",position:"bottom",label:{format:"%Y"}},{type:"number",position:"left",nice:!1}],series}},[data,series,offsetIdx]);return jsx(AgChartsReact,{options})},"WealthChart"),columnConfig=[{headerName:"Date",colId:"date",sort:"desc",valueFormatter:x=>{var _a;return(_a=x.value)==null?void 0:_a.toFormat(shortDate)},valueGetter:x=>{var _a;return(_a=x.data)==null?void 0:_a.date},cellRenderer:x=>{const systemYear=getLocalDateTime().year;return jsxs(Stack$1,{direction:"row",alignItems:"center",children:[x.valueFormatted," ",x.value&&x.value>getLocalDateTime()&&jsx(Tooltip,{title:"Future Event",children:jsx(default_1$1,{htmlColor:"yellow"})}),x.value&&x.value.equals(DateTime.fromObject({day:1,month:1,year:systemYear}))&&jsx(Tooltip,{title:"Benchmark for current and future entries",children:jsx(default_1$3,{htmlColor:"yellow"})})]})}},{type:"numericColumn",headerName:"Wealth",colId:"wealth",valueGetter:x=>{var _a;return(_a=x.data)==null?void 0:_a.wealth},cellRenderer:x=>x.value&&jsx(Cash,{value:x.value,placement:"left"})},{colId:"yoy-cash",type:"numericColumn",headerName:"YoY ($)",valueGetter:x=>{var _a;return(_a=x.data)==null?void 0:_a.yoyCash},cellRenderer:x=>x.value&&jsx(Cash,{value:x.value,placement:"left"})},{colId:"yoy-percent",type:"numericColumn",headerName:"YoY (%)",valueGetter:x=>{var _a;return(_a=x.data)==null?void 0:_a.yoyPct},cellRenderer:x=>x.value&&jsx(Percent,{value:x.value}),minWidth:60}],WealthTable=__name(()=>{const dataYear=getLocalDateTime().year+1,data=useTimeSeriesWealth(dataYear);return jsx(Box$1,{height:"100%",width:"100%",children:jsx(AgGrid,{id:"time-series-wealth",rowData:data,columnDefs:columnConfig,autoSizeStrategy:{type:"fitGridWidth"},onRowDataUpdated:e=>e.api.sizeColumnsToFit()})})},"WealthTable"),ProjectedWealth=__name(()=>{const localTime=getLocalDateTime(),[year2,setYear]=reactExports.useState(localTime.year);return jsxs(Box,{display:"flex",flexDirection:"row",height:"100%",width:"100%",gap:1,children:[jsx(Box,{flex:"0 1 auto",height:"100%",overflow:"auto",children:jsx(FutureEvents,{onChange:setYear,year:year2})}),jsx(Box,{flex:"1 1 auto",overflow:"auto",children:jsxs(Stack,{spacing:2,height:"100%",width:"100%",children:[jsx(WealthChart,{titleYear:year2}),jsx(WealthTable,{})]})})]})},"ProjectedWealth"),CountDown=__name(props=>{const{timeMs}=props,[time,setTime]=reactExports.useState(timeMs);return reactExports.useEffect(()=>{const interval=setInterval(()=>{setTime(prev=>{const remaining=prev-100;return remaining<0?(clearInterval(interval),0):remaining})},100);return()=>clearInterval(interval)},[props.timeMs]),jsx(LinearProgress,{value:time/timeMs*100,variant:"determinate",color:"inherit"})},"CountDown"),SafetyButton=__name(props=>{const{inactiveLabel,activatingLabel,activeLabel,confirmedLabel,onConfirm,icon,disabled,...rest}=props,[safetyState,setSafetyState]=reactExports.useState("inactive");return reactExports.useEffect(()=>{safetyState==="active"?setTimeout(()=>{setSafetyState(prev=>prev==="active"?"inactive":prev)},3200):safetyState==="activating"?setTimeout(()=>{setSafetyState("active")},1e3):safetyState==="confirmed"&&setTimeout(()=>{setSafetyState("inactive")},3200)},[safetyState]),jsx(Box,{sx:{minWidth:130},children:jsx(Button,{...rest,sx:{height:"100%",width:"100%"},disabled:disabled||safetyState==="activating"||safetyState==="confirmed",size:"small",onClick:()=>{safetyState==="inactive"&&setSafetyState("activating"),safetyState==="active"&&(onConfirm==null||onConfirm(),setSafetyState("confirmed"))},children:jsxs(Stack,{children:[jsxs(Stack,{direction:"row",children:[icon,safetyState==="inactive"&&inactiveLabel,safetyState==="activating"&&activatingLabel,safetyState==="active"&&activeLabel,safetyState==="confirmed"&&confirmedLabel]}),safetyState==="active"&&jsx(CountDown,{timeMs:2800}),safetyState==="activating"&&jsx(CountDown,{timeMs:500})]})})})},"SafetyButton"),downloadJson=__name((filename,storeData)=>{const data=JSON.stringify(storeData,null,2),link=document.createElement("a");link.download=filename;const blob=new Blob([data],{type:"application/json"});link.href=window.URL.createObjectURL(blob),link.click()},"downloadJson"),useExport=__name(()=>{const storeData=useStore(store);return reactExports.useCallback(()=>{downloadJson(`wealth-tracker-${getLocalDateTime().toFormat(shortDate)}.json`,storeData)},[storeData])},"useExport");function selectFile(contentType){return new Promise(resolve=>{const input=document.createElement("input");input.type="file",input.multiple=!1,input.accept=contentType,input.onchange=()=>{const files=Array.from(input.files??[]);resolve(files[0])},input.click()})}__name(selectFile,"selectFile");const useImport=__name(()=>reactExports.useCallback(()=>new Promise((resolve,reject)=>{selectFile("application/json").then(file=>{const reader=new FileReader;reader.readAsDataURL(file),reader.onload=readerEvent=>{var _a,_b;const content=(_b=(_a=readerEvent.target)==null?void 0:_a.result)==null?void 0:_b.toString();if(content){const data=JSON.parse(window.atob(content.split(",")[1]));if(storeValidator$1.safeParse(data).success)store.setState(()=>data),resolve();else try{migration(data),store.setState(()=>data),resolve()}catch(err){console.log("error",err),console.log("invalid data",data),reject(err)}}}})}),[]),"useImport"),useStoreDataError=__name(()=>{const invalidData=localStorage.getItem("store-invalid");return reactExports.useMemo(()=>{if(!invalidData)return{hadError:!1};const jsonInvalidData=JSON.parse(invalidData),validated=storeValidator$1.safeParse(jsonInvalidData);return{hadError:!!invalidData,invalidData:jsonInvalidData,parseError:invalidData&&!validated.success?validated.error:void 0,resetError:()=>{localStorage.removeItem("store-invalid")}}},[invalidData])},"useStoreDataError"),setProjectedWealth=__name((configName,value)=>{store.setState(prev=>create(prev,next=>{next.projectedWealth[configName]=value}))},"setProjectedWealth"),ConfigEntry=__name(props=>{const{configName,label,variant="cash"}=props,[error,setError]=reactExports.useState(!1),isPercent=variant==="percent",onchange=reactExports.useCallback(input=>{let value2=+input;const isNan=Number.isNaN(value2);setError(isNan),!isNan&&(isPercent&&(value2/=100),setProjectedWealth(configName,value2))},[configName,isPercent]),value=useStore(store,x=>x.projectedWealth[configName]),defaultValue=isPercent?value*100:value;return jsx(TextField,{error,variant:"outlined",InputProps:{startAdornment:jsx(InputAdornment,{position:"start",children:isPercent?"%":"$"})},defaultValue:defaultValue.toFixed(isPercent?2:0),type:"numeric",label,onChange:event=>{onchange(event.target.value)}})},"ConfigEntry"),Config=__name(()=>jsxs(Stack$1,{spacing:2,children:[jsx(ConfigEntry,{configName:"savingsPerMonth",label:"Monthly Saving Rate"}),jsx(ConfigEntry,{configName:"retirementContributionPaycheck",label:"Retirement Contribution Per Paycheck"}),jsx(ConfigEntry,{configName:"bonusWitholdingsRate",label:"Bonus Witholdings Rate",variant:"percent"}),jsxs(Stack$1,{direction:"row",spacing:2,width:"100%",sx:{"& > *":{flex:1}},children:[jsx(ConfigEntry,{configName:"socialSecurityLimit",label:"Social Security Tax Limit"}),jsx(ConfigEntry,{configName:"socialSecurityTaxRate",label:"Social Security Tax",variant:"percent"})]}),jsxs(Stack$1,{direction:"row",spacing:2,width:"100%",sx:{"& > *":{flex:1}},children:[jsx(ConfigEntry,{configName:"medicareSupplementalTaxThreshold",label:"Medicare Supplemental Threshold"}),jsx(ConfigEntry,{configName:"medicareSupplementalTaxRate",label:"Medicare Supplemental Tax",variant:"percent"})]})]}),"Config");function InvalidDataDialog(props){const{open,error,children}=props;return jsx(Fragment,{children:jsxs(Dialog,{open:!!open,children:[jsx(DialogTitle,{id:"alert-dialog-title",children:"Error Loading Data"}),jsx(DialogContent,{children:jsx(DialogContentText,{id:"alert-dialog-description",children:jsx(Box,{maxHeight:500,overflow:"auto",children:jsxs(Table,{children:[jsx(TableHead,{children:jsxs(TableRow,{children:[jsx(TableCell,{children:"Error Message"}),jsx(TableCell,{children:"Path"})]})}),jsx(TableBody,{children:error==null?void 0:error.issues.map((x,idx)=>jsxs(TableRow,{children:[jsx(TableCell,{children:x.message}),jsx(TableCell,{children:x.path.join(".")})]},idx))})]})})})}),jsx(DialogActions,{children})]})})}__name(InvalidDataDialog,"InvalidDataDialog");const App=__name(()=>{const[tab,setTab]=reactExports.useState("projected-wealth"),onExport=useExport(),onImport=useImport(),{hadError,parseError,resetError,invalidData}=useStoreDataError(),[error,setError]=reactExports.useState(parseError),[isOpen,setIsOpen]=reactExports.useState(hadError),[isSettingsOpen,setIsSettingsOpen]=reactExports.useState(!1);return jsxs(Fragment,{children:[jsx(Modal,{open:isSettingsOpen,onClose:()=>setIsSettingsOpen(!1),children:jsx(Paper,{sx:{padding:2,width:600,top:"50%",left:"50%",transform:"translate(-50%, -50%)",position:"absolute"},children:jsxs(Stack,{spacing:2,children:[jsxs(Box,{display:"flex",children:[jsx(Typography,{variant:"h5",children:"Configuration"}),jsx(IconButton,{sx:{marginLeft:"auto"},onClick:()=>setIsSettingsOpen(!1),children:jsx(default_1$4,{})})]}),jsx(Config,{})]})})}),jsxs(InvalidDataDialog,{open:isOpen,error,children:[hadError&&jsxs(Fragment,{children:[jsx(Button,{color:"error",onClick:()=>{setIsOpen(!1),resetError==null||resetError(),resetStore()},children:"Reset"}),jsx(Button,{onClick:()=>{downloadJson(`invalid-data-wealth-tracker-${getLocalDateTime().toFormat(shortDate)}.json`,invalidData)},children:"Download Data"}),jsx(Button,{onClick:()=>{setIsOpen(!1),resetError==null||resetError()},children:"Ignore"})]}),!hadError&&jsx(Button,{onClick:()=>{setIsOpen(!1)},children:"Cancel"})]}),jsxs(Stack,{direction:"row",children:[jsxs(Tabs,{value:tab,onChange:(_,value)=>setTab(value),children:[jsx(Tab,{value:"wealth",label:"Total Wealth"}),jsx(Tab,{value:"projected-income",label:"Projected Income"}),jsx(Tab,{value:"projected-wealth",label:"Projected Wealth"})]}),jsxs(Box,{marginLeft:"auto",gap:2,display:"flex",children:[jsx(Button,{onClick:()=>setIsSettingsOpen(!0),children:jsx(default_1$5,{})}),jsx(Button,{onClick:()=>onImport().catch(err=>{setIsOpen(!0),setError(err)}),children:"Import"}),jsx(Button,{onClick:onExport,children:"Export"}),jsx(SafetyButton,{onConfirm:resetStore,inactiveLabel:"Reset",activatingLabel:"Activating",activeLabel:"Confirm",confirmedLabel:"confirmed",color:"error",icon:jsx(default_1,{})})]})]}),jsxs(Box,{padding:2,height:"95%",width:"100%",children:[tab==="wealth"&&jsx(NetWealth,{}),tab==="projected-income"&&jsx(ProjectedIncome,{}),tab==="projected-wealth"&&jsx(ProjectedWealth,{})]})]})},"App");DateTime.fromObject({month:12,day:1,year:2023});const getScenarioSize=__name((year2,projectedIncome2)=>{const timeSeries=projectedIncome2.timeSeries,mostRecentPay=timeSeries.paycheck.filter(x=>DateTime.fromISO(x.date).year>year2-3).at(-1)??timeSeries.paycheck.at(-1);if(!mostRecentPay)return 0;const yearsToGenerate=Math.max(year2-DateTime.fromISO(mostRecentPay.date).year,1);return Math.pow(timeSeries.meritIncreasePct.length,yearsToGenerate)*timeSeries.companyBonus.length},"getScenarioSize"),currentYear=getLocalDateTime().year,maxYear=(()=>{const projectedIncome2=store.state.projectedIncome;for(let i=currentYear;i<=currentYear+10;i++)if(getScenarioSize(i,projectedIncome2)>2499)return Math.max(currentYear,i-1);return currentYear+10})(),worker=new Worker(new URL("/wealth-tracker/assets/worker-CW04fx5w.js",import.meta.url),{type:"module"});worker.onmessage=event=>{const isLoading=event.data.year!==maxYear;scenarioStore.setState(prev=>create(prev,x=>{x.scenarios[event.data.year]=event.data.scenarios,x.loading=isLoading,x.maxYear=Math.max(event.data.year,x.maxYear),x.minYear=Math.min(event.data.year,x.minYear)}))};const loadAllScenarios=__name(()=>{var _a;const projectedIncome2=store.state.projectedIncome,first=(_a=projectedIncome2.timeSeries.paycheck[1])==null?void 0:_a.date,oldestYear=(first?DateTime.fromISO(first):getLocalDateTime()).year;worker.postMessage({year:2024,projectedIncome:projectedIncome2});for(let i=oldestYear;i<currentYear;i++)worker.postMessage({year:i,projectedIncome:projectedIncome2});for(let i=currentYear;i<=maxYear;i++)worker.postMessage({year:i,projectedIncome:projectedIncome2})},"loadAllScenarios");loadAllScenarios();let priorProjectedIncome=store.state.projectedIncome;store.subscribe(()=>{priorProjectedIncome!==store.state.projectedIncome&&(scenarioStore.setState(()=>({loading:!1,scenarios:{},maxYear:currentYear,minYear:currentYear})),priorProjectedIncome=store.state.projectedIncome,loadAllScenarios())});const darkTheme=createTheme({palette:{mode:"dark"}});client.createRoot(document.getElementById("root")).render(jsx(React.StrictMode,{children:jsx(ErrorBoundary,{fallbackRender:props=>jsxs(Fragment,{children:[jsx("div",{style:{backgroundColor:"#FFF"},children:props.error.message}),jsx("div",{style:{backgroundColor:"#FFF"},children:props.error.stackTrace})]}),children:jsx(LocalizationProvider,{dateAdapter:AdapterLuxon,children:jsxs(ThemeProvider,{theme:darkTheme,children:[jsx(CssBaseline,{}),jsx(App,{})]})})})}));
//# sourceMappingURL=index-CTGJkf1S.js.map
